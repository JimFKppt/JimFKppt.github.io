(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{561:function(t,e,s){"use strict";s.r(e);var a=s(21),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("Java provides the "),s("strong",[t._v("collections framework")]),t._v(" which consists of classes and interfaces for commonly reusable data structures such as lists, dynamic arrays, sets, and so on. The framework has a unified architecture for representing and manipulating collections, enabling collections to be used independently of implementation details via its interfaces.")]),t._v(" "),s("p",[t._v("The framework includes:")]),t._v(" "),s("ul",[s("li",[t._v("interfaces that represent different types of collections;")]),t._v(" "),s("li",[t._v("primary implementations of the interfaces;")]),t._v(" "),s("li",[t._v('legacy implementations from earlier releases (known as "old collections");')]),t._v(" "),s("li",[t._v("special-purpose implementations (like immutable collections);")]),t._v(" "),s("li",[t._v("algorithms represented by static methods that perform useful operations on collections.")])]),t._v(" "),s("p",[t._v("In this topic, we will only consider the basic interfaces from the collections framework placed in the "),s("code",[t._v("java.util")]),t._v(" package.")]),t._v(" "),s("h2",{attrs:{id:"commonly-used-interfaces"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#commonly-used-interfaces"}},[t._v("#")]),t._v(" Commonly used interfaces")]),t._v(" "),s("p",[t._v("There are two root generic interfaces "),s("code",[t._v("Collection<E>")]),t._v(" and "),s("code",[t._v("Map<K,V>")]),t._v(", and some more specific interfaces to represent different types of collections.")]),t._v(" "),s("p",[s("strong",[s("img",{attrs:{src:"https://ucarecdn.com/7592c5a5-1adb-4f91-8a83-15e0c6dfbe4b/",alt:"img"}})])]),t._v(" "),s("p",[t._v("The interface "),s("code",[t._v("Collection<E>")]),t._v(" represents an abstract collection, which is a container for objects of the same type. It provides some common methods for all other types of collections.")]),t._v(" "),s("p",[t._v("The interfaces "),s("code",[t._v("List<E>")]),t._v(", "),s("code",[t._v("Set<E>")]),t._v(", "),s("code",[t._v("Queue<E>")]),t._v(", "),s("code",[t._v("SortedSet<E>")]),t._v(", and "),s("code",[t._v("Deque<E>")]),t._v(" represent different types of collections. You cannot directly create an object of them since they are just interfaces. But each of them has several implementations. As an example, the "),s("code",[t._v("ArrayList")]),t._v(" class, that represents a resizable array, is a primary representation of the "),s("code",[t._v("List<E>")]),t._v(" interface. Other interfaces, as well as their implementations, will be considered in the following topics.")]),t._v(" "),s("p",[t._v("Another root interface is "),s("code",[t._v("Map<K,V>")]),t._v(" that represents a map (or dictionary) for storing "),s("em",[t._v("key-value pairs")]),t._v(" where "),s("code",[t._v("K")]),t._v(" is the type of keys and "),s("code",[t._v("V")]),t._v(" is the type of stored values. In the real world, a good example of a map is a phone book where keys are names of your friends and values are their phones. The "),s("code",[t._v("Map<K,V>")]),t._v(" interface "),s("strong",[t._v("is not")]),t._v(" a subtype of the "),s("code",[t._v("Collection")]),t._v(" interface, but maps are often considered as collections since they are part of the collection framework and have similar methods.")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),s("p",[t._v("Note, the "),s("code",[t._v("Collection")]),t._v(" and "),s("code",[t._v("Map")]),t._v(" interfaces do not extend each other.")])]),t._v(" "),s("h2",{attrs:{id:"the-collection-interface"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#the-collection-interface"}},[t._v("#")]),t._v(" The Collection interface")]),t._v(" "),s("p",[t._v("Here are common methods provided by the "),s("code",[t._v("Collection")]),t._v(" interface.")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("int size()")]),t._v(" returns the number of elements in this collection;")]),t._v(" "),s("li",[s("code",[t._v("boolean isEmpty()")]),t._v(" returns "),s("code",[t._v("true")]),t._v(" if this collection contains no elements;")]),t._v(" "),s("li",[s("code",[t._v("boolean contains(Object o)")]),t._v(" returns "),s("code",[t._v("true")]),t._v(" if this collection contains the specified element;")]),t._v(" "),s("li",[s("code",[t._v("boolean add(E e)")]),t._v(" adds an element to the collection. Returns "),s("code",[t._v("true")]),t._v(", if the element was added, else returns "),s("code",[t._v("false")]),t._v(";")]),t._v(" "),s("li",[s("code",[t._v("boolean remove(Object o)")]),t._v(" removes a single instance of the specified element;")]),t._v(" "),s("li",[s("code",[t._v("boolean removeAll(Collection<?> collection)")]),t._v(" removes elements from this collection that are also contained in the specified collection;")]),t._v(" "),s("li",[s("code",[t._v("void clear()")]),t._v(" removes all elements from this collection.")])]),t._v(" "),s("p",[t._v("It is possible to refer to any particular collection via this base interface since, as you know, the superclass can be used to refer to any subclass object derived from that superclass.")]),t._v(" "),s("p",[t._v("Let's create "),s("code",[t._v("languages")]),t._v(" collection and add three elements to it:")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Collection")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" languages "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nlanguages"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"English"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nlanguages"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Deutsch"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nlanguages"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Français"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("languages"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("p",[t._v("This approach allows you to replace the concrete collection at any time without changing the code that uses it. It also fosters software reuse by providing a standard interface for collections and algorithms to manipulate them. It may sound complicated now, but the more you work with collections, the more understandable it will become.")]),t._v(" "),s("p",[t._v("It is impossible to get an element by index via the "),s("code",[t._v("Collection")]),t._v(" interface because it is very abstract and does not provide such a method. But if it doesn't matter for you which particular collection to use, you can work via this interface.")]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),s("p",[t._v("It is important to understand that the order of the elements in the "),s("code",[t._v("ArrayList")]),t._v(" is still preserved. We simply cannot call the "),s("code",[t._v("get")]),t._v(" method via the "),s("code",[t._v("Collection")]),t._v(" interface.")])]),t._v(" "),s("p",[t._v("Every collection can be cast to a string by using "),s("code",[t._v("toString")]),t._v(" and compared with another collection using the "),s("code",[t._v("equals")]),t._v(" method. These methods come from "),s("code",[t._v("Object")]),t._v(" and their behavior depends on elements stored in the collection and the type of the collection itself.")]),t._v(" "),s("h2",{attrs:{id:"mutable-and-immutable-collections"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mutable-and-immutable-collections"}},[t._v("#")]),t._v(" Mutable and Immutable collections")]),t._v(" "),s("p",[t._v("All collections can be divided into two large groups: mutable and immutable. They both implement the "),s("code",[t._v("Collection<E>")]),t._v(" interface, but immutable collections will throw "),s("code",[t._v("UnsupportedOperationException")]),t._v(" when trying to invoke some methods which change them: for example, "),s("code",[t._v("add")]),t._v(", "),s("code",[t._v("remove")]),t._v(", "),s("code",[t._v("clear")]),t._v(".")]),t._v(" "),s("p",[t._v("In the next topics, we will consider how to create and when to use immutable collections. Now just remember that they are present here.")]),t._v(" "),s("h2",{attrs:{id:"iterating-over-collections"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#iterating-over-collections"}},[t._v("#")]),t._v(" Iterating over collections")]),t._v(" "),s("p",[t._v("If you would like to iterate over all elements of "),s("em",[t._v("any")]),t._v(" collection, you can use the "),s("em",[t._v("for-each")]),t._v(" style loop. Let's return to our "),s("code",[t._v("languages")]),t._v(" collection:")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" lang "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" languages"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lang"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("This code prints all elements of this collection.")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("English")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Deutsch")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Fran")]),t._v("çais\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("The order of elements when iterating depends on the type of particular collection that is actually being used.")]),t._v(" "),s("p",[t._v("If you are already familiar with method references or lambda expressions, you can use another style for iterations using the "),s("code",[t._v("forEach(Consumer<T> consumer)")]),t._v(" method:")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("languages"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// with method reference")]),t._v("\nlanguages"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("elem "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("elem"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// with lambda expression")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("This looks very readable but is optional for use.")]),t._v(" "),s("h2",{attrs:{id:"removing-elements"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#removing-elements"}},[t._v("#")]),t._v(" Removing elements")]),t._v(" "),s("p",[t._v("It is also possible to remove elements from a mutable collection (like "),s("code",[t._v("ArrayList")]),t._v(").")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("languages"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("remove")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Deutsch"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("languages"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),s("p",[t._v("Note, the "),s("code",[t._v("remove")]),t._v(" as well as the "),s("code",[t._v("contains")]),t._v(" methods rely on the method "),s("code",[t._v("equals")]),t._v(" of the elements. If you store non-standard classes in the collection, "),s("code",[t._v("equals")]),t._v(" together with "),s("code",[t._v("hashCode")]),t._v(" should be overridden.")])]),t._v(" "),s("p",[t._v("Again, if you are already familiar with lambda expressions, you can invoke the "),s("code",[t._v("removeIf")]),t._v(" method to remove all of the elements that satisfy the given predicate:")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("languages"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("removeIf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lang "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" lang"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("startsWith")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"E"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// it removes English")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("languages"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("Use any way you like.")]),t._v(" "),s("h2",{attrs:{id:"conclusion"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#conclusion"}},[t._v("#")]),t._v(" Conclusion")]),t._v(" "),s("p",[t._v("Java collections framework provides a set of interfaces with common methods for different types of collections. We've considered the "),s("code",[t._v("Collection<E>")]),t._v(" interface which is an abstract container for storing values of the same type. Any particular collection (excluding maps) can be used through it in a program and can be iterated through by using the "),s("em",[t._v("for-each")]),t._v(" loop or the "),s("code",[t._v("forEach")]),t._v(" method.")]),t._v(" "),s("p",[t._v("For now, we confine ourselves to this much. All other interfaces including "),s("code",[t._v("Map<K,V>")]),t._v(" will be considered in the following topics.")])])}),[],!1,null,null,null);e.default=n.exports}}]);