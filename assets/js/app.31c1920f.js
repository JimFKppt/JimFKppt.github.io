(window.webpackJsonp=window.webpackJsonp||[]).push([[0],[]]);!function(e){function n(n){for(var a,r,s=n[0],l=n[1],c=n[2],d=0,u=[];d<s.length;d++)r=s[d],Object.prototype.hasOwnProperty.call(i,r)&&i[r]&&u.push(i[r][0]),i[r]=0;for(a in l)Object.prototype.hasOwnProperty.call(l,a)&&(e[a]=l[a]);for(h&&h(n);u.length;)u.shift()();return o.push.apply(o,c||[]),t()}function t(){for(var e,n=0;n<o.length;n++){for(var t=o[n],a=!0,s=1;s<t.length;s++){var l=t[s];0!==i[l]&&(a=!1)}a&&(o.splice(n--,1),e=r(r.s=t[0]))}return e}var a={},i={1:0},o=[];function r(n){if(a[n])return a[n].exports;var t=a[n]={i:n,l:!1,exports:{}};return e[n].call(t.exports,t,t.exports,r),t.l=!0,t.exports}r.e=function(e){var n=[],t=i[e];if(0!==t)if(t)n.push(t[2]);else{var a=new Promise((function(n,a){t=i[e]=[n,a]}));n.push(t[2]=a);var o,s=document.createElement("script");s.charset="utf-8",s.timeout=120,r.nc&&s.setAttribute("nonce",r.nc),s.src=function(e){return r.p+"assets/js/"+({}[e]||e)+"."+{2:"d2ef96c7",3:"11d40523",4:"31110e65",5:"9542466f",6:"0fd3b844",7:"c1f1f995",8:"508921ad",9:"ba39813a",10:"df464c49",11:"84f23e56",12:"6d3d6f91",13:"9c758483",14:"633542a0",15:"1ebb3cfd",16:"94ef4ffd",17:"e0fbd82e",18:"4139eae9",19:"50535ac7",20:"37c78ae7",21:"39be5c95",22:"e9455911",23:"168ddc59",24:"ae0bacd1",25:"64819e14",26:"6856fed3",27:"2fca825f",28:"9626854b",29:"cedd6b03",30:"892daf0c",31:"66dd69da",32:"5a37fa0f",33:"14f1735d",34:"9294c37c",35:"68c92408",36:"e362dbea",37:"d535be57",38:"6c7423cb",39:"406e799f",40:"e5521cd1",41:"4e058bf9",42:"6a6edfeb",43:"06cc1e1e",44:"35d688b6",45:"8b91f5ce",46:"d225006e",47:"7bcbdf60",48:"23cf4f63",49:"1acc3651",50:"b0dd58d3",51:"bada5c6b",52:"049d3a99",53:"16254f65",54:"a725b36c",55:"647ffed1",56:"a29fa569",57:"a599eee8",58:"6f42bddf",59:"5025a642",60:"9dc21c30",61:"8705e761",62:"3006d714",63:"4742f7dc",64:"a3851d9e",65:"84a1d0e3",66:"b93ace3e",67:"cf67df15",68:"9a8e592b",69:"9a07b294",70:"6d32713a",71:"80ae685d",72:"e0b3dbe5",73:"2749f8c2",74:"449b24cc",75:"b061273a",76:"94f4102c",77:"346fb76a",78:"f69aa238",79:"cd9aa627",80:"fec0fc10",81:"a4d7aacd",82:"1697d327",83:"670826d2",84:"cfed99ad",85:"900d703b",86:"5f371170",87:"59e39270",88:"45b1974b",89:"53d31a70",90:"90deaf29",91:"633a1c5b",92:"4933cdf1",93:"7286a7ab",94:"46e0f37e",95:"607fe667",96:"9775e700",97:"be953fe7",98:"97482f44",99:"a7d659c6",100:"41eaf191",101:"8991479e",102:"98cb63dd",103:"386c4291",104:"67f55f29",105:"ea7114f6",106:"cb31d92e",107:"51efea45",108:"7a09fe8a",109:"54067dbc",110:"7ddf0ba8",111:"aae492c5",112:"9f8568a6",113:"42709ec9",114:"840902f5",115:"ca3707f4",116:"67d5079d",117:"1c522b22",118:"ad6b612e",119:"4c0b30d9",120:"479282bc",121:"6decb950",122:"119cc071",123:"81e51f86",124:"f24543ec",125:"c5932329",126:"83971a90",127:"e1d32935",128:"e0a40af8",129:"7f363243",130:"9da358c5",131:"71b13f80",132:"c6e9ef98",133:"c78b11ce",134:"c2ca7533",135:"aac1afed",136:"13a5d31e",137:"e9b10f00",138:"04f96319",139:"9e0e7482",140:"8e0bb38c",141:"0922ec04",142:"b1a0d188",143:"5d27fe01",144:"c1bf186f",145:"8e8619be",146:"faaef5c7",147:"0efdf171",148:"ade6fa1e",149:"8518be9f",150:"0f150113",151:"52c4309b",152:"548608c9",153:"36493431",154:"f49fba72",155:"5a5c1c4c",156:"03c84b85",157:"583b7916",158:"d8959817",159:"7e714c29",160:"ce35186f",161:"d097cae4",162:"ca07cb9a",163:"46abc07f",164:"f17c1277",165:"47c89660",166:"5a670d54",167:"4d5c688f",168:"68a82cb3",169:"cdf40dbb",170:"b9ffa89a",171:"33e9c816",172:"fbafe81f",173:"4b806627",174:"3b3baf9f",175:"dc70e7ae",176:"3350f01a",177:"4be54968",178:"3cfc74d8",179:"8667d957",180:"5fb60996",181:"66a78a80",182:"3262a88a",183:"4f955089",184:"7ea16e00",185:"0521f28c",186:"45652ca2",187:"fd4213b5",188:"856da568",189:"3f61bd22",190:"4548fc95",191:"453520c9",192:"8ad3bd33",193:"f5544254",194:"b890bebc",195:"a9b3c8f0",196:"81fc67e7",197:"fa392c47",198:"a6f8e037",199:"4ac33491",200:"b1c8625b",201:"1a6e35eb",202:"3feb63a8",203:"7d150a67",204:"eb3fa937",205:"3d03dcf4",206:"41e76d5e",207:"158ff59b",208:"92f719ef",209:"2f39aaab",210:"b78945f4",211:"10035af0",212:"63383e9e",213:"40b150dc",214:"05835b99",215:"f3697673",216:"c45eb26d",217:"62cbd8f4",218:"533298bc",219:"25ae2318",220:"18c34686",221:"56976d78",222:"630cdba2",223:"a27da6e2",224:"97547e5c",225:"9f31de06",226:"36647532",227:"3907069a",228:"0d220a40",229:"65c052d9",230:"62417625",231:"0ea6501a",232:"e4f18f86",233:"a5c4ba17",234:"d493a25b",235:"7dd3c647",236:"47925e4d",237:"263663ec",238:"0b0f6973",239:"cd8aba43",240:"60f064b6",241:"57bc6707",242:"8ed04b08",243:"5467e551",244:"b4c37c5a",245:"8a8864aa",246:"910cb8a8",247:"b65552ed",248:"fa194dfd",249:"25d34c5d",250:"3369c127",251:"d83869d8",252:"ecdb9e85",253:"76a785c1",254:"3efa848e",255:"71d26e7c",256:"6aeb5fae",257:"ec0598bb",258:"73b510a4",259:"c3bb91c7",260:"b1b527e5",261:"1fa19a93",262:"5d964fc1",263:"5d931aeb",264:"7c9aaa6d",265:"55a42242",266:"194ca808",267:"17d892bc",268:"999a429c",269:"974853d9",270:"059bf72a",271:"acb2c198",272:"86fc0260",273:"f93a6d4a",274:"99fd255b",275:"a23f8690",276:"64c62c29",277:"70845061",278:"780b7ef0",279:"a73b1547",280:"1f02faee",281:"146f9099",282:"89dc1a25",283:"d9f3712c",284:"4338887e",285:"0184830f",286:"4fe1a337",287:"c471f3ac",288:"9f5af859",289:"346d7a30",290:"e3e3f2ce",291:"b357125e",292:"6d13223a",293:"f19fb04e",294:"a95ceced",295:"87effaad",296:"adf0b0e1",297:"2d509b9f",298:"8c79e520",299:"0f94767a",300:"3aa184b7",301:"a9a98ab0",302:"513b7a54",303:"0a989d66",304:"ce41ac72",305:"e9f18ee8",306:"6fdbd3f7",307:"0cd1d556",308:"2bc8dca2",309:"dc797fd1",310:"f923c58b",311:"2b0ff03e",312:"0f2d0195",313:"bbab5e39",314:"bc653128",315:"31490c5f",316:"f6691f8f",317:"2e93f060",318:"23b6136b",319:"f6ce812d",320:"bd31073d",321:"a27db1c3",322:"c98984ec",323:"df31acbd",324:"e3395669",325:"22ac37a2",326:"2ea47794",327:"b2329ee2",328:"2d2720b0",329:"8eef0079",330:"5c4bebdb",331:"0b4b6552",332:"40d8ed58",333:"92e5b2c5",334:"b225f050",335:"34ced90d",336:"e08b1774",337:"53975d22",338:"944a4dc9",339:"7c8ccfa7",340:"8063ebe5",341:"b57f7bf5",342:"4c3c9f2d",343:"62d95f14",344:"00d9372d",345:"eb40f535",346:"e3e7d51f",347:"0a8a497c",348:"e9ea85c2",349:"7e49fb2c",350:"7696a8c5",351:"e406ce82",352:"8069c4a3",353:"a9344711",354:"3e89c2f1",355:"c9d229a5",356:"95909a3f",357:"e6fb3aca",358:"48c07e16",359:"c262e5ca",360:"3f61a7ba",361:"93d4c97b",362:"a7b554c1",363:"24361741",364:"31576166",365:"7f336501",366:"4658830e",367:"58cf7c65",368:"1ecee841",369:"794334ba",370:"0af271a4",371:"bb71f49d",372:"89717026",373:"b69b00ab",374:"a2ee69f6",375:"7e1e40be",376:"0b15f631",377:"b488f75d",378:"ef326ec8",379:"5e541c57",380:"77eecf98",381:"ee8fbd97",382:"5986a2a5",383:"37e410f8",384:"e284dea8"}[e]+".js"}(e);var l=new Error;o=function(n){s.onerror=s.onload=null,clearTimeout(c);var t=i[e];if(0!==t){if(t){var a=n&&("load"===n.type?"missing":n.type),o=n&&n.target&&n.target.src;l.message="Loading chunk "+e+" failed.\n("+a+": "+o+")",l.name="ChunkLoadError",l.type=a,l.request=o,t[1](l)}i[e]=void 0}};var c=setTimeout((function(){o({type:"timeout",target:s})}),12e4);s.onerror=s.onload=o,document.head.appendChild(s)}return Promise.all(n)},r.m=e,r.c=a,r.d=function(e,n,t){r.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:t})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,n){if(1&n&&(e=r(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(r.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var a in e)r.d(t,a,function(n){return e[n]}.bind(null,a));return t},r.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(n,"a",n),n},r.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},r.p="/",r.oe=function(e){throw console.error(e),e};var s=window.webpackJsonp=window.webpackJsonp||[],l=s.push.bind(s);s.push=n,s=s.slice();for(var c=0;c<s.length;c++)n(s[c]);var h=l;o.push([245,0]),t()}([function(e,n){var t=function(e){return e&&e.Math==Math&&e};e.exports=t("object"==typeof globalThis&&globalThis)||t("object"==typeof window&&window)||t("object"==typeof self&&self)||t("object"==typeof global&&global)||function(){return this}()||Function("return this")()},function(e,n,t){var a=t(0),i=t(37).f,o=t(28),r=t(14),s=t(117),l=t(123),c=t(110);e.exports=function(e,n){var t,h,d,u,m,p=e.target,g=e.global,f=e.stat;if(t=g?a:f?a[p]||s(p,{}):(a[p]||{}).prototype)for(h in n){if(u=n[h],d=e.noTargetGet?(m=i(t,h))&&m.value:t[h],!c(g?h:p+(f?".":"#")+h,e.forced)&&void 0!==d){if(typeof u==typeof d)continue;l(u,d)}(e.sham||d&&d.sham)&&o(u,"sham",!0),r(t,h,u,e)}}},function(e,n,t){var a=t(66),i=Function.prototype,o=i.bind,r=i.call,s=a&&o.bind(r,r);e.exports=a?function(e){return e&&s(e)}:function(e){return e&&function(){return r.apply(e,arguments)}}},function(e,n){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,n){e.exports=function(e){return"function"==typeof e}},function(e,n,t){var a=t(127),i=t(14),o=t(265);a||i(Object.prototype,"toString",o,{unsafe:!0})},function(e,n,t){var a=t(0),i=t(51),o=t(9),r=t(86),s=t(52),l=t(160),c=i("wks"),h=a.Symbol,d=h&&h.for,u=l?h:h&&h.withoutSetter||r;e.exports=function(e){if(!o(c,e)||!s&&"string"!=typeof c[e]){var n="Symbol."+e;s&&o(h,e)?c[e]=h[e]:c[e]=l&&d?d(n):u(n)}return c[e]}},function(e,n,t){var a=t(66),i=Function.prototype.call;e.exports=a?i.bind(i):function(){return i.apply(i,arguments)}},function(e,n,t){var a=t(3);e.exports=!a((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(e,n,t){var a=t(2),i=t(17),o=a({}.hasOwnProperty);e.exports=Object.hasOwn||function(e,n){return o(i(e),n)}},function(e,n,t){var a=t(0),i=t(11),o=a.String,r=a.TypeError;e.exports=function(e){if(i(e))return e;throw r(o(e)+" is not an object")}},function(e,n,t){var a=t(4);e.exports=function(e){return"object"==typeof e?null!==e:a(e)}},function(e,n,t){var a=t(0),i=t(83),o=a.String;e.exports=function(e){if("Symbol"===i(e))throw TypeError("Cannot convert a Symbol value to a string");return o(e)}},function(e,n,t){var a=t(0),i=t(8),o=t(162),r=t(161),s=t(10),l=t(88),c=a.TypeError,h=Object.defineProperty,d=Object.getOwnPropertyDescriptor;n.f=i?r?function(e,n,t){if(s(e),n=l(n),s(t),"function"==typeof e&&"prototype"===n&&"value"in t&&"writable"in t&&!t.writable){var a=d(e,n);a&&a.writable&&(e[n]=t.value,t={configurable:"configurable"in t?t.configurable:a.configurable,enumerable:"enumerable"in t?t.enumerable:a.enumerable,writable:!1})}return h(e,n,t)}:h:function(e,n,t){if(s(e),n=l(n),s(t),o)try{return h(e,n,t)}catch(e){}if("get"in t||"set"in t)throw c("Accessors not supported");return"value"in t&&(e[n]=t.value),e}},function(e,n,t){var a=t(0),i=t(4),o=t(9),r=t(28),s=t(117),l=t(91),c=t(38),h=t(71).CONFIGURABLE,d=c.get,u=c.enforce,m=String(String).split("String");(e.exports=function(e,n,t,l){var c,d=!!l&&!!l.unsafe,p=!!l&&!!l.enumerable,g=!!l&&!!l.noTargetGet,f=l&&void 0!==l.name?l.name:n;i(t)&&("Symbol("===String(f).slice(0,7)&&(f="["+String(f).replace(/^Symbol\(([^)]*)\)/,"$1")+"]"),(!o(t,"name")||h&&t.name!==f)&&r(t,"name",f),(c=u(t)).source||(c.source=m.join("string"==typeof f?f:""))),e!==a?(d?!g&&e[n]&&(p=!0):delete e[n],p?e[n]=t:r(e,n,t)):p?e[n]=t:s(n,t)})(Function.prototype,"toString",(function(){return i(this)&&d(this).source||l(this)}))},function(e,n,t){var a=t(0),i=t(4),o=function(e){return i(e)?e:void 0};e.exports=function(e,n){return arguments.length<2?o(a[e]):a[e]&&a[e][n]}},function(e,n){e.exports=!1},function(e,n,t){var a=t(0),i=t(19),o=a.Object;e.exports=function(e){return o(i(e))}},function(e,n,t){"use strict";var a=t(1),i=t(98);a({target:"RegExp",proto:!0,forced:/./.exec!==i},{exec:i})},function(e,n,t){var a=t(0).TypeError;e.exports=function(e){if(null==e)throw a("Can't call method on "+e);return e}},function(e,n,t){var a=t(65),i=t(19);e.exports=function(e){return a(i(e))}},function(e,n,t){"use strict";function a(e,n,t,a,i,o,r,s){var l,c="function"==typeof e?e.options:e;if(n&&(c.render=n,c.staticRenderFns=t,c._compiled=!0),a&&(c.functional=!0),o&&(c._scopeId="data-v-"+o),r?(l=function(e){(e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),i&&i.call(this,e),e&&e._registeredComponents&&e._registeredComponents.add(r)},c._ssrRegister=l):i&&(l=s?function(){i.call(this,(c.functional?this.parent:this).$root.$options.shadowRoot)}:i),l)if(c.functional){c._injectStyles=l;var h=c.render;c.render=function(e,n){return l.call(n),h(e,n)}}else{var d=c.beforeCreate;c.beforeCreate=d?[].concat(d,l):[l]}return{exports:e,options:c}}t.d(n,"a",(function(){return a}))},function(e,n,t){"use strict";var a=t(178).charAt,i=t(12),o=t(38),r=t(166),s=o.set,l=o.getterFor("String Iterator");r(String,"String",(function(e){s(this,{type:"String Iterator",string:i(e),index:0})}),(function(){var e,n=l(this),t=n.string,i=n.index;return i>=t.length?{value:void 0,done:!0}:(e=a(t,i),n.index+=e.length,{value:e,done:!1})}))},function(e,n,t){var a=t(0),i=t(4),o=t(68),r=a.TypeError;e.exports=function(e){if(i(e))return e;throw r(o(e)+" is not a function")}},function(e,n,t){var a=t(54);e.exports=function(e){return a(e.length)}},function(e,n,t){"use strict";var a=t(1),i=t(60).filter;a({target:"Array",proto:!0,forced:!t(96)("filter")},{filter:function(e){return i(this,e,arguments.length>1?arguments[1]:void 0)}})},function(e,n,t){var a=t(0),i=t(179),o=t(180),r=t(149),s=t(28),l=t(6),c=l("iterator"),h=l("toStringTag"),d=r.values,u=function(e,n){if(e){if(e[c]!==d)try{s(e,c,d)}catch(n){e[c]=d}if(e[h]||s(e,h,n),i[n])for(var t in r)if(e[t]!==r[t])try{s(e,t,r[t])}catch(n){e[t]=r[t]}}};for(var m in i)u(a[m]&&a[m].prototype,m);u(o,"DOMTokenList")},function(e,n,t){var a=t(2),i=a({}.toString),o=a("".slice);e.exports=function(e){return o(i(e),8,-1)}},function(e,n,t){var a=t(8),i=t(13),o=t(48);e.exports=a?function(e,n,t){return i.f(e,n,o(1,t))}:function(e,n,t){return e[n]=t,e}},function(e,n,t){"use strict";var a=t(1),i=t(186);a({target:"Array",proto:!0,forced:[].forEach!=i},{forEach:i})},function(e,n,t){var a=t(0),i=t(179),o=t(180),r=t(186),s=t(28),l=function(e){if(e&&e.forEach!==r)try{s(e,"forEach",r)}catch(n){e.forEach=r}};for(var c in i)i[c]&&l(a[c]&&a[c].prototype);l(o)},function(e,n,t){var a=t(14),i=t(285),o=Error.prototype;o.toString!==i&&a(o,"toString",i)},function(e,n){var t=Array.isArray;e.exports=t},function(e,n,t){var a=t(15);e.exports=a("navigator","userAgent")||""},function(e,n,t){var a=t(197),i="object"==typeof self&&self&&self.Object===Object&&self,o=a||i||Function("return this")();e.exports=o},function(e,n,t){var a,i=t(10),o=t(118),r=t(121),s=t(69),l=t(165),c=t(87),h=t(90),d=h("IE_PROTO"),u=function(){},m=function(e){return"<script>"+e+"<\/script>"},p=function(e){e.write(m("")),e.close();var n=e.parentWindow.Object;return e=null,n},g=function(){try{a=new ActiveXObject("htmlfile")}catch(e){}var e,n;g="undefined"!=typeof document?document.domain&&a?p(a):((n=c("iframe")).style.display="none",l.appendChild(n),n.src=String("javascript:"),(e=n.contentWindow.document).open(),e.write(m("document.F=Object")),e.close(),e.F):p(a);for(var t=r.length;t--;)delete g.prototype[r[t]];return g()};s[d]=!0,e.exports=Object.create||function(e,n){var t;return null!==e?(u.prototype=i(e),t=new u,u.prototype=null,t[d]=e):t=g(),void 0===n?t:o.f(t,n)}},function(e,n,t){var a=t(2);e.exports=a({}.isPrototypeOf)},function(e,n,t){var a=t(8),i=t(7),o=t(122),r=t(48),s=t(20),l=t(88),c=t(9),h=t(162),d=Object.getOwnPropertyDescriptor;n.f=a?d:function(e,n){if(e=s(e),n=l(n),h)try{return d(e,n)}catch(e){}if(c(e,n))return r(!i(o.f,e,n),e[n])}},function(e,n,t){var a,i,o,r=t(247),s=t(0),l=t(2),c=t(11),h=t(28),d=t(9),u=t(116),m=t(90),p=t(69),g=s.TypeError,f=s.WeakMap;if(r||u.state){var b=u.state||(u.state=new f),y=l(b.get),v=l(b.has),w=l(b.set);a=function(e,n){if(v(b,e))throw new g("Object already initialized");return n.facade=e,w(b,e,n),n},i=function(e){return y(b,e)||{}},o=function(e){return v(b,e)}}else{var x=m("state");p[x]=!0,a=function(e,n){if(d(e,x))throw new g("Object already initialized");return n.facade=e,h(e,x,n),n},i=function(e){return d(e,x)?e[x]:{}},o=function(e){return d(e,x)}}e.exports={set:a,get:i,has:o,enforce:function(e){return o(e)?i(e):a(e,{})},getterFor:function(e){return function(n){var t;if(!c(n)||(t=i(n)).type!==e)throw g("Incompatible receiver, "+e+" required");return t}}}},function(e,n,t){var a=t(66),i=Function.prototype,o=i.apply,r=i.call;e.exports="object"==typeof Reflect&&Reflect.apply||(a?r.bind(o):function(){return r.apply(o,arguments)})},function(e,n,t){var a=t(1),i=t(0),o=t(39),r=t(281),s=i.WebAssembly,l=7!==Error("e",{cause:7}).cause,c=function(e,n){var t={};t[e]=r(e,n,l),a({global:!0,forced:l},t)},h=function(e,n){if(s&&s[e]){var t={};t[e]=r("WebAssembly."+e,n,l),a({target:"WebAssembly",stat:!0,forced:l},t)}};c("Error",(function(e){return function(n){return o(e,this,arguments)}})),c("EvalError",(function(e){return function(n){return o(e,this,arguments)}})),c("RangeError",(function(e){return function(n){return o(e,this,arguments)}})),c("ReferenceError",(function(e){return function(n){return o(e,this,arguments)}})),c("SyntaxError",(function(e){return function(n){return o(e,this,arguments)}})),c("TypeError",(function(e){return function(n){return o(e,this,arguments)}})),c("URIError",(function(e){return function(n){return o(e,this,arguments)}})),h("CompileError",(function(e){return function(n){return o(e,this,arguments)}})),h("LinkError",(function(e){return function(n){return o(e,this,arguments)}})),h("RuntimeError",(function(e){return function(n){return o(e,this,arguments)}}))},function(e,n,t){var a=t(305),i=t(308);e.exports=function(e,n){var t=i(e,n);return a(t)?t:void 0}},function(e,n,t){"use strict";var a=t(1),i=t(0),o=t(63),r=t(94),s=t(11),l=t(120),c=t(24),h=t(20),d=t(76),u=t(6),m=t(96),p=t(73),g=m("slice"),f=u("species"),b=i.Array,y=Math.max;a({target:"Array",proto:!0,forced:!g},{slice:function(e,n){var t,a,i,u=h(this),m=c(u),g=l(e,m),v=l(void 0===n?m:n,m);if(o(u)&&(t=u.constructor,(r(t)&&(t===b||o(t.prototype))||s(t)&&null===(t=t[f]))&&(t=void 0),t===b||void 0===t))return p(u,g,v);for(a=new(void 0===t?b:t)(y(v-g,0)),i=0;g<v;g++,i++)g in u&&d(a,i,u[g]);return a.length=i,a}})},function(e,n,t){"use strict";t.d(n,"e",(function(){return a})),t.d(n,"b",(function(){return o})),t.d(n,"j",(function(){return r})),t.d(n,"g",(function(){return l})),t.d(n,"h",(function(){return c})),t.d(n,"i",(function(){return h})),t.d(n,"c",(function(){return d})),t.d(n,"f",(function(){return u})),t.d(n,"l",(function(){return m})),t.d(n,"m",(function(){return p})),t.d(n,"d",(function(){return f})),t.d(n,"k",(function(){return b})),t.d(n,"n",(function(){return y})),t.d(n,"a",(function(){return w}));t(18),t(45),t(145),t(81),t(109),t(115),t(44),t(29),t(5),t(30),t(25),t(84),t(108),t(159),t(56),t(218),t(31),t(148);var a=/#.*$/,i=/\.(md|html)$/,o=/\/$/,r=/^[a-z]+:/i;function s(e){return decodeURI(e).replace(a,"").replace(i,"")}function l(e){return r.test(e)}function c(e){return/^mailto:/.test(e)}function h(e){return/^tel:/.test(e)}function d(e){if(l(e))return e;if(!e)return"404";var n=e.match(a),t=n?n[0]:"",i=s(e);return o.test(i)?e:i+".html"+t}function u(e,n){var t=e.hash,i=function(e){var n=e&&e.match(a);if(n)return n[0]}(n);return(!i||t===i)&&s(e.path)===s(n)}function m(e,n,t){if(l(n))return{type:"external",path:n};t&&(n=function(e,n,t){var a=e.charAt(0);if("/"===a)return e;if("?"===a||"#"===a)return n+e;var i=n.split("/");t&&i[i.length-1]||i.pop();for(var o=e.replace(/^\//,"").split("/"),r=0;r<o.length;r++){var s=o[r];".."===s?i.pop():"."!==s&&i.push(s)}""!==i[0]&&i.unshift("");return i.join("/")}(n,t));for(var a=s(n),i=0;i<e.length;i++)if(s(e[i].regularPath)===a)return Object.assign({},e[i],{type:"page",path:d(e[i].path)});return console.error('[vuepress] No matching page found for sidebar item "'.concat(n,'"')),{}}function p(e,n,t,a){var i=t.pages,o=t.themeConfig,r=a&&o.locales&&o.locales[a]||o;if("auto"===(e.frontmatter.sidebar||r.sidebar||o.sidebar))return g(e);var s=r.sidebar||o.sidebar;if(s){var l=function(e,n){if(Array.isArray(n))return{base:"/",config:n};for(var t in n)if(0===(a=e,/(\.html|\/)$/.test(a)?a:a+"/").indexOf(encodeURI(t)))return{base:t,config:n[t]};var a;return{}}(n,s),c=l.base,h=l.config;return"auto"===h?g(e):h?h.map((function(e){return function e(n,t,a){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1;if("string"==typeof n)return m(t,n,a);if(Array.isArray(n))return Object.assign(m(t,n[0],a),{title:n[1]});i>3&&console.error("[vuepress] detected a too deep nested sidebar group.");var o=n.children||[];return 0===o.length&&n.path?Object.assign(m(t,n.path,a),{title:n.title}):{type:"group",path:n.path,title:n.title,sidebarDepth:n.sidebarDepth,initialOpenGroupIndex:n.initialOpenGroupIndex,children:o.map((function(n){return e(n,t,a,i+1)})),collapsable:!1!==n.collapsable}}(e,i,c)})):[]}return[]}function g(e){var n=f(e.headers||[]);return[{type:"group",collapsable:!1,title:e.title,path:null,children:n.map((function(n){return{type:"auto",title:n.title,basePath:e.path,path:e.path+"#"+n.slug,children:n.children||[]}}))}]}function f(e){var n;return(e=e.map((function(e){return Object.assign({},e)}))).forEach((function(e){2===e.level?n=e:n&&(n.children||(n.children=[])).push(e)})),e.filter((function(e){return 2===e.level}))}function b(e){return Object.assign(e,{type:e.items&&e.items.length?"links":"link"})}function y(e){return Object.prototype.toString.call(e).match(/\[object (.*?)\]/)[1].toLowerCase()}function v(e){var n=e.frontmatter.date||e.lastUpdated||new Date,t=new Date(n);return"Invalid Date"==t&&n&&(t=new Date(n.replace(/-/g,"/"))),t.getTime()}function w(e,n){return v(n)-v(e)}},function(e,n,t){"use strict";var a=t(1),i=t(60).map;a({target:"Array",proto:!0,forced:!t(96)("map")},{map:function(e){return i(this,e,arguments.length>1?arguments[1]:void 0)}})},function(e,n,t){"use strict";var a=t(39),i=t(7),o=t(2),r=t(113),s=t(3),l=t(10),c=t(4),h=t(58),d=t(54),u=t(12),m=t(19),p=t(132),g=t(47),f=t(286),b=t(114),y=t(6)("replace"),v=Math.max,w=Math.min,x=o([].concat),k=o([].push),T=o("".indexOf),E=o("".slice),A="$0"==="a".replace(/./,"$0"),S=!!/./[y]&&""===/./[y]("a","$0");r("replace",(function(e,n,t){var o=S?"$":"$0";return[function(e,t){var a=m(this),o=null==e?void 0:g(e,y);return o?i(o,e,a,t):i(n,u(a),e,t)},function(e,i){var r=l(this),s=u(e);if("string"==typeof i&&-1===T(i,o)&&-1===T(i,"$<")){var m=t(n,r,s,i);if(m.done)return m.value}var g=c(i);g||(i=u(i));var y=r.global;if(y){var A=r.unicode;r.lastIndex=0}for(var S=[];;){var j=b(r,s);if(null===j)break;if(k(S,j),!y)break;""===u(j[0])&&(r.lastIndex=p(s,d(r.lastIndex),A))}for(var I,z="",C=0,B=0;B<S.length;B++){for(var P=u((j=S[B])[0]),L=v(w(h(j.index),s.length),0),J=[],O=1;O<j.length;O++)k(J,void 0===(I=j[O])?I:String(I));var _=j.groups;if(g){var F=x([P],J,L,s);void 0!==_&&k(F,_);var D=u(a(i,void 0,F))}else D=f(P,s,L,J,_,i);L>=C&&(z+=E(s,C,L)+D,C=L+P.length)}return z+E(s,C)}]}),!!s((function(){var e=/./;return e.exec=function(){var e=[];return e.groups={a:"7"},e},"7"!=="".replace(e,"$<a>")}))||!A||S)},function(e,n,t){"use strict";var a=t(3);e.exports=function(e,n){var t=[][e];return!!t&&a((function(){t.call(null,n||function(){return 1},1)}))}},function(e,n,t){var a=t(23);e.exports=function(e,n){var t=e[n];return null==t?void 0:a(t)}},function(e,n){e.exports=function(e,n){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:n}}},function(e,n){e.exports=function(e){return null!=e&&"object"==typeof e}},function(e,n,t){"use strict";t.d(n,"a",(function(){return o}));t(82),t(77),t(25),t(5),t(399),t(29),t(30),t(181),t(400),t(104);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}},function(e,n,t){var a=t(16),i=t(116);(e.exports=function(e,n){return i[e]||(i[e]=void 0!==n?n:{})})("versions",[]).push({version:"3.22.2",mode:a?"pure":"global",copyright:"© 2014-2022 Denis Pushkarev (zloirock.ru)",license:"https://github.com/zloirock/core-js/blob/v3.22.2/LICENSE",source:"https://github.com/zloirock/core-js"})},function(e,n,t){var a=t(53),i=t(3);e.exports=!!Object.getOwnPropertySymbols&&!i((function(){var e=Symbol();return!String(e)||!(Object(e)instanceof Symbol)||!Symbol.sham&&a&&a<41}))},function(e,n,t){var a,i,o=t(0),r=t(33),s=o.process,l=o.Deno,c=s&&s.versions||l&&l.version,h=c&&c.v8;h&&(i=(a=h.split("."))[0]>0&&a[0]<4?1:+(a[0]+a[1])),!i&&r&&(!(a=r.match(/Edge\/(\d+)/))||a[1]>=74)&&(a=r.match(/Chrome\/(\d+)/))&&(i=+a[1]),e.exports=i},function(e,n,t){var a=t(58),i=Math.min;e.exports=function(e){return e>0?i(a(e),9007199254740991):0}},function(e,n,t){var a=t(0);e.exports=a.Promise},function(e,n,t){"use strict";var a=t(1),i=t(0),o=t(3),r=t(63),s=t(11),l=t(17),c=t(24),h=t(76),d=t(152),u=t(96),m=t(6),p=t(53),g=m("isConcatSpreadable"),f=i.TypeError,b=p>=51||!o((function(){var e=[];return e[g]=!1,e.concat()[0]!==e})),y=u("concat"),v=function(e){if(!s(e))return!1;var n=e[g];return void 0!==n?!!n:r(e)};a({target:"Array",proto:!0,forced:!b||!y},{concat:function(e){var n,t,a,i,o,r=l(this),s=d(r,0),u=0;for(n=-1,a=arguments.length;n<a;n++)if(v(o=-1===n?r:arguments[n])){if(u+(i=c(o))>9007199254740991)throw f("Maximum allowed index exceeded");for(t=0;t<i;t++,u++)t in o&&h(s,u,o[t])}else{if(u>=9007199254740991)throw f("Maximum allowed index exceeded");h(s,u++,o)}return s.length=u,s}})},function(e,n,t){t(381),t(382)},function(e,n){var t=Math.ceil,a=Math.floor;e.exports=function(e){var n=+e;return n!=n||0===n?0:(n>0?a:t)(n)}},function(e,n,t){var a=t(2),i=t(23),o=t(66),r=a(a.bind);e.exports=function(e,n){return i(e),void 0===n?e:o?r(e,n):function(){return e.apply(n,arguments)}}},function(e,n,t){var a=t(59),i=t(2),o=t(65),r=t(17),s=t(24),l=t(152),c=i([].push),h=function(e){var n=1==e,t=2==e,i=3==e,h=4==e,d=6==e,u=7==e,m=5==e||d;return function(p,g,f,b){for(var y,v,w=r(p),x=o(w),k=a(g,f),T=s(x),E=0,A=b||l,S=n?A(p,T):t||u?A(p,0):void 0;T>E;E++)if((m||E in x)&&(v=k(y=x[E],E,w),e))if(n)S[E]=v;else if(v)switch(e){case 3:return!0;case 5:return y;case 6:return E;case 2:c(S,y)}else switch(e){case 4:return!1;case 7:c(S,y)}return d?-1:i||h?h:S}};e.exports={forEach:h(0),map:h(1),filter:h(2),some:h(3),every:h(4),find:h(5),findIndex:h(6),filterReject:h(7)}},function(e,n,t){var a=t(164),i=t(121).concat("length","prototype");n.f=Object.getOwnPropertyNames||function(e){return a(e,i)}},function(e,n,t){var a=t(13).f,i=t(9),o=t(6)("toStringTag");e.exports=function(e,n,t){e&&!t&&(e=e.prototype),e&&!i(e,o)&&a(e,o,{configurable:!0,value:n})}},function(e,n,t){var a=t(27);e.exports=Array.isArray||function(e){return"Array"==a(e)}},function(e,n,t){var a=t(78),i=t(290),o=t(291),r=a?a.toStringTag:void 0;e.exports=function(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":r&&r in Object(e)?i(e):o(e)}},function(e,n,t){var a=t(0),i=t(2),o=t(3),r=t(27),s=a.Object,l=i("".split);e.exports=o((function(){return!s("z").propertyIsEnumerable(0)}))?function(e){return"String"==r(e)?l(e,""):s(e)}:s},function(e,n,t){var a=t(3);e.exports=!a((function(){var e=function(){}.bind();return"function"!=typeof e||e.hasOwnProperty("prototype")}))},function(e,n,t){var a=t(0),i=t(15),o=t(4),r=t(36),s=t(160),l=a.Object;e.exports=s?function(e){return"symbol"==typeof e}:function(e){var n=i("Symbol");return o(n)&&r(n.prototype,l(e))}},function(e,n,t){var a=t(0).String;e.exports=function(e){try{return a(e)}catch(e){return"Object"}}},function(e,n){e.exports={}},function(e,n){e.exports={}},function(e,n,t){var a=t(8),i=t(9),o=Function.prototype,r=a&&Object.getOwnPropertyDescriptor,s=i(o,"name"),l=s&&"something"===function(){}.name,c=s&&(!a||a&&r(o,"name").configurable);e.exports={EXISTS:s,PROPER:l,CONFIGURABLE:c}},function(e,n,t){var a=t(2),i=t(10),o=t(248);e.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var e,n=!1,t={};try{(e=a(Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set))(t,[]),n=t instanceof Array}catch(e){}return function(t,a){return i(t),o(a),n?e(t,a):t.__proto__=a,t}}():void 0)},function(e,n,t){var a=t(2);e.exports=a([].slice)},function(e,n,t){var a=t(0),i=t(55),o=t(4),r=t(110),s=t(91),l=t(6),c=t(256),h=t(16),d=t(53),u=i&&i.prototype,m=l("species"),p=!1,g=o(a.PromiseRejectionEvent),f=r("Promise",(function(){var e=s(i),n=e!==String(i);if(!n&&66===d)return!0;if(h&&(!u.catch||!u.finally))return!0;if(d>=51&&/native code/.test(e))return!1;var t=new i((function(e){e(1)})),a=function(e){e((function(){}),(function(){}))};return(t.constructor={})[m]=a,!(p=t.then((function(){}))instanceof a)||!n&&c&&!g}));e.exports={CONSTRUCTOR:f,REJECTION_EVENT:g,SUBCLASSING:p}},function(e,n,t){"use strict";var a=t(23),i=function(e){var n,t;this.promise=new e((function(e,a){if(void 0!==n||void 0!==t)throw TypeError("Bad Promise constructor");n=e,t=a})),this.resolve=a(n),this.reject=a(t)};e.exports.f=function(e){return new i(e)}},function(e,n,t){"use strict";var a=t(88),i=t(13),o=t(48);e.exports=function(e,n,t){var r=a(n);r in e?i.f(e,r,o(0,t)):e[r]=t}},function(e,n,t){t(273),t(276),t(277),t(130),t(278)},function(e,n,t){var a=t(34).Symbol;e.exports=a},function(e,n,t){"use strict";t.d(n,"a",(function(){return o}));t(84);var a=t(80);t(77),t(97),t(5),t(131),t(22),t(26),t(192);var i=t(105);t(40),t(31);function o(e){return function(e){if(Array.isArray(e))return Object(a.a)(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||Object(i.a)(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}},function(e,n,t){"use strict";function a(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,a=new Array(n);t<n;t++)a[t]=e[t];return a}t.d(n,"a",(function(){return a}))},function(e,n,t){"use strict";t(18);var a,i,o=t(1),r=t(0),s=t(7),l=t(2),c=t(4),h=t(11),d=(a=!1,(i=/[ac]/).exec=function(){return a=!0,/./.exec.apply(this,arguments)},!0===i.test("abc")&&a),u=r.Error,m=l(/./.test);o({target:"RegExp",proto:!0,forced:!d},{test:function(e){var n=this.exec;if(!c(n))return m(this,e);var t=s(n,this,e);if(null!==t&&!h(t))throw new u("RegExp exec method returned something other than an Object or null");return!!t}})},function(e,n,t){var a=t(1),i=t(17),o=t(89);a({target:"Object",stat:!0,forced:t(3)((function(){o(1)}))},{keys:function(e){return o(i(e))}})},function(e,n,t){var a=t(0),i=t(127),o=t(4),r=t(27),s=t(6)("toStringTag"),l=a.Object,c="Arguments"==r(function(){return arguments}());e.exports=i?r:function(e){var n,t,a;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(t=function(e,n){try{return e[n]}catch(e){}}(n=l(e),s))?t:c?r(n):"Object"==(a=r(n))&&o(n.callee)?"Arguments":a}},function(e,n,t){t(1)({target:"Array",stat:!0},{isArray:t(63)})},function(e,n,t){var a=t(8),i=t(71).EXISTS,o=t(2),r=t(13).f,s=Function.prototype,l=o(s.toString),c=/function\b(?:\s|\/\*[\S\s]*?\*\/|\/\/[^\n\r]*[\n\r]+)*([^\s(/]*)/,h=o(c.exec);a&&!i&&r(s,"name",{configurable:!0,get:function(){try{return h(c,l(this))[1]}catch(e){return""}}})},function(e,n,t){var a=t(2),i=0,o=Math.random(),r=a(1..toString);e.exports=function(e){return"Symbol("+(void 0===e?"":e)+")_"+r(++i+o,36)}},function(e,n,t){var a=t(0),i=t(11),o=a.document,r=i(o)&&i(o.createElement);e.exports=function(e){return r?o.createElement(e):{}}},function(e,n,t){var a=t(163),i=t(67);e.exports=function(e){var n=a(e,"string");return i(n)?n:n+""}},function(e,n,t){var a=t(164),i=t(121);e.exports=Object.keys||function(e){return a(e,i)}},function(e,n,t){var a=t(51),i=t(86),o=a("keys");e.exports=function(e){return o[e]||(o[e]=i(e))}},function(e,n,t){var a=t(2),i=t(4),o=t(116),r=a(Function.toString);i(o.inspectSource)||(o.inspectSource=function(e){return r(e)}),e.exports=o.inspectSource},function(e,n){n.f=Object.getOwnPropertySymbols},function(e,n,t){var a=t(27),i=t(0);e.exports="process"==a(i.process)},function(e,n,t){var a=t(2),i=t(3),o=t(4),r=t(83),s=t(15),l=t(91),c=function(){},h=[],d=s("Reflect","construct"),u=/^\s*(?:class|function)\b/,m=a(u.exec),p=!u.exec(c),g=function(e){if(!o(e))return!1;try{return d(c,h,e),!0}catch(e){return!1}},f=function(e){if(!o(e))return!1;switch(r(e)){case"AsyncFunction":case"GeneratorFunction":case"AsyncGeneratorFunction":return!1}try{return p||!!m(u,l(e))}catch(e){return!0}};f.sham=!0,e.exports=!d||i((function(){var e;return g(g.call)||!g(Object)||!g((function(){e=!0}))||e}))?f:g},function(e,n,t){"use strict";t.d(n,"a",(function(){return i}));t(5);function a(e,n,t,a,i,o,r){try{var s=e[o](r),l=s.value}catch(e){return void t(e)}s.done?n(l):Promise.resolve(l).then(a,i)}function i(e){return function(){var n=this,t=arguments;return new Promise((function(i,o){var r=e.apply(n,t);function s(e){a(r,i,o,s,l,"next",e)}function l(e){a(r,i,o,s,l,"throw",e)}s(void 0)}))}}},function(e,n,t){var a=t(3),i=t(6),o=t(53),r=i("species");e.exports=function(e){return o>=51||!a((function(){var n=[];return(n.constructor={})[r]=function(){return{foo:1}},1!==n[e](Boolean).foo}))}},function(e,n,t){"use strict";var a=t(1),i=t(8),o=t(0),r=t(2),s=t(9),l=t(4),c=t(36),h=t(12),d=t(13).f,u=t(123),m=o.Symbol,p=m&&m.prototype;if(i&&l(m)&&(!("description"in p)||void 0!==m().description)){var g={},f=function(){var e=arguments.length<1||void 0===arguments[0]?void 0:h(arguments[0]),n=c(p,this)?new m(e):void 0===e?m():m(e);return""===e&&(g[n]=!0),n};u(f,m),f.prototype=p,p.constructor=f;var b="Symbol(test)"==String(m("test")),y=r(p.toString),v=r(p.valueOf),w=/^Symbol\((.*)\)[^)]+$/,x=r("".replace),k=r("".slice);d(p,"description",{configurable:!0,get:function(){var e=v(this),n=y(e);if(s(g,e))return"";var t=b?k(n,7,-1):x(n,w,"$1");return""===t?void 0:t}}),a({global:!0,forced:!0},{Symbol:f})}},function(e,n,t){"use strict";var a,i,o=t(7),r=t(2),s=t(12),l=t(193),c=t(112),h=t(51),d=t(35),u=t(38).get,m=t(231),p=t(236),g=h("native-string-replace",String.prototype.replace),f=RegExp.prototype.exec,b=f,y=r("".charAt),v=r("".indexOf),w=r("".replace),x=r("".slice),k=(i=/b*/g,o(f,a=/a/,"a"),o(f,i,"a"),0!==a.lastIndex||0!==i.lastIndex),T=c.BROKEN_CARET,E=void 0!==/()??/.exec("")[1];(k||E||T||m||p)&&(b=function(e){var n,t,a,i,r,c,h,m=this,p=u(m),A=s(e),S=p.raw;if(S)return S.lastIndex=m.lastIndex,n=o(b,S,A),m.lastIndex=S.lastIndex,n;var j=p.groups,I=T&&m.sticky,z=o(l,m),C=m.source,B=0,P=A;if(I&&(z=w(z,"y",""),-1===v(z,"g")&&(z+="g"),P=x(A,m.lastIndex),m.lastIndex>0&&(!m.multiline||m.multiline&&"\n"!==y(A,m.lastIndex-1))&&(C="(?: "+C+")",P=" "+P,B++),t=new RegExp("^(?:"+C+")",z)),E&&(t=new RegExp("^"+C+"$(?!\\s)",z)),k&&(a=m.lastIndex),i=o(f,I?t:m,P),I?i?(i.input=x(i.input,B),i[0]=x(i[0],B),i.index=m.lastIndex,m.lastIndex+=i[0].length):m.lastIndex=0:k&&i&&(m.lastIndex=m.global?i.index+i[0].length:a),E&&i&&i.length>1&&o(g,i[0],t,(function(){for(r=1;r<arguments.length-2;r++)void 0===arguments[r]&&(i[r]=void 0)})),i&&j)for(i.groups=c=d(null),r=0;r<j.length;r++)c[(h=j[r])[0]]=i[h[1]];return i}),e.exports=b},function(e,n,t){var a=t(295),i=t(296),o=t(297),r=t(298),s=t(299);function l(e){var n=-1,t=null==e?0:e.length;for(this.clear();++n<t;){var a=e[n];this.set(a[0],a[1])}}l.prototype.clear=a,l.prototype.delete=i,l.prototype.get=o,l.prototype.has=r,l.prototype.set=s,e.exports=l},function(e,n,t){var a=t(199);e.exports=function(e,n){for(var t=e.length;t--;)if(a(e[t][0],n))return t;return-1}},function(e,n,t){var a=t(41)(Object,"create");e.exports=a},function(e,n,t){var a=t(317);e.exports=function(e,n){var t=e.__data__;return a(n)?t["string"==typeof n?"string":"hash"]:t.map}},function(e,n,t){var a=t(140);e.exports=function(e){if("string"==typeof e||a(e))return e;var n=e+"";return"0"==n&&1/e==-1/0?"-0":n}},function(e,n,t){var a=t(1),i=t(8),o=t(13).f;a({target:"Object",stat:!0,forced:Object.defineProperty!==o,sham:!i},{defineProperty:o})},function(e,n,t){"use strict";t.d(n,"a",(function(){return i}));t(42),t(5),t(85),t(192),t(22),t(18),t(81);var a=t(80);function i(e,n){if(e){if("string"==typeof e)return Object(a.a)(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Object(a.a)(e,n):void 0}}},function(e,n,t){var a,i;
/* NProgress, (c) 2013, 2014 Rico Sta. Cruz - http://ricostacruz.com/nprogress
 * @license MIT */void 0===(i="function"==typeof(a=function(){var e,n,t={version:"0.2.0"},a=t.settings={minimum:.08,easing:"ease",positionUsing:"",speed:200,trickle:!0,trickleRate:.02,trickleSpeed:800,showSpinner:!0,barSelector:'[role="bar"]',spinnerSelector:'[role="spinner"]',parent:"body",template:'<div class="bar" role="bar"><div class="peg"></div></div><div class="spinner" role="spinner"><div class="spinner-icon"></div></div>'};function i(e,n,t){return e<n?n:e>t?t:e}function o(e){return 100*(-1+e)}t.configure=function(e){var n,t;for(n in e)void 0!==(t=e[n])&&e.hasOwnProperty(n)&&(a[n]=t);return this},t.status=null,t.set=function(e){var n=t.isStarted();e=i(e,a.minimum,1),t.status=1===e?null:e;var l=t.render(!n),c=l.querySelector(a.barSelector),h=a.speed,d=a.easing;return l.offsetWidth,r((function(n){""===a.positionUsing&&(a.positionUsing=t.getPositioningCSS()),s(c,function(e,n,t){var i;return(i="translate3d"===a.positionUsing?{transform:"translate3d("+o(e)+"%,0,0)"}:"translate"===a.positionUsing?{transform:"translate("+o(e)+"%,0)"}:{"margin-left":o(e)+"%"}).transition="all "+n+"ms "+t,i}(e,h,d)),1===e?(s(l,{transition:"none",opacity:1}),l.offsetWidth,setTimeout((function(){s(l,{transition:"all "+h+"ms linear",opacity:0}),setTimeout((function(){t.remove(),n()}),h)}),h)):setTimeout(n,h)})),this},t.isStarted=function(){return"number"==typeof t.status},t.start=function(){t.status||t.set(0);var e=function(){setTimeout((function(){t.status&&(t.trickle(),e())}),a.trickleSpeed)};return a.trickle&&e(),this},t.done=function(e){return e||t.status?t.inc(.3+.5*Math.random()).set(1):this},t.inc=function(e){var n=t.status;return n?("number"!=typeof e&&(e=(1-n)*i(Math.random()*n,.1,.95)),n=i(n+e,0,.994),t.set(n)):t.start()},t.trickle=function(){return t.inc(Math.random()*a.trickleRate)},e=0,n=0,t.promise=function(a){return a&&"resolved"!==a.state()?(0===n&&t.start(),e++,n++,a.always((function(){0==--n?(e=0,t.done()):t.set((e-n)/e)})),this):this},t.render=function(e){if(t.isRendered())return document.getElementById("nprogress");c(document.documentElement,"nprogress-busy");var n=document.createElement("div");n.id="nprogress",n.innerHTML=a.template;var i,r=n.querySelector(a.barSelector),l=e?"-100":o(t.status||0),h=document.querySelector(a.parent);return s(r,{transition:"all 0 linear",transform:"translate3d("+l+"%,0,0)"}),a.showSpinner||(i=n.querySelector(a.spinnerSelector))&&u(i),h!=document.body&&c(h,"nprogress-custom-parent"),h.appendChild(n),n},t.remove=function(){h(document.documentElement,"nprogress-busy"),h(document.querySelector(a.parent),"nprogress-custom-parent");var e=document.getElementById("nprogress");e&&u(e)},t.isRendered=function(){return!!document.getElementById("nprogress")},t.getPositioningCSS=function(){var e=document.body.style,n="WebkitTransform"in e?"Webkit":"MozTransform"in e?"Moz":"msTransform"in e?"ms":"OTransform"in e?"O":"";return n+"Perspective"in e?"translate3d":n+"Transform"in e?"translate":"margin"};var r=function(){var e=[];function n(){var t=e.shift();t&&t(n)}return function(t){e.push(t),1==e.length&&n()}}(),s=function(){var e=["Webkit","O","Moz","ms"],n={};function t(t){return t=t.replace(/^-ms-/,"ms-").replace(/-([\da-z])/gi,(function(e,n){return n.toUpperCase()})),n[t]||(n[t]=function(n){var t=document.body.style;if(n in t)return n;for(var a,i=e.length,o=n.charAt(0).toUpperCase()+n.slice(1);i--;)if((a=e[i]+o)in t)return a;return n}(t))}function a(e,n,a){n=t(n),e.style[n]=a}return function(e,n){var t,i,o=arguments;if(2==o.length)for(t in n)void 0!==(i=n[t])&&n.hasOwnProperty(t)&&a(e,t,i);else a(e,o[1],o[2])}}();function l(e,n){return("string"==typeof e?e:d(e)).indexOf(" "+n+" ")>=0}function c(e,n){var t=d(e),a=t+n;l(t,n)||(e.className=a.substring(1))}function h(e,n){var t,a=d(e);l(e,n)&&(t=a.replace(" "+n+" "," "),e.className=t.substring(1,t.length-1))}function d(e){return(" "+(e.className||"")+" ").replace(/\s+/gi," ")}function u(e){e&&e.parentNode&&e.parentNode.removeChild(e)}return t})?a.call(n,t,n,e):a)||(e.exports=i)},function(e){e.exports=JSON.parse('{"name":"vuepress-plugin-comment","version":"0.7.3","description":"Comment plugin in vuepress, such as Gitalk, Valine...","main":"index.js","scripts":{"test":"echo \\"Error: no test specified\\" && exit 1"},"repository":{"type":"git","url":"git+ssh://git@github.com/dongyuanxin/vuepress-plugin-comment.git"},"keywords":["vuepress","comment","plugin","vue","gitalk","valine"],"author":"dongyuanxin","license":"MIT","bugs":{"url":"https://github.com/dongyuanxin/vuepress-plugin-comment/issues"},"homepage":"https://github.com/dongyuanxin/vuepress-plugin-comment#readme","dependencies":{"ejs":"^2.6.1","gitalk":"^1.5.0","gitalk-fix":"^1.5.2","i":"^0.3.6","npm":"^6.9.0","valine":"^1.3.9"}}')},function(e,n,t){"use strict";var a=t(1),i=t(2),o=t(119).indexOf,r=t(46),s=i([].indexOf),l=!!s&&1/s([1],1,-0)<0,c=r("indexOf");a({target:"Array",proto:!0,forced:l||!c},{indexOf:function(e){var n=arguments.length>1?arguments[1]:void 0;return l?s(this,e,n)||0:o(this,e,n)}})},function(e,n,t){"use strict";var a=t(39),i=t(7),o=t(2),r=t(113),s=t(153),l=t(10),c=t(19),h=t(126),d=t(132),u=t(54),m=t(12),p=t(47),g=t(129),f=t(114),b=t(98),y=t(112),v=t(3),w=y.UNSUPPORTED_Y,x=Math.min,k=[].push,T=o(/./.exec),E=o(k),A=o("".slice);r("split",(function(e,n,t){var o;return o="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(e,t){var o=m(c(this)),r=void 0===t?4294967295:t>>>0;if(0===r)return[];if(void 0===e)return[o];if(!s(e))return i(n,o,e,r);for(var l,h,d,u=[],p=(e.ignoreCase?"i":"")+(e.multiline?"m":"")+(e.unicode?"u":"")+(e.sticky?"y":""),f=0,y=new RegExp(e.source,p+"g");(l=i(b,y,o))&&!((h=y.lastIndex)>f&&(E(u,A(o,f,l.index)),l.length>1&&l.index<o.length&&a(k,u,g(l,1)),d=l[0].length,f=h,u.length>=r));)y.lastIndex===l.index&&y.lastIndex++;return f===o.length?!d&&T(y,"")||E(u,""):E(u,A(o,f)),u.length>r?g(u,0,r):u}:"0".split(void 0,0).length?function(e,t){return void 0===e&&0===t?[]:i(n,this,e,t)}:n,[function(n,t){var a=c(this),r=null==n?void 0:p(n,e);return r?i(r,n,a,t):i(o,m(a),n,t)},function(e,a){var i=l(this),r=m(e),s=t(o,i,r,a,o!==n);if(s.done)return s.value;var c=h(i,RegExp),p=i.unicode,g=(i.ignoreCase?"i":"")+(i.multiline?"m":"")+(i.unicode?"u":"")+(w?"g":"y"),b=new c(w?"^(?:"+i.source+")":i,g),y=void 0===a?4294967295:a>>>0;if(0===y)return[];if(0===r.length)return null===f(b,r)?[r]:[];for(var v=0,k=0,T=[];k<r.length;){b.lastIndex=w?0:k;var S,j=f(b,w?A(r,k):r);if(null===j||(S=x(u(b.lastIndex+(w?k:0)),r.length))===v)k=d(r,k,p);else{if(E(T,A(r,v,k)),T.length===y)return T;for(var I=1;I<=j.length-1;I++)if(E(T,j[I]),T.length===y)return T;k=v=S}}return E(T,A(r,v)),T}]}),!!v((function(){var e=/(?:)/,n=e.exec;e.exec=function(){return n.apply(this,arguments)};var t="ab".split(e);return 2!==t.length||"a"!==t[0]||"b"!==t[1]})),w)},function(e,n,t){var a=t(3),i=t(4),o=/#|\.prototype\./,r=function(e,n){var t=l[s(e)];return t==h||t!=c&&(i(n)?a(n):!!n)},s=r.normalize=function(e){return String(e).replace(o,".").toLowerCase()},l=r.data={},c=r.NATIVE="N",h=r.POLYFILL="P";e.exports=r},function(e,n,t){var a=t(83),i=t(47),o=t(70),r=t(6)("iterator");e.exports=function(e){if(null!=e)return i(e,r)||i(e,"@@iterator")||o[a(e)]}},function(e,n,t){var a=t(3),i=t(0).RegExp,o=a((function(){var e=i("a","y");return e.lastIndex=2,null!=e.exec("abcd")})),r=o||a((function(){return!i("a","y").sticky})),s=o||a((function(){var e=i("^r","gy");return e.lastIndex=2,null!=e.exec("str")}));e.exports={BROKEN_CARET:s,MISSED_STICKY:r,UNSUPPORTED_Y:o}},function(e,n,t){"use strict";t(18);var a=t(2),i=t(14),o=t(98),r=t(3),s=t(6),l=t(28),c=s("species"),h=RegExp.prototype;e.exports=function(e,n,t,d){var u=s(e),m=!r((function(){var n={};return n[u]=function(){return 7},7!=""[e](n)})),p=m&&!r((function(){var n=!1,t=/a/;return"split"===e&&((t={}).constructor={},t.constructor[c]=function(){return t},t.flags="",t[u]=/./[u]),t.exec=function(){return n=!0,null},t[u](""),!n}));if(!m||!p||t){var g=a(/./[u]),f=n(u,""[e],(function(e,n,t,i,r){var s=a(e),l=n.exec;return l===o||l===h.exec?m&&!r?{done:!0,value:g(n,t,i)}:{done:!0,value:s(t,n,i)}:{done:!1}}));i(String.prototype,e,f[0]),i(h,u,f[1])}d&&l(h[u],"sham",!0)}},function(e,n,t){var a=t(0),i=t(7),o=t(10),r=t(4),s=t(27),l=t(98),c=a.TypeError;e.exports=function(e,n){var t=e.exec;if(r(t)){var a=i(t,e,n);return null!==a&&o(a),a}if("RegExp"===s(e))return i(l,e,n);throw c("RegExp#exec called on incompatible receiver")}},function(e,n,t){"use strict";var a=t(1),i=t(2),o=t(65),r=t(20),s=t(46),l=i([].join),c=o!=Object,h=s("join",",");a({target:"Array",proto:!0,forced:c||!h},{join:function(e){return l(r(this),void 0===e?",":e)}})},function(e,n,t){var a=t(0),i=t(117),o=a["__core-js_shared__"]||i("__core-js_shared__",{});e.exports=o},function(e,n,t){var a=t(0),i=Object.defineProperty;e.exports=function(e,n){try{i(a,e,{value:n,configurable:!0,writable:!0})}catch(t){a[e]=n}return n}},function(e,n,t){var a=t(8),i=t(161),o=t(13),r=t(10),s=t(20),l=t(89);n.f=a&&!i?Object.defineProperties:function(e,n){r(e);for(var t,a=s(n),i=l(n),c=i.length,h=0;c>h;)o.f(e,t=i[h++],a[t]);return e}},function(e,n,t){var a=t(20),i=t(120),o=t(24),r=function(e){return function(n,t,r){var s,l=a(n),c=o(l),h=i(r,c);if(e&&t!=t){for(;c>h;)if((s=l[h++])!=s)return!0}else for(;c>h;h++)if((e||h in l)&&l[h]===t)return e||h||0;return!e&&-1}};e.exports={includes:r(!0),indexOf:r(!1)}},function(e,n,t){var a=t(58),i=Math.max,o=Math.min;e.exports=function(e,n){var t=a(e);return t<0?i(t+n,0):o(t,n)}},function(e,n){e.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(e,n,t){"use strict";var a={}.propertyIsEnumerable,i=Object.getOwnPropertyDescriptor,o=i&&!a.call({1:2},1);n.f=o?function(e){var n=i(this,e);return!!n&&n.enumerable}:a},function(e,n,t){var a=t(9),i=t(124),o=t(37),r=t(13);e.exports=function(e,n,t){for(var s=i(n),l=r.f,c=o.f,h=0;h<s.length;h++){var d=s[h];a(e,d)||t&&a(t,d)||l(e,d,c(n,d))}}},function(e,n,t){var a=t(15),i=t(2),o=t(61),r=t(92),s=t(10),l=i([].concat);e.exports=a("Reflect","ownKeys")||function(e){var n=o.f(s(e)),t=r.f;return t?l(n,t(e)):n}},function(e,n,t){var a=t(0),i=t(9),o=t(4),r=t(17),s=t(90),l=t(168),c=s("IE_PROTO"),h=a.Object,d=h.prototype;e.exports=l?h.getPrototypeOf:function(e){var n=r(e);if(i(n,c))return n[c];var t=n.constructor;return o(t)&&n instanceof t?t.prototype:n instanceof h?d:null}},function(e,n,t){var a=t(10),i=t(169),o=t(6)("species");e.exports=function(e,n){var t,r=a(e).constructor;return void 0===r||null==(t=a(r)[o])?n:i(t)}},function(e,n,t){var a={};a[t(6)("toStringTag")]="z",e.exports="[object z]"===String(a)},function(e,n){e.exports=function(e){try{return{error:!1,value:e()}}catch(e){return{error:!0,value:e}}}},function(e,n,t){var a=t(0),i=t(120),o=t(24),r=t(76),s=a.Array,l=Math.max;e.exports=function(e,n,t){for(var a=o(e),c=i(n,a),h=i(void 0===t?a:t,a),d=s(l(h-c,0)),u=0;c<h;c++,u++)r(d,u,e[c]);return d.length=u,d}},function(e,n,t){var a=t(1),i=t(15),o=t(39),r=t(7),s=t(2),l=t(3),c=t(63),h=t(4),d=t(11),u=t(67),m=t(73),p=t(52),g=i("JSON","stringify"),f=s(/./.exec),b=s("".charAt),y=s("".charCodeAt),v=s("".replace),w=s(1..toString),x=/[\uD800-\uDFFF]/g,k=/^[\uD800-\uDBFF]$/,T=/^[\uDC00-\uDFFF]$/,E=!p||l((function(){var e=i("Symbol")();return"[null]"!=g([e])||"{}"!=g({a:e})||"{}"!=g(Object(e))})),A=l((function(){return'"\\udf06\\ud834"'!==g("\udf06\ud834")||'"\\udead"'!==g("\udead")})),S=function(e,n){var t=m(arguments),a=n;if((d(n)||void 0!==e)&&!u(e))return c(n)||(n=function(e,n){if(h(a)&&(n=r(a,this,e,n)),!u(n))return n}),t[1]=n,o(g,null,t)},j=function(e,n,t){var a=b(t,n-1),i=b(t,n+1);return f(k,e)&&!f(T,i)||f(T,e)&&!f(k,a)?"\\u"+w(y(e,0),16):e};g&&a({target:"JSON",stat:!0,forced:E||A},{stringify:function(e,n,t){var a=m(arguments),i=o(E?S:g,null,a);return A&&"string"==typeof i?v(i,x,j):i}})},function(e,n,t){t(190)("iterator")},function(e,n,t){"use strict";var a=t(178).charAt;e.exports=function(e,n,t){return n+(t?a(e,n).length:1)}},function(e,n,t){var a=t(289),i=t(49),o=Object.prototype,r=o.hasOwnProperty,s=o.propertyIsEnumerable,l=a(function(){return arguments}())?a:function(e){return i(e)&&r.call(e,"callee")&&!s.call(e,"callee")};e.exports=l},function(e,n,t){var a=t(41)(t(34),"Map");e.exports=a},function(e,n){e.exports=function(e){var n=typeof e;return null!=e&&("object"==n||"function"==n)}},function(e,n,t){var a=t(309),i=t(316),o=t(318),r=t(319),s=t(320);function l(e){var n=-1,t=null==e?0:e.length;for(this.clear();++n<t;){var a=e[n];this.set(a[0],a[1])}}l.prototype.clear=a,l.prototype.delete=i,l.prototype.get=o,l.prototype.has=r,l.prototype.set=s,e.exports=l},function(e,n){e.exports=function(e){var n=-1,t=Array(e.size);return e.forEach((function(e){t[++n]=e})),t}},function(e,n){e.exports=function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=9007199254740991}},function(e,n,t){var a=t(32),i=t(140),o=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,r=/^\w*$/;e.exports=function(e,n){if(a(e))return!1;var t=typeof e;return!("number"!=t&&"symbol"!=t&&"boolean"!=t&&null!=e&&!i(e))||(r.test(e)||!o.test(e)||null!=n&&e in Object(n))}},function(e,n,t){var a=t(64),i=t(49);e.exports=function(e){return"symbol"==typeof e||i(e)&&"[object Symbol]"==a(e)}},function(e,n){e.exports=function(e){return e}},function(e,n,t){var a=t(1),i=t(0),o=t(62);a({global:!0},{Reflect:{}}),o(i.Reflect,"Reflect",!0)},function(e,n,t){"use strict";t.d(n,"a",(function(){return i}));t(84);t(77),t(97),t(5),t(131),t(22),t(26);var a=t(105);t(40),t(31);function i(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var a,i,o=[],r=!0,s=!1;try{for(t=t.call(e);!(r=(a=t.next()).done)&&(o.push(a.value),!n||o.length!==n);r=!0);}catch(e){s=!0,i=e}finally{try{r||null==t.return||t.return()}finally{if(s)throw i}}return o}}(e,n)||Object(a.a)(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}},function(e,n,t){"use strict";var a=t(1),i=t(60).some;a({target:"Array",proto:!0,forced:!t(46)("some")},{some:function(e){return i(this,e,arguments.length>1?arguments[1]:void 0)}})},function(e,n,t){"use strict";var a=t(7),i=t(113),o=t(10),r=t(54),s=t(12),l=t(19),c=t(47),h=t(132),d=t(114);i("match",(function(e,n,t){return[function(n){var t=l(this),i=null==n?void 0:c(n,e);return i?a(i,n,t):new RegExp(n)[e](s(t))},function(e){var a=o(this),i=s(e),l=t(n,a,i);if(l.done)return l.value;if(!a.global)return d(a,i);var c=a.unicode;a.lastIndex=0;for(var u,m=[],p=0;null!==(u=d(a,i));){var g=s(u[0]);m[p]=g,""===g&&(a.lastIndex=h(i,r(a.lastIndex),c)),p++}return 0===p?null:m}]}))},function(e,n,t){var a=t(6),i=t(35),o=t(13),r=a("unscopables"),s=Array.prototype;null==s[r]&&o.f(s,r,{configurable:!0,value:i(null)}),e.exports=function(e){s[r][e]=!0}},function(e,n,t){var a=function(e){"use strict";var n=Object.prototype,t=n.hasOwnProperty,a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",o=a.asyncIterator||"@@asyncIterator",r=a.toStringTag||"@@toStringTag";function s(e,n,t){return Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}),e[n]}try{s({},"")}catch(e){s=function(e,n,t){return e[n]=t}}function l(e,n,t,a){var i=n&&n.prototype instanceof d?n:d,o=Object.create(i.prototype),r=new T(a||[]);return o._invoke=function(e,n,t){var a="suspendedStart";return function(i,o){if("executing"===a)throw new Error("Generator is already running");if("completed"===a){if("throw"===i)throw o;return A()}for(t.method=i,t.arg=o;;){var r=t.delegate;if(r){var s=w(r,t);if(s){if(s===h)continue;return s}}if("next"===t.method)t.sent=t._sent=t.arg;else if("throw"===t.method){if("suspendedStart"===a)throw a="completed",t.arg;t.dispatchException(t.arg)}else"return"===t.method&&t.abrupt("return",t.arg);a="executing";var l=c(e,n,t);if("normal"===l.type){if(a=t.done?"completed":"suspendedYield",l.arg===h)continue;return{value:l.arg,done:t.done}}"throw"===l.type&&(a="completed",t.method="throw",t.arg=l.arg)}}}(e,t,r),o}function c(e,n,t){try{return{type:"normal",arg:e.call(n,t)}}catch(e){return{type:"throw",arg:e}}}e.wrap=l;var h={};function d(){}function u(){}function m(){}var p={};s(p,i,(function(){return this}));var g=Object.getPrototypeOf,f=g&&g(g(E([])));f&&f!==n&&t.call(f,i)&&(p=f);var b=m.prototype=d.prototype=Object.create(p);function y(e){["next","throw","return"].forEach((function(n){s(e,n,(function(e){return this._invoke(n,e)}))}))}function v(e,n){var a;this._invoke=function(i,o){function r(){return new n((function(a,r){!function a(i,o,r,s){var l=c(e[i],e,o);if("throw"!==l.type){var h=l.arg,d=h.value;return d&&"object"==typeof d&&t.call(d,"__await")?n.resolve(d.__await).then((function(e){a("next",e,r,s)}),(function(e){a("throw",e,r,s)})):n.resolve(d).then((function(e){h.value=e,r(h)}),(function(e){return a("throw",e,r,s)}))}s(l.arg)}(i,o,a,r)}))}return a=a?a.then(r,r):r()}}function w(e,n){var t=e.iterator[n.method];if(void 0===t){if(n.delegate=null,"throw"===n.method){if(e.iterator.return&&(n.method="return",n.arg=void 0,w(e,n),"throw"===n.method))return h;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return h}var a=c(t,e.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,h;var i=a.arg;return i?i.done?(n[e.resultName]=i.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=void 0),n.delegate=null,h):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,h)}function x(e){var n={tryLoc:e[0]};1 in e&&(n.catchLoc=e[1]),2 in e&&(n.finallyLoc=e[2],n.afterLoc=e[3]),this.tryEntries.push(n)}function k(e){var n=e.completion||{};n.type="normal",delete n.arg,e.completion=n}function T(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(x,this),this.reset(!0)}function E(e){if(e){var n=e[i];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var a=-1,o=function n(){for(;++a<e.length;)if(t.call(e,a))return n.value=e[a],n.done=!1,n;return n.value=void 0,n.done=!0,n};return o.next=o}}return{next:A}}function A(){return{value:void 0,done:!0}}return u.prototype=m,s(b,"constructor",m),s(m,"constructor",u),u.displayName=s(m,r,"GeneratorFunction"),e.isGeneratorFunction=function(e){var n="function"==typeof e&&e.constructor;return!!n&&(n===u||"GeneratorFunction"===(n.displayName||n.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,m):(e.__proto__=m,s(e,r,"GeneratorFunction")),e.prototype=Object.create(b),e},e.awrap=function(e){return{__await:e}},y(v.prototype),s(v.prototype,o,(function(){return this})),e.AsyncIterator=v,e.async=function(n,t,a,i,o){void 0===o&&(o=Promise);var r=new v(l(n,t,a,i),o);return e.isGeneratorFunction(t)?r:r.next().then((function(e){return e.done?e.value:r.next()}))},y(b),s(b,r,"Generator"),s(b,i,(function(){return this})),s(b,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var n=[];for(var t in e)n.push(t);return n.reverse(),function t(){for(;n.length;){var a=n.pop();if(a in e)return t.value=a,t.done=!1,t}return t.done=!0,t}},e.values=E,T.prototype={constructor:T,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(k),!e)for(var n in this)"t"===n.charAt(0)&&t.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function a(t,a){return r.type="throw",r.arg=e,n.next=t,a&&(n.method="next",n.arg=void 0),!!a}for(var i=this.tryEntries.length-1;i>=0;--i){var o=this.tryEntries[i],r=o.completion;if("root"===o.tryLoc)return a("end");if(o.tryLoc<=this.prev){var s=t.call(o,"catchLoc"),l=t.call(o,"finallyLoc");if(s&&l){if(this.prev<o.catchLoc)return a(o.catchLoc,!0);if(this.prev<o.finallyLoc)return a(o.finallyLoc)}else if(s){if(this.prev<o.catchLoc)return a(o.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return a(o.finallyLoc)}}}},abrupt:function(e,n){for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a];if(i.tryLoc<=this.prev&&t.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var o=i;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=n&&n<=o.finallyLoc&&(o=null);var r=o?o.completion:{};return r.type=e,r.arg=n,o?(this.method="next",this.next=o.finallyLoc,h):this.complete(r)},complete:function(e,n){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&n&&(this.next=n),h},finish:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.finallyLoc===e)return this.complete(t.completion,t.afterLoc),k(t),h}},catch:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.tryLoc===e){var a=t.completion;if("throw"===a.type){var i=a.arg;k(t)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,t){return this.delegate={iterator:E(e),resultName:n,nextLoc:t},"next"===this.method&&(this.arg=void 0),h}},e}(e.exports);try{regeneratorRuntime=a}catch(e){"object"==typeof globalThis?globalThis.regeneratorRuntime=a:Function("r","regeneratorRuntime = r")(a)}},function(e,n,t){"use strict";var a=t(71).PROPER,i=t(14),o=t(10),r=t(12),s=t(3),l=t(242),c=RegExp.prototype.toString,h=s((function(){return"/a/b"!=c.call({source:"a",flags:"b"})})),d=a&&"toString"!=c.name;(h||d)&&i(RegExp.prototype,"toString",(function(){var e=o(this);return"/"+r(e.source)+"/"+r(l(e))}),{unsafe:!0})},function(e,n,t){"use strict";var a=t(20),i=t(146),o=t(70),r=t(38),s=t(13).f,l=t(166),c=t(16),h=t(8),d=r.set,u=r.getterFor("Array Iterator");e.exports=l(Array,"Array",(function(e,n){d(this,{type:"Array Iterator",target:a(e),index:0,kind:n})}),(function(){var e=u(this),n=e.target,t=e.kind,a=e.index++;return!n||a>=n.length?(e.target=void 0,{value:void 0,done:!0}):"keys"==t?{value:a,done:!1}:"values"==t?{value:n[a],done:!1}:{value:[a,n[a]],done:!1}}),"values");var m=o.Arguments=o.Array;if(i("keys"),i("values"),i("entries"),!c&&h&&"values"!==m.name)try{s(m,"name",{value:"values"})}catch(e){}},function(e,n,t){var a=t(0).TypeError;e.exports=function(e,n){if(e<n)throw a("Not enough arguments");return e}},function(e,n,t){var a=t(0),i=t(7),o=t(23),r=t(10),s=t(68),l=t(111),c=a.TypeError;e.exports=function(e,n){var t=arguments.length<2?l(e):n;if(o(t))return r(i(t,e));throw c(s(e)+" is not iterable")}},function(e,n,t){var a=t(266);e.exports=function(e,n){return new(a(e))(0===n?0:n)}},function(e,n,t){var a=t(11),i=t(27),o=t(6)("match");e.exports=function(e){var n;return a(e)&&(void 0!==(n=e[o])?!!n:"RegExp"==i(e))}},function(e,n,t){var a=t(4),i=t(11),o=t(72);e.exports=function(e,n,t){var r,s;return o&&a(r=n.constructor)&&r!==t&&i(s=r.prototype)&&s!==t.prototype&&o(e,s),e}},function(e,n){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,n){var t=/^\s+|\s+$/g,a=/^[-+]0x[0-9a-f]+$/i,i=/^0b[01]+$/i,o=/^0o[0-7]+$/i,r=parseInt,s="object"==typeof global&&global&&global.Object===Object&&global,l="object"==typeof self&&self&&self.Object===Object&&self,c=s||l||Function("return this")(),h=Object.prototype.toString,d=Math.max,u=Math.min,m=function(){return c.Date.now()};function p(e){var n=typeof e;return!!e&&("object"==n||"function"==n)}function g(e){if("number"==typeof e)return e;if(function(e){return"symbol"==typeof e||function(e){return!!e&&"object"==typeof e}(e)&&"[object Symbol]"==h.call(e)}(e))return NaN;if(p(e)){var n="function"==typeof e.valueOf?e.valueOf():e;e=p(n)?n+"":n}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(t,"");var s=i.test(e);return s||o.test(e)?r(e.slice(2),s?2:8):a.test(e)?NaN:+e}e.exports=function(e,n,t){var a,i,o,r,s,l,c=0,h=!1,f=!1,b=!0;if("function"!=typeof e)throw new TypeError("Expected a function");function y(n){var t=a,o=i;return a=i=void 0,c=n,r=e.apply(o,t)}function v(e){return c=e,s=setTimeout(x,n),h?y(e):r}function w(e){var t=e-l;return void 0===l||t>=n||t<0||f&&e-c>=o}function x(){var e=m();if(w(e))return k(e);s=setTimeout(x,function(e){var t=n-(e-l);return f?u(t,o-(e-c)):t}(e))}function k(e){return s=void 0,b&&a?y(e):(a=i=void 0,r)}function T(){var e=m(),t=w(e);if(a=arguments,i=this,l=e,t){if(void 0===s)return v(l);if(f)return s=setTimeout(x,n),y(l)}return void 0===s&&(s=setTimeout(x,n)),r}return n=g(n)||0,p(t)&&(h=!!t.leading,o=(f="maxWait"in t)?d(g(t.maxWait)||0,n):o,b="trailing"in t?!!t.trailing:b),T.cancel=function(){void 0!==s&&clearTimeout(s),c=0,a=l=i=s=void 0},T.flush=function(){return void 0===s?r:k(m())},T}},function(e,n,t){var a=t(2),i=t(19),o=t(12),r=t(158),s=a("".replace),l="["+r+"]",c=RegExp("^"+l+l+"*"),h=RegExp(l+l+"*$"),d=function(e){return function(n){var t=o(i(n));return 1&e&&(t=s(t,c,"")),2&e&&(t=s(t,h,"")),t}};e.exports={start:d(1),end:d(2),trim:d(3)}},function(e,n){e.exports="\t\n\v\f\r                　\u2028\u2029\ufeff"},function(e,n,t){var a=t(2),i=t(14),o=Date.prototype,r=a(o.toString),s=a(o.getTime);"Invalid Date"!=String(new Date(NaN))&&i(o,"toString",(function(){var e=s(this);return e==e?r(this):"Invalid Date"}))},function(e,n,t){var a=t(52);e.exports=a&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(e,n,t){var a=t(8),i=t(3);e.exports=a&&i((function(){return 42!=Object.defineProperty((function(){}),"prototype",{value:42,writable:!1}).prototype}))},function(e,n,t){var a=t(8),i=t(3),o=t(87);e.exports=!a&&!i((function(){return 7!=Object.defineProperty(o("div"),"a",{get:function(){return 7}}).a}))},function(e,n,t){var a=t(0),i=t(7),o=t(11),r=t(67),s=t(47),l=t(246),c=t(6),h=a.TypeError,d=c("toPrimitive");e.exports=function(e,n){if(!o(e)||r(e))return e;var t,a=s(e,d);if(a){if(void 0===n&&(n="default"),t=i(a,e,n),!o(t)||r(t))return t;throw h("Can't convert object to primitive value")}return void 0===n&&(n="number"),l(e,n)}},function(e,n,t){var a=t(2),i=t(9),o=t(20),r=t(119).indexOf,s=t(69),l=a([].push);e.exports=function(e,n){var t,a=o(e),c=0,h=[];for(t in a)!i(s,t)&&i(a,t)&&l(h,t);for(;n.length>c;)i(a,t=n[c++])&&(~r(h,t)||l(h,t));return h}},function(e,n,t){var a=t(15);e.exports=a("document","documentElement")},function(e,n,t){"use strict";var a=t(1),i=t(7),o=t(16),r=t(71),s=t(4),l=t(232),c=t(125),h=t(72),d=t(62),u=t(28),m=t(14),p=t(6),g=t(70),f=t(167),b=r.PROPER,y=r.CONFIGURABLE,v=f.IteratorPrototype,w=f.BUGGY_SAFARI_ITERATORS,x=p("iterator"),k=function(){return this};e.exports=function(e,n,t,r,p,f,T){l(t,n,r);var E,A,S,j=function(e){if(e===p&&P)return P;if(!w&&e in C)return C[e];switch(e){case"keys":case"values":case"entries":return function(){return new t(this,e)}}return function(){return new t(this)}},I=n+" Iterator",z=!1,C=e.prototype,B=C[x]||C["@@iterator"]||p&&C[p],P=!w&&B||j(p),L="Array"==n&&C.entries||B;if(L&&(E=c(L.call(new e)))!==Object.prototype&&E.next&&(o||c(E)===v||(h?h(E,v):s(E[x])||m(E,x,k)),d(E,I,!0,!0),o&&(g[I]=k)),b&&"values"==p&&B&&"values"!==B.name&&(!o&&y?u(C,"name","values"):(z=!0,P=function(){return i(B,this)})),p)if(A={values:j("values"),keys:f?P:j("keys"),entries:j("entries")},T)for(S in A)(w||z||!(S in C))&&m(C,S,A[S]);else a({target:n,proto:!0,forced:w||z},A);return o&&!T||C[x]===P||m(C,x,P,{name:p}),g[n]=P,A}},function(e,n,t){"use strict";var a,i,o,r=t(3),s=t(4),l=t(35),c=t(125),h=t(14),d=t(6),u=t(16),m=d("iterator"),p=!1;[].keys&&("next"in(o=[].keys())?(i=c(c(o)))!==Object.prototype&&(a=i):p=!0),null==a||r((function(){var e={};return a[m].call(e)!==e}))?a={}:u&&(a=l(a)),s(a[m])||h(a,m,(function(){return this})),e.exports={IteratorPrototype:a,BUGGY_SAFARI_ITERATORS:p}},function(e,n,t){var a=t(3);e.exports=!a((function(){function e(){}return e.prototype.constructor=null,Object.getPrototypeOf(new e)!==e.prototype}))},function(e,n,t){var a=t(0),i=t(94),o=t(68),r=a.TypeError;e.exports=function(e){if(i(e))return e;throw r(o(e)+" is not a constructor")}},function(e,n,t){var a,i,o,r,s=t(0),l=t(39),c=t(59),h=t(4),d=t(9),u=t(3),m=t(165),p=t(73),g=t(87),f=t(150),b=t(171),y=t(93),v=s.setImmediate,w=s.clearImmediate,x=s.process,k=s.Dispatch,T=s.Function,E=s.MessageChannel,A=s.String,S=0,j={};try{a=s.location}catch(e){}var I=function(e){if(d(j,e)){var n=j[e];delete j[e],n()}},z=function(e){return function(){I(e)}},C=function(e){I(e.data)},B=function(e){s.postMessage(A(e),a.protocol+"//"+a.host)};v&&w||(v=function(e){f(arguments.length,1);var n=h(e)?e:T(e),t=p(arguments,1);return j[++S]=function(){l(n,void 0,t)},i(S),S},w=function(e){delete j[e]},y?i=function(e){x.nextTick(z(e))}:k&&k.now?i=function(e){k.now(z(e))}:E&&!b?(r=(o=new E).port2,o.port1.onmessage=C,i=c(r.postMessage,r)):s.addEventListener&&h(s.postMessage)&&!s.importScripts&&a&&"file:"!==a.protocol&&!u(B)?(i=B,s.addEventListener("message",C,!1)):i="onreadystatechange"in g("script")?function(e){m.appendChild(g("script")).onreadystatechange=function(){m.removeChild(this),I(e)}}:function(e){setTimeout(z(e),0)}),e.exports={set:v,clear:w}},function(e,n,t){var a=t(33);e.exports=/(?:ipad|iphone|ipod).*applewebkit/i.test(a)},function(e,n,t){var a=t(0),i=t(59),o=t(7),r=t(10),s=t(68),l=t(173),c=t(24),h=t(36),d=t(151),u=t(111),m=t(174),p=a.TypeError,g=function(e,n){this.stopped=e,this.result=n},f=g.prototype;e.exports=function(e,n,t){var a,b,y,v,w,x,k,T=t&&t.that,E=!(!t||!t.AS_ENTRIES),A=!(!t||!t.IS_ITERATOR),S=!(!t||!t.INTERRUPTED),j=i(n,T),I=function(e){return a&&m(a,"normal",e),new g(!0,e)},z=function(e){return E?(r(e),S?j(e[0],e[1],I):j(e[0],e[1])):S?j(e,I):j(e)};if(A)a=e;else{if(!(b=u(e)))throw p(s(e)+" is not iterable");if(l(b)){for(y=0,v=c(e);v>y;y++)if((w=z(e[y]))&&h(f,w))return w;return new g(!1)}a=d(e,b)}for(x=a.next;!(k=o(x,a)).done;){try{w=z(k.value)}catch(e){m(a,"throw",e)}if("object"==typeof w&&w&&h(f,w))return w}return new g(!1)}},function(e,n,t){var a=t(6),i=t(70),o=a("iterator"),r=Array.prototype;e.exports=function(e){return void 0!==e&&(i.Array===e||r[o]===e)}},function(e,n,t){var a=t(7),i=t(10),o=t(47);e.exports=function(e,n,t){var r,s;i(e);try{if(!(r=o(e,"return"))){if("throw"===n)throw t;return t}r=a(r,e)}catch(e){s=!0,r=e}if("throw"===n)throw t;if(s)throw r;return i(r),t}},function(e,n,t){var a=t(55),i=t(176),o=t(74).CONSTRUCTOR;e.exports=o||!i((function(e){a.all(e).then(void 0,(function(){}))}))},function(e,n,t){var a=t(6)("iterator"),i=!1;try{var o=0,r={next:function(){return{done:!!o++}},return:function(){i=!0}};r[a]=function(){return this},Array.from(r,(function(){throw 2}))}catch(e){}e.exports=function(e,n){if(!n&&!i)return!1;var t=!1;try{var o={};o[a]=function(){return{next:function(){return{done:t=!0}}}},e(o)}catch(e){}return t}},function(e,n,t){var a=t(10),i=t(11),o=t(75);e.exports=function(e,n){if(a(e),i(n)&&n.constructor===e)return n;var t=o.f(e);return(0,t.resolve)(n),t.promise}},function(e,n,t){var a=t(2),i=t(58),o=t(12),r=t(19),s=a("".charAt),l=a("".charCodeAt),c=a("".slice),h=function(e){return function(n,t){var a,h,d=o(r(n)),u=i(t),m=d.length;return u<0||u>=m?e?"":void 0:(a=l(d,u))<55296||a>56319||u+1===m||(h=l(d,u+1))<56320||h>57343?e?s(d,u):a:e?c(d,u,u+2):h-56320+(a-55296<<10)+65536}};e.exports={codeAt:h(!1),charAt:h(!0)}},function(e,n){e.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},function(e,n,t){var a=t(87)("span").classList,i=a&&a.constructor&&a.constructor.prototype;e.exports=i===Object.prototype?void 0:i},function(e,n,t){var a=t(1),i=t(8),o=t(124),r=t(20),s=t(37),l=t(76);a({target:"Object",stat:!0,sham:!i},{getOwnPropertyDescriptors:function(e){for(var n,t,a=r(e),i=s.f,c=o(a),h={},d=0;c.length>d;)void 0!==(t=i(a,n=c[d++]))&&l(h,n,t);return h}})},function(e,n,t){var a=t(1),i=t(3),o=t(17),r=t(125),s=t(168);a({target:"Object",stat:!0,forced:i((function(){r(1)})),sham:!s},{getPrototypeOf:function(e){return r(o(e))}})},function(e,n,t){"use strict";var a,i=t(1),o=t(2),r=t(37).f,s=t(54),l=t(12),c=t(184),h=t(19),d=t(185),u=t(16),m=o("".startsWith),p=o("".slice),g=Math.min,f=d("startsWith");i({target:"String",proto:!0,forced:!!(u||f||(a=r(String.prototype,"startsWith"),!a||a.writable))&&!f},{startsWith:function(e){var n=l(h(this));c(e);var t=s(g(arguments.length>1?arguments[1]:void 0,n.length)),a=l(e);return m?m(n,a,t):p(n,t,t+a.length)===a}})},function(e,n,t){var a=t(0),i=t(153),o=a.TypeError;e.exports=function(e){if(i(e))throw o("The method doesn't accept regular expressions");return e}},function(e,n,t){var a=t(6)("match");e.exports=function(e){var n=/./;try{"/./"[e](n)}catch(t){try{return n[a]=!1,"/./"[e](n)}catch(e){}}return!1}},function(e,n,t){"use strict";var a=t(60).forEach,i=t(46)("forEach");e.exports=i?[].forEach:function(e){return a(this,e,arguments.length>1?arguments[1]:void 0)}},function(e,n,t){var a=t(3);e.exports=!a((function(){return Object.isExtensible(Object.preventExtensions({}))}))},function(e,n,t){var a=t(27),i=t(20),o=t(61).f,r=t(129),s="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];e.exports.f=function(e){return s&&"Window"==a(e)?function(e){try{return o(e)}catch(e){return r(s)}}(e):o(i(e))}},function(e,n,t){var a=t(6);n.f=a},function(e,n,t){var a=t(274),i=t(9),o=t(189),r=t(13).f;e.exports=function(e){var n=a.Symbol||(a.Symbol={});i(n,e)||r(n,e,{value:o.f(e)})}},function(e,n,t){var a=t(52);e.exports=a&&!!Symbol.for&&!!Symbol.keyFor},function(e,n,t){var a=t(1),i=t(279);a({target:"Array",stat:!0,forced:!t(176)((function(e){Array.from(e)}))},{from:i})},function(e,n,t){"use strict";var a=t(10);e.exports=function(){var e=a(this),n="";return e.hasIndices&&(n+="d"),e.global&&(n+="g"),e.ignoreCase&&(n+="i"),e.multiline&&(n+="m"),e.dotAll&&(n+="s"),e.unicode&&(n+="u"),e.sticky&&(n+="y"),n}},function(e,n,t){var a=t(12);e.exports=function(e,n){return void 0===e?arguments.length<2?"":n:a(e)}},function(e,n,t){t(1)({target:"Object",stat:!0,sham:!t(8)},{create:t(35)})},function(e,n){e.exports=function(e,n){for(var t=-1,a=n.length,i=e.length;++t<a;)e[i+t]=n[t];return e}},function(e,n){var t="object"==typeof global&&global&&global.Object===Object&&global;e.exports=t},function(e,n,t){var a=t(99),i=t(300),o=t(301),r=t(302),s=t(303),l=t(304);function c(e){var n=this.__data__=new a(e);this.size=n.size}c.prototype.clear=i,c.prototype.delete=o,c.prototype.get=r,c.prototype.has=s,c.prototype.set=l,e.exports=c},function(e,n){e.exports=function(e,n){return e===n||e!=e&&n!=n}},function(e,n,t){var a=t(64),i=t(135);e.exports=function(e){if(!i(e))return!1;var n=a(e);return"[object Function]"==n||"[object GeneratorFunction]"==n||"[object AsyncFunction]"==n||"[object Proxy]"==n}},function(e,n){var t=Function.prototype.toString;e.exports=function(e){if(null!=e){try{return t.call(e)}catch(e){}try{return e+""}catch(e){}}return""}},function(e,n,t){var a=t(321),i=t(49);e.exports=function e(n,t,o,r,s){return n===t||(null==n||null==t||!i(n)&&!i(t)?n!=n&&t!=t:a(n,t,o,r,e,s))}},function(e,n,t){var a=t(204),i=t(324),o=t(205);e.exports=function(e,n,t,r,s,l){var c=1&t,h=e.length,d=n.length;if(h!=d&&!(c&&d>h))return!1;var u=l.get(e),m=l.get(n);if(u&&m)return u==n&&m==e;var p=-1,g=!0,f=2&t?new a:void 0;for(l.set(e,n),l.set(n,e);++p<h;){var b=e[p],y=n[p];if(r)var v=c?r(y,b,p,n,e,l):r(b,y,p,e,n,l);if(void 0!==v){if(v)continue;g=!1;break}if(f){if(!i(n,(function(e,n){if(!o(f,n)&&(b===e||s(b,e,t,r,l)))return f.push(n)}))){g=!1;break}}else if(b!==y&&!s(b,y,t,r,l)){g=!1;break}}return l.delete(e),l.delete(n),g}},function(e,n,t){var a=t(136),i=t(322),o=t(323);function r(e){var n=-1,t=null==e?0:e.length;for(this.__data__=new a;++n<t;)this.add(e[n])}r.prototype.add=r.prototype.push=i,r.prototype.has=o,e.exports=r},function(e,n){e.exports=function(e,n){return e.has(n)}},function(e,n,t){var a=t(334),i=t(340),o=t(210);e.exports=function(e){return o(e)?a(e):i(e)}},function(e,n,t){(function(e){var a=t(34),i=t(336),o=n&&!n.nodeType&&n,r=o&&"object"==typeof e&&e&&!e.nodeType&&e,s=r&&r.exports===o?a.Buffer:void 0,l=(s?s.isBuffer:void 0)||i;e.exports=l}).call(this,t(155)(e))},function(e,n){var t=/^(?:0|[1-9]\d*)$/;e.exports=function(e,n){var a=typeof e;return!!(n=null==n?9007199254740991:n)&&("number"==a||"symbol"!=a&&t.test(e))&&e>-1&&e%1==0&&e<n}},function(e,n,t){var a=t(337),i=t(338),o=t(339),r=o&&o.isTypedArray,s=r?i(r):a;e.exports=s},function(e,n,t){var a=t(200),i=t(138);e.exports=function(e){return null!=e&&i(e.length)&&!a(e)}},function(e,n,t){var a=t(41)(t(34),"Set");e.exports=a},function(e,n,t){var a=t(135);e.exports=function(e){return e==e&&!a(e)}},function(e,n){e.exports=function(e,n){return function(t){return null!=t&&(t[e]===n&&(void 0!==n||e in Object(t)))}}},function(e,n,t){var a=t(215),i=t(103);e.exports=function(e,n){for(var t=0,o=(n=a(n,e)).length;null!=e&&t<o;)e=e[i(n[t++])];return t&&t==o?e:void 0}},function(e,n,t){var a=t(32),i=t(139),o=t(351),r=t(354);e.exports=function(e,n){return a(e)?e:i(e,n)?[e]:o(r(e))}},function(e,n,t){var a=t(0),i=t(39),o=t(4),r=t(33),s=t(73),l=t(150),c=/MSIE .\./.test(r),h=a.Function,d=function(e){return c?function(n,t){var a=l(arguments.length,1)>2,r=o(n)?n:h(n),c=a?s(arguments,2):void 0;return e(a?function(){i(r,this,c)}:r,t)}:e};e.exports={setTimeout:d(a.setTimeout),setInterval:d(a.setInterval)}},function(e,n,t){"use strict";var a=t(0),i=t(2),o=t(23),r=t(11),s=t(9),l=t(73),c=t(66),h=a.Function,d=i([].concat),u=i([].join),m={},p=function(e,n,t){if(!s(m,n)){for(var a=[],i=0;i<n;i++)a[i]="a["+i+"]";m[n]=h("C,a","return new C("+u(a,",")+")")}return m[n](e,t)};e.exports=c?h.bind:function(e){var n=o(this),t=n.prototype,a=l(arguments,1),i=function(){var t=d(a,l(arguments));return this instanceof i?p(n,t.length,t):n.apply(e,t)};return r(t)&&(i.prototype=t),i}},function(e,n,t){"use strict";var a=t(1),i=t(388).start;a({target:"String",proto:!0,forced:t(390)},{padStart:function(e){return i(this,e,arguments.length>1?arguments[1]:void 0)}})},function(e,n,t){},function(e,n,t){},function(e,n,t){t(1)({target:"Object",stat:!0},{setPrototypeOf:t(72)})},function(e,n,t){var a=t(1),i=t(15),o=t(39),r=t(217),s=t(169),l=t(10),c=t(11),h=t(35),d=t(3),u=i("Reflect","construct"),m=Object.prototype,p=[].push,g=d((function(){function e(){}return!(u((function(){}),[],e)instanceof e)})),f=!d((function(){u((function(){}))})),b=g||f;a({target:"Reflect",stat:!0,forced:b,sham:b},{construct:function(e,n){s(e),l(n);var t=arguments.length<3?e:s(arguments[2]);if(f&&!g)return u(e,n,t);if(e==t){switch(n.length){case 0:return new e;case 1:return new e(n[0]);case 2:return new e(n[0],n[1]);case 3:return new e(n[0],n[1],n[2]);case 4:return new e(n[0],n[1],n[2],n[3])}var a=[null];return o(p,a,n),new(o(r,e,a))}var i=t.prototype,d=h(c(i)?i:m),b=o(e,d,n);return c(b)?b:d}})},function(e,n,t){},function(e,n,t){},function(e,n,t){var a=t(287),i=t(292),o=t(363),r=t(371),s=t(380),l=t(240),c=o((function(e){var n=l(e);return s(n)&&(n=void 0),r(a(e,1,s,!0),i(n,2))}));e.exports=c},function(e,n,t){"use strict";
/*!
 * escape-html
 * Copyright(c) 2012-2013 TJ Holowaychuk
 * Copyright(c) 2015 Andreas Lubbe
 * Copyright(c) 2015 Tiancheng "Timothy" Gu
 * MIT Licensed
 */var a=/["'&<>]/;e.exports=function(e){var n,t=""+e,i=a.exec(t);if(!i)return t;var o="",r=0,s=0;for(r=i.index;r<t.length;r++){switch(t.charCodeAt(r)){case 34:n="&quot;";break;case 38:n="&amp;";break;case 39:n="&#39;";break;case 60:n="&lt;";break;case 62:n="&gt;";break;default:continue}s!==r&&(o+=t.substring(s,r)),s=r+1,o+=n}return s!==r?o+t.substring(s,r):o}},function(e,n,t){"use strict";
/**
 * @file Embedded JavaScript templating engine. {@link http://ejs.co}
 * @author Matthew Eernisse <mde@fleegix.org>
 * @author Tiancheng "Timothy" Gu <timothygu99@gmail.com>
 * @project EJS
 * @license {@link http://www.apache.org/licenses/LICENSE-2.0 Apache License, Version 2.0}
 */var a=t(402),i=t(403),o=t(404),r=!1,s=t(405).version,l=["delimiter","scope","context","debug","compileDebug","client","_with","rmWhitespace","strict","filename","async"],c=l.concat("cache"),h=/^\uFEFF/;function d(e,t){var i,o,r=t.views,s=/^[A-Za-z]+:\\|^\//.exec(e);if(s&&s.length)i=n.resolveInclude(e.replace(/^\/*/,""),t.root||"/",!0);else if(t.filename&&(o=n.resolveInclude(e,t.filename),a.existsSync(o)&&(i=o)),i||Array.isArray(r)&&r.some((function(t){return o=n.resolveInclude(e,t,!0),a.existsSync(o)}))&&(i=o),!i)throw new Error('Could not find the include file "'+t.escapeFunction(e)+'"');return i}function u(e,t){var a,i=e.filename,o=arguments.length>1;if(e.cache){if(!i)throw new Error("cache option requires a filename");if(a=n.cache.get(i))return a;o||(t=p(i).toString().replace(h,""))}else if(!o){if(!i)throw new Error("Internal EJS error: no file name or template provided");t=p(i).toString().replace(h,"")}return a=n.compile(t,e),e.cache&&n.cache.set(i,a),a}function m(e,t,a){var i;if(!a){if("function"==typeof n.promiseImpl)return new n.promiseImpl((function(n,a){try{n(i=u(e)(t))}catch(e){a(e)}}));throw new Error("Please provide a callback function")}try{i=u(e)(t)}catch(e){return a(e)}a(null,i)}function p(e){return n.fileLoader(e)}function g(e,n,t,a,i){var o=n.split("\n"),r=Math.max(a-3,0),s=Math.min(o.length,a+3),l=i(t),c=o.slice(r,s).map((function(e,n){var t=n+r+1;return(t==a?" >> ":"    ")+t+"| "+e})).join("\n");throw e.path=l,e.message=(l||"ejs")+":"+a+"\n"+c+"\n\n"+e.message,e}function f(e){return e.replace(/;(\s*$)/,"$1")}function b(e,t){t=t||{};var a={};this.templateText=e,this.mode=null,this.truncate=!1,this.currentLine=1,this.source="",this.dependencies=[],a.client=t.client||!1,a.escapeFunction=t.escape||t.escapeFunction||o.escapeXML,a.compileDebug=!1!==t.compileDebug,a.debug=!!t.debug,a.filename=t.filename,a.openDelimiter=t.openDelimiter||n.openDelimiter||"<",a.closeDelimiter=t.closeDelimiter||n.closeDelimiter||">",a.delimiter=t.delimiter||n.delimiter||"%",a.strict=t.strict||!1,a.context=t.context,a.cache=t.cache||!1,a.rmWhitespace=t.rmWhitespace,a.root=t.root,a.outputFunctionName=t.outputFunctionName,a.localsName=t.localsName||n.localsName||"locals",a.views=t.views,a.async=t.async,a.destructuredLocals=t.destructuredLocals,a.legacyInclude=void 0===t.legacyInclude||!!t.legacyInclude,a.strict?a._with=!1:a._with=void 0===t._with||t._with,this.opts=a,this.regex=this.createRegex()}n.cache=o.cache,n.fileLoader=a.readFileSync,n.localsName="locals",n.promiseImpl=new Function("return this;")().Promise,n.resolveInclude=function(e,n,t){var a=i.dirname,o=i.extname,r=(0,i.resolve)(t?n:a(n),e);return o(e)||(r+=".ejs"),r},n.compile=function(e,n){return n&&n.scope&&(r||(console.warn("`scope` option is deprecated and will be removed in EJS 3"),r=!0),n.context||(n.context=n.scope),delete n.scope),new b(e,n).compile()},n.render=function(e,n,t){var a=n||{},i=t||{};return 2==arguments.length&&o.shallowCopyFromList(i,a,l),u(i,e)(a)},n.renderFile=function(){var e,n,t,a=Array.prototype.slice.call(arguments),i=a.shift(),r={filename:i};return"function"==typeof arguments[arguments.length-1]&&(e=a.pop()),a.length?(n=a.shift(),a.length?o.shallowCopy(r,a.pop()):(n.settings&&(n.settings.views&&(r.views=n.settings.views),n.settings["view cache"]&&(r.cache=!0),(t=n.settings["view options"])&&o.shallowCopy(r,t)),o.shallowCopyFromList(r,n,c)),r.filename=i):n={},m(r,n,e)},n.Template=b,n.clearCache=function(){n.cache.reset()},b.modes={EVAL:"eval",ESCAPED:"escaped",RAW:"raw",COMMENT:"comment",LITERAL:"literal"},b.prototype={createRegex:function(){var e="(<%%|%%>|<%=|<%-|<%_|<%#|<%|%>|-%>|_%>)",n=o.escapeRegExpChars(this.opts.delimiter),t=o.escapeRegExpChars(this.opts.openDelimiter),a=o.escapeRegExpChars(this.opts.closeDelimiter);return e=e.replace(/%/g,n).replace(/</g,t).replace(/>/g,a),new RegExp(e)},compile:function(){var e,n,t,a=this.opts,r="",s="",l=a.escapeFunction;if(!this.source){if(this.generateSource(),r+='  var __output = "";\n  function __append(s) { if (s !== undefined && s !== null) __output += s }\n',a.outputFunctionName&&(r+="  var "+a.outputFunctionName+" = __append;\n"),a.destructuredLocals&&a.destructuredLocals.length){for(var c="  var __locals = ("+a.localsName+" || {}),\n",h=0;h<a.destructuredLocals.length;h++){var m=a.destructuredLocals[h];h>0&&(c+=",\n  "),c+=m+" = __locals."+m}r+=c+";\n"}!1!==a._with&&(r+="  with ("+a.localsName+" || {}) {\n",s+="  }\n"),s+="  return __output;\n",this.source=r+this.source+s}e=a.compileDebug?"var __line = 1\n  , __lines = "+JSON.stringify(this.templateText)+"\n  , __filename = "+(a.filename?JSON.stringify(a.filename):"undefined")+";\ntry {\n"+this.source+"} catch (e) {\n  rethrow(e, __lines, __filename, __line, escapeFn);\n}\n":this.source,a.client&&(e="escapeFn = escapeFn || "+l.toString()+";\n"+e,a.compileDebug&&(e="rethrow = rethrow || "+g.toString()+";\n"+e)),a.strict&&(e='"use strict";\n'+e),a.debug&&console.log(e),a.compileDebug&&a.filename&&(e=e+"\n//# sourceURL="+a.filename+"\n");try{if(a.async)try{t=new Function("return (async function(){}).constructor;")()}catch(e){throw e instanceof SyntaxError?new Error("This environment does not support async/await"):e}else t=Function;n=new t(a.localsName+", escapeFn, include, rethrow",e)}catch(e){throw e instanceof SyntaxError&&(a.filename&&(e.message+=" in "+a.filename),e.message+=" while compiling ejs\n\n",e.message+="If the above error is not helpful, you may want to try EJS-Lint:\n",e.message+="https://github.com/RyanZim/EJS-Lint",a.async||(e.message+="\n",e.message+="Or, if you meant to create an async function, pass `async: true` as an option.")),e}var p=a.client?n:function(e){return n.apply(a.context,[e||{},l,function(n,t){var i=o.shallowCopy({},e);return t&&(i=o.shallowCopy(i,t)),function(e,n){var t=o.shallowCopy({},n);return t.filename=d(e,t),u(t)}(n,a)(i)},g])};if(p.dependencies=this.dependencies,a.filename&&"function"==typeof Object.defineProperty){var f=a.filename,b=i.basename(f,i.extname(f));try{Object.defineProperty(p,"name",{value:b,writable:!1,enumerable:!1,configurable:!0})}catch(e){}}return p},generateSource:function(){var e=this.opts;e.rmWhitespace&&(this.templateText=this.templateText.replace(/[\r\n]+/g,"\n").replace(/^\s+|\s+$/gm,"")),this.templateText=this.templateText.replace(/[ \t]*<%_/gm,"<%_").replace(/_%>[ \t]*/gm,"_%>");var t=this,a=this.parseTemplateText(),i=this.opts.delimiter,r=this.opts.openDelimiter,s=this.opts.closeDelimiter;a&&a.length&&a.forEach((function(l,c){var u,m,g,f,y,v;if(0===l.indexOf(r+i)&&0!==l.indexOf(r+i+i)&&(m=a[c+2])!=i+s&&m!="-"+i+s&&m!="_"+i+s)throw new Error('Could not find matching close tag for "'+l+'".');if(e.legacyInclude&&(g=l.match(/^\s*include\s+(\S+)/))&&(u=a[c-1])&&(u==r+i||u==r+i+"-"||u==r+i+"_"))return f=o.shallowCopy({},t.opts),y=function(e,n){var t,a,i=o.shallowCopy({},n);a=p(t=d(e,i)).toString().replace(h,""),i.filename=t;var r=new b(a,i);return r.generateSource(),{source:r.source,filename:t,template:a}}(g[1],f),v=t.opts.compileDebug?"    ; (function(){\n      var __line = 1\n      , __lines = "+JSON.stringify(y.template)+"\n      , __filename = "+JSON.stringify(y.filename)+";\n      try {\n"+y.source+"      } catch (e) {\n        rethrow(e, __lines, __filename, __line, escapeFn);\n      }\n    ; }).call(this)\n":"    ; (function(){\n"+y.source+"    ; }).call(this)\n",t.source+=v,void t.dependencies.push(n.resolveInclude(g[1],f.filename));t.scanLine(l)}))},parseTemplateText:function(){for(var e,n=this.templateText,t=this.regex,a=t.exec(n),i=[];a;)0!==(e=a.index)&&(i.push(n.substring(0,e)),n=n.slice(e)),i.push(a[0]),n=n.slice(a[0].length),a=t.exec(n);return n&&i.push(n),i},_addOutput:function(e){if(this.truncate&&(e=e.replace(/^(?:\r\n|\r|\n)/,""),this.truncate=!1),!e)return e;e=(e=(e=(e=e.replace(/\\/g,"\\\\")).replace(/\n/g,"\\n")).replace(/\r/g,"\\r")).replace(/"/g,'\\"'),this.source+='    ; __append("'+e+'")\n'},scanLine:function(e){var n,t=this.opts.delimiter,a=this.opts.openDelimiter,i=this.opts.closeDelimiter;switch(n=e.split("\n").length-1,e){case a+t:case a+t+"_":this.mode=b.modes.EVAL;break;case a+t+"=":this.mode=b.modes.ESCAPED;break;case a+t+"-":this.mode=b.modes.RAW;break;case a+t+"#":this.mode=b.modes.COMMENT;break;case a+t+t:this.mode=b.modes.LITERAL,this.source+='    ; __append("'+e.replace(a+t+t,a+t)+'")\n';break;case t+t+i:this.mode=b.modes.LITERAL,this.source+='    ; __append("'+e.replace(t+t+i,t+i)+'")\n';break;case t+i:case"-"+t+i:case"_"+t+i:this.mode==b.modes.LITERAL&&this._addOutput(e),this.mode=null,this.truncate=0===e.indexOf("-")||0===e.indexOf("_");break;default:if(this.mode){switch(this.mode){case b.modes.EVAL:case b.modes.ESCAPED:case b.modes.RAW:e.lastIndexOf("//")>e.lastIndexOf("\n")&&(e+="\n")}switch(this.mode){case b.modes.EVAL:this.source+="    ; "+e+"\n";break;case b.modes.ESCAPED:this.source+="    ; __append(escapeFn("+f(e)+"))\n";break;case b.modes.RAW:this.source+="    ; __append("+f(e)+")\n";break;case b.modes.COMMENT:break;case b.modes.LITERAL:this._addOutput(e)}}else this._addOutput(e)}this.opts.compileDebug&&n&&(this.currentLine+=n,this.source+="    ; __line = "+this.currentLine+"\n")}},n.escapeXML=o.escapeXML,n.__express=n.renderFile,n.VERSION=s,n.name="ejs","undefined"!=typeof window&&(window.ejs=n)},function(e,n,t){"use strict";t.r(n);var a={name:"CodeBlock",props:{title:{type:String,required:!0},active:{type:Boolean,default:!1}}},i=(t(391),t(21)),o=Object(i.a)(a,(function(){var e=this.$createElement;return(this._self._c||e)("div",{staticClass:"theme-code-block",class:{"theme-code-block__active":this.active}},[this._t("default")],2)}),[],!1,null,"4f1e9d0c",null);n.default=o.exports},function(e,n,t){"use strict";t.r(n);t(29),t(5),t(30),t(44),t(25);var a={name:"CodeGroup",data:function(){return{codeTabs:[],activeCodeTabIndex:-1}},watch:{activeCodeTabIndex:function(e){this.codeTabs.forEach((function(e){e.elm.classList.remove("theme-code-block__active")})),this.codeTabs[e].elm.classList.add("theme-code-block__active")}},mounted:function(){var e=this;this.codeTabs=(this.$slots.default||[]).filter((function(e){return Boolean(e.componentOptions)})).map((function(n,t){return""===n.componentOptions.propsData.active&&(e.activeCodeTabIndex=t),{title:n.componentOptions.propsData.title,elm:n.elm}})),-1===this.activeCodeTabIndex&&this.codeTabs.length>0&&(this.activeCodeTabIndex=0)},methods:{changeCodeTab:function(e){this.activeCodeTabIndex=e}}},i=(t(392),t(21)),o=Object(i.a)(a,(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",{staticClass:"theme-code-group"},[t("div",{staticClass:"theme-code-group__nav"},[t("ul",{staticClass:"theme-code-group__ul"},e._l(e.codeTabs,(function(n,a){return t("li",{key:n.title,staticClass:"theme-code-group__li"},[t("button",{staticClass:"theme-code-group__nav-tab",class:{"theme-code-group__nav-tab-active":a===e.activeCodeTabIndex},on:{click:function(n){return e.changeCodeTab(a)}}},[e._v("\n            "+e._s(n.title)+"\n          ")])])})),0)]),e._v(" "),e._t("default"),e._v(" "),e.codeTabs.length<1?t("pre",{staticClass:"pre-blank"},[e._v("// Make sure to add code blocks to your code group")]):e._e()],2)}),[],!1,null,"2f5f1757",null);n.default=o.exports},function(e,n,t){"use strict";var a=t(8),i=t(0),o=t(2),r=t(110),s=t(14),l=t(9),c=t(154),h=t(36),d=t(67),u=t(163),m=t(3),p=t(61).f,g=t(37).f,f=t(13).f,b=t(387),y=t(157).trim,v=i.Number,w=v.prototype,x=i.TypeError,k=o("".slice),T=o("".charCodeAt),E=function(e){var n=u(e,"number");return"bigint"==typeof n?n:A(n)},A=function(e){var n,t,a,i,o,r,s,l,c=u(e,"number");if(d(c))throw x("Cannot convert a Symbol value to a number");if("string"==typeof c&&c.length>2)if(c=y(c),43===(n=T(c,0))||45===n){if(88===(t=T(c,2))||120===t)return NaN}else if(48===n){switch(T(c,1)){case 66:case 98:a=2,i=49;break;case 79:case 111:a=8,i=55;break;default:return+c}for(r=(o=k(c,2)).length,s=0;s<r;s++)if((l=T(o,s))<48||l>i)return NaN;return parseInt(o,a)}return+c};if(r("Number",!v(" 0o1")||!v("0b1")||v("+0x1"))){for(var S,j=function(e){var n=arguments.length<1?0:v(E(e)),t=this;return h(w,t)&&m((function(){b(t)}))?c(Object(n),t,j):n},I=a?p(v):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,isFinite,isInteger,isNaN,isSafeInteger,parseFloat,parseInt,fromString,range".split(","),z=0;I.length>z;z++)l(v,S=I[z])&&!l(j,S)&&f(j,S,g(v,S));j.prototype=w,w.constructor=j,s(i,"Number",j)}},function(e,n,t){var a=t(3),i=t(0).RegExp;e.exports=a((function(){var e=i(".","s");return!(e.dotAll&&e.exec("\n")&&"s"===e.flags)}))},function(e,n,t){"use strict";var a=t(167).IteratorPrototype,i=t(35),o=t(48),r=t(62),s=t(70),l=function(){return this};e.exports=function(e,n,t,c){var h=n+" Iterator";return e.prototype=i(a,{next:o(+!c,t)}),r(e,h,!1,!0),s[h]=l,e}},function(e,n,t){var a=t(14);e.exports=function(e,n,t){for(var i in n)a(e,i,n[i],t);return e}},function(e,n,t){"use strict";var a=t(15),i=t(13),o=t(6),r=t(8),s=o("species");e.exports=function(e){var n=a(e),t=i.f;r&&n&&!n[s]&&t(n,s,{configurable:!0,get:function(){return this}})}},function(e,n,t){var a=t(0),i=t(36),o=a.TypeError;e.exports=function(e,n){if(i(n,e))return e;throw o("Incorrect invocation")}},function(e,n,t){var a=t(3),i=t(0).RegExp;e.exports=a((function(){var e=i("(?<a>b)","g");return"b"!==e.exec("b").groups.a||"bc"!=="b".replace(e,"$<a>c")}))},function(e,n,t){var a=t(13).f;e.exports=function(e,n,t){t in e||a(e,t,{configurable:!0,get:function(){return n[t]},set:function(e){n[t]=e}})}},function(e,n,t){"use strict";var a=t(1),i=t(119).includes,o=t(146);a({target:"Array",proto:!0},{includes:function(e){return i(this,e,arguments.length>1?arguments[1]:void 0)}}),o("includes")},function(e,n,t){"use strict";var a=t(1),i=t(2),o=t(184),r=t(19),s=t(12),l=t(185),c=i("".indexOf);a({target:"String",proto:!0,forced:!l("includes")},{includes:function(e){return!!~c(s(r(this)),s(o(e)),arguments.length>1?arguments[1]:void 0)}})},function(e,n){e.exports=function(e){var n=null==e?0:e.length;return n?e[n-1]:void 0}},function(e,n,t){"use strict";var a=t(1),i=t(157).trim;a({target:"String",proto:!0,forced:t(385)("trim")},{trim:function(){return i(this)}})},function(e,n,t){var a=t(7),i=t(9),o=t(36),r=t(193),s=RegExp.prototype;e.exports=function(e){var n=e.flags;return void 0!==n||"flags"in s||i(e,"flags")||!o(s,e)?n:a(r,e)}},function(e,n,t){var a=t(129),i=Math.floor,o=function(e,n){var t=e.length,l=i(t/2);return t<8?r(e,n):s(e,o(a(e,0,l),n),o(a(e,l),n),n)},r=function(e,n){for(var t,a,i=e.length,o=1;o<i;){for(a=o,t=e[o];a&&n(e[a-1],t)>0;)e[a]=e[--a];a!==o++&&(e[a]=t)}return e},s=function(e,n,t,a){for(var i=n.length,o=t.length,r=0,s=0;r<i||s<o;)e[r+s]=r<i&&s<o?a(n[r],t[s])<=0?n[r++]:t[s++]:r<i?n[r++]:t[s++];return e};e.exports=o},function(e,n,t){var a=t(0),i=t(8),o=t(112).MISSED_STICKY,r=t(27),s=t(13).f,l=t(38).get,c=RegExp.prototype,h=a.TypeError;i&&o&&s(c,"sticky",{configurable:!0,get:function(){if(this!==c){if("RegExp"===r(this))return!!l(this).sticky;throw h("Incompatible receiver, RegExp required")}}})},function(e,n,t){e.exports=t(408)},function(e,n,t){var a=t(0),i=t(7),o=t(4),r=t(11),s=a.TypeError;e.exports=function(e,n){var t,a;if("string"===n&&o(t=e.toString)&&!r(a=i(t,e)))return a;if(o(t=e.valueOf)&&!r(a=i(t,e)))return a;if("string"!==n&&o(t=e.toString)&&!r(a=i(t,e)))return a;throw s("Can't convert object to primitive value")}},function(e,n,t){var a=t(0),i=t(4),o=t(91),r=a.WeakMap;e.exports=i(r)&&/native code/.test(o(r))},function(e,n,t){var a=t(0),i=t(4),o=a.String,r=a.TypeError;e.exports=function(e){if("object"==typeof e||i(e))return e;throw r("Can't set "+o(e)+" as a prototype")}},function(e,n,t){t(250),t(257),t(258),t(259),t(260),t(261)},function(e,n,t){"use strict";var a,i,o,r=t(1),s=t(16),l=t(93),c=t(0),h=t(7),d=t(14),u=t(233),m=t(72),p=t(62),g=t(234),f=t(23),b=t(4),y=t(11),v=t(235),w=t(126),x=t(170).set,k=t(251),T=t(254),E=t(128),A=t(255),S=t(38),j=t(55),I=t(74),z=t(75),C=I.CONSTRUCTOR,B=I.REJECTION_EVENT,P=I.SUBCLASSING,L=S.getterFor("Promise"),J=S.set,O=j&&j.prototype,_=j,F=O,D=c.TypeError,q=c.document,H=c.process,M=z.f,U=M,N=!!(q&&q.createEvent&&c.dispatchEvent),R=function(e){var n;return!(!y(e)||!b(n=e.then))&&n},W=function(e,n){var t,a,i,o=n.value,r=1==n.state,s=r?e.ok:e.fail,l=e.resolve,c=e.reject,d=e.domain;try{s?(r||(2===n.rejection&&Y(n),n.rejection=1),!0===s?t=o:(d&&d.enter(),t=s(o),d&&(d.exit(),i=!0)),t===e.promise?c(D("Promise-chain cycle")):(a=R(t))?h(a,t,l,c):l(t)):c(o)}catch(e){d&&!i&&d.exit(),c(e)}},G=function(e,n){e.notified||(e.notified=!0,k((function(){for(var t,a=e.reactions;t=a.get();)W(t,e);e.notified=!1,n&&!e.rejection&&Q(e)})))},$=function(e,n,t){var a,i;N?((a=q.createEvent("Event")).promise=n,a.reason=t,a.initEvent(e,!1,!0),c.dispatchEvent(a)):a={promise:n,reason:t},!B&&(i=c["on"+e])?i(a):"unhandledrejection"===e&&T("Unhandled promise rejection",t)},Q=function(e){h(x,c,(function(){var n,t=e.facade,a=e.value;if(V(e)&&(n=E((function(){l?H.emit("unhandledRejection",a,t):$("unhandledrejection",t,a)})),e.rejection=l||V(e)?2:1,n.error))throw n.value}))},V=function(e){return 1!==e.rejection&&!e.parent},Y=function(e){h(x,c,(function(){var n=e.facade;l?H.emit("rejectionHandled",n):$("rejectionhandled",n,e.value)}))},Z=function(e,n,t){return function(a){e(n,a,t)}},K=function(e,n,t){e.done||(e.done=!0,t&&(e=t),e.value=n,e.state=2,G(e,!0))},X=function(e,n,t){if(!e.done){e.done=!0,t&&(e=t);try{if(e.facade===n)throw D("Promise can't be resolved itself");var a=R(n);a?k((function(){var t={done:!1};try{h(a,n,Z(X,t,e),Z(K,t,e))}catch(n){K(t,n,e)}})):(e.value=n,e.state=1,G(e,!1))}catch(n){K({done:!1},n,e)}}};if(C&&(F=(_=function(e){v(this,F),f(e),h(a,this);var n=L(this);try{e(Z(X,n),Z(K,n))}catch(e){K(n,e)}}).prototype,(a=function(e){J(this,{type:"Promise",done:!1,notified:!1,parent:!1,reactions:new A,rejection:!1,state:0,value:void 0})}).prototype=u(F,{then:function(e,n){var t=L(this),a=M(w(this,_));return t.parent=!0,a.ok=!b(e)||e,a.fail=b(n)&&n,a.domain=l?H.domain:void 0,0==t.state?t.reactions.add(a):k((function(){W(a,t)})),a.promise}}),i=function(){var e=new a,n=L(e);this.promise=e,this.resolve=Z(X,n),this.reject=Z(K,n)},z.f=M=function(e){return e===_||void 0===e?new i(e):U(e)},!s&&b(j)&&O!==Object.prototype)){o=O.then,P||d(O,"then",(function(e,n){var t=this;return new _((function(e,n){h(o,t,e,n)})).then(e,n)}),{unsafe:!0});try{delete O.constructor}catch(e){}m&&m(O,F)}r({global:!0,wrap:!0,forced:C},{Promise:_}),p(_,"Promise",!1,!0),g("Promise")},function(e,n,t){var a,i,o,r,s,l,c,h,d=t(0),u=t(59),m=t(37).f,p=t(170).set,g=t(171),f=t(252),b=t(253),y=t(93),v=d.MutationObserver||d.WebKitMutationObserver,w=d.document,x=d.process,k=d.Promise,T=m(d,"queueMicrotask"),E=T&&T.value;E||(a=function(){var e,n;for(y&&(e=x.domain)&&e.exit();i;){n=i.fn,i=i.next;try{n()}catch(e){throw i?r():o=void 0,e}}o=void 0,e&&e.enter()},g||y||b||!v||!w?!f&&k&&k.resolve?((c=k.resolve(void 0)).constructor=k,h=u(c.then,c),r=function(){h(a)}):y?r=function(){x.nextTick(a)}:(p=u(p,d),r=function(){p(a)}):(s=!0,l=w.createTextNode(""),new v(a).observe(l,{characterData:!0}),r=function(){l.data=s=!s})),e.exports=E||function(e){var n={fn:e,next:void 0};o&&(o.next=n),i||(i=n,r()),o=n}},function(e,n,t){var a=t(33),i=t(0);e.exports=/ipad|iphone|ipod/i.test(a)&&void 0!==i.Pebble},function(e,n,t){var a=t(33);e.exports=/web0s(?!.*chrome)/i.test(a)},function(e,n,t){var a=t(0);e.exports=function(e,n){var t=a.console;t&&t.error&&(1==arguments.length?t.error(e):t.error(e,n))}},function(e,n){var t=function(){this.head=null,this.tail=null};t.prototype={add:function(e){var n={item:e,next:null};this.head?this.tail.next=n:this.head=n,this.tail=n},get:function(){var e=this.head;if(e)return this.head=e.next,this.tail===e&&(this.tail=null),e.item}},e.exports=t},function(e,n){e.exports="object"==typeof window&&"object"!=typeof Deno},function(e,n,t){"use strict";var a=t(1),i=t(7),o=t(23),r=t(75),s=t(128),l=t(172);a({target:"Promise",stat:!0,forced:t(175)},{all:function(e){var n=this,t=r.f(n),a=t.resolve,c=t.reject,h=s((function(){var t=o(n.resolve),r=[],s=0,h=1;l(e,(function(e){var o=s++,l=!1;h++,i(t,n,e).then((function(e){l||(l=!0,r[o]=e,--h||a(r))}),c)})),--h||a(r)}));return h.error&&c(h.value),t.promise}})},function(e,n,t){"use strict";var a=t(1),i=t(16),o=t(74).CONSTRUCTOR,r=t(55),s=t(15),l=t(4),c=t(14),h=r&&r.prototype;if(a({target:"Promise",proto:!0,forced:o,real:!0},{catch:function(e){return this.then(void 0,e)}}),!i&&l(r)){var d=s("Promise").prototype.catch;h.catch!==d&&c(h,"catch",d,{unsafe:!0})}},function(e,n,t){"use strict";var a=t(1),i=t(7),o=t(23),r=t(75),s=t(128),l=t(172);a({target:"Promise",stat:!0,forced:t(175)},{race:function(e){var n=this,t=r.f(n),a=t.reject,c=s((function(){var r=o(n.resolve);l(e,(function(e){i(r,n,e).then(t.resolve,a)}))}));return c.error&&a(c.value),t.promise}})},function(e,n,t){"use strict";var a=t(1),i=t(7),o=t(75);a({target:"Promise",stat:!0,forced:t(74).CONSTRUCTOR},{reject:function(e){var n=o.f(this);return i(n.reject,void 0,e),n.promise}})},function(e,n,t){"use strict";var a=t(1),i=t(15),o=t(16),r=t(55),s=t(74).CONSTRUCTOR,l=t(177),c=i("Promise"),h=o&&!s;a({target:"Promise",stat:!0,forced:o||s},{resolve:function(e){return l(h&&this===c?r:this,e)}})},function(e,n,t){var a=t(1),i=t(263);a({target:"Object",stat:!0,forced:Object.assign!==i},{assign:i})},function(e,n,t){"use strict";var a=t(8),i=t(2),o=t(7),r=t(3),s=t(89),l=t(92),c=t(122),h=t(17),d=t(65),u=Object.assign,m=Object.defineProperty,p=i([].concat);e.exports=!u||r((function(){if(a&&1!==u({b:1},u(m({},"a",{enumerable:!0,get:function(){m(this,"b",{value:3,enumerable:!1})}}),{b:2})).b)return!0;var e={},n={},t=Symbol();return e[t]=7,"abcdefghijklmnopqrst".split("").forEach((function(e){n[e]=e})),7!=u({},e)[t]||"abcdefghijklmnopqrst"!=s(u({},n)).join("")}))?function(e,n){for(var t=h(e),i=arguments.length,r=1,u=l.f,m=c.f;i>r;)for(var g,f=d(arguments[r++]),b=u?p(s(f),u(f)):s(f),y=b.length,v=0;y>v;)g=b[v++],a&&!o(m,f,g)||(t[g]=f[g]);return t}:u},function(e,n,t){"use strict";var a=t(1),i=t(16),o=t(55),r=t(3),s=t(15),l=t(4),c=t(126),h=t(177),d=t(14),u=o&&o.prototype;if(a({target:"Promise",proto:!0,real:!0,forced:!!o&&r((function(){u.finally.call({then:function(){}},(function(){}))}))},{finally:function(e){var n=c(this,s("Promise")),t=l(e);return this.then(t?function(t){return h(n,e()).then((function(){return t}))}:e,t?function(t){return h(n,e()).then((function(){throw t}))}:e)}}),!i&&l(o)){var m=s("Promise").prototype.finally;u.finally!==m&&d(u,"finally",m,{unsafe:!0})}},function(e,n,t){"use strict";var a=t(127),i=t(83);e.exports=a?{}.toString:function(){return"[object "+i(this)+"]"}},function(e,n,t){var a=t(0),i=t(63),o=t(94),r=t(11),s=t(6)("species"),l=a.Array;e.exports=function(e){var n;return i(e)&&(n=e.constructor,(o(n)&&(n===l||i(n.prototype))||r(n)&&null===(n=n[s]))&&(n=void 0)),void 0===n?l:n}},function(e,n,t){"use strict";var a=t(1),i=t(268).left,o=t(46),r=t(53),s=t(93);a({target:"Array",proto:!0,forced:!o("reduce")||!s&&r>79&&r<83},{reduce:function(e){var n=arguments.length;return i(this,e,n,n>1?arguments[1]:void 0)}})},function(e,n,t){var a=t(0),i=t(23),o=t(17),r=t(65),s=t(24),l=a.TypeError,c=function(e){return function(n,t,a,c){i(t);var h=o(n),d=r(h),u=s(h),m=e?u-1:0,p=e?-1:1;if(a<2)for(;;){if(m in d){c=d[m],m+=p;break}if(m+=p,e?m<0:u<=m)throw l("Reduce of empty array with no initial value")}for(;e?m>=0:u>m;m+=p)m in d&&(c=t(c,d[m],m,h));return c}};e.exports={left:c(!1),right:c(!0)}},function(e,n,t){var a=t(1),i=t(187),o=t(3),r=t(11),s=t(270).onFreeze,l=Object.freeze;a({target:"Object",stat:!0,forced:o((function(){l(1)})),sham:!i},{freeze:function(e){return l&&r(e)?l(s(e)):e}})},function(e,n,t){var a=t(1),i=t(2),o=t(69),r=t(11),s=t(9),l=t(13).f,c=t(61),h=t(188),d=t(271),u=t(86),m=t(187),p=!1,g=u("meta"),f=0,b=function(e){l(e,g,{value:{objectID:"O"+f++,weakData:{}}})},y=e.exports={enable:function(){y.enable=function(){},p=!0;var e=c.f,n=i([].splice),t={};t[g]=1,e(t).length&&(c.f=function(t){for(var a=e(t),i=0,o=a.length;i<o;i++)if(a[i]===g){n(a,i,1);break}return a},a({target:"Object",stat:!0,forced:!0},{getOwnPropertyNames:h.f}))},fastKey:function(e,n){if(!r(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!s(e,g)){if(!d(e))return"F";if(!n)return"E";b(e)}return e[g].objectID},getWeakData:function(e,n){if(!s(e,g)){if(!d(e))return!0;if(!n)return!1;b(e)}return e[g].weakData},onFreeze:function(e){return m&&p&&d(e)&&!s(e,g)&&b(e),e}};o[g]=!0},function(e,n,t){var a=t(3),i=t(11),o=t(27),r=t(272),s=Object.isExtensible,l=a((function(){s(1)}));e.exports=l||r?function(e){return!!i(e)&&((!r||"ArrayBuffer"!=o(e))&&(!s||s(e)))}:s},function(e,n,t){var a=t(3);e.exports=a((function(){if("function"==typeof ArrayBuffer){var e=new ArrayBuffer(8);Object.isExtensible(e)&&Object.defineProperty(e,"a",{value:8})}}))},function(e,n,t){"use strict";var a=t(1),i=t(0),o=t(7),r=t(2),s=t(16),l=t(8),c=t(52),h=t(3),d=t(9),u=t(36),m=t(10),p=t(20),g=t(88),f=t(12),b=t(48),y=t(35),v=t(89),w=t(61),x=t(188),k=t(92),T=t(37),E=t(13),A=t(118),S=t(122),j=t(14),I=t(51),z=t(90),C=t(69),B=t(86),P=t(6),L=t(189),J=t(190),O=t(275),_=t(62),F=t(38),D=t(60).forEach,q=z("hidden"),H=F.set,M=F.getterFor("Symbol"),U=Object.prototype,N=i.Symbol,R=N&&N.prototype,W=i.TypeError,G=i.QObject,$=T.f,Q=E.f,V=x.f,Y=S.f,Z=r([].push),K=I("symbols"),X=I("op-symbols"),ee=I("wks"),ne=!G||!G.prototype||!G.prototype.findChild,te=l&&h((function(){return 7!=y(Q({},"a",{get:function(){return Q(this,"a",{value:7}).a}})).a}))?function(e,n,t){var a=$(U,n);a&&delete U[n],Q(e,n,t),a&&e!==U&&Q(U,n,a)}:Q,ae=function(e,n){var t=K[e]=y(R);return H(t,{type:"Symbol",tag:e,description:n}),l||(t.description=n),t},ie=function(e,n,t){e===U&&ie(X,n,t),m(e);var a=g(n);return m(t),d(K,a)?(t.enumerable?(d(e,q)&&e[q][a]&&(e[q][a]=!1),t=y(t,{enumerable:b(0,!1)})):(d(e,q)||Q(e,q,b(1,{})),e[q][a]=!0),te(e,a,t)):Q(e,a,t)},oe=function(e,n){m(e);var t=p(n),a=v(t).concat(ce(t));return D(a,(function(n){l&&!o(re,t,n)||ie(e,n,t[n])})),e},re=function(e){var n=g(e),t=o(Y,this,n);return!(this===U&&d(K,n)&&!d(X,n))&&(!(t||!d(this,n)||!d(K,n)||d(this,q)&&this[q][n])||t)},se=function(e,n){var t=p(e),a=g(n);if(t!==U||!d(K,a)||d(X,a)){var i=$(t,a);return!i||!d(K,a)||d(t,q)&&t[q][a]||(i.enumerable=!0),i}},le=function(e){var n=V(p(e)),t=[];return D(n,(function(e){d(K,e)||d(C,e)||Z(t,e)})),t},ce=function(e){var n=e===U,t=V(n?X:p(e)),a=[];return D(t,(function(e){!d(K,e)||n&&!d(U,e)||Z(a,K[e])})),a};c||(j(R=(N=function(){if(u(R,this))throw W("Symbol is not a constructor");var e=arguments.length&&void 0!==arguments[0]?f(arguments[0]):void 0,n=B(e),t=function(e){this===U&&o(t,X,e),d(this,q)&&d(this[q],n)&&(this[q][n]=!1),te(this,n,b(1,e))};return l&&ne&&te(U,n,{configurable:!0,set:t}),ae(n,e)}).prototype,"toString",(function(){return M(this).tag})),j(N,"withoutSetter",(function(e){return ae(B(e),e)})),S.f=re,E.f=ie,A.f=oe,T.f=se,w.f=x.f=le,k.f=ce,L.f=function(e){return ae(P(e),e)},l&&(Q(R,"description",{configurable:!0,get:function(){return M(this).description}}),s||j(U,"propertyIsEnumerable",re,{unsafe:!0}))),a({global:!0,wrap:!0,forced:!c,sham:!c},{Symbol:N}),D(v(ee),(function(e){J(e)})),a({target:"Symbol",stat:!0,forced:!c},{useSetter:function(){ne=!0},useSimple:function(){ne=!1}}),a({target:"Object",stat:!0,forced:!c,sham:!l},{create:function(e,n){return void 0===n?y(e):oe(y(e),n)},defineProperty:ie,defineProperties:oe,getOwnPropertyDescriptor:se}),a({target:"Object",stat:!0,forced:!c},{getOwnPropertyNames:le}),O(),_(N,"Symbol"),C[q]=!0},function(e,n,t){var a=t(0);e.exports=a},function(e,n,t){var a=t(7),i=t(15),o=t(6),r=t(14);e.exports=function(){var e=i("Symbol"),n=e&&e.prototype,t=n&&n.valueOf,s=o("toPrimitive");n&&!n[s]&&r(n,s,(function(e){return a(t,this)}))}},function(e,n,t){var a=t(1),i=t(15),o=t(9),r=t(12),s=t(51),l=t(191),c=s("string-to-symbol-registry"),h=s("symbol-to-string-registry");a({target:"Symbol",stat:!0,forced:!l},{for:function(e){var n=r(e);if(o(c,n))return c[n];var t=i("Symbol")(n);return c[n]=t,h[t]=n,t}})},function(e,n,t){var a=t(1),i=t(9),o=t(67),r=t(68),s=t(51),l=t(191),c=s("symbol-to-string-registry");a({target:"Symbol",stat:!0,forced:!l},{keyFor:function(e){if(!o(e))throw TypeError(r(e)+" is not a symbol");if(i(c,e))return c[e]}})},function(e,n,t){var a=t(1),i=t(52),o=t(3),r=t(92),s=t(17);a({target:"Object",stat:!0,forced:!i||o((function(){r.f(1)}))},{getOwnPropertySymbols:function(e){var n=r.f;return n?n(s(e)):[]}})},function(e,n,t){"use strict";var a=t(0),i=t(59),o=t(7),r=t(17),s=t(280),l=t(173),c=t(94),h=t(24),d=t(76),u=t(151),m=t(111),p=a.Array;e.exports=function(e){var n=r(e),t=c(this),a=arguments.length,g=a>1?arguments[1]:void 0,f=void 0!==g;f&&(g=i(g,a>2?arguments[2]:void 0));var b,y,v,w,x,k,T=m(n),E=0;if(!T||this==p&&l(T))for(b=h(n),y=t?new this(b):p(b);b>E;E++)k=f?g(n[E],E):n[E],d(y,E,k);else for(x=(w=u(n,T)).next,y=t?new this:[];!(v=o(x,w)).done;E++)k=f?s(w,g,[v.value,E],!0):v.value,d(y,E,k);return y.length=E,y}},function(e,n,t){var a=t(10),i=t(174);e.exports=function(e,n,t,o){try{return o?n(a(t)[0],t[1]):n(t)}catch(n){i(e,"throw",n)}}},function(e,n,t){"use strict";var a=t(15),i=t(9),o=t(28),r=t(36),s=t(72),l=t(123),c=t(237),h=t(154),d=t(194),u=t(282),m=t(283),p=t(284),g=t(8),f=t(16);e.exports=function(e,n,t,b){var y=b?2:1,v=e.split("."),w=v[v.length-1],x=a.apply(null,v);if(x){var k=x.prototype;if(!f&&i(k,"cause")&&delete k.cause,!t)return x;var T=a("Error"),E=n((function(e,n){var t=d(b?n:e,void 0),a=b?new x(e):new x;return void 0!==t&&o(a,"message",t),p&&o(a,"stack",m(a.stack,2)),this&&r(k,this)&&h(a,this,E),arguments.length>y&&u(a,arguments[y]),a}));if(E.prototype=k,"Error"!==w?s?s(E,T):l(E,T,{name:!0}):g&&"stackTraceLimit"in x&&(c(E,x,"stackTraceLimit"),c(E,x,"prepareStackTrace")),l(E,x),!f)try{k.name!==w&&o(k,"name",w),k.constructor=E}catch(e){}return E}}},function(e,n,t){var a=t(11),i=t(28);e.exports=function(e,n){a(n)&&"cause"in n&&i(e,"cause",n.cause)}},function(e,n,t){var a=t(2),i=Error,o=a("".replace),r=String(i("zxcasd").stack),s=/\n\s*at [^:]*:[^\n]*/,l=s.test(r);e.exports=function(e,n){if(l&&"string"==typeof e&&!i.prepareStackTrace)for(;n--;)e=o(e,s,"");return e}},function(e,n,t){var a=t(3),i=t(48);e.exports=!a((function(){var e=Error("a");return!("stack"in e)||(Object.defineProperty(e,"stack",i(1,7)),7!==e.stack)}))},function(e,n,t){"use strict";var a=t(8),i=t(3),o=t(10),r=t(35),s=t(194),l=Error.prototype.toString,c=i((function(){if(a){var e=r(Object.defineProperty({},"name",{get:function(){return this===e}}));if("true"!==l.call(e))return!0}return"2: 1"!==l.call({message:1,name:2})||"Error"!==l.call({})}));e.exports=c?function(){var e=o(this),n=s(e.name,"Error"),t=s(e.message);return n?t?n+": "+t:n:t}:l},function(e,n,t){var a=t(2),i=t(17),o=Math.floor,r=a("".charAt),s=a("".replace),l=a("".slice),c=/\$([$&'`]|\d{1,2}|<[^>]*>)/g,h=/\$([$&'`]|\d{1,2})/g;e.exports=function(e,n,t,a,d,u){var m=t+e.length,p=a.length,g=h;return void 0!==d&&(d=i(d),g=c),s(u,g,(function(i,s){var c;switch(r(s,0)){case"$":return"$";case"&":return e;case"`":return l(n,0,t);case"'":return l(n,m);case"<":c=d[l(s,1,-1)];break;default:var h=+s;if(0===h)return i;if(h>p){var u=o(h/10);return 0===u?i:u<=p?void 0===a[u-1]?r(s,1):a[u-1]+r(s,1):i}c=a[h-1]}return void 0===c?"":c}))}},function(e,n,t){var a=t(196),i=t(288);e.exports=function e(n,t,o,r,s){var l=-1,c=n.length;for(o||(o=i),s||(s=[]);++l<c;){var h=n[l];t>0&&o(h)?t>1?e(h,t-1,o,r,s):a(s,h):r||(s[s.length]=h)}return s}},function(e,n,t){var a=t(78),i=t(133),o=t(32),r=a?a.isConcatSpreadable:void 0;e.exports=function(e){return o(e)||i(e)||!!(r&&e&&e[r])}},function(e,n,t){var a=t(64),i=t(49);e.exports=function(e){return i(e)&&"[object Arguments]"==a(e)}},function(e,n,t){var a=t(78),i=Object.prototype,o=i.hasOwnProperty,r=i.toString,s=a?a.toStringTag:void 0;e.exports=function(e){var n=o.call(e,s),t=e[s];try{e[s]=void 0;var a=!0}catch(e){}var i=r.call(e);return a&&(n?e[s]=t:delete e[s]),i}},function(e,n){var t=Object.prototype.toString;e.exports=function(e){return t.call(e)}},function(e,n,t){var a=t(293),i=t(349),o=t(141),r=t(32),s=t(360);e.exports=function(e){return"function"==typeof e?e:null==e?o:"object"==typeof e?r(e)?i(e[0],e[1]):a(e):s(e)}},function(e,n,t){var a=t(294),i=t(348),o=t(213);e.exports=function(e){var n=i(e);return 1==n.length&&n[0][2]?o(n[0][0],n[0][1]):function(t){return t===e||a(t,e,n)}}},function(e,n,t){var a=t(198),i=t(202);e.exports=function(e,n,t,o){var r=t.length,s=r,l=!o;if(null==e)return!s;for(e=Object(e);r--;){var c=t[r];if(l&&c[2]?c[1]!==e[c[0]]:!(c[0]in e))return!1}for(;++r<s;){var h=(c=t[r])[0],d=e[h],u=c[1];if(l&&c[2]){if(void 0===d&&!(h in e))return!1}else{var m=new a;if(o)var p=o(d,u,h,e,n,m);if(!(void 0===p?i(u,d,3,o,m):p))return!1}}return!0}},function(e,n){e.exports=function(){this.__data__=[],this.size=0}},function(e,n,t){var a=t(100),i=Array.prototype.splice;e.exports=function(e){var n=this.__data__,t=a(n,e);return!(t<0)&&(t==n.length-1?n.pop():i.call(n,t,1),--this.size,!0)}},function(e,n,t){var a=t(100);e.exports=function(e){var n=this.__data__,t=a(n,e);return t<0?void 0:n[t][1]}},function(e,n,t){var a=t(100);e.exports=function(e){return a(this.__data__,e)>-1}},function(e,n,t){var a=t(100);e.exports=function(e,n){var t=this.__data__,i=a(t,e);return i<0?(++this.size,t.push([e,n])):t[i][1]=n,this}},function(e,n,t){var a=t(99);e.exports=function(){this.__data__=new a,this.size=0}},function(e,n){e.exports=function(e){var n=this.__data__,t=n.delete(e);return this.size=n.size,t}},function(e,n){e.exports=function(e){return this.__data__.get(e)}},function(e,n){e.exports=function(e){return this.__data__.has(e)}},function(e,n,t){var a=t(99),i=t(134),o=t(136);e.exports=function(e,n){var t=this.__data__;if(t instanceof a){var r=t.__data__;if(!i||r.length<199)return r.push([e,n]),this.size=++t.size,this;t=this.__data__=new o(r)}return t.set(e,n),this.size=t.size,this}},function(e,n,t){var a=t(200),i=t(306),o=t(135),r=t(201),s=/^\[object .+?Constructor\]$/,l=Function.prototype,c=Object.prototype,h=l.toString,d=c.hasOwnProperty,u=RegExp("^"+h.call(d).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");e.exports=function(e){return!(!o(e)||i(e))&&(a(e)?u:s).test(r(e))}},function(e,n,t){var a,i=t(307),o=(a=/[^.]+$/.exec(i&&i.keys&&i.keys.IE_PROTO||""))?"Symbol(src)_1."+a:"";e.exports=function(e){return!!o&&o in e}},function(e,n,t){var a=t(34)["__core-js_shared__"];e.exports=a},function(e,n){e.exports=function(e,n){return null==e?void 0:e[n]}},function(e,n,t){var a=t(310),i=t(99),o=t(134);e.exports=function(){this.size=0,this.__data__={hash:new a,map:new(o||i),string:new a}}},function(e,n,t){var a=t(311),i=t(312),o=t(313),r=t(314),s=t(315);function l(e){var n=-1,t=null==e?0:e.length;for(this.clear();++n<t;){var a=e[n];this.set(a[0],a[1])}}l.prototype.clear=a,l.prototype.delete=i,l.prototype.get=o,l.prototype.has=r,l.prototype.set=s,e.exports=l},function(e,n,t){var a=t(101);e.exports=function(){this.__data__=a?a(null):{},this.size=0}},function(e,n){e.exports=function(e){var n=this.has(e)&&delete this.__data__[e];return this.size-=n?1:0,n}},function(e,n,t){var a=t(101),i=Object.prototype.hasOwnProperty;e.exports=function(e){var n=this.__data__;if(a){var t=n[e];return"__lodash_hash_undefined__"===t?void 0:t}return i.call(n,e)?n[e]:void 0}},function(e,n,t){var a=t(101),i=Object.prototype.hasOwnProperty;e.exports=function(e){var n=this.__data__;return a?void 0!==n[e]:i.call(n,e)}},function(e,n,t){var a=t(101);e.exports=function(e,n){var t=this.__data__;return this.size+=this.has(e)?0:1,t[e]=a&&void 0===n?"__lodash_hash_undefined__":n,this}},function(e,n,t){var a=t(102);e.exports=function(e){var n=a(this,e).delete(e);return this.size-=n?1:0,n}},function(e,n){e.exports=function(e){var n=typeof e;return"string"==n||"number"==n||"symbol"==n||"boolean"==n?"__proto__"!==e:null===e}},function(e,n,t){var a=t(102);e.exports=function(e){return a(this,e).get(e)}},function(e,n,t){var a=t(102);e.exports=function(e){return a(this,e).has(e)}},function(e,n,t){var a=t(102);e.exports=function(e,n){var t=a(this,e),i=t.size;return t.set(e,n),this.size+=t.size==i?0:1,this}},function(e,n,t){var a=t(198),i=t(203),o=t(325),r=t(328),s=t(344),l=t(32),c=t(207),h=t(209),d="[object Object]",u=Object.prototype.hasOwnProperty;e.exports=function(e,n,t,m,p,g){var f=l(e),b=l(n),y=f?"[object Array]":s(e),v=b?"[object Array]":s(n),w=(y="[object Arguments]"==y?d:y)==d,x=(v="[object Arguments]"==v?d:v)==d,k=y==v;if(k&&c(e)){if(!c(n))return!1;f=!0,w=!1}if(k&&!w)return g||(g=new a),f||h(e)?i(e,n,t,m,p,g):o(e,n,y,t,m,p,g);if(!(1&t)){var T=w&&u.call(e,"__wrapped__"),E=x&&u.call(n,"__wrapped__");if(T||E){var A=T?e.value():e,S=E?n.value():n;return g||(g=new a),p(A,S,t,m,g)}}return!!k&&(g||(g=new a),r(e,n,t,m,p,g))}},function(e,n){e.exports=function(e){return this.__data__.set(e,"__lodash_hash_undefined__"),this}},function(e,n){e.exports=function(e){return this.__data__.has(e)}},function(e,n){e.exports=function(e,n){for(var t=-1,a=null==e?0:e.length;++t<a;)if(n(e[t],t,e))return!0;return!1}},function(e,n,t){var a=t(78),i=t(326),o=t(199),r=t(203),s=t(327),l=t(137),c=a?a.prototype:void 0,h=c?c.valueOf:void 0;e.exports=function(e,n,t,a,c,d,u){switch(t){case"[object DataView]":if(e.byteLength!=n.byteLength||e.byteOffset!=n.byteOffset)return!1;e=e.buffer,n=n.buffer;case"[object ArrayBuffer]":return!(e.byteLength!=n.byteLength||!d(new i(e),new i(n)));case"[object Boolean]":case"[object Date]":case"[object Number]":return o(+e,+n);case"[object Error]":return e.name==n.name&&e.message==n.message;case"[object RegExp]":case"[object String]":return e==n+"";case"[object Map]":var m=s;case"[object Set]":var p=1&a;if(m||(m=l),e.size!=n.size&&!p)return!1;var g=u.get(e);if(g)return g==n;a|=2,u.set(e,n);var f=r(m(e),m(n),a,c,d,u);return u.delete(e),f;case"[object Symbol]":if(h)return h.call(e)==h.call(n)}return!1}},function(e,n,t){var a=t(34).Uint8Array;e.exports=a},function(e,n){e.exports=function(e){var n=-1,t=Array(e.size);return e.forEach((function(e,a){t[++n]=[a,e]})),t}},function(e,n,t){var a=t(329),i=Object.prototype.hasOwnProperty;e.exports=function(e,n,t,o,r,s){var l=1&t,c=a(e),h=c.length;if(h!=a(n).length&&!l)return!1;for(var d=h;d--;){var u=c[d];if(!(l?u in n:i.call(n,u)))return!1}var m=s.get(e),p=s.get(n);if(m&&p)return m==n&&p==e;var g=!0;s.set(e,n),s.set(n,e);for(var f=l;++d<h;){var b=e[u=c[d]],y=n[u];if(o)var v=l?o(y,b,u,n,e,s):o(b,y,u,e,n,s);if(!(void 0===v?b===y||r(b,y,t,o,s):v)){g=!1;break}f||(f="constructor"==u)}if(g&&!f){var w=e.constructor,x=n.constructor;w==x||!("constructor"in e)||!("constructor"in n)||"function"==typeof w&&w instanceof w&&"function"==typeof x&&x instanceof x||(g=!1)}return s.delete(e),s.delete(n),g}},function(e,n,t){var a=t(330),i=t(331),o=t(206);e.exports=function(e){return a(e,o,i)}},function(e,n,t){var a=t(196),i=t(32);e.exports=function(e,n,t){var o=n(e);return i(e)?o:a(o,t(e))}},function(e,n,t){var a=t(332),i=t(333),o=Object.prototype.propertyIsEnumerable,r=Object.getOwnPropertySymbols,s=r?function(e){return null==e?[]:(e=Object(e),a(r(e),(function(n){return o.call(e,n)})))}:i;e.exports=s},function(e,n){e.exports=function(e,n){for(var t=-1,a=null==e?0:e.length,i=0,o=[];++t<a;){var r=e[t];n(r,t,e)&&(o[i++]=r)}return o}},function(e,n){e.exports=function(){return[]}},function(e,n,t){var a=t(335),i=t(133),o=t(32),r=t(207),s=t(208),l=t(209),c=Object.prototype.hasOwnProperty;e.exports=function(e,n){var t=o(e),h=!t&&i(e),d=!t&&!h&&r(e),u=!t&&!h&&!d&&l(e),m=t||h||d||u,p=m?a(e.length,String):[],g=p.length;for(var f in e)!n&&!c.call(e,f)||m&&("length"==f||d&&("offset"==f||"parent"==f)||u&&("buffer"==f||"byteLength"==f||"byteOffset"==f)||s(f,g))||p.push(f);return p}},function(e,n){e.exports=function(e,n){for(var t=-1,a=Array(e);++t<e;)a[t]=n(t);return a}},function(e,n){e.exports=function(){return!1}},function(e,n,t){var a=t(64),i=t(138),o=t(49),r={};r["[object Float32Array]"]=r["[object Float64Array]"]=r["[object Int8Array]"]=r["[object Int16Array]"]=r["[object Int32Array]"]=r["[object Uint8Array]"]=r["[object Uint8ClampedArray]"]=r["[object Uint16Array]"]=r["[object Uint32Array]"]=!0,r["[object Arguments]"]=r["[object Array]"]=r["[object ArrayBuffer]"]=r["[object Boolean]"]=r["[object DataView]"]=r["[object Date]"]=r["[object Error]"]=r["[object Function]"]=r["[object Map]"]=r["[object Number]"]=r["[object Object]"]=r["[object RegExp]"]=r["[object Set]"]=r["[object String]"]=r["[object WeakMap]"]=!1,e.exports=function(e){return o(e)&&i(e.length)&&!!r[a(e)]}},function(e,n){e.exports=function(e){return function(n){return e(n)}}},function(e,n,t){(function(e){var a=t(197),i=n&&!n.nodeType&&n,o=i&&"object"==typeof e&&e&&!e.nodeType&&e,r=o&&o.exports===i&&a.process,s=function(){try{var e=o&&o.require&&o.require("util").types;return e||r&&r.binding&&r.binding("util")}catch(e){}}();e.exports=s}).call(this,t(155)(e))},function(e,n,t){var a=t(341),i=t(342),o=Object.prototype.hasOwnProperty;e.exports=function(e){if(!a(e))return i(e);var n=[];for(var t in Object(e))o.call(e,t)&&"constructor"!=t&&n.push(t);return n}},function(e,n){var t=Object.prototype;e.exports=function(e){var n=e&&e.constructor;return e===("function"==typeof n&&n.prototype||t)}},function(e,n,t){var a=t(343)(Object.keys,Object);e.exports=a},function(e,n){e.exports=function(e,n){return function(t){return e(n(t))}}},function(e,n,t){var a=t(345),i=t(134),o=t(346),r=t(211),s=t(347),l=t(64),c=t(201),h=c(a),d=c(i),u=c(o),m=c(r),p=c(s),g=l;(a&&"[object DataView]"!=g(new a(new ArrayBuffer(1)))||i&&"[object Map]"!=g(new i)||o&&"[object Promise]"!=g(o.resolve())||r&&"[object Set]"!=g(new r)||s&&"[object WeakMap]"!=g(new s))&&(g=function(e){var n=l(e),t="[object Object]"==n?e.constructor:void 0,a=t?c(t):"";if(a)switch(a){case h:return"[object DataView]";case d:return"[object Map]";case u:return"[object Promise]";case m:return"[object Set]";case p:return"[object WeakMap]"}return n}),e.exports=g},function(e,n,t){var a=t(41)(t(34),"DataView");e.exports=a},function(e,n,t){var a=t(41)(t(34),"Promise");e.exports=a},function(e,n,t){var a=t(41)(t(34),"WeakMap");e.exports=a},function(e,n,t){var a=t(212),i=t(206);e.exports=function(e){for(var n=i(e),t=n.length;t--;){var o=n[t],r=e[o];n[t]=[o,r,a(r)]}return n}},function(e,n,t){var a=t(202),i=t(350),o=t(357),r=t(139),s=t(212),l=t(213),c=t(103);e.exports=function(e,n){return r(e)&&s(n)?l(c(e),n):function(t){var r=i(t,e);return void 0===r&&r===n?o(t,e):a(n,r,3)}}},function(e,n,t){var a=t(214);e.exports=function(e,n,t){var i=null==e?void 0:a(e,n);return void 0===i?t:i}},function(e,n,t){var a=t(352),i=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,o=/\\(\\)?/g,r=a((function(e){var n=[];return 46===e.charCodeAt(0)&&n.push(""),e.replace(i,(function(e,t,a,i){n.push(a?i.replace(o,"$1"):t||e)})),n}));e.exports=r},function(e,n,t){var a=t(353);e.exports=function(e){var n=a(e,(function(e){return 500===t.size&&t.clear(),e})),t=n.cache;return n}},function(e,n,t){var a=t(136);function i(e,n){if("function"!=typeof e||null!=n&&"function"!=typeof n)throw new TypeError("Expected a function");var t=function(){var a=arguments,i=n?n.apply(this,a):a[0],o=t.cache;if(o.has(i))return o.get(i);var r=e.apply(this,a);return t.cache=o.set(i,r)||o,r};return t.cache=new(i.Cache||a),t}i.Cache=a,e.exports=i},function(e,n,t){var a=t(355);e.exports=function(e){return null==e?"":a(e)}},function(e,n,t){var a=t(78),i=t(356),o=t(32),r=t(140),s=a?a.prototype:void 0,l=s?s.toString:void 0;e.exports=function e(n){if("string"==typeof n)return n;if(o(n))return i(n,e)+"";if(r(n))return l?l.call(n):"";var t=n+"";return"0"==t&&1/n==-1/0?"-0":t}},function(e,n){e.exports=function(e,n){for(var t=-1,a=null==e?0:e.length,i=Array(a);++t<a;)i[t]=n(e[t],t,e);return i}},function(e,n,t){var a=t(358),i=t(359);e.exports=function(e,n){return null!=e&&i(e,n,a)}},function(e,n){e.exports=function(e,n){return null!=e&&n in Object(e)}},function(e,n,t){var a=t(215),i=t(133),o=t(32),r=t(208),s=t(138),l=t(103);e.exports=function(e,n,t){for(var c=-1,h=(n=a(n,e)).length,d=!1;++c<h;){var u=l(n[c]);if(!(d=null!=e&&t(e,u)))break;e=e[u]}return d||++c!=h?d:!!(h=null==e?0:e.length)&&s(h)&&r(u,h)&&(o(e)||i(e))}},function(e,n,t){var a=t(361),i=t(362),o=t(139),r=t(103);e.exports=function(e){return o(e)?a(r(e)):i(e)}},function(e,n){e.exports=function(e){return function(n){return null==n?void 0:n[e]}}},function(e,n,t){var a=t(214);e.exports=function(e){return function(n){return a(n,e)}}},function(e,n,t){var a=t(141),i=t(364),o=t(366);e.exports=function(e,n){return o(i(e,n,a),e+"")}},function(e,n,t){var a=t(365),i=Math.max;e.exports=function(e,n,t){return n=i(void 0===n?e.length-1:n,0),function(){for(var o=arguments,r=-1,s=i(o.length-n,0),l=Array(s);++r<s;)l[r]=o[n+r];r=-1;for(var c=Array(n+1);++r<n;)c[r]=o[r];return c[n]=t(l),a(e,this,c)}}},function(e,n){e.exports=function(e,n,t){switch(t.length){case 0:return e.call(n);case 1:return e.call(n,t[0]);case 2:return e.call(n,t[0],t[1]);case 3:return e.call(n,t[0],t[1],t[2])}return e.apply(n,t)}},function(e,n,t){var a=t(367),i=t(370)(a);e.exports=i},function(e,n,t){var a=t(368),i=t(369),o=t(141),r=i?function(e,n){return i(e,"toString",{configurable:!0,enumerable:!1,value:a(n),writable:!0})}:o;e.exports=r},function(e,n){e.exports=function(e){return function(){return e}}},function(e,n,t){var a=t(41),i=function(){try{var e=a(Object,"defineProperty");return e({},"",{}),e}catch(e){}}();e.exports=i},function(e,n){var t=Date.now;e.exports=function(e){var n=0,a=0;return function(){var i=t(),o=16-(i-a);if(a=i,o>0){if(++n>=800)return arguments[0]}else n=0;return e.apply(void 0,arguments)}}},function(e,n,t){var a=t(204),i=t(372),o=t(377),r=t(205),s=t(378),l=t(137);e.exports=function(e,n,t){var c=-1,h=i,d=e.length,u=!0,m=[],p=m;if(t)u=!1,h=o;else if(d>=200){var g=n?null:s(e);if(g)return l(g);u=!1,h=r,p=new a}else p=n?[]:m;e:for(;++c<d;){var f=e[c],b=n?n(f):f;if(f=t||0!==f?f:0,u&&b==b){for(var y=p.length;y--;)if(p[y]===b)continue e;n&&p.push(b),m.push(f)}else h(p,b,t)||(p!==m&&p.push(b),m.push(f))}return m}},function(e,n,t){var a=t(373);e.exports=function(e,n){return!!(null==e?0:e.length)&&a(e,n,0)>-1}},function(e,n,t){var a=t(374),i=t(375),o=t(376);e.exports=function(e,n,t){return n==n?o(e,n,t):a(e,i,t)}},function(e,n){e.exports=function(e,n,t,a){for(var i=e.length,o=t+(a?1:-1);a?o--:++o<i;)if(n(e[o],o,e))return o;return-1}},function(e,n){e.exports=function(e){return e!=e}},function(e,n){e.exports=function(e,n,t){for(var a=t-1,i=e.length;++a<i;)if(e[a]===n)return a;return-1}},function(e,n){e.exports=function(e,n,t){for(var a=-1,i=null==e?0:e.length;++a<i;)if(t(n,e[a]))return!0;return!1}},function(e,n,t){var a=t(211),i=t(379),o=t(137),r=a&&1/o(new a([,-0]))[1]==1/0?function(e){return new a(e)}:i;e.exports=r},function(e,n){e.exports=function(){}},function(e,n,t){var a=t(210),i=t(49);e.exports=function(e){return i(e)&&a(e)}},function(e,n,t){var a=t(1),i=t(0),o=t(216).setInterval;a({global:!0,bind:!0,forced:i.setInterval!==o},{setInterval:o})},function(e,n,t){var a=t(1),i=t(0),o=t(216).setTimeout;a({global:!0,bind:!0,forced:i.setTimeout!==o},{setTimeout:o})},function(e,n,t){},function(e,n,t){},function(e,n,t){var a=t(71).PROPER,i=t(3),o=t(158);e.exports=function(e){return i((function(){return!!o[e]()||"​᠎"!=="​᠎"[e]()||a&&o[e].name!==e}))}},function(e,n,t){var a=t(1),i=t(217);a({target:"Function",proto:!0,forced:Function.bind!==i},{bind:i})},function(e,n,t){var a=t(2);e.exports=a(1..valueOf)},function(e,n,t){var a=t(2),i=t(54),o=t(12),r=t(389),s=t(19),l=a(r),c=a("".slice),h=Math.ceil,d=function(e){return function(n,t,a){var r,d,u=o(s(n)),m=i(t),p=u.length,g=void 0===a?" ":o(a);return m<=p||""==g?u:((d=l(g,h((r=m-p)/g.length))).length>r&&(d=c(d,0,r)),e?u+d:d+u)}};e.exports={start:d(!1),end:d(!0)}},function(e,n,t){"use strict";var a=t(0),i=t(58),o=t(12),r=t(19),s=a.RangeError;e.exports=function(e){var n=o(r(this)),t="",a=i(e);if(a<0||a==1/0)throw s("Wrong number of repetitions");for(;a>0;(a>>>=1)&&(n+=n))1&a&&(t+=n);return t}},function(e,n,t){var a=t(33);e.exports=/Version\/10(?:\.\d+){1,2}(?: [\w./]+)?(?: Mobile\/\w+)? Safari\//.test(a)},function(e,n,t){"use strict";t(219)},function(e,n,t){"use strict";t(220)},function(e,n,t){"use strict";var a=t(1),i=t(2),o=t(23),r=t(17),s=t(24),l=t(12),c=t(3),h=t(243),d=t(46),u=t(394),m=t(395),p=t(53),g=t(396),f=[],b=i(f.sort),y=i(f.push),v=c((function(){f.sort(void 0)})),w=c((function(){f.sort(null)})),x=d("sort"),k=!c((function(){if(p)return p<70;if(!(u&&u>3)){if(m)return!0;if(g)return g<603;var e,n,t,a,i="";for(e=65;e<76;e++){switch(n=String.fromCharCode(e),e){case 66:case 69:case 70:case 72:t=3;break;case 68:case 71:t=4;break;default:t=2}for(a=0;a<47;a++)f.push({k:n+a,v:t})}for(f.sort((function(e,n){return n.v-e.v})),a=0;a<f.length;a++)n=f[a].k.charAt(0),i.charAt(i.length-1)!==n&&(i+=n);return"DGBEFHACIJK"!==i}}));a({target:"Array",proto:!0,forced:v||!w||!x||!k},{sort:function(e){void 0!==e&&o(e);var n=r(this);if(k)return void 0===e?b(n):b(n,e);var t,a,i=[],c=s(n);for(a=0;a<c;a++)a in n&&y(i,n[a]);for(h(i,function(e){return function(n,t){return void 0===t?-1:void 0===n?1:void 0!==e?+e(n,t)||0:l(n)>l(t)?1:-1}}(e)),t=i.length,a=0;a<t;)n[a]=i[a++];for(;a<c;)delete n[a++];return n}})},function(e,n,t){var a=t(33).match(/firefox\/(\d+)/i);e.exports=!!a&&+a[1]},function(e,n,t){var a=t(33);e.exports=/MSIE|Trident/.test(a)},function(e,n,t){var a=t(33).match(/AppleWebKit\/(\d+)\./);e.exports=!!a&&+a[1]},function(e,n,t){},function(e,n,t){},function(e,n,t){var a=t(1),i=t(3),o=t(20),r=t(37).f,s=t(8),l=i((function(){r(1)}));a({target:"Object",stat:!0,forced:!s||l,sham:!s},{getOwnPropertyDescriptor:function(e,n){return r(o(e),n)}})},function(e,n,t){var a=t(1),i=t(8),o=t(118).f;a({target:"Object",stat:!0,forced:Object.defineProperties!==o,sham:!i},{defineProperties:o})},function(e,n,t){t(1)({target:"Reflect",stat:!0},{ownKeys:t(124)})},function(e,n){},function(e,n){function t(e,n){for(var t=0,a=e.length-1;a>=0;a--){var i=e[a];"."===i?e.splice(a,1):".."===i?(e.splice(a,1),t++):t&&(e.splice(a,1),t--)}if(n)for(;t--;t)e.unshift("..");return e}function a(e,n){if(e.filter)return e.filter(n);for(var t=[],a=0;a<e.length;a++)n(e[a],a,e)&&t.push(e[a]);return t}n.resolve=function(){for(var e="",n=!1,i=arguments.length-1;i>=-1&&!n;i--){var o=i>=0?arguments[i]:process.cwd();if("string"!=typeof o)throw new TypeError("Arguments to path.resolve must be strings");o&&(e=o+"/"+e,n="/"===o.charAt(0))}return(n?"/":"")+(e=t(a(e.split("/"),(function(e){return!!e})),!n).join("/"))||"."},n.normalize=function(e){var o=n.isAbsolute(e),r="/"===i(e,-1);return(e=t(a(e.split("/"),(function(e){return!!e})),!o).join("/"))||o||(e="."),e&&r&&(e+="/"),(o?"/":"")+e},n.isAbsolute=function(e){return"/"===e.charAt(0)},n.join=function(){var e=Array.prototype.slice.call(arguments,0);return n.normalize(a(e,(function(e,n){if("string"!=typeof e)throw new TypeError("Arguments to path.join must be strings");return e})).join("/"))},n.relative=function(e,t){function a(e){for(var n=0;n<e.length&&""===e[n];n++);for(var t=e.length-1;t>=0&&""===e[t];t--);return n>t?[]:e.slice(n,t-n+1)}e=n.resolve(e).substr(1),t=n.resolve(t).substr(1);for(var i=a(e.split("/")),o=a(t.split("/")),r=Math.min(i.length,o.length),s=r,l=0;l<r;l++)if(i[l]!==o[l]){s=l;break}var c=[];for(l=s;l<i.length;l++)c.push("..");return(c=c.concat(o.slice(s))).join("/")},n.sep="/",n.delimiter=":",n.dirname=function(e){if("string"!=typeof e&&(e+=""),0===e.length)return".";for(var n=e.charCodeAt(0),t=47===n,a=-1,i=!0,o=e.length-1;o>=1;--o)if(47===(n=e.charCodeAt(o))){if(!i){a=o;break}}else i=!1;return-1===a?t?"/":".":t&&1===a?"/":e.slice(0,a)},n.basename=function(e,n){var t=function(e){"string"!=typeof e&&(e+="");var n,t=0,a=-1,i=!0;for(n=e.length-1;n>=0;--n)if(47===e.charCodeAt(n)){if(!i){t=n+1;break}}else-1===a&&(i=!1,a=n+1);return-1===a?"":e.slice(t,a)}(e);return n&&t.substr(-1*n.length)===n&&(t=t.substr(0,t.length-n.length)),t},n.extname=function(e){"string"!=typeof e&&(e+="");for(var n=-1,t=0,a=-1,i=!0,o=0,r=e.length-1;r>=0;--r){var s=e.charCodeAt(r);if(47!==s)-1===a&&(i=!1,a=r+1),46===s?-1===n?n=r:1!==o&&(o=1):-1!==n&&(o=-1);else if(!i){t=r+1;break}}return-1===n||-1===a||0===o||1===o&&n===a-1&&n===t+1?"":e.slice(n,a)};var i="b"==="ab".substr(-1)?function(e,n,t){return e.substr(n,t)}:function(e,n,t){return n<0&&(n=e.length+n),e.substr(n,t)}},function(e,n,t){"use strict";var a=/[|\\{}()[\]^$+*?.]/g;n.escapeRegExpChars=function(e){return e?String(e).replace(a,"\\$&"):""};var i={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&#34;","'":"&#39;"},o=/[&<>'"]/g;function r(e){return i[e]||e}n.escapeXML=function(e){return null==e?"":String(e).replace(o,r)},n.escapeXML.toString=function(){return Function.prototype.toString.call(this)+';\nvar _ENCODE_HTML_RULES = {\n      "&": "&amp;"\n    , "<": "&lt;"\n    , ">": "&gt;"\n    , \'"\': "&#34;"\n    , "\'": "&#39;"\n    }\n  , _MATCH_HTML = /[&<>\'"]/g;\nfunction encode_char(c) {\n  return _ENCODE_HTML_RULES[c] || c;\n};\n'},n.shallowCopy=function(e,n){for(var t in n=n||{})e[t]=n[t];return e},n.shallowCopyFromList=function(e,n,t){for(var a=0;a<t.length;a++){var i=t[a];void 0!==n[i]&&(e[i]=n[i])}return e},n.cache={_data:{},set:function(e,n){this._data[e]=n},get:function(e){return this._data[e]},remove:function(e){delete this._data[e]},reset:function(){this._data={}}}},function(e){e.exports=JSON.parse('{"name":"ejs","description":"Embedded JavaScript templates","keywords":["template","engine","ejs"],"version":"2.7.4","author":"Matthew Eernisse <mde@fleegix.org> (http://fleegix.org)","license":"Apache-2.0","main":"./lib/ejs.js","repository":{"type":"git","url":"git://github.com/mde/ejs.git"},"bugs":"https://github.com/mde/ejs/issues","homepage":"https://github.com/mde/ejs","dependencies":{},"devDependencies":{"browserify":"^13.1.1","eslint":"^4.14.0","git-directory-deploy":"^1.5.1","jake":"^10.3.1","jsdoc":"^3.4.0","lru-cache":"^4.0.1","mocha":"^5.0.5","uglify-js":"^3.3.16"},"engines":{"node":">=0.10.0"},"scripts":{"test":"mocha","postinstall":"node ./postinstall.js"}}')},function(e,n,t){"use strict";t(223)},function(e,n,t){"use strict";t(224)},function(e,n,t){"use strict";t.r(n);t(149),t(249),t(262),t(264);var a=t(95),i=(t(147),t(42),t(5),t(22),t(26),t(44),t(25),Object.freeze({}));function o(e){return null==e}function r(e){return null!=e}function s(e){return!0===e}function l(e){return"string"==typeof e||"number"==typeof e||"symbol"==typeof e||"boolean"==typeof e}function c(e){return null!==e&&"object"==typeof e}var h=Object.prototype.toString;function d(e){return"[object Object]"===h.call(e)}function u(e){return"[object RegExp]"===h.call(e)}function m(e){var n=parseFloat(String(e));return n>=0&&Math.floor(n)===n&&isFinite(e)}function p(e){return r(e)&&"function"==typeof e.then&&"function"==typeof e.catch}function g(e){return null==e?"":Array.isArray(e)||d(e)&&e.toString===h?JSON.stringify(e,null,2):String(e)}function f(e){var n=parseFloat(e);return isNaN(n)?e:n}function b(e,n){for(var t=Object.create(null),a=e.split(","),i=0;i<a.length;i++)t[a[i]]=!0;return n?function(e){return t[e.toLowerCase()]}:function(e){return t[e]}}b("slot,component",!0);var y=b("key,ref,slot,slot-scope,is");function v(e,n){if(e.length){var t=e.indexOf(n);if(t>-1)return e.splice(t,1)}}var w=Object.prototype.hasOwnProperty;function x(e,n){return w.call(e,n)}function k(e){var n=Object.create(null);return function(t){return n[t]||(n[t]=e(t))}}var T=/-(\w)/g,E=k((function(e){return e.replace(T,(function(e,n){return n?n.toUpperCase():""}))})),A=k((function(e){return e.charAt(0).toUpperCase()+e.slice(1)})),S=/\B([A-Z])/g,j=k((function(e){return e.replace(S,"-$1").toLowerCase()}));var I=Function.prototype.bind?function(e,n){return e.bind(n)}:function(e,n){function t(t){var a=arguments.length;return a?a>1?e.apply(n,arguments):e.call(n,t):e.call(n)}return t._length=e.length,t};function z(e,n){n=n||0;for(var t=e.length-n,a=new Array(t);t--;)a[t]=e[t+n];return a}function C(e,n){for(var t in n)e[t]=n[t];return e}function B(e){for(var n={},t=0;t<e.length;t++)e[t]&&C(n,e[t]);return n}function P(e,n,t){}var L=function(e,n,t){return!1},J=function(e){return e};function O(e,n){if(e===n)return!0;var t=c(e),a=c(n);if(!t||!a)return!t&&!a&&String(e)===String(n);try{var i=Array.isArray(e),o=Array.isArray(n);if(i&&o)return e.length===n.length&&e.every((function(e,t){return O(e,n[t])}));if(e instanceof Date&&n instanceof Date)return e.getTime()===n.getTime();if(i||o)return!1;var r=Object.keys(e),s=Object.keys(n);return r.length===s.length&&r.every((function(t){return O(e[t],n[t])}))}catch(e){return!1}}function _(e,n){for(var t=0;t<e.length;t++)if(O(e[t],n))return t;return-1}function F(e){var n=!1;return function(){n||(n=!0,e.apply(this,arguments))}}var D=["component","directive","filter"],q=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch"],H={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:L,isReservedAttr:L,isUnknownElement:L,getTagNamespace:P,parsePlatformTagName:J,mustUseProp:L,async:!0,_lifecycleHooks:q},M=/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;function U(e,n,t,a){Object.defineProperty(e,n,{value:t,enumerable:!!a,writable:!0,configurable:!0})}var N=new RegExp("[^"+M.source+".$_\\d]");var R,W="__proto__"in{},G="undefined"!=typeof window,$="undefined"!=typeof WXEnvironment&&!!WXEnvironment.platform,Q=$&&WXEnvironment.platform.toLowerCase(),V=G&&window.navigator.userAgent.toLowerCase(),Y=V&&/msie|trident/.test(V),Z=V&&V.indexOf("msie 9.0")>0,K=V&&V.indexOf("edge/")>0,X=(V&&V.indexOf("android"),V&&/iphone|ipad|ipod|ios/.test(V)||"ios"===Q),ee=(V&&/chrome\/\d+/.test(V),V&&/phantomjs/.test(V),V&&V.match(/firefox\/(\d+)/)),ne={}.watch,te=!1;if(G)try{var ae={};Object.defineProperty(ae,"passive",{get:function(){te=!0}}),window.addEventListener("test-passive",null,ae)}catch(e){}var ie=function(){return void 0===R&&(R=!G&&!$&&"undefined"!=typeof global&&(global.process&&"server"===global.process.env.VUE_ENV)),R},oe=G&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function re(e){return"function"==typeof e&&/native code/.test(e.toString())}var se,le="undefined"!=typeof Symbol&&re(Symbol)&&"undefined"!=typeof Reflect&&re(Reflect.ownKeys);se="undefined"!=typeof Set&&re(Set)?Set:function(){function e(){this.set=Object.create(null)}return e.prototype.has=function(e){return!0===this.set[e]},e.prototype.add=function(e){this.set[e]=!0},e.prototype.clear=function(){this.set=Object.create(null)},e}();var ce=P,he=0,de=function(){this.id=he++,this.subs=[]};de.prototype.addSub=function(e){this.subs.push(e)},de.prototype.removeSub=function(e){v(this.subs,e)},de.prototype.depend=function(){de.target&&de.target.addDep(this)},de.prototype.notify=function(){var e=this.subs.slice();for(var n=0,t=e.length;n<t;n++)e[n].update()},de.target=null;var ue=[];function me(e){ue.push(e),de.target=e}function pe(){ue.pop(),de.target=ue[ue.length-1]}var ge=function(e,n,t,a,i,o,r,s){this.tag=e,this.data=n,this.children=t,this.text=a,this.elm=i,this.ns=void 0,this.context=o,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=n&&n.key,this.componentOptions=r,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1},fe={child:{configurable:!0}};fe.child.get=function(){return this.componentInstance},Object.defineProperties(ge.prototype,fe);var be=function(e){void 0===e&&(e="");var n=new ge;return n.text=e,n.isComment=!0,n};function ye(e){return new ge(void 0,void 0,void 0,String(e))}function ve(e){var n=new ge(e.tag,e.data,e.children&&e.children.slice(),e.text,e.elm,e.context,e.componentOptions,e.asyncFactory);return n.ns=e.ns,n.isStatic=e.isStatic,n.key=e.key,n.isComment=e.isComment,n.fnContext=e.fnContext,n.fnOptions=e.fnOptions,n.fnScopeId=e.fnScopeId,n.asyncMeta=e.asyncMeta,n.isCloned=!0,n}var we=Array.prototype,xe=Object.create(we);["push","pop","shift","unshift","splice","sort","reverse"].forEach((function(e){var n=we[e];U(xe,e,(function(){for(var t=[],a=arguments.length;a--;)t[a]=arguments[a];var i,o=n.apply(this,t),r=this.__ob__;switch(e){case"push":case"unshift":i=t;break;case"splice":i=t.slice(2)}return i&&r.observeArray(i),r.dep.notify(),o}))}));var ke=Object.getOwnPropertyNames(xe),Te=!0;function Ee(e){Te=e}var Ae=function(e){this.value=e,this.dep=new de,this.vmCount=0,U(e,"__ob__",this),Array.isArray(e)?(W?function(e,n){e.__proto__=n}(e,xe):function(e,n,t){for(var a=0,i=t.length;a<i;a++){var o=t[a];U(e,o,n[o])}}(e,xe,ke),this.observeArray(e)):this.walk(e)};function Se(e,n){var t;if(c(e)&&!(e instanceof ge))return x(e,"__ob__")&&e.__ob__ instanceof Ae?t=e.__ob__:Te&&!ie()&&(Array.isArray(e)||d(e))&&Object.isExtensible(e)&&!e._isVue&&(t=new Ae(e)),n&&t&&t.vmCount++,t}function je(e,n,t,a,i){var o=new de,r=Object.getOwnPropertyDescriptor(e,n);if(!r||!1!==r.configurable){var s=r&&r.get,l=r&&r.set;s&&!l||2!==arguments.length||(t=e[n]);var c=!i&&Se(t);Object.defineProperty(e,n,{enumerable:!0,configurable:!0,get:function(){var n=s?s.call(e):t;return de.target&&(o.depend(),c&&(c.dep.depend(),Array.isArray(n)&&Ce(n))),n},set:function(n){var a=s?s.call(e):t;n===a||n!=n&&a!=a||s&&!l||(l?l.call(e,n):t=n,c=!i&&Se(n),o.notify())}})}}function Ie(e,n,t){if(Array.isArray(e)&&m(n))return e.length=Math.max(e.length,n),e.splice(n,1,t),t;if(n in e&&!(n in Object.prototype))return e[n]=t,t;var a=e.__ob__;return e._isVue||a&&a.vmCount?t:a?(je(a.value,n,t),a.dep.notify(),t):(e[n]=t,t)}function ze(e,n){if(Array.isArray(e)&&m(n))e.splice(n,1);else{var t=e.__ob__;e._isVue||t&&t.vmCount||x(e,n)&&(delete e[n],t&&t.dep.notify())}}function Ce(e){for(var n=void 0,t=0,a=e.length;t<a;t++)(n=e[t])&&n.__ob__&&n.__ob__.dep.depend(),Array.isArray(n)&&Ce(n)}Ae.prototype.walk=function(e){for(var n=Object.keys(e),t=0;t<n.length;t++)je(e,n[t])},Ae.prototype.observeArray=function(e){for(var n=0,t=e.length;n<t;n++)Se(e[n])};var Be=H.optionMergeStrategies;function Pe(e,n){if(!n)return e;for(var t,a,i,o=le?Reflect.ownKeys(n):Object.keys(n),r=0;r<o.length;r++)"__ob__"!==(t=o[r])&&(a=e[t],i=n[t],x(e,t)?a!==i&&d(a)&&d(i)&&Pe(a,i):Ie(e,t,i));return e}function Le(e,n,t){return t?function(){var a="function"==typeof n?n.call(t,t):n,i="function"==typeof e?e.call(t,t):e;return a?Pe(a,i):i}:n?e?function(){return Pe("function"==typeof n?n.call(this,this):n,"function"==typeof e?e.call(this,this):e)}:n:e}function Je(e,n){var t=n?e?e.concat(n):Array.isArray(n)?n:[n]:e;return t?function(e){for(var n=[],t=0;t<e.length;t++)-1===n.indexOf(e[t])&&n.push(e[t]);return n}(t):t}function Oe(e,n,t,a){var i=Object.create(e||null);return n?C(i,n):i}Be.data=function(e,n,t){return t?Le(e,n,t):n&&"function"!=typeof n?e:Le(e,n)},q.forEach((function(e){Be[e]=Je})),D.forEach((function(e){Be[e+"s"]=Oe})),Be.watch=function(e,n,t,a){if(e===ne&&(e=void 0),n===ne&&(n=void 0),!n)return Object.create(e||null);if(!e)return n;var i={};for(var o in C(i,e),n){var r=i[o],s=n[o];r&&!Array.isArray(r)&&(r=[r]),i[o]=r?r.concat(s):Array.isArray(s)?s:[s]}return i},Be.props=Be.methods=Be.inject=Be.computed=function(e,n,t,a){if(!e)return n;var i=Object.create(null);return C(i,e),n&&C(i,n),i},Be.provide=Le;var _e=function(e,n){return void 0===n?e:n};function Fe(e,n,t){if("function"==typeof n&&(n=n.options),function(e,n){var t=e.props;if(t){var a,i,o={};if(Array.isArray(t))for(a=t.length;a--;)"string"==typeof(i=t[a])&&(o[E(i)]={type:null});else if(d(t))for(var r in t)i=t[r],o[E(r)]=d(i)?i:{type:i};else 0;e.props=o}}(n),function(e,n){var t=e.inject;if(t){var a=e.inject={};if(Array.isArray(t))for(var i=0;i<t.length;i++)a[t[i]]={from:t[i]};else if(d(t))for(var o in t){var r=t[o];a[o]=d(r)?C({from:o},r):{from:r}}else 0}}(n),function(e){var n=e.directives;if(n)for(var t in n){var a=n[t];"function"==typeof a&&(n[t]={bind:a,update:a})}}(n),!n._base&&(n.extends&&(e=Fe(e,n.extends,t)),n.mixins))for(var a=0,i=n.mixins.length;a<i;a++)e=Fe(e,n.mixins[a],t);var o,r={};for(o in e)s(o);for(o in n)x(e,o)||s(o);function s(a){var i=Be[a]||_e;r[a]=i(e[a],n[a],t,a)}return r}function De(e,n,t,a){if("string"==typeof t){var i=e[n];if(x(i,t))return i[t];var o=E(t);if(x(i,o))return i[o];var r=A(o);return x(i,r)?i[r]:i[t]||i[o]||i[r]}}function qe(e,n,t,a){var i=n[e],o=!x(t,e),r=t[e],s=Ne(Boolean,i.type);if(s>-1)if(o&&!x(i,"default"))r=!1;else if(""===r||r===j(e)){var l=Ne(String,i.type);(l<0||s<l)&&(r=!0)}if(void 0===r){r=function(e,n,t){if(!x(n,"default"))return;var a=n.default;0;if(e&&e.$options.propsData&&void 0===e.$options.propsData[t]&&void 0!==e._props[t])return e._props[t];return"function"==typeof a&&"Function"!==Me(n.type)?a.call(e):a}(a,i,e);var c=Te;Ee(!0),Se(r),Ee(c)}return r}var He=/^\s*function (\w+)/;function Me(e){var n=e&&e.toString().match(He);return n?n[1]:""}function Ue(e,n){return Me(e)===Me(n)}function Ne(e,n){if(!Array.isArray(n))return Ue(n,e)?0:-1;for(var t=0,a=n.length;t<a;t++)if(Ue(n[t],e))return t;return-1}function Re(e,n,t){me();try{if(n)for(var a=n;a=a.$parent;){var i=a.$options.errorCaptured;if(i)for(var o=0;o<i.length;o++)try{if(!1===i[o].call(a,e,n,t))return}catch(e){Ge(e,a,"errorCaptured hook")}}Ge(e,n,t)}finally{pe()}}function We(e,n,t,a,i){var o;try{(o=t?e.apply(n,t):e.call(n))&&!o._isVue&&p(o)&&!o._handled&&(o.catch((function(e){return Re(e,a,i+" (Promise/async)")})),o._handled=!0)}catch(e){Re(e,a,i)}return o}function Ge(e,n,t){if(H.errorHandler)try{return H.errorHandler.call(null,e,n,t)}catch(n){n!==e&&$e(n,null,"config.errorHandler")}$e(e,n,t)}function $e(e,n,t){if(!G&&!$||"undefined"==typeof console)throw e;console.error(e)}var Qe,Ve=!1,Ye=[],Ze=!1;function Ke(){Ze=!1;var e=Ye.slice(0);Ye.length=0;for(var n=0;n<e.length;n++)e[n]()}if("undefined"!=typeof Promise&&re(Promise)){var Xe=Promise.resolve();Qe=function(){Xe.then(Ke),X&&setTimeout(P)},Ve=!0}else if(Y||"undefined"==typeof MutationObserver||!re(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())Qe="undefined"!=typeof setImmediate&&re(setImmediate)?function(){setImmediate(Ke)}:function(){setTimeout(Ke,0)};else{var en=1,nn=new MutationObserver(Ke),tn=document.createTextNode(String(en));nn.observe(tn,{characterData:!0}),Qe=function(){en=(en+1)%2,tn.data=String(en)},Ve=!0}function an(e,n){var t;if(Ye.push((function(){if(e)try{e.call(n)}catch(e){Re(e,n,"nextTick")}else t&&t(n)})),Ze||(Ze=!0,Qe()),!e&&"undefined"!=typeof Promise)return new Promise((function(e){t=e}))}var on=new se;function rn(e){!function e(n,t){var a,i,o=Array.isArray(n);if(!o&&!c(n)||Object.isFrozen(n)||n instanceof ge)return;if(n.__ob__){var r=n.__ob__.dep.id;if(t.has(r))return;t.add(r)}if(o)for(a=n.length;a--;)e(n[a],t);else for(i=Object.keys(n),a=i.length;a--;)e(n[i[a]],t)}(e,on),on.clear()}var sn=k((function(e){var n="&"===e.charAt(0),t="~"===(e=n?e.slice(1):e).charAt(0),a="!"===(e=t?e.slice(1):e).charAt(0);return{name:e=a?e.slice(1):e,once:t,capture:a,passive:n}}));function ln(e,n){function t(){var e=arguments,a=t.fns;if(!Array.isArray(a))return We(a,null,arguments,n,"v-on handler");for(var i=a.slice(),o=0;o<i.length;o++)We(i[o],null,e,n,"v-on handler")}return t.fns=e,t}function cn(e,n,t,a,i,r){var l,c,h,d;for(l in e)c=e[l],h=n[l],d=sn(l),o(c)||(o(h)?(o(c.fns)&&(c=e[l]=ln(c,r)),s(d.once)&&(c=e[l]=i(d.name,c,d.capture)),t(d.name,c,d.capture,d.passive,d.params)):c!==h&&(h.fns=c,e[l]=h));for(l in n)o(e[l])&&a((d=sn(l)).name,n[l],d.capture)}function hn(e,n,t){var a;e instanceof ge&&(e=e.data.hook||(e.data.hook={}));var i=e[n];function l(){t.apply(this,arguments),v(a.fns,l)}o(i)?a=ln([l]):r(i.fns)&&s(i.merged)?(a=i).fns.push(l):a=ln([i,l]),a.merged=!0,e[n]=a}function dn(e,n,t,a,i){if(r(n)){if(x(n,t))return e[t]=n[t],i||delete n[t],!0;if(x(n,a))return e[t]=n[a],i||delete n[a],!0}return!1}function un(e){return l(e)?[ye(e)]:Array.isArray(e)?function e(n,t){var a,i,c,h,d=[];for(a=0;a<n.length;a++)o(i=n[a])||"boolean"==typeof i||(c=d.length-1,h=d[c],Array.isArray(i)?i.length>0&&(mn((i=e(i,(t||"")+"_"+a))[0])&&mn(h)&&(d[c]=ye(h.text+i[0].text),i.shift()),d.push.apply(d,i)):l(i)?mn(h)?d[c]=ye(h.text+i):""!==i&&d.push(ye(i)):mn(i)&&mn(h)?d[c]=ye(h.text+i.text):(s(n._isVList)&&r(i.tag)&&o(i.key)&&r(t)&&(i.key="__vlist"+t+"_"+a+"__"),d.push(i)));return d}(e):void 0}function mn(e){return r(e)&&r(e.text)&&!1===e.isComment}function pn(e,n){if(e){for(var t=Object.create(null),a=le?Reflect.ownKeys(e):Object.keys(e),i=0;i<a.length;i++){var o=a[i];if("__ob__"!==o){for(var r=e[o].from,s=n;s;){if(s._provided&&x(s._provided,r)){t[o]=s._provided[r];break}s=s.$parent}if(!s)if("default"in e[o]){var l=e[o].default;t[o]="function"==typeof l?l.call(n):l}else 0}}return t}}function gn(e,n){if(!e||!e.length)return{};for(var t={},a=0,i=e.length;a<i;a++){var o=e[a],r=o.data;if(r&&r.attrs&&r.attrs.slot&&delete r.attrs.slot,o.context!==n&&o.fnContext!==n||!r||null==r.slot)(t.default||(t.default=[])).push(o);else{var s=r.slot,l=t[s]||(t[s]=[]);"template"===o.tag?l.push.apply(l,o.children||[]):l.push(o)}}for(var c in t)t[c].every(fn)&&delete t[c];return t}function fn(e){return e.isComment&&!e.asyncFactory||" "===e.text}function bn(e){return e.isComment&&e.asyncFactory}function yn(e,n,t){var a,o=Object.keys(n).length>0,r=e?!!e.$stable:!o,s=e&&e.$key;if(e){if(e._normalized)return e._normalized;if(r&&t&&t!==i&&s===t.$key&&!o&&!t.$hasNormal)return t;for(var l in a={},e)e[l]&&"$"!==l[0]&&(a[l]=vn(n,l,e[l]))}else a={};for(var c in n)c in a||(a[c]=wn(n,c));return e&&Object.isExtensible(e)&&(e._normalized=a),U(a,"$stable",r),U(a,"$key",s),U(a,"$hasNormal",o),a}function vn(e,n,t){var a=function(){var e=arguments.length?t.apply(null,arguments):t({}),n=(e=e&&"object"==typeof e&&!Array.isArray(e)?[e]:un(e))&&e[0];return e&&(!n||1===e.length&&n.isComment&&!bn(n))?void 0:e};return t.proxy&&Object.defineProperty(e,n,{get:a,enumerable:!0,configurable:!0}),a}function wn(e,n){return function(){return e[n]}}function xn(e,n){var t,a,i,o,s;if(Array.isArray(e)||"string"==typeof e)for(t=new Array(e.length),a=0,i=e.length;a<i;a++)t[a]=n(e[a],a);else if("number"==typeof e)for(t=new Array(e),a=0;a<e;a++)t[a]=n(a+1,a);else if(c(e))if(le&&e[Symbol.iterator]){t=[];for(var l=e[Symbol.iterator](),h=l.next();!h.done;)t.push(n(h.value,t.length)),h=l.next()}else for(o=Object.keys(e),t=new Array(o.length),a=0,i=o.length;a<i;a++)s=o[a],t[a]=n(e[s],s,a);return r(t)||(t=[]),t._isVList=!0,t}function kn(e,n,t,a){var i,o=this.$scopedSlots[e];o?(t=t||{},a&&(t=C(C({},a),t)),i=o(t)||("function"==typeof n?n():n)):i=this.$slots[e]||("function"==typeof n?n():n);var r=t&&t.slot;return r?this.$createElement("template",{slot:r},i):i}function Tn(e){return De(this.$options,"filters",e)||J}function En(e,n){return Array.isArray(e)?-1===e.indexOf(n):e!==n}function An(e,n,t,a,i){var o=H.keyCodes[n]||t;return i&&a&&!H.keyCodes[n]?En(i,a):o?En(o,e):a?j(a)!==n:void 0===e}function Sn(e,n,t,a,i){if(t)if(c(t)){var o;Array.isArray(t)&&(t=B(t));var r=function(r){if("class"===r||"style"===r||y(r))o=e;else{var s=e.attrs&&e.attrs.type;o=a||H.mustUseProp(n,s,r)?e.domProps||(e.domProps={}):e.attrs||(e.attrs={})}var l=E(r),c=j(r);l in o||c in o||(o[r]=t[r],i&&((e.on||(e.on={}))["update:"+r]=function(e){t[r]=e}))};for(var s in t)r(s)}else;return e}function jn(e,n){var t=this._staticTrees||(this._staticTrees=[]),a=t[e];return a&&!n||zn(a=t[e]=this.$options.staticRenderFns[e].call(this._renderProxy,null,this),"__static__"+e,!1),a}function In(e,n,t){return zn(e,"__once__"+n+(t?"_"+t:""),!0),e}function zn(e,n,t){if(Array.isArray(e))for(var a=0;a<e.length;a++)e[a]&&"string"!=typeof e[a]&&Cn(e[a],n+"_"+a,t);else Cn(e,n,t)}function Cn(e,n,t){e.isStatic=!0,e.key=n,e.isOnce=t}function Bn(e,n){if(n)if(d(n)){var t=e.on=e.on?C({},e.on):{};for(var a in n){var i=t[a],o=n[a];t[a]=i?[].concat(i,o):o}}else;return e}function Pn(e,n,t,a){n=n||{$stable:!t};for(var i=0;i<e.length;i++){var o=e[i];Array.isArray(o)?Pn(o,n,t):o&&(o.proxy&&(o.fn.proxy=!0),n[o.key]=o.fn)}return a&&(n.$key=a),n}function Ln(e,n){for(var t=0;t<n.length;t+=2){var a=n[t];"string"==typeof a&&a&&(e[n[t]]=n[t+1])}return e}function Jn(e,n){return"string"==typeof e?n+e:e}function On(e){e._o=In,e._n=f,e._s=g,e._l=xn,e._t=kn,e._q=O,e._i=_,e._m=jn,e._f=Tn,e._k=An,e._b=Sn,e._v=ye,e._e=be,e._u=Pn,e._g=Bn,e._d=Ln,e._p=Jn}function _n(e,n,t,a,o){var r,l=this,c=o.options;x(a,"_uid")?(r=Object.create(a))._original=a:(r=a,a=a._original);var h=s(c._compiled),d=!h;this.data=e,this.props=n,this.children=t,this.parent=a,this.listeners=e.on||i,this.injections=pn(c.inject,a),this.slots=function(){return l.$slots||yn(e.scopedSlots,l.$slots=gn(t,a)),l.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return yn(e.scopedSlots,this.slots())}}),h&&(this.$options=c,this.$slots=this.slots(),this.$scopedSlots=yn(e.scopedSlots,this.$slots)),c._scopeId?this._c=function(e,n,t,i){var o=Nn(r,e,n,t,i,d);return o&&!Array.isArray(o)&&(o.fnScopeId=c._scopeId,o.fnContext=a),o}:this._c=function(e,n,t,a){return Nn(r,e,n,t,a,d)}}function Fn(e,n,t,a,i){var o=ve(e);return o.fnContext=t,o.fnOptions=a,n.slot&&((o.data||(o.data={})).slot=n.slot),o}function Dn(e,n){for(var t in n)e[E(t)]=n[t]}On(_n.prototype);var qn={init:function(e,n){if(e.componentInstance&&!e.componentInstance._isDestroyed&&e.data.keepAlive){var t=e;qn.prepatch(t,t)}else{(e.componentInstance=function(e,n){var t={_isComponent:!0,_parentVnode:e,parent:n},a=e.data.inlineTemplate;r(a)&&(t.render=a.render,t.staticRenderFns=a.staticRenderFns);return new e.componentOptions.Ctor(t)}(e,Kn)).$mount(n?e.elm:void 0,n)}},prepatch:function(e,n){var t=n.componentOptions;!function(e,n,t,a,o){0;var r=a.data.scopedSlots,s=e.$scopedSlots,l=!!(r&&!r.$stable||s!==i&&!s.$stable||r&&e.$scopedSlots.$key!==r.$key||!r&&e.$scopedSlots.$key),c=!!(o||e.$options._renderChildren||l);e.$options._parentVnode=a,e.$vnode=a,e._vnode&&(e._vnode.parent=a);if(e.$options._renderChildren=o,e.$attrs=a.data.attrs||i,e.$listeners=t||i,n&&e.$options.props){Ee(!1);for(var h=e._props,d=e.$options._propKeys||[],u=0;u<d.length;u++){var m=d[u],p=e.$options.props;h[m]=qe(m,p,n,e)}Ee(!0),e.$options.propsData=n}t=t||i;var g=e.$options._parentListeners;e.$options._parentListeners=t,Zn(e,t,g),c&&(e.$slots=gn(o,a.context),e.$forceUpdate());0}(n.componentInstance=e.componentInstance,t.propsData,t.listeners,n,t.children)},insert:function(e){var n,t=e.context,a=e.componentInstance;a._isMounted||(a._isMounted=!0,tt(a,"mounted")),e.data.keepAlive&&(t._isMounted?((n=a)._inactive=!1,it.push(n)):nt(a,!0))},destroy:function(e){var n=e.componentInstance;n._isDestroyed||(e.data.keepAlive?function e(n,t){if(t&&(n._directInactive=!0,et(n)))return;if(!n._inactive){n._inactive=!0;for(var a=0;a<n.$children.length;a++)e(n.$children[a]);tt(n,"deactivated")}}(n,!0):n.$destroy())}},Hn=Object.keys(qn);function Mn(e,n,t,a,l){if(!o(e)){var h=t.$options._base;if(c(e)&&(e=h.extend(e)),"function"==typeof e){var d;if(o(e.cid)&&void 0===(e=function(e,n){if(s(e.error)&&r(e.errorComp))return e.errorComp;if(r(e.resolved))return e.resolved;var t=Wn;t&&r(e.owners)&&-1===e.owners.indexOf(t)&&e.owners.push(t);if(s(e.loading)&&r(e.loadingComp))return e.loadingComp;if(t&&!r(e.owners)){var a=e.owners=[t],i=!0,l=null,h=null;t.$on("hook:destroyed",(function(){return v(a,t)}));var d=function(e){for(var n=0,t=a.length;n<t;n++)a[n].$forceUpdate();e&&(a.length=0,null!==l&&(clearTimeout(l),l=null),null!==h&&(clearTimeout(h),h=null))},u=F((function(t){e.resolved=Gn(t,n),i?a.length=0:d(!0)})),m=F((function(n){r(e.errorComp)&&(e.error=!0,d(!0))})),g=e(u,m);return c(g)&&(p(g)?o(e.resolved)&&g.then(u,m):p(g.component)&&(g.component.then(u,m),r(g.error)&&(e.errorComp=Gn(g.error,n)),r(g.loading)&&(e.loadingComp=Gn(g.loading,n),0===g.delay?e.loading=!0:l=setTimeout((function(){l=null,o(e.resolved)&&o(e.error)&&(e.loading=!0,d(!1))}),g.delay||200)),r(g.timeout)&&(h=setTimeout((function(){h=null,o(e.resolved)&&m(null)}),g.timeout)))),i=!1,e.loading?e.loadingComp:e.resolved}}(d=e,h)))return function(e,n,t,a,i){var o=be();return o.asyncFactory=e,o.asyncMeta={data:n,context:t,children:a,tag:i},o}(d,n,t,a,l);n=n||{},Et(e),r(n.model)&&function(e,n){var t=e.model&&e.model.prop||"value",a=e.model&&e.model.event||"input";(n.attrs||(n.attrs={}))[t]=n.model.value;var i=n.on||(n.on={}),o=i[a],s=n.model.callback;r(o)?(Array.isArray(o)?-1===o.indexOf(s):o!==s)&&(i[a]=[s].concat(o)):i[a]=s}(e.options,n);var u=function(e,n,t){var a=n.options.props;if(!o(a)){var i={},s=e.attrs,l=e.props;if(r(s)||r(l))for(var c in a){var h=j(c);dn(i,l,c,h,!0)||dn(i,s,c,h,!1)}return i}}(n,e);if(s(e.options.functional))return function(e,n,t,a,o){var s=e.options,l={},c=s.props;if(r(c))for(var h in c)l[h]=qe(h,c,n||i);else r(t.attrs)&&Dn(l,t.attrs),r(t.props)&&Dn(l,t.props);var d=new _n(t,l,o,a,e),u=s.render.call(null,d._c,d);if(u instanceof ge)return Fn(u,t,d.parent,s,d);if(Array.isArray(u)){for(var m=un(u)||[],p=new Array(m.length),g=0;g<m.length;g++)p[g]=Fn(m[g],t,d.parent,s,d);return p}}(e,u,n,t,a);var m=n.on;if(n.on=n.nativeOn,s(e.options.abstract)){var g=n.slot;n={},g&&(n.slot=g)}!function(e){for(var n=e.hook||(e.hook={}),t=0;t<Hn.length;t++){var a=Hn[t],i=n[a],o=qn[a];i===o||i&&i._merged||(n[a]=i?Un(o,i):o)}}(n);var f=e.options.name||l;return new ge("vue-component-"+e.cid+(f?"-"+f:""),n,void 0,void 0,void 0,t,{Ctor:e,propsData:u,listeners:m,tag:l,children:a},d)}}}function Un(e,n){var t=function(t,a){e(t,a),n(t,a)};return t._merged=!0,t}function Nn(e,n,t,a,i,h){return(Array.isArray(t)||l(t))&&(i=a,a=t,t=void 0),s(h)&&(i=2),function(e,n,t,a,i){if(r(t)&&r(t.__ob__))return be();r(t)&&r(t.is)&&(n=t.is);if(!n)return be();0;Array.isArray(a)&&"function"==typeof a[0]&&((t=t||{}).scopedSlots={default:a[0]},a.length=0);2===i?a=un(a):1===i&&(a=function(e){for(var n=0;n<e.length;n++)if(Array.isArray(e[n]))return Array.prototype.concat.apply([],e);return e}(a));var l,h;if("string"==typeof n){var d;h=e.$vnode&&e.$vnode.ns||H.getTagNamespace(n),l=H.isReservedTag(n)?new ge(H.parsePlatformTagName(n),t,a,void 0,void 0,e):t&&t.pre||!r(d=De(e.$options,"components",n))?new ge(n,t,a,void 0,void 0,e):Mn(d,t,e,a,n)}else l=Mn(n,t,e,a);return Array.isArray(l)?l:r(l)?(r(h)&&function e(n,t,a){n.ns=t,"foreignObject"===n.tag&&(t=void 0,a=!0);if(r(n.children))for(var i=0,l=n.children.length;i<l;i++){var c=n.children[i];r(c.tag)&&(o(c.ns)||s(a)&&"svg"!==c.tag)&&e(c,t,a)}}(l,h),r(t)&&function(e){c(e.style)&&rn(e.style);c(e.class)&&rn(e.class)}(t),l):be()}(e,n,t,a,i)}var Rn,Wn=null;function Gn(e,n){return(e.__esModule||le&&"Module"===e[Symbol.toStringTag])&&(e=e.default),c(e)?n.extend(e):e}function $n(e){if(Array.isArray(e))for(var n=0;n<e.length;n++){var t=e[n];if(r(t)&&(r(t.componentOptions)||bn(t)))return t}}function Qn(e,n){Rn.$on(e,n)}function Vn(e,n){Rn.$off(e,n)}function Yn(e,n){var t=Rn;return function a(){var i=n.apply(null,arguments);null!==i&&t.$off(e,a)}}function Zn(e,n,t){Rn=e,cn(n,t||{},Qn,Vn,Yn,e),Rn=void 0}var Kn=null;function Xn(e){var n=Kn;return Kn=e,function(){Kn=n}}function et(e){for(;e&&(e=e.$parent);)if(e._inactive)return!0;return!1}function nt(e,n){if(n){if(e._directInactive=!1,et(e))return}else if(e._directInactive)return;if(e._inactive||null===e._inactive){e._inactive=!1;for(var t=0;t<e.$children.length;t++)nt(e.$children[t]);tt(e,"activated")}}function tt(e,n){me();var t=e.$options[n],a=n+" hook";if(t)for(var i=0,o=t.length;i<o;i++)We(t[i],e,null,e,a);e._hasHookEvent&&e.$emit("hook:"+n),pe()}var at=[],it=[],ot={},rt=!1,st=!1,lt=0;var ct=0,ht=Date.now;if(G&&!Y){var dt=window.performance;dt&&"function"==typeof dt.now&&ht()>document.createEvent("Event").timeStamp&&(ht=function(){return dt.now()})}function ut(){var e,n;for(ct=ht(),st=!0,at.sort((function(e,n){return e.id-n.id})),lt=0;lt<at.length;lt++)(e=at[lt]).before&&e.before(),n=e.id,ot[n]=null,e.run();var t=it.slice(),a=at.slice();lt=at.length=it.length=0,ot={},rt=st=!1,function(e){for(var n=0;n<e.length;n++)e[n]._inactive=!0,nt(e[n],!0)}(t),function(e){var n=e.length;for(;n--;){var t=e[n],a=t.vm;a._watcher===t&&a._isMounted&&!a._isDestroyed&&tt(a,"updated")}}(a),oe&&H.devtools&&oe.emit("flush")}var mt=0,pt=function(e,n,t,a,i){this.vm=e,i&&(e._watcher=this),e._watchers.push(this),a?(this.deep=!!a.deep,this.user=!!a.user,this.lazy=!!a.lazy,this.sync=!!a.sync,this.before=a.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=t,this.id=++mt,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new se,this.newDepIds=new se,this.expression="","function"==typeof n?this.getter=n:(this.getter=function(e){if(!N.test(e)){var n=e.split(".");return function(e){for(var t=0;t<n.length;t++){if(!e)return;e=e[n[t]]}return e}}}(n),this.getter||(this.getter=P)),this.value=this.lazy?void 0:this.get()};pt.prototype.get=function(){var e;me(this);var n=this.vm;try{e=this.getter.call(n,n)}catch(e){if(!this.user)throw e;Re(e,n,'getter for watcher "'+this.expression+'"')}finally{this.deep&&rn(e),pe(),this.cleanupDeps()}return e},pt.prototype.addDep=function(e){var n=e.id;this.newDepIds.has(n)||(this.newDepIds.add(n),this.newDeps.push(e),this.depIds.has(n)||e.addSub(this))},pt.prototype.cleanupDeps=function(){for(var e=this.deps.length;e--;){var n=this.deps[e];this.newDepIds.has(n.id)||n.removeSub(this)}var t=this.depIds;this.depIds=this.newDepIds,this.newDepIds=t,this.newDepIds.clear(),t=this.deps,this.deps=this.newDeps,this.newDeps=t,this.newDeps.length=0},pt.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():function(e){var n=e.id;if(null==ot[n]){if(ot[n]=!0,st){for(var t=at.length-1;t>lt&&at[t].id>e.id;)t--;at.splice(t+1,0,e)}else at.push(e);rt||(rt=!0,an(ut))}}(this)},pt.prototype.run=function(){if(this.active){var e=this.get();if(e!==this.value||c(e)||this.deep){var n=this.value;if(this.value=e,this.user){var t='callback for watcher "'+this.expression+'"';We(this.cb,this.vm,[e,n],this.vm,t)}else this.cb.call(this.vm,e,n)}}},pt.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},pt.prototype.depend=function(){for(var e=this.deps.length;e--;)this.deps[e].depend()},pt.prototype.teardown=function(){if(this.active){this.vm._isBeingDestroyed||v(this.vm._watchers,this);for(var e=this.deps.length;e--;)this.deps[e].removeSub(this);this.active=!1}};var gt={enumerable:!0,configurable:!0,get:P,set:P};function ft(e,n,t){gt.get=function(){return this[n][t]},gt.set=function(e){this[n][t]=e},Object.defineProperty(e,t,gt)}function bt(e){e._watchers=[];var n=e.$options;n.props&&function(e,n){var t=e.$options.propsData||{},a=e._props={},i=e.$options._propKeys=[];e.$parent&&Ee(!1);var o=function(o){i.push(o);var r=qe(o,n,t,e);je(a,o,r),o in e||ft(e,"_props",o)};for(var r in n)o(r);Ee(!0)}(e,n.props),n.methods&&function(e,n){e.$options.props;for(var t in n)e[t]="function"!=typeof n[t]?P:I(n[t],e)}(e,n.methods),n.data?function(e){var n=e.$options.data;d(n=e._data="function"==typeof n?function(e,n){me();try{return e.call(n,n)}catch(e){return Re(e,n,"data()"),{}}finally{pe()}}(n,e):n||{})||(n={});var t=Object.keys(n),a=e.$options.props,i=(e.$options.methods,t.length);for(;i--;){var o=t[i];0,a&&x(a,o)||(r=void 0,36!==(r=(o+"").charCodeAt(0))&&95!==r&&ft(e,"_data",o))}var r;Se(n,!0)}(e):Se(e._data={},!0),n.computed&&function(e,n){var t=e._computedWatchers=Object.create(null),a=ie();for(var i in n){var o=n[i],r="function"==typeof o?o:o.get;0,a||(t[i]=new pt(e,r||P,P,yt)),i in e||vt(e,i,o)}}(e,n.computed),n.watch&&n.watch!==ne&&function(e,n){for(var t in n){var a=n[t];if(Array.isArray(a))for(var i=0;i<a.length;i++)kt(e,t,a[i]);else kt(e,t,a)}}(e,n.watch)}var yt={lazy:!0};function vt(e,n,t){var a=!ie();"function"==typeof t?(gt.get=a?wt(n):xt(t),gt.set=P):(gt.get=t.get?a&&!1!==t.cache?wt(n):xt(t.get):P,gt.set=t.set||P),Object.defineProperty(e,n,gt)}function wt(e){return function(){var n=this._computedWatchers&&this._computedWatchers[e];if(n)return n.dirty&&n.evaluate(),de.target&&n.depend(),n.value}}function xt(e){return function(){return e.call(this,this)}}function kt(e,n,t,a){return d(t)&&(a=t,t=t.handler),"string"==typeof t&&(t=e[t]),e.$watch(n,t,a)}var Tt=0;function Et(e){var n=e.options;if(e.super){var t=Et(e.super);if(t!==e.superOptions){e.superOptions=t;var a=function(e){var n,t=e.options,a=e.sealedOptions;for(var i in t)t[i]!==a[i]&&(n||(n={}),n[i]=t[i]);return n}(e);a&&C(e.extendOptions,a),(n=e.options=Fe(t,e.extendOptions)).name&&(n.components[n.name]=e)}}return n}function At(e){this._init(e)}function St(e){e.cid=0;var n=1;e.extend=function(e){e=e||{};var t=this,a=t.cid,i=e._Ctor||(e._Ctor={});if(i[a])return i[a];var o=e.name||t.options.name;var r=function(e){this._init(e)};return(r.prototype=Object.create(t.prototype)).constructor=r,r.cid=n++,r.options=Fe(t.options,e),r.super=t,r.options.props&&function(e){var n=e.options.props;for(var t in n)ft(e.prototype,"_props",t)}(r),r.options.computed&&function(e){var n=e.options.computed;for(var t in n)vt(e.prototype,t,n[t])}(r),r.extend=t.extend,r.mixin=t.mixin,r.use=t.use,D.forEach((function(e){r[e]=t[e]})),o&&(r.options.components[o]=r),r.superOptions=t.options,r.extendOptions=e,r.sealedOptions=C({},r.options),i[a]=r,r}}function jt(e){return e&&(e.Ctor.options.name||e.tag)}function It(e,n){return Array.isArray(e)?e.indexOf(n)>-1:"string"==typeof e?e.split(",").indexOf(n)>-1:!!u(e)&&e.test(n)}function zt(e,n){var t=e.cache,a=e.keys,i=e._vnode;for(var o in t){var r=t[o];if(r){var s=r.name;s&&!n(s)&&Ct(t,o,a,i)}}}function Ct(e,n,t,a){var i=e[n];!i||a&&i.tag===a.tag||i.componentInstance.$destroy(),e[n]=null,v(t,n)}!function(e){e.prototype._init=function(e){var n=this;n._uid=Tt++,n._isVue=!0,e&&e._isComponent?function(e,n){var t=e.$options=Object.create(e.constructor.options),a=n._parentVnode;t.parent=n.parent,t._parentVnode=a;var i=a.componentOptions;t.propsData=i.propsData,t._parentListeners=i.listeners,t._renderChildren=i.children,t._componentTag=i.tag,n.render&&(t.render=n.render,t.staticRenderFns=n.staticRenderFns)}(n,e):n.$options=Fe(Et(n.constructor),e||{},n),n._renderProxy=n,n._self=n,function(e){var n=e.$options,t=n.parent;if(t&&!n.abstract){for(;t.$options.abstract&&t.$parent;)t=t.$parent;t.$children.push(e)}e.$parent=t,e.$root=t?t.$root:e,e.$children=[],e.$refs={},e._watcher=null,e._inactive=null,e._directInactive=!1,e._isMounted=!1,e._isDestroyed=!1,e._isBeingDestroyed=!1}(n),function(e){e._events=Object.create(null),e._hasHookEvent=!1;var n=e.$options._parentListeners;n&&Zn(e,n)}(n),function(e){e._vnode=null,e._staticTrees=null;var n=e.$options,t=e.$vnode=n._parentVnode,a=t&&t.context;e.$slots=gn(n._renderChildren,a),e.$scopedSlots=i,e._c=function(n,t,a,i){return Nn(e,n,t,a,i,!1)},e.$createElement=function(n,t,a,i){return Nn(e,n,t,a,i,!0)};var o=t&&t.data;je(e,"$attrs",o&&o.attrs||i,null,!0),je(e,"$listeners",n._parentListeners||i,null,!0)}(n),tt(n,"beforeCreate"),function(e){var n=pn(e.$options.inject,e);n&&(Ee(!1),Object.keys(n).forEach((function(t){je(e,t,n[t])})),Ee(!0))}(n),bt(n),function(e){var n=e.$options.provide;n&&(e._provided="function"==typeof n?n.call(e):n)}(n),tt(n,"created"),n.$options.el&&n.$mount(n.$options.el)}}(At),function(e){var n={get:function(){return this._data}},t={get:function(){return this._props}};Object.defineProperty(e.prototype,"$data",n),Object.defineProperty(e.prototype,"$props",t),e.prototype.$set=Ie,e.prototype.$delete=ze,e.prototype.$watch=function(e,n,t){if(d(n))return kt(this,e,n,t);(t=t||{}).user=!0;var a=new pt(this,e,n,t);if(t.immediate){var i='callback for immediate watcher "'+a.expression+'"';me(),We(n,this,[a.value],this,i),pe()}return function(){a.teardown()}}}(At),function(e){var n=/^hook:/;e.prototype.$on=function(e,t){var a=this;if(Array.isArray(e))for(var i=0,o=e.length;i<o;i++)a.$on(e[i],t);else(a._events[e]||(a._events[e]=[])).push(t),n.test(e)&&(a._hasHookEvent=!0);return a},e.prototype.$once=function(e,n){var t=this;function a(){t.$off(e,a),n.apply(t,arguments)}return a.fn=n,t.$on(e,a),t},e.prototype.$off=function(e,n){var t=this;if(!arguments.length)return t._events=Object.create(null),t;if(Array.isArray(e)){for(var a=0,i=e.length;a<i;a++)t.$off(e[a],n);return t}var o,r=t._events[e];if(!r)return t;if(!n)return t._events[e]=null,t;for(var s=r.length;s--;)if((o=r[s])===n||o.fn===n){r.splice(s,1);break}return t},e.prototype.$emit=function(e){var n=this,t=n._events[e];if(t){t=t.length>1?z(t):t;for(var a=z(arguments,1),i='event handler for "'+e+'"',o=0,r=t.length;o<r;o++)We(t[o],n,a,n,i)}return n}}(At),function(e){e.prototype._update=function(e,n){var t=this,a=t.$el,i=t._vnode,o=Xn(t);t._vnode=e,t.$el=i?t.__patch__(i,e):t.__patch__(t.$el,e,n,!1),o(),a&&(a.__vue__=null),t.$el&&(t.$el.__vue__=t),t.$vnode&&t.$parent&&t.$vnode===t.$parent._vnode&&(t.$parent.$el=t.$el)},e.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},e.prototype.$destroy=function(){var e=this;if(!e._isBeingDestroyed){tt(e,"beforeDestroy"),e._isBeingDestroyed=!0;var n=e.$parent;!n||n._isBeingDestroyed||e.$options.abstract||v(n.$children,e),e._watcher&&e._watcher.teardown();for(var t=e._watchers.length;t--;)e._watchers[t].teardown();e._data.__ob__&&e._data.__ob__.vmCount--,e._isDestroyed=!0,e.__patch__(e._vnode,null),tt(e,"destroyed"),e.$off(),e.$el&&(e.$el.__vue__=null),e.$vnode&&(e.$vnode.parent=null)}}}(At),function(e){On(e.prototype),e.prototype.$nextTick=function(e){return an(e,this)},e.prototype._render=function(){var e,n=this,t=n.$options,a=t.render,i=t._parentVnode;i&&(n.$scopedSlots=yn(i.data.scopedSlots,n.$slots,n.$scopedSlots)),n.$vnode=i;try{Wn=n,e=a.call(n._renderProxy,n.$createElement)}catch(t){Re(t,n,"render"),e=n._vnode}finally{Wn=null}return Array.isArray(e)&&1===e.length&&(e=e[0]),e instanceof ge||(e=be()),e.parent=i,e}}(At);var Bt=[String,RegExp,Array],Pt={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:Bt,exclude:Bt,max:[String,Number]},methods:{cacheVNode:function(){var e=this.cache,n=this.keys,t=this.vnodeToCache,a=this.keyToCache;if(t){var i=t.tag,o=t.componentInstance,r=t.componentOptions;e[a]={name:jt(r),tag:i,componentInstance:o},n.push(a),this.max&&n.length>parseInt(this.max)&&Ct(e,n[0],n,this._vnode),this.vnodeToCache=null}}},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var e in this.cache)Ct(this.cache,e,this.keys)},mounted:function(){var e=this;this.cacheVNode(),this.$watch("include",(function(n){zt(e,(function(e){return It(n,e)}))})),this.$watch("exclude",(function(n){zt(e,(function(e){return!It(n,e)}))}))},updated:function(){this.cacheVNode()},render:function(){var e=this.$slots.default,n=$n(e),t=n&&n.componentOptions;if(t){var a=jt(t),i=this.include,o=this.exclude;if(i&&(!a||!It(i,a))||o&&a&&It(o,a))return n;var r=this.cache,s=this.keys,l=null==n.key?t.Ctor.cid+(t.tag?"::"+t.tag:""):n.key;r[l]?(n.componentInstance=r[l].componentInstance,v(s,l),s.push(l)):(this.vnodeToCache=n,this.keyToCache=l),n.data.keepAlive=!0}return n||e&&e[0]}}};!function(e){var n={get:function(){return H}};Object.defineProperty(e,"config",n),e.util={warn:ce,extend:C,mergeOptions:Fe,defineReactive:je},e.set=Ie,e.delete=ze,e.nextTick=an,e.observable=function(e){return Se(e),e},e.options=Object.create(null),D.forEach((function(n){e.options[n+"s"]=Object.create(null)})),e.options._base=e,C(e.options.components,Pt),function(e){e.use=function(e){var n=this._installedPlugins||(this._installedPlugins=[]);if(n.indexOf(e)>-1)return this;var t=z(arguments,1);return t.unshift(this),"function"==typeof e.install?e.install.apply(e,t):"function"==typeof e&&e.apply(null,t),n.push(e),this}}(e),function(e){e.mixin=function(e){return this.options=Fe(this.options,e),this}}(e),St(e),function(e){D.forEach((function(n){e[n]=function(e,t){return t?("component"===n&&d(t)&&(t.name=t.name||e,t=this.options._base.extend(t)),"directive"===n&&"function"==typeof t&&(t={bind:t,update:t}),this.options[n+"s"][e]=t,t):this.options[n+"s"][e]}}))}(e)}(At),Object.defineProperty(At.prototype,"$isServer",{get:ie}),Object.defineProperty(At.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(At,"FunctionalRenderContext",{value:_n}),At.version="2.6.14";var Lt=b("style,class"),Jt=b("input,textarea,option,select,progress"),Ot=b("contenteditable,draggable,spellcheck"),_t=b("events,caret,typing,plaintext-only"),Ft=b("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,truespeed,typemustmatch,visible"),Dt="http://www.w3.org/1999/xlink",qt=function(e){return":"===e.charAt(5)&&"xlink"===e.slice(0,5)},Ht=function(e){return qt(e)?e.slice(6,e.length):""},Mt=function(e){return null==e||!1===e};function Ut(e){for(var n=e.data,t=e,a=e;r(a.componentInstance);)(a=a.componentInstance._vnode)&&a.data&&(n=Nt(a.data,n));for(;r(t=t.parent);)t&&t.data&&(n=Nt(n,t.data));return function(e,n){if(r(e)||r(n))return Rt(e,Wt(n));return""}(n.staticClass,n.class)}function Nt(e,n){return{staticClass:Rt(e.staticClass,n.staticClass),class:r(e.class)?[e.class,n.class]:n.class}}function Rt(e,n){return e?n?e+" "+n:e:n||""}function Wt(e){return Array.isArray(e)?function(e){for(var n,t="",a=0,i=e.length;a<i;a++)r(n=Wt(e[a]))&&""!==n&&(t&&(t+=" "),t+=n);return t}(e):c(e)?function(e){var n="";for(var t in e)e[t]&&(n&&(n+=" "),n+=t);return n}(e):"string"==typeof e?e:""}var Gt={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},$t=b("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),Qt=b("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignobject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),Vt=function(e){return $t(e)||Qt(e)};var Yt=Object.create(null);var Zt=b("text,number,password,search,email,tel,url");var Kt=Object.freeze({createElement:function(e,n){var t=document.createElement(e);return"select"!==e||n.data&&n.data.attrs&&void 0!==n.data.attrs.multiple&&t.setAttribute("multiple","multiple"),t},createElementNS:function(e,n){return document.createElementNS(Gt[e],n)},createTextNode:function(e){return document.createTextNode(e)},createComment:function(e){return document.createComment(e)},insertBefore:function(e,n,t){e.insertBefore(n,t)},removeChild:function(e,n){e.removeChild(n)},appendChild:function(e,n){e.appendChild(n)},parentNode:function(e){return e.parentNode},nextSibling:function(e){return e.nextSibling},tagName:function(e){return e.tagName},setTextContent:function(e,n){e.textContent=n},setStyleScope:function(e,n){e.setAttribute(n,"")}}),Xt={create:function(e,n){ea(n)},update:function(e,n){e.data.ref!==n.data.ref&&(ea(e,!0),ea(n))},destroy:function(e){ea(e,!0)}};function ea(e,n){var t=e.data.ref;if(r(t)){var a=e.context,i=e.componentInstance||e.elm,o=a.$refs;n?Array.isArray(o[t])?v(o[t],i):o[t]===i&&(o[t]=void 0):e.data.refInFor?Array.isArray(o[t])?o[t].indexOf(i)<0&&o[t].push(i):o[t]=[i]:o[t]=i}}var na=new ge("",{},[]),ta=["create","activate","update","remove","destroy"];function aa(e,n){return e.key===n.key&&e.asyncFactory===n.asyncFactory&&(e.tag===n.tag&&e.isComment===n.isComment&&r(e.data)===r(n.data)&&function(e,n){if("input"!==e.tag)return!0;var t,a=r(t=e.data)&&r(t=t.attrs)&&t.type,i=r(t=n.data)&&r(t=t.attrs)&&t.type;return a===i||Zt(a)&&Zt(i)}(e,n)||s(e.isAsyncPlaceholder)&&o(n.asyncFactory.error))}function ia(e,n,t){var a,i,o={};for(a=n;a<=t;++a)r(i=e[a].key)&&(o[i]=a);return o}var oa={create:ra,update:ra,destroy:function(e){ra(e,na)}};function ra(e,n){(e.data.directives||n.data.directives)&&function(e,n){var t,a,i,o=e===na,r=n===na,s=la(e.data.directives,e.context),l=la(n.data.directives,n.context),c=[],h=[];for(t in l)a=s[t],i=l[t],a?(i.oldValue=a.value,i.oldArg=a.arg,ha(i,"update",n,e),i.def&&i.def.componentUpdated&&h.push(i)):(ha(i,"bind",n,e),i.def&&i.def.inserted&&c.push(i));if(c.length){var d=function(){for(var t=0;t<c.length;t++)ha(c[t],"inserted",n,e)};o?hn(n,"insert",d):d()}h.length&&hn(n,"postpatch",(function(){for(var t=0;t<h.length;t++)ha(h[t],"componentUpdated",n,e)}));if(!o)for(t in s)l[t]||ha(s[t],"unbind",e,e,r)}(e,n)}var sa=Object.create(null);function la(e,n){var t,a,i=Object.create(null);if(!e)return i;for(t=0;t<e.length;t++)(a=e[t]).modifiers||(a.modifiers=sa),i[ca(a)]=a,a.def=De(n.$options,"directives",a.name);return i}function ca(e){return e.rawName||e.name+"."+Object.keys(e.modifiers||{}).join(".")}function ha(e,n,t,a,i){var o=e.def&&e.def[n];if(o)try{o(t.elm,e,t,a,i)}catch(a){Re(a,t.context,"directive "+e.name+" "+n+" hook")}}var da=[Xt,oa];function ua(e,n){var t=n.componentOptions;if(!(r(t)&&!1===t.Ctor.options.inheritAttrs||o(e.data.attrs)&&o(n.data.attrs))){var a,i,s=n.elm,l=e.data.attrs||{},c=n.data.attrs||{};for(a in r(c.__ob__)&&(c=n.data.attrs=C({},c)),c)i=c[a],l[a]!==i&&ma(s,a,i,n.data.pre);for(a in(Y||K)&&c.value!==l.value&&ma(s,"value",c.value),l)o(c[a])&&(qt(a)?s.removeAttributeNS(Dt,Ht(a)):Ot(a)||s.removeAttribute(a))}}function ma(e,n,t,a){a||e.tagName.indexOf("-")>-1?pa(e,n,t):Ft(n)?Mt(t)?e.removeAttribute(n):(t="allowfullscreen"===n&&"EMBED"===e.tagName?"true":n,e.setAttribute(n,t)):Ot(n)?e.setAttribute(n,function(e,n){return Mt(n)||"false"===n?"false":"contenteditable"===e&&_t(n)?n:"true"}(n,t)):qt(n)?Mt(t)?e.removeAttributeNS(Dt,Ht(n)):e.setAttributeNS(Dt,n,t):pa(e,n,t)}function pa(e,n,t){if(Mt(t))e.removeAttribute(n);else{if(Y&&!Z&&"TEXTAREA"===e.tagName&&"placeholder"===n&&""!==t&&!e.__ieph){var a=function(n){n.stopImmediatePropagation(),e.removeEventListener("input",a)};e.addEventListener("input",a),e.__ieph=!0}e.setAttribute(n,t)}}var ga={create:ua,update:ua};function fa(e,n){var t=n.elm,a=n.data,i=e.data;if(!(o(a.staticClass)&&o(a.class)&&(o(i)||o(i.staticClass)&&o(i.class)))){var s=Ut(n),l=t._transitionClasses;r(l)&&(s=Rt(s,Wt(l))),s!==t._prevClass&&(t.setAttribute("class",s),t._prevClass=s)}}var ba,ya={create:fa,update:fa};function va(e,n,t){var a=ba;return function i(){var o=n.apply(null,arguments);null!==o&&ka(e,i,t,a)}}var wa=Ve&&!(ee&&Number(ee[1])<=53);function xa(e,n,t,a){if(wa){var i=ct,o=n;n=o._wrapper=function(e){if(e.target===e.currentTarget||e.timeStamp>=i||e.timeStamp<=0||e.target.ownerDocument!==document)return o.apply(this,arguments)}}ba.addEventListener(e,n,te?{capture:t,passive:a}:t)}function ka(e,n,t,a){(a||ba).removeEventListener(e,n._wrapper||n,t)}function Ta(e,n){if(!o(e.data.on)||!o(n.data.on)){var t=n.data.on||{},a=e.data.on||{};ba=n.elm,function(e){if(r(e.__r)){var n=Y?"change":"input";e[n]=[].concat(e.__r,e[n]||[]),delete e.__r}r(e.__c)&&(e.change=[].concat(e.__c,e.change||[]),delete e.__c)}(t),cn(t,a,xa,ka,va,n.context),ba=void 0}}var Ea,Aa={create:Ta,update:Ta};function Sa(e,n){if(!o(e.data.domProps)||!o(n.data.domProps)){var t,a,i=n.elm,s=e.data.domProps||{},l=n.data.domProps||{};for(t in r(l.__ob__)&&(l=n.data.domProps=C({},l)),s)t in l||(i[t]="");for(t in l){if(a=l[t],"textContent"===t||"innerHTML"===t){if(n.children&&(n.children.length=0),a===s[t])continue;1===i.childNodes.length&&i.removeChild(i.childNodes[0])}if("value"===t&&"PROGRESS"!==i.tagName){i._value=a;var c=o(a)?"":String(a);ja(i,c)&&(i.value=c)}else if("innerHTML"===t&&Qt(i.tagName)&&o(i.innerHTML)){(Ea=Ea||document.createElement("div")).innerHTML="<svg>"+a+"</svg>";for(var h=Ea.firstChild;i.firstChild;)i.removeChild(i.firstChild);for(;h.firstChild;)i.appendChild(h.firstChild)}else if(a!==s[t])try{i[t]=a}catch(e){}}}}function ja(e,n){return!e.composing&&("OPTION"===e.tagName||function(e,n){var t=!0;try{t=document.activeElement!==e}catch(e){}return t&&e.value!==n}(e,n)||function(e,n){var t=e.value,a=e._vModifiers;if(r(a)){if(a.number)return f(t)!==f(n);if(a.trim)return t.trim()!==n.trim()}return t!==n}(e,n))}var Ia={create:Sa,update:Sa},za=k((function(e){var n={},t=/:(.+)/;return e.split(/;(?![^(]*\))/g).forEach((function(e){if(e){var a=e.split(t);a.length>1&&(n[a[0].trim()]=a[1].trim())}})),n}));function Ca(e){var n=Ba(e.style);return e.staticStyle?C(e.staticStyle,n):n}function Ba(e){return Array.isArray(e)?B(e):"string"==typeof e?za(e):e}var Pa,La=/^--/,Ja=/\s*!important$/,Oa=function(e,n,t){if(La.test(n))e.style.setProperty(n,t);else if(Ja.test(t))e.style.setProperty(j(n),t.replace(Ja,""),"important");else{var a=Fa(n);if(Array.isArray(t))for(var i=0,o=t.length;i<o;i++)e.style[a]=t[i];else e.style[a]=t}},_a=["Webkit","Moz","ms"],Fa=k((function(e){if(Pa=Pa||document.createElement("div").style,"filter"!==(e=E(e))&&e in Pa)return e;for(var n=e.charAt(0).toUpperCase()+e.slice(1),t=0;t<_a.length;t++){var a=_a[t]+n;if(a in Pa)return a}}));function Da(e,n){var t=n.data,a=e.data;if(!(o(t.staticStyle)&&o(t.style)&&o(a.staticStyle)&&o(a.style))){var i,s,l=n.elm,c=a.staticStyle,h=a.normalizedStyle||a.style||{},d=c||h,u=Ba(n.data.style)||{};n.data.normalizedStyle=r(u.__ob__)?C({},u):u;var m=function(e,n){var t,a={};if(n)for(var i=e;i.componentInstance;)(i=i.componentInstance._vnode)&&i.data&&(t=Ca(i.data))&&C(a,t);(t=Ca(e.data))&&C(a,t);for(var o=e;o=o.parent;)o.data&&(t=Ca(o.data))&&C(a,t);return a}(n,!0);for(s in d)o(m[s])&&Oa(l,s,"");for(s in m)(i=m[s])!==d[s]&&Oa(l,s,null==i?"":i)}}var qa={create:Da,update:Da},Ha=/\s+/;function Ma(e,n){if(n&&(n=n.trim()))if(e.classList)n.indexOf(" ")>-1?n.split(Ha).forEach((function(n){return e.classList.add(n)})):e.classList.add(n);else{var t=" "+(e.getAttribute("class")||"")+" ";t.indexOf(" "+n+" ")<0&&e.setAttribute("class",(t+n).trim())}}function Ua(e,n){if(n&&(n=n.trim()))if(e.classList)n.indexOf(" ")>-1?n.split(Ha).forEach((function(n){return e.classList.remove(n)})):e.classList.remove(n),e.classList.length||e.removeAttribute("class");else{for(var t=" "+(e.getAttribute("class")||"")+" ",a=" "+n+" ";t.indexOf(a)>=0;)t=t.replace(a," ");(t=t.trim())?e.setAttribute("class",t):e.removeAttribute("class")}}function Na(e){if(e){if("object"==typeof e){var n={};return!1!==e.css&&C(n,Ra(e.name||"v")),C(n,e),n}return"string"==typeof e?Ra(e):void 0}}var Ra=k((function(e){return{enterClass:e+"-enter",enterToClass:e+"-enter-to",enterActiveClass:e+"-enter-active",leaveClass:e+"-leave",leaveToClass:e+"-leave-to",leaveActiveClass:e+"-leave-active"}})),Wa=G&&!Z,Ga="transition",$a="transitionend",Qa="animation",Va="animationend";Wa&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(Ga="WebkitTransition",$a="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(Qa="WebkitAnimation",Va="webkitAnimationEnd"));var Ya=G?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(e){return e()};function Za(e){Ya((function(){Ya(e)}))}function Ka(e,n){var t=e._transitionClasses||(e._transitionClasses=[]);t.indexOf(n)<0&&(t.push(n),Ma(e,n))}function Xa(e,n){e._transitionClasses&&v(e._transitionClasses,n),Ua(e,n)}function ei(e,n,t){var a=ti(e,n),i=a.type,o=a.timeout,r=a.propCount;if(!i)return t();var s="transition"===i?$a:Va,l=0,c=function(){e.removeEventListener(s,h),t()},h=function(n){n.target===e&&++l>=r&&c()};setTimeout((function(){l<r&&c()}),o+1),e.addEventListener(s,h)}var ni=/\b(transform|all)(,|$)/;function ti(e,n){var t,a=window.getComputedStyle(e),i=(a[Ga+"Delay"]||"").split(", "),o=(a[Ga+"Duration"]||"").split(", "),r=ai(i,o),s=(a[Qa+"Delay"]||"").split(", "),l=(a[Qa+"Duration"]||"").split(", "),c=ai(s,l),h=0,d=0;return"transition"===n?r>0&&(t="transition",h=r,d=o.length):"animation"===n?c>0&&(t="animation",h=c,d=l.length):d=(t=(h=Math.max(r,c))>0?r>c?"transition":"animation":null)?"transition"===t?o.length:l.length:0,{type:t,timeout:h,propCount:d,hasTransform:"transition"===t&&ni.test(a[Ga+"Property"])}}function ai(e,n){for(;e.length<n.length;)e=e.concat(e);return Math.max.apply(null,n.map((function(n,t){return ii(n)+ii(e[t])})))}function ii(e){return 1e3*Number(e.slice(0,-1).replace(",","."))}function oi(e,n){var t=e.elm;r(t._leaveCb)&&(t._leaveCb.cancelled=!0,t._leaveCb());var a=Na(e.data.transition);if(!o(a)&&!r(t._enterCb)&&1===t.nodeType){for(var i=a.css,s=a.type,l=a.enterClass,h=a.enterToClass,d=a.enterActiveClass,u=a.appearClass,m=a.appearToClass,p=a.appearActiveClass,g=a.beforeEnter,b=a.enter,y=a.afterEnter,v=a.enterCancelled,w=a.beforeAppear,x=a.appear,k=a.afterAppear,T=a.appearCancelled,E=a.duration,A=Kn,S=Kn.$vnode;S&&S.parent;)A=S.context,S=S.parent;var j=!A._isMounted||!e.isRootInsert;if(!j||x||""===x){var I=j&&u?u:l,z=j&&p?p:d,C=j&&m?m:h,B=j&&w||g,P=j&&"function"==typeof x?x:b,L=j&&k||y,J=j&&T||v,O=f(c(E)?E.enter:E);0;var _=!1!==i&&!Z,D=li(P),q=t._enterCb=F((function(){_&&(Xa(t,C),Xa(t,z)),q.cancelled?(_&&Xa(t,I),J&&J(t)):L&&L(t),t._enterCb=null}));e.data.show||hn(e,"insert",(function(){var n=t.parentNode,a=n&&n._pending&&n._pending[e.key];a&&a.tag===e.tag&&a.elm._leaveCb&&a.elm._leaveCb(),P&&P(t,q)})),B&&B(t),_&&(Ka(t,I),Ka(t,z),Za((function(){Xa(t,I),q.cancelled||(Ka(t,C),D||(si(O)?setTimeout(q,O):ei(t,s,q)))}))),e.data.show&&(n&&n(),P&&P(t,q)),_||D||q()}}}function ri(e,n){var t=e.elm;r(t._enterCb)&&(t._enterCb.cancelled=!0,t._enterCb());var a=Na(e.data.transition);if(o(a)||1!==t.nodeType)return n();if(!r(t._leaveCb)){var i=a.css,s=a.type,l=a.leaveClass,h=a.leaveToClass,d=a.leaveActiveClass,u=a.beforeLeave,m=a.leave,p=a.afterLeave,g=a.leaveCancelled,b=a.delayLeave,y=a.duration,v=!1!==i&&!Z,w=li(m),x=f(c(y)?y.leave:y);0;var k=t._leaveCb=F((function(){t.parentNode&&t.parentNode._pending&&(t.parentNode._pending[e.key]=null),v&&(Xa(t,h),Xa(t,d)),k.cancelled?(v&&Xa(t,l),g&&g(t)):(n(),p&&p(t)),t._leaveCb=null}));b?b(T):T()}function T(){k.cancelled||(!e.data.show&&t.parentNode&&((t.parentNode._pending||(t.parentNode._pending={}))[e.key]=e),u&&u(t),v&&(Ka(t,l),Ka(t,d),Za((function(){Xa(t,l),k.cancelled||(Ka(t,h),w||(si(x)?setTimeout(k,x):ei(t,s,k)))}))),m&&m(t,k),v||w||k())}}function si(e){return"number"==typeof e&&!isNaN(e)}function li(e){if(o(e))return!1;var n=e.fns;return r(n)?li(Array.isArray(n)?n[0]:n):(e._length||e.length)>1}function ci(e,n){!0!==n.data.show&&oi(n)}var hi=function(e){var n,t,a={},i=e.modules,c=e.nodeOps;for(n=0;n<ta.length;++n)for(a[ta[n]]=[],t=0;t<i.length;++t)r(i[t][ta[n]])&&a[ta[n]].push(i[t][ta[n]]);function h(e){var n=c.parentNode(e);r(n)&&c.removeChild(n,e)}function d(e,n,t,i,o,l,h){if(r(e.elm)&&r(l)&&(e=l[h]=ve(e)),e.isRootInsert=!o,!function(e,n,t,i){var o=e.data;if(r(o)){var l=r(e.componentInstance)&&o.keepAlive;if(r(o=o.hook)&&r(o=o.init)&&o(e,!1),r(e.componentInstance))return u(e,n),m(t,e.elm,i),s(l)&&function(e,n,t,i){var o,s=e;for(;s.componentInstance;)if(s=s.componentInstance._vnode,r(o=s.data)&&r(o=o.transition)){for(o=0;o<a.activate.length;++o)a.activate[o](na,s);n.push(s);break}m(t,e.elm,i)}(e,n,t,i),!0}}(e,n,t,i)){var d=e.data,g=e.children,b=e.tag;r(b)?(e.elm=e.ns?c.createElementNS(e.ns,b):c.createElement(b,e),y(e),p(e,g,n),r(d)&&f(e,n),m(t,e.elm,i)):s(e.isComment)?(e.elm=c.createComment(e.text),m(t,e.elm,i)):(e.elm=c.createTextNode(e.text),m(t,e.elm,i))}}function u(e,n){r(e.data.pendingInsert)&&(n.push.apply(n,e.data.pendingInsert),e.data.pendingInsert=null),e.elm=e.componentInstance.$el,g(e)?(f(e,n),y(e)):(ea(e),n.push(e))}function m(e,n,t){r(e)&&(r(t)?c.parentNode(t)===e&&c.insertBefore(e,n,t):c.appendChild(e,n))}function p(e,n,t){if(Array.isArray(n)){0;for(var a=0;a<n.length;++a)d(n[a],t,e.elm,null,!0,n,a)}else l(e.text)&&c.appendChild(e.elm,c.createTextNode(String(e.text)))}function g(e){for(;e.componentInstance;)e=e.componentInstance._vnode;return r(e.tag)}function f(e,t){for(var i=0;i<a.create.length;++i)a.create[i](na,e);r(n=e.data.hook)&&(r(n.create)&&n.create(na,e),r(n.insert)&&t.push(e))}function y(e){var n;if(r(n=e.fnScopeId))c.setStyleScope(e.elm,n);else for(var t=e;t;)r(n=t.context)&&r(n=n.$options._scopeId)&&c.setStyleScope(e.elm,n),t=t.parent;r(n=Kn)&&n!==e.context&&n!==e.fnContext&&r(n=n.$options._scopeId)&&c.setStyleScope(e.elm,n)}function v(e,n,t,a,i,o){for(;a<=i;++a)d(t[a],o,e,n,!1,t,a)}function w(e){var n,t,i=e.data;if(r(i))for(r(n=i.hook)&&r(n=n.destroy)&&n(e),n=0;n<a.destroy.length;++n)a.destroy[n](e);if(r(n=e.children))for(t=0;t<e.children.length;++t)w(e.children[t])}function x(e,n,t){for(;n<=t;++n){var a=e[n];r(a)&&(r(a.tag)?(k(a),w(a)):h(a.elm))}}function k(e,n){if(r(n)||r(e.data)){var t,i=a.remove.length+1;for(r(n)?n.listeners+=i:n=function(e,n){function t(){0==--t.listeners&&h(e)}return t.listeners=n,t}(e.elm,i),r(t=e.componentInstance)&&r(t=t._vnode)&&r(t.data)&&k(t,n),t=0;t<a.remove.length;++t)a.remove[t](e,n);r(t=e.data.hook)&&r(t=t.remove)?t(e,n):n()}else h(e.elm)}function T(e,n,t,a){for(var i=t;i<a;i++){var o=n[i];if(r(o)&&aa(e,o))return i}}function E(e,n,t,i,l,h){if(e!==n){r(n.elm)&&r(i)&&(n=i[l]=ve(n));var u=n.elm=e.elm;if(s(e.isAsyncPlaceholder))r(n.asyncFactory.resolved)?j(e.elm,n,t):n.isAsyncPlaceholder=!0;else if(s(n.isStatic)&&s(e.isStatic)&&n.key===e.key&&(s(n.isCloned)||s(n.isOnce)))n.componentInstance=e.componentInstance;else{var m,p=n.data;r(p)&&r(m=p.hook)&&r(m=m.prepatch)&&m(e,n);var f=e.children,b=n.children;if(r(p)&&g(n)){for(m=0;m<a.update.length;++m)a.update[m](e,n);r(m=p.hook)&&r(m=m.update)&&m(e,n)}o(n.text)?r(f)&&r(b)?f!==b&&function(e,n,t,a,i){var s,l,h,u=0,m=0,p=n.length-1,g=n[0],f=n[p],b=t.length-1,y=t[0],w=t[b],k=!i;for(0;u<=p&&m<=b;)o(g)?g=n[++u]:o(f)?f=n[--p]:aa(g,y)?(E(g,y,a,t,m),g=n[++u],y=t[++m]):aa(f,w)?(E(f,w,a,t,b),f=n[--p],w=t[--b]):aa(g,w)?(E(g,w,a,t,b),k&&c.insertBefore(e,g.elm,c.nextSibling(f.elm)),g=n[++u],w=t[--b]):aa(f,y)?(E(f,y,a,t,m),k&&c.insertBefore(e,f.elm,g.elm),f=n[--p],y=t[++m]):(o(s)&&(s=ia(n,u,p)),o(l=r(y.key)?s[y.key]:T(y,n,u,p))?d(y,a,e,g.elm,!1,t,m):aa(h=n[l],y)?(E(h,y,a,t,m),n[l]=void 0,k&&c.insertBefore(e,h.elm,g.elm)):d(y,a,e,g.elm,!1,t,m),y=t[++m]);u>p?v(e,o(t[b+1])?null:t[b+1].elm,t,m,b,a):m>b&&x(n,u,p)}(u,f,b,t,h):r(b)?(r(e.text)&&c.setTextContent(u,""),v(u,null,b,0,b.length-1,t)):r(f)?x(f,0,f.length-1):r(e.text)&&c.setTextContent(u,""):e.text!==n.text&&c.setTextContent(u,n.text),r(p)&&r(m=p.hook)&&r(m=m.postpatch)&&m(e,n)}}}function A(e,n,t){if(s(t)&&r(e.parent))e.parent.data.pendingInsert=n;else for(var a=0;a<n.length;++a)n[a].data.hook.insert(n[a])}var S=b("attrs,class,staticClass,staticStyle,key");function j(e,n,t,a){var i,o=n.tag,l=n.data,c=n.children;if(a=a||l&&l.pre,n.elm=e,s(n.isComment)&&r(n.asyncFactory))return n.isAsyncPlaceholder=!0,!0;if(r(l)&&(r(i=l.hook)&&r(i=i.init)&&i(n,!0),r(i=n.componentInstance)))return u(n,t),!0;if(r(o)){if(r(c))if(e.hasChildNodes())if(r(i=l)&&r(i=i.domProps)&&r(i=i.innerHTML)){if(i!==e.innerHTML)return!1}else{for(var h=!0,d=e.firstChild,m=0;m<c.length;m++){if(!d||!j(d,c[m],t,a)){h=!1;break}d=d.nextSibling}if(!h||d)return!1}else p(n,c,t);if(r(l)){var g=!1;for(var b in l)if(!S(b)){g=!0,f(n,t);break}!g&&l.class&&rn(l.class)}}else e.data!==n.text&&(e.data=n.text);return!0}return function(e,n,t,i){if(!o(n)){var l,h=!1,u=[];if(o(e))h=!0,d(n,u);else{var m=r(e.nodeType);if(!m&&aa(e,n))E(e,n,u,null,null,i);else{if(m){if(1===e.nodeType&&e.hasAttribute("data-server-rendered")&&(e.removeAttribute("data-server-rendered"),t=!0),s(t)&&j(e,n,u))return A(n,u,!0),e;l=e,e=new ge(c.tagName(l).toLowerCase(),{},[],void 0,l)}var p=e.elm,f=c.parentNode(p);if(d(n,u,p._leaveCb?null:f,c.nextSibling(p)),r(n.parent))for(var b=n.parent,y=g(n);b;){for(var v=0;v<a.destroy.length;++v)a.destroy[v](b);if(b.elm=n.elm,y){for(var k=0;k<a.create.length;++k)a.create[k](na,b);var T=b.data.hook.insert;if(T.merged)for(var S=1;S<T.fns.length;S++)T.fns[S]()}else ea(b);b=b.parent}r(f)?x([e],0,0):r(e.tag)&&w(e)}}return A(n,u,h),n.elm}r(e)&&w(e)}}({nodeOps:Kt,modules:[ga,ya,Aa,Ia,qa,G?{create:ci,activate:ci,remove:function(e,n){!0!==e.data.show?ri(e,n):n()}}:{}].concat(da)});Z&&document.addEventListener("selectionchange",(function(){var e=document.activeElement;e&&e.vmodel&&yi(e,"input")}));var di={inserted:function(e,n,t,a){"select"===t.tag?(a.elm&&!a.elm._vOptions?hn(t,"postpatch",(function(){di.componentUpdated(e,n,t)})):ui(e,n,t.context),e._vOptions=[].map.call(e.options,gi)):("textarea"===t.tag||Zt(e.type))&&(e._vModifiers=n.modifiers,n.modifiers.lazy||(e.addEventListener("compositionstart",fi),e.addEventListener("compositionend",bi),e.addEventListener("change",bi),Z&&(e.vmodel=!0)))},componentUpdated:function(e,n,t){if("select"===t.tag){ui(e,n,t.context);var a=e._vOptions,i=e._vOptions=[].map.call(e.options,gi);if(i.some((function(e,n){return!O(e,a[n])})))(e.multiple?n.value.some((function(e){return pi(e,i)})):n.value!==n.oldValue&&pi(n.value,i))&&yi(e,"change")}}};function ui(e,n,t){mi(e,n,t),(Y||K)&&setTimeout((function(){mi(e,n,t)}),0)}function mi(e,n,t){var a=n.value,i=e.multiple;if(!i||Array.isArray(a)){for(var o,r,s=0,l=e.options.length;s<l;s++)if(r=e.options[s],i)o=_(a,gi(r))>-1,r.selected!==o&&(r.selected=o);else if(O(gi(r),a))return void(e.selectedIndex!==s&&(e.selectedIndex=s));i||(e.selectedIndex=-1)}}function pi(e,n){return n.every((function(n){return!O(n,e)}))}function gi(e){return"_value"in e?e._value:e.value}function fi(e){e.target.composing=!0}function bi(e){e.target.composing&&(e.target.composing=!1,yi(e.target,"input"))}function yi(e,n){var t=document.createEvent("HTMLEvents");t.initEvent(n,!0,!0),e.dispatchEvent(t)}function vi(e){return!e.componentInstance||e.data&&e.data.transition?e:vi(e.componentInstance._vnode)}var wi={model:di,show:{bind:function(e,n,t){var a=n.value,i=(t=vi(t)).data&&t.data.transition,o=e.__vOriginalDisplay="none"===e.style.display?"":e.style.display;a&&i?(t.data.show=!0,oi(t,(function(){e.style.display=o}))):e.style.display=a?o:"none"},update:function(e,n,t){var a=n.value;!a!=!n.oldValue&&((t=vi(t)).data&&t.data.transition?(t.data.show=!0,a?oi(t,(function(){e.style.display=e.__vOriginalDisplay})):ri(t,(function(){e.style.display="none"}))):e.style.display=a?e.__vOriginalDisplay:"none")},unbind:function(e,n,t,a,i){i||(e.style.display=e.__vOriginalDisplay)}}},xi={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function ki(e){var n=e&&e.componentOptions;return n&&n.Ctor.options.abstract?ki($n(n.children)):e}function Ti(e){var n={},t=e.$options;for(var a in t.propsData)n[a]=e[a];var i=t._parentListeners;for(var o in i)n[E(o)]=i[o];return n}function Ei(e,n){if(/\d-keep-alive$/.test(n.tag))return e("keep-alive",{props:n.componentOptions.propsData})}var Ai=function(e){return e.tag||bn(e)},Si=function(e){return"show"===e.name},ji={name:"transition",props:xi,abstract:!0,render:function(e){var n=this,t=this.$slots.default;if(t&&(t=t.filter(Ai)).length){0;var a=this.mode;0;var i=t[0];if(function(e){for(;e=e.parent;)if(e.data.transition)return!0}(this.$vnode))return i;var o=ki(i);if(!o)return i;if(this._leaving)return Ei(e,i);var r="__transition-"+this._uid+"-";o.key=null==o.key?o.isComment?r+"comment":r+o.tag:l(o.key)?0===String(o.key).indexOf(r)?o.key:r+o.key:o.key;var s=(o.data||(o.data={})).transition=Ti(this),c=this._vnode,h=ki(c);if(o.data.directives&&o.data.directives.some(Si)&&(o.data.show=!0),h&&h.data&&!function(e,n){return n.key===e.key&&n.tag===e.tag}(o,h)&&!bn(h)&&(!h.componentInstance||!h.componentInstance._vnode.isComment)){var d=h.data.transition=C({},s);if("out-in"===a)return this._leaving=!0,hn(d,"afterLeave",(function(){n._leaving=!1,n.$forceUpdate()})),Ei(e,i);if("in-out"===a){if(bn(o))return c;var u,m=function(){u()};hn(s,"afterEnter",m),hn(s,"enterCancelled",m),hn(d,"delayLeave",(function(e){u=e}))}}return i}}},Ii=C({tag:String,moveClass:String},xi);function zi(e){e.elm._moveCb&&e.elm._moveCb(),e.elm._enterCb&&e.elm._enterCb()}function Ci(e){e.data.newPos=e.elm.getBoundingClientRect()}function Bi(e){var n=e.data.pos,t=e.data.newPos,a=n.left-t.left,i=n.top-t.top;if(a||i){e.data.moved=!0;var o=e.elm.style;o.transform=o.WebkitTransform="translate("+a+"px,"+i+"px)",o.transitionDuration="0s"}}delete Ii.mode;var Pi={Transition:ji,TransitionGroup:{props:Ii,beforeMount:function(){var e=this,n=this._update;this._update=function(t,a){var i=Xn(e);e.__patch__(e._vnode,e.kept,!1,!0),e._vnode=e.kept,i(),n.call(e,t,a)}},render:function(e){for(var n=this.tag||this.$vnode.data.tag||"span",t=Object.create(null),a=this.prevChildren=this.children,i=this.$slots.default||[],o=this.children=[],r=Ti(this),s=0;s<i.length;s++){var l=i[s];if(l.tag)if(null!=l.key&&0!==String(l.key).indexOf("__vlist"))o.push(l),t[l.key]=l,(l.data||(l.data={})).transition=r;else;}if(a){for(var c=[],h=[],d=0;d<a.length;d++){var u=a[d];u.data.transition=r,u.data.pos=u.elm.getBoundingClientRect(),t[u.key]?c.push(u):h.push(u)}this.kept=e(n,null,c),this.removed=h}return e(n,null,o)},updated:function(){var e=this.prevChildren,n=this.moveClass||(this.name||"v")+"-move";e.length&&this.hasMove(e[0].elm,n)&&(e.forEach(zi),e.forEach(Ci),e.forEach(Bi),this._reflow=document.body.offsetHeight,e.forEach((function(e){if(e.data.moved){var t=e.elm,a=t.style;Ka(t,n),a.transform=a.WebkitTransform=a.transitionDuration="",t.addEventListener($a,t._moveCb=function e(a){a&&a.target!==t||a&&!/transform$/.test(a.propertyName)||(t.removeEventListener($a,e),t._moveCb=null,Xa(t,n))})}})))},methods:{hasMove:function(e,n){if(!Wa)return!1;if(this._hasMove)return this._hasMove;var t=e.cloneNode();e._transitionClasses&&e._transitionClasses.forEach((function(e){Ua(t,e)})),Ma(t,n),t.style.display="none",this.$el.appendChild(t);var a=ti(t);return this.$el.removeChild(t),this._hasMove=a.hasTransform}}}};At.config.mustUseProp=function(e,n,t){return"value"===t&&Jt(e)&&"button"!==n||"selected"===t&&"option"===e||"checked"===t&&"input"===e||"muted"===t&&"video"===e},At.config.isReservedTag=Vt,At.config.isReservedAttr=Lt,At.config.getTagNamespace=function(e){return Qt(e)?"svg":"math"===e?"math":void 0},At.config.isUnknownElement=function(e){if(!G)return!0;if(Vt(e))return!1;if(e=e.toLowerCase(),null!=Yt[e])return Yt[e];var n=document.createElement(e);return e.indexOf("-")>-1?Yt[e]=n.constructor===window.HTMLUnknownElement||n.constructor===window.HTMLElement:Yt[e]=/HTMLUnknownElement/.test(n.toString())},C(At.options.directives,wi),C(At.options.components,Pi),At.prototype.__patch__=G?hi:P,At.prototype.$mount=function(e,n){return function(e,n,t){var a;return e.$el=n,e.$options.render||(e.$options.render=be),tt(e,"beforeMount"),a=function(){e._update(e._render(),t)},new pt(e,a,P,{before:function(){e._isMounted&&!e._isDestroyed&&tt(e,"beforeUpdate")}},!0),t=!1,null==e.$vnode&&(e._isMounted=!0,tt(e,"mounted")),e}(this,e=e&&G?function(e){if("string"==typeof e){var n=document.querySelector(e);return n||document.createElement("div")}return e}(e):void 0,n)},G&&setTimeout((function(){H.devtools&&oe&&oe.emit("init",At)}),0);var Li=At;
/*!
  * vue-router v3.5.3
  * (c) 2021 Evan You
  * @license MIT
  */function Ji(e,n){for(var t in n)e[t]=n[t];return e}var Oi=/[!'()*]/g,_i=function(e){return"%"+e.charCodeAt(0).toString(16)},Fi=/%2C/g,Di=function(e){return encodeURIComponent(e).replace(Oi,_i).replace(Fi,",")};function qi(e){try{return decodeURIComponent(e)}catch(e){0}return e}var Hi=function(e){return null==e||"object"==typeof e?e:String(e)};function Mi(e){var n={};return(e=e.trim().replace(/^(\?|#|&)/,""))?(e.split("&").forEach((function(e){var t=e.replace(/\+/g," ").split("="),a=qi(t.shift()),i=t.length>0?qi(t.join("=")):null;void 0===n[a]?n[a]=i:Array.isArray(n[a])?n[a].push(i):n[a]=[n[a],i]})),n):n}function Ui(e){var n=e?Object.keys(e).map((function(n){var t=e[n];if(void 0===t)return"";if(null===t)return Di(n);if(Array.isArray(t)){var a=[];return t.forEach((function(e){void 0!==e&&(null===e?a.push(Di(n)):a.push(Di(n)+"="+Di(e)))})),a.join("&")}return Di(n)+"="+Di(t)})).filter((function(e){return e.length>0})).join("&"):null;return n?"?"+n:""}var Ni=/\/?$/;function Ri(e,n,t,a){var i=a&&a.options.stringifyQuery,o=n.query||{};try{o=Wi(o)}catch(e){}var r={name:n.name||e&&e.name,meta:e&&e.meta||{},path:n.path||"/",hash:n.hash||"",query:o,params:n.params||{},fullPath:Qi(n,i),matched:e?$i(e):[]};return t&&(r.redirectedFrom=Qi(t,i)),Object.freeze(r)}function Wi(e){if(Array.isArray(e))return e.map(Wi);if(e&&"object"==typeof e){var n={};for(var t in e)n[t]=Wi(e[t]);return n}return e}var Gi=Ri(null,{path:"/"});function $i(e){for(var n=[];e;)n.unshift(e),e=e.parent;return n}function Qi(e,n){var t=e.path,a=e.query;void 0===a&&(a={});var i=e.hash;return void 0===i&&(i=""),(t||"/")+(n||Ui)(a)+i}function Vi(e,n,t){return n===Gi?e===n:!!n&&(e.path&&n.path?e.path.replace(Ni,"")===n.path.replace(Ni,"")&&(t||e.hash===n.hash&&Yi(e.query,n.query)):!(!e.name||!n.name)&&(e.name===n.name&&(t||e.hash===n.hash&&Yi(e.query,n.query)&&Yi(e.params,n.params))))}function Yi(e,n){if(void 0===e&&(e={}),void 0===n&&(n={}),!e||!n)return e===n;var t=Object.keys(e).sort(),a=Object.keys(n).sort();return t.length===a.length&&t.every((function(t,i){var o=e[t];if(a[i]!==t)return!1;var r=n[t];return null==o||null==r?o===r:"object"==typeof o&&"object"==typeof r?Yi(o,r):String(o)===String(r)}))}function Zi(e){for(var n=0;n<e.matched.length;n++){var t=e.matched[n];for(var a in t.instances){var i=t.instances[a],o=t.enteredCbs[a];if(i&&o){delete t.enteredCbs[a];for(var r=0;r<o.length;r++)i._isBeingDestroyed||o[r](i)}}}}var Ki={name:"RouterView",functional:!0,props:{name:{type:String,default:"default"}},render:function(e,n){var t=n.props,a=n.children,i=n.parent,o=n.data;o.routerView=!0;for(var r=i.$createElement,s=t.name,l=i.$route,c=i._routerViewCache||(i._routerViewCache={}),h=0,d=!1;i&&i._routerRoot!==i;){var u=i.$vnode?i.$vnode.data:{};u.routerView&&h++,u.keepAlive&&i._directInactive&&i._inactive&&(d=!0),i=i.$parent}if(o.routerViewDepth=h,d){var m=c[s],p=m&&m.component;return p?(m.configProps&&Xi(p,o,m.route,m.configProps),r(p,o,a)):r()}var g=l.matched[h],f=g&&g.components[s];if(!g||!f)return c[s]=null,r();c[s]={component:f},o.registerRouteInstance=function(e,n){var t=g.instances[s];(n&&t!==e||!n&&t===e)&&(g.instances[s]=n)},(o.hook||(o.hook={})).prepatch=function(e,n){g.instances[s]=n.componentInstance},o.hook.init=function(e){e.data.keepAlive&&e.componentInstance&&e.componentInstance!==g.instances[s]&&(g.instances[s]=e.componentInstance),Zi(l)};var b=g.props&&g.props[s];return b&&(Ji(c[s],{route:l,configProps:b}),Xi(f,o,l,b)),r(f,o,a)}};function Xi(e,n,t,a){var i=n.props=function(e,n){switch(typeof n){case"undefined":return;case"object":return n;case"function":return n(e);case"boolean":return n?e.params:void 0;default:0}}(t,a);if(i){i=n.props=Ji({},i);var o=n.attrs=n.attrs||{};for(var r in i)e.props&&r in e.props||(o[r]=i[r],delete i[r])}}function eo(e,n,t){var a=e.charAt(0);if("/"===a)return e;if("?"===a||"#"===a)return n+e;var i=n.split("/");t&&i[i.length-1]||i.pop();for(var o=e.replace(/^\//,"").split("/"),r=0;r<o.length;r++){var s=o[r];".."===s?i.pop():"."!==s&&i.push(s)}return""!==i[0]&&i.unshift(""),i.join("/")}function no(e){return e.replace(/\/+/g,"/")}var to=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)},ao=yo,io=co,oo=function(e,n){return uo(co(e,n),n)},ro=uo,so=bo,lo=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function co(e,n){for(var t,a=[],i=0,o=0,r="",s=n&&n.delimiter||"/";null!=(t=lo.exec(e));){var l=t[0],c=t[1],h=t.index;if(r+=e.slice(o,h),o=h+l.length,c)r+=c[1];else{var d=e[o],u=t[2],m=t[3],p=t[4],g=t[5],f=t[6],b=t[7];r&&(a.push(r),r="");var y=null!=u&&null!=d&&d!==u,v="+"===f||"*"===f,w="?"===f||"*"===f,x=t[2]||s,k=p||g;a.push({name:m||i++,prefix:u||"",delimiter:x,optional:w,repeat:v,partial:y,asterisk:!!b,pattern:k?po(k):b?".*":"[^"+mo(x)+"]+?"})}}return o<e.length&&(r+=e.substr(o)),r&&a.push(r),a}function ho(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function uo(e,n){for(var t=new Array(e.length),a=0;a<e.length;a++)"object"==typeof e[a]&&(t[a]=new RegExp("^(?:"+e[a].pattern+")$",fo(n)));return function(n,a){for(var i="",o=n||{},r=(a||{}).pretty?ho:encodeURIComponent,s=0;s<e.length;s++){var l=e[s];if("string"!=typeof l){var c,h=o[l.name];if(null==h){if(l.optional){l.partial&&(i+=l.prefix);continue}throw new TypeError('Expected "'+l.name+'" to be defined')}if(to(h)){if(!l.repeat)throw new TypeError('Expected "'+l.name+'" to not repeat, but received `'+JSON.stringify(h)+"`");if(0===h.length){if(l.optional)continue;throw new TypeError('Expected "'+l.name+'" to not be empty')}for(var d=0;d<h.length;d++){if(c=r(h[d]),!t[s].test(c))throw new TypeError('Expected all "'+l.name+'" to match "'+l.pattern+'", but received `'+JSON.stringify(c)+"`");i+=(0===d?l.prefix:l.delimiter)+c}}else{if(c=l.asterisk?encodeURI(h).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})):r(h),!t[s].test(c))throw new TypeError('Expected "'+l.name+'" to match "'+l.pattern+'", but received "'+c+'"');i+=l.prefix+c}}else i+=l}return i}}function mo(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function po(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function go(e,n){return e.keys=n,e}function fo(e){return e&&e.sensitive?"":"i"}function bo(e,n,t){to(n)||(t=n||t,n=[]);for(var a=(t=t||{}).strict,i=!1!==t.end,o="",r=0;r<e.length;r++){var s=e[r];if("string"==typeof s)o+=mo(s);else{var l=mo(s.prefix),c="(?:"+s.pattern+")";n.push(s),s.repeat&&(c+="(?:"+l+c+")*"),o+=c=s.optional?s.partial?l+"("+c+")?":"(?:"+l+"("+c+"))?":l+"("+c+")"}}var h=mo(t.delimiter||"/"),d=o.slice(-h.length)===h;return a||(o=(d?o.slice(0,-h.length):o)+"(?:"+h+"(?=$))?"),o+=i?"$":a&&d?"":"(?="+h+"|$)",go(new RegExp("^"+o,fo(t)),n)}function yo(e,n,t){return to(n)||(t=n||t,n=[]),t=t||{},e instanceof RegExp?function(e,n){var t=e.source.match(/\((?!\?)/g);if(t)for(var a=0;a<t.length;a++)n.push({name:a,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return go(e,n)}(e,n):to(e)?function(e,n,t){for(var a=[],i=0;i<e.length;i++)a.push(yo(e[i],n,t).source);return go(new RegExp("(?:"+a.join("|")+")",fo(t)),n)}(e,n,t):function(e,n,t){return bo(co(e,t),n,t)}(e,n,t)}ao.parse=io,ao.compile=oo,ao.tokensToFunction=ro,ao.tokensToRegExp=so;var vo=Object.create(null);function wo(e,n,t){n=n||{};try{var a=vo[e]||(vo[e]=ao.compile(e));return"string"==typeof n.pathMatch&&(n[0]=n.pathMatch),a(n,{pretty:!0})}catch(e){return""}finally{delete n[0]}}function xo(e,n,t,a){var i="string"==typeof e?{path:e}:e;if(i._normalized)return i;if(i.name){var o=(i=Ji({},e)).params;return o&&"object"==typeof o&&(i.params=Ji({},o)),i}if(!i.path&&i.params&&n){(i=Ji({},i))._normalized=!0;var r=Ji(Ji({},n.params),i.params);if(n.name)i.name=n.name,i.params=r;else if(n.matched.length){var s=n.matched[n.matched.length-1].path;i.path=wo(s,r,n.path)}else 0;return i}var l=function(e){var n="",t="",a=e.indexOf("#");a>=0&&(n=e.slice(a),e=e.slice(0,a));var i=e.indexOf("?");return i>=0&&(t=e.slice(i+1),e=e.slice(0,i)),{path:e,query:t,hash:n}}(i.path||""),c=n&&n.path||"/",h=l.path?eo(l.path,c,t||i.append):c,d=function(e,n,t){void 0===n&&(n={});var a,i=t||Mi;try{a=i(e||"")}catch(e){a={}}for(var o in n){var r=n[o];a[o]=Array.isArray(r)?r.map(Hi):Hi(r)}return a}(l.query,i.query,a&&a.options.parseQuery),u=i.hash||l.hash;return u&&"#"!==u.charAt(0)&&(u="#"+u),{_normalized:!0,path:h,query:d,hash:u}}var ko,To=function(){},Eo={name:"RouterLink",props:{to:{type:[String,Object],required:!0},tag:{type:String,default:"a"},custom:Boolean,exact:Boolean,exactPath:Boolean,append:Boolean,replace:Boolean,activeClass:String,exactActiveClass:String,ariaCurrentValue:{type:String,default:"page"},event:{type:[String,Array],default:"click"}},render:function(e){var n=this,t=this.$router,a=this.$route,i=t.resolve(this.to,a,this.append),o=i.location,r=i.route,s=i.href,l={},c=t.options.linkActiveClass,h=t.options.linkExactActiveClass,d=null==c?"router-link-active":c,u=null==h?"router-link-exact-active":h,m=null==this.activeClass?d:this.activeClass,p=null==this.exactActiveClass?u:this.exactActiveClass,g=r.redirectedFrom?Ri(null,xo(r.redirectedFrom),null,t):r;l[p]=Vi(a,g,this.exactPath),l[m]=this.exact||this.exactPath?l[p]:function(e,n){return 0===e.path.replace(Ni,"/").indexOf(n.path.replace(Ni,"/"))&&(!n.hash||e.hash===n.hash)&&function(e,n){for(var t in n)if(!(t in e))return!1;return!0}(e.query,n.query)}(a,g);var f=l[p]?this.ariaCurrentValue:null,b=function(e){Ao(e)&&(n.replace?t.replace(o,To):t.push(o,To))},y={click:Ao};Array.isArray(this.event)?this.event.forEach((function(e){y[e]=b})):y[this.event]=b;var v={class:l},w=!this.$scopedSlots.$hasNormal&&this.$scopedSlots.default&&this.$scopedSlots.default({href:s,route:r,navigate:b,isActive:l[m],isExactActive:l[p]});if(w){if(1===w.length)return w[0];if(w.length>1||!w.length)return 0===w.length?e():e("span",{},w)}if("a"===this.tag)v.on=y,v.attrs={href:s,"aria-current":f};else{var x=function e(n){var t;if(n)for(var a=0;a<n.length;a++){if("a"===(t=n[a]).tag)return t;if(t.children&&(t=e(t.children)))return t}}(this.$slots.default);if(x){x.isStatic=!1;var k=x.data=Ji({},x.data);for(var T in k.on=k.on||{},k.on){var E=k.on[T];T in y&&(k.on[T]=Array.isArray(E)?E:[E])}for(var A in y)A in k.on?k.on[A].push(y[A]):k.on[A]=b;var S=x.data.attrs=Ji({},x.data.attrs);S.href=s,S["aria-current"]=f}else v.on=y}return e(this.tag,v,this.$slots.default)}};function Ao(e){if(!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey||e.defaultPrevented||void 0!==e.button&&0!==e.button)){if(e.currentTarget&&e.currentTarget.getAttribute){var n=e.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(n))return}return e.preventDefault&&e.preventDefault(),!0}}var So="undefined"!=typeof window;function jo(e,n,t,a,i){var o=n||[],r=t||Object.create(null),s=a||Object.create(null);e.forEach((function(e){!function e(n,t,a,i,o,r){var s=i.path,l=i.name;0;var c=i.pathToRegexpOptions||{},h=function(e,n,t){t||(e=e.replace(/\/$/,""));if("/"===e[0])return e;if(null==n)return e;return no(n.path+"/"+e)}(s,o,c.strict);"boolean"==typeof i.caseSensitive&&(c.sensitive=i.caseSensitive);var d={path:h,regex:Io(h,c),components:i.components||{default:i.component},alias:i.alias?"string"==typeof i.alias?[i.alias]:i.alias:[],instances:{},enteredCbs:{},name:l,parent:o,matchAs:r,redirect:i.redirect,beforeEnter:i.beforeEnter,meta:i.meta||{},props:null==i.props?{}:i.components?i.props:{default:i.props}};i.children&&i.children.forEach((function(i){var o=r?no(r+"/"+i.path):void 0;e(n,t,a,i,d,o)}));t[d.path]||(n.push(d.path),t[d.path]=d);if(void 0!==i.alias)for(var u=Array.isArray(i.alias)?i.alias:[i.alias],m=0;m<u.length;++m){0;var p={path:u[m],children:i.children};e(n,t,a,p,o,d.path||"/")}l&&(a[l]||(a[l]=d))}(o,r,s,e,i)}));for(var l=0,c=o.length;l<c;l++)"*"===o[l]&&(o.push(o.splice(l,1)[0]),c--,l--);return{pathList:o,pathMap:r,nameMap:s}}function Io(e,n){return ao(e,[],n)}function zo(e,n){var t=jo(e),a=t.pathList,i=t.pathMap,o=t.nameMap;function r(e,t,r){var s=xo(e,t,!1,n),c=s.name;if(c){var h=o[c];if(!h)return l(null,s);var d=h.regex.keys.filter((function(e){return!e.optional})).map((function(e){return e.name}));if("object"!=typeof s.params&&(s.params={}),t&&"object"==typeof t.params)for(var u in t.params)!(u in s.params)&&d.indexOf(u)>-1&&(s.params[u]=t.params[u]);return s.path=wo(h.path,s.params),l(h,s,r)}if(s.path){s.params={};for(var m=0;m<a.length;m++){var p=a[m],g=i[p];if(Co(g.regex,s.path,s.params))return l(g,s,r)}}return l(null,s)}function s(e,t){var a=e.redirect,i="function"==typeof a?a(Ri(e,t,null,n)):a;if("string"==typeof i&&(i={path:i}),!i||"object"!=typeof i)return l(null,t);var s=i,c=s.name,h=s.path,d=t.query,u=t.hash,m=t.params;if(d=s.hasOwnProperty("query")?s.query:d,u=s.hasOwnProperty("hash")?s.hash:u,m=s.hasOwnProperty("params")?s.params:m,c){o[c];return r({_normalized:!0,name:c,query:d,hash:u,params:m},void 0,t)}if(h){var p=function(e,n){return eo(e,n.parent?n.parent.path:"/",!0)}(h,e);return r({_normalized:!0,path:wo(p,m),query:d,hash:u},void 0,t)}return l(null,t)}function l(e,t,a){return e&&e.redirect?s(e,a||t):e&&e.matchAs?function(e,n,t){var a=r({_normalized:!0,path:wo(t,n.params)});if(a){var i=a.matched,o=i[i.length-1];return n.params=a.params,l(o,n)}return l(null,n)}(0,t,e.matchAs):Ri(e,t,a,n)}return{match:r,addRoute:function(e,n){var t="object"!=typeof e?o[e]:void 0;jo([n||e],a,i,o,t),t&&t.alias.length&&jo(t.alias.map((function(e){return{path:e,children:[n]}})),a,i,o,t)},getRoutes:function(){return a.map((function(e){return i[e]}))},addRoutes:function(e){jo(e,a,i,o)}}}function Co(e,n,t){var a=n.match(e);if(!a)return!1;if(!t)return!0;for(var i=1,o=a.length;i<o;++i){var r=e.keys[i-1];r&&(t[r.name||"pathMatch"]="string"==typeof a[i]?qi(a[i]):a[i])}return!0}var Bo=So&&window.performance&&window.performance.now?window.performance:Date;function Po(){return Bo.now().toFixed(3)}var Lo=Po();function Jo(){return Lo}function Oo(e){return Lo=e}var _o=Object.create(null);function Fo(){"scrollRestoration"in window.history&&(window.history.scrollRestoration="manual");var e=window.location.protocol+"//"+window.location.host,n=window.location.href.replace(e,""),t=Ji({},window.history.state);return t.key=Jo(),window.history.replaceState(t,"",n),window.addEventListener("popstate",Ho),function(){window.removeEventListener("popstate",Ho)}}function Do(e,n,t,a){if(e.app){var i=e.options.scrollBehavior;i&&e.app.$nextTick((function(){var o=function(){var e=Jo();if(e)return _o[e]}(),r=i.call(e,n,t,a?o:null);r&&("function"==typeof r.then?r.then((function(e){Wo(e,o)})).catch((function(e){0})):Wo(r,o))}))}}function qo(){var e=Jo();e&&(_o[e]={x:window.pageXOffset,y:window.pageYOffset})}function Ho(e){qo(),e.state&&e.state.key&&Oo(e.state.key)}function Mo(e){return No(e.x)||No(e.y)}function Uo(e){return{x:No(e.x)?e.x:window.pageXOffset,y:No(e.y)?e.y:window.pageYOffset}}function No(e){return"number"==typeof e}var Ro=/^#\d/;function Wo(e,n){var t,a="object"==typeof e;if(a&&"string"==typeof e.selector){var i=Ro.test(e.selector)?document.getElementById(e.selector.slice(1)):document.querySelector(e.selector);if(i){var o=e.offset&&"object"==typeof e.offset?e.offset:{};n=function(e,n){var t=document.documentElement.getBoundingClientRect(),a=e.getBoundingClientRect();return{x:a.left-t.left-n.x,y:a.top-t.top-n.y}}(i,o={x:No((t=o).x)?t.x:0,y:No(t.y)?t.y:0})}else Mo(e)&&(n=Uo(e))}else a&&Mo(e)&&(n=Uo(e));n&&("scrollBehavior"in document.documentElement.style?window.scrollTo({left:n.x,top:n.y,behavior:e.behavior}):window.scrollTo(n.x,n.y))}var Go,$o=So&&((-1===(Go=window.navigator.userAgent).indexOf("Android 2.")&&-1===Go.indexOf("Android 4.0")||-1===Go.indexOf("Mobile Safari")||-1!==Go.indexOf("Chrome")||-1!==Go.indexOf("Windows Phone"))&&window.history&&"function"==typeof window.history.pushState);function Qo(e,n){qo();var t=window.history;try{if(n){var a=Ji({},t.state);a.key=Jo(),t.replaceState(a,"",e)}else t.pushState({key:Oo(Po())},"",e)}catch(t){window.location[n?"replace":"assign"](e)}}function Vo(e){Qo(e,!0)}function Yo(e,n,t){var a=function(i){i>=e.length?t():e[i]?n(e[i],(function(){a(i+1)})):a(i+1)};a(0)}var Zo={redirected:2,aborted:4,cancelled:8,duplicated:16};function Ko(e,n){return er(e,n,Zo.redirected,'Redirected when going from "'+e.fullPath+'" to "'+function(e){if("string"==typeof e)return e;if("path"in e)return e.path;var n={};return nr.forEach((function(t){t in e&&(n[t]=e[t])})),JSON.stringify(n,null,2)}(n)+'" via a navigation guard.')}function Xo(e,n){return er(e,n,Zo.cancelled,'Navigation cancelled from "'+e.fullPath+'" to "'+n.fullPath+'" with a new navigation.')}function er(e,n,t,a){var i=new Error(a);return i._isRouter=!0,i.from=e,i.to=n,i.type=t,i}var nr=["params","query","hash"];function tr(e){return Object.prototype.toString.call(e).indexOf("Error")>-1}function ar(e,n){return tr(e)&&e._isRouter&&(null==n||e.type===n)}function ir(e){return function(n,t,a){var i=!1,o=0,r=null;or(e,(function(e,n,t,s){if("function"==typeof e&&void 0===e.cid){i=!0,o++;var l,c=lr((function(n){var i;((i=n).__esModule||sr&&"Module"===i[Symbol.toStringTag])&&(n=n.default),e.resolved="function"==typeof n?n:ko.extend(n),t.components[s]=n,--o<=0&&a()})),h=lr((function(e){var n="Failed to resolve async component "+s+": "+e;r||(r=tr(e)?e:new Error(n),a(r))}));try{l=e(c,h)}catch(e){h(e)}if(l)if("function"==typeof l.then)l.then(c,h);else{var d=l.component;d&&"function"==typeof d.then&&d.then(c,h)}}})),i||a()}}function or(e,n){return rr(e.map((function(e){return Object.keys(e.components).map((function(t){return n(e.components[t],e.instances[t],e,t)}))})))}function rr(e){return Array.prototype.concat.apply([],e)}var sr="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;function lr(e){var n=!1;return function(){for(var t=[],a=arguments.length;a--;)t[a]=arguments[a];if(!n)return n=!0,e.apply(this,t)}}var cr=function(e,n){this.router=e,this.base=function(e){if(!e)if(So){var n=document.querySelector("base");e=(e=n&&n.getAttribute("href")||"/").replace(/^https?:\/\/[^\/]+/,"")}else e="/";"/"!==e.charAt(0)&&(e="/"+e);return e.replace(/\/$/,"")}(n),this.current=Gi,this.pending=null,this.ready=!1,this.readyCbs=[],this.readyErrorCbs=[],this.errorCbs=[],this.listeners=[]};function hr(e,n,t,a){var i=or(e,(function(e,a,i,o){var r=function(e,n){"function"!=typeof e&&(e=ko.extend(e));return e.options[n]}(e,n);if(r)return Array.isArray(r)?r.map((function(e){return t(e,a,i,o)})):t(r,a,i,o)}));return rr(a?i.reverse():i)}function dr(e,n){if(n)return function(){return e.apply(n,arguments)}}cr.prototype.listen=function(e){this.cb=e},cr.prototype.onReady=function(e,n){this.ready?e():(this.readyCbs.push(e),n&&this.readyErrorCbs.push(n))},cr.prototype.onError=function(e){this.errorCbs.push(e)},cr.prototype.transitionTo=function(e,n,t){var a,i=this;try{a=this.router.match(e,this.current)}catch(e){throw this.errorCbs.forEach((function(n){n(e)})),e}var o=this.current;this.confirmTransition(a,(function(){i.updateRoute(a),n&&n(a),i.ensureURL(),i.router.afterHooks.forEach((function(e){e&&e(a,o)})),i.ready||(i.ready=!0,i.readyCbs.forEach((function(e){e(a)})))}),(function(e){t&&t(e),e&&!i.ready&&(ar(e,Zo.redirected)&&o===Gi||(i.ready=!0,i.readyErrorCbs.forEach((function(n){n(e)}))))}))},cr.prototype.confirmTransition=function(e,n,t){var a=this,i=this.current;this.pending=e;var o,r,s=function(e){!ar(e)&&tr(e)&&(a.errorCbs.length?a.errorCbs.forEach((function(n){n(e)})):console.error(e)),t&&t(e)},l=e.matched.length-1,c=i.matched.length-1;if(Vi(e,i)&&l===c&&e.matched[l]===i.matched[c])return this.ensureURL(),e.hash&&Do(this.router,i,e,!1),s(((r=er(o=i,e,Zo.duplicated,'Avoided redundant navigation to current location: "'+o.fullPath+'".')).name="NavigationDuplicated",r));var h=function(e,n){var t,a=Math.max(e.length,n.length);for(t=0;t<a&&e[t]===n[t];t++);return{updated:n.slice(0,t),activated:n.slice(t),deactivated:e.slice(t)}}(this.current.matched,e.matched),d=h.updated,u=h.deactivated,m=h.activated,p=[].concat(function(e){return hr(e,"beforeRouteLeave",dr,!0)}(u),this.router.beforeHooks,function(e){return hr(e,"beforeRouteUpdate",dr)}(d),m.map((function(e){return e.beforeEnter})),ir(m)),g=function(n,t){if(a.pending!==e)return s(Xo(i,e));try{n(e,i,(function(n){!1===n?(a.ensureURL(!0),s(function(e,n){return er(e,n,Zo.aborted,'Navigation aborted from "'+e.fullPath+'" to "'+n.fullPath+'" via a navigation guard.')}(i,e))):tr(n)?(a.ensureURL(!0),s(n)):"string"==typeof n||"object"==typeof n&&("string"==typeof n.path||"string"==typeof n.name)?(s(Ko(i,e)),"object"==typeof n&&n.replace?a.replace(n):a.push(n)):t(n)}))}catch(e){s(e)}};Yo(p,g,(function(){Yo(function(e){return hr(e,"beforeRouteEnter",(function(e,n,t,a){return function(e,n,t){return function(a,i,o){return e(a,i,(function(e){"function"==typeof e&&(n.enteredCbs[t]||(n.enteredCbs[t]=[]),n.enteredCbs[t].push(e)),o(e)}))}}(e,t,a)}))}(m).concat(a.router.resolveHooks),g,(function(){if(a.pending!==e)return s(Xo(i,e));a.pending=null,n(e),a.router.app&&a.router.app.$nextTick((function(){Zi(e)}))}))}))},cr.prototype.updateRoute=function(e){this.current=e,this.cb&&this.cb(e)},cr.prototype.setupListeners=function(){},cr.prototype.teardown=function(){this.listeners.forEach((function(e){e()})),this.listeners=[],this.current=Gi,this.pending=null};var ur=function(e){function n(n,t){e.call(this,n,t),this._startLocation=mr(this.base)}return e&&(n.__proto__=e),n.prototype=Object.create(e&&e.prototype),n.prototype.constructor=n,n.prototype.setupListeners=function(){var e=this;if(!(this.listeners.length>0)){var n=this.router,t=n.options.scrollBehavior,a=$o&&t;a&&this.listeners.push(Fo());var i=function(){var t=e.current,i=mr(e.base);e.current===Gi&&i===e._startLocation||e.transitionTo(i,(function(e){a&&Do(n,e,t,!0)}))};window.addEventListener("popstate",i),this.listeners.push((function(){window.removeEventListener("popstate",i)}))}},n.prototype.go=function(e){window.history.go(e)},n.prototype.push=function(e,n,t){var a=this,i=this.current;this.transitionTo(e,(function(e){Qo(no(a.base+e.fullPath)),Do(a.router,e,i,!1),n&&n(e)}),t)},n.prototype.replace=function(e,n,t){var a=this,i=this.current;this.transitionTo(e,(function(e){Vo(no(a.base+e.fullPath)),Do(a.router,e,i,!1),n&&n(e)}),t)},n.prototype.ensureURL=function(e){if(mr(this.base)!==this.current.fullPath){var n=no(this.base+this.current.fullPath);e?Qo(n):Vo(n)}},n.prototype.getCurrentLocation=function(){return mr(this.base)},n}(cr);function mr(e){var n=window.location.pathname,t=n.toLowerCase(),a=e.toLowerCase();return!e||t!==a&&0!==t.indexOf(no(a+"/"))||(n=n.slice(e.length)),(n||"/")+window.location.search+window.location.hash}var pr=function(e){function n(n,t,a){e.call(this,n,t),a&&function(e){var n=mr(e);if(!/^\/#/.test(n))return window.location.replace(no(e+"/#"+n)),!0}(this.base)||gr()}return e&&(n.__proto__=e),n.prototype=Object.create(e&&e.prototype),n.prototype.constructor=n,n.prototype.setupListeners=function(){var e=this;if(!(this.listeners.length>0)){var n=this.router.options.scrollBehavior,t=$o&&n;t&&this.listeners.push(Fo());var a=function(){var n=e.current;gr()&&e.transitionTo(fr(),(function(a){t&&Do(e.router,a,n,!0),$o||vr(a.fullPath)}))},i=$o?"popstate":"hashchange";window.addEventListener(i,a),this.listeners.push((function(){window.removeEventListener(i,a)}))}},n.prototype.push=function(e,n,t){var a=this,i=this.current;this.transitionTo(e,(function(e){yr(e.fullPath),Do(a.router,e,i,!1),n&&n(e)}),t)},n.prototype.replace=function(e,n,t){var a=this,i=this.current;this.transitionTo(e,(function(e){vr(e.fullPath),Do(a.router,e,i,!1),n&&n(e)}),t)},n.prototype.go=function(e){window.history.go(e)},n.prototype.ensureURL=function(e){var n=this.current.fullPath;fr()!==n&&(e?yr(n):vr(n))},n.prototype.getCurrentLocation=function(){return fr()},n}(cr);function gr(){var e=fr();return"/"===e.charAt(0)||(vr("/"+e),!1)}function fr(){var e=window.location.href,n=e.indexOf("#");return n<0?"":e=e.slice(n+1)}function br(e){var n=window.location.href,t=n.indexOf("#");return(t>=0?n.slice(0,t):n)+"#"+e}function yr(e){$o?Qo(br(e)):window.location.hash=e}function vr(e){$o?Vo(br(e)):window.location.replace(br(e))}var wr=function(e){function n(n,t){e.call(this,n,t),this.stack=[],this.index=-1}return e&&(n.__proto__=e),n.prototype=Object.create(e&&e.prototype),n.prototype.constructor=n,n.prototype.push=function(e,n,t){var a=this;this.transitionTo(e,(function(e){a.stack=a.stack.slice(0,a.index+1).concat(e),a.index++,n&&n(e)}),t)},n.prototype.replace=function(e,n,t){var a=this;this.transitionTo(e,(function(e){a.stack=a.stack.slice(0,a.index).concat(e),n&&n(e)}),t)},n.prototype.go=function(e){var n=this,t=this.index+e;if(!(t<0||t>=this.stack.length)){var a=this.stack[t];this.confirmTransition(a,(function(){var e=n.current;n.index=t,n.updateRoute(a),n.router.afterHooks.forEach((function(n){n&&n(a,e)}))}),(function(e){ar(e,Zo.duplicated)&&(n.index=t)}))}},n.prototype.getCurrentLocation=function(){var e=this.stack[this.stack.length-1];return e?e.fullPath:"/"},n.prototype.ensureURL=function(){},n}(cr),xr=function(e){void 0===e&&(e={}),this.app=null,this.apps=[],this.options=e,this.beforeHooks=[],this.resolveHooks=[],this.afterHooks=[],this.matcher=zo(e.routes||[],this);var n=e.mode||"hash";switch(this.fallback="history"===n&&!$o&&!1!==e.fallback,this.fallback&&(n="hash"),So||(n="abstract"),this.mode=n,n){case"history":this.history=new ur(this,e.base);break;case"hash":this.history=new pr(this,e.base,this.fallback);break;case"abstract":this.history=new wr(this,e.base);break;default:0}},kr={currentRoute:{configurable:!0}};function Tr(e,n){return e.push(n),function(){var t=e.indexOf(n);t>-1&&e.splice(t,1)}}xr.prototype.match=function(e,n,t){return this.matcher.match(e,n,t)},kr.currentRoute.get=function(){return this.history&&this.history.current},xr.prototype.init=function(e){var n=this;if(this.apps.push(e),e.$once("hook:destroyed",(function(){var t=n.apps.indexOf(e);t>-1&&n.apps.splice(t,1),n.app===e&&(n.app=n.apps[0]||null),n.app||n.history.teardown()})),!this.app){this.app=e;var t=this.history;if(t instanceof ur||t instanceof pr){var a=function(e){t.setupListeners(),function(e){var a=t.current,i=n.options.scrollBehavior;$o&&i&&"fullPath"in e&&Do(n,e,a,!1)}(e)};t.transitionTo(t.getCurrentLocation(),a,a)}t.listen((function(e){n.apps.forEach((function(n){n._route=e}))}))}},xr.prototype.beforeEach=function(e){return Tr(this.beforeHooks,e)},xr.prototype.beforeResolve=function(e){return Tr(this.resolveHooks,e)},xr.prototype.afterEach=function(e){return Tr(this.afterHooks,e)},xr.prototype.onReady=function(e,n){this.history.onReady(e,n)},xr.prototype.onError=function(e){this.history.onError(e)},xr.prototype.push=function(e,n,t){var a=this;if(!n&&!t&&"undefined"!=typeof Promise)return new Promise((function(n,t){a.history.push(e,n,t)}));this.history.push(e,n,t)},xr.prototype.replace=function(e,n,t){var a=this;if(!n&&!t&&"undefined"!=typeof Promise)return new Promise((function(n,t){a.history.replace(e,n,t)}));this.history.replace(e,n,t)},xr.prototype.go=function(e){this.history.go(e)},xr.prototype.back=function(){this.go(-1)},xr.prototype.forward=function(){this.go(1)},xr.prototype.getMatchedComponents=function(e){var n=e?e.matched?e:this.resolve(e).route:this.currentRoute;return n?[].concat.apply([],n.matched.map((function(e){return Object.keys(e.components).map((function(n){return e.components[n]}))}))):[]},xr.prototype.resolve=function(e,n,t){var a=xo(e,n=n||this.history.current,t,this),i=this.match(a,n),o=i.redirectedFrom||i.fullPath;return{location:a,route:i,href:function(e,n,t){var a="hash"===t?"#"+n:n;return e?no(e+"/"+a):a}(this.history.base,o,this.mode),normalizedTo:a,resolved:i}},xr.prototype.getRoutes=function(){return this.matcher.getRoutes()},xr.prototype.addRoute=function(e,n){this.matcher.addRoute(e,n),this.history.current!==Gi&&this.history.transitionTo(this.history.getCurrentLocation())},xr.prototype.addRoutes=function(e){this.matcher.addRoutes(e),this.history.current!==Gi&&this.history.transitionTo(this.history.getCurrentLocation())},Object.defineProperties(xr.prototype,kr),xr.install=function e(n){if(!e.installed||ko!==n){e.installed=!0,ko=n;var t=function(e){return void 0!==e},a=function(e,n){var a=e.$options._parentVnode;t(a)&&t(a=a.data)&&t(a=a.registerRouteInstance)&&a(e,n)};n.mixin({beforeCreate:function(){t(this.$options.router)?(this._routerRoot=this,this._router=this.$options.router,this._router.init(this),n.util.defineReactive(this,"_route",this._router.history.current)):this._routerRoot=this.$parent&&this.$parent._routerRoot||this,a(this,this)},destroyed:function(){a(this)}}),Object.defineProperty(n.prototype,"$router",{get:function(){return this._routerRoot._router}}),Object.defineProperty(n.prototype,"$route",{get:function(){return this._routerRoot._route}}),n.component("RouterView",Ki),n.component("RouterLink",Eo);var i=n.config.optionMergeStrategies;i.beforeRouteEnter=i.beforeRouteLeave=i.beforeRouteUpdate=i.created}},xr.version="3.5.3",xr.isNavigationFailure=ar,xr.NavigationFailureType=Zo,xr.START_LOCATION=Gi,So&&window.Vue&&window.Vue.use(xr);var Er=xr;t(181),t(182),t(267),t(82),t(183),t(29),t(30),t(269);function Ar(e){e.locales&&Object.keys(e.locales).forEach((function(n){e.locales[n].path=n})),Object.freeze(e)}t(77),t(97),t(131);function Sr(e){return(Sr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var jr=t(79),Ir=(t(195),t(18),t(45),t(238),t(239),t(40),t(31),{NotFound:function(){return Promise.all([t.e(0),t.e(4)]).then(t.bind(null,504))},Layout:function(){return Promise.all([t.e(0),t.e(2)]).then(t.bind(null,503))}}),zr={"v-3df72aee":function(){return t.e(6).then(t.bind(null,505))},"v-53e957a5":function(){return t.e(10).then(t.bind(null,506))},"v-60f187e4":function(){return t.e(7).then(t.bind(null,507))},"v-b3f3e478":function(){return t.e(8).then(t.bind(null,508))},"v-62aae746":function(){return t.e(9).then(t.bind(null,509))},"v-86f40b6c":function(){return t.e(11).then(t.bind(null,510))},"v-5092d7cd":function(){return t.e(12).then(t.bind(null,511))},"v-145d67ee":function(){return t.e(13).then(t.bind(null,512))},"v-6fd7a454":function(){return t.e(14).then(t.bind(null,513))},"v-5968f740":function(){return t.e(18).then(t.bind(null,514))},"v-5e17d186":function(){return t.e(17).then(t.bind(null,515))},"v-1588f37d":function(){return t.e(19).then(t.bind(null,516))},"v-6791dec0":function(){return t.e(20).then(t.bind(null,517))},"v-69d2555a":function(){return t.e(16).then(t.bind(null,518))},"v-f087bd4c":function(){return t.e(15).then(t.bind(null,519))},"v-0ab66e7a":function(){return t.e(22).then(t.bind(null,520))},"v-5a5f8cdc":function(){return t.e(23).then(t.bind(null,521))},"v-f35d9f7a":function(){return t.e(21).then(t.bind(null,522))},"v-1928ce46":function(){return t.e(25).then(t.bind(null,523))},"v-0e7e1f9d":function(){return t.e(26).then(t.bind(null,524))},"v-573f69f5":function(){return t.e(27).then(t.bind(null,525))},"v-2b0e2026":function(){return t.e(28).then(t.bind(null,526))},"v-8fe997c6":function(){return t.e(24).then(t.bind(null,527))},"v-d0785a8c":function(){return t.e(29).then(t.bind(null,528))},"v-5979dd85":function(){return t.e(30).then(t.bind(null,529))},"v-6a060ba3":function(){return t.e(31).then(t.bind(null,530))},"v-5d2edda6":function(){return t.e(33).then(t.bind(null,531))},"v-1f417e61":function(){return t.e(32).then(t.bind(null,532))},"v-519a112a":function(){return t.e(34).then(t.bind(null,533))},"v-695cc5c6":function(){return t.e(36).then(t.bind(null,534))},"v-14b00586":function(){return t.e(37).then(t.bind(null,535))},"v-322e1d2d":function(){return t.e(38).then(t.bind(null,536))},"v-627480ef":function(){return t.e(39).then(t.bind(null,537))},"v-877c8074":function(){return t.e(40).then(t.bind(null,538))},"v-701b9342":function(){return t.e(41).then(t.bind(null,539))},"v-d430be26":function(){return t.e(42).then(t.bind(null,540))},"v-4d919234":function(){return t.e(35).then(t.bind(null,541))},"v-67786560":function(){return t.e(43).then(t.bind(null,542))},"v-a983fefa":function(){return t.e(44).then(t.bind(null,543))},"v-09b4fe23":function(){return t.e(45).then(t.bind(null,544))},"v-2b5996fa":function(){return t.e(47).then(t.bind(null,545))},"v-20bd447c":function(){return t.e(48).then(t.bind(null,546))},"v-b65c8756":function(){return t.e(49).then(t.bind(null,547))},"v-899877ea":function(){return t.e(46).then(t.bind(null,548))},"v-2698ee46":function(){return t.e(50).then(t.bind(null,549))},"v-ba2ec8da":function(){return t.e(51).then(t.bind(null,550))},"v-133fb8e3":function(){return t.e(52).then(t.bind(null,551))},"v-150807c6":function(){return t.e(53).then(t.bind(null,552))},"v-4818b098":function(){return t.e(54).then(t.bind(null,553))},"v-1fb0df4e":function(){return t.e(55).then(t.bind(null,554))},"v-49add558":function(){return t.e(57).then(t.bind(null,555))},"v-4efe5bbc":function(){return t.e(58).then(t.bind(null,556))},"v-ec3730c6":function(){return t.e(56).then(t.bind(null,557))},"v-6345c5cb":function(){return t.e(59).then(t.bind(null,558))},"v-8524be88":function(){return t.e(61).then(t.bind(null,559))},"v-68880222":function(){return t.e(60).then(t.bind(null,560))},"v-18dc29fb":function(){return t.e(62).then(t.bind(null,561))},"v-14d43fa8":function(){return t.e(63).then(t.bind(null,562))},"v-67fed644":function(){return t.e(64).then(t.bind(null,563))},"v-2c8ff494":function(){return t.e(65).then(t.bind(null,564))},"v-6952ef1f":function(){return t.e(66).then(t.bind(null,565))},"v-0dab8476":function(){return t.e(67).then(t.bind(null,566))},"v-1345ef6a":function(){return t.e(69).then(t.bind(null,567))},"v-603e6248":function(){return t.e(68).then(t.bind(null,568))},"v-4a3a6bd4":function(){return t.e(71).then(t.bind(null,569))},"v-4b6cd045":function(){return t.e(70).then(t.bind(null,570))},"v-fb918adc":function(){return t.e(72).then(t.bind(null,571))},"v-6141012d":function(){return t.e(73).then(t.bind(null,572))},"v-8e2fd182":function(){return t.e(74).then(t.bind(null,573))},"v-58374e5d":function(){return t.e(75).then(t.bind(null,574))},"v-34448c65":function(){return t.e(76).then(t.bind(null,575))},"v-cebfecc8":function(){return t.e(77).then(t.bind(null,576))},"v-35f418d8":function(){return t.e(78).then(t.bind(null,577))},"v-40e99d88":function(){return t.e(79).then(t.bind(null,578))},"v-69a19b70":function(){return t.e(80).then(t.bind(null,579))},"v-79427016":function(){return t.e(82).then(t.bind(null,580))},"v-149463ce":function(){return t.e(81).then(t.bind(null,581))},"v-adbd0d2e":function(){return t.e(83).then(t.bind(null,582))},"v-2afd436f":function(){return t.e(84).then(t.bind(null,583))},"v-0e3be9f1":function(){return t.e(85).then(t.bind(null,584))},"v-6522b1a2":function(){return t.e(86).then(t.bind(null,585))},"v-25aef1ae":function(){return t.e(88).then(t.bind(null,586))},"v-f4fa39cc":function(){return t.e(89).then(t.bind(null,587))},"v-6bcabb64":function(){return t.e(87).then(t.bind(null,588))},"v-d8a45364":function(){return t.e(90).then(t.bind(null,589))},"v-1acef428":function(){return t.e(91).then(t.bind(null,590))},"v-4d30c4ec":function(){return t.e(92).then(t.bind(null,591))},"v-6b8ab12c":function(){return t.e(93).then(t.bind(null,592))},"v-0c983905":function(){return t.e(94).then(t.bind(null,593))},"v-636f026f":function(){return t.e(95).then(t.bind(null,594))},"v-e577561a":function(){return t.e(96).then(t.bind(null,595))},"v-641ea554":function(){return t.e(97).then(t.bind(null,596))},"v-c1db8328":function(){return t.e(98).then(t.bind(null,597))},"v-221ce4d6":function(){return t.e(99).then(t.bind(null,598))},"v-2a3868cc":function(){return t.e(100).then(t.bind(null,599))},"v-4a301fef":function(){return t.e(101).then(t.bind(null,600))},"v-166a75b0":function(){return t.e(102).then(t.bind(null,601))},"v-77a4a72f":function(){return t.e(103).then(t.bind(null,602))},"v-07a02de6":function(){return t.e(105).then(t.bind(null,603))},"v-7c9be7fc":function(){return t.e(104).then(t.bind(null,604))},"v-2b671f36":function(){return t.e(106).then(t.bind(null,605))},"v-7e83acb8":function(){return t.e(107).then(t.bind(null,606))},"v-6ea070cd":function(){return t.e(108).then(t.bind(null,607))},"v-563ba650":function(){return t.e(109).then(t.bind(null,608))},"v-a3c26e56":function(){return t.e(111).then(t.bind(null,609))},"v-acb0fba2":function(){return t.e(110).then(t.bind(null,610))},"v-9f0c4862":function(){return t.e(112).then(t.bind(null,611))},"v-39d535ca":function(){return t.e(113).then(t.bind(null,612))},"v-52a40118":function(){return t.e(114).then(t.bind(null,613))},"v-56e1cd7d":function(){return t.e(115).then(t.bind(null,614))},"v-3ac19be9":function(){return t.e(117).then(t.bind(null,615))},"v-9816d7c8":function(){return t.e(116).then(t.bind(null,616))},"v-4b411184":function(){return t.e(118).then(t.bind(null,617))},"v-33982f80":function(){return t.e(120).then(t.bind(null,618))},"v-77e3674a":function(){return t.e(119).then(t.bind(null,619))},"v-618c27e6":function(){return t.e(121).then(t.bind(null,620))},"v-13a7ac0e":function(){return t.e(122).then(t.bind(null,621))},"v-731d5ca8":function(){return t.e(123).then(t.bind(null,622))},"v-87c78268":function(){return t.e(125).then(t.bind(null,623))},"v-4dbe4cb4":function(){return t.e(124).then(t.bind(null,624))},"v-62ef8b86":function(){return t.e(126).then(t.bind(null,625))},"v-05a8a9ec":function(){return t.e(127).then(t.bind(null,626))},"v-6f71bd09":function(){return t.e(128).then(t.bind(null,627))},"v-01eae3de":function(){return t.e(130).then(t.bind(null,628))},"v-3d39fce6":function(){return t.e(129).then(t.bind(null,629))},"v-33c35951":function(){return t.e(131).then(t.bind(null,630))},"v-266ed7cf":function(){return t.e(132).then(t.bind(null,631))},"v-5991209c":function(){return t.e(133).then(t.bind(null,632))},"v-dd2b4e64":function(){return t.e(135).then(t.bind(null,633))},"v-72a7516a":function(){return t.e(134).then(t.bind(null,634))},"v-12969a92":function(){return t.e(136).then(t.bind(null,635))},"v-50c3ea8f":function(){return t.e(137).then(t.bind(null,636))},"v-1a3113b2":function(){return t.e(138).then(t.bind(null,637))},"v-794c889c":function(){return t.e(141).then(t.bind(null,638))},"v-2f3f3a2c":function(){return t.e(142).then(t.bind(null,639))},"v-b729a7e2":function(){return t.e(140).then(t.bind(null,640))},"v-6513cf24":function(){return t.e(143).then(t.bind(null,641))},"v-7fb24832":function(){return t.e(145).then(t.bind(null,642))},"v-1c33fda0":function(){return t.e(144).then(t.bind(null,643))},"v-79ebf50f":function(){return t.e(146).then(t.bind(null,644))},"v-c59b78e8":function(){return t.e(139).then(t.bind(null,645))},"v-4b88402c":function(){return t.e(147).then(t.bind(null,646))},"v-de63b316":function(){return t.e(149).then(t.bind(null,647))},"v-6be7a9da":function(){return t.e(148).then(t.bind(null,648))},"v-13ca1252":function(){return t.e(150).then(t.bind(null,649))},"v-5bd35776":function(){return t.e(151).then(t.bind(null,650))},"v-2487e57e":function(){return t.e(152).then(t.bind(null,651))},"v-b5868b80":function(){return t.e(154).then(t.bind(null,652))},"v-72ce9c15":function(){return t.e(153).then(t.bind(null,653))},"v-79a39361":function(){return t.e(155).then(t.bind(null,654))},"v-ff940602":function(){return t.e(156).then(t.bind(null,655))},"v-7e5142ed":function(){return t.e(157).then(t.bind(null,656))},"v-37d4487c":function(){return t.e(158).then(t.bind(null,657))},"v-252d851b":function(){return t.e(159).then(t.bind(null,658))},"v-99cb094a":function(){return t.e(160).then(t.bind(null,659))},"v-88aaa1ee":function(){return t.e(161).then(t.bind(null,660))},"v-4a4457d0":function(){return t.e(162).then(t.bind(null,661))},"v-a9927fd4":function(){return t.e(163).then(t.bind(null,662))},"v-3edf2079":function(){return t.e(164).then(t.bind(null,663))},"v-05aa3cd4":function(){return t.e(165).then(t.bind(null,664))},"v-9ce1dd8e":function(){return t.e(166).then(t.bind(null,665))},"v-30bbbfe8":function(){return t.e(168).then(t.bind(null,666))},"v-7c79e454":function(){return t.e(167).then(t.bind(null,667))},"v-36d8e52c":function(){return t.e(169).then(t.bind(null,668))},"v-51cbdc35":function(){return t.e(172).then(t.bind(null,669))},"v-3a20ea46":function(){return t.e(171).then(t.bind(null,670))},"v-bd172ada":function(){return t.e(173).then(t.bind(null,671))},"v-5e87be4e":function(){return t.e(170).then(t.bind(null,672))},"v-efc958c8":function(){return t.e(174).then(t.bind(null,673))},"v-7bd687fc":function(){return t.e(175).then(t.bind(null,674))},"v-8f7cf752":function(){return t.e(176).then(t.bind(null,675))},"v-56b8210d":function(){return t.e(177).then(t.bind(null,676))},"v-0c0305d5":function(){return t.e(178).then(t.bind(null,677))},"v-46fa5f4a":function(){return t.e(180).then(t.bind(null,678))},"v-9ee36d88":function(){return t.e(179).then(t.bind(null,679))},"v-43ee85a2":function(){return t.e(181).then(t.bind(null,680))},"v-72c09b1d":function(){return t.e(182).then(t.bind(null,681))},"v-16cfba85":function(){return t.e(184).then(t.bind(null,682))},"v-5bc87269":function(){return t.e(183).then(t.bind(null,683))},"v-ee4eaa34":function(){return t.e(185).then(t.bind(null,684))},"v-bea1d2d6":function(){return t.e(186).then(t.bind(null,685))},"v-50f953dc":function(){return t.e(187).then(t.bind(null,686))},"v-21a8ad8a":function(){return t.e(188).then(t.bind(null,687))},"v-4b230ce4":function(){return t.e(191).then(t.bind(null,688))},"v-6015b26c":function(){return t.e(189).then(t.bind(null,689))},"v-62e09756":function(){return t.e(192).then(t.bind(null,690))},"v-28d12b06":function(){return t.e(190).then(t.bind(null,691))},"v-162046e2":function(){return t.e(193).then(t.bind(null,692))},"v-014bb200":function(){return t.e(196).then(t.bind(null,693))},"v-7c1b97f0":function(){return t.e(194).then(t.bind(null,694))},"v-619a9c15":function(){return t.e(195).then(t.bind(null,695))},"v-584b6c7d":function(){return t.e(198).then(t.bind(null,696))},"v-2e5e00fc":function(){return t.e(197).then(t.bind(null,697))},"v-61ecd514":function(){return t.e(200).then(t.bind(null,698))},"v-c7ac12a6":function(){return t.e(199).then(t.bind(null,699))},"v-029c498f":function(){return t.e(201).then(t.bind(null,700))},"v-3c56d5e0":function(){return t.e(202).then(t.bind(null,701))},"v-149f20b6":function(){return t.e(203).then(t.bind(null,702))},"v-34266b3a":function(){return t.e(204).then(t.bind(null,703))},"v-9e70aada":function(){return t.e(205).then(t.bind(null,704))},"v-32f6ed8a":function(){return t.e(206).then(t.bind(null,705))},"v-fec88e32":function(){return t.e(207).then(t.bind(null,706))},"v-8bfbf216":function(){return t.e(209).then(t.bind(null,707))},"v-139d165e":function(){return t.e(208).then(t.bind(null,708))},"v-438b1d09":function(){return t.e(210).then(t.bind(null,709))},"v-bfe359e2":function(){return t.e(211).then(t.bind(null,710))},"v-19a77e49":function(){return t.e(212).then(t.bind(null,711))},"v-7e063df7":function(){return t.e(214).then(t.bind(null,712))},"v-3dc1be9e":function(){return t.e(215).then(t.bind(null,713))},"v-5155ca36":function(){return t.e(213).then(t.bind(null,714))},"v-6a58e8d8":function(){return t.e(216).then(t.bind(null,715))},"v-289054fd":function(){return t.e(217).then(t.bind(null,716))},"v-9534e174":function(){return t.e(218).then(t.bind(null,717))},"v-5f831136":function(){return t.e(220).then(t.bind(null,718))},"v-f57974b4":function(){return t.e(219).then(t.bind(null,719))},"v-8f33d4a0":function(){return t.e(221).then(t.bind(null,720))},"v-1a25ed56":function(){return t.e(222).then(t.bind(null,721))},"v-6d56857d":function(){return t.e(223).then(t.bind(null,722))},"v-264d80b8":function(){return t.e(224).then(t.bind(null,723))},"v-16de008f":function(){return t.e(225).then(t.bind(null,724))},"v-7474094c":function(){return t.e(226).then(t.bind(null,725))},"v-44b816a4":function(){return t.e(227).then(t.bind(null,726))},"v-754c4324":function(){return t.e(228).then(t.bind(null,727))},"v-73eb45bb":function(){return t.e(229).then(t.bind(null,728))},"v-000396c9":function(){return t.e(230).then(t.bind(null,729))},"v-06e3b6d6":function(){return t.e(231).then(t.bind(null,730))},"v-da70ac80":function(){return t.e(234).then(t.bind(null,731))},"v-5b8c6c5b":function(){return t.e(235).then(t.bind(null,732))},"v-353722f2":function(){return t.e(236).then(t.bind(null,733))},"v-6a151cce":function(){return t.e(233).then(t.bind(null,734))},"v-f94b8f2e":function(){return t.e(238).then(t.bind(null,735))},"v-991a76d6":function(){return t.e(237).then(t.bind(null,736))},"v-08ea863e":function(){return t.e(240).then(t.bind(null,737))},"v-f7583148":function(){return t.e(239).then(t.bind(null,738))},"v-4c4668ed":function(){return t.e(241).then(t.bind(null,739))},"v-2ec52027":function(){return t.e(232).then(t.bind(null,740))},"v-4ff5c178":function(){return t.e(242).then(t.bind(null,741))},"v-64aff65b":function(){return t.e(243).then(t.bind(null,742))},"v-1262b87e":function(){return t.e(244).then(t.bind(null,743))},"v-c900921e":function(){return t.e(245).then(t.bind(null,744))},"v-677ce2a0":function(){return t.e(246).then(t.bind(null,745))},"v-b4d26508":function(){return t.e(247).then(t.bind(null,746))},"v-14c326d6":function(){return t.e(248).then(t.bind(null,747))},"v-091b4722":function(){return t.e(249).then(t.bind(null,748))},"v-c56d4894":function(){return t.e(250).then(t.bind(null,749))},"v-74d157a5":function(){return t.e(251).then(t.bind(null,750))},"v-2d691257":function(){return t.e(252).then(t.bind(null,751))},"v-5c56c7ef":function(){return t.e(254).then(t.bind(null,752))},"v-f8eb562c":function(){return t.e(253).then(t.bind(null,753))},"v-1bb7ea63":function(){return t.e(255).then(t.bind(null,754))},"v-2fab6371":function(){return t.e(256).then(t.bind(null,755))},"v-6bd5532b":function(){return t.e(257).then(t.bind(null,756))},"v-9a1683c0":function(){return t.e(259).then(t.bind(null,757))},"v-63435fef":function(){return t.e(260).then(t.bind(null,758))},"v-11e58d10":function(){return t.e(258).then(t.bind(null,759))},"v-6fa1b01e":function(){return t.e(261).then(t.bind(null,760))},"v-086cf181":function(){return t.e(262).then(t.bind(null,761))},"v-305be5af":function(){return t.e(263).then(t.bind(null,762))},"v-eba2befa":function(){return t.e(264).then(t.bind(null,763))},"v-32e1b1fa":function(){return t.e(265).then(t.bind(null,764))},"v-c7c7c5d8":function(){return t.e(266).then(t.bind(null,765))},"v-01287270":function(){return t.e(267).then(t.bind(null,766))},"v-2995e4f3":function(){return t.e(269).then(t.bind(null,767))},"v-72916731":function(){return t.e(270).then(t.bind(null,768))},"v-032199b6":function(){return t.e(271).then(t.bind(null,769))},"v-fd7e728a":function(){return t.e(272).then(t.bind(null,770))},"v-1c283729":function(){return t.e(273).then(t.bind(null,771))},"v-5a9b2bfe":function(){return t.e(274).then(t.bind(null,772))},"v-21fa34f8":function(){return t.e(275).then(t.bind(null,773))},"v-aee938f8":function(){return t.e(276).then(t.bind(null,774))},"v-43f4085c":function(){return t.e(277).then(t.bind(null,775))},"v-061a36ca":function(){return t.e(278).then(t.bind(null,776))},"v-46c3fbe0":function(){return t.e(279).then(t.bind(null,777))},"v-4b514f00":function(){return t.e(280).then(t.bind(null,778))},"v-0cfc498e":function(){return t.e(281).then(t.bind(null,779))},"v-06b4bc73":function(){return t.e(282).then(t.bind(null,780))},"v-eb5241a6":function(){return t.e(283).then(t.bind(null,781))},"v-e95328cc":function(){return t.e(284).then(t.bind(null,782))},"v-47eb0248":function(){return t.e(285).then(t.bind(null,783))},"v-5ee0e570":function(){return t.e(286).then(t.bind(null,784))},"v-c9a18048":function(){return t.e(287).then(t.bind(null,785))},"v-8da46682":function(){return t.e(288).then(t.bind(null,786))},"v-39227ad2":function(){return t.e(289).then(t.bind(null,787))},"v-ea16c700":function(){return t.e(290).then(t.bind(null,788))},"v-e9028434":function(){return t.e(291).then(t.bind(null,789))},"v-28192474":function(){return t.e(292).then(t.bind(null,790))},"v-ad47ee68":function(){return t.e(293).then(t.bind(null,791))},"v-3ddb7a44":function(){return t.e(294).then(t.bind(null,792))},"v-81ef1bfc":function(){return t.e(295).then(t.bind(null,793))},"v-0927a410":function(){return t.e(268).then(t.bind(null,794))},"v-5b207988":function(){return t.e(296).then(t.bind(null,795))},"v-3441661b":function(){return t.e(297).then(t.bind(null,796))},"v-0b2ea8bc":function(){return t.e(298).then(t.bind(null,797))},"v-3cc4bb4a":function(){return t.e(300).then(t.bind(null,798))},"v-030c6d13":function(){return t.e(299).then(t.bind(null,799))},"v-3e1b8c0c":function(){return t.e(301).then(t.bind(null,800))},"v-158d8f8e":function(){return t.e(302).then(t.bind(null,801))},"v-5a9d5485":function(){return t.e(303).then(t.bind(null,802))},"v-3c6bfcb8":function(){return Promise.all([t.e(0),t.e(5)]).then(t.bind(null,803))},"v-f8f78794":function(){return t.e(304).then(t.bind(null,804))},"v-157d6660":function(){return t.e(306).then(t.bind(null,805))},"v-3dbf8362":function(){return t.e(307).then(t.bind(null,806))},"v-33039ea5":function(){return t.e(305).then(t.bind(null,807))},"v-584f7a00":function(){return t.e(309).then(t.bind(null,808))},"v-77561fe6":function(){return t.e(308).then(t.bind(null,809))},"v-29e25319":function(){return t.e(310).then(t.bind(null,810))},"v-4f80cc75":function(){return t.e(311).then(t.bind(null,811))},"v-1d9c3c3b":function(){return t.e(312).then(t.bind(null,812))},"v-5de59050":function(){return t.e(313).then(t.bind(null,813))},"v-d54b86a8":function(){return t.e(314).then(t.bind(null,814))},"v-39573a11":function(){return t.e(315).then(t.bind(null,815))},"v-63ce2149":function(){return t.e(316).then(t.bind(null,816))},"v-1c1cf212":function(){return t.e(317).then(t.bind(null,817))},"v-43592254":function(){return t.e(318).then(t.bind(null,818))},"v-0de5a480":function(){return t.e(319).then(t.bind(null,819))},"v-32908d60":function(){return t.e(320).then(t.bind(null,820))},"v-79350870":function(){return t.e(322).then(t.bind(null,821))},"v-b700167a":function(){return t.e(321).then(t.bind(null,822))},"v-2b29a74e":function(){return t.e(323).then(t.bind(null,823))},"v-7972075e":function(){return t.e(327).then(t.bind(null,824))},"v-b69608c4":function(){return t.e(328).then(t.bind(null,825))},"v-60102044":function(){return t.e(329).then(t.bind(null,826))},"v-d9036cba":function(){return t.e(325).then(t.bind(null,827))},"v-2bb0f60a":function(){return t.e(330).then(t.bind(null,828))},"v-80ac896a":function(){return t.e(331).then(t.bind(null,829))},"v-7d0620ad":function(){return t.e(326).then(t.bind(null,830))},"v-1770b0c0":function(){return t.e(332).then(t.bind(null,831))},"v-078e42cf":function(){return t.e(333).then(t.bind(null,832))},"v-6e1af767":function(){return t.e(334).then(t.bind(null,833))},"v-6d8e5d58":function(){return t.e(324).then(t.bind(null,834))},"v-914c6eca":function(){return t.e(335).then(t.bind(null,835))},"v-5dd65de6":function(){return t.e(337).then(t.bind(null,836))},"v-45e13a46":function(){return t.e(340).then(t.bind(null,837))},"v-602f6a3e":function(){return t.e(336).then(t.bind(null,838))},"v-069726b1":function(){return t.e(338).then(t.bind(null,839))},"v-9150e006":function(){return t.e(339).then(t.bind(null,840))},"v-050b5070":function(){return t.e(341).then(t.bind(null,841))},"v-c68bce4c":function(){return t.e(342).then(t.bind(null,842))},"v-09e49812":function(){return t.e(343).then(t.bind(null,843))},"v-a648cdb0":function(){return t.e(344).then(t.bind(null,844))},"v-511ab6fa":function(){return t.e(345).then(t.bind(null,845))},"v-d2d599de":function(){return t.e(346).then(t.bind(null,846))},"v-68ed9838":function(){return t.e(348).then(t.bind(null,847))},"v-6d811eec":function(){return t.e(347).then(t.bind(null,848))},"v-e2d6b94c":function(){return t.e(349).then(t.bind(null,849))},"v-3f336508":function(){return t.e(351).then(t.bind(null,850))},"v-5a7e209d":function(){return t.e(350).then(t.bind(null,851))},"v-67a807bd":function(){return t.e(353).then(t.bind(null,852))},"v-360a8800":function(){return t.e(352).then(t.bind(null,853))},"v-d028a74a":function(){return t.e(354).then(t.bind(null,854))},"v-dc102e1c":function(){return t.e(357).then(t.bind(null,855))},"v-d9223254":function(){return t.e(356).then(t.bind(null,856))},"v-dd968700":function(){return t.e(355).then(t.bind(null,857))},"v-3835e1b3":function(){return t.e(358).then(t.bind(null,858))},"v-e49aec88":function(){return t.e(359).then(t.bind(null,859))},"v-758a0ab3":function(){return t.e(362).then(t.bind(null,860))},"v-2371ff82":function(){return t.e(360).then(t.bind(null,861))},"v-c7d6fcb4":function(){return t.e(361).then(t.bind(null,862))},"v-3a807e33":function(){return t.e(363).then(t.bind(null,863))},"v-367307b8":function(){return t.e(364).then(t.bind(null,864))},"v-114202a4":function(){return t.e(365).then(t.bind(null,865))},"v-14303cb8":function(){return t.e(366).then(t.bind(null,866))},"v-0925a2f8":function(){return t.e(368).then(t.bind(null,867))},"v-b855e89c":function(){return t.e(369).then(t.bind(null,868))},"v-7e4aeb42":function(){return t.e(367).then(t.bind(null,869))},"v-56bfe10b":function(){return t.e(370).then(t.bind(null,870))},"v-03f07c11":function(){return t.e(371).then(t.bind(null,871))},"v-487776ae":function(){return t.e(372).then(t.bind(null,872))},"v-1d80ae54":function(){return t.e(373).then(t.bind(null,873))},"v-2c65660a":function(){return t.e(374).then(t.bind(null,874))},"v-11db5011":function(){return t.e(375).then(t.bind(null,875))},"v-b4dc99c2":function(){return t.e(376).then(t.bind(null,876))},"v-4f7dd079":function(){return t.e(377).then(t.bind(null,877))},"v-5d0ae742":function(){return t.e(379).then(t.bind(null,878))},"v-a3ae3a00":function(){return t.e(378).then(t.bind(null,879))},"v-2a7a89bf":function(){return t.e(380).then(t.bind(null,880))},"v-56c197ac":function(){return t.e(381).then(t.bind(null,881))}};function Cr(e){var n=Object.create(null);return function(t){return n[t]||(n[t]=e(t))}}var Br=/-(\w)/g,Pr=Cr((function(e){return e.replace(Br,(function(e,n){return n?n.toUpperCase():""}))})),Lr=/\B([A-Z])/g,Jr=Cr((function(e){return e.replace(Lr,"-$1").toLowerCase()})),Or=Cr((function(e){return e.charAt(0).toUpperCase()+e.slice(1)}));function _r(e,n){if(n)return e(n)?e(n):n.includes("-")?e(Or(Pr(n))):e(Or(n))||e(Jr(n))}var Fr=Object.assign({},Ir,zr),Dr=function(e){return Fr[e]},qr=function(e){return zr[e]},Hr=function(e){return Ir[e]},Mr=function(e){return Li.component(e)};function Ur(e){return _r(qr,e)}function Nr(e){return _r(Hr,e)}function Rr(e){return _r(Dr,e)}function Wr(e){return _r(Mr,e)}function Gr(){for(var e=arguments.length,n=new Array(e),t=0;t<e;t++)n[t]=arguments[t];return Promise.all(n.filter((function(e){return e})).map(function(){var e=Object(a.a)(regeneratorRuntime.mark((function e(n){var t;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(Wr(n)||!Rr(n)){e.next=5;break}return e.next=3,Rr(n)();case 3:t=e.sent,Li.component(n,t.default);case 5:case"end":return e.stop()}}),e)})));return function(n){return e.apply(this,arguments)}}()))}function $r(e,n){"undefined"!=typeof window&&window.__VUEPRESS__&&(window.__VUEPRESS__[e]=n)}var Qr=t(143),Vr=(t(130),t(115),t(56),t(225)),Yr=t.n(Vr),Zr=t(226),Kr=t.n(Zr),Xr={created:function(){if(this.siteMeta=this.$site.headTags.filter((function(e){return"meta"===Object(Qr.a)(e,1)[0]})).map((function(e){var n=Object(Qr.a)(e,2);n[0];return n[1]})),this.$ssrContext){var e=this.getMergedMetaTags();this.$ssrContext.title=this.$title,this.$ssrContext.lang=this.$lang,this.$ssrContext.pageMeta=(n=e)?n.map((function(e){var n="<meta";return Object.keys(e).forEach((function(t){n+=" ".concat(t,'="').concat(Kr()(e[t]),'"')})),n+">"})).join("\n    "):"",this.$ssrContext.canonicalLink=ns(this.$canonicalUrl)}var n},mounted:function(){this.currentMetaTags=Object(jr.a)(document.querySelectorAll("meta")),this.updateMeta(),this.updateCanonicalLink()},methods:{updateMeta:function(){document.title=this.$title,document.documentElement.lang=this.$lang;var e=this.getMergedMetaTags();this.currentMetaTags=ts(e,this.currentMetaTags)},getMergedMetaTags:function(){var e=this.$page.frontmatter.meta||[];return Yr()([{name:"description",content:this.$description}],e,this.siteMeta,as)},updateCanonicalLink:function(){es(),this.$canonicalUrl&&document.head.insertAdjacentHTML("beforeend",ns(this.$canonicalUrl))}},watch:{$page:function(){this.updateMeta(),this.updateCanonicalLink()}},beforeDestroy:function(){ts(null,this.currentMetaTags),es()}};function es(){var e=document.querySelector("link[rel='canonical']");e&&e.remove()}function ns(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return e?'<link href="'.concat(e,'" rel="canonical" />'):""}function ts(e,n){if(n&&Object(jr.a)(n).filter((function(e){return e.parentNode===document.head})).forEach((function(e){return document.head.removeChild(e)})),e)return e.map((function(e){var n=document.createElement("meta");return Object.keys(e).forEach((function(t){n.setAttribute(t,e[t])})),document.head.appendChild(n),n}))}function as(e){for(var n=0,t=["name","property","itemprop"];n<t.length;n++){var a=t[n];if(e.hasOwnProperty(a))return e[a]+a}return JSON.stringify(e)}t(144);var is=t(156),os={mounted:function(){window.addEventListener("scroll",this.onScroll)},methods:{onScroll:t.n(is)()((function(){this.setActiveHash()}),300),setActiveHash:function(){for(var e=this,n=[].slice.call(document.querySelectorAll(".sidebar-link")),t=[].slice.call(document.querySelectorAll(".header-anchor")).filter((function(e){return n.some((function(n){return n.hash===e.hash}))})),a=Math.max(window.pageYOffset,document.documentElement.scrollTop,document.body.scrollTop),i=Math.max(document.documentElement.scrollHeight,document.body.scrollHeight),o=window.innerHeight+a,r=0;r<t.length;r++){var s=t[r],l=t[r+1],c=0===r&&0===a||a>=s.parentElement.offsetTop+10&&(!l||a<l.parentElement.offsetTop-10),h=decodeURIComponent(this.$route.hash);if(c&&h!==decodeURIComponent(s.hash)){var d=s;if(o===i)for(var u=r+1;u<t.length;u++)if(h===decodeURIComponent(t[u].hash))return;return this.$vuepress.$set("disableScrollBehavior",!0),void this.$router.replace(decodeURIComponent(d.hash),(function(){e.$nextTick((function(){e.$vuepress.$set("disableScrollBehavior",!1)}))}))}}}},beforeDestroy:function(){window.removeEventListener("scroll",this.onScroll)}},rs=(t(85),t(106)),ss=t.n(rs),ls={mounted:function(){var e=this;ss.a.configure({showSpinner:!1}),this.$router.beforeEach((function(e,n,t){e.path===n.path||Li.component(e.name)||ss.a.start(),t()})),this.$router.afterEach((function(){ss.a.done(),e.isSidebarOpen=!1}))}};t(81),t(57),t(84),t(383);function cs(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}t(104);function hs(e,n){for(var t=0;t<n.length;t++){var a=n[t];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}function ds(e,n,t){return n&&hs(e.prototype,n),t&&hs(e,t),Object.defineProperty(e,"prototype",{writable:!1}),e}t(384);var us=function(){function e(){cs(this,e);this.containerEl=document.getElementById("message-container"),this.containerEl||(this.containerEl=document.createElement("div"),this.containerEl.id="message-container",document.body.appendChild(this.containerEl))}return ds(e,[{key:"show",value:function(e){var n=this,t=e.text,a=void 0===t?"":t,i=e.duration,o=void 0===i?3e3:i,r=document.createElement("div");r.className="message move-in",r.innerHTML='\n      <i style="fill: #06a35a;font-size: 14px;display:inline-flex;align-items: center;">\n        <svg style="fill: #06a35a;font-size: 14px;" t="1572421810237" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="2323" width="16" height="16"><path d="M822.811993 824.617989c-83.075838 81.99224-188.546032 124.613757-316.049383 127.86455-122.085362-3.250794-223.943563-45.87231-305.935802-127.86455s-124.613757-184.21164-127.86455-305.935802c3.250794-127.503351 45.87231-232.973545 127.86455-316.049383 81.99224-83.075838 184.21164-126.058554 305.935802-129.309347 127.503351 3.250794 232.973545 46.23351 316.049383 129.309347 83.075838 83.075838 126.058554 188.546032 129.309347 316.049383C949.231746 640.406349 905.887831 742.62575 822.811993 824.617989zM432.716755 684.111464c3.973192 3.973192 8.307584 5.779189 13.364374 6.140388 5.05679 0.361199 9.752381-1.444797 13.364374-5.417989l292.571429-287.514638c3.973192-3.973192 5.779189-8.307584 5.779189-13.364374 0-5.05679-1.805996-9.752381-5.779189-13.364374l1.805996 1.805996c-3.973192-3.973192-8.668783-5.779189-14.086772-6.140388-5.417989-0.361199-10.47478 1.444797-14.809171 5.417989l-264.397884 220.33157c-3.973192 3.250794-8.668783 4.695591-14.447972 4.695591-5.779189 0-10.835979-1.444797-15.53157-3.973192l-94.273016-72.962257c-4.334392-3.250794-9.391182-4.334392-14.447972-3.973192s-9.391182 3.250794-12.641975 7.585185l-2.889594 3.973192c-3.250794 4.334392-4.334392 9.391182-3.973192 14.809171 0.722399 5.417989 2.528395 10.11358 5.779189 14.086772L432.716755 684.111464z" p-id="2324"></path></svg>\n      </i>\n      <div class="text">'.concat(a,"</div>\n    "),this.containerEl.appendChild(r),o>0&&setTimeout((function(){n.close(r)}),o)}},{key:"close",value:function(e){e.className=e.className.replace("move-in",""),e.className+="move-out",e.addEventListener("animationend",(function(){e.remove()}))}}]),e}(),ms={mounted:function(){!!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)||this.updateCopy()},updated:function(){!!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)||this.updateCopy()},methods:{updateCopy:function(){var e=this;setTimeout((function(){(['div[class*="language-"] pre','div[class*="aside-code"] aside']instanceof Array||Array.isArray(['div[class*="language-"] pre','div[class*="aside-code"] aside']))&&['div[class*="language-"] pre','div[class*="aside-code"] aside'].forEach((function(n){document.querySelectorAll(n).forEach(e.generateCopyButton)}))}),1e3)},generateCopyButton:function(e){var n=this;if(!e.classList.contains("codecopy-enabled")){var t=document.createElement("i");t.className="code-copy",t.innerHTML='<svg  style="color:#aaa;font-size:14px" t="1572422231464" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="3201" width="14" height="14"><path d="M866.461538 39.384615H354.461538c-43.323077 0-78.769231 35.446154-78.76923 78.769231v39.384616h472.615384c43.323077 0 78.769231 35.446154 78.769231 78.76923v551.384616h39.384615c43.323077 0 78.769231-35.446154 78.769231-78.769231V118.153846c0-43.323077-35.446154-78.769231-78.769231-78.769231z m-118.153846 275.692308c0-43.323077-35.446154-78.769231-78.76923-78.769231H157.538462c-43.323077 0-78.769231 35.446154-78.769231 78.769231v590.769231c0 43.323077 35.446154 78.769231 78.769231 78.769231h512c43.323077 0 78.769231-35.446154 78.76923-78.769231V315.076923z m-354.461538 137.846154c0 11.815385-7.876923 19.692308-19.692308 19.692308h-157.538461c-11.815385 0-19.692308-7.876923-19.692308-19.692308v-39.384615c0-11.815385 7.876923-19.692308 19.692308-19.692308h157.538461c11.815385 0 19.692308 7.876923 19.692308 19.692308v39.384615z m157.538461 315.076923c0 11.815385-7.876923 19.692308-19.692307 19.692308H216.615385c-11.815385 0-19.692308-7.876923-19.692308-19.692308v-39.384615c0-11.815385 7.876923-19.692308 19.692308-19.692308h315.076923c11.815385 0 19.692308 7.876923 19.692307 19.692308v39.384615z m78.769231-157.538462c0 11.815385-7.876923 19.692308-19.692308 19.692308H216.615385c-11.815385 0-19.692308-7.876923-19.692308-19.692308v-39.384615c0-11.815385 7.876923-19.692308 19.692308-19.692308h393.846153c11.815385 0 19.692308 7.876923 19.692308 19.692308v39.384615z" p-id="3202"></path></svg>',t.title="Copy to clipboard",t.addEventListener("click",(function(){n.copyToClipboard(e.innerText)})),e.appendChild(t),e.classList.add("codecopy-enabled")}},copyToClipboard:function(e){var n=document.createElement("textarea");n.value=e,n.setAttribute("readonly",""),n.style.position="absolute",n.style.left="-9999px",document.body.appendChild(n);var t=document.getSelection().rangeCount>0&&document.getSelection().getRangeAt(0);n.select(),document.execCommand("copy"),(new us).show({text:"复制成功",duration:1e3}),document.body.removeChild(n),t&&(document.getSelection().removeAllRanges(),document.getSelection().addRange(t))}}};t(241),t(108),t(109),t(145),t(386);!function(e,n){void 0===n&&(n={});var t=n.insertAt;if(e&&"undefined"!=typeof document){var a=document.head||document.getElementsByTagName("head")[0],i=document.createElement("style");i.type="text/css","top"===t&&a.firstChild?a.insertBefore(i,a.firstChild):a.appendChild(i),i.styleSheet?i.styleSheet.cssText=e:i.appendChild(document.createTextNode(e))}}("@media (max-width: 1000px) {\n  .vuepress-plugin-demo-block__h_code {\n    display: none;\n  }\n  .vuepress-plugin-demo-block__app {\n    margin-left: auto !important;\n    margin-right: auto !important;\n  }\n}\n.vuepress-plugin-demo-block__wrapper {\n  margin-top: 10px;\n  border: 1px solid #ebebeb;\n  border-radius: 4px;\n  transition: all 0.2s;\n}\n.vuepress-plugin-demo-block__wrapper.vuepress-plugin-demo-block__horizontal .vuepress-plugin-demo-block__display {\n  height: 400px;\n  display: flex;\n}\n.vuepress-plugin-demo-block__wrapper.vuepress-plugin-demo-block__horizontal .vuepress-plugin-demo-block__display .vuepress-plugin-demo-block__app {\n  width: 300px;\n  border: 1px solid #ebebeb;\n  box-shadow: 1px 1px 3px #ebebeb;\n  margin-right: 5px;\n  overflow: auto;\n}\n.vuepress-plugin-demo-block__wrapper.vuepress-plugin-demo-block__horizontal .vuepress-plugin-demo-block__display .vuepress-plugin-demo-block__h_code {\n  flex: 1;\n  overflow: auto;\n  height: 100%;\n}\n.vuepress-plugin-demo-block__wrapper.vuepress-plugin-demo-block__horizontal .vuepress-plugin-demo-block__display .vuepress-plugin-demo-block__h_code > pre {\n  overflow: visible;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__display {\n  max-height: 400px;\n  overflow: auto;\n}\n.vuepress-plugin-demo-block__wrapper div {\n  box-sizing: border-box;\n}\n.vuepress-plugin-demo-block__wrapper:hover {\n  box-shadow: 0 0 11px rgba(33, 33, 33, 0.2);\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__code {\n  overflow: hidden;\n  height: 0;\n  padding: 0 !important;\n  background-color: #282c34;\n  border-radius: 0 !important;\n  transition: height 0.5s;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__code pre {\n  margin: 0 !important;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__display {\n  padding: 20px;\n  border-bottom: 1px solid #ebebeb;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer {\n  position: relative;\n  text-align: center;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer.vuepress-plugin-demo-block__show-link .vuepress-plugin-demo-block__jsfiddle,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer.vuepress-plugin-demo-block__show-link .vuepress-plugin-demo-block__codepen {\n  opacity: 1;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer.vuepress-plugin-demo-block__show-link .vuepress-plugin-demo-block__expand::before {\n  border-top: none;\n  border-right: 6px solid transparent;\n  border-bottom: 6px solid #ccc;\n  border-left: 6px solid transparent;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__jsfiddle,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__codepen,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__expand span,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__expand {\n  opacity: 1;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__expand::before {\n  border-top-color: #3eaf7c !important;\n  border-bottom-color: #3eaf7c !important;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover svg {\n  fill: #3eaf7c !important;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__expand-text {\n  transition: all 0.5s;\n  opacity: 0;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer form:nth-last-child(2) {\n  right: 50px;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer form:last-child {\n  right: 10px;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__button {\n  border-color: transparent;\n  background-color: transparent;\n  font-size: 14px;\n  color: #3eaf7c;\n  cursor: pointer;\n  outline: none;\n  margin: 0;\n  width: 46px;\n  position: relative;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__button:hover::before {\n  content: attr(data-tip);\n  white-space: nowrap;\n  position: absolute;\n  top: -30px;\n  left: 50%;\n  color: #eee;\n  line-height: 1;\n  z-index: 1000;\n  border-radius: 4px;\n  padding: 6px;\n  -webkit-transform: translateX(-50%);\n          transform: translateX(-50%);\n  background-color: rgba(0, 0, 0, 0.8);\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__button:hover::after {\n  content: '' !important;\n  display: block;\n  position: absolute;\n  left: 50%;\n  top: -5px;\n  -webkit-transform: translateX(-50%);\n          transform: translateX(-50%);\n  border: 5px solid transparent;\n  border-top-color: rgba(0, 0, 0, 0.8);\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__button svg {\n  width: 34px;\n  height: 20px;\n  fill: #ccc;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__jsfiddle,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__codepen {\n  position: absolute;\n  top: 10px;\n  transition: all 0.5s;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__expand {\n  position: relative;\n  width: 100px;\n  height: 40px;\n  margin: 0;\n  color: #3eaf7c;\n  font-size: 14px;\n  background-color: transparent;\n  border-color: transparent;\n  outline: none;\n  transition: all 0.5s;\n  cursor: pointer;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__expand::before {\n  content: \"\";\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 0;\n  height: 0;\n  border-top: 6px solid #ccc;\n  border-right: 6px solid transparent;\n  border-left: 6px solid transparent;\n  -webkit-transform: translate(-50%, -50%);\n          transform: translate(-50%, -50%);\n}\n");var ps={jsLib:[],cssLib:[],jsfiddle:!0,codepen:!0,codepenLayout:"left",codepenJsProcessor:"babel",codepenEditors:"101",horizontal:!1,vue:"https://cdn.jsdelivr.net/npm/vue/dist/vue.min.js",react:"https://cdn.jsdelivr.net/npm/react/umd/react.production.min.js",reactDOM:"https://cdn.jsdelivr.net/npm/react-dom/umd/react-dom.production.min.js"},gs={},fs=function(e){return'<div id="app">\n'.concat(e,"\n</div>")},bs=function(e){return window.$VUEPRESS_DEMO_BLOCK&&void 0!==window.$VUEPRESS_DEMO_BLOCK[e]?window.$VUEPRESS_DEMO_BLOCK[e]:ps[e]},ys=function e(n,t,a){var i=document.createElement(n);return t&&Object.keys(t).forEach((function(e){if(e.indexOf("data"))i[e]=t[e];else{var n=e.replace("data","");i.dataset[n]=t[e]}})),a&&a.forEach((function(n){var t=n.tag,a=n.attrs,o=n.children;i.appendChild(e(t,a,o))})),i},vs=function(e,n,t){var a,i=(a=e.querySelectorAll(".".concat(n)),Array.prototype.slice.call(a));return 1!==i.length||t?i:i[0]},ws=function(e,n){var t,a,i=e.match(/<style>([\s\S]+)<\/style>/),o=e.match(/<template>([\s\S]+)<\/template>/),r=e.match(/<script>([\s\S]+)<\/script>/),s={css:i&&i[1].replace(/^\n|\n$/g,""),html:o&&o[1].replace(/^\n|\n$/g,""),js:r&&r[1].replace(/^\n|\n$/g,""),jsLib:n.jsLib||[],cssLib:n.cssLib||[]};s.htmlTpl=fs(s.html),s.jsTpl=(t=s.js,a=t.replace(/export\s+default\s*?\{\n*/,"").replace(/\n*\}\s*$/,"").trim(),"new Vue({\n  el: '#app',\n  ".concat(a,"\n})")),s.script=function(e,n){var t=e.split(/export\s+default/),a="(function() {".concat(t[0]," ; return ").concat(t[1],"})()"),i=window.Babel?window.Babel.transform(a,{presets:["es2015"]}).code:a,o=[eval][0](i);return o.template=n,o}(s.js,s.html);var l=bs("vue");return s.jsLib.unshift(l),s},xs=function(e,n){var t,a=e.match(/<style>([\s\S]+)<\/style>/),i=e.match(/<html>([\s\S]+)<\/html>/),o=e.match(/<script>([\s\S]+)<\/script>/),r={css:a&&a[1].replace(/^\n|\n$/g,""),html:i&&i[1].replace(/^\n|\n$/g,""),js:o&&o[1].replace(/^\n|\n$/g,""),jsLib:n.jsLib||[],cssLib:n.cssLib||[]};return r.htmlTpl=r.html,r.jsTpl=r.js,r.script=(t=r.js,window.Babel?window.Babel.transform(t,{presets:["es2015"]}).code:t),r},ks=function(e){return e=e.replace("export default ","").replace(/App\.__style__(\s*)=(\s*)`([\s\S]*)?`/,""),e+='ReactDOM.render(React.createElement(App), document.getElementById("app"))'};function Ts(){var e=vs(document,"vuepress-plugin-demo-block__wrapper",!0);e.length?e.forEach((function(e){if("true"!==e.dataset.created){e.style.display="block";var n=vs(e,"vuepress-plugin-demo-block__code"),t=vs(e,"vuepress-plugin-demo-block__display"),a=vs(e,"vuepress-plugin-demo-block__footer"),i=vs(t,"vuepress-plugin-demo-block__app"),o=decodeURIComponent(e.dataset.code),r=decodeURIComponent(e.dataset.config),s=decodeURIComponent(e.dataset.type);r=r?JSON.parse(r):{};var l=n.querySelector("div").clientHeight,c="react"===s?function(e,n){var t=(0,window.Babel.transform)(e,{presets:["es2015","react"]}).code,a="(function(exports){var module={};module.exports=exports;".concat(t,";return module.exports.__esModule?module.exports.default:module.exports;})({})"),i=new Function("return ".concat(a))(),o={js:i,css:i.__style__||"",jsLib:n.jsLib||[],cssLib:n.cssLib||[],jsTpl:ks(e),htmlTpl:fs("")},r=bs("react"),s=bs("reactDOM");return o.jsLib.unshift(r,s),o}(o,r):"vanilla"===s?xs(o,r):ws(o,r),h=ys("button",{className:"".concat("vuepress-plugin-demo-block__expand")});if(a.appendChild(h),h.addEventListener("click",Es.bind(null,h,l,n,a)),bs("jsfiddle")&&a.appendChild(function(e){var n=e.css,t=e.htmlTpl,a=e.jsTpl,i=e.jsLib,o=e.cssLib,r=i.concat(o).concat(bs("cssLib")).concat(bs("jsLib")).join(",");return ys("form",{className:"vuepress-plugin-demo-block__jsfiddle",target:"_blank",action:"https://jsfiddle.net/api/post/library/pure/",method:"post"},[{tag:"input",attrs:{type:"hidden",name:"css",value:n}},{tag:"input",attrs:{type:"hidden",name:"html",value:t}},{tag:"input",attrs:{type:"hidden",name:"js",value:a}},{tag:"input",attrs:{type:"hidden",name:"panel_js",value:3}},{tag:"input",attrs:{type:"hidden",name:"wrap",value:1}},{tag:"input",attrs:{type:"hidden",name:"resources",value:r}},{tag:"button",attrs:{type:"submit",className:"vuepress-plugin-demo-block__button",innerHTML:'<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg t="1547088289967" class="icon" style="" viewBox="0 0 1170 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="1952" xmlns:xlink="http://www.w3.org/1999/xlink" width="228.515625" height="200"><defs><style type="text/css"></style></defs><path d="M1028.571429 441.142857q63.428571 26.285714 102.571428 83.142857T1170.285714 650.857143q0 93.714286-67.428571 160.285714T940 877.714286q-2.285714 0-6.571429-0.285715t-6-0.285714H232q-97.142857-5.714286-164.571429-71.714286T0 645.142857q0-62.857143 31.428571-116t84-84q-6.857143-22.285714-6.857142-46.857143 0-65.714286 46.857142-112t113.714286-46.285714q54.285714 0 98.285714 33.142857 42.857143-88 127.142858-141.714286t186.571428-53.714285q94.857143 0 174.857143 46T982.571429 248.571429t46.571428 172q0 3.428571-0.285714 10.285714t-0.285714 10.285714zM267.428571 593.142857q0 69.714286 48 110.285714t118.857143 40.571429q78.285714 0 137.142857-56.571429-9.142857-11.428571-27.142857-32.285714T519.428571 626.285714q-38.285714 37.142857-82.285714 37.142857-31.428571 0-53.428571-19.142857T361.714286 594.285714q0-30.285714 22-49.714285t52.285714-19.428572q25.142857 0 48.285714 12t41.714286 31.428572 37.142857 42.857142 39.428572 46.857143 44 42.857143 55.428571 31.428572 69.428571 12q69.142857 0 116.857143-40.857143T936 594.857143q0-69.142857-48-109.714286t-118.285714-40.571428q-81.714286 0-137.714286 55.428571l53.142857 61.714286q37.714286-36.571429 81.142857-36.571429 29.714286 0 52.571429 18.857143t22.857143 48q0 32.571429-21.142857 52.285714t-53.714286 19.714286q-24.571429 0-47.142857-12t-41.142857-31.428571-37.428572-42.857143-39.714286-46.857143-44.285714-42.857143-55.142857-31.428571T434.285714 444.571429q-69.714286 0-118.285714 40.285714T267.428571 593.142857z" p-id="1953"></path></svg>',datatip:"JSFiddle"}}])}(c)),bs("codepen")&&a.appendChild(function(e){var n=e.css,t=e.htmlTpl,a=e.jsTpl,i=e.jsLib,o=e.cssLib,r=JSON.stringify({css:n,html:t,js:a,js_external:i.concat(bs("jsLib")).join(";"),css_external:o.concat(bs("cssLib")).join(";"),layout:bs("codepenLayout"),js_pre_processor:bs("codepenJsProcessor"),editors:bs("codepenEditors")});return ys("form",{className:"vuepress-plugin-demo-block__codepen",target:"_blank",action:"https://codepen.io/pen/define",method:"post"},[{tag:"input",attrs:{type:"hidden",name:"data",value:r}},{tag:"button",attrs:{type:"submit",innerHTML:'<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg t="1547088271207" class="icon" style="" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="1737" xmlns:xlink="http://www.w3.org/1999/xlink" width="200" height="200"><defs><style type="text/css"></style></defs><path d="M123.428571 668l344.571429 229.714286v-205.142857L277.142857 565.142857z m-35.428571-82.285714l110.285714-73.714286-110.285714-73.714286v147.428572z m468 312l344.571429-229.714286-153.714286-102.857143-190.857143 127.428572v205.142857z m-44-281.714286l155.428571-104-155.428571-104-155.428571 104zM277.142857 458.857143l190.857143-127.428572V126.285714L123.428571 356z m548.571429 53.142857l110.285714 73.714286V438.285714z m-78.857143-53.142857l153.714286-102.857143-344.571429-229.714286v205.142857z m277.142857-102.857143v312q0 23.428571-19.428571 36.571429l-468 312q-12 7.428571-24.571429 7.428571t-24.571429-7.428571L19.428571 704.571429q-19.428571-13.142857-19.428571-36.571429V356q0-23.428571 19.428571-36.571429L487.428571 7.428571q12-7.428571 24.571429-7.428571t24.571429 7.428571l468 312q19.428571 13.142857 19.428571 36.571429z" p-id="1738"></path></svg>',className:"vuepress-plugin-demo-block__button",datatip:"Codepen"}}])}(c)),void 0!==r.horizontal?r.horizontal:bs("horizontal")){e.classList.add("vuepress-plugin-demo-block__horizontal");var d=n.firstChild.cloneNode(!0);d.classList.add("vuepress-plugin-demo-block__h_code"),t.appendChild(d)}if(c.css&&function(e){if(!gs[e]){var n=ys("style",{innerHTML:e});document.body.appendChild(n),gs[e]=!0}}(c.css),"react"===s)ReactDOM.render(React.createElement(c.js),i);else if("vue"===s){var u=(new(Vue.extend(c.script))).$mount();i.appendChild(u.$el)}else"vanilla"===s&&(i.innerHTML=c.html,new Function("return (function(){".concat(c.script,"})()"))());e.dataset.created="true"}})):setTimeout((function(e){Ts()}),300)}function Es(e,n,t,a){var i="1"!==e.dataset.isExpand;t.style.height=i?"".concat(n,"px"):0,i?a.classList.add("vuepress-plugin-demo-block__show-link"):a.classList.remove("vuepress-plugin-demo-block__show-link"),e.dataset.isExpand=i?"1":"0"}var As={mounted:function(){window.$VUEPRESS_DEMO_BLOCK={jsfiddle:!1,codepen:!0,horizontal:!1},Ts()},updated:function(){Ts()}},Ss=(t(230),"auto"),js="zoom-in",Is="zoom-out",zs="grab",Cs="move";function Bs(e,n,t){var a=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],i={passive:!1};a?e.addEventListener(n,t,i):e.removeEventListener(n,t,i)}function Ps(e,n){if(e){var t=new Image;t.onload=function(){n&&n(t)},t.src=e}}function Ls(e){return e.dataset.original?e.dataset.original:"A"===e.parentNode.tagName?e.parentNode.getAttribute("href"):null}function Js(e,n,t){!function(e){var n=Os,t=_s;if(e.transition){var a=e.transition;delete e.transition,e[n]=a}if(e.transform){var i=e.transform;delete e.transform,e[t]=i}}(n);var a=e.style,i={};for(var o in n)t&&(i[o]=a[o]||""),a[o]=n[o];return i}var Os="transition",_s="transform",Fs="transform",Ds="transitionend";var qs=function(){},Hs={enableGrab:!0,preloadImage:!1,closeOnWindowResize:!0,transitionDuration:.4,transitionTimingFunction:"cubic-bezier(0.4, 0, 0, 1)",bgColor:"rgb(255, 255, 255)",bgOpacity:1,scaleBase:1,scaleExtra:.5,scrollThreshold:40,zIndex:998,customSize:null,onOpen:qs,onClose:qs,onGrab:qs,onMove:qs,onRelease:qs,onBeforeOpen:qs,onBeforeClose:qs,onBeforeGrab:qs,onBeforeRelease:qs,onImageLoading:qs,onImageLoaded:qs},Ms={init:function(e){var n,t;n=this,t=e,Object.getOwnPropertyNames(Object.getPrototypeOf(n)).forEach((function(e){n[e]=n[e].bind(t)}))},click:function(e){if(e.preventDefault(),Ns(e))return window.open(this.target.srcOriginal||e.currentTarget.src,"_blank");this.shown?this.released?this.close():this.release():this.open(e.currentTarget)},scroll:function(){var e=document.documentElement||document.body.parentNode||document.body,n=window.pageXOffset||e.scrollLeft,t=window.pageYOffset||e.scrollTop;null===this.lastScrollPosition&&(this.lastScrollPosition={x:n,y:t});var a=this.lastScrollPosition.x-n,i=this.lastScrollPosition.y-t,o=this.options.scrollThreshold;(Math.abs(i)>=o||Math.abs(a)>=o)&&(this.lastScrollPosition=null,this.close())},keydown:function(e){(function(e){return"Escape"===(e.key||e.code)||27===e.keyCode})(e)&&(this.released?this.close():this.release(this.close))},mousedown:function(e){if(Us(e)&&!Ns(e)){e.preventDefault();var n=e.clientX,t=e.clientY;this.pressTimer=setTimeout(function(){this.grab(n,t)}.bind(this),200)}},mousemove:function(e){this.released||this.move(e.clientX,e.clientY)},mouseup:function(e){Us(e)&&!Ns(e)&&(clearTimeout(this.pressTimer),this.released?this.close():this.release())},touchstart:function(e){e.preventDefault();var n=e.touches[0],t=n.clientX,a=n.clientY;this.pressTimer=setTimeout(function(){this.grab(t,a)}.bind(this),200)},touchmove:function(e){if(!this.released){var n=e.touches[0],t=n.clientX,a=n.clientY;this.move(t,a)}},touchend:function(e){(function(e){e.targetTouches.length})(e)||(clearTimeout(this.pressTimer),this.released?this.close():this.release())},clickOverlay:function(){this.close()},resizeWindow:function(){this.close()}};function Us(e){return 0===e.button}function Ns(e){return e.metaKey||e.ctrlKey}var Rs={init:function(e){this.el=document.createElement("div"),this.instance=e,this.parent=document.body,Js(this.el,{position:"fixed",top:0,left:0,right:0,bottom:0,opacity:0}),this.updateStyle(e.options),Bs(this.el,"click",e.handler.clickOverlay.bind(e))},updateStyle:function(e){Js(this.el,{zIndex:e.zIndex,backgroundColor:e.bgColor,transition:"opacity\n        "+e.transitionDuration+"s\n        "+e.transitionTimingFunction})},insert:function(){this.parent.appendChild(this.el)},remove:function(){this.parent.removeChild(this.el)},fadeIn:function(){this.el.offsetWidth,this.el.style.opacity=this.instance.options.bgOpacity},fadeOut:function(){this.el.style.opacity=0}},Ws="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Gs=function(){function e(e,n){for(var t=0;t<n.length;t++){var a=n[t];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(n,t,a){return t&&e(n.prototype,t),a&&e(n,a),n}}(),$s=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e},Qs={init:function(e,n){this.el=e,this.instance=n,this.srcThumbnail=this.el.getAttribute("src"),this.srcset=this.el.getAttribute("srcset"),this.srcOriginal=Ls(this.el),this.rect=this.el.getBoundingClientRect(),this.translate=null,this.scale=null,this.styleOpen=null,this.styleClose=null},zoomIn:function(){var e=this.instance.options,n=e.zIndex,t=e.enableGrab,a=e.transitionDuration,i=e.transitionTimingFunction;this.translate=this.calculateTranslate(),this.scale=this.calculateScale(),this.styleOpen={position:"relative",zIndex:n+1,cursor:t?zs:Is,transition:Fs+"\n        "+a+"s\n        "+i,transform:"translate3d("+this.translate.x+"px, "+this.translate.y+"px, 0px)\n        scale("+this.scale.x+","+this.scale.y+")",height:this.rect.height+"px",width:this.rect.width+"px"},this.el.offsetWidth,this.styleClose=Js(this.el,this.styleOpen,!0)},zoomOut:function(){this.el.offsetWidth,Js(this.el,{transform:"none"})},grab:function(e,n,t){var a=Vs(),i=a.x-e,o=a.y-n;Js(this.el,{cursor:Cs,transform:"translate3d(\n        "+(this.translate.x+i)+"px, "+(this.translate.y+o)+"px, 0px)\n        scale("+(this.scale.x+t)+","+(this.scale.y+t)+")"})},move:function(e,n,t){var a=Vs(),i=a.x-e,o=a.y-n;Js(this.el,{transition:Fs,transform:"translate3d(\n        "+(this.translate.x+i)+"px, "+(this.translate.y+o)+"px, 0px)\n        scale("+(this.scale.x+t)+","+(this.scale.y+t)+")"})},restoreCloseStyle:function(){Js(this.el,this.styleClose)},restoreOpenStyle:function(){Js(this.el,this.styleOpen)},upgradeSource:function(){if(this.srcOriginal){var e=this.el.parentNode;this.srcset&&this.el.removeAttribute("srcset");var n=this.el.cloneNode(!1);n.setAttribute("src",this.srcOriginal),n.style.position="fixed",n.style.visibility="hidden",e.appendChild(n),setTimeout(function(){this.el.setAttribute("src",this.srcOriginal),e.removeChild(n)}.bind(this),50)}},downgradeSource:function(){this.srcOriginal&&(this.srcset&&this.el.setAttribute("srcset",this.srcset),this.el.setAttribute("src",this.srcThumbnail))},calculateTranslate:function(){var e=Vs(),n=this.rect.left+this.rect.width/2,t=this.rect.top+this.rect.height/2;return{x:e.x-n,y:e.y-t}},calculateScale:function(){var e=this.el.dataset,n=e.zoomingHeight,t=e.zoomingWidth,a=this.instance.options,i=a.customSize,o=a.scaleBase;if(!i&&n&&t)return{x:t/this.rect.width,y:n/this.rect.height};if(i&&"object"===(void 0===i?"undefined":Ws(i)))return{x:i.width/this.rect.width,y:i.height/this.rect.height};var r=this.rect.width/2,s=this.rect.height/2,l=Vs(),c={x:l.x-r,y:l.y-s},h=c.x/r,d=c.y/s,u=o+Math.min(h,d);if(i&&"string"==typeof i){var m=t||this.el.naturalWidth,p=n||this.el.naturalHeight,g=parseFloat(i)*m/(100*this.rect.width),f=parseFloat(i)*p/(100*this.rect.height);if(u>g||u>f)return{x:g,y:f}}return{x:u,y:u}}};function Vs(){var e=document.documentElement;return{x:Math.min(e.clientWidth,window.innerWidth)/2,y:Math.min(e.clientHeight,window.innerHeight)/2}}function Ys(e,n,t){["mousedown","mousemove","mouseup","touchstart","touchmove","touchend"].forEach((function(a){Bs(e,a,n[a],t)}))}var Zs=function(){function e(n){!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,e),this.target=Object.create(Qs),this.overlay=Object.create(Rs),this.handler=Object.create(Ms),this.body=document.body,this.shown=!1,this.lock=!1,this.released=!0,this.lastScrollPosition=null,this.pressTimer=null,this.options=$s({},Hs,n),this.overlay.init(this),this.handler.init(this)}return Gs(e,[{key:"listen",value:function(e){if("string"==typeof e)for(var n=document.querySelectorAll(e),t=n.length;t--;)this.listen(n[t]);else"IMG"===e.tagName&&(e.style.cursor=js,Bs(e,"click",this.handler.click),this.options.preloadImage&&Ps(Ls(e)));return this}},{key:"config",value:function(e){return e?($s(this.options,e),this.overlay.updateStyle(this.options),this):this.options}},{key:"open",value:function(e){var n=this,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.options.onOpen;if(!this.shown&&!this.lock){var a="string"==typeof e?document.querySelector(e):e;if("IMG"===a.tagName){if(this.options.onBeforeOpen(a),this.target.init(a,this),!this.options.preloadImage){var i=this.target.srcOriginal;null!=i&&(this.options.onImageLoading(a),Ps(i,this.options.onImageLoaded))}this.shown=!0,this.lock=!0,this.target.zoomIn(),this.overlay.insert(),this.overlay.fadeIn(),Bs(document,"scroll",this.handler.scroll),Bs(document,"keydown",this.handler.keydown),this.options.closeOnWindowResize&&Bs(window,"resize",this.handler.resizeWindow);var o=function e(){Bs(a,Ds,e,!1),n.lock=!1,n.target.upgradeSource(),n.options.enableGrab&&Ys(document,n.handler,!0),t(a)};return Bs(a,Ds,o),this}}}},{key:"close",value:function(){var e=this,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.options.onClose;if(this.shown&&!this.lock){var t=this.target.el;this.options.onBeforeClose(t),this.lock=!0,this.body.style.cursor=Ss,this.overlay.fadeOut(),this.target.zoomOut(),Bs(document,"scroll",this.handler.scroll,!1),Bs(document,"keydown",this.handler.keydown,!1),this.options.closeOnWindowResize&&Bs(window,"resize",this.handler.resizeWindow,!1);var a=function a(){Bs(t,Ds,a,!1),e.shown=!1,e.lock=!1,e.target.downgradeSource(),e.options.enableGrab&&Ys(document,e.handler,!1),e.target.restoreCloseStyle(),e.overlay.remove(),n(t)};return Bs(t,Ds,a),this}}},{key:"grab",value:function(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.options.scaleExtra,a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:this.options.onGrab;if(this.shown&&!this.lock){var i=this.target.el;this.options.onBeforeGrab(i),this.released=!1,this.target.grab(e,n,t);var o=function e(){Bs(i,Ds,e,!1),a(i)};return Bs(i,Ds,o),this}}},{key:"move",value:function(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.options.scaleExtra,a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:this.options.onMove;if(this.shown&&!this.lock){this.released=!1,this.body.style.cursor=Cs,this.target.move(e,n,t);var i=this.target.el,o=function e(){Bs(i,Ds,e,!1),a(i)};return Bs(i,Ds,o),this}}},{key:"release",value:function(){var e=this,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.options.onRelease;if(this.shown&&!this.lock){var t=this.target.el;this.options.onBeforeRelease(t),this.lock=!0,this.body.style.cursor=Ss,this.target.restoreOpenStyle();var a=function a(){Bs(t,Ds,a,!1),e.lock=!1,e.released=!0,n(t)};return Bs(t,Ds,a),this}}}]),e}(),Ks=".theme-vdoing-content img:not(.no-zoom)",Xs=JSON.parse('{"bgColor":"rgba(0,0,0,0.6)"}'),el=Number("500"),nl=function(){function e(){cs(this,e),this.instance=new Zs(Xs)}return ds(e,[{key:"update",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Ks;"undefined"!=typeof window&&this.instance.listen(e)}},{key:"updateDelay",value:function(){var e=this,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Ks,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:el;setTimeout((function(){return e.update(n)}),t)}}]),e}(),tl=[Xr,os,ls,ms,As,{watch:{"$page.path":function(){void 0!==this.$vuepress.zooming&&this.$vuepress.zooming.updateDelay()}},mounted:function(){this.$vuepress.zooming=new nl,this.$vuepress.zooming.updateDelay()}}],al={name:"GlobalLayout",computed:{layout:function(){var e=this.getLayout();return $r("layout",e),Li.component(e)}},methods:{getLayout:function(){if(this.$page.path){var e=this.$page.frontmatter.layout;return e&&(this.$vuepress.getLayoutAsyncComponent(e)||this.$vuepress.getVueComponent(e))?e:"Layout"}return"NotFound"}}},il=t(21),ol=Object(il.a)(al,(function(){var e=this.$createElement;return(this._self._c||e)(this.layout,{tag:"component"})}),[],!1,null,null,null).exports;!function(e,n,t){var a;switch(n){case"components":e[n]||(e[n]={}),Object.assign(e[n],t);break;case"mixins":e[n]||(e[n]=[]),(a=e[n]).push.apply(a,Object(jr.a)(t));break;default:throw new Error("Unknown option name.")}}(ol,"mixins",tl);var rl=[{name:"v-3df72aee",path:"/Java/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-3df72aee").then(t)}},{path:"/Java/index.html",redirect:"/Java/"},{path:"/00.目录页/01.Java.html",redirect:"/Java/"},{name:"v-53e957a5",path:"/english/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-53e957a5").then(t)}},{path:"/english/index.html",redirect:"/english/"},{path:"/00.目录页/05.英语.html",redirect:"/english/"},{name:"v-60f187e4",path:"/mysql/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-60f187e4").then(t)}},{path:"/mysql/index.html",redirect:"/mysql/"},{path:"/00.目录页/02.MySQL.html",redirect:"/mysql/"},{name:"v-b3f3e478",path:"/linux/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-b3f3e478").then(t)}},{path:"/linux/index.html",redirect:"/linux/"},{path:"/00.目录页/03.Linux.html",redirect:"/linux/"},{name:"v-62aae746",path:"/technology/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-62aae746").then(t)}},{path:"/technology/index.html",redirect:"/technology/"},{path:"/00.目录页/04.技术.html",redirect:"/technology/"},{name:"v-86f40b6c",path:"/record/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-86f40b6c").then(t)}},{path:"/record/index.html",redirect:"/record/"},{path:"/00.目录页/06.记录.html",redirect:"/record/"},{name:"v-5092d7cd",path:"/more/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-5092d7cd").then(t)}},{path:"/more/index.html",redirect:"/more/"},{path:"/00.目录页/07.更多.html",redirect:"/more/"},{name:"v-145d67ee",path:"/pages/73dc48/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-145d67ee").then(t)}},{path:"/pages/73dc48/index.html",redirect:"/pages/73dc48/"},{path:"/01.Java/01.Hyperskill - Java/01.Java basic/00.Theory：Scanning the input.html",redirect:"/pages/73dc48/"},{name:"v-6fd7a454",path:"/pages/e69669/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-6fd7a454").then(t)}},{path:"/pages/e69669/index.html",redirect:"/pages/e69669/"},{path:"/01.Java/01.Hyperskill - Java/01.Java basic/01.Theory：Arithmetic operations.html",redirect:"/pages/e69669/"},{name:"v-5968f740",path:"/pages/1546f6/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-5968f740").then(t)}},{path:"/pages/1546f6/index.html",redirect:"/pages/1546f6/"},{path:"/01.Java/01.Hyperskill - Java/01.Java basic/05.Theory：Ternary operator.html",redirect:"/pages/1546f6/"},{name:"v-5e17d186",path:"/pages/298220/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-5e17d186").then(t)}},{path:"/pages/298220/index.html",redirect:"/pages/298220/"},{path:"/01.Java/01.Hyperskill - Java/01.Java basic/04.Theory：Relational operators.html",redirect:"/pages/298220/"},{name:"v-1588f37d",path:"/pages/d22131/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-1588f37d").then(t)}},{path:"/pages/d22131/index.html",redirect:"/pages/d22131/"},{path:"/01.Java/01.Hyperskill - Java/01.Java basic/06.Theory：The while and do-while loops.html",redirect:"/pages/d22131/"},{name:"v-6791dec0",path:"/pages/4e67a4/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-6791dec0").then(t)}},{path:"/pages/4e67a4/index.html",redirect:"/pages/4e67a4/"},{path:"/01.Java/01.Hyperskill - Java/01.Java basic/07.Theory：Branching statements.html",redirect:"/pages/4e67a4/"},{name:"v-69d2555a",path:"/pages/a7b5a4/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-69d2555a").then(t)}},{path:"/pages/a7b5a4/index.html",redirect:"/pages/a7b5a4/"},{path:"/01.Java/01.Hyperskill - Java/01.Java basic/03.Theory：Increment and decrement.html",redirect:"/pages/a7b5a4/"},{name:"v-f087bd4c",path:"/pages/7d5da8/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-f087bd4c").then(t)}},{path:"/pages/7d5da8/index.html",redirect:"/pages/7d5da8/"},{path:"/01.Java/01.Hyperskill - Java/01.Java basic/02.Theory：Integer types and operations.html",redirect:"/pages/7d5da8/"},{name:"v-0ab66e7a",path:"/pages/2c54b1/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-0ab66e7a").then(t)}},{path:"/pages/2c54b1/index.html",redirect:"/pages/2c54b1/"},{path:"/01.Java/01.Hyperskill - Java/01.Java basic/09.Theory：String.html",redirect:"/pages/2c54b1/"},{name:"v-5a5f8cdc",path:"/pages/486714/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-5a5f8cdc").then(t)}},{path:"/pages/486714/index.html",redirect:"/pages/486714/"},{path:"/01.Java/01.Hyperskill - Java/01.Java basic/10.Theory：Boolean and logical operators.html",redirect:"/pages/486714/"},{name:"v-f35d9f7a",path:"/pages/69787a/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-f35d9f7a").then(t)}},{path:"/pages/69787a/index.html",redirect:"/pages/69787a/"},{path:"/01.Java/01.Hyperskill - Java/01.Java basic/08.Theory：Characters.html",redirect:"/pages/69787a/"},{name:"v-1928ce46",path:"/pages/0aee0c/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-1928ce46").then(t)}},{path:"/pages/0aee0c/index.html",redirect:"/pages/0aee0c/"},{path:"/01.Java/01.Hyperskill - Java/01.Java basic/12.Theory：Switch statement.html",redirect:"/pages/0aee0c/"},{name:"v-0e7e1f9d",path:"/pages/90c5f6/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-0e7e1f9d").then(t)}},{path:"/pages/90c5f6/index.html",redirect:"/pages/90c5f6/"},{path:"/01.Java/01.Hyperskill - Java/01.Java basic/13.Theory：Declaring a method.html",redirect:"/pages/90c5f6/"},{name:"v-573f69f5",path:"/pages/49c354/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-573f69f5").then(t)}},{path:"/pages/49c354/index.html",redirect:"/pages/49c354/"},{path:"/01.Java/01.Hyperskill - Java/01.Java basic/18.Theory：The main method.html",redirect:"/pages/49c354/"},{name:"v-2b0e2026",path:"/pages/9f6278/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-2b0e2026").then(t)}},{path:"/pages/9f6278/index.html",redirect:"/pages/9f6278/"},{path:"/01.Java/01.Hyperskill - Java/01.Java basic/19.Theory：Type casting.html",redirect:"/pages/9f6278/"},{name:"v-8fe997c6",path:"/pages/1266f4/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-8fe997c6").then(t)}},{path:"/pages/1266f4/index.html",redirect:"/pages/1266f4/"},{path:"/01.Java/01.Hyperskill - Java/01.Java basic/11.Theory：Sizes and ranges.html",redirect:"/pages/1266f4/"},{name:"v-d0785a8c",path:"/pages/577f0d/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-d0785a8c").then(t)}},{path:"/pages/577f0d/index.html",redirect:"/pages/577f0d/"},{path:"/01.Java/01.Hyperskill - Java/01.Java basic/20.Theory：Primitive and reference types.html",redirect:"/pages/577f0d/"},{name:"v-5979dd85",path:"/pages/8da0ec/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-5979dd85").then(t)}},{path:"/pages/8da0ec/index.html",redirect:"/pages/8da0ec/"},{path:"/01.Java/01.Hyperskill - Java/01.Java basic/21.Theory：Array.html",redirect:"/pages/8da0ec/"},{name:"v-6a060ba3",path:"/pages/ffede0/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-6a060ba3").then(t)}},{path:"/pages/ffede0/index.html",redirect:"/pages/ffede0/"},{path:"/01.Java/01.Hyperskill - Java/01.Java basic/22.Theory：Arrays as parameters.html",redirect:"/pages/ffede0/"},{name:"v-5d2edda6",path:"/pages/19feb9/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-5d2edda6").then(t)}},{path:"/pages/19feb9/index.html",redirect:"/pages/19feb9/"},{path:"/01.Java/01.Hyperskill - Java/01.Java basic/24.Theory：Multidimensional array.html",redirect:"/pages/19feb9/"},{name:"v-1f417e61",path:"/pages/0b3cf5/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-1f417e61").then(t)}},{path:"/pages/0b3cf5/index.html",redirect:"/pages/0b3cf5/"},{path:"/01.Java/01.Hyperskill - Java/01.Java basic/23.Theory：Iterating over arrays.html",redirect:"/pages/0b3cf5/"},{name:"v-519a112a",path:"/pages/694b24/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-519a112a").then(t)}},{path:"/pages/694b24/index.html",redirect:"/pages/694b24/"},{path:"/01.Java/01.Hyperskill - Java/01.Java basic/26.Theory：Final variables.html",redirect:"/pages/694b24/"},{name:"v-695cc5c6",path:"/pages/98e983/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-695cc5c6").then(t)}},{path:"/pages/98e983/index.html",redirect:"/pages/98e983/"},{path:"/01.Java/01.Hyperskill - Java/02.Java OOP/32.Theory：Defining classes.html",redirect:"/pages/98e983/"},{name:"v-14b00586",path:"/pages/732103/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-14b00586").then(t)}},{path:"/pages/732103/index.html",redirect:"/pages/732103/"},{path:"/01.Java/01.Hyperskill - Java/02.Java OOP/33.Theory：Instance methods.html",redirect:"/pages/732103/"},{name:"v-322e1d2d",path:"/pages/616a21/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-322e1d2d").then(t)}},{path:"/pages/616a21/index.html",redirect:"/pages/616a21/"},{path:"/01.Java/01.Hyperskill - Java/02.Java OOP/34.Thoery：Constructor.html",redirect:"/pages/616a21/"},{name:"v-627480ef",path:"/pages/d4be91/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-627480ef").then(t)}},{path:"/pages/d4be91/index.html",redirect:"/pages/d4be91/"},{path:"/01.Java/01.Hyperskill - Java/02.Java OOP/35.Theory：Package.html",redirect:"/pages/d4be91/"},{name:"v-877c8074",path:"/pages/9847c1/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-877c8074").then(t)}},{path:"/pages/9847c1/index.html",redirect:"/pages/9847c1/"},{path:"/01.Java/01.Hyperskill - Java/02.Java OOP/36.Theory：Access modifiers.html",redirect:"/pages/9847c1/"},{name:"v-701b9342",path:"/pages/467f35/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-701b9342").then(t)}},{path:"/pages/467f35/index.html",redirect:"/pages/467f35/"},{path:"/01.Java/01.Hyperskill - Java/02.Java OOP/37.Theory：Getters and setters.html",redirect:"/pages/467f35/"},{name:"v-d430be26",path:"/pages/249060/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-d430be26").then(t)}},{path:"/pages/249060/index.html",redirect:"/pages/249060/"},{path:"/01.Java/01.Hyperskill - Java/02.Java OOP/38.Theory：Inheritance.html",redirect:"/pages/249060/"},{name:"v-4d919234",path:"/pages/af043d/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-4d919234").then(t)}},{path:"/pages/af043d/index.html",redirect:"/pages/af043d/"},{path:"/01.Java/01.Hyperskill - Java/02.Java OOP/31.Theory：Introduction OOP.html",redirect:"/pages/af043d/"},{name:"v-67786560",path:"/pages/545cfc/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-67786560").then(t)}},{path:"/pages/545cfc/index.html",redirect:"/pages/545cfc/"},{path:"/01.Java/01.Hyperskill - Java/02.Java OOP/39.Theory：Protected modifier.html",redirect:"/pages/545cfc/"},{name:"v-a983fefa",path:"/pages/15dcd2/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-a983fefa").then(t)}},{path:"/pages/15dcd2/index.html",redirect:"/pages/15dcd2/"},{path:"/01.Java/01.Hyperskill - Java/02.Java OOP/40.Theory：Referencing subclass objects.html",redirect:"/pages/15dcd2/"},{name:"v-09b4fe23",path:"/pages/bac11b/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-09b4fe23").then(t)}},{path:"/pages/bac11b/index.html",redirect:"/pages/bac11b/"},{path:"/01.Java/01.Hyperskill - Java/02.Java OOP/41.Theory：The Object class.html",redirect:"/pages/bac11b/"},{name:"v-2b5996fa",path:"/pages/a19dfb/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-2b5996fa").then(t)}},{path:"/pages/a19dfb/index.html",redirect:"/pages/a19dfb/"},{path:"/01.Java/01.Hyperskill - Java/02.Java OOP/43.Theory：Interface.html",redirect:"/pages/a19dfb/"},{name:"v-20bd447c",path:"/pages/3e6dad/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-20bd447c").then(t)}},{path:"/pages/3e6dad/index.html",redirect:"/pages/3e6dad/"},{path:"/01.Java/01.Hyperskill - Java/02.Java OOP/44.Theory：Multiple constructors.html",redirect:"/pages/3e6dad/"},{name:"v-b65c8756",path:"/pages/aac9a9/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-b65c8756").then(t)}},{path:"/pages/aac9a9/index.html",redirect:"/pages/aac9a9/"},{path:"/01.Java/01.Hyperskill - Java/02.Java OOP/45.Theory：The keyword super.html",redirect:"/pages/aac9a9/"},{name:"v-899877ea",path:"/pages/a7716b/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-899877ea").then(t)}},{path:"/pages/a7716b/index.html",redirect:"/pages/a7716b/"},{path:"/01.Java/01.Hyperskill - Java/02.Java OOP/42.Theory：Objects.html",redirect:"/pages/a7716b/"},{name:"v-2698ee46",path:"/pages/2f6bd1/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-2698ee46").then(t)}},{path:"/pages/2f6bd1/index.html",redirect:"/pages/2f6bd1/"},{path:"/01.Java/01.Hyperskill - Java/02.Java OOP/46.Theory：Static members.html",redirect:"/pages/2f6bd1/"},{name:"v-ba2ec8da",path:"/pages/2e30c6/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-ba2ec8da").then(t)}},{path:"/pages/2e30c6/index.html",redirect:"/pages/2e30c6/"},{path:"/01.Java/01.Hyperskill - Java/02.Java OOP/48.Theory：Hiding and overriding.html",redirect:"/pages/2e30c6/"},{name:"v-133fb8e3",path:"/pages/8cec9b/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-133fb8e3").then(t)}},{path:"/pages/8cec9b/index.html",redirect:"/pages/8cec9b/"},{path:"/01.Java/01.Hyperskill - Java/02.Java OOP/49.Theory：Polymorphism.html",redirect:"/pages/8cec9b/"},{name:"v-150807c6",path:"/pages/6795a3/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-150807c6").then(t)}},{path:"/pages/6795a3/index.html",redirect:"/pages/6795a3/"},{path:"/01.Java/01.Hyperskill - Java/02.Java OOP/50.Theory：Abstract class.html",redirect:"/pages/6795a3/"},{name:"v-4818b098",path:"/pages/30c559/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-4818b098").then(t)}},{path:"/pages/30c559/index.html",redirect:"/pages/30c559/"},{path:"/01.Java/01.Hyperskill - Java/02.Java OOP/51.Theory：Abstract class vs interface.html",redirect:"/pages/30c559/"},{name:"v-1fb0df4e",path:"/pages/41d175/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-1fb0df4e").then(t)}},{path:"/pages/41d175/index.html",redirect:"/pages/41d175/"},{path:"/01.Java/01.Hyperskill - Java/02.Java OOP/52.Theory：Anonymous classes.html",redirect:"/pages/41d175/"},{name:"v-49add558",path:"/pages/a15ec2/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-49add558").then(t)}},{path:"/pages/a15ec2/index.html",redirect:"/pages/a15ec2/"},{path:"/01.Java/01.Hyperskill - Java/03.应知/100.Theory：Immutability.html",redirect:"/pages/a15ec2/"},{name:"v-4efe5bbc",path:"/pages/2efd30/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-4efe5bbc").then(t)}},{path:"/pages/2efd30/index.html",redirect:"/pages/2efd30/"},{path:"/01.Java/01.Hyperskill - Java/03.应知/101.Theory：Boxing and unboxing.html",redirect:"/pages/2efd30/"},{name:"v-ec3730c6",path:"/pages/d95243/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-ec3730c6").then(t)}},{path:"/pages/d95243/index.html",redirect:"/pages/d95243/"},{path:"/01.Java/01.Hyperskill - Java/02.Java OOP/53.Theory：Anonymous classes properties.html",redirect:"/pages/d95243/"},{name:"v-6345c5cb",path:"/pages/c7945c/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-6345c5cb").then(t)}},{path:"/pages/c7945c/index.html",redirect:"/pages/c7945c/"},{path:"/01.Java/01.Hyperskill - Java/03.应知/102.Theory：Introduction to generic programming.html",redirect:"/pages/c7945c/"},{name:"v-8524be88",path:"/pages/79c741/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-8524be88").then(t)}},{path:"/pages/79c741/index.html",redirect:"/pages/79c741/"},{path:"/01.Java/01.Hyperskill - Java/03.应知/104.Theory：What are collections.html",redirect:"/pages/79c741/"},{name:"v-68880222",path:"/pages/47e30b/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-68880222").then(t)}},{path:"/pages/47e30b/index.html",redirect:"/pages/47e30b/"},{path:"/01.Java/01.Hyperskill - Java/03.应知/103.Theory：Generics and Object.html",redirect:"/pages/47e30b/"},{name:"v-18dc29fb",path:"/pages/f03390/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-18dc29fb").then(t)}},{path:"/pages/f03390/index.html",redirect:"/pages/f03390/"},{path:"/01.Java/01.Hyperskill - Java/03.应知/105.Theory：The collections Framework overview.html",redirect:"/pages/f03390/"},{name:"v-14d43fa8",path:"/pages/0d095f/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-14d43fa8").then(t)}},{path:"/pages/0d095f/index.html",redirect:"/pages/0d095f/"},{path:"/01.Java/01.Hyperskill - Java/03.应知/106.Theory：ArrayList.html",redirect:"/pages/0d095f/"},{name:"v-67fed644",path:"/pages/0d55d4/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-67fed644").then(t)}},{path:"/pages/0d55d4/index.html",redirect:"/pages/0d55d4/"},{path:"/01.Java/01.Hyperskill - Java/03.应知/107.Theory：The List interface.html",redirect:"/pages/0d55d4/"},{name:"v-2c8ff494",path:"/pages/03f897/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-2c8ff494").then(t)}},{path:"/pages/03f897/index.html",redirect:"/pages/03f897/"},{path:"/01.Java/01.Hyperskill - Java/03.应知/108.Theory：Comparable.html",redirect:"/pages/03f897/"},{name:"v-6952ef1f",path:"/pages/78c165/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-6952ef1f").then(t)}},{path:"/pages/78c165/index.html",redirect:"/pages/78c165/"},{path:"/01.Java/01.Hyperskill - Java/03.应知/109.Theory：Processing strings.html",redirect:"/pages/78c165/"},{name:"v-0dab8476",path:"/pages/827871/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-0dab8476").then(t)}},{path:"/pages/827871/index.html",redirect:"/pages/827871/"},{path:"/01.Java/01.Hyperskill - Java/03.应知/110.Theory：Initialization blocks.html",redirect:"/pages/827871/"},{name:"v-1345ef6a",path:"/pages/4b79aa/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-1345ef6a").then(t)}},{path:"/pages/4b79aa/index.html",redirect:"/pages/4b79aa/"},{path:"/01.Java/01.Hyperskill - Java/03.应知/112.Theory：Generic methods.html",redirect:"/pages/4b79aa/"},{name:"v-603e6248",path:"/pages/8dcfb6/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-603e6248").then(t)}},{path:"/pages/8dcfb6/index.html",redirect:"/pages/8dcfb6/"},{path:"/01.Java/01.Hyperskill - Java/03.应知/111.Theory：Introduction to API.html",redirect:"/pages/8dcfb6/"},{name:"v-4a3a6bd4",path:"/pages/6bc01b/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-4a3a6bd4").then(t)}},{path:"/pages/6bc01b/index.html",redirect:"/pages/6bc01b/"},{path:"/01.Java/01.Hyperskill - Java/03.应知/15.Theory：Paradigms.html",redirect:"/pages/6bc01b/"},{name:"v-4b6cd045",path:"/pages/591f82/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-4b6cd045").then(t)}},{path:"/pages/591f82/index.html",redirect:"/pages/591f82/"},{path:"/01.Java/01.Hyperskill - Java/03.应知/14.Theory：Functional decomposition.html",redirect:"/pages/591f82/"},{name:"v-fb918adc",path:"/pages/030e2b/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-fb918adc").then(t)}},{path:"/pages/030e2b/index.html",redirect:"/pages/030e2b/"},{path:"/01.Java/01.Hyperskill - Java/03.应知/25.Theory：Overloading.html",redirect:"/pages/030e2b/"},{name:"v-6141012d",path:"/pages/f9cc7c/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-6141012d").then(t)}},{path:"/pages/f9cc7c/index.html",redirect:"/pages/f9cc7c/"},{path:"/01.Java/01.Hyperskill - Java/03.应知/27.Theory：Write, compile, and run.html",redirect:"/pages/f9cc7c/"},{name:"v-8e2fd182",path:"/pages/2e50ec/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-8e2fd182").then(t)}},{path:"/pages/2e50ec/index.html",redirect:"/pages/2e50ec/"},{path:"/01.Java/01.Hyperskill - Java/03.应知/47.Theory：Annotations basics.html",redirect:"/pages/2e50ec/"},{name:"v-58374e5d",path:"/pages/d75f79/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-58374e5d").then(t)}},{path:"/pages/d75f79/index.html",redirect:"/pages/d75f79/"},{path:"/01.Java/01.Hyperskill - Java/03.应知/50.Theory：JVM, JRE, and JDK.html",redirect:"/pages/d75f79/"},{name:"v-34448c65",path:"/pages/df0a86/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-34448c65").then(t)}},{path:"/pages/df0a86/index.html",redirect:"/pages/df0a86/"},{path:"/01.Java/01.Hyperskill - Java/03.应知/53.Theory：Jave Archive.html",redirect:"/pages/df0a86/"},{name:"v-cebfecc8",path:"/pages/838d38/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-cebfecc8").then(t)}},{path:"/pages/838d38/index.html",redirect:"/pages/838d38/"},{path:"/01.Java/01.Hyperskill - Java/03.应知/90.Theory：Running programs on your computer.html",redirect:"/pages/838d38/"},{name:"v-35f418d8",path:"/pages/a7afdd/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-35f418d8").then(t)}},{path:"/pages/a7afdd/index.html",redirect:"/pages/a7afdd/"},{path:"/01.Java/01.Hyperskill - Java/03.应知/96.Theory：Enums in Java.html",redirect:"/pages/a7afdd/"},{name:"v-40e99d88",path:"/pages/342a00/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-40e99d88").then(t)}},{path:"/pages/342a00/index.html",redirect:"/pages/342a00/"},{path:"/01.Java/01.Hyperskill - Java/03.应知/97.Theory：Fields and methods in enum.html",redirect:"/pages/342a00/"},{name:"v-69a19b70",path:"/pages/4931da/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-69a19b70").then(t)}},{path:"/pages/4931da/index.html",redirect:"/pages/4931da/"},{path:"/01.Java/01.Hyperskill - Java/03.应知/99.Theory：StringBuilder.html",redirect:"/pages/4931da/"},{name:"v-79427016",path:"/pages/281194/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-79427016").then(t)}},{path:"/pages/281194/index.html",redirect:"/pages/281194/"},{path:"/01.Java/01.Hyperskill - Java/04.扩展/120.Theory：XML.html",redirect:"/pages/281194/"},{name:"v-149463ce",path:"/pages/40f52b/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-149463ce").then(t)}},{path:"/pages/40f52b/index.html",redirect:"/pages/40f52b/"},{path:"/01.Java/01.Hyperskill - Java/04.扩展/119.Theory：YAML.html",redirect:"/pages/40f52b/"},{name:"v-adbd0d2e",path:"/pages/31c36e/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-adbd0d2e").then(t)}},{path:"/pages/31c36e/index.html",redirect:"/pages/31c36e/"},{path:"/01.Java/01.Hyperskill - Java/04.扩展/121.Theory：JSON.html",redirect:"/pages/31c36e/"},{name:"v-2afd436f",path:"/pages/df27b6/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-2afd436f").then(t)}},{path:"/pages/df27b6/index.html",redirect:"/pages/df27b6/"},{path:"/01.Java/01.Hyperskill - Java/04.扩展/16.Theory：Units of information.html",redirect:"/pages/df27b6/"},{name:"v-0e3be9f1",path:"/pages/09aac1/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-0e3be9f1").then(t)}},{path:"/pages/09aac1/index.html",redirect:"/pages/09aac1/"},{path:"/01.Java/01.Hyperskill - Java/04.扩展/49.Theory：IDE.html",redirect:"/pages/09aac1/"},{name:"v-6522b1a2",path:"/pages/9cf6c9/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-6522b1a2").then(t)}},{path:"/pages/9cf6c9/index.html",redirect:"/pages/9cf6c9/"},{path:"/01.Java/01.Hyperskill - Java/04.扩展/50.Theory：IDEA.html",redirect:"/pages/9cf6c9/"},{name:"v-25aef1ae",path:"/pages/96307c/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-25aef1ae").then(t)}},{path:"/pages/96307c/index.html",redirect:"/pages/96307c/"},{path:"/01.Java/01.Hyperskill - Java/04.扩展/52.Theory：Operating systems.html",redirect:"/pages/96307c/"},{name:"v-f4fa39cc",path:"/pages/2392d7/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-f4fa39cc").then(t)}},{path:"/pages/2392d7/index.html",redirect:"/pages/2392d7/"},{path:"/01.Java/01.Hyperskill - Java/04.扩展/54.Theory：Gradle basics.html",redirect:"/pages/2392d7/"},{name:"v-6bcabb64",path:"/pages/d40e09/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-6bcabb64").then(t)}},{path:"/pages/d40e09/index.html",redirect:"/pages/d40e09/"},{path:"/01.Java/01.Hyperskill - Java/04.扩展/51.Theory：Build tools.html",redirect:"/pages/d40e09/"},{name:"v-d8a45364",path:"/pages/6a2c0f/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-d8a45364").then(t)}},{path:"/pages/6a2c0f/index.html",redirect:"/pages/6a2c0f/"},{path:"/01.Java/01.Hyperskill - Java/04.扩展/55.Theory：Basic project with Gradle.html",redirect:"/pages/6a2c0f/"},{name:"v-1acef428",path:"/pages/672585/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-1acef428").then(t)}},{path:"/pages/672585/index.html",redirect:"/pages/672585/"},{path:"/01.Java/01.Hyperskill - Java/04.扩展/56.Theory：Building apps using Gradle.html",redirect:"/pages/672585/"},{name:"v-4d30c4ec",path:"/pages/640a2b/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-4d30c4ec").then(t)}},{path:"/pages/640a2b/index.html",redirect:"/pages/640a2b/"},{path:"/01.Java/01.Hyperskill - Java/04.扩展/57.Theory：Dependency management.html",redirect:"/pages/640a2b/"},{name:"v-6b8ab12c",path:"/pages/0ae67e/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-6b8ab12c").then(t)}},{path:"/pages/0ae67e/index.html",redirect:"/pages/0ae67e/"},{path:"/01.Java/01.Hyperskill - Java/04.扩展/62.Theory：Formatted output.html",redirect:"/pages/0ae67e/"},{name:"v-0c983905",path:"/pages/9fd950/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-0c983905").then(t)}},{path:"/pages/9fd950/index.html",redirect:"/pages/9fd950/"},{path:"/01.Java/01.Hyperskill - Java/04.扩展/64.Theory：Libraries.html",redirect:"/pages/9fd950/"},{name:"v-636f026f",path:"/pages/a63654/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-636f026f").then(t)}},{path:"/pages/a63654/index.html",redirect:"/pages/a63654/"},{path:"/01.Java/01.Hyperskill - Java/04.扩展/65.Theory：Frameworks.html",redirect:"/pages/a63654/"},{name:"v-e577561a",path:"/pages/4a417a/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-e577561a").then(t)}},{path:"/pages/4a417a/index.html",redirect:"/pages/4a417a/"},{path:"/01.Java/01.Hyperskill - Java/04.扩展/69.Theory：Modules.html",redirect:"/pages/4a417a/"},{name:"v-641ea554",path:"/pages/8e174b/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-641ea554").then(t)}},{path:"/pages/8e174b/index.html",redirect:"/pages/8e174b/"},{path:"/01.Java/01.Hyperskill - Java/04.扩展/72.Theory：Introduction to software architecture.html",redirect:"/pages/8e174b/"},{name:"v-c1db8328",path:"/pages/db92b4/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-c1db8328").then(t)}},{path:"/pages/db92b4/index.html",redirect:"/pages/db92b4/"},{path:"/01.Java/01.Hyperskill - Java/04.扩展/74.Theory：Class Diagrams.html",redirect:"/pages/db92b4/"},{name:"v-221ce4d6",path:"/pages/ed16a5/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-221ce4d6").then(t)}},{path:"/pages/ed16a5/index.html",redirect:"/pages/ed16a5/"},{path:"/01.Java/01.Hyperskill - Java/04.扩展/80.Theory：Text blocks.html",redirect:"/pages/ed16a5/"},{name:"v-2a3868cc",path:"/pages/03b557/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-2a3868cc").then(t)}},{path:"/pages/03b557/index.html",redirect:"/pages/03b557/"},{path:"/01.Java/01.Hyperskill - Java/05.IO & Stream/91.Theory：Files.html",redirect:"/pages/03b557/"},{name:"v-4a301fef",path:"/pages/39305b/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-4a301fef").then(t)}},{path:"/pages/39305b/index.html",redirect:"/pages/39305b/"},{path:"/01.Java/01.Hyperskill - Java/05.IO & Stream/92.Theory：Writing files.html",redirect:"/pages/39305b/"},{name:"v-166a75b0",path:"/pages/0fced5/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-166a75b0").then(t)}},{path:"/pages/0fced5/index.html",redirect:"/pages/0fced5/"},{path:"/01.Java/01.Hyperskill - Java/05.IO & Stream/93.Theory：What are streams.html",redirect:"/pages/0fced5/"},{name:"v-77a4a72f",path:"/pages/3f7bd2/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-77a4a72f").then(t)}},{path:"/pages/3f7bd2/index.html",redirect:"/pages/3f7bd2/"},{path:"/01.Java/01.Hyperskill - Java/05.IO & Stream/94.Theory：Input streams.html",redirect:"/pages/3f7bd2/"},{name:"v-07a02de6",path:"/pages/5fc0af/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-07a02de6").then(t)}},{path:"/pages/5fc0af/index.html",redirect:"/pages/5fc0af/"},{path:"/01.Java/01.Hyperskill - Java/06.Error & Exception/28.Theory：Errors in programs.html",redirect:"/pages/5fc0af/"},{name:"v-7c9be7fc",path:"/pages/6a8e23/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-7c9be7fc").then(t)}},{path:"/pages/6a8e23/index.html",redirect:"/pages/6a8e23/"},{path:"/01.Java/01.Hyperskill - Java/05.IO & Stream/95.Theory：Try with resources.html",redirect:"/pages/6a8e23/"},{name:"v-2b671f36",path:"/pages/d2856b/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-2b671f36").then(t)}},{path:"/pages/d2856b/index.html",redirect:"/pages/d2856b/"},{path:"/01.Java/01.Hyperskill - Java/06.Error & Exception/29.Theory：What is an exception.html",redirect:"/pages/d2856b/"},{name:"v-7e83acb8",path:"/pages/ea4d00/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-7e83acb8").then(t)}},{path:"/pages/ea4d00/index.html",redirect:"/pages/ea4d00/"},{path:"/01.Java/01.Hyperskill - Java/06.Error & Exception/30.Theory：NPE.html",redirect:"/pages/ea4d00/"},{name:"v-6ea070cd",path:"/pages/0d673f/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-6ea070cd").then(t)}},{path:"/pages/0d673f/index.html",redirect:"/pages/0d673f/"},{path:"/01.Java/01.Hyperskill - Java/06.Error & Exception/61.Theory：Array exceptions.html",redirect:"/pages/0d673f/"},{name:"v-563ba650",path:"/pages/417817/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-563ba650").then(t)}},{path:"/pages/417817/index.html",redirect:"/pages/417817/"},{path:"/01.Java/01.Hyperskill - Java/06.Error & Exception/86.Theory：Hierarchy of exceptions.html",redirect:"/pages/417817/"},{name:"v-a3c26e56",path:"/pages/199a13/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-a3c26e56").then(t)}},{path:"/pages/199a13/index.html",redirect:"/pages/199a13/"},{path:"/01.Java/01.Hyperskill - Java/06.Error & Exception/88.Theory：Throwing exceptions.html",redirect:"/pages/199a13/"},{name:"v-acb0fba2",path:"/pages/49c884/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-acb0fba2").then(t)}},{path:"/pages/49c884/index.html",redirect:"/pages/49c884/"},{path:"/01.Java/01.Hyperskill - Java/06.Error & Exception/87.Theory：Exception Handling.html",redirect:"/pages/49c884/"},{name:"v-9f0c4862",path:"/pages/034c61/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-9f0c4862").then(t)}},{path:"/pages/034c61/index.html",redirect:"/pages/034c61/"},{path:"/01.Java/01.Hyperskill - Java/06.Error & Exception/89.Theory：Cutom exceptions.html",redirect:"/pages/034c61/"},{name:"v-39d535ca",path:"/pages/abd837/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-39d535ca").then(t)}},{path:"/pages/abd837/index.html",redirect:"/pages/abd837/"},{path:"/01.Java/01.Hyperskill - Java/06.Error & Exception/90.Theory：What is a bug.html",redirect:"/pages/abd837/"},{name:"v-52a40118",path:"/pages/de4d8b/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-52a40118").then(t)}},{path:"/pages/de4d8b/index.html",redirect:"/pages/de4d8b/"},{path:"/01.Java/01.Hyperskill - Java/06.Error & Exception/91.Theory：Introduction to logging.html",redirect:"/pages/de4d8b/"},{name:"v-56e1cd7d",path:"/pages/205b2f/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-56e1cd7d").then(t)}},{path:"/pages/205b2f/index.html",redirect:"/pages/205b2f/"},{path:"/01.Java/01.Hyperskill - Java/06.Error & Exception/92.Theory：Debugging techniques.html",redirect:"/pages/205b2f/"},{name:"v-3ac19be9",path:"/pages/b7e18f/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-3ac19be9").then(t)}},{path:"/pages/b7e18f/index.html",redirect:"/pages/b7e18f/"},{path:"/01.Java/01.Hyperskill - Java/07.Algorithm & Data structure/02.Theory：Pseudocode.html",redirect:"/pages/b7e18f/"},{name:"v-9816d7c8",path:"/pages/5276ce/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-9816d7c8").then(t)}},{path:"/pages/5276ce/index.html",redirect:"/pages/5276ce/"},{path:"/01.Java/01.Hyperskill - Java/07.Algorithm & Data structure/01.Theory：Computer algorithms.html",redirect:"/pages/5276ce/"},{name:"v-4b411184",path:"/pages/6ddab4/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-4b411184").then(t)}},{path:"/pages/6ddab4/index.html",redirect:"/pages/6ddab4/"},{path:"/01.Java/01.Hyperskill - Java/07.Algorithm & Data structure/03.Theory：Pseudocode basics.html",redirect:"/pages/6ddab4/"},{name:"v-33982f80",path:"/pages/4a7ac8/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-33982f80").then(t)}},{path:"/pages/4a7ac8/index.html",redirect:"/pages/4a7ac8/"},{path:"/01.Java/01.Hyperskill - Java/07.Algorithm & Data structure/05.Theory：The big O notation.html",redirect:"/pages/4a7ac8/"},{name:"v-77e3674a",path:"/pages/0e4b76/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-77e3674a").then(t)}},{path:"/pages/0e4b76/index.html",redirect:"/pages/0e4b76/"},{path:"/01.Java/01.Hyperskill - Java/07.Algorithm & Data structure/04.Theory：Complex constructions in pseudocode.html",redirect:"/pages/0e4b76/"},{name:"v-618c27e6",path:"/pages/df5f3e/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-618c27e6").then(t)}},{path:"/pages/df5f3e/index.html",redirect:"/pages/df5f3e/"},{path:"/01.Java/01.Hyperskill - Java/07.Algorithm & Data structure/06.Theory：Best, Average and cases.html",redirect:"/pages/df5f3e/"},{name:"v-13a7ac0e",path:"/pages/12da49/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-13a7ac0e").then(t)}},{path:"/pages/12da49/index.html",redirect:"/pages/12da49/"},{path:"/01.Java/01.Hyperskill - Java/07.Algorithm & Data structure/07.Theory：Data structures.html",redirect:"/pages/12da49/"},{name:"v-731d5ca8",path:"/pages/fb5342/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-731d5ca8").then(t)}},{path:"/pages/fb5342/index.html",redirect:"/pages/fb5342/"},{path:"/01.Java/01.Hyperskill - Java/07.Algorithm & Data structure/08.Theory：Fixed-size array.html",redirect:"/pages/fb5342/"},{name:"v-87c78268",path:"/pages/aa23cc/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-87c78268").then(t)}},{path:"/pages/aa23cc/index.html",redirect:"/pages/aa23cc/"},{path:"/01.Java/01.Hyperskill - Java/08.Design pattern/111.Theory：The concept of patterns.html",redirect:"/pages/aa23cc/"},{name:"v-4dbe4cb4",path:"/pages/0de0a4/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-4dbe4cb4").then(t)}},{path:"/pages/0de0a4/index.html",redirect:"/pages/0de0a4/"},{path:"/01.Java/01.Hyperskill - Java/07.Algorithm & Data structure/09.Theory：Dynamic array.html",redirect:"/pages/0de0a4/"},{name:"v-62ef8b86",path:"/pages/dd6ea7/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-62ef8b86").then(t)}},{path:"/pages/dd6ea7/index.html",redirect:"/pages/dd6ea7/"},{path:"/01.Java/01.Hyperskill - Java/08.Design pattern/112.Theory：Structural of design patterns.html",redirect:"/pages/dd6ea7/"},{name:"v-05a8a9ec",path:"/pages/3f60b7/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-05a8a9ec").then(t)}},{path:"/pages/3f60b7/index.html",redirect:"/pages/3f60b7/"},{path:"/01.Java/01.Hyperskill - Java/08.Design pattern/113.Theory：Decorator pattern.html",redirect:"/pages/3f60b7/"},{name:"v-6f71bd09",path:"/pages/c37d64/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-6f71bd09").then(t)}},{path:"/pages/c37d64/index.html",redirect:"/pages/c37d64/"},{path:"/01.Java/01.Hyperskill - Java/08.Design pattern/114.Theory：Decorator.html",redirect:"/pages/c37d64/"},{name:"v-01eae3de",path:"/pages/9453ab/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-01eae3de").then(t)}},{path:"/pages/9453ab/index.html",redirect:"/pages/9453ab/"},{path:"/01.Java/01.Hyperskill - Java/09.Web/59.Theory：HTTP.html",redirect:"/pages/9453ab/"},{name:"v-3d39fce6",path:"/pages/4b9292/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-3d39fce6").then(t)}},{path:"/pages/4b9292/index.html",redirect:"/pages/4b9292/"},{path:"/01.Java/01.Hyperskill - Java/09.Web/58.Theory：World Wide Web.html",redirect:"/pages/4b9292/"},{name:"v-33c35951",path:"/pages/e0c5ed/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-33c35951").then(t)}},{path:"/pages/e0c5ed/index.html",redirect:"/pages/e0c5ed/"},{path:"/01.Java/01.Hyperskill - Java/09.Web/63.Theory：HTTP URL.html",redirect:"/pages/e0c5ed/"},{name:"v-266ed7cf",path:"/pages/ec1dbf/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-266ed7cf").then(t)}},{path:"/pages/ec1dbf/index.html",redirect:"/pages/ec1dbf/"},{path:"/01.Java/01.Hyperskill - Java/09.Web/73.Theory：HTTP messages.html",redirect:"/pages/ec1dbf/"},{name:"v-5991209c",path:"/pages/26ab34/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-5991209c").then(t)}},{path:"/pages/26ab34/index.html",redirect:"/pages/26ab34/"},{path:"/01.Java/01.Hyperskill - Java/09.Web/75.Theory：MVC.html",redirect:"/pages/26ab34/"},{name:"v-dd2b4e64",path:"/pages/1ce665/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-dd2b4e64").then(t)}},{path:"/pages/1ce665/index.html",redirect:"/pages/1ce665/"},{path:"/01.Java/01.Hyperskill - Java/09.Web/77.Theory：REST.html",redirect:"/pages/1ce665/"},{name:"v-72a7516a",path:"/pages/3dd5e6/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-72a7516a").then(t)}},{path:"/pages/3dd5e6/index.html",redirect:"/pages/3dd5e6/"},{path:"/01.Java/01.Hyperskill - Java/09.Web/76.Theory：Introduction to Spring Web MVC.html",redirect:"/pages/3dd5e6/"},{name:"v-12969a92",path:"/pages/eca1b0/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-12969a92").then(t)}},{path:"/pages/eca1b0/index.html",redirect:"/pages/eca1b0/"},{path:"/01.Java/01.Hyperskill - Java/09.Web/78.Theory：Postman.html",redirect:"/pages/eca1b0/"},{name:"v-50c3ea8f",path:"/pages/8b4d60/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-50c3ea8f").then(t)}},{path:"/pages/8b4d60/index.html",redirect:"/pages/8b4d60/"},{path:"/01.Java/01.Hyperskill - Java/09.Web/79.Theory：Getting data from REST.html",redirect:"/pages/8b4d60/"},{name:"v-1a3113b2",path:"/pages/3e165c/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-1a3113b2").then(t)}},{path:"/pages/3e165c/index.html",redirect:"/pages/3e165c/"},{path:"/01.Java/01.Hyperskill - Java/09.Web/80.Theory：Posting and deleting data via REST.html",redirect:"/pages/3e165c/"},{name:"v-794c889c",path:"/pages/b3fe3b/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-794c889c").then(t)}},{path:"/pages/b3fe3b/index.html",redirect:"/pages/b3fe3b/"},{path:"/01.Java/01.Hyperskill - Java/09.Web/83.Theory：Domains.html",redirect:"/pages/b3fe3b/"},{name:"v-2f3f3a2c",path:"/pages/b2c958/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-2f3f3a2c").then(t)}},{path:"/pages/b2c958/index.html",redirect:"/pages/b2c958/"},{path:"/01.Java/01.Hyperskill - Java/09.Web/84.Theory：HTTP Basic Auth.html",redirect:"/pages/b2c958/"},{name:"v-b729a7e2",path:"/pages/84fe51/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-b729a7e2").then(t)}},{path:"/pages/84fe51/index.html",redirect:"/pages/84fe51/"},{path:"/01.Java/01.Hyperskill - Java/09.Web/82.Theory：Handling requests with bodies.html",redirect:"/pages/84fe51/"},{name:"v-6513cf24",path:"/pages/74e198/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-6513cf24").then(t)}},{path:"/pages/74e198/index.html",redirect:"/pages/74e198/"},{path:"/01.Java/01.Hyperskill - Java/09.Web/85.Theory：IP.html",redirect:"/pages/74e198/"},{name:"v-7fb24832",path:"/pages/697cc8/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-7fb24832").then(t)}},{path:"/pages/697cc8/index.html",redirect:"/pages/697cc8/"},{path:"/01.Java/01.Hyperskill - Java/09.Web/87.Theory：OAuth.html",redirect:"/pages/697cc8/"},{name:"v-1c33fda0",path:"/pages/69864a/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-1c33fda0").then(t)}},{path:"/pages/69864a/index.html",redirect:"/pages/69864a/"},{path:"/01.Java/01.Hyperskill - Java/09.Web/86.Theory：Authentication and Authorization.html",redirect:"/pages/69864a/"},{name:"v-79ebf50f",path:"/pages/5b7839/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-79ebf50f").then(t)}},{path:"/pages/5b7839/index.html",redirect:"/pages/5b7839/"},{path:"/01.Java/01.Hyperskill - Java/09.Web/88.Theory：Java 11 HTTP client.html",redirect:"/pages/5b7839/"},{name:"v-c59b78e8",path:"/pages/af1212/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-c59b78e8").then(t)}},{path:"/pages/af1212/index.html",redirect:"/pages/af1212/"},{path:"/01.Java/01.Hyperskill - Java/09.Web/81.Theory：REST Exception handling.html",redirect:"/pages/af1212/"},{name:"v-4b88402c",path:"/pages/310689/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-4b88402c").then(t)}},{path:"/pages/310689/index.html",redirect:"/pages/310689/"},{path:"/01.Java/01.Hyperskill - Java/10.Spring boot/66.Theory：Introduction to Spring boot.html",redirect:"/pages/310689/"},{name:"v-de63b316",path:"/pages/1862e3/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-de63b316").then(t)}},{path:"/pages/1862e3/index.html",redirect:"/pages/1862e3/"},{path:"/01.Java/01.Hyperskill - Java/10.Spring boot/68.Theory：Basic project structure.html",redirect:"/pages/1862e3/"},{name:"v-6be7a9da",path:"/pages/42710b/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-6be7a9da").then(t)}},{path:"/pages/42710b/index.html",redirect:"/pages/42710b/"},{path:"/01.Java/01.Hyperskill - Java/10.Spring boot/67.Theory：Getting started with Spring Boot.html",redirect:"/pages/42710b/"},{name:"v-13ca1252",path:"/pages/cbd821/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-13ca1252").then(t)}},{path:"/pages/cbd821/index.html",redirect:"/pages/cbd821/"},{path:"/01.Java/01.Hyperskill - Java/10.Spring boot/70.Theory：IoC container.html",redirect:"/pages/cbd821/"},{name:"v-5bd35776",path:"/pages/b04d58/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-5bd35776").then(t)}},{path:"/pages/b04d58/index.html",redirect:"/pages/b04d58/"},{path:"/01.Java/01.Hyperskill - Java/10.Spring boot/71.Theory：Spring beans.html",redirect:"/pages/b04d58/"},{name:"v-2487e57e",path:"/pages/dcd812/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-2487e57e").then(t)}},{path:"/pages/dcd812/index.html",redirect:"/pages/dcd812/"},{path:"/01.Java/03.练习题/01.选择题 & 填空题/03.What does the method print.html",redirect:"/pages/dcd812/"},{name:"v-b5868b80",path:"/pages/f5b04f/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-b5868b80").then(t)}},{path:"/pages/f5b04f/index.html",redirect:"/pages/f5b04f/"},{path:"/01.Java/03.练习题/01.选择题 & 填空题/05.Varargs method invocation.html",redirect:"/pages/f5b04f/"},{name:"v-72ce9c15",path:"/pages/a23fa8/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-72ce9c15").then(t)}},{path:"/pages/a23fa8/index.html",redirect:"/pages/a23fa8/"},{path:"/01.Java/03.练习题/01.选择题 & 填空题/04.Appending strings and ints.html",redirect:"/pages/a23fa8/"},{name:"v-79a39361",path:"/pages/4b0b03/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-79a39361").then(t)}},{path:"/pages/4b0b03/index.html",redirect:"/pages/4b0b03/"},{path:"/01.Java/03.练习题/01.选择题 & 填空题/10.Good reasons to use Java modules.html",redirect:"/pages/4b0b03/"},{name:"v-ff940602",path:"/pages/d963c7/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-ff940602").then(t)}},{path:"/pages/d963c7/index.html",redirect:"/pages/d963c7/"},{path:"/01.Java/03.练习题/01.选择题 & 填空题/11.Number generators.html",redirect:"/pages/d963c7/"},{name:"v-7e5142ed",path:"/pages/ae9539/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-7e5142ed").then(t)}},{path:"/pages/ae9539/index.html",redirect:"/pages/ae9539/"},{path:"/01.Java/03.练习题/01.选择题 & 填空题/15.When the keyword cannot be used.html",redirect:"/pages/ae9539/"},{name:"v-37d4487c",path:"/pages/c46e82/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-37d4487c").then(t)}},{path:"/pages/c46e82/index.html",redirect:"/pages/c46e82/"},{path:"/01.Java/03.练习题/01.选择题 & 填空题/16.Size and capacity.html",redirect:"/pages/c46e82/"},{name:"v-252d851b",path:"/pages/bdd44c/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-252d851b").then(t)}},{path:"/pages/bdd44c/index.html",redirect:"/pages/bdd44c/"},{path:"/01.Java/03.练习题/01.选择题 & 填空题/17.The number of copies.html",redirect:"/pages/bdd44c/"},{name:"v-99cb094a",path:"/pages/dbb4dd/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-99cb094a").then(t)}},{path:"/pages/dbb4dd/index.html",redirect:"/pages/dbb4dd/"},{path:"/01.Java/03.练习题/01.选择题 & 填空题/18.The number of insertions.html",redirect:"/pages/dbb4dd/"},{name:"v-88aaa1ee",path:"/pages/5a0fd5/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-88aaa1ee").then(t)}},{path:"/pages/5a0fd5/index.html",redirect:"/pages/5a0fd5/"},{path:"/01.Java/03.练习题/02.代码题/01.Boxes.html",redirect:"/pages/5a0fd5/"},{name:"v-4a4457d0",path:"/pages/1cb5d4/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-4a4457d0").then(t)}},{path:"/pages/1cb5d4/index.html",redirect:"/pages/1cb5d4/"},{path:"/01.Java/03.练习题/02.代码题/02.The longest ascending sequence.html",redirect:"/pages/1cb5d4/"},{name:"v-a9927fd4",path:"/pages/2eb85f/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-a9927fd4").then(t)}},{path:"/pages/2eb85f/index.html",redirect:"/pages/2eb85f/"},{path:"/01.Java/03.练习题/02.代码题/06.Right Rotation.html",redirect:"/pages/2eb85f/"},{name:"v-3edf2079",path:"/pages/8f9095/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-3edf2079").then(t)}},{path:"/pages/8f9095/index.html",redirect:"/pages/8f9095/"},{path:"/01.Java/03.练习题/02.代码题/07.Book.html",redirect:"/pages/8f9095/"},{name:"v-05aa3cd4",path:"/pages/a386cc/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-05aa3cd4").then(t)}},{path:"/pages/a386cc/index.html",redirect:"/pages/a386cc/"},{path:"/01.Java/03.练习题/02.代码题/08.Compact strings with AsciiCharSequence.html",redirect:"/pages/a386cc/"},{name:"v-9ce1dd8e",path:"/pages/640e4b/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-9ce1dd8e").then(t)}},{path:"/pages/640e4b/index.html",redirect:"/pages/640e4b/"},{path:"/01.Java/03.练习题/02.代码题/09.Cinema.html",redirect:"/pages/640e4b/"},{name:"v-30bbbfe8",path:"/pages/b4753d/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-30bbbfe8").then(t)}},{path:"/pages/b4753d/index.html",redirect:"/pages/b4753d/"},{path:"/01.Java/03.练习题/02.代码题/13.Count words.html",redirect:"/pages/b4753d/"},{name:"v-7c79e454",path:"/pages/b260fe/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-7c79e454").then(t)}},{path:"/pages/b260fe/index.html",redirect:"/pages/b260fe/"},{path:"/01.Java/03.练习题/02.代码题/12.Calculate square.html",redirect:"/pages/b260fe/"},{name:"v-36d8e52c",path:"/pages/7faafd/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-36d8e52c").then(t)}},{path:"/pages/7faafd/index.html",redirect:"/pages/7faafd/"},{path:"/01.Java/03.练习题/02.代码题/14.Robot control.html",redirect:"/pages/7faafd/"},{name:"v-51cbdc35",path:"/pages/212d51/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-51cbdc35").then(t)}},{path:"/pages/212d51/index.html",redirect:"/pages/212d51/"},{path:"/01.Java/03.练习题/02.代码题/18.Leaderboard.html",redirect:"/pages/212d51/"},{name:"v-3a20ea46",path:"/pages/a9b4c5/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-3a20ea46").then(t)}},{path:"/pages/a9b4c5/index.html",redirect:"/pages/a9b4c5/"},{path:"/01.Java/03.练习题/02.代码题/17.Find the nearest number.html",redirect:"/pages/a9b4c5/"},{name:"v-bd172ada",path:"/pages/178437/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-bd172ada").then(t)}},{path:"/pages/178437/index.html",redirect:"/pages/178437/"},{path:"/01.Java/03.练习题/02.代码题/19.Split a list into sublists.html",redirect:"/pages/178437/"},{name:"v-5e87be4e",path:"/pages/08fb22/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-5e87be4e").then(t)}},{path:"/pages/08fb22/index.html",redirect:"/pages/08fb22/"},{path:"/01.Java/03.练习题/02.代码题/16.Concat all strings without digits.html",redirect:"/pages/08fb22/"},{name:"v-efc958c8",path:"/pages/67369d/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-efc958c8").then(t)}},{path:"/pages/67369d/index.html",redirect:"/pages/67369d/"},{path:"/01.Java/03.练习题/02.代码题/20.Arithmetic average.html",redirect:"/pages/67369d/"},{name:"v-7bd687fc",path:"/pages/b7298f/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-7bd687fc").then(t)}},{path:"/pages/b7298f/index.html",redirect:"/pages/b7298f/"},{path:"/01.Java/03.练习题/02.代码题/21.Processing strings.html",redirect:"/pages/b7298f/"},{name:"v-8f7cf752",path:"/pages/8bd1db/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-8f7cf752").then(t)}},{path:"/pages/8bd1db/index.html",redirect:"/pages/8bd1db/"},{path:"/01.Java/05.Frank - Java与生活/0.参考资料/00.参考资料.html",redirect:"/pages/8bd1db/"},{name:"v-56b8210d",path:"/pages/3824ca/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-56b8210d").then(t)}},{path:"/pages/3824ca/index.html",redirect:"/pages/3824ca/"},{path:"/01.Java/05.Frank - Java与生活/0.参考资料/01.环境变量 - JDK和JRE.html",redirect:"/pages/3824ca/"},{name:"v-0c0305d5",path:"/pages/34af60/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-0c0305d5").then(t)}},{path:"/pages/34af60/index.html",redirect:"/pages/34af60/"},{path:"/01.Java/05.Frank - Java与生活/0.参考资料/02.IDEA 便捷操作.html",redirect:"/pages/34af60/"},{name:"v-46fa5f4a",path:"/pages/94eba9/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-46fa5f4a").then(t)}},{path:"/pages/94eba9/index.html",redirect:"/pages/94eba9/"},{path:"/01.Java/05.Frank - Java与生活/1.Java基础/03.值得注意的是.html",redirect:"/pages/94eba9/"},{name:"v-9ee36d88",path:"/pages/ea2997/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-9ee36d88").then(t)}},{path:"/pages/ea2997/index.html",redirect:"/pages/ea2997/"},{path:"/01.Java/05.Frank - Java与生活/1.Java基础/02.一带而过的东西.html",redirect:"/pages/ea2997/"},{name:"v-43ee85a2",path:"/pages/de8815/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-43ee85a2").then(t)}},{path:"/pages/de8815/index.html",redirect:"/pages/de8815/"},{path:"/01.Java/05.Frank - Java与生活/1.Java基础/04.关于Java语言.html",redirect:"/pages/de8815/"},{name:"v-72c09b1d",path:"/pages/b1af58/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-72c09b1d").then(t)}},{path:"/pages/b1af58/index.html",redirect:"/pages/b1af58/"},{path:"/01.Java/05.Frank - Java与生活/1.Java基础/05.String.html",redirect:"/pages/b1af58/"},{name:"v-16cfba85",path:"/pages/de256f/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-16cfba85").then(t)}},{path:"/pages/de256f/index.html",redirect:"/pages/de256f/"},{path:"/01.Java/05.Frank - Java与生活/1.Java基础/07.import 导包.html",redirect:"/pages/de256f/"},{name:"v-5bc87269",path:"/pages/b8bf39/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-5bc87269").then(t)}},{path:"/pages/b8bf39/index.html",redirect:"/pages/b8bf39/"},{path:"/01.Java/05.Frank - Java与生活/1.Java基础/06.自动类型转换.html",redirect:"/pages/b8bf39/"},{name:"v-ee4eaa34",path:"/pages/e581fb/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-ee4eaa34").then(t)}},{path:"/pages/e581fb/index.html",redirect:"/pages/e581fb/"},{path:"/01.Java/05.Frank - Java与生活/1.Java基础/08.数组.html",redirect:"/pages/e581fb/"},{name:"v-bea1d2d6",path:"/pages/dda86a/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-bea1d2d6").then(t)}},{path:"/pages/dda86a/index.html",redirect:"/pages/dda86a/"},{path:"/01.Java/05.Frank - Java与生活/1.Java基础/09.方法的重载.html",redirect:"/pages/dda86a/"},{name:"v-50f953dc",path:"/pages/a1ff58/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-50f953dc").then(t)}},{path:"/pages/a1ff58/index.html",redirect:"/pages/a1ff58/"},{path:"/01.Java/05.Frank - Java与生活/1.Java基础/10.规范.html",redirect:"/pages/a1ff58/"},{name:"v-21a8ad8a",path:"/pages/d161b3/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-21a8ad8a").then(t)}},{path:"/pages/d161b3/index.html",redirect:"/pages/d161b3/"},{path:"/01.Java/05.Frank - Java与生活/2.OOP上半部分/01.变换思维.html",redirect:"/pages/d161b3/"},{name:"v-4b230ce4",path:"/pages/2a21b9/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-4b230ce4").then(t)}},{path:"/pages/2a21b9/index.html",redirect:"/pages/2a21b9/"},{path:"/01.Java/05.Frank - Java与生活/2.OOP上半部分/04.toString.html",redirect:"/pages/2a21b9/"},{name:"v-6015b26c",path:"/pages/1e6984/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-6015b26c").then(t)}},{path:"/pages/1e6984/index.html",redirect:"/pages/1e6984/"},{path:"/01.Java/05.Frank - Java与生活/2.OOP上半部分/02.null空指针异常.html",redirect:"/pages/1e6984/"},{name:"v-62e09756",path:"/pages/70fd79/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-62e09756").then(t)}},{path:"/pages/70fd79/index.html",redirect:"/pages/70fd79/"},{path:"/01.Java/05.Frank - Java与生活/2.OOP上半部分/05.构造方法.html",redirect:"/pages/70fd79/"},{name:"v-28d12b06",path:"/pages/b12e76/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-28d12b06").then(t)}},{path:"/pages/b12e76/index.html",redirect:"/pages/b12e76/"},{path:"/01.Java/05.Frank - Java与生活/2.OOP上半部分/03.封装.html",redirect:"/pages/b12e76/"},{name:"v-162046e2",path:"/pages/e44222/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-162046e2").then(t)}},{path:"/pages/e44222/index.html",redirect:"/pages/e44222/"},{path:"/01.Java/05.Frank - Java与生活/2.OOP上半部分/06.垃圾回收？.html",redirect:"/pages/e44222/"},{name:"v-014bb200",path:"/pages/3d4433/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-014bb200").then(t)}},{path:"/pages/3d4433/index.html",redirect:"/pages/3d4433/"},{path:"/01.Java/05.Frank - Java与生活/2.OOP上半部分/09.内部类扯淡.html",redirect:"/pages/3d4433/"},{name:"v-7c1b97f0",path:"/pages/f2a51b/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-7c1b97f0").then(t)}},{path:"/pages/f2a51b/index.html",redirect:"/pages/f2a51b/"},{path:"/01.Java/05.Frank - Java与生活/2.OOP上半部分/07.静态变量和方法.html",redirect:"/pages/f2a51b/"},{name:"v-619a9c15",path:"/pages/d01143/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-619a9c15").then(t)}},{path:"/pages/d01143/index.html",redirect:"/pages/d01143/"},{path:"/01.Java/05.Frank - Java与生活/2.OOP上半部分/08.static单例设计模式.html",redirect:"/pages/d01143/"},{name:"v-584b6c7d",path:"/pages/9f2cbb/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-584b6c7d").then(t)}},{path:"/pages/9f2cbb/index.html",redirect:"/pages/9f2cbb/"},{path:"/01.Java/05.Frank - Java与生活/3.OOP下半部分/02.方法的重写.html",redirect:"/pages/9f2cbb/"},{name:"v-2e5e00fc",path:"/pages/a2c72d/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-2e5e00fc").then(t)}},{path:"/pages/a2c72d/index.html",redirect:"/pages/a2c72d/"},{path:"/01.Java/05.Frank - Java与生活/3.OOP下半部分/01.继承.html",redirect:"/pages/a2c72d/"},{name:"v-61ecd514",path:"/pages/591580/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-61ecd514").then(t)}},{path:"/pages/591580/index.html",redirect:"/pages/591580/"},{path:"/01.Java/05.Frank - Java与生活/3.OOP下半部分/04.final.html",redirect:"/pages/591580/"},{name:"v-c7ac12a6",path:"/pages/d73c40/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-c7ac12a6").then(t)}},{path:"/pages/d73c40/index.html",redirect:"/pages/d73c40/"},{path:"/01.Java/05.Frank - Java与生活/3.OOP下半部分/03.super啃老.html",redirect:"/pages/d73c40/"},{name:"v-029c498f",path:"/pages/27dde8/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-029c498f").then(t)}},{path:"/pages/27dde8/index.html",redirect:"/pages/27dde8/"},{path:"/01.Java/05.Frank - Java与生活/3.OOP下半部分/05.抽象类和抽象方法.html",redirect:"/pages/27dde8/"},{name:"v-3c56d5e0",path:"/pages/df5260/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-3c56d5e0").then(t)}},{path:"/pages/df5260/index.html",redirect:"/pages/df5260/"},{path:"/01.Java/05.Frank - Java与生活/3.OOP下半部分/06.接口.html",redirect:"/pages/df5260/"},{name:"v-149f20b6",path:"/pages/12e264/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-149f20b6").then(t)}},{path:"/pages/12e264/index.html",redirect:"/pages/12e264/"},{path:"/01.Java/05.Frank - Java与生活/3.OOP下半部分/07.接口与抽象类.html",redirect:"/pages/12e264/"},{name:"v-34266b3a",path:"/pages/d29b4b/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-34266b3a").then(t)}},{path:"/pages/d29b4b/index.html",redirect:"/pages/d29b4b/"},{path:"/01.Java/05.Frank - Java与生活/3.OOP下半部分/08.多态.html",redirect:"/pages/d29b4b/"},{name:"v-9e70aada",path:"/pages/9f4e34/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-9e70aada").then(t)}},{path:"/pages/9f4e34/index.html",redirect:"/pages/9f4e34/"},{path:"/01.Java/05.Frank - Java与生活/3.OOP下半部分/09.匿名内部类.html",redirect:"/pages/9f4e34/"},{name:"v-32f6ed8a",path:"/pages/23f02d/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-32f6ed8a").then(t)}},{path:"/pages/23f02d/index.html",redirect:"/pages/23f02d/"},{path:"/01.Java/05.Frank - Java与生活/3.OOP下半部分/10.权限修饰符.html",redirect:"/pages/23f02d/"},{name:"v-fec88e32",path:"/pages/6de792/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-fec88e32").then(t)}},{path:"/pages/6de792/index.html",redirect:"/pages/6de792/"},{path:"/01.Java/05.Frank - Java与生活/3.OOP下半部分/11.Object类.html",redirect:"/pages/6de792/"},{name:"v-8bfbf216",path:"/pages/1cc427/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-8bfbf216").then(t)}},{path:"/pages/1cc427/index.html",redirect:"/pages/1cc427/"},{path:"/01.Java/06.Frank - Java API进阶/01.Base API/02.Number & Math.html",redirect:"/pages/1cc427/"},{name:"v-139d165e",path:"/pages/e6a4f1/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-139d165e").then(t)}},{path:"/pages/e6a4f1/index.html",redirect:"/pages/e6a4f1/"},{path:"/01.Java/06.Frank - Java API进阶/01.Base API/01.Java API定义和用处.html",redirect:"/pages/e6a4f1/"},{name:"v-438b1d09",path:"/pages/3012e2/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-438b1d09").then(t)}},{path:"/pages/3012e2/index.html",redirect:"/pages/3012e2/"},{path:"/01.Java/06.Frank - Java API进阶/01.Base API/03.Random.html",redirect:"/pages/3012e2/"},{name:"v-bfe359e2",path:"/pages/5d3f0d/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-bfe359e2").then(t)}},{path:"/pages/5d3f0d/index.html",redirect:"/pages/5d3f0d/"},{path:"/01.Java/06.Frank - Java API进阶/01.Base API/04.Date & Calendar.html",redirect:"/pages/5d3f0d/"},{name:"v-19a77e49",path:"/pages/e07d0f/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-19a77e49").then(t)}},{path:"/pages/e07d0f/index.html",redirect:"/pages/e07d0f/"},{path:"/01.Java/06.Frank - Java API进阶/01.Base API/05.System.html",redirect:"/pages/e07d0f/"},{name:"v-7e063df7",path:"/pages/cdc393/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-7e063df7").then(t)}},{path:"/pages/cdc393/index.html",redirect:"/pages/cdc393/"},{path:"/01.Java/06.Frank - Java API进阶/02.Unit Test and Main function/01.JUnit、单元测试的含义和用途.html",redirect:"/pages/cdc393/"},{name:"v-3dc1be9e",path:"/pages/b0c959/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-3dc1be9e").then(t)}},{path:"/pages/b0c959/index.html",redirect:"/pages/b0c959/"},{path:"/01.Java/06.Frank - Java API进阶/02.Unit Test and Main function/02.Maven repository 获取 Jar.html",redirect:"/pages/b0c959/"},{name:"v-5155ca36",path:"/pages/0418c9/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-5155ca36").then(t)}},{path:"/pages/0418c9/index.html",redirect:"/pages/0418c9/"},{path:"/01.Java/06.Frank - Java API进阶/02.Unit Test and Main function/00.抛出企业问题，脱离main测试，模块化概念抛出.html",redirect:"/pages/0418c9/"},{name:"v-6a58e8d8",path:"/pages/711975/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-6a58e8d8").then(t)}},{path:"/pages/711975/index.html",redirect:"/pages/711975/"},{path:"/01.Java/06.Frank - Java API进阶/02.Unit Test and Main function/03.使用JUnit.html",redirect:"/pages/711975/"},{name:"v-289054fd",path:"/pages/2fba29/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-289054fd").then(t)}},{path:"/pages/2fba29/index.html",redirect:"/pages/2fba29/"},{path:"/01.Java/06.Frank - Java API进阶/03.Throwable/01.异常.html",redirect:"/pages/2fba29/"},{name:"v-9534e174",path:"/pages/71cc54/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-9534e174").then(t)}},{path:"/pages/71cc54/index.html",redirect:"/pages/71cc54/"},{path:"/01.Java/08.学习笔记/01.为什么Java里main方法有个static？.html",redirect:"/pages/71cc54/"},{name:"v-5f831136",path:"/pages/848e4f/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-5f831136").then(t)}},{path:"/pages/848e4f/index.html",redirect:"/pages/848e4f/"},{path:"/02.MySQL/02.学习笔记/01.数据库/02.Tables and columns.html",redirect:"/pages/848e4f/"},{name:"v-f57974b4",path:"/pages/9a852e/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-f57974b4").then(t)}},{path:"/pages/9a852e/index.html",redirect:"/pages/9a852e/"},{path:"/02.MySQL/02.学习笔记/01.数据库/01.初识数据库.html",redirect:"/pages/9a852e/"},{name:"v-8f33d4a0",path:"/pages/698c6e/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-8f33d4a0").then(t)}},{path:"/pages/698c6e/index.html",redirect:"/pages/698c6e/"},{path:"/02.MySQL/02.学习笔记/02.SQL/00.SQL.html",redirect:"/pages/698c6e/"},{name:"v-1a25ed56",path:"/pages/dec33b/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-1a25ed56").then(t)}},{path:"/pages/dec33b/index.html",redirect:"/pages/dec33b/"},{path:"/02.MySQL/05.Frank - MySQL删库跑路/01.安装连接以及配置/00.数据库萌芽——开场吹比.html",redirect:"/pages/dec33b/"},{name:"v-6d56857d",path:"/pages/e04e78/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-6d56857d").then(t)}},{path:"/pages/e04e78/index.html",redirect:"/pages/e04e78/"},{path:"/02.MySQL/05.Frank - MySQL删库跑路/01.安装连接以及配置/01.数据库选择及其安装.html",redirect:"/pages/e04e78/"},{name:"v-264d80b8",path:"/pages/962d9d/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-264d80b8").then(t)}},{path:"/pages/962d9d/index.html",redirect:"/pages/962d9d/"},{path:"/02.MySQL/05.Frank - MySQL删库跑路/01.安装连接以及配置/02.服务的启动和停止.html",redirect:"/pages/962d9d/"},{name:"v-16de008f",path:"/pages/16c2ac/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-16de008f").then(t)}},{path:"/pages/16c2ac/index.html",redirect:"/pages/16c2ac/"},{path:"/02.MySQL/05.Frank - MySQL删库跑路/01.安装连接以及配置/03.连接MySQL.html",redirect:"/pages/16c2ac/"},{name:"v-7474094c",path:"/pages/b0281f/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-7474094c").then(t)}},{path:"/pages/b0281f/index.html",redirect:"/pages/b0281f/"},{path:"/02.MySQL/05.Frank - MySQL删库跑路/01.安装连接以及配置/04.创建Data目录.html",redirect:"/pages/b0281f/"},{name:"v-44b816a4",path:"/pages/b673ce/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-44b816a4").then(t)}},{path:"/pages/b673ce/index.html",redirect:"/pages/b673ce/"},{path:"/02.MySQL/05.Frank - MySQL删库跑路/02.基本操作——数据库/01.显示数据库.html",redirect:"/pages/b673ce/"},{name:"v-754c4324",path:"/pages/199240/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-754c4324").then(t)}},{path:"/pages/199240/index.html",redirect:"/pages/199240/"},{path:"/02.MySQL/05.Frank - MySQL删库跑路/02.基本操作——数据库/02.创建数据库.html",redirect:"/pages/199240/"},{name:"v-73eb45bb",path:"/pages/5e26eb/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-73eb45bb").then(t)}},{path:"/pages/5e26eb/index.html",redirect:"/pages/5e26eb/"},{path:"/02.MySQL/05.Frank - MySQL删库跑路/02.基本操作——数据库/03.删除数据库.html",redirect:"/pages/5e26eb/"},{name:"v-000396c9",path:"/pages/f8be11/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-000396c9").then(t)}},{path:"/pages/f8be11/index.html",redirect:"/pages/f8be11/"},{path:"/02.MySQL/05.Frank - MySQL删库跑路/02.基本操作——数据库/04.查看创建数据库的SQL.html",redirect:"/pages/f8be11/"},{name:"v-06e3b6d6",path:"/pages/4c42c5/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-06e3b6d6").then(t)}},{path:"/pages/4c42c5/index.html",redirect:"/pages/4c42c5/"},{path:"/02.MySQL/05.Frank - MySQL删库跑路/02.基本操作——数据库/05.数据库的字符编码.html",redirect:"/pages/4c42c5/"},{name:"v-da70ac80",path:"/pages/e0b946/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-da70ac80").then(t)}},{path:"/pages/e0b946/index.html",redirect:"/pages/e0b946/"},{path:"/02.MySQL/05.Frank - MySQL删库跑路/03.基本操作——表/04.显示表结构——desc.html",redirect:"/pages/e0b946/"},{name:"v-5b8c6c5b",path:"/pages/00e556/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-5b8c6c5b").then(t)}},{path:"/pages/00e556/index.html",redirect:"/pages/00e556/"},{path:"/02.MySQL/05.Frank - MySQL删库跑路/03.基本操作——表/05.删除表——drop.html",redirect:"/pages/00e556/"},{name:"v-353722f2",path:"/pages/a89d89/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-353722f2").then(t)}},{path:"/pages/a89d89/index.html",redirect:"/pages/a89d89/"},{path:"/02.MySQL/05.Frank - MySQL删库跑路/03.基本操作——表/06.修改表——alter.html",redirect:"/pages/a89d89/"},{name:"v-6a151cce",path:"/pages/bbd8e4/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-6a151cce").then(t)}},{path:"/pages/bbd8e4/index.html",redirect:"/pages/bbd8e4/"},{path:"/02.MySQL/05.Frank - MySQL删库跑路/03.基本操作——表/03.创建表——create.html",redirect:"/pages/bbd8e4/"},{name:"v-f94b8f2e",path:"/pages/01b8a7/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-f94b8f2e").then(t)}},{path:"/pages/01b8a7/index.html",redirect:"/pages/01b8a7/"},{path:"/02.MySQL/05.Frank - MySQL删库跑路/04.基本操作——数据/02.删除数据——delete.html",redirect:"/pages/01b8a7/"},{name:"v-991a76d6",path:"/pages/bda483/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-991a76d6").then(t)}},{path:"/pages/bda483/index.html",redirect:"/pages/bda483/"},{path:"/02.MySQL/05.Frank - MySQL删库跑路/04.基本操作——数据/01.插入数据——insert.html",redirect:"/pages/bda483/"},{name:"v-08ea863e",path:"/pages/417c02/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-08ea863e").then(t)}},{path:"/pages/417c02/index.html",redirect:"/pages/417c02/"},{path:"/02.MySQL/05.Frank - MySQL删库跑路/04.基本操作——数据/04.更新数据——update.html",redirect:"/pages/417c02/"},{name:"v-f7583148",path:"/pages/fb0760/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-f7583148").then(t)}},{path:"/pages/fb0760/index.html",redirect:"/pages/fb0760/"},{path:"/02.MySQL/05.Frank - MySQL删库跑路/04.基本操作——数据/03.清空表——truncate.html",redirect:"/pages/fb0760/"},{name:"v-4c4668ed",path:"/pages/2d27de/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-4c4668ed").then(t)}},{path:"/pages/2d27de/index.html",redirect:"/pages/2d27de/"},{path:"/02.MySQL/05.Frank - MySQL删库跑路/04.基本操作——数据/05.查询表数据(基本)——select.html",redirect:"/pages/2d27de/"},{name:"v-2ec52027",path:"/pages/130114/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-2ec52027").then(t)}},{path:"/pages/130114/index.html",redirect:"/pages/130114/"},{path:"/02.MySQL/05.Frank - MySQL删库跑路/03.基本操作——表/02.引用数据库和查看数据库中的表.html",redirect:"/pages/130114/"},{name:"v-4ff5c178",path:"/pages/892416/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-4ff5c178").then(t)}},{path:"/pages/892416/index.html",redirect:"/pages/892416/"},{path:"/02.MySQL/05.Frank - MySQL删库跑路/04.基本操作——数据/06.SQL语句区分.html",redirect:"/pages/892416/"},{name:"v-64aff65b",path:"/pages/c9916e/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-64aff65b").then(t)}},{path:"/pages/c9916e/index.html",redirect:"/pages/c9916e/"},{path:"/02.MySQL/05.Frank - MySQL删库跑路/04.基本操作——数据/07.字符集编码问题.html",redirect:"/pages/c9916e/"},{name:"v-1262b87e",path:"/pages/88991f/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-1262b87e").then(t)}},{path:"/pages/88991f/index.html",redirect:"/pages/88991f/"},{path:"/02.MySQL/05.Frank - MySQL删库跑路/05.数据类型/01.数据库的数据类型问题.html",redirect:"/pages/88991f/"},{name:"v-c900921e",path:"/pages/ed2df9/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-c900921e").then(t)}},{path:"/pages/ed2df9/index.html",redirect:"/pages/ed2df9/"},{path:"/02.MySQL/05.Frank - MySQL删库跑路/05.数据类型/02.数据类型.html",redirect:"/pages/ed2df9/"},{name:"v-677ce2a0",path:"/pages/525c9a/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-677ce2a0").then(t)}},{path:"/pages/525c9a/index.html",redirect:"/pages/525c9a/"},{path:"/02.MySQL/05.Frank - MySQL删库跑路/06.列属性完整性/01.列属性问题.html",redirect:"/pages/525c9a/"},{name:"v-b4d26508",path:"/pages/b8807f/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-b4d26508").then(t)}},{path:"/pages/b8807f/index.html",redirect:"/pages/b8807f/"},{path:"/02.MySQL/05.Frank - MySQL删库跑路/06.列属性完整性/02.主键 primary key.html",redirect:"/pages/b8807f/"},{name:"v-14c326d6",path:"/pages/dc235f/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-14c326d6").then(t)}},{path:"/pages/dc235f/index.html",redirect:"/pages/dc235f/"},{path:"/02.MySQL/05.Frank - MySQL删库跑路/06.列属性完整性/03.唯一键 unique key.html",redirect:"/pages/dc235f/"},{name:"v-091b4722",path:"/pages/79f68c/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-091b4722").then(t)}},{path:"/pages/79f68c/index.html",redirect:"/pages/79f68c/"},{path:"/02.MySQL/05.Frank - MySQL删库跑路/06.列属性完整性/04.外键 foreign key.html",redirect:"/pages/79f68c/"},{name:"v-c56d4894",path:"/pages/6fb1f2/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-c56d4894").then(t)}},{path:"/pages/6fb1f2/index.html",redirect:"/pages/6fb1f2/"},{path:"/02.MySQL/05.Frank - MySQL删库跑路/06.列属性完整性/05.外键的三种操作.html",redirect:"/pages/6fb1f2/"},{name:"v-74d157a5",path:"/pages/a2ee59/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-74d157a5").then(t)}},{path:"/pages/a2ee59/index.html",redirect:"/pages/a2ee59/"},{path:"/02.MySQL/05.Frank - MySQL删库跑路/06.列属性完整性/06.外键的置空、级联操作.html",redirect:"/pages/a2ee59/"},{name:"v-2d691257",path:"/pages/22b6f2/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-2d691257").then(t)}},{path:"/pages/22b6f2/index.html",redirect:"/pages/22b6f2/"},{path:"/02.MySQL/05.Frank - MySQL删库跑路/06.列属性完整性/07.数据库完整性.html",redirect:"/pages/22b6f2/"},{name:"v-5c56c7ef",path:"/pages/7bc52e/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-5c56c7ef").then(t)}},{path:"/pages/7bc52e/index.html",redirect:"/pages/7bc52e/"},{path:"/02.MySQL/05.Frank - MySQL删库跑路/07.数据库设计思维/01.数据库设计基本概念.html",redirect:"/pages/7bc52e/"},{name:"v-f8eb562c",path:"/pages/036a87/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-f8eb562c").then(t)}},{path:"/pages/036a87/index.html",redirect:"/pages/036a87/"},{path:"/02.MySQL/05.Frank - MySQL删库跑路/06.列属性完整性/08.SQL内注释和代码注释.html",redirect:"/pages/036a87/"},{name:"v-1bb7ea63",path:"/pages/881d02/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-1bb7ea63").then(t)}},{path:"/pages/881d02/index.html",redirect:"/pages/881d02/"},{path:"/02.MySQL/05.Frank - MySQL删库跑路/07.数据库设计思维/02.实体和实体之间的关系.html",redirect:"/pages/881d02/"},{name:"v-2fab6371",path:"/pages/f839ed/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-2fab6371").then(t)}},{path:"/pages/f839ed/index.html",redirect:"/pages/f839ed/"},{path:"/02.MySQL/05.Frank - MySQL删库跑路/07.数据库设计思维/03.数据库设计三大范式.html",redirect:"/pages/f839ed/"},{name:"v-6bd5532b",path:"/pages/fca44f/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-6bd5532b").then(t)}},{path:"/pages/fca44f/index.html",redirect:"/pages/fca44f/"},{path:"/02.MySQL/05.Frank - MySQL删库跑路/08.单表查询/00.select、from、dual、as.html",redirect:"/pages/fca44f/"},{name:"v-9a1683c0",path:"/pages/559548/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-9a1683c0").then(t)}},{path:"/pages/559548/index.html",redirect:"/pages/559548/"},{path:"/02.MySQL/05.Frank - MySQL删库跑路/08.单表查询/02.聚合函数.html",redirect:"/pages/559548/"},{name:"v-63435fef",path:"/pages/7f812c/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-63435fef").then(t)}},{path:"/pages/7f812c/index.html",redirect:"/pages/7f812c/"},{path:"/02.MySQL/05.Frank - MySQL删库跑路/08.单表查询/03.模糊——like.html",redirect:"/pages/7f812c/"},{name:"v-11e58d10",path:"/pages/114a58/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-11e58d10").then(t)}},{path:"/pages/114a58/index.html",redirect:"/pages/114a58/"},{path:"/02.MySQL/05.Frank - MySQL删库跑路/08.单表查询/01.where.html",redirect:"/pages/114a58/"},{name:"v-6fa1b01e",path:"/pages/ccf2cc/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-6fa1b01e").then(t)}},{path:"/pages/ccf2cc/index.html",redirect:"/pages/ccf2cc/"},{path:"/02.MySQL/05.Frank - MySQL删库跑路/08.单表查询/04.排序——order by.html",redirect:"/pages/ccf2cc/"},{name:"v-086cf181",path:"/pages/229131/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-086cf181").then(t)}},{path:"/pages/229131/index.html",redirect:"/pages/229131/"},{path:"/02.MySQL/05.Frank - MySQL删库跑路/08.单表查询/05.分组——group by.html",redirect:"/pages/229131/"},{name:"v-305be5af",path:"/pages/d65fc4/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-305be5af").then(t)}},{path:"/pages/d65fc4/index.html",redirect:"/pages/d65fc4/"},{path:"/02.MySQL/05.Frank - MySQL删库跑路/08.单表查询/06.筛选——having.html",redirect:"/pages/d65fc4/"},{name:"v-eba2befa",path:"/pages/5cdf6f/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-eba2befa").then(t)}},{path:"/pages/5cdf6f/index.html",redirect:"/pages/5cdf6f/"},{path:"/02.MySQL/05.Frank - MySQL删库跑路/08.单表查询/07.限制——limit.html",redirect:"/pages/5cdf6f/"},{name:"v-32e1b1fa",path:"/pages/425ca1/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-32e1b1fa").then(t)}},{path:"/pages/425ca1/index.html",redirect:"/pages/425ca1/"},{path:"/02.MySQL/05.Frank - MySQL删库跑路/08.单表查询/08.去重——distinct.html",redirect:"/pages/425ca1/"},{name:"v-c7c7c5d8",path:"/pages/56c50b/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-c7c7c5d8").then(t)}},{path:"/pages/56c50b/index.html",redirect:"/pages/56c50b/"},{path:"/02.MySQL/05.Frank - MySQL删库跑路/09.多表查询/01.联合——union.html",redirect:"/pages/56c50b/"},{name:"v-01287270",path:"/pages/653123/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-01287270").then(t)}},{path:"/pages/653123/index.html",redirect:"/pages/653123/"},{path:"/02.MySQL/05.Frank - MySQL删库跑路/09.多表查询/02.连接——join.html",redirect:"/pages/653123/"},{name:"v-2995e4f3",path:"/pages/affb3e/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-2995e4f3").then(t)}},{path:"/pages/affb3e/index.html",redirect:"/pages/affb3e/"},{path:"/03.Linux/02.学习笔记/04.其它/02.Arch Linux 安装过程.html",redirect:"/pages/affb3e/"},{name:"v-72916731",path:"/pages/a89c71/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-72916731").then(t)}},{path:"/pages/a89c71/index.html",redirect:"/pages/a89c71/"},{path:"/03.Linux/02.学习笔记/04.其它/03.Linux磁盘分区参考表.html",redirect:"/pages/a89c71/"},{name:"v-032199b6",path:"/pages/30b829/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-032199b6").then(t)}},{path:"/pages/30b829/index.html",redirect:"/pages/30b829/"},{path:"/03.Linux/02.学习笔记/04.其它/04.Linux中不同颜色代表的文件类型.html",redirect:"/pages/30b829/"},{name:"v-fd7e728a",path:"/pages/544d08/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-fd7e728a").then(t)}},{path:"/pages/544d08/index.html",redirect:"/pages/544d08/"},{path:"/03.Linux/02.学习笔记/04.其它/05.配置Yum源.html",redirect:"/pages/544d08/"},{name:"v-1c283729",path:"/pages/0c031c/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-1c283729").then(t)}},{path:"/pages/0c031c/index.html",redirect:"/pages/0c031c/"},{path:"/03.Linux/05.Frank - Linxu现代方法/01.必知/00.步入 Linux 的现代方法.html",redirect:"/pages/0c031c/"},{name:"v-5a9b2bfe",path:"/pages/8975a4/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-5a9b2bfe").then(t)}},{path:"/pages/8975a4/index.html",redirect:"/pages/8975a4/"},{path:"/03.Linux/05.Frank - Linxu现代方法/01.必知/01.步入Linux的世界.html",redirect:"/pages/8975a4/"},{name:"v-21fa34f8",path:"/pages/d1d9d6/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-21fa34f8").then(t)}},{path:"/pages/d1d9d6/index.html",redirect:"/pages/d1d9d6/"},{path:"/03.Linux/05.Frank - Linxu现代方法/01.必知/02.Linux路径.html",redirect:"/pages/d1d9d6/"},{name:"v-aee938f8",path:"/pages/7866fe/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-aee938f8").then(t)}},{path:"/pages/7866fe/index.html",redirect:"/pages/7866fe/"},{path:"/03.Linux/05.Frank - Linxu现代方法/01.必知/03.Linux根目录.html",redirect:"/pages/7866fe/"},{name:"v-43f4085c",path:"/pages/e8ee07/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-43f4085c").then(t)}},{path:"/pages/e8ee07/index.html",redirect:"/pages/e8ee07/"},{path:"/03.Linux/05.Frank - Linxu现代方法/01.必知/05.Linux Kernel.html",redirect:"/pages/e8ee07/"},{name:"v-061a36ca",path:"/pages/11d275/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-061a36ca").then(t)}},{path:"/pages/11d275/index.html",redirect:"/pages/11d275/"},{path:"/03.Linux/05.Frank - Linxu现代方法/02.命令/00.Shell命令基础.html",redirect:"/pages/11d275/"},{name:"v-46c3fbe0",path:"/pages/2a0898/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-46c3fbe0").then(t)}},{path:"/pages/2a0898/index.html",redirect:"/pages/2a0898/"},{path:"/03.Linux/05.Frank - Linxu现代方法/02.命令/02.ls——进阶使用，遍历、匹配和过滤文件.html",redirect:"/pages/2a0898/"},{name:"v-4b514f00",path:"/pages/4ccd98/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-4b514f00").then(t)}},{path:"/pages/4ccd98/index.html",redirect:"/pages/4ccd98/"},{path:"/03.Linux/05.Frank - Linxu现代方法/02.命令/05.touch.html",redirect:"/pages/4ccd98/"},{name:"v-0cfc498e",path:"/pages/38c84c/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-0cfc498e").then(t)}},{path:"/pages/38c84c/index.html",redirect:"/pages/38c84c/"},{path:"/03.Linux/05.Frank - Linxu现代方法/02.命令/06.cp.html",redirect:"/pages/38c84c/"},{name:"v-06b4bc73",path:"/pages/adaf3b/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-06b4bc73").then(t)}},{path:"/pages/adaf3b/index.html",redirect:"/pages/adaf3b/"},{path:"/03.Linux/05.Frank - Linxu现代方法/03.技巧/01.熟练使用cd、ls命令.html",redirect:"/pages/adaf3b/"},{name:"v-eb5241a6",path:"/pages/84b95d/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-eb5241a6").then(t)}},{path:"/pages/84b95d/index.html",redirect:"/pages/84b95d/"},{path:"/03.Linux/05.Frank - Linxu现代方法/03.技巧/02.Terminal中的快捷键.html",redirect:"/pages/84b95d/"},{name:"v-e95328cc",path:"/pages/9576cc/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-e95328cc").then(t)}},{path:"/pages/9576cc/index.html",redirect:"/pages/9576cc/"},{path:"/03.Linux/05.Frank - Linxu现代方法/03.技巧/03.终端光标移动技巧.html",redirect:"/pages/9576cc/"},{name:"v-47eb0248",path:"/pages/254159/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-47eb0248").then(t)}},{path:"/pages/254159/index.html",redirect:"/pages/254159/"},{path:"/04.技术/01.技术文档/00.SSH备忘单.html",redirect:"/pages/254159/"},{name:"v-5ee0e570",path:"/pages/9a7ee40fc232253e/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-5ee0e570").then(t)}},{path:"/pages/9a7ee40fc232253e/index.html",redirect:"/pages/9a7ee40fc232253e/"},{path:"/04.技术/01.技术文档/01.Git使用手册.html",redirect:"/pages/9a7ee40fc232253e/"},{name:"v-c9a18048",path:"/pages/ad247c4332211551/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-c9a18048").then(t)}},{path:"/pages/ad247c4332211551/index.html",redirect:"/pages/ad247c4332211551/"},{path:"/04.技术/01.技术文档/02.Markdown使用教程.html",redirect:"/pages/ad247c4332211551/"},{name:"v-8da46682",path:"/pages/61f2f95fd7da14fd/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-8da46682").then(t)}},{path:"/pages/61f2f95fd7da14fd/index.html",redirect:"/pages/61f2f95fd7da14fd/"},{path:"/04.技术/01.技术文档/03.npm常用命令.html",redirect:"/pages/61f2f95fd7da14fd/"},{name:"v-39227ad2",path:"/pages/dec4f3f00e71a312/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-39227ad2").then(t)}},{path:"/pages/dec4f3f00e71a312/index.html",redirect:"/pages/dec4f3f00e71a312/"},{path:"/04.技术/01.技术文档/10.npm packageJson属性详解.html",redirect:"/pages/dec4f3f00e71a312/"},{name:"v-ea16c700",path:"/pages/4e8444e2d534d14f/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-ea16c700").then(t)}},{path:"/pages/4e8444e2d534d14f/index.html",redirect:"/pages/4e8444e2d534d14f/"},{path:"/04.技术/01.技术文档/15.yaml语言教程.html",redirect:"/pages/4e8444e2d534d14f/"},{name:"v-e9028434",path:"/pages/baf5f9/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-e9028434").then(t)}},{path:"/pages/baf5f9/index.html",redirect:"/pages/baf5f9/"},{path:"/04.技术/02.Git/00.Git介绍.html",redirect:"/pages/baf5f9/"},{name:"v-28192474",path:"/note/git/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-28192474").then(t)}},{path:"/note/git/index.html",redirect:"/note/git/"},{path:"/04.技术/02.Git/33.《Git》学习笔记.html",redirect:"/note/git/"},{name:"v-ad47ee68",path:"/pages/4c778760be26d8b3/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-ad47ee68").then(t)}},{path:"/pages/4c778760be26d8b3/index.html",redirect:"/pages/4c778760be26d8b3/"},{path:"/04.技术/22.GitHub技巧/01.GitHub高级搜索技巧.html",redirect:"/pages/4c778760be26d8b3/"},{name:"v-3ddb7a44",path:"/pages/6b9d359ec5aa5019/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-3ddb7a44").then(t)}},{path:"/pages/6b9d359ec5aa5019/index.html",redirect:"/pages/6b9d359ec5aa5019/"},{path:"/04.技术/22.GitHub技巧/02.GitHub Actions 实现自动部署静态博客.html",redirect:"/pages/6b9d359ec5aa5019/"},{name:"v-81ef1bfc",path:"/pages/f44d2f9ad04ab8d3/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-81ef1bfc").then(t)}},{path:"/pages/f44d2f9ad04ab8d3/index.html",redirect:"/pages/f44d2f9ad04ab8d3/"},{path:"/04.技术/22.GitHub技巧/03.GitHub Actions 定时运行代码：每天定时百度链接推送.html",redirect:"/pages/f44d2f9ad04ab8d3/"},{name:"v-0927a410",path:"/pages/4e011c/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-0927a410").then(t)}},{path:"/pages/4e011c/index.html",redirect:"/pages/4e011c/"},{path:"/03.Linux/02.学习笔记/04.其它/01.CentOS网络设置.html",redirect:"/pages/4e011c/"},{name:"v-5b207988",path:"/pages/95331c6a9613faf8/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-5b207988").then(t)}},{path:"/pages/95331c6a9613faf8/index.html",redirect:"/pages/95331c6a9613faf8/"},{path:"/04.技术/22.GitHub技巧/10.GitHub加速下载项目的方法.html",redirect:"/pages/95331c6a9613faf8/"},{name:"v-3441661b",path:"/pages/8309a5b876fc95e3/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-3441661b").then(t)}},{path:"/pages/8309a5b876fc95e3/index.html",redirect:"/pages/8309a5b876fc95e3/"},{path:"/04.技术/50.前端/10.HTML/10.常用meta整理.html",redirect:"/pages/8309a5b876fc95e3/"},{name:"v-0b2ea8bc",path:"/pages/c8f128/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-0b2ea8bc").then(t)}},{path:"/pages/c8f128/index.html",redirect:"/pages/c8f128/"},{path:"/04.技术/50.前端/20.CSS/00.CSS教程和技巧收藏.html",redirect:"/pages/c8f128/"},{name:"v-3cc4bb4a",path:"/pages/ea6db1530c42ad51/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-3cc4bb4a").then(t)}},{path:"/pages/ea6db1530c42ad51/index.html",redirect:"/pages/ea6db1530c42ad51/"},{path:"/04.技术/50.前端/20.CSS/02.flex布局案例-基础.html",redirect:"/pages/ea6db1530c42ad51/"},{name:"v-030c6d13",path:"/pages/0a83b083bdf257cb/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-030c6d13").then(t)}},{path:"/pages/0a83b083bdf257cb/index.html",redirect:"/pages/0a83b083bdf257cb/"},{path:"/04.技术/50.前端/20.CSS/01.flex布局语法.html",redirect:"/pages/0a83b083bdf257cb/"},{name:"v-3e1b8c0c",path:"/pages/eff61bc8b4f4695d/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-3e1b8c0c").then(t)}},{path:"/pages/eff61bc8b4f4695d/index.html",redirect:"/pages/eff61bc8b4f4695d/"},{path:"/04.技术/50.前端/20.CSS/03.flex布局案例-骰子.html",redirect:"/pages/eff61bc8b4f4695d/"},{name:"v-158d8f8e",path:"/pages/df9e7c7214fa5046/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-158d8f8e").then(t)}},{path:"/pages/df9e7c7214fa5046/index.html",redirect:"/pages/df9e7c7214fa5046/"},{path:"/04.技术/50.前端/20.CSS/04.flex布局案例-圣杯布局.html",redirect:"/pages/df9e7c7214fa5046/"},{name:"v-5a9d5485",path:"/pages/85b5a3fe218a34b7/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-5a9d5485").then(t)}},{path:"/pages/85b5a3fe218a34b7/index.html",redirect:"/pages/85b5a3fe218a34b7/"},{path:"/04.技术/50.前端/20.CSS/05.flex布局案例-网格布局.html",redirect:"/pages/85b5a3fe218a34b7/"},{name:"v-3c6bfcb8",path:"/pages/02d7f59d98d87409/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-3c6bfcb8").then(t)}},{path:"/pages/02d7f59d98d87409/index.html",redirect:"/pages/02d7f59d98d87409/"},{path:"/04.技术/50.前端/20.CSS/07.CSS3之transition过渡.html",redirect:"/pages/02d7f59d98d87409/"},{name:"v-f8f78794",path:"/pages/05cc577fb51c7998/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-f8f78794").then(t)}},{path:"/pages/05cc577fb51c7998/index.html",redirect:"/pages/05cc577fb51c7998/"},{path:"/04.技术/50.前端/20.CSS/06.flex布局案例-输入框布局.html",redirect:"/pages/05cc577fb51c7998/"},{name:"v-157d6660",path:"/pages/3d52574260725aea/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-157d6660").then(t)}},{path:"/pages/3d52574260725aea/index.html",redirect:"/pages/3d52574260725aea/"},{path:"/04.技术/50.前端/20.CSS/20.「布局技巧」图片未加载前自动撑开元素高度.html",redirect:"/pages/3d52574260725aea/"},{name:"v-3dbf8362",path:"/pages/42b66999cc27dc25/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-3dbf8362").then(t)}},{path:"/pages/42b66999cc27dc25/index.html",redirect:"/pages/42b66999cc27dc25/"},{path:"/04.技术/50.前端/20.CSS/30.文字在一行或多行时超出显示省略号.html",redirect:"/pages/42b66999cc27dc25/"},{name:"v-33039ea5",path:"/pages/c2c0432138f6e042/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-33039ea5").then(t)}},{path:"/pages/c2c0432138f6e042/index.html",redirect:"/pages/c2c0432138f6e042/"},{path:"/04.技术/50.前端/20.CSS/08.CSS3之animation动画.html",redirect:"/pages/c2c0432138f6e042/"},{name:"v-584f7a00",path:"/pages/cb7cb251adba4bf7/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-584f7a00").then(t)}},{path:"/pages/cb7cb251adba4bf7/index.html",redirect:"/pages/cb7cb251adba4bf7/"},{path:"/04.技术/50.前端/20.CSS/40.水平垂直居中的几种方式-案例.html",redirect:"/pages/cb7cb251adba4bf7/"},{name:"v-77561fe6",path:"/pages/20a978023139589d/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-77561fe6").then(t)}},{path:"/pages/20a978023139589d/index.html",redirect:"/pages/20a978023139589d/"},{path:"/04.技术/50.前端/20.CSS/35.从box-sizing属性入手，了解盒子模型.html",redirect:"/pages/20a978023139589d/"},{name:"v-29e25319",path:"/pages/5dde351274f1e39d/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-29e25319").then(t)}},{path:"/pages/5dde351274f1e39d/index.html",redirect:"/pages/5dde351274f1e39d/"},{path:"/04.技术/50.前端/20.CSS/45.如何根据系统主题自动响应CSS深色模式.html",redirect:"/pages/5dde351274f1e39d/"},{name:"v-4f80cc75",path:"/pages/941581927b4a38f8/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-4f80cc75").then(t)}},{path:"/pages/941581927b4a38f8/index.html",redirect:"/pages/941581927b4a38f8/"},{path:"/04.技术/50.前端/20.CSS/50.「css技巧」使用hover和attr()定制悬浮提示.html",redirect:"/pages/941581927b4a38f8/"},{name:"v-1d9c3c3b",path:"/pages/3da0d7/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-1d9c3c3b").then(t)}},{path:"/pages/3da0d7/index.html",redirect:"/pages/3da0d7/"},{path:"/04.技术/50.前端/20.CSS/60.CSS-function汇总.html",redirect:"/pages/3da0d7/"},{name:"v-5de59050",path:"/pages/d872e5/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-5de59050").then(t)}},{path:"/pages/d872e5/index.html",redirect:"/pages/d872e5/"},{path:"/05.英语/01.Khan Academy - 语法/00.语法简介.html",redirect:"/pages/d872e5/"},{name:"v-d54b86a8",path:"/pages/b37945/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-d54b86a8").then(t)}},{path:"/pages/b37945/index.html",redirect:"/pages/b37945/"},{path:"/05.英语/01.Khan Academy - 语法/01.名词/01.名词简介.html",redirect:"/pages/b37945/"},{name:"v-39573a11",path:"/pages/c5da57/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-39573a11").then(t)}},{path:"/pages/c5da57/index.html",redirect:"/pages/c5da57/"},{path:"/05.英语/01.Khan Academy - 语法/01.名词/02.名词类型.html",redirect:"/pages/c5da57/"},{name:"v-63ce2149",path:"/pages/f744b7/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-63ce2149").then(t)}},{path:"/pages/f744b7/index.html",redirect:"/pages/f744b7/"},{path:"/05.英语/01.Khan Academy - 语法/01.名词/03.不规则复数名词：基复数和不规则结尾.html",redirect:"/pages/f744b7/"},{name:"v-1c1cf212",path:"/pages/9c0957/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-1c1cf212").then(t)}},{path:"/pages/9c0957/index.html",redirect:"/pages/9c0957/"},{path:"/05.英语/01.Khan Academy - 语法/01.名词/04.不规则复数名词：突变复数和外来复数.html",redirect:"/pages/9c0957/"},{name:"v-43592254",path:"/pages/379914/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-43592254").then(t)}},{path:"/pages/379914/index.html",redirect:"/pages/379914/"},{path:"/05.英语/01.Khan Academy - 语法/02.动词/01.动词简介.html",redirect:"/pages/379914/"},{name:"v-0de5a480",path:"/pages/22d116/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-0de5a480").then(t)}},{path:"/pages/22d116/index.html",redirect:"/pages/22d116/"},{path:"/05.英语/01.Khan Academy - 语法/02.动词/02.动词时态.html",redirect:"/pages/22d116/"},{name:"v-32908d60",path:"/pages/4a60fd/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-32908d60").then(t)}},{path:"/pages/4a60fd/index.html",redirect:"/pages/4a60fd/"},{path:"/05.英语/01.Khan Academy - 语法/02.动词/03.系动词和助动词.html",redirect:"/pages/4a60fd/"},{name:"v-79350870",path:"/pages/1f8c91/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-79350870").then(t)}},{path:"/pages/1f8c91/index.html",redirect:"/pages/1f8c91/"},{path:"/05.英语/01.Khan Academy - 语法/02.动词/05.语态.html",redirect:"/pages/1f8c91/"},{name:"v-b700167a",path:"/pages/6b1c2d/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-b700167a").then(t)}},{path:"/pages/6b1c2d/index.html",redirect:"/pages/6b1c2d/"},{path:"/05.英语/01.Khan Academy - 语法/02.动词/04.不规则动词.html",redirect:"/pages/6b1c2d/"},{name:"v-2b29a74e",path:"/pages/6ffc85/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-2b29a74e").then(t)}},{path:"/pages/6ffc85/index.html",redirect:"/pages/6ffc85/"},{path:"/05.英语/01.Khan Academy - 语法/02.动词/06.动词体和情态动词.html",redirect:"/pages/6ffc85/"},{name:"v-7972075e",path:"/pages/455805/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-7972075e").then(t)}},{path:"/pages/455805/index.html",redirect:"/pages/455805/"},{path:"/06.记录/01.Monthly/01.2022-03.html",redirect:"/pages/455805/"},{name:"v-b69608c4",path:"/pages/fd3564/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-b69608c4").then(t)}},{path:"/pages/fd3564/index.html",redirect:"/pages/fd3564/"},{path:"/06.记录/01.Monthly/02.2022-04.html",redirect:"/pages/fd3564/"},{name:"v-60102044",path:"/pages/a0be6e/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-60102044").then(t)}},{path:"/pages/a0be6e/index.html",redirect:"/pages/a0be6e/"},{path:"/06.记录/01.Monthly/03.2022-05.html",redirect:"/pages/a0be6e/"},{name:"v-d9036cba",path:"/pages/a15720/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-d9036cba").then(t)}},{path:"/pages/a15720/index.html",redirect:"/pages/a15720/"},{path:"/05.英语/01.Khan Academy - 语法/03.代词/02.人称代词.html",redirect:"/pages/a15720/"},{name:"v-2bb0f60a",path:"/pages/4c7197/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-2bb0f60a").then(t)}},{path:"/pages/4c7197/index.html",redirect:"/pages/4c7197/"},{path:"/06.记录/03.阅读/02.《梁永安：阅读、游历和爱情》.html",redirect:"/pages/4c7197/"},{name:"v-80ac896a",path:"/pages/8fff1a/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-80ac896a").then(t)}},{path:"/pages/8fff1a/index.html",redirect:"/pages/8fff1a/"},{path:"/06.记录/03.阅读/03.《傲慢与偏见》.html",redirect:"/pages/8fff1a/"},{name:"v-7d0620ad",path:"/pages/d1eca2/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-7d0620ad").then(t)}},{path:"/pages/d1eca2/index.html",redirect:"/pages/d1eca2/"},{path:"/05.英语/01.Khan Academy - 语法/03.代词/03.所有格代词.html",redirect:"/pages/d1eca2/"},{name:"v-1770b0c0",path:"/pages/fbe430/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-1770b0c0").then(t)}},{path:"/pages/fbe430/index.html",redirect:"/pages/fbe430/"},{path:"/06.记录/03.阅读/04.《我们要自学》.html",redirect:"/pages/fbe430/"},{name:"v-078e42cf",path:"/pages/86ac50/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-078e42cf").then(t)}},{path:"/pages/86ac50/index.html",redirect:"/pages/86ac50/"},{path:"/06.记录/03.阅读/05.《挪威的森林》.html",redirect:"/pages/86ac50/"},{name:"v-6e1af767",path:"/pages/6010b8/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-6e1af767").then(t)}},{path:"/pages/6010b8/index.html",redirect:"/pages/6010b8/"},{path:"/06.记录/10.Others/10.青钢影.html",redirect:"/pages/6010b8/"},{name:"v-6d8e5d58",path:"/pages/76a49d/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-6d8e5d58").then(t)}},{path:"/pages/76a49d/index.html",redirect:"/pages/76a49d/"},{path:"/05.英语/01.Khan Academy - 语法/03.代词/01.代词简介.html",redirect:"/pages/76a49d/"},{name:"v-914c6eca",path:"/pages/c1a476/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-914c6eca").then(t)}},{path:"/pages/c1a476/index.html",redirect:"/pages/c1a476/"},{path:"/06.记录/10.Others/51.Electronic drug.html",redirect:"/pages/c1a476/"},{name:"v-5dd65de6",path:"/pages/f2a556/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-5dd65de6").then(t)}},{path:"/pages/f2a556/index.html",redirect:"/pages/f2a556/"},{path:"/07.更多/01.学习/00.费曼学习法.html",redirect:"/pages/f2a556/"},{name:"v-45e13a46",path:"/pages/996822b2a2ca6e3b/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-45e13a46").then(t)}},{path:"/pages/996822b2a2ca6e3b/index.html",redirect:"/pages/996822b2a2ca6e3b/"},{path:"/07.更多/01.学习/03.提高记忆的技巧.html",redirect:"/pages/996822b2a2ca6e3b/"},{name:"v-602f6a3e",path:"/pages/c4b107/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-602f6a3e").then(t)}},{path:"/pages/c4b107/index.html",redirect:"/pages/c4b107/"},{path:"/06.记录/10.Others/52.Extravagant Spending on College Campus.html",redirect:"/pages/c4b107/"},{name:"v-069726b1",path:"/pages/e60c81/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-069726b1").then(t)}},{path:"/pages/e60c81/index.html",redirect:"/pages/e60c81/"},{path:"/07.更多/01.学习/01.笔记方法.html",redirect:"/pages/e60c81/"},{name:"v-9150e006",path:"/pages/a8692ab3bdcb4588/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-9150e006").then(t)}},{path:"/pages/a8692ab3bdcb4588/index.html",redirect:"/pages/a8692ab3bdcb4588/"},{path:"/07.更多/01.学习/02.提高学习效率的策略.html",redirect:"/pages/a8692ab3bdcb4588/"},{name:"v-050b5070",path:"/pages/c3f302a03c8daf79/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-050b5070").then(t)}},{path:"/pages/c3f302a03c8daf79/index.html",redirect:"/pages/c3f302a03c8daf79/"},{path:"/07.更多/01.学习/04.自律小建议.html",redirect:"/pages/c3f302a03c8daf79/"},{name:"v-c68bce4c",path:"/pages/9ba2b8fb13de1957/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-c68bce4c").then(t)}},{path:"/pages/9ba2b8fb13de1957/index.html",redirect:"/pages/9ba2b8fb13de1957/"},{path:"/07.更多/01.学习/05.处理问题的思路.html",redirect:"/pages/9ba2b8fb13de1957/"},{name:"v-09e49812",path:"/pages/ce818a/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-09e49812").then(t)}},{path:"/pages/ce818a/index.html",redirect:"/pages/ce818a/"},{path:"/07.更多/01.学习/10.搜索引擎使用技巧.html",redirect:"/pages/ce818a/"},{name:"v-a648cdb0",path:"/pages/4eb330/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-a648cdb0").then(t)}},{path:"/pages/4eb330/index.html",redirect:"/pages/4eb330/"},{path:"/07.更多/02.编程/00.什么是编程语言？.html",redirect:"/pages/4eb330/"},{name:"v-511ab6fa",path:"/pages/f28982/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-511ab6fa").then(t)}},{path:"/pages/f28982/index.html",redirect:"/pages/f28982/"},{path:"/07.更多/02.编程/01.编程语言重要吗？.html",redirect:"/pages/f28982/"},{name:"v-d2d599de",path:"/pages/27d4fa/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-d2d599de").then(t)}},{path:"/pages/27d4fa/index.html",redirect:"/pages/27d4fa/"},{path:"/07.更多/02.编程/05.废话Java泛型编程.html",redirect:"/pages/27d4fa/"},{name:"v-68ed9838",path:"/pages/2d615df9a36a98ed/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-68ed9838").then(t)}},{path:"/pages/2d615df9a36a98ed/index.html",redirect:"/pages/2d615df9a36a98ed/"},{path:"/07.更多/05.心情杂货/01.一个完美主义者的自我救赎.html",redirect:"/pages/2d615df9a36a98ed/"},{name:"v-6d811eec",path:"/pages/aea6571b7a8bae86/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-6d811eec").then(t)}},{path:"/pages/aea6571b7a8bae86/index.html",redirect:"/pages/aea6571b7a8bae86/"},{path:"/07.更多/03.面试/01.面试问题集锦.html",redirect:"/pages/aea6571b7a8bae86/"},{name:"v-e2d6b94c",path:"/pages/d6d331/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-e2d6b94c").then(t)}},{path:"/pages/d6d331/index.html",redirect:"/pages/d6d331/"},{path:"/07.更多/05.心情杂货/10.反向拆解让人上瘾的套路，找回自律.html",redirect:"/pages/d6d331/"},{name:"v-3f336508",path:"/pages/baaa02/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-3f336508").then(t)}},{path:"/pages/baaa02/index.html",redirect:"/pages/baaa02/"},{path:"/07.更多/10.实用技巧/01.2分钟规则.html",redirect:"/pages/baaa02/"},{name:"v-5a7e209d",path:"/pages/324a30/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-5a7e209d").then(t)}},{path:"/pages/324a30/index.html",redirect:"/pages/324a30/"},{path:"/07.更多/09.遭遇问题/01.ssh connect to host github.com port 22 Connection refused.html",redirect:"/pages/324a30/"},{name:"v-67a807bd",path:"/pages/a5f73af5185fdf0a/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-67a807bd").then(t)}},{path:"/pages/a5f73af5185fdf0a/index.html",redirect:"/pages/a5f73af5185fdf0a/"},{path:"/07.更多/10.实用技巧/03.GitHub + jsDelivr + TinyPNG+ PicGo 打造稳定快速、高效免费图床.html",redirect:"/pages/a5f73af5185fdf0a/"},{name:"v-360a8800",path:"/pages/966fd0/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-360a8800").then(t)}},{path:"/pages/966fd0/index.html",redirect:"/pages/966fd0/"},{path:"/07.更多/10.实用技巧/02.Clash绕过系统代理.html",redirect:"/pages/966fd0/"},{name:"v-d028a74a",path:"/pages/9c98db/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-d028a74a").then(t)}},{path:"/pages/9c98db/index.html",redirect:"/pages/9c98db/"},{path:"/07.更多/10.实用技巧/04.关于WSL运行某些第三方命令很慢的原因.html",redirect:"/pages/9c98db/"},{name:"v-dc102e1c",path:"/pages/85794d/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-dc102e1c").then(t)}},{path:"/pages/85794d/index.html",redirect:"/pages/85794d/"},{path:"/07.更多/110.Khan Academy - 算法/00.算法简介.html",redirect:"/pages/85794d/"},{name:"v-d9223254",path:"/pages/c1ff23/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-d9223254").then(t)}},{path:"/pages/c1ff23/index.html",redirect:"/pages/c1ff23/"},{path:"/07.更多/11.Interesting/01.代码中的忒修斯之船.html",redirect:"/pages/c1ff23/"},{name:"v-dd968700",path:"/pages/83a38b/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-dd968700").then(t)}},{path:"/pages/83a38b/index.html",redirect:"/pages/83a38b/"},{path:"/07.更多/10.实用技巧/10.VMware虚拟机科学上网.html",redirect:"/pages/83a38b/"},{name:"v-3835e1b3",path:"/friends/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-3835e1b3").then(t)}},{path:"/friends/index.html",redirect:"/friends/"},{path:"/07.更多/99.友情链接.html",redirect:"/friends/"},{name:"v-e49aec88",path:"/pages/5b66ca/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-e49aec88").then(t)}},{path:"/pages/5b66ca/index.html",redirect:"/pages/5b66ca/"},{path:"/08.收藏夹/00.网站.html",redirect:"/pages/5b66ca/"},{name:"v-758a0ab3",path:"/archives/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-758a0ab3").then(t)}},{path:"/archives/index.html",redirect:"/archives/"},{path:"/@pages/archivesPage.html",redirect:"/archives/"},{name:"v-2371ff82",path:"/pages/beb6c0bd8a66cea6/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-2371ff82").then(t)}},{path:"/pages/beb6c0bd8a66cea6/index.html",redirect:"/pages/beb6c0bd8a66cea6/"},{path:"/08.收藏夹/05.主题作者的收藏/01.网站.html",redirect:"/pages/beb6c0bd8a66cea6/"},{name:"v-c7d6fcb4",path:"/pages/47cf96/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-c7d6fcb4").then(t)}},{path:"/pages/47cf96/index.html",redirect:"/pages/47cf96/"},{path:"/08.收藏夹/05.主题作者的收藏/02.常用的前端轮子.html",redirect:"/pages/47cf96/"},{name:"v-3a807e33",path:"/tags/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-3a807e33").then(t)}},{path:"/tags/index.html",redirect:"/tags/"},{path:"/@pages/tagsPage.html",redirect:"/tags/"},{name:"v-367307b8",path:"/pages/f2e63f/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-367307b8").then(t)}},{path:"/pages/f2e63f/index.html",redirect:"/pages/f2e63f/"},{path:"/_posts/随笔/你知道的越多，不知道的也就越多.html",redirect:"/pages/f2e63f/"},{name:"v-114202a4",path:"/pages/2909c8/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-114202a4").then(t)}},{path:"/pages/2909c8/index.html",redirect:"/pages/2909c8/"},{path:"/_posts/随笔/复制粘贴搭建Hexo博客.html",redirect:"/pages/2909c8/"},{name:"v-14303cb8",path:"/pages/cd8bde/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-14303cb8").then(t)}},{path:"/pages/cd8bde/index.html",redirect:"/pages/cd8bde/"},{path:"/_posts/随笔/拥抱生活，拥抱快乐.html",redirect:"/pages/cd8bde/"},{name:"v-0925a2f8",path:"/pages/8292d8/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-0925a2f8").then(t)}},{path:"/pages/8292d8/index.html",redirect:"/pages/8292d8/"},{path:"/《Git》学习笔记/10.手册/00.常用Git命令清单.html",redirect:"/pages/8292d8/"},{name:"v-b855e89c",path:"/pages/c10281/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-b855e89c").then(t)}},{path:"/pages/c10281/index.html",redirect:"/pages/c10281/"},{path:"/《Git》学习笔记/10.手册/03.Git变基合并.html",redirect:"/pages/c10281/"},{name:"v-7e4aeb42",path:"/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-7e4aeb42").then(t)}},{path:"/index.html",redirect:"/"},{name:"v-56bfe10b",path:"/pages/4cbc21/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-56bfe10b").then(t)}},{path:"/pages/4cbc21/index.html",redirect:"/pages/4cbc21/"},{path:"/《Git》学习笔记/10.手册/06.Git命令思维导图.html",redirect:"/pages/4cbc21/"},{name:"v-03f07c11",path:"/pages/635088/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-03f07c11").then(t)}},{path:"/pages/635088/index.html",redirect:"/pages/635088/"},{path:"/《Git》学习笔记/20.文档笔记/10.Git基础与命令.html",redirect:"/pages/635088/"},{name:"v-487776ae",path:"/pages/1832fe/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-487776ae").then(t)}},{path:"/pages/1832fe/index.html",redirect:"/pages/1832fe/"},{path:"/《Git》学习笔记/20.文档笔记/100.Git工具-重写历史.html",redirect:"/pages/1832fe/"},{name:"v-1d80ae54",path:"/pages/d9e9c6/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-1d80ae54").then(t)}},{path:"/pages/d9e9c6/index.html",redirect:"/pages/d9e9c6/"},{path:"/《Git》学习笔记/20.文档笔记/110.Git工具-重置揭密.html",redirect:"/pages/d9e9c6/"},{name:"v-2c65660a",path:"/pages/4bef1a/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-2c65660a").then(t)}},{path:"/pages/4bef1a/index.html",redirect:"/pages/4bef1a/"},{path:"/《Git》学习笔记/20.文档笔记/20.Git分支-分支原理.html",redirect:"/pages/4bef1a/"},{name:"v-11db5011",path:"/pages/ea5a8c/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-11db5011").then(t)}},{path:"/pages/ea5a8c/index.html",redirect:"/pages/ea5a8c/"},{path:"/《Git》学习笔记/20.文档笔记/30.Git分支的新建与合并-分支操作.html",redirect:"/pages/ea5a8c/"},{name:"v-b4dc99c2",path:"/pages/a399b3/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-b4dc99c2").then(t)}},{path:"/pages/a399b3/index.html",redirect:"/pages/a399b3/"},{path:"/《Git》学习笔记/20.文档笔记/40.Git分支管理-查看分支.html",redirect:"/pages/a399b3/"},{name:"v-4f7dd079",path:"/pages/49ee30/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-4f7dd079").then(t)}},{path:"/pages/49ee30/index.html",redirect:"/pages/49ee30/"},{path:"/《Git》学习笔记/20.文档笔记/50.Git分支开发工作流.html",redirect:"/pages/49ee30/"},{name:"v-5d0ae742",path:"/pages/3a3247/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-5d0ae742").then(t)}},{path:"/pages/3a3247/index.html",redirect:"/pages/3a3247/"},{path:"/《Git》学习笔记/20.文档笔记/70.Git分支-变基.html",redirect:"/pages/3a3247/"},{name:"v-a3ae3a00",path:"/pages/574d62/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-a3ae3a00").then(t)}},{path:"/pages/574d62/index.html",redirect:"/pages/574d62/"},{path:"/《Git》学习笔记/20.文档笔记/60.Git分支-远程分支.html",redirect:"/pages/574d62/"},{name:"v-2a7a89bf",path:"/pages/c984d1/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-2a7a89bf").then(t)}},{path:"/pages/c984d1/index.html",redirect:"/pages/c984d1/"},{path:"/《Git》学习笔记/20.文档笔记/80.Git工具-查看修订版本.html",redirect:"/pages/c984d1/"},{name:"v-56c197ac",path:"/pages/76d859/",component:ol,beforeEnter:function(e,n,t){Gr("Layout","v-56c197ac").then(t)}},{path:"/pages/76d859/index.html",redirect:"/pages/76d859/"},{path:"/《Git》学习笔记/20.文档笔记/90.Git工具-交互式暂存.html",redirect:"/pages/76d859/"},{path:"*",component:ol}],sl={title:"",description:"",base:"/",headTags:[["link",{rel:"icon",href:"/img/JIMFKLIFE_favicon.svg"}],["meta",{name:"keywords",content:"后端博客,个人技术博客,后端,后端开发,技术文档,学习,面试,Java,MySQL,Linux,数据库,服务器,编程,学习,git,github"}],["meta",{name:"baidu-site-verification",content:"7F55weZDDc"}],["meta",{name:"theme-color",content:"#11a8cd"}]],pages:[{title:"Java",frontmatter:{pageComponent:{name:"Catalogue",data:{key:"01.Java",imgUrl:"/img/java-icon.svg",description:"Java、后端、面向对象"}},title:"Java",date:"2020-03-11T21:50:53.000Z",permalink:"/Java",sidebar:!1,article:!1,comment:!1,editLink:!1},regularPath:"/00.%E7%9B%AE%E5%BD%95%E9%A1%B5/01.Java.html",relativePath:"00.目录页/01.Java.md",key:"v-3df72aee",path:"/Java/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/04/11, 10:49:20",lastUpdatedTimestamp:164964536e4},{title:"英语",frontmatter:{pageComponent:{name:"Catalogue",data:{key:"05.英语",imgUrl:null,description:"记单词，学语法"}},title:"英语",date:"2022-12-03T20:22:51.000Z",permalink:"/english",sidebar:!1,article:!1,comment:!1,editLink:!1},regularPath:"/00.%E7%9B%AE%E5%BD%95%E9%A1%B5/05.%E8%8B%B1%E8%AF%AD.html",relativePath:"00.目录页/05.英语.md",key:"v-53e957a5",path:"/english/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/12/03, 17:31:39",lastUpdatedTimestamp:1670059899e3},{title:"MySQL",frontmatter:{pageComponent:{name:"Catalogue",data:{key:"02.MySQL",imgUrl:"/img/mysql-icon.svg",description:"MySQL、数据库、底层原理"}},title:"MySQL",date:"2020-03-11T21:50:54.000Z",permalink:"/mysql",sidebar:!1,article:!1,comment:!1,editLink:!1},regularPath:"/00.%E7%9B%AE%E5%BD%95%E9%A1%B5/02.MySQL.html",relativePath:"00.目录页/02.MySQL.md",key:"v-60f187e4",path:"/mysql/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/04/11, 10:49:20",lastUpdatedTimestamp:164964536e4},{title:"Linux",frontmatter:{pageComponent:{name:"Catalogue",data:{key:"03.Linux",imgUrl:"/img/linux-icon.svg",description:"Linux、服务器"}},title:"Linux",date:"2020-03-11T21:50:55.000Z",permalink:"/linux",sidebar:!1,article:!1,comment:!1,editLink:!1},regularPath:"/00.%E7%9B%AE%E5%BD%95%E9%A1%B5/03.Linux.html",relativePath:"00.目录页/03.Linux.md",key:"v-b3f3e478",path:"/linux/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/05/11, 19:11:52",lastUpdatedTimestamp:1652267512e3},{title:"技术",frontmatter:{pageComponent:{name:"Catalogue",data:{key:"04.技术",imgUrl:"/img/other.png",description:"技术文档、教程、技巧、总结等文章"}},title:"技术",date:"2020-03-11T21:50:55.000Z",permalink:"/technology",sidebar:!1,article:!1,comment:!1,editLink:!1},regularPath:"/00.%E7%9B%AE%E5%BD%95%E9%A1%B5/04.%E6%8A%80%E6%9C%AF.html",relativePath:"00.目录页/04.技术.md",key:"v-62aae746",path:"/technology/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/04/11, 10:49:20",lastUpdatedTimestamp:164964536e4},{title:"记录",frontmatter:{pageComponent:{name:"Catalogue",data:{key:"06.记录",imgUrl:null,description:"点滴记录，汇成江河"}},title:"记录",date:"2022-04-18T20:22:51.000Z",permalink:"/record",sidebar:!1,article:!1,comment:!1,editLink:!1},regularPath:"/00.%E7%9B%AE%E5%BD%95%E9%A1%B5/06.%E8%AE%B0%E5%BD%95.html",relativePath:"00.目录页/06.记录.md",key:"v-86f40b6c",path:"/record/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/12/03, 17:31:39",lastUpdatedTimestamp:1670059899e3},{title:"更多",frontmatter:{pageComponent:{name:"Catalogue",data:{key:"07.更多",imgUrl:"/img/more.png",description:"学习、面试、在线工具等更多文章和页面"}},title:"更多",date:"2020-03-11T21:50:56.000Z",permalink:"/more",sidebar:!1,article:!1,comment:!1,editLink:!1},regularPath:"/00.%E7%9B%AE%E5%BD%95%E9%A1%B5/07.%E6%9B%B4%E5%A4%9A.html",relativePath:"00.目录页/07.更多.md",key:"v-5092d7cd",path:"/more/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/12/03, 17:31:39",lastUpdatedTimestamp:1670059899e3},{title:"Theory：Scanning the input",frontmatter:{title:"Theory：Scanning the input",date:"2022-08-09T14:12:00.000Z",permalink:"/pages/73dc48/",tags:["Java basic"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/01.Java%20basic/00.Theory%EF%BC%9AScanning%20the%20input.html",relativePath:"01.Java/01.Hyperskill - Java/01.Java basic/00.Theory：Scanning the input.md",key:"v-145d67ee",path:"/pages/73dc48/",headers:[{level:2,title:"Reading data with a scanner",slug:"reading-data-with-a-scanner",normalizedTitle:"reading data with a scanner",charIndex:730},{level:2,title:"Reading a multiline input",slug:"reading-a-multiline-input",normalizedTitle:"reading a multiline input",charIndex:3786},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:6658}],headersStr:"Reading data with a scanner Reading a multiline input Conclusion",content:' * The standard input is a stream of data going into a program. It is supported by the operating system. By default, the standard input obtains data from the keyboard input but it\'s possible to redirect it from a file.\n   \n   Actually, not all programs need to use the standard input. But we will often use it here to help you master your programming skills! The typical way to solve programming problems is the following:\n   \n   1. Read data from the standard input (System.in);\n   2. Process data to obtain a result;\n   3. Output the result to the standard output (System.out).\n   \n   This type of code challenge can be easily tested by different formats of input data, and for this reason, we will use them a lot.\n   \n   \n   # Reading data with a scanner\n   \n   The simplest way to obtain data from the standard input is to use the standard class Scanner. It allows a program to read values of different types (string, numbers, etc) from the standard input. In this topic, we will consider reading data from the input.\n   \n   To use this class you should add the following import statement to the top of your file with the source code.\n   \n   import java.util.Scanner;\n   \n   \n   1\n   \n   \n   Then you add the following construction after the import:\n   \n   Scanner scanner = new Scanner(System.in);\n   \n   \n   1\n   \n   \n   With this line, we create an object of Scanner class, that enables us to use its methods. We will learn more about creating objects in other topics. System.in indicates that the program will read text that you type in the standard input. For now, you will always require this line exactly.\n   \n   There are two ways to read strings with a Scanner class. If your input is an integer number or a single word, you can read the data using next() method. As an example, the following code fragment reads the user’s name and prints hello message:\n   \n   String name = scanner.next();\n   \n   System.out.println("Hello, " + name + "!");\n   \n   \n   1\n   2\n   3\n   \n   \n   For instance, the user\'s name is James. The output of the program will be the following:\n   \n   Hello, James!\n   \n   \n   1\n   \n   \n   If the user\'s input is an integer number like 123, the program will output this number. Note that the next() method will store 123 or another integer number as a string, even if we know that this string consists of a number.\n   \n   Hello, 123!\n   \n   \n   1\n   \n\n提示\n\nThere are more specialized methods for reading other types of input values. In this topic, we only consider reading strings.\n\nBut, if the user prints a compound name like Erich Maria, the program will output only the first word:\n\nHello, Erich!\n\n\n1\n\n\nIn this case, you\'ll need another method, a nextLine() method, which reads and outputs the whole line:\n\nHello, Erich Maria!\n\n\n1\n\n\nAs you may notice, the next() method reads one word only and doesn\'t include any whitespace. By contrast, the nextLine() method includes all space characters it encounters.\n\n提示\n\nNote that in Java whitespace includes not only the space character, but mostly everything that looks empty when printed: a tab, the newline character, and other non-printing characters.\n\nIn this article, we are dealing with space and newline characters: technically, we produce a corresponding character when pressing Enter and starting a new line. The term "whitespace" is used to refer to either of them. The more correct term to refer to what we’ve called “word” is token: it is a piece of text surrounded by whitespace. We can say now that the next() method finds and returns the next token, while the nextLine() reads all data till the end of the current line.\n\nNow you can read a whole word and even a whole line invoking these two methods. To invoke both of them correctly, it is important to know the difference between them.\n\n\n# Reading a multiline input\n\nReading multiline input may still be a bit tricky: you should take into account the position of the cursor and the reading methods behavior.\n\nLet’s investigate this process with an example:\n\n|This is a simple\n\nmultiline input,\n\nthat is being read\n\n\n1\n2\n3\n4\n5\n\n\n| is a position of the cursor before reading the input.\n\nIf we invoke the next() method, the program will read the input till the whitespace, as indicated by the color blue:\n\nThis| is a simple\n\nmultiline input,\n\nthat is being read\n\n\n1\n2\n3\n4\n5\n\n\nAfter invoking the nextLine() method the program reads the whole line starting from the whitespace. This data is indicated by a green color. The nextLine() places the cursor at the beginning of a new line (if there is such a line in your input):\n\nThis is a simple\n\n|multiline input,\n\nthat is being read\n\n\n1\n2\n3\n4\n5\n\n\nThen, let\'s invoke the next() method two times. The first input is indicated by an orange color. You may see that the position of the cursor is right after the word and before the whitespace:\n\nThis is a simple\n\nmultiline| input,\n\nthat is being read\n\n\n1\n2\n3\n4\n5\n\n\nNow we invoke the next() method again. The program outputs the second word in the line without whitespace. It doesn\'t even matter how many space characters are there, because the next() method will skip the whitespace until it finds the next token.\n\nThe second input is indicated by light blue color. As you may see, the position of the cursor is still at the current line right before the new line and after the comma:\n\nThis is a simple\n\nmultiline input,|\n\nthat is being read\n\n\n1\n2\n3\n4\n5\n\n\nHere is a tricky thing about the nextLine() method that also shows a major difference between the next() and the nextLine() methods. As you already know, the program will read input from the position of the cursor till the new line (again, if there is such a line in your input). In this example the cursor is located before the new line: thus, the nextLine() method will return an empty line ("") and place the cursor at the beginning of a new line.\n\nThis is a simple\n\nmultiline input,\n\n|that is being read\n\n\n1\n2\n3\n4\n5\n\n\nTo sum up, let\'s look at the code as a whole and consider the variables we have just read:\n\nimport java.util.Scanner; \n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);  \n\n        String word1 = scanner.next(); // "This"\n        String line1 = scanner.nextLine(); // " is a simple" \n        String word2 = scanner.next(); // "multiline"\n        String word3 = scanner.next(); // "input,"\n        String line2 = scanner.nextLine(); // "" \n        \n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\nThis example may seem artificial, but it should help you to catch the difference between these two methods. Remember that usually the variables are named in a more expressive way.\n\n\n# Conclusion\n\nWe can read data from the standard input with a special Scanner class. The next() and the nextLine() methods will help you to read strings. Both of them are used for getting input, but they act differently. The next() method can read the input only till the whitespace while the nextLine() method reads the input till the end of the whole line.\n\nWe recommend you to use the class Scanner when solving programming problems. It is one of the simplest ways to get values from the standard input. More complex ways to read data will be discussed in further topics.',normalizedContent:' * the standard input is a stream of data going into a program. it is supported by the operating system. by default, the standard input obtains data from the keyboard input but it\'s possible to redirect it from a file.\n   \n   actually, not all programs need to use the standard input. but we will often use it here to help you master your programming skills! the typical way to solve programming problems is the following:\n   \n   1. read data from the standard input (system.in);\n   2. process data to obtain a result;\n   3. output the result to the standard output (system.out).\n   \n   this type of code challenge can be easily tested by different formats of input data, and for this reason, we will use them a lot.\n   \n   \n   # reading data with a scanner\n   \n   the simplest way to obtain data from the standard input is to use the standard class scanner. it allows a program to read values of different types (string, numbers, etc) from the standard input. in this topic, we will consider reading data from the input.\n   \n   to use this class you should add the following import statement to the top of your file with the source code.\n   \n   import java.util.scanner;\n   \n   \n   1\n   \n   \n   then you add the following construction after the import:\n   \n   scanner scanner = new scanner(system.in);\n   \n   \n   1\n   \n   \n   with this line, we create an object of scanner class, that enables us to use its methods. we will learn more about creating objects in other topics. system.in indicates that the program will read text that you type in the standard input. for now, you will always require this line exactly.\n   \n   there are two ways to read strings with a scanner class. if your input is an integer number or a single word, you can read the data using next() method. as an example, the following code fragment reads the user’s name and prints hello message:\n   \n   string name = scanner.next();\n   \n   system.out.println("hello, " + name + "!");\n   \n   \n   1\n   2\n   3\n   \n   \n   for instance, the user\'s name is james. the output of the program will be the following:\n   \n   hello, james!\n   \n   \n   1\n   \n   \n   if the user\'s input is an integer number like 123, the program will output this number. note that the next() method will store 123 or another integer number as a string, even if we know that this string consists of a number.\n   \n   hello, 123!\n   \n   \n   1\n   \n\n提示\n\nthere are more specialized methods for reading other types of input values. in this topic, we only consider reading strings.\n\nbut, if the user prints a compound name like erich maria, the program will output only the first word:\n\nhello, erich!\n\n\n1\n\n\nin this case, you\'ll need another method, a nextline() method, which reads and outputs the whole line:\n\nhello, erich maria!\n\n\n1\n\n\nas you may notice, the next() method reads one word only and doesn\'t include any whitespace. by contrast, the nextline() method includes all space characters it encounters.\n\n提示\n\nnote that in java whitespace includes not only the space character, but mostly everything that looks empty when printed: a tab, the newline character, and other non-printing characters.\n\nin this article, we are dealing with space and newline characters: technically, we produce a corresponding character when pressing enter and starting a new line. the term "whitespace" is used to refer to either of them. the more correct term to refer to what we’ve called “word” is token: it is a piece of text surrounded by whitespace. we can say now that the next() method finds and returns the next token, while the nextline() reads all data till the end of the current line.\n\nnow you can read a whole word and even a whole line invoking these two methods. to invoke both of them correctly, it is important to know the difference between them.\n\n\n# reading a multiline input\n\nreading multiline input may still be a bit tricky: you should take into account the position of the cursor and the reading methods behavior.\n\nlet’s investigate this process with an example:\n\n|this is a simple\n\nmultiline input,\n\nthat is being read\n\n\n1\n2\n3\n4\n5\n\n\n| is a position of the cursor before reading the input.\n\nif we invoke the next() method, the program will read the input till the whitespace, as indicated by the color blue:\n\nthis| is a simple\n\nmultiline input,\n\nthat is being read\n\n\n1\n2\n3\n4\n5\n\n\nafter invoking the nextline() method the program reads the whole line starting from the whitespace. this data is indicated by a green color. the nextline() places the cursor at the beginning of a new line (if there is such a line in your input):\n\nthis is a simple\n\n|multiline input,\n\nthat is being read\n\n\n1\n2\n3\n4\n5\n\n\nthen, let\'s invoke the next() method two times. the first input is indicated by an orange color. you may see that the position of the cursor is right after the word and before the whitespace:\n\nthis is a simple\n\nmultiline| input,\n\nthat is being read\n\n\n1\n2\n3\n4\n5\n\n\nnow we invoke the next() method again. the program outputs the second word in the line without whitespace. it doesn\'t even matter how many space characters are there, because the next() method will skip the whitespace until it finds the next token.\n\nthe second input is indicated by light blue color. as you may see, the position of the cursor is still at the current line right before the new line and after the comma:\n\nthis is a simple\n\nmultiline input,|\n\nthat is being read\n\n\n1\n2\n3\n4\n5\n\n\nhere is a tricky thing about the nextline() method that also shows a major difference between the next() and the nextline() methods. as you already know, the program will read input from the position of the cursor till the new line (again, if there is such a line in your input). in this example the cursor is located before the new line: thus, the nextline() method will return an empty line ("") and place the cursor at the beginning of a new line.\n\nthis is a simple\n\nmultiline input,\n\n|that is being read\n\n\n1\n2\n3\n4\n5\n\n\nto sum up, let\'s look at the code as a whole and consider the variables we have just read:\n\nimport java.util.scanner; \n\npublic class main {\n\n    public static void main(string[] args) {\n        scanner scanner = new scanner(system.in);  \n\n        string word1 = scanner.next(); // "this"\n        string line1 = scanner.nextline(); // " is a simple" \n        string word2 = scanner.next(); // "multiline"\n        string word3 = scanner.next(); // "input,"\n        string line2 = scanner.nextline(); // "" \n        \n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\nthis example may seem artificial, but it should help you to catch the difference between these two methods. remember that usually the variables are named in a more expressive way.\n\n\n# conclusion\n\nwe can read data from the standard input with a special scanner class. the next() and the nextline() methods will help you to read strings. both of them are used for getting input, but they act differently. the next() method can read the input only till the whitespace while the nextline() method reads the input till the end of the whole line.\n\nwe recommend you to use the class scanner when solving programming problems. it is one of the simplest ways to get values from the standard input. more complex ways to read data will be discussed in further topics.',charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：Arithmetic operations",frontmatter:{title:"Theory：Arithmetic operations",date:"2022-08-09T13:50:25.000Z",permalink:"/pages/e69669/",tags:["Java basic"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/01.Java%20basic/01.Theory%EF%BC%9AArithmetic%20operations.html",relativePath:"01.Java/01.Hyperskill - Java/01.Java basic/01.Theory：Arithmetic operations.md",key:"v-6fd7a454",path:"/pages/e69669/",headers:[{level:2,title:"Binary arithmetic operators",slug:"binary-arithmetic-operators",normalizedTitle:"binary arithmetic operators",charIndex:234},{level:2,title:"Writing complex expressions",slug:"writing-complex-expressions",normalizedTitle:"writing complex expressions",charIndex:1634},{level:2,title:"Unary operators",slug:"unary-operators",normalizedTitle:"unary operators",charIndex:2178},{level:2,title:"The precedence order",slug:"the-precedence-order",normalizedTitle:"the precedence order",charIndex:2626}],headersStr:"Binary arithmetic operators Writing complex expressions Unary operators The precedence order",content:"In real life, we often perform arithmetic operations. They help us to determine the change from a purchase, calculate the area of a room, count the number of people in a queue, and so on. The same operations are used in programs.\n\n\n# Binary arithmetic operators\n\nThe Java programming language provides operators to perform arithmetic operations:\n\n * addition +\n * subtraction -\n * multiplication *\n * division /\n * remainder %\n\nThe operators are called binary because they take two values as operands.\n\nThe following example prints results of addition, subtraction, and multiplication.\n\nSystem.out.println(13 + 25); // prints 38\nSystem.out.println(20 + 70); // prints 90\n\nSystem.out.println(70 - 30); // prints 40\nSystem.out.println(30 - 70); // prints -40\n\nSystem.out.println(21 * 3);  // prints 63\nSystem.out.println(20 * 10); // prints 200\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nThe / operator returns the integer part of the division of two integer numbers, and any fractional part is discarded.\n\nSystem.out.println(8 / 3); // prints 2\nSystem.out.println(41 / 5); // prints 8\n\n\n1\n2\n\n\nThe % in Java is the modulus or remainder operator. It returns the remainder of the division of two numbers. Note, that when the dividend is less than the divisor, the quotient is zero and the remainder equals the dividend. If you still feel uneasy about modulo operation, check out the wiki.\n\nSystem.out.println(10 % 3) // prints 1, because 10 divided by 3 leaves a remainder of 1\nSystem.out.println(12 % 4) // prints 0, because 12 divided by 4 leaves no remainder\nSystem.out.println(5 % 9) // prints 5, because 5 divided by 9 leaves a remainder of 5\n\n\n1\n2\n3\n\n\n\n# Writing complex expressions\n\nThe operations can be combined to write more complex expressions:\n\nSystem.out.println(1 + 3 * 4 - 2); // prints 11\n\n\n1\n\n\nThe calculation order coincides with arithmetic rules. Multiplication has a higher priority level than addition and subtraction, so the operation 3 * 4 is calculated first.\n\nTo specify the order of execution we can use parentheses as in the following:\n\nSystem.out.println((1 + 3) * (4 - 2)); // prints 8\n\n\n1\n\n\nAs in arithmetic, parentheses can be nested. You can also use them for clarity.\n\n\n# Unary operators\n\nA unary operator takes a single value as the operand.\n\n * The unary plus operator indicates a positive value. It's an optional operator.\n\nSystem.out.println(+5); // prints 5\n\n\n1\n\n * The unary minus operator negates a value or an expression.\n\nSystem.out.println(-8);  // prints -8\nSystem.out.println(-(100 + 4)); // prints -104\n\n\n1\n2\n\n\nThey both have a higher level of precedence than the multiplication and division operators.\n\n\n# The precedence order\n\nThere is a precedence order of all arithmetic operators, including parentheses. The list below is sorted from the highest to the lowest precedence level.\n\n * parentheses\n * unary plus/minus\n * multiplication, division\n * addition, subtraction",normalizedContent:"in real life, we often perform arithmetic operations. they help us to determine the change from a purchase, calculate the area of a room, count the number of people in a queue, and so on. the same operations are used in programs.\n\n\n# binary arithmetic operators\n\nthe java programming language provides operators to perform arithmetic operations:\n\n * addition +\n * subtraction -\n * multiplication *\n * division /\n * remainder %\n\nthe operators are called binary because they take two values as operands.\n\nthe following example prints results of addition, subtraction, and multiplication.\n\nsystem.out.println(13 + 25); // prints 38\nsystem.out.println(20 + 70); // prints 90\n\nsystem.out.println(70 - 30); // prints 40\nsystem.out.println(30 - 70); // prints -40\n\nsystem.out.println(21 * 3);  // prints 63\nsystem.out.println(20 * 10); // prints 200\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nthe / operator returns the integer part of the division of two integer numbers, and any fractional part is discarded.\n\nsystem.out.println(8 / 3); // prints 2\nsystem.out.println(41 / 5); // prints 8\n\n\n1\n2\n\n\nthe % in java is the modulus or remainder operator. it returns the remainder of the division of two numbers. note, that when the dividend is less than the divisor, the quotient is zero and the remainder equals the dividend. if you still feel uneasy about modulo operation, check out the wiki.\n\nsystem.out.println(10 % 3) // prints 1, because 10 divided by 3 leaves a remainder of 1\nsystem.out.println(12 % 4) // prints 0, because 12 divided by 4 leaves no remainder\nsystem.out.println(5 % 9) // prints 5, because 5 divided by 9 leaves a remainder of 5\n\n\n1\n2\n3\n\n\n\n# writing complex expressions\n\nthe operations can be combined to write more complex expressions:\n\nsystem.out.println(1 + 3 * 4 - 2); // prints 11\n\n\n1\n\n\nthe calculation order coincides with arithmetic rules. multiplication has a higher priority level than addition and subtraction, so the operation 3 * 4 is calculated first.\n\nto specify the order of execution we can use parentheses as in the following:\n\nsystem.out.println((1 + 3) * (4 - 2)); // prints 8\n\n\n1\n\n\nas in arithmetic, parentheses can be nested. you can also use them for clarity.\n\n\n# unary operators\n\na unary operator takes a single value as the operand.\n\n * the unary plus operator indicates a positive value. it's an optional operator.\n\nsystem.out.println(+5); // prints 5\n\n\n1\n\n * the unary minus operator negates a value or an expression.\n\nsystem.out.println(-8);  // prints -8\nsystem.out.println(-(100 + 4)); // prints -104\n\n\n1\n2\n\n\nthey both have a higher level of precedence than the multiplication and division operators.\n\n\n# the precedence order\n\nthere is a precedence order of all arithmetic operators, including parentheses. the list below is sorted from the highest to the lowest precedence level.\n\n * parentheses\n * unary plus/minus\n * multiplication, division\n * addition, subtraction",charsets:{},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：Ternary operator",frontmatter:{title:"Theory：Ternary operator",date:"2022-08-09T14:07:10.000Z",permalink:"/pages/1546f6/",tags:["Java basic"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/01.Java%20basic/05.Theory%EF%BC%9ATernary%20operator.html",relativePath:"01.Java/01.Hyperskill - Java/01.Java basic/05.Theory：Ternary operator.md",key:"v-5968f740",path:"/pages/1546f6/",headersStr:null,content:'The ternary operator is an operator which evaluates a condition and chooses one of two cases to execute. It is also called the conditional operator. The operator can be considered as a form of the if-then-else statement. The ternary operator should not be confused with the conditional statement, despite their similarity. This operator can be used in places where an expression is expected.\n\nSometimes the ternary operator is more readable and concise than the corresponding if statement.\n\nLet\'s start learning this operator with an example. Suppose we have to find the maximum of two int variables, a and b. It is easy to write using a conditional statement:\n\nint a = ...;\nint b = ...;\nint max = ...;\n\nif (a > b) {\n    max = a;\n} else {\n    max = b;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nHere is what an equivalent ternary operator looks like:\n\nint max = a > b ? a : b;\n\n\n1\n\n\nThis code is more concise than the code above, isn\'t it?\n\nThe general syntax of the ternary operator is the following:\n\nresult = condition ? trueCase : elseCase;\n\n\n1\n\n\nIt includes two special symbols ? and :.\n\nHere, the condition is a Boolean expression that evaluates to either true or false. If this expression is true, the ternary operator evaluates trueCase, otherwise elseCase is evaluated. It is important that trueCase and elseCase are expressions which can be reduced to a common type. This type determines the type of the result.\n\nLet\'s consider another example that prints whether a number is even or odd.\n\nint num = ...;  // it\'s initialized by a value\nSystem.out.println(num % 2 == 0 ? "even" : "odd");\n\n\n1\n2\n\n\nThis ternary operator consists of three operands: the value of the expression num % 2 == 0, and two string literals "even" and "odd". Its result type is String.\n\n提示\n\nNote: Java allows us to nest one ternary operator into another one, but it can be less readable than the corresponding conditional statement. If you do this, be careful.\n\nImagine you need to compare 2 integer numbers and print equal in case they are equal, more if the first one has a bigger value than the second and less otherwise. The task can be solved using a combination of 2 ternary operators:\n\nint a = ...; // it\'s initialized by a value\nint b = ...; // it\'s initialized by a value\nString result = a == b ? "equal" :\n                a > b ? "more" : "less";\n\n\n1\n2\n3\n4\n\n\nAt first, the outer ternary operator checks equality of a and b numbers. If it is true, equal is printed, otherwise, the nested ternary operator a > b ? "more" : "less" is calculated. To improve readability, the whole expression is divided into 2 lines.',normalizedContent:'the ternary operator is an operator which evaluates a condition and chooses one of two cases to execute. it is also called the conditional operator. the operator can be considered as a form of the if-then-else statement. the ternary operator should not be confused with the conditional statement, despite their similarity. this operator can be used in places where an expression is expected.\n\nsometimes the ternary operator is more readable and concise than the corresponding if statement.\n\nlet\'s start learning this operator with an example. suppose we have to find the maximum of two int variables, a and b. it is easy to write using a conditional statement:\n\nint a = ...;\nint b = ...;\nint max = ...;\n\nif (a > b) {\n    max = a;\n} else {\n    max = b;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nhere is what an equivalent ternary operator looks like:\n\nint max = a > b ? a : b;\n\n\n1\n\n\nthis code is more concise than the code above, isn\'t it?\n\nthe general syntax of the ternary operator is the following:\n\nresult = condition ? truecase : elsecase;\n\n\n1\n\n\nit includes two special symbols ? and :.\n\nhere, the condition is a boolean expression that evaluates to either true or false. if this expression is true, the ternary operator evaluates truecase, otherwise elsecase is evaluated. it is important that truecase and elsecase are expressions which can be reduced to a common type. this type determines the type of the result.\n\nlet\'s consider another example that prints whether a number is even or odd.\n\nint num = ...;  // it\'s initialized by a value\nsystem.out.println(num % 2 == 0 ? "even" : "odd");\n\n\n1\n2\n\n\nthis ternary operator consists of three operands: the value of the expression num % 2 == 0, and two string literals "even" and "odd". its result type is string.\n\n提示\n\nnote: java allows us to nest one ternary operator into another one, but it can be less readable than the corresponding conditional statement. if you do this, be careful.\n\nimagine you need to compare 2 integer numbers and print equal in case they are equal, more if the first one has a bigger value than the second and less otherwise. the task can be solved using a combination of 2 ternary operators:\n\nint a = ...; // it\'s initialized by a value\nint b = ...; // it\'s initialized by a value\nstring result = a == b ? "equal" :\n                a > b ? "more" : "less";\n\n\n1\n2\n3\n4\n\n\nat first, the outer ternary operator checks equality of a and b numbers. if it is true, equal is printed, otherwise, the nested ternary operator a > b ? "more" : "less" is calculated. to improve readability, the whole expression is divided into 2 lines.',charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：Relational operators",frontmatter:{title:"Theory：Relational operators",date:"2022-08-09T13:55:02.000Z",permalink:"/pages/298220/",tags:["Java basic"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/01.Java%20basic/04.Theory%EF%BC%9ARelational%20operators.html",relativePath:"01.Java/01.Hyperskill - Java/01.Java basic/04.Theory：Relational operators.md",key:"v-5e17d186",path:"/pages/298220/",headers:[{level:2,title:"List of relational operators",slug:"list-of-relational-operators",normalizedTitle:"list of relational operators",charIndex:5},{level:2,title:"Comparing integer numbers",slug:"comparing-integer-numbers",normalizedTitle:"comparing integer numbers",charIndex:404},{level:2,title:"Joining relational operations using logical operators",slug:"joining-relational-operations-using-logical-operators",normalizedTitle:"joining relational operations using logical operators",charIndex:1377},{level:2,title:"An example of a program",slug:"an-example-of-a-program",normalizedTitle:"an example of a program",charIndex:2426}],headersStr:"List of relational operators Comparing integer numbers Joining relational operations using logical operators An example of a program",content:" * # List of relational operators\n   \n   Java provides six relational operators to compare numbers:\n   \n   * == (equal to)\n   * != (not equal to)\n   * > (greater than)\n   * >= (greater than or equal to)\n   * < (less than)\n   * <= (less than or equal to)\n   \n   The result of applying a relational operator to its operands will be boolean (true or false) regardless of the types of operands.\n   \n   \n   # Comparing integer numbers\n   \n   Relational operators allow you to easily compare, among other things, two integer numbers. Here are some examples below:\n   \n   int one = 1;\n   int two = 2;\n   int three = 3;\n   int four = 4;\n   \n   boolean oneIsOne = one == one; // true\n   \n   boolean res1 = two <= three; // true\n   boolean res2 = two != four;  // true\n   boolean res3 = two > four;   // false\n   boolean res4 = one == three; // false\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   \n   \n   Relational operators can be used in mixed expressions together with arithmetic operators. In such expressions, relational operators have lesser priorities than arithmetic operators.\n   \n   In the following example, first of all, two sums are calculated, and then they are compared using the operator >.\n   \n   int number = 1000;\n   boolean result = number + 10 > number + 9; // 1010 > 1009 is true\n   \n   \n   1\n   2\n   \n   \n   The result is true.\n   \n   \n   # Joining relational operations using logical operators\n   \n   In Java, you cannot write an expression like a <= b <= c. Instead, you should join two boolean expressions using logical operators like || and &&.\n   \n   Here is an example:\n   \n   number > 100 && number < 200; // it means 100 < number < 200 \n   \n   \n   1\n   \n   \n   Also, we can write parts of the expression in parentheses to improve readability:\n   \n   (number > 100) && (number < 200);\n   \n   \n   1\n   \n   \n   But parentheses are not necessary here because relational operators have a higher priority than logical operators.\n   \n   Here is a more general example of variables.\n   \n   int number = ...             // it has a value\n   int low = 100, high = 200;   // borders\n   \n   boolean inRange = number > low && number < high;  // joining two expressions using AND.\n   \n   \n   1\n   2\n   3\n   4\n   \n   \n   The code checks if the value of number belongs to a range.\n   \n   So, logical operators allow you to join a sequence of relational operations into one expression.\n   \n   \n   # An example of a program\n   \n   Suppose there are three children in the sports class. You want to check if their heights are arranged in descending order. The following program reads three integer numbers h1, h2, and h3 and then checks if h1 >= h2 and h2 >= h3. Note that h means the height of a child.\n   \n   import java.util.Scanner;\n   \n   public class CheckDescOrder {\n       public static void main(String[] args) {\n           Scanner scanner = new Scanner(System.in);\n   \n           int h1 = scanner.nextInt();\n           int h2 = scanner.nextInt();\n           int h3 = scanner.nextInt();\n   \n           boolean descOrdered = (h1 >= h2) && (h2 >= h3);\n   \n           System.out.println(descOrdered);\n       }\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   \n   \n   Here are several input-output pairs:\n   \n   Input 1\n   \n   185 178 172\n   \n   \n   1\n   \n   \n   Output 1\n   \n   true\n   \n   \n   1\n   \n   \n   Input 2\n   \n   181 184 177\n   \n   \n   1\n   \n   \n   Output 2\n   \n   false\n   \n   \n   1\n   \n   \n   It is possible not to use an additional variable to store the boolean result before output:\n   \n   System.out.println((h1 >= h2) && (h2 >= h3));\n   \n   \n   1\n   \n   \n   But when your condition is quite long, it is hard to understand what the code does without some explanations. A variable with a good name provides such an explanation.",normalizedContent:" * # list of relational operators\n   \n   java provides six relational operators to compare numbers:\n   \n   * == (equal to)\n   * != (not equal to)\n   * > (greater than)\n   * >= (greater than or equal to)\n   * < (less than)\n   * <= (less than or equal to)\n   \n   the result of applying a relational operator to its operands will be boolean (true or false) regardless of the types of operands.\n   \n   \n   # comparing integer numbers\n   \n   relational operators allow you to easily compare, among other things, two integer numbers. here are some examples below:\n   \n   int one = 1;\n   int two = 2;\n   int three = 3;\n   int four = 4;\n   \n   boolean oneisone = one == one; // true\n   \n   boolean res1 = two <= three; // true\n   boolean res2 = two != four;  // true\n   boolean res3 = two > four;   // false\n   boolean res4 = one == three; // false\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   \n   \n   relational operators can be used in mixed expressions together with arithmetic operators. in such expressions, relational operators have lesser priorities than arithmetic operators.\n   \n   in the following example, first of all, two sums are calculated, and then they are compared using the operator >.\n   \n   int number = 1000;\n   boolean result = number + 10 > number + 9; // 1010 > 1009 is true\n   \n   \n   1\n   2\n   \n   \n   the result is true.\n   \n   \n   # joining relational operations using logical operators\n   \n   in java, you cannot write an expression like a <= b <= c. instead, you should join two boolean expressions using logical operators like || and &&.\n   \n   here is an example:\n   \n   number > 100 && number < 200; // it means 100 < number < 200 \n   \n   \n   1\n   \n   \n   also, we can write parts of the expression in parentheses to improve readability:\n   \n   (number > 100) && (number < 200);\n   \n   \n   1\n   \n   \n   but parentheses are not necessary here because relational operators have a higher priority than logical operators.\n   \n   here is a more general example of variables.\n   \n   int number = ...             // it has a value\n   int low = 100, high = 200;   // borders\n   \n   boolean inrange = number > low && number < high;  // joining two expressions using and.\n   \n   \n   1\n   2\n   3\n   4\n   \n   \n   the code checks if the value of number belongs to a range.\n   \n   so, logical operators allow you to join a sequence of relational operations into one expression.\n   \n   \n   # an example of a program\n   \n   suppose there are three children in the sports class. you want to check if their heights are arranged in descending order. the following program reads three integer numbers h1, h2, and h3 and then checks if h1 >= h2 and h2 >= h3. note that h means the height of a child.\n   \n   import java.util.scanner;\n   \n   public class checkdescorder {\n       public static void main(string[] args) {\n           scanner scanner = new scanner(system.in);\n   \n           int h1 = scanner.nextint();\n           int h2 = scanner.nextint();\n           int h3 = scanner.nextint();\n   \n           boolean descordered = (h1 >= h2) && (h2 >= h3);\n   \n           system.out.println(descordered);\n       }\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   \n   \n   here are several input-output pairs:\n   \n   input 1\n   \n   185 178 172\n   \n   \n   1\n   \n   \n   output 1\n   \n   true\n   \n   \n   1\n   \n   \n   input 2\n   \n   181 184 177\n   \n   \n   1\n   \n   \n   output 2\n   \n   false\n   \n   \n   1\n   \n   \n   it is possible not to use an additional variable to store the boolean result before output:\n   \n   system.out.println((h1 >= h2) && (h2 >= h3));\n   \n   \n   1\n   \n   \n   but when your condition is quite long, it is hard to understand what the code does without some explanations. a variable with a good name provides such an explanation.",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：The while and do-while loops",frontmatter:{title:"Theory：The while and do-while loops",date:"2022-08-09T14:43:27.000Z",permalink:"/pages/d22131/",tags:["Java basic"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/01.Java%20basic/06.Theory%EF%BC%9AThe%20while%20and%20do-while%20loops.html",relativePath:"01.Java/01.Hyperskill - Java/01.Java basic/06.Theory：The while and do-while loops.md",key:"v-1588f37d",path:"/pages/d22131/",headers:[{level:2,title:"The while loop",slug:"the-while-loop",normalizedTitle:"the while loop",charIndex:263},{level:2,title:"The do-while loop",slug:"the-do-while-loop",normalizedTitle:"the do-while loop",charIndex:2959},{level:2,title:"Reading a sequence with an unknown length",slug:"reading-a-sequence-with-an-unknown-length",normalizedTitle:"reading a sequence with an unknown length",charIndex:4608},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:5372}],headersStr:"The while loop The do-while loop Reading a sequence with an unknown length Conclusion",content:"There are a number of approaches to repeat a fragment of the code while a certain condition is true. In this lesson, we will learn how to do it by using two kinds of loops. They differ in the order of the repeated fragment execution and condition evaluation.\n\n\n# The while loop\n\nThe while loop consists of a block of code and a condition (a Boolean expression). If the condition is true, the code within the block is executed. This code repeats until the condition becomes false. Since this loop checks the condition before the block is executed, the control structure is also known as a pre-test loop. You can think of the while loop as a repetitive conditional statement.\n\nThe basic syntax of the while loop is the following:\n\nwhile (condition) {\n    // body: do something repetitive\n}\n\n\n1\n2\n3\n\n\nA loop's body can contain any correct Java statements including conditional statements and even other loops, the latter being called nested loops.\n\nIt is also possible to write an infinite loop if the condition is invariably true:\n\nwhile (true) {\n    // body: do something indefinitely\n}\n\n\n1\n2\n3\n\n\nThe application of infinite loops will be considered in the following topics.\n\nExample 1. The following loop prints integer numbers while a variable is less than 5.\n\nint i = 0;\nwhile (i < 5) {\n    System.out.println(i);\n    i++;\n}\n// next statement\n\n\n1\n2\n3\n4\n5\n6\n\n\nLet's explain how this loop works. First, the value 0 is assigned to the variable i. Before the first execution of the loop's body, the program checks if the condition i < 5 is true. In our case, i is 0, so the condition is true and the body of the loop starts executing. The body has two statements: displaying the current value of i and incrementing it by 1. After this is done, the expression i < 5 is evaluated again. Now i equals 1, so the condition is still true, and the loop's body is repeated again. This is repeated until i has taken the value 5, after which the expression i < 5 ceases to be true, and the execution of this loop terminates. The program proceeds to the next statement after the loop.\n\nThe output:\n\n0\n1\n2\n3\n4\n\n\n1\n2\n3\n4\n5\n\n\nNote, that the last value of i, that is 5, is not printed.\n\nExample 2. The following program displays English letters in a single line.\n\npublic class WhileDemo {\n\n    public static void main(String[] args) {\n        char letter = 'A';\n        while (letter <= 'Z') {\n            System.out.print(letter);\n            letter++;\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nThe program takes the first letter 'A' and then goes on like this:\n\n * if the letter is less than or equal to 'Z' the program goes to the loop's body;\n * inside the body, it prints the current character and letter takes the next alphabet letter.\n\nThe program prints:\n\nABCDEFGHIJKLMNOPQRSTUVWXYZ\n\n\n1\n\n\n提示\n\nRemember that it is possible to get the next character according to the Unicode table by using the increment operator. After the code execution, the letter will equal [.\n\n\n# The do-while loop\n\nIn the do-while loop, the body is executed first, while the condition is tested afterward. If the condition is true, statements within the block are executed again. This repeats until the condition becomes false. Because do-while loops check the condition after the block is executed, the control structure is often also known as a post-test loop. In contrast to the while loop, which tests the condition before the code within the block is executed, the do-while loop is an exit-condition loop. So, the code within the block is always executed at least once.\n\nThis loop contains three parts: the do keyword, a body, and while(condition):\n\ndo {\n    // body: do something\n} while (condition);\n\n\n1\n2\n3\n\n\nA good example of using it is a program that reads data from the standard input until a user enters a certain number or string. The following program reads integer numbers from the standard input and displays them. If the number 0 is entered, the program prints it and then stops. The following example demonstrates the do-while loop:\n\npublic class DoWhileDemo {\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        int value;\n        do {\n            value = scanner.nextInt();\n            System.out.println(value);\n        } while (value != 0);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nInput numbers:\n\n1 2 4 0 3\n\n\n1\n\n\nThe program prints:\n\n1\n2\n4\n0\n\n\n1\n2\n3\n4\n\n\n提示\n\nNote, that as well as the while loop, the do-while loop can be infinite.\n\nIn practice, the do-while loop is used less than the while loop. It is used when code inside the loop must be executed at least once.\n\n\n# Reading a sequence with an unknown length\n\nThe while loop can also be used to read a sequence of characters of an arbitrary length. For that, we can invoke the hasNextInt() method of Scanner inside the condition. The method returns true if the next element is an integer number and false otherwise.\n\nHere is a code that calculates the sum of all elements from the provided sequence:\n\nScanner scanner = new Scanner(System.in);\n\nint sum = 0;\nwhile (scanner.hasNextInt()) {\n    int elem = scanner.nextInt();\n    sum += elem;\n}\n\nSystem.out.println(sum);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nIf the input sequence is 1 2 3, the code prints 6, if it is 5 18 9 23 4, the code prints 59.\n\nAs you see, the while loop can be used to solve different interesting tasks in your programs.\n\n\n# Conclusion\n\nThere are different ways to perform some fragment of your code several times. In this topic, we've discussed two alternative ways to use loops that are based on conditional statement evaluation. If you want to check the condition first, and based on the result perform the operations or ignore them at all, the while loop is your choice. If you want to do one iteration of the loop in any case and then evaluate the condition for repetition, then choose do-while. Both types of loops can be used to read a sequence from the standard input: for do-while, you may use some stop value to terminate the loop, for while, use the hasNext() method to check that the input is over.",normalizedContent:"there are a number of approaches to repeat a fragment of the code while a certain condition is true. in this lesson, we will learn how to do it by using two kinds of loops. they differ in the order of the repeated fragment execution and condition evaluation.\n\n\n# the while loop\n\nthe while loop consists of a block of code and a condition (a boolean expression). if the condition is true, the code within the block is executed. this code repeats until the condition becomes false. since this loop checks the condition before the block is executed, the control structure is also known as a pre-test loop. you can think of the while loop as a repetitive conditional statement.\n\nthe basic syntax of the while loop is the following:\n\nwhile (condition) {\n    // body: do something repetitive\n}\n\n\n1\n2\n3\n\n\na loop's body can contain any correct java statements including conditional statements and even other loops, the latter being called nested loops.\n\nit is also possible to write an infinite loop if the condition is invariably true:\n\nwhile (true) {\n    // body: do something indefinitely\n}\n\n\n1\n2\n3\n\n\nthe application of infinite loops will be considered in the following topics.\n\nexample 1. the following loop prints integer numbers while a variable is less than 5.\n\nint i = 0;\nwhile (i < 5) {\n    system.out.println(i);\n    i++;\n}\n// next statement\n\n\n1\n2\n3\n4\n5\n6\n\n\nlet's explain how this loop works. first, the value 0 is assigned to the variable i. before the first execution of the loop's body, the program checks if the condition i < 5 is true. in our case, i is 0, so the condition is true and the body of the loop starts executing. the body has two statements: displaying the current value of i and incrementing it by 1. after this is done, the expression i < 5 is evaluated again. now i equals 1, so the condition is still true, and the loop's body is repeated again. this is repeated until i has taken the value 5, after which the expression i < 5 ceases to be true, and the execution of this loop terminates. the program proceeds to the next statement after the loop.\n\nthe output:\n\n0\n1\n2\n3\n4\n\n\n1\n2\n3\n4\n5\n\n\nnote, that the last value of i, that is 5, is not printed.\n\nexample 2. the following program displays english letters in a single line.\n\npublic class whiledemo {\n\n    public static void main(string[] args) {\n        char letter = 'a';\n        while (letter <= 'z') {\n            system.out.print(letter);\n            letter++;\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nthe program takes the first letter 'a' and then goes on like this:\n\n * if the letter is less than or equal to 'z' the program goes to the loop's body;\n * inside the body, it prints the current character and letter takes the next alphabet letter.\n\nthe program prints:\n\nabcdefghijklmnopqrstuvwxyz\n\n\n1\n\n\n提示\n\nremember that it is possible to get the next character according to the unicode table by using the increment operator. after the code execution, the letter will equal [.\n\n\n# the do-while loop\n\nin the do-while loop, the body is executed first, while the condition is tested afterward. if the condition is true, statements within the block are executed again. this repeats until the condition becomes false. because do-while loops check the condition after the block is executed, the control structure is often also known as a post-test loop. in contrast to the while loop, which tests the condition before the code within the block is executed, the do-while loop is an exit-condition loop. so, the code within the block is always executed at least once.\n\nthis loop contains three parts: the do keyword, a body, and while(condition):\n\ndo {\n    // body: do something\n} while (condition);\n\n\n1\n2\n3\n\n\na good example of using it is a program that reads data from the standard input until a user enters a certain number or string. the following program reads integer numbers from the standard input and displays them. if the number 0 is entered, the program prints it and then stops. the following example demonstrates the do-while loop:\n\npublic class dowhiledemo {\n\n    public static void main(string[] args) {\n        scanner scanner = new scanner(system.in);\n\n        int value;\n        do {\n            value = scanner.nextint();\n            system.out.println(value);\n        } while (value != 0);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\ninput numbers:\n\n1 2 4 0 3\n\n\n1\n\n\nthe program prints:\n\n1\n2\n4\n0\n\n\n1\n2\n3\n4\n\n\n提示\n\nnote, that as well as the while loop, the do-while loop can be infinite.\n\nin practice, the do-while loop is used less than the while loop. it is used when code inside the loop must be executed at least once.\n\n\n# reading a sequence with an unknown length\n\nthe while loop can also be used to read a sequence of characters of an arbitrary length. for that, we can invoke the hasnextint() method of scanner inside the condition. the method returns true if the next element is an integer number and false otherwise.\n\nhere is a code that calculates the sum of all elements from the provided sequence:\n\nscanner scanner = new scanner(system.in);\n\nint sum = 0;\nwhile (scanner.hasnextint()) {\n    int elem = scanner.nextint();\n    sum += elem;\n}\n\nsystem.out.println(sum);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nif the input sequence is 1 2 3, the code prints 6, if it is 5 18 9 23 4, the code prints 59.\n\nas you see, the while loop can be used to solve different interesting tasks in your programs.\n\n\n# conclusion\n\nthere are different ways to perform some fragment of your code several times. in this topic, we've discussed two alternative ways to use loops that are based on conditional statement evaluation. if you want to check the condition first, and based on the result perform the operations or ignore them at all, the while loop is your choice. if you want to do one iteration of the loop in any case and then evaluate the condition for repetition, then choose do-while. both types of loops can be used to read a sequence from the standard input: for do-while, you may use some stop value to terminate the loop, for while, use the hasnext() method to check that the input is over.",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：Branching statements",frontmatter:{title:"Theory：Branching statements",date:"2022-08-09T13:59:48.000Z",permalink:"/pages/4e67a4/",tags:["Java basic"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/01.Java%20basic/07.Theory%EF%BC%9ABranching%20statements.html",relativePath:"01.Java/01.Hyperskill - Java/01.Java basic/07.Theory：Branching statements.md",key:"v-6791dec0",path:"/pages/4e67a4/",headers:[{level:2,title:"The break statement",slug:"the-break-statement",normalizedTitle:"the break statement",charIndex:126},{level:2,title:"The continue statement",slug:"the-continue-statement",normalizedTitle:"the continue statement",charIndex:2074}],headersStr:"The break statement The continue statement",content:'Branching statements are used to alter the standard behavior of loops; they can terminate a loop or skip some iterations.\n\n\n# The break statement\n\nThe break statement has two uses:\n\n * it terminates the current loop of any type (for, while, do-while);\n * it terminates a case in the switch statement;\n\nIn this topic, we will learn how to use it to terminate loops.\n\nThe following example demonstrates a loop that includes one break.\n\nint i = 10;\nwhile (true) { // the condition to continue the loop\n    if (i == 0) { // the condition to perform the break that stops this loop \n        break;\n    }\n    i--;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nIn the code above, the condition to continue the loop is always true, but it will be successfully stopped when the variable i becomes 0 through the use of break inside the conditional statement.\n\nThe break statement terminates only the loop in which it is currently located. If this loop is performed inside another loop, the outer loop won\'t be stopped.\n\nThe following code prints a ladder of numbers.\n\nfor (int i = 0; i < 10; i++) {\n    for (int j = 0; j < 10; j++) {\n        System.out.print(j + " ");\n        if (i == j) {\n            break;\n        }\n    }\n    System.out.println();\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nThe break statement can\'t stop the outer loop (with variable i) and the code prints:\n\n0 \n0 1 \n0 1 2 \n0 1 2 3 \n0 1 2 3 4 \n0 1 2 3 4 5 \n0 1 2 3 4 5 6 \n0 1 2 3 4 5 6 7 \n0 1 2 3 4 5 6 7 8 \n0 1 2 3 4 5 6 7 8 9 \n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nTo stop the outer loop we\'d like to declare a Boolean variable stopped and use it as a special Boolean flag.\n\nboolean stopped = false;\nfor (int i = 0; (i < 10) && !stopped; i++) {\n    for (int j = 0; j < 10; j++) {\n        System.out.print(j + " ");\n        if (i == j) {\n            stopped = true;\n            break;\n        }\n     }\n    System.out.println();\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\nNow, the program\'s output is not the same:\n\n0\n\n\n1\n\n\nThere is another way to stop the outer loop: the labeled break operator. However, it\'s not good practice to use it. Google it if you are really interested.\n\n\n# The continue statement\n\nIt causes a loop to skip the current iteration and go to the next one.\n\nThis statement can be used inside any kind of loops.\n\n * inside the for-loop, the continue causes control to immediately move to the increment/decrement statement;\n * inside the while or do-while loop, control immediately moves to the condition.\n\nIn the following example, a sequence of numbers is output. Odd numbers are skipped.\n\nint n = 10;\nfor (int i = 0; i < n; i++) {\n    if (i % 2 != 0) {\n        continue;\n    }\n    System.out.print(i + " ");\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nThe output:\n\n0 2 4 6 8\n\n\n1\n\n\nThe continue statement and the break statement only affect the loop in which they are located. The continue statement cannot skip the current iteration of the outer loop.\n\nOften, we can rewrite our loop without using the continue statement. Here is an example:\n\nint n = 10;\nfor (int i = 0; i < n; i++) { \n    if (i % 2 == 0) {\n        System.out.print(i + " ");\n    } \n}\n\n\n1\n2\n3\n4\n5\n6\n\n\nThe result is the same as above, but the code became shorter and more readable.\n\nIt is important to note that the widespread use of branching statements leads to poorly-structured code because conditions in your loops are not actually what you need to do. So, use them wisely — only when it helps to make code shorter and easier to understand for humans.',normalizedContent:'branching statements are used to alter the standard behavior of loops; they can terminate a loop or skip some iterations.\n\n\n# the break statement\n\nthe break statement has two uses:\n\n * it terminates the current loop of any type (for, while, do-while);\n * it terminates a case in the switch statement;\n\nin this topic, we will learn how to use it to terminate loops.\n\nthe following example demonstrates a loop that includes one break.\n\nint i = 10;\nwhile (true) { // the condition to continue the loop\n    if (i == 0) { // the condition to perform the break that stops this loop \n        break;\n    }\n    i--;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nin the code above, the condition to continue the loop is always true, but it will be successfully stopped when the variable i becomes 0 through the use of break inside the conditional statement.\n\nthe break statement terminates only the loop in which it is currently located. if this loop is performed inside another loop, the outer loop won\'t be stopped.\n\nthe following code prints a ladder of numbers.\n\nfor (int i = 0; i < 10; i++) {\n    for (int j = 0; j < 10; j++) {\n        system.out.print(j + " ");\n        if (i == j) {\n            break;\n        }\n    }\n    system.out.println();\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nthe break statement can\'t stop the outer loop (with variable i) and the code prints:\n\n0 \n0 1 \n0 1 2 \n0 1 2 3 \n0 1 2 3 4 \n0 1 2 3 4 5 \n0 1 2 3 4 5 6 \n0 1 2 3 4 5 6 7 \n0 1 2 3 4 5 6 7 8 \n0 1 2 3 4 5 6 7 8 9 \n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nto stop the outer loop we\'d like to declare a boolean variable stopped and use it as a special boolean flag.\n\nboolean stopped = false;\nfor (int i = 0; (i < 10) && !stopped; i++) {\n    for (int j = 0; j < 10; j++) {\n        system.out.print(j + " ");\n        if (i == j) {\n            stopped = true;\n            break;\n        }\n     }\n    system.out.println();\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\nnow, the program\'s output is not the same:\n\n0\n\n\n1\n\n\nthere is another way to stop the outer loop: the labeled break operator. however, it\'s not good practice to use it. google it if you are really interested.\n\n\n# the continue statement\n\nit causes a loop to skip the current iteration and go to the next one.\n\nthis statement can be used inside any kind of loops.\n\n * inside the for-loop, the continue causes control to immediately move to the increment/decrement statement;\n * inside the while or do-while loop, control immediately moves to the condition.\n\nin the following example, a sequence of numbers is output. odd numbers are skipped.\n\nint n = 10;\nfor (int i = 0; i < n; i++) {\n    if (i % 2 != 0) {\n        continue;\n    }\n    system.out.print(i + " ");\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nthe output:\n\n0 2 4 6 8\n\n\n1\n\n\nthe continue statement and the break statement only affect the loop in which they are located. the continue statement cannot skip the current iteration of the outer loop.\n\noften, we can rewrite our loop without using the continue statement. here is an example:\n\nint n = 10;\nfor (int i = 0; i < n; i++) { \n    if (i % 2 == 0) {\n        system.out.print(i + " ");\n    } \n}\n\n\n1\n2\n3\n4\n5\n6\n\n\nthe result is the same as above, but the code became shorter and more readable.\n\nit is important to note that the widespread use of branching statements leads to poorly-structured code because conditions in your loops are not actually what you need to do. so, use them wisely — only when it helps to make code shorter and easier to understand for humans.',charsets:{},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：Increment and decrement",frontmatter:{title:"Theory：Increment and decrement",date:"2022-08-09T14:21:23.000Z",permalink:"/pages/a7b5a4/",tags:["Java basic"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/01.Java%20basic/03.Theory%EF%BC%9AIncrement%20and%20decrement.html",relativePath:"01.Java/01.Hyperskill - Java/01.Java basic/03.Theory：Increment and decrement.md",key:"v-69d2555a",path:"/pages/a7b5a4/",headers:[{level:2,title:"Using ++ and -- in Java",slug:"using-and-in-java",normalizedTitle:"using ++ and -- in java",charIndex:322},{level:2,title:"Prefix and postfix forms",slug:"prefix-and-postfix-forms",normalizedTitle:"prefix and postfix forms",charIndex:619}],headersStr:"Using ++ and -- in Java Prefix and postfix forms",content:"In this topic, we will discuss one of the most famous operations in programming: increment. It is used in many programming languages including Java to increase a variable by one. Fun fact: the name of C++ programming language is a reference to this operation, signifying the evolutionary nature of the changes from C.\n\n\n# Using ++ and -- in Java\n\nJava has two opposite operations called increment (++) and decrement (--) to increase/decrease the value of a variable by one.\n\nint n = 10;\nn++; // 11\nn--; // 10\n\n\n1\n2\n3\n\n\nThe code above is actually the same as below.\n\nint n = 10;\nn += 1; // 11\nn -= 1; // 10\n\n\n1\n2\n3\n\n\n\n# Prefix and postfix forms\n\nBoth increment and decrement operators have two forms which are very important when using the result in the current statement:\n\n * prefix (++n or --n) increases/decreases the value of a variable before it is used;\n * postfix (n++ or n--) increases/decreases the value of a variable after it is used.\n\nThe following examples demonstrate both forms of increment.\n\nPrefix increment:\n\nint a = 4;\nint b = ++a;\n\nSystem.out.println(a); // 5\nSystem.out.println(b); // 5\n\n\n1\n2\n3\n4\n5\n\n\nIn this case, the value of a has been incremented and then assigned to b. So, b is 5.\n\nPostfix increment:\n\nint a = 4;\nint b = a++;\n\nSystem.out.println(a); // 5\nSystem.out.println(b); // 4\n\n\n1\n2\n3\n4\n5\n\n\nIn Java, the postfix operator has higher precedence than the assignment operator. However, it returns the original value of a, not the incremented one. That's why when we assign a++ to b, we actually assign 4, and then variable a is incremented. So, b is 4 and a is 5.\n\nIf that's still not clear enough for you, take a look at the code:\n\nint a = 4;\nSystem.out.println(a++ + a); // this is 9\n\n\n1\n2\n\n\nWe hope that now you fully understand increment and decrement and their prefix and postfix forms.",normalizedContent:"in this topic, we will discuss one of the most famous operations in programming: increment. it is used in many programming languages including java to increase a variable by one. fun fact: the name of c++ programming language is a reference to this operation, signifying the evolutionary nature of the changes from c.\n\n\n# using ++ and -- in java\n\njava has two opposite operations called increment (++) and decrement (--) to increase/decrease the value of a variable by one.\n\nint n = 10;\nn++; // 11\nn--; // 10\n\n\n1\n2\n3\n\n\nthe code above is actually the same as below.\n\nint n = 10;\nn += 1; // 11\nn -= 1; // 10\n\n\n1\n2\n3\n\n\n\n# prefix and postfix forms\n\nboth increment and decrement operators have two forms which are very important when using the result in the current statement:\n\n * prefix (++n or --n) increases/decreases the value of a variable before it is used;\n * postfix (n++ or n--) increases/decreases the value of a variable after it is used.\n\nthe following examples demonstrate both forms of increment.\n\nprefix increment:\n\nint a = 4;\nint b = ++a;\n\nsystem.out.println(a); // 5\nsystem.out.println(b); // 5\n\n\n1\n2\n3\n4\n5\n\n\nin this case, the value of a has been incremented and then assigned to b. so, b is 5.\n\npostfix increment:\n\nint a = 4;\nint b = a++;\n\nsystem.out.println(a); // 5\nsystem.out.println(b); // 4\n\n\n1\n2\n3\n4\n5\n\n\nin java, the postfix operator has higher precedence than the assignment operator. however, it returns the original value of a, not the incremented one. that's why when we assign a++ to b, we actually assign 4, and then variable a is incremented. so, b is 4 and a is 5.\n\nif that's still not clear enough for you, take a look at the code:\n\nint a = 4;\nsystem.out.println(a++ + a); // this is 9\n\n\n1\n2\n\n\nwe hope that now you fully understand increment and decrement and their prefix and postfix forms.",charsets:{},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：Integer types and operations",frontmatter:{title:"Theory：Integer types and operations",date:"2022-08-09T14:33:55.000Z",permalink:"/pages/7d5da8/",tags:["Java basic"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/01.Java%20basic/02.Theory%EF%BC%9AInteger%20types%20and%20operations.html",relativePath:"01.Java/01.Hyperskill - Java/01.Java basic/02.Theory：Integer types and operations.md",key:"v-f087bd4c",path:"/pages/7d5da8/",headers:[{level:2,title:"Integer types: the basics",slug:"integer-types-the-basics",normalizedTitle:"integer types: the basics",charIndex:373},{level:2,title:"The forms of the assignment operator",slug:"the-forms-of-the-assignment-operator",normalizedTitle:"the forms of the assignment operator",charIndex:1698},{level:2,title:"Reading numbers from the standard input",slug:"reading-numbers-from-the-standard-input",normalizedTitle:"reading numbers from the standard input",charIndex:2119},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:2974}],headersStr:"Integer types: the basics The forms of the assignment operator Reading numbers from the standard input Conclusion",content:"Java provides several types which represent integer numbers including positive, negative, and zero. In practice, the most used types are int and long. The first type can store numbers from a smaller range than the second one, but it is often enough (especially, in this topic). You can perform all arithmetic operations (+, -, *, /, %) with variables of integer types.\n\n\n# Integer types: the basics\n\nLet's look at some examples below.\n\nint two = 2;\nint ten = 10;\n\nint twelve = two + ten; // 12\nint eight = ten - two;  // 8\nint twenty = two * ten; // 20\nint five = ten / two;   // 5\nint zero = ten % two;   // 0, no remainder\n\nint minusTwo = -two; // -2\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nThis code demonstrates how to assign values to int variables as well as how to perform arithmetic operations with them.\n\nTo improve the readability of your code, the special underscore character _ can be used to separate groups of digits within a number.\n\nint million = 1_000_000;\n\n\n1\n\n\nYou may also print a value of an int variable:\n\nint number = 100;\nSystem.out.println(number); // 100\n\n\n1\n2\n\n\nAll arithmetic operations work with the long type as well.\n\nlong one = 1L;\nlong twentyTwo = 22L; // L or l is a literal for longs\nlong bigNumber = 100_000_000_000L;\n\nlong result = bigNumber + twentyTwo - one; \nSystem.out.println(result); // 100000000021\n\n\n1\n2\n3\n4\n5\n6\n\n\nIf a number ends with the letter L or l, it is considered as long, otherwise, it is int. We recommend that you use the uppercase letter L because the lower case letter l is very similar to the digit 1.\n\n提示\n\nUse long numbers only if it is really necessary (when you deal with numbers larger than two billion). In other situations, prefer int numbers.\n\n\n# The forms of the assignment operator\n\nSuppose you want to add some value to a variable. You may write something like this:\n\nint n = 10;\nn = n + 4; // 14\n\n\n1\n2\n\n\nThe assignment operator = has several forms which combine it with an operation to avoid repeating the variable twice:\n\nint n = 10;\nn += 4; // 14\n\n\n1\n2\n\n\nAs you can see, this form looks more concise. There are a few other possible forms such as *=, /=, %=.\n\n\n# Reading numbers from the standard input\n\nAs a rule, to solve a problem you need to read some data from the outside world, process it, and output the result. The following program reads two numbers from the standard input, adds them, and prints the sum.\n\nimport java.util.Scanner;\n\nclass Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        \n        int a = scanner.nextInt();\n        int b = scanner.nextInt();\n\n        int sum = a + b;\n\n        System.out.println(sum);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\nThis simple code uses Scanner to read data.\n\nIf we know that the input numbers can be quite large, we can read long's instead of int's:\n\nlong a = scanner.nextLong();\nlong b = scanner.nextLong();\n\nlong sum = a + b;\n\n\n1\n2\n3\n4\n\n\nSee? No more lines need to be changed in this code.\n\n\n# Conclusion\n\nIn this topic, you learned about using integer types int and long to perform various arithmetic operations. Now you have enough knowledge to write useful programs that process data. You may use the template above for solving this topic's code challenges. Try to give meaningful names to variables when solving problems.",normalizedContent:"java provides several types which represent integer numbers including positive, negative, and zero. in practice, the most used types are int and long. the first type can store numbers from a smaller range than the second one, but it is often enough (especially, in this topic). you can perform all arithmetic operations (+, -, *, /, %) with variables of integer types.\n\n\n# integer types: the basics\n\nlet's look at some examples below.\n\nint two = 2;\nint ten = 10;\n\nint twelve = two + ten; // 12\nint eight = ten - two;  // 8\nint twenty = two * ten; // 20\nint five = ten / two;   // 5\nint zero = ten % two;   // 0, no remainder\n\nint minustwo = -two; // -2\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nthis code demonstrates how to assign values to int variables as well as how to perform arithmetic operations with them.\n\nto improve the readability of your code, the special underscore character _ can be used to separate groups of digits within a number.\n\nint million = 1_000_000;\n\n\n1\n\n\nyou may also print a value of an int variable:\n\nint number = 100;\nsystem.out.println(number); // 100\n\n\n1\n2\n\n\nall arithmetic operations work with the long type as well.\n\nlong one = 1l;\nlong twentytwo = 22l; // l or l is a literal for longs\nlong bignumber = 100_000_000_000l;\n\nlong result = bignumber + twentytwo - one; \nsystem.out.println(result); // 100000000021\n\n\n1\n2\n3\n4\n5\n6\n\n\nif a number ends with the letter l or l, it is considered as long, otherwise, it is int. we recommend that you use the uppercase letter l because the lower case letter l is very similar to the digit 1.\n\n提示\n\nuse long numbers only if it is really necessary (when you deal with numbers larger than two billion). in other situations, prefer int numbers.\n\n\n# the forms of the assignment operator\n\nsuppose you want to add some value to a variable. you may write something like this:\n\nint n = 10;\nn = n + 4; // 14\n\n\n1\n2\n\n\nthe assignment operator = has several forms which combine it with an operation to avoid repeating the variable twice:\n\nint n = 10;\nn += 4; // 14\n\n\n1\n2\n\n\nas you can see, this form looks more concise. there are a few other possible forms such as *=, /=, %=.\n\n\n# reading numbers from the standard input\n\nas a rule, to solve a problem you need to read some data from the outside world, process it, and output the result. the following program reads two numbers from the standard input, adds them, and prints the sum.\n\nimport java.util.scanner;\n\nclass main {\n    public static void main(string[] args) {\n        scanner scanner = new scanner(system.in);\n        \n        int a = scanner.nextint();\n        int b = scanner.nextint();\n\n        int sum = a + b;\n\n        system.out.println(sum);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\nthis simple code uses scanner to read data.\n\nif we know that the input numbers can be quite large, we can read long's instead of int's:\n\nlong a = scanner.nextlong();\nlong b = scanner.nextlong();\n\nlong sum = a + b;\n\n\n1\n2\n3\n4\n\n\nsee? no more lines need to be changed in this code.\n\n\n# conclusion\n\nin this topic, you learned about using integer types int and long to perform various arithmetic operations. now you have enough knowledge to write useful programs that process data. you may use the template above for solving this topic's code challenges. try to give meaningful names to variables when solving problems.",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：String",frontmatter:{title:"Theory：String",date:"2022-08-09T14:08:09.000Z",permalink:"/pages/2c54b1/",tags:["Java basic","String"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/01.Java%20basic/09.Theory%EF%BC%9AString.html",relativePath:"01.Java/01.Hyperskill - Java/01.Java basic/09.Theory：String.md",key:"v-0ab66e7a",path:"/pages/2c54b1/",headers:[{level:2,title:"The String type",slug:"the-string-type",normalizedTitle:"the string type",charIndex:2},{level:2,title:"Creating strings",slug:"creating-strings",normalizedTitle:"creating strings",charIndex:575},{level:2,title:"Get the length and characters of a string",slug:"get-the-length-and-characters-of-a-string",normalizedTitle:"get the length and characters of a string",charIndex:1551},{level:2,title:"Useful methods of strings",slug:"useful-methods-of-strings",normalizedTitle:"useful methods of strings",charIndex:2170},{level:2,title:"Exceptions when processing strings",slug:"exceptions-when-processing-strings",normalizedTitle:"exceptions when processing strings",charIndex:3919},{level:2,title:"Concatenating strings",slug:"concatenating-strings",normalizedTitle:"concatenating strings",charIndex:4537},{level:2,title:"Appending values to a string",slug:"appending-values-to-a-string",normalizedTitle:"appending values to a string",charIndex:5198},{level:2,title:"How to compare strings correctly?",slug:"how-to-compare-strings-correctly",normalizedTitle:"how to compare strings correctly?",charIndex:5932}],headersStr:"The String type Creating strings Get the length and characters of a string Useful methods of strings Exceptions when processing strings Concatenating strings Appending values to a string How to compare strings correctly?",content:'# The String type\n\nString is a reference type consisting of characters. It is one of the most widely used types in Java. Here is an example of a string: "Hello, Java". This string is a sequence of 11 characters, including one space.\n\nThis type has some features:\n\n * immutable type: it\'s impossible to change a character in a string;\n * it has methods for getting individual characters and extracting substrings;\n * individual characters can be accessed by indexes, the first character has the index 0, the last one – the length of the string – 1;\n * non-primitive type.\n\n\n# Creating strings\n\nA string literal is surrounded by a pair of double quotes, for instance:\n\nString simpleString = "It is a simple string"; // a simple string\nSystem.out.println(simpleString);  // it prints "It is a simple string"\n\nString anotherString = "This is\\na multiple\\nstring"; // a string with escape sequences\nSystem.out.println(anotherString); // it prints the result in several lines\n\n\n1\n2\n3\n4\n5\n\n\nA string can represent a long character sequence (text). A string can have one or zero characters.\n\nString strangeText = "aaaaaaaaaaaassssssssssss gggggggggggggggggggg ddddddddddd qqqqqq ffff";\n\nString emptyString = "";\n\nString s = "s"; // a string consisting of one character\n\n\n1\n2\n3\n4\n5\n\n\nA string can be null. It means no value was assigned.\n\nString nullString = null; // it is null\n\n\n1\n\n\nAnother way to create a variable of String is by using the keyword new.\n\nString str = new String("my-string"); // it creates an object and assigns it to the variable\n\n\n1\n\n\n\n# Get the length and characters of a string\n\nAny string has two useful methods:\n\n * length() returns the number of characters in the string;\n * charAt(int index) returns a character by its index;\n\nHere is an example:\n\nString s = "Hi, all";\n\nint len = s.length(); // the len is 7\n\nchar theFirstChar = s.charAt(0);  // \'H\' has the index 0\n\nchar theFifthChar = s.charAt(4); // \'a\' has the index 4\n\nchar theLastChar = s.charAt(s.length() - 1); // \'l\' has the index 6\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n注意\n\nYou can easily get a character of a string by the index, but you can\'t change characters because strings are immutable in Java.\n\n\n# Useful methods of strings\n\nThe standard library of Java provides a lot of useful methods for processing strings:\n\n * isEmpty() returns true if the string is empty, otherwise – false;\n * toUpperCase() returns a new string in uppercase;\n * toLowerCase() returns a new string in lowercase;\n * startsWith(prefix) returns true if the string starts with the given string prefix, otherwise, false;\n * endsWith(suffix) returns true if the string ends with the given string suffix, otherwise, false.\n * contains(...) returns true if the string contains the given string or character;\n * substring(beginIndex, endIndex) returns a substring of the string in the range: beginIndex, endIndex - 1;\n * replace(old, new) returns a new string obtained by replacing all occurrences of old with new that can be chars or strings.\n * trim() returns a copy of the string obtained by omitting the leading and trailing whitespace. Note that whitespace includes not only the space character, but mostly everything that looks empty: tab, carriage return, newline character, etc.\n\nSee the following example to better understand these methods:\n\nString text = "The simple text string";\n\nboolean empty = text.isEmpty(); // false\n\nString textInUpperCase = text.toUpperCase(); // "THE SIMPLE TEXT STRING"\n\nboolean startsWith = textInUpperCase.startsWith("THE"); // true\n\n/* replace all space characters with empty strings */\nString noSpaces = textInUpperCase.replace(" ", ""); // "THESIMPLETEXTSTRING"\n\nString textWithWhitespaces = "\\t text with whitespaces   !\\n  \\t";\n\nString trimmedText = textWithWhitespaces.trim(); // "text with whitespaces   !"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\nTo learn more about different methods and arguments you can check out the documentation.\n\n\n# Exceptions when processing strings\n\nWhen working with strings, there can be several exceptions.\n\n\\1. NullPointerException. If a string is null and you call a method of the string, it throws a NullPointerException.\n\nString s = null;\nint length = s.length(); // it throws NullPointerException\n\n\n1\n2\n\n\n\\2. StringIndexOutOfBoundsException. If you try to access a non-existing character by an index then this exception occurs.\n\nString s = "ab";\nchar c = s.charAt(2); // it throws StringIndexOutOfBoundsException because indexing starts with 0\n\n\n1\n2\n\n\nWe will consider how to handle different types of exceptions later.\n\n\n# Concatenating strings\n\nTwo strings can be concatenated using the "+" operator or the concat method. Both approaches lead to the same results.\n\nString firstName = "John";\nString lastName = "Smith";\n\n// concatenation using the "+" operator\nString fullName1 = firstName + " " + lastName; // "John Smith"\n\n// concatenation using the concat method \nString fullName2 = firstName.concat(" ").concat(lastName); // "John Smith"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nWhen we concatenate two strings a new string is created (because strings are immutable).\n\nImportant: in the general case str1 + str2 is not the same as str2 + str1 because concatenation is not a commutative operation.\n\n\n# Appending values to a string\n\nIt\'s possible to add values of different types to a string. The value will be automatically converted to a string. See an example below.\n\nString str = "str" + 10 + false; // the result is "str10false"\n\n\n1\n\n\nIn the example above, the order of execution is:\n\n 1. "str" + 10 => "str10"\n 2. "str10" + false => "str10false"\n\nLet\'s see a more complex example:\n\nString shortString = "str";\nint number = 100;\n\nString result1 = shortString + number + 50; // the result is "str10050"\nString result2 = number + 50 + shortString; // what is the result2?\n\n\n1\n2\n3\n4\n5\n\n\nThe result2 is 150str, because, first, we calculate the sum of number and 50 and then concat it with str. The order of operations is important.\n\n\n# How to compare strings correctly?\n\nSince String is a reference type you shouldn\'t compare strings using the == or != operators. In this case, only addresses will be compared, but not actual values.\n\nString has two convenient methods for comparing the equivalence of the actual content of one string with the content of another string: equals(other) and equalsIgnoreCase(other). See an example below.\n\nString first = "first";\nString second = "second";\n\nString anotherFirst = "first";\nString secondInUpperCase = "SECOND";\n\nSystem.out.println(first.equals(second)); // false, the strings have different values\nSystem.out.println(first.equals(anotherFirst)); // true, the strings have the same value\n\nSystem.out.println(second.equals(secondInUpperCase)); // false, the strings have different cases\nSystem.out.println(second.equalsIgnoreCase(secondInUpperCase)); // true, it ignores cases \n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\nDo not forget the rules when comparing strings.',normalizedContent:'# the string type\n\nstring is a reference type consisting of characters. it is one of the most widely used types in java. here is an example of a string: "hello, java". this string is a sequence of 11 characters, including one space.\n\nthis type has some features:\n\n * immutable type: it\'s impossible to change a character in a string;\n * it has methods for getting individual characters and extracting substrings;\n * individual characters can be accessed by indexes, the first character has the index 0, the last one – the length of the string – 1;\n * non-primitive type.\n\n\n# creating strings\n\na string literal is surrounded by a pair of double quotes, for instance:\n\nstring simplestring = "it is a simple string"; // a simple string\nsystem.out.println(simplestring);  // it prints "it is a simple string"\n\nstring anotherstring = "this is\\na multiple\\nstring"; // a string with escape sequences\nsystem.out.println(anotherstring); // it prints the result in several lines\n\n\n1\n2\n3\n4\n5\n\n\na string can represent a long character sequence (text). a string can have one or zero characters.\n\nstring strangetext = "aaaaaaaaaaaassssssssssss gggggggggggggggggggg ddddddddddd qqqqqq ffff";\n\nstring emptystring = "";\n\nstring s = "s"; // a string consisting of one character\n\n\n1\n2\n3\n4\n5\n\n\na string can be null. it means no value was assigned.\n\nstring nullstring = null; // it is null\n\n\n1\n\n\nanother way to create a variable of string is by using the keyword new.\n\nstring str = new string("my-string"); // it creates an object and assigns it to the variable\n\n\n1\n\n\n\n# get the length and characters of a string\n\nany string has two useful methods:\n\n * length() returns the number of characters in the string;\n * charat(int index) returns a character by its index;\n\nhere is an example:\n\nstring s = "hi, all";\n\nint len = s.length(); // the len is 7\n\nchar thefirstchar = s.charat(0);  // \'h\' has the index 0\n\nchar thefifthchar = s.charat(4); // \'a\' has the index 4\n\nchar thelastchar = s.charat(s.length() - 1); // \'l\' has the index 6\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n注意\n\nyou can easily get a character of a string by the index, but you can\'t change characters because strings are immutable in java.\n\n\n# useful methods of strings\n\nthe standard library of java provides a lot of useful methods for processing strings:\n\n * isempty() returns true if the string is empty, otherwise – false;\n * touppercase() returns a new string in uppercase;\n * tolowercase() returns a new string in lowercase;\n * startswith(prefix) returns true if the string starts with the given string prefix, otherwise, false;\n * endswith(suffix) returns true if the string ends with the given string suffix, otherwise, false.\n * contains(...) returns true if the string contains the given string or character;\n * substring(beginindex, endindex) returns a substring of the string in the range: beginindex, endindex - 1;\n * replace(old, new) returns a new string obtained by replacing all occurrences of old with new that can be chars or strings.\n * trim() returns a copy of the string obtained by omitting the leading and trailing whitespace. note that whitespace includes not only the space character, but mostly everything that looks empty: tab, carriage return, newline character, etc.\n\nsee the following example to better understand these methods:\n\nstring text = "the simple text string";\n\nboolean empty = text.isempty(); // false\n\nstring textinuppercase = text.touppercase(); // "the simple text string"\n\nboolean startswith = textinuppercase.startswith("the"); // true\n\n/* replace all space characters with empty strings */\nstring nospaces = textinuppercase.replace(" ", ""); // "thesimpletextstring"\n\nstring textwithwhitespaces = "\\t text with whitespaces   !\\n  \\t";\n\nstring trimmedtext = textwithwhitespaces.trim(); // "text with whitespaces   !"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\nto learn more about different methods and arguments you can check out the documentation.\n\n\n# exceptions when processing strings\n\nwhen working with strings, there can be several exceptions.\n\n\\1. nullpointerexception. if a string is null and you call a method of the string, it throws a nullpointerexception.\n\nstring s = null;\nint length = s.length(); // it throws nullpointerexception\n\n\n1\n2\n\n\n\\2. stringindexoutofboundsexception. if you try to access a non-existing character by an index then this exception occurs.\n\nstring s = "ab";\nchar c = s.charat(2); // it throws stringindexoutofboundsexception because indexing starts with 0\n\n\n1\n2\n\n\nwe will consider how to handle different types of exceptions later.\n\n\n# concatenating strings\n\ntwo strings can be concatenated using the "+" operator or the concat method. both approaches lead to the same results.\n\nstring firstname = "john";\nstring lastname = "smith";\n\n// concatenation using the "+" operator\nstring fullname1 = firstname + " " + lastname; // "john smith"\n\n// concatenation using the concat method \nstring fullname2 = firstname.concat(" ").concat(lastname); // "john smith"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nwhen we concatenate two strings a new string is created (because strings are immutable).\n\nimportant: in the general case str1 + str2 is not the same as str2 + str1 because concatenation is not a commutative operation.\n\n\n# appending values to a string\n\nit\'s possible to add values of different types to a string. the value will be automatically converted to a string. see an example below.\n\nstring str = "str" + 10 + false; // the result is "str10false"\n\n\n1\n\n\nin the example above, the order of execution is:\n\n 1. "str" + 10 => "str10"\n 2. "str10" + false => "str10false"\n\nlet\'s see a more complex example:\n\nstring shortstring = "str";\nint number = 100;\n\nstring result1 = shortstring + number + 50; // the result is "str10050"\nstring result2 = number + 50 + shortstring; // what is the result2?\n\n\n1\n2\n3\n4\n5\n\n\nthe result2 is 150str, because, first, we calculate the sum of number and 50 and then concat it with str. the order of operations is important.\n\n\n# how to compare strings correctly?\n\nsince string is a reference type you shouldn\'t compare strings using the == or != operators. in this case, only addresses will be compared, but not actual values.\n\nstring has two convenient methods for comparing the equivalence of the actual content of one string with the content of another string: equals(other) and equalsignorecase(other). see an example below.\n\nstring first = "first";\nstring second = "second";\n\nstring anotherfirst = "first";\nstring secondinuppercase = "second";\n\nsystem.out.println(first.equals(second)); // false, the strings have different values\nsystem.out.println(first.equals(anotherfirst)); // true, the strings have the same value\n\nsystem.out.println(second.equals(secondinuppercase)); // false, the strings have different cases\nsystem.out.println(second.equalsignorecase(secondinuppercase)); // true, it ignores cases \n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\ndo not forget the rules when comparing strings.',charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：Boolean and logical operators",frontmatter:{title:"Theory：Boolean and logical operators",date:"2022-08-09T13:52:35.000Z",permalink:"/pages/486714/",tags:["Java basic"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/01.Java%20basic/10.Theory%EF%BC%9ABoolean%20and%20logical%20operators.html",relativePath:"01.Java/01.Hyperskill - Java/01.Java basic/10.Theory：Boolean and logical operators.md",key:"v-5a5f8cdc",path:"/pages/486714/",headers:[{level:2,title:"Boolean type",slug:"boolean-type",normalizedTitle:"boolean type",charIndex:5},{level:2,title:"Logical operators",slug:"logical-operators",normalizedTitle:"logical operators",charIndex:754},{level:2,title:"The precedence of logical operators",slug:"the-precedence-of-logical-operators",normalizedTitle:"the precedence of logical operators",charIndex:2256},{level:2,title:"An example: trekking",slug:"an-example-trekking",normalizedTitle:"an example: trekking",charIndex:2657},{level:2,title:"Short-circuiting evaluation",slug:"short-circuiting-evaluation",normalizedTitle:"short-circuiting evaluation",charIndex:3321}],headersStr:"Boolean type Logical operators The precedence of logical operators An example: trekking Short-circuiting evaluation",content:" * # Boolean type\n   \n   The boolean is a data type that has only two possible values: false and true. This is also known as the logical type.\n   \n   This type is a common way in programming languages to represent something that has only two opposite states like on or off, yes or no, etc.\n   \n   \n   \n   If you are writing an application that keeps track of opening and closing a door you'll find it natural to use boolean to store current door state.\n   \n   boolean open = true;\n   boolean closed = false;\n   \n   System.out.println(open);   // true\n   System.out.println(closed); // false\n   \n   \n   1\n   2\n   3\n   4\n   5\n   \n   \n   Important, you cannot assign an integer value to a boolean variable. In Java, 0 is not the same as false.\n   \n   \n   # Logical operators\n   \n   Variables of the boolean type are often used to build logical expressions using logical operators. Java has four logical operators NOT, AND, OR and XOR:\n   \n   * NOT is a unary operator that reverses the boolean value. It is denoted as !.\n   \n   boolean f = false; // f is false\n   boolean t = !f;    // t is true\n   \n   \n   1\n   2\n   \n   * AND is a binary operator that returns true if both operands are true, otherwise, it returns false. It is denoted as &&.\n   \n   boolean b1 = false && false; // false\n   boolean b2 = false && true;  // false\n   boolean b3 = true && false;  // false\n   boolean b4 = true && true;   // true \n   \n   \n   1\n   2\n   3\n   4\n   \n   * OR is a binary operator that returns true if at least one operand is true, otherwise, it returns false. It is denoted as ||.\n   \n   boolean b1 = false || false; // false\n   boolean b2 = false || true;  // true\n   boolean b3 = true || false;  // true\n   boolean b4 = true || true;   // true\n   \n   \n   1\n   2\n   3\n   4\n   \n   * XOR (exclusive OR) is a binary operator that returns true if boolean operands have different values, otherwise, it returns false. It is denoted as ^.\n   \n   boolean b1 = false ^ false; // false\n   boolean b2 = false ^ true;  // true\n   boolean b3 = true ^ false;  // true\n   boolean b4 = true ^ true;   // false\n   \n   \n   1\n   2\n   3\n   4\n   \n   \n   The XOR operator is used less often than others. Just remember that Java has it. If you really need it, you can use it.\n   \n   \n   # The precedence of logical operators\n   \n   Below are the logical operations sorted in order of decreasing their priorities in expressions: ! (NOT), ^ (XOR), && (AND), || (OR).\n   \n   So, the following variable is true:\n   \n   boolean b = true && !false; // true, because !false is evaluated first\n   \n   \n   1\n   \n   \n   To change the order of execution you can use round brackets (...).\n   \n   \n   # An example: trekking\n   \n   As an example, let's write a complex boolean expression that determines the possibility of trekking in summer and in other seasons. Let's suppose that the right conditions for trekking is warm dry weather in summer and autumn.\n   \n   boolean cold = false;\n   boolean dry = true;\n   boolean summer = false; // suppose now is autumn\n   \n   boolean trekking = dry && (!cold || summer); // true, let's go to trek!\n   \n   \n   1\n   2\n   3\n   4\n   5\n   \n   \n   Do not get confused in the expression above, otherwise, you will go trek in bad weather! A programmer should understand not only arithmetic but also logical operations.\n   \n   \n   # Short-circuiting evaluation\n   \n   An interesting thing is that the && and || operators don't evaluate the second argument if it isn't necessary. When the first argument of the && operator evaluates to false, the overall value must be false; and when the first argument of the || operator evaluates to true, the overall value must be true. So:\n   \n   * false && ... -> false, since it is not necessary to know what the right-hand side is;\n   * true || ... -> true, since it is not necessary to know what the right-hand side is.\n   \n   This behavior is known as short-circuit evaluation (do not confuse it with an electrical short circuit). It reduces the computation time, but can also be used to avoid some errors in programs. We will discuss this in the following topics.",normalizedContent:" * # boolean type\n   \n   the boolean is a data type that has only two possible values: false and true. this is also known as the logical type.\n   \n   this type is a common way in programming languages to represent something that has only two opposite states like on or off, yes or no, etc.\n   \n   \n   \n   if you are writing an application that keeps track of opening and closing a door you'll find it natural to use boolean to store current door state.\n   \n   boolean open = true;\n   boolean closed = false;\n   \n   system.out.println(open);   // true\n   system.out.println(closed); // false\n   \n   \n   1\n   2\n   3\n   4\n   5\n   \n   \n   important, you cannot assign an integer value to a boolean variable. in java, 0 is not the same as false.\n   \n   \n   # logical operators\n   \n   variables of the boolean type are often used to build logical expressions using logical operators. java has four logical operators not, and, or and xor:\n   \n   * not is a unary operator that reverses the boolean value. it is denoted as !.\n   \n   boolean f = false; // f is false\n   boolean t = !f;    // t is true\n   \n   \n   1\n   2\n   \n   * and is a binary operator that returns true if both operands are true, otherwise, it returns false. it is denoted as &&.\n   \n   boolean b1 = false && false; // false\n   boolean b2 = false && true;  // false\n   boolean b3 = true && false;  // false\n   boolean b4 = true && true;   // true \n   \n   \n   1\n   2\n   3\n   4\n   \n   * or is a binary operator that returns true if at least one operand is true, otherwise, it returns false. it is denoted as ||.\n   \n   boolean b1 = false || false; // false\n   boolean b2 = false || true;  // true\n   boolean b3 = true || false;  // true\n   boolean b4 = true || true;   // true\n   \n   \n   1\n   2\n   3\n   4\n   \n   * xor (exclusive or) is a binary operator that returns true if boolean operands have different values, otherwise, it returns false. it is denoted as ^.\n   \n   boolean b1 = false ^ false; // false\n   boolean b2 = false ^ true;  // true\n   boolean b3 = true ^ false;  // true\n   boolean b4 = true ^ true;   // false\n   \n   \n   1\n   2\n   3\n   4\n   \n   \n   the xor operator is used less often than others. just remember that java has it. if you really need it, you can use it.\n   \n   \n   # the precedence of logical operators\n   \n   below are the logical operations sorted in order of decreasing their priorities in expressions: ! (not), ^ (xor), && (and), || (or).\n   \n   so, the following variable is true:\n   \n   boolean b = true && !false; // true, because !false is evaluated first\n   \n   \n   1\n   \n   \n   to change the order of execution you can use round brackets (...).\n   \n   \n   # an example: trekking\n   \n   as an example, let's write a complex boolean expression that determines the possibility of trekking in summer and in other seasons. let's suppose that the right conditions for trekking is warm dry weather in summer and autumn.\n   \n   boolean cold = false;\n   boolean dry = true;\n   boolean summer = false; // suppose now is autumn\n   \n   boolean trekking = dry && (!cold || summer); // true, let's go to trek!\n   \n   \n   1\n   2\n   3\n   4\n   5\n   \n   \n   do not get confused in the expression above, otherwise, you will go trek in bad weather! a programmer should understand not only arithmetic but also logical operations.\n   \n   \n   # short-circuiting evaluation\n   \n   an interesting thing is that the && and || operators don't evaluate the second argument if it isn't necessary. when the first argument of the && operator evaluates to false, the overall value must be false; and when the first argument of the || operator evaluates to true, the overall value must be true. so:\n   \n   * false && ... -> false, since it is not necessary to know what the right-hand side is;\n   * true || ... -> true, since it is not necessary to know what the right-hand side is.\n   \n   this behavior is known as short-circuit evaluation (do not confuse it with an electrical short circuit). it reduces the computation time, but can also be used to avoid some errors in programs. we will discuss this in the following topics.",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：Characters",frontmatter:{title:"Theory：Characters",date:"2022-08-09T14:01:35.000Z",permalink:"/pages/69787a/",tags:["Java basic"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/01.Java%20basic/08.Theory%EF%BC%9ACharacters.html",relativePath:"01.Java/01.Hyperskill - Java/01.Java basic/08.Theory：Characters.md",key:"v-f35d9f7a",path:"/pages/69787a/",headers:[{level:2,title:"Initializing characters with codes",slug:"initializing-characters-with-codes",normalizedTitle:"initializing characters with codes",charIndex:794},{level:2,title:"Retrieving subsequent characters",slug:"retrieving-subsequent-characters",normalizedTitle:"retrieving subsequent characters",charIndex:1670},{level:2,title:"Escape sequences",slug:"escape-sequences",normalizedTitle:"escape sequences",charIndex:2445}],headersStr:"Initializing characters with codes Retrieving subsequent characters Escape sequences",content:"The char type is used to represent letters (both uppercase and lowercase), digits, and other symbols. Each character is just a symbol enclosed in single quotes.\n\nchar lowerCaseLetter = 'a';\nchar upperCaseLetter = 'Q';\nchar number = '1';\nchar space = ' ';\nchar dollar = '$';\n\n\n1\n2\n3\n4\n5\n\n\nThis type can represent all characters in all languages as well as some special and computer symbols. It corresponds to the Unicode (UTF-16) format. Unicode is a computer encoding methodology that assigns a unique number for every character. It doesn't matter what language, or computer platform it's on. This is important in a global, networked world, and for computer systems that must accommodate multiple languages and special characters. Unicode truly unifies all of these into a single standard.\n\n\n# Initializing characters with codes\n\nA character can be also created using its hexadecimal code in the Unicode table. The code starts with \\u.\n\nchar ch = '\\u0040'; // it represents '@'\nSystem.out.println(ch); // @\n\n\n1\n2\n\n\nAlthough we use a sequence of characters to represent such code, the code represents exactly one character.\n\nAs an example, Latin capital letters have hexadecimal codes from '\\u0041' to '\\u005A', and Latin small letters have codes from '\\u0061' to '\\u007A'.\n\nThe char type has a minimum value encoded as '\\u0000' and the maximum value encoded as '\\uffff'.\n\nIt is also possible to initialize a char with a positive integer number.\n\nchar ch = 64;\nSystem.out.println(ch); // @\n\n\n1\n2\n\n\nThe number 64 just corresponds to the Unicode hexadecimal code '\\u0040'.\n\nAny char variable may be considered as an unsigned integer value in the range from 0 to 65535.\n\n\n# Retrieving subsequent characters\n\nThere are two operators for adding (+) and subtracting (-) integer numbers in order to get the next and previous character according to the Unicode order.\n\nchar ch = 'b';\nch += 1; // 'c'\nch -= 2; // 'a'\n\n\n1\n2\n3\n\n\nIt is also possible to add or subtract two characters.\n\nchar ch = 'b';\nch += 'a';\nch -= 'b';\nSystem.out.println(ch); // prints 'a' without quotes\n\n\n1\n2\n3\n4\n\n\nActually, these operations manipulate with codes of characters, 'b' has the next code after 'a'.\n\nIt is possible to use increment (++) and decrement (--) operators in prefix and postfix forms.\n\nchar ch = 'A';\nch += 10;\nSystem.out.println(ch);   // 'K'\nSystem.out.println(++ch); // 'L'\nSystem.out.println(++ch); // 'M'\nSystem.out.println(--ch); // 'L'\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# Escape sequences\n\nThere are some special characters starting with backslash \\ which are known as the escape or control sequences. They do not have corresponding symbols and cannot be found on a keyboard. To represent such characters we use a pair of regular symbols. In a program, this pair will be considered as exactly one character with the appropriate code.\n\n * '\\n' is the newline character;\n * '\\t' is the tab character;\n * '\\r' is the carriage return character;\n * '\\\\' is the backslash character itself;\n * '\\'' is the single quote mark;\n * '\\\"' is the double quote mark.\n\nHere are several examples:\n\nSystem.out.print('\\t'); // makes a tab\nSystem.out.print('a');  // prints 'a'\nSystem.out.print('\\n'); // goes to the new line\nSystem.out.print('c');  // prints 'c'\n\n\n1\n2\n3\n4\n\n\nThis code prints:\n\n  a\nc\n\n\n1\n2\n\n\nThere is also a character to represent a single space ' '. It is just a regular character, not an escape sequence.",normalizedContent:"the char type is used to represent letters (both uppercase and lowercase), digits, and other symbols. each character is just a symbol enclosed in single quotes.\n\nchar lowercaseletter = 'a';\nchar uppercaseletter = 'q';\nchar number = '1';\nchar space = ' ';\nchar dollar = '$';\n\n\n1\n2\n3\n4\n5\n\n\nthis type can represent all characters in all languages as well as some special and computer symbols. it corresponds to the unicode (utf-16) format. unicode is a computer encoding methodology that assigns a unique number for every character. it doesn't matter what language, or computer platform it's on. this is important in a global, networked world, and for computer systems that must accommodate multiple languages and special characters. unicode truly unifies all of these into a single standard.\n\n\n# initializing characters with codes\n\na character can be also created using its hexadecimal code in the unicode table. the code starts with \\u.\n\nchar ch = '\\u0040'; // it represents '@'\nsystem.out.println(ch); // @\n\n\n1\n2\n\n\nalthough we use a sequence of characters to represent such code, the code represents exactly one character.\n\nas an example, latin capital letters have hexadecimal codes from '\\u0041' to '\\u005a', and latin small letters have codes from '\\u0061' to '\\u007a'.\n\nthe char type has a minimum value encoded as '\\u0000' and the maximum value encoded as '\\uffff'.\n\nit is also possible to initialize a char with a positive integer number.\n\nchar ch = 64;\nsystem.out.println(ch); // @\n\n\n1\n2\n\n\nthe number 64 just corresponds to the unicode hexadecimal code '\\u0040'.\n\nany char variable may be considered as an unsigned integer value in the range from 0 to 65535.\n\n\n# retrieving subsequent characters\n\nthere are two operators for adding (+) and subtracting (-) integer numbers in order to get the next and previous character according to the unicode order.\n\nchar ch = 'b';\nch += 1; // 'c'\nch -= 2; // 'a'\n\n\n1\n2\n3\n\n\nit is also possible to add or subtract two characters.\n\nchar ch = 'b';\nch += 'a';\nch -= 'b';\nsystem.out.println(ch); // prints 'a' without quotes\n\n\n1\n2\n3\n4\n\n\nactually, these operations manipulate with codes of characters, 'b' has the next code after 'a'.\n\nit is possible to use increment (++) and decrement (--) operators in prefix and postfix forms.\n\nchar ch = 'a';\nch += 10;\nsystem.out.println(ch);   // 'k'\nsystem.out.println(++ch); // 'l'\nsystem.out.println(++ch); // 'm'\nsystem.out.println(--ch); // 'l'\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# escape sequences\n\nthere are some special characters starting with backslash \\ which are known as the escape or control sequences. they do not have corresponding symbols and cannot be found on a keyboard. to represent such characters we use a pair of regular symbols. in a program, this pair will be considered as exactly one character with the appropriate code.\n\n * '\\n' is the newline character;\n * '\\t' is the tab character;\n * '\\r' is the carriage return character;\n * '\\\\' is the backslash character itself;\n * '\\'' is the single quote mark;\n * '\\\"' is the double quote mark.\n\nhere are several examples:\n\nsystem.out.print('\\t'); // makes a tab\nsystem.out.print('a');  // prints 'a'\nsystem.out.print('\\n'); // goes to the new line\nsystem.out.print('c');  // prints 'c'\n\n\n1\n2\n3\n4\n\n\nthis code prints:\n\n  a\nc\n\n\n1\n2\n\n\nthere is also a character to represent a single space ' '. it is just a regular character, not an escape sequence.",charsets:{},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：Switch statement",frontmatter:{title:"Theory：Switch statement",date:"2022-08-09T14:27:53.000Z",permalink:"/pages/0aee0c/",tags:["Java basic"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/01.Java%20basic/12.Theory%EF%BC%9ASwitch%20statement.html",relativePath:"01.Java/01.Hyperskill - Java/01.Java basic/12.Theory：Switch statement.md",key:"v-1928ce46",path:"/pages/0aee0c/",headers:[{level:2,title:"When a conditional statement is not so good",slug:"when-a-conditional-statement-is-not-so-good",normalizedTitle:"when a conditional statement is not so good",charIndex:5},{level:2,title:"Three keywords: switch, case, and default",slug:"three-keywords-switch-case-and-default",normalizedTitle:"three keywords: switch, case, and default",charIndex:998},{level:2,title:"The general form of the switch statement",slug:"the-general-form-of-the-switch-statement",normalizedTitle:"the general form of the switch statement",charIndex:2155},{level:2,title:'An example with "zero", "one" and "two"',slug:"an-example-with-zero-one-and-two",normalizedTitle:"an example with &quot;zero&quot;, &quot;one&quot; and &quot;two&quot;",charIndex:null},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:4735}],headersStr:'When a conditional statement is not so good Three keywords: switch, case, and default The general form of the switch statement An example with "zero", "one" and "two" Conclusion',content:' * # When a conditional statement is not so good\n   \n   Suppose you need to write a program that performs different actions depending on the value of a variable. For example, choosing an action from the menu of a game. To do that you can use a conditional statement with multiple branches as shown below.\n   \n   int action = ...; // a certain value from 1 to 4\n           \n   if (action == 1) {\n       System.out.println("Starting a new game...");\n   } else if (action == 2) {\n       System.out.println("Loading a saved game");\n   } else if (action == 3) {\n       System.out.println("Displaying help...");\n   } else if (action == 4) {\n       System.out.println("Exiting...");\n   } else {\n       System.out.println("Unsuitable action, please, try again");\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   \n   \n   Of course, this code handles the task. But if your conditional statement has a lot of branches, it can be hard to understand for people.\n   \n   \n   # Three keywords: switch, case, and default\n   \n   The switch statement provides a way to choose between multiple cases based on the value of a single variable (not an expression!). The variable can be an integer number, character, string, or enumeration. The last two types will be studied further.\n   \n   Using the switch statement, the previous code will look like this:\n   \n   switch (action) {\n       case 1:\n           System.out.println("Starting a new game...");\n           break;\n       case 2:\n           System.out.println("Loading a saved game");\n           break;\n       case 3:\n           System.out.println("Displaying help...");\n           break;\n       case 4:\n           System.out.println("Exiting...");\n           break;\n       default:\n           System.out.println("Unsuitable action, please, try again");\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   16\n   \n   \n   As you can see, this code is well-structured and easier to read than the equal conditional statement. We have not explained the keywords switch, case and break yet, but you can already guess what they mean.\n   \n   \n   # The general form of the switch statement\n   \n   The most general form of the switch statement is the following\n   \n   switch (variable) {\n       case value1:\n           // do something here\n           break;\n       case value2:\n           // do something here\n           break;\n       \n       //... other cases\n       \n       case valueN:\n           // do something here\n           break;\n       default:\n           // do something by default\n           break; // it can be omitted\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   16\n   17\n   \n   \n   The switch and case keywords are always required here. The keywords break and default are optional. The keyword breakstops the execution of the whole switch statement, not just one case.\n   \n   If a case does not have the break keyword, the following case will be evaluated as well, including the default case. The default case is also evaluated if there\'s no other case that matches the variable value. The break keyword in the default branch is optional and can be omitted.\n   \n   A case section may contain any block of code, even a nested switch statement, however it is recommended to avoid deeply nested code structures wherever possible.\n   \n   \n   # An example with "zero", "one" and "two"\n   \n   Let\'s consider another example. The following code outputs the names of integer numbers or a default text. This switch statement has three base cases and a single default case.\n   \n   int val = ...;\n   switch (val) {\n        case 0:\n            System.out.println("zero");\n            break;\n        case 1:\n            System.out.println("one");\n            break;\n        case 2:\n            System.out.println("two");\n            break;\n        default:\n            System.out.println("The value is less than zero or greater than two");\n   } \n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   \n   \n   If the val is 0, the code prints:\n   \n   zero\n   \n   \n   1\n   \n   \n   If the val is 1, the code prints:\n   \n   one\n   \n   \n   1\n   \n   \n   if the val is 10, the code prints:\n   \n   The value is less than zero or greater than two\n   \n   \n   1\n   \n   \n   If you forget the keyword break in a case, the compiler won\'t consider it an error. Let\'s remove it from the second case (case 1) and assign 1 to val. The program prints:\n   \n   one\n   two\n   \n   \n   1\n   2\n   \n   \n   Omitting break keyword is not a good practice. Try to avoid it.\n   \n   Java 12–14 introduced some new features allowing to use switch as an expression.\n   \n   \n   # Conclusion\n   \n   When you have a limited number of cases to choose from, switch statements can help you avoid unnecessary nested if-else constructions. For that, you need the switch keyword to introduce the value to evaluate, and case for each of the possible values. Do not forget to also use the break keyword to avoid evaluating extra cases and default branch to indicate the default behavior.',normalizedContent:' * # when a conditional statement is not so good\n   \n   suppose you need to write a program that performs different actions depending on the value of a variable. for example, choosing an action from the menu of a game. to do that you can use a conditional statement with multiple branches as shown below.\n   \n   int action = ...; // a certain value from 1 to 4\n           \n   if (action == 1) {\n       system.out.println("starting a new game...");\n   } else if (action == 2) {\n       system.out.println("loading a saved game");\n   } else if (action == 3) {\n       system.out.println("displaying help...");\n   } else if (action == 4) {\n       system.out.println("exiting...");\n   } else {\n       system.out.println("unsuitable action, please, try again");\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   \n   \n   of course, this code handles the task. but if your conditional statement has a lot of branches, it can be hard to understand for people.\n   \n   \n   # three keywords: switch, case, and default\n   \n   the switch statement provides a way to choose between multiple cases based on the value of a single variable (not an expression!). the variable can be an integer number, character, string, or enumeration. the last two types will be studied further.\n   \n   using the switch statement, the previous code will look like this:\n   \n   switch (action) {\n       case 1:\n           system.out.println("starting a new game...");\n           break;\n       case 2:\n           system.out.println("loading a saved game");\n           break;\n       case 3:\n           system.out.println("displaying help...");\n           break;\n       case 4:\n           system.out.println("exiting...");\n           break;\n       default:\n           system.out.println("unsuitable action, please, try again");\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   16\n   \n   \n   as you can see, this code is well-structured and easier to read than the equal conditional statement. we have not explained the keywords switch, case and break yet, but you can already guess what they mean.\n   \n   \n   # the general form of the switch statement\n   \n   the most general form of the switch statement is the following\n   \n   switch (variable) {\n       case value1:\n           // do something here\n           break;\n       case value2:\n           // do something here\n           break;\n       \n       //... other cases\n       \n       case valuen:\n           // do something here\n           break;\n       default:\n           // do something by default\n           break; // it can be omitted\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   16\n   17\n   \n   \n   the switch and case keywords are always required here. the keywords break and default are optional. the keyword breakstops the execution of the whole switch statement, not just one case.\n   \n   if a case does not have the break keyword, the following case will be evaluated as well, including the default case. the default case is also evaluated if there\'s no other case that matches the variable value. the break keyword in the default branch is optional and can be omitted.\n   \n   a case section may contain any block of code, even a nested switch statement, however it is recommended to avoid deeply nested code structures wherever possible.\n   \n   \n   # an example with "zero", "one" and "two"\n   \n   let\'s consider another example. the following code outputs the names of integer numbers or a default text. this switch statement has three base cases and a single default case.\n   \n   int val = ...;\n   switch (val) {\n        case 0:\n            system.out.println("zero");\n            break;\n        case 1:\n            system.out.println("one");\n            break;\n        case 2:\n            system.out.println("two");\n            break;\n        default:\n            system.out.println("the value is less than zero or greater than two");\n   } \n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   \n   \n   if the val is 0, the code prints:\n   \n   zero\n   \n   \n   1\n   \n   \n   if the val is 1, the code prints:\n   \n   one\n   \n   \n   1\n   \n   \n   if the val is 10, the code prints:\n   \n   the value is less than zero or greater than two\n   \n   \n   1\n   \n   \n   if you forget the keyword break in a case, the compiler won\'t consider it an error. let\'s remove it from the second case (case 1) and assign 1 to val. the program prints:\n   \n   one\n   two\n   \n   \n   1\n   2\n   \n   \n   omitting break keyword is not a good practice. try to avoid it.\n   \n   java 12–14 introduced some new features allowing to use switch as an expression.\n   \n   \n   # conclusion\n   \n   when you have a limited number of cases to choose from, switch statements can help you avoid unnecessary nested if-else constructions. for that, you need the switch keyword to introduce the value to evaluate, and case for each of the possible values. do not forget to also use the break keyword to avoid evaluating extra cases and default branch to indicate the default behavior.',charsets:{},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：Declaring a method",frontmatter:{title:"Theory：Declaring a method",date:"2022-08-09T14:25:50.000Z",permalink:"/pages/90c5f6/",tags:["Java basic"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/01.Java%20basic/13.Theory%EF%BC%9ADeclaring%20a%20method.html",relativePath:"01.Java/01.Hyperskill - Java/01.Java basic/13.Theory：Declaring a method.md",key:"v-0e7e1f9d",path:"/pages/90c5f6/",headers:[{level:2,title:"The syntax of the method",slug:"the-syntax-of-the-method",normalizedTitle:"the syntax of the method",charIndex:651},{level:2,title:"Modifiers",slug:"modifiers",normalizedTitle:"modifiers",charIndex:1631},{level:2,title:"Method parameters",slug:"method-parameters",normalizedTitle:"method parameters",charIndex:2588},{level:2,title:"Body and return statement",slug:"body-and-return-statement",normalizedTitle:"body and return statement",charIndex:3142},{level:2,title:"What happens when we invoke a method",slug:"what-happens-when-we-invoke-a-method",normalizedTitle:"what happens when we invoke a method",charIndex:5145},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:6773}],headersStr:"The syntax of the method Modifiers Method parameters Body and return statement What happens when we invoke a method Conclusion",content:" * Built-in methods are a real deal when you manage routine tasks. Still, they are not a cure-all solution since it's impossible to provide a standard method for each specific task. For example, you may need to convert dollars to euros, count your monthly spendings, or even calculate a daily portion of seeds for your parrot multiple times. That's when you create your own method to avoid repeating tons of code!\n   \n   In contrast to built-in methods, user-defined methods are created by the programmer. It is a common practice to create a customized subprogram for a specific purpose.\n   \n   But how to create it? Let's figure it out.\n   \n   \n   # The syntax of the method\n   \n   Technically, a method is just a structured part of code with a few components. In Java, a method is always located inside a class. Let's take a closer look at a method that calculates a daily portion of seeds for a parrot:\n   \n   \n   \n   A method contains a set of modifiers, a type of the return value, a name, a list of parameters in parentheses () , and a body in curly brackets {}. The combination of the name of the method and the list of its parameters is known as a method signature. In our example, the signature is countSeeds(int, int).\n   \n   Some methods also have a list of exceptions — they define the method's behavior in case of a mistake in the program. If during an execution of a method one of its exceptions is thrown, the exception is handled outside the method. For now, we'll consider simple methods without exceptions.\n   \n   Let's focus on the main components that we need to write simple methods from scratch.\n   \n   \n   # Modifiers\n   \n   The first words are so-called modifiers. There are two types of modifiers in Java: access modifiers and non-access modifiers.\n   \n   Access modifiers define the visibility of the method. For now, we're using a public access modifier, which means there are no restrictions for invoking the method even from other classes.\n   \n   Non-access modifiers provide information about the behavior of methods to JVM. The modifier static means that the method belongs to the class and it can be accessed without creating any object. This type of method is called a static method.\n   \n   If the method is declared without the static modifier, it means that the method can be invoked only through or with an object or instance of this class. Such methods are called instance methods.\n   \n   Remember that there is a recommended order for the modifiers that you can find in the Java Language Specification. In our case, it is public static.\n   \n   \n   # Method parameters\n   \n   In parentheses after the method name, we define the type, number, and order of the parameters. This reflects how they will be passed to the method when it is invoked. Take a look at these signatures:\n   \n   convertEurosToDollars(double dlrRate, long eur);\n   \n   countMonthlySpendings(long food, long rent, long fun); \n   \n   replace(char a, char b);\n   \n   \n   1\n   2\n   3\n   4\n   5\n   \n   \n   As you know, there are also methods that don't have values passed to them. These methods are known as non-parameterized.\n   \n   \n   # Body and return statement\n   \n   Before a method completes its execution and exits, it returns a value known as a return value. The result of your method execution can be a value of primitive types like int, float, double, boolean, or reference types like String. Take a look at our countSeeds method with the return type int:\n   \n   public static int countSeeds(int parrotWeight, int parrotAge) {   \n       return parrotWeight / 5 + parrotAge; // it returns an int\n   }\n   \n   \n   1\n   2\n   3\n   \n   \n   What you see inside the curly brackets is known as the body of the method. The body holds the logic we want to implement by our method: a set of statements to perform with the passed values to obtain the result. Our method countSeeds takes two provided values, performs certain calculations, and returns the result within a return statement.\n   \n   Methods do not necessarily have to return a value. If we want a method not to return a value but to perform operations only, the keyword void is used as a return type:\n   \n   public static void countSeeds(int parrotWeight, int parrotAge) {\n       System.out.println(\"give your parrot \" + (parrotWeight / 5 + parrotAge) + \n       \"g of seeds per day\");\n   }\n   // this method just prints the line, so it returns no value\n   \n   \n   1\n   2\n   3\n   4\n   5\n   \n   \n   This method prints the line with recommendations on feeding the parrot and does not allow us to keep a value. Note that there is no return statement.\n   \n   Though methods with a void return type return nothing, you still may use a return word to exit the method. Usually, this applies to methods with conditions. Take a look:\n   \n   public static void isPositive(int num) {\n       if (num > 0) {\n           System.out.println(\"the number is positive\");\n       } else {\n           return;\n       }\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   \n   \n   Remember, that if you try to return a value from a method with a void return type, a compile error will be thrown.\n   \n   \n   # What happens when we invoke a method\n   \n   When invoking a method, we can write the returned value to some variable, print it out, or pass it on to another method. This is how it looks in a program:\n   \n   int myParrotWeight = 100;\n   int myParrotAge = 3;\n   \n   int myParrotPortion = countSeeds(myParrotWeight, myParrotAge); \n   // now myParrotPortion equals 23\n   \n   \n   1\n   2\n   3\n   4\n   5\n   \n   \n   There's another important thing to remember. When you pass a variable of a primitive type to a method, a copy of this variable is created with the same value. Inside a method, only this copy is processed. Any changes to this copy will not affect the variable that was passed.\n   \n   Take a look:\n   \n   public static void main(String[] args) {\n       int portion = 100;   \n       addSeeds(portion); // try to change portion \n   \n       // now let's print a portion\n       System.out.println(portion);\n       // 100, because the method didn't change portion, only its copy\n   }\n   \n   /**\n    * The method increases the portion of seeds by 50 \n    * and prints the resulting value\n    */ \n   public static void addSeeds(int portion) {\n       portion += 50;\n       System.out.println(\"The increased portion is \" + portion); \n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   16\n   17\n   \n   \n   The output will look like:\n   \n   The increased portion is 150\n   100\n   \n   \n   1\n   2\n   \n   \n   Although the addSeeds method changes the passed argument, it happens to a different variable with its own value, leaving the value of the portion we've created intact.\n   \n   \n   # Conclusion\n   \n   As you see, a method is a block of code that contains a set of modifiers, a return type, a name, a list of its parameters, and a body. A method may return a value or return nothing, which is indicated with the void keyword.\n   \n   If you know the syntax of methods, you can create your own and adjust them for your needs. This practice will make your code more structured and reusable.",normalizedContent:" * built-in methods are a real deal when you manage routine tasks. still, they are not a cure-all solution since it's impossible to provide a standard method for each specific task. for example, you may need to convert dollars to euros, count your monthly spendings, or even calculate a daily portion of seeds for your parrot multiple times. that's when you create your own method to avoid repeating tons of code!\n   \n   in contrast to built-in methods, user-defined methods are created by the programmer. it is a common practice to create a customized subprogram for a specific purpose.\n   \n   but how to create it? let's figure it out.\n   \n   \n   # the syntax of the method\n   \n   technically, a method is just a structured part of code with a few components. in java, a method is always located inside a class. let's take a closer look at a method that calculates a daily portion of seeds for a parrot:\n   \n   \n   \n   a method contains a set of modifiers, a type of the return value, a name, a list of parameters in parentheses () , and a body in curly brackets {}. the combination of the name of the method and the list of its parameters is known as a method signature. in our example, the signature is countseeds(int, int).\n   \n   some methods also have a list of exceptions — they define the method's behavior in case of a mistake in the program. if during an execution of a method one of its exceptions is thrown, the exception is handled outside the method. for now, we'll consider simple methods without exceptions.\n   \n   let's focus on the main components that we need to write simple methods from scratch.\n   \n   \n   # modifiers\n   \n   the first words are so-called modifiers. there are two types of modifiers in java: access modifiers and non-access modifiers.\n   \n   access modifiers define the visibility of the method. for now, we're using a public access modifier, which means there are no restrictions for invoking the method even from other classes.\n   \n   non-access modifiers provide information about the behavior of methods to jvm. the modifier static means that the method belongs to the class and it can be accessed without creating any object. this type of method is called a static method.\n   \n   if the method is declared without the static modifier, it means that the method can be invoked only through or with an object or instance of this class. such methods are called instance methods.\n   \n   remember that there is a recommended order for the modifiers that you can find in the java language specification. in our case, it is public static.\n   \n   \n   # method parameters\n   \n   in parentheses after the method name, we define the type, number, and order of the parameters. this reflects how they will be passed to the method when it is invoked. take a look at these signatures:\n   \n   converteurostodollars(double dlrrate, long eur);\n   \n   countmonthlyspendings(long food, long rent, long fun); \n   \n   replace(char a, char b);\n   \n   \n   1\n   2\n   3\n   4\n   5\n   \n   \n   as you know, there are also methods that don't have values passed to them. these methods are known as non-parameterized.\n   \n   \n   # body and return statement\n   \n   before a method completes its execution and exits, it returns a value known as a return value. the result of your method execution can be a value of primitive types like int, float, double, boolean, or reference types like string. take a look at our countseeds method with the return type int:\n   \n   public static int countseeds(int parrotweight, int parrotage) {   \n       return parrotweight / 5 + parrotage; // it returns an int\n   }\n   \n   \n   1\n   2\n   3\n   \n   \n   what you see inside the curly brackets is known as the body of the method. the body holds the logic we want to implement by our method: a set of statements to perform with the passed values to obtain the result. our method countseeds takes two provided values, performs certain calculations, and returns the result within a return statement.\n   \n   methods do not necessarily have to return a value. if we want a method not to return a value but to perform operations only, the keyword void is used as a return type:\n   \n   public static void countseeds(int parrotweight, int parrotage) {\n       system.out.println(\"give your parrot \" + (parrotweight / 5 + parrotage) + \n       \"g of seeds per day\");\n   }\n   // this method just prints the line, so it returns no value\n   \n   \n   1\n   2\n   3\n   4\n   5\n   \n   \n   this method prints the line with recommendations on feeding the parrot and does not allow us to keep a value. note that there is no return statement.\n   \n   though methods with a void return type return nothing, you still may use a return word to exit the method. usually, this applies to methods with conditions. take a look:\n   \n   public static void ispositive(int num) {\n       if (num > 0) {\n           system.out.println(\"the number is positive\");\n       } else {\n           return;\n       }\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   \n   \n   remember, that if you try to return a value from a method with a void return type, a compile error will be thrown.\n   \n   \n   # what happens when we invoke a method\n   \n   when invoking a method, we can write the returned value to some variable, print it out, or pass it on to another method. this is how it looks in a program:\n   \n   int myparrotweight = 100;\n   int myparrotage = 3;\n   \n   int myparrotportion = countseeds(myparrotweight, myparrotage); \n   // now myparrotportion equals 23\n   \n   \n   1\n   2\n   3\n   4\n   5\n   \n   \n   there's another important thing to remember. when you pass a variable of a primitive type to a method, a copy of this variable is created with the same value. inside a method, only this copy is processed. any changes to this copy will not affect the variable that was passed.\n   \n   take a look:\n   \n   public static void main(string[] args) {\n       int portion = 100;   \n       addseeds(portion); // try to change portion \n   \n       // now let's print a portion\n       system.out.println(portion);\n       // 100, because the method didn't change portion, only its copy\n   }\n   \n   /**\n    * the method increases the portion of seeds by 50 \n    * and prints the resulting value\n    */ \n   public static void addseeds(int portion) {\n       portion += 50;\n       system.out.println(\"the increased portion is \" + portion); \n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   16\n   17\n   \n   \n   the output will look like:\n   \n   the increased portion is 150\n   100\n   \n   \n   1\n   2\n   \n   \n   although the addseeds method changes the passed argument, it happens to a different variable with its own value, leaving the value of the portion we've created intact.\n   \n   \n   # conclusion\n   \n   as you see, a method is a block of code that contains a set of modifiers, a return type, a name, a list of its parameters, and a body. a method may return a value or return nothing, which is indicated with the void keyword.\n   \n   if you know the syntax of methods, you can create your own and adjust them for your needs. this practice will make your code more structured and reusable.",charsets:{},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：The main method",frontmatter:{title:"Theory：The main method",date:"2022-06-23T10:59:12.000Z",permalink:"/pages/49c354/",tags:["Java"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/01.Java%20basic/18.Theory%EF%BC%9AThe%20main%20method.html",relativePath:"01.Java/01.Hyperskill - Java/01.Java basic/18.Theory：The main method.md",key:"v-573f69f5",path:"/pages/49c354/",headers:[{level:2,title:"The declaration of the main method",slug:"the-declaration-of-the-main-method",normalizedTitle:"the declaration of the main method",charIndex:2},{level:2,title:"Invalid declarations of the main method",slug:"invalid-declarations-of-the-main-method",normalizedTitle:"invalid declarations of the main method",charIndex:2040},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:3128}],headersStr:"The declaration of the main method Invalid declarations of the main method Conclusion",content:'# The declaration of the main method\n\nJava is primarily an object-oriented language. It means a Java program can be considered as a collection of objects that communicate via calling each other\'s methods. A typical Java program includes a lot of classes, interfaces, objects, and other concepts from object-oriented programming.\n\nEven the simplest "procedural-style" program should have at least one class and the main method inside to start the program. The main method is the entry point for any application. It means that the execution of any program begins right here. Ever since Java 7, there has been no other way to start an application without this method (excluding the case when you start your application inside a special container for applications, but it is not considered in our materials).\n\nLet\'s see an example of the simplest application that prints the text "Hello, Java" in the standard output:\n\npublic class Main {\n\n    public static void main(String[] args) {\n        System.out.println("Hello, Java");\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\nHere is a class named Main. The class contains the main method for starting the program.\n\nIt is important to mention that a class containing the main method can have any name, but the main method should always have the name main.\n\nLet\'s take a closer look at the declaration of the main method:\n\npublic static void main(String[] args)\n\n\n1\n\n * the keyword public indicates that the method can be invoked from everywhere;\n * the keyword static indicates the method can be invoked without creating an instance of the class;\n * the keyword void indicates the method doesn\'t return any value;\n * the array variable args contains arguments entered at the command line, the array is empty if there are no arguments.\n\nAs you can see, even the simplest Java application contains a lot of concepts. All of them will be studied in the next topics related to methods and the object-oriented programming. Now you should just understand how to write and run a simple Java program with the main method.\n\n\n# Invalid declarations of the main method\n\nIf the main method has an invalid declaration, two cases are possible:\n\n * your program cannot be compiled\n * your program is successfully compiled but can\'t be started\n\nYour program cannot be compiled. This is the case when the main method declaration breaks the syntax of Java.\n\nExamples:\n\n * invalid method declaration: no return value (even void).\n\npublic static main(String[] args)\n\n\n1\n\n * invalid method declaration: a mistake in the keyword (pulic instead of public).\n\npulic static void main(String[] args)\n\n\n1\n\n\nA program can be compiled but cannot be run. This is the case when the main method has a correct declaration as a regular method but doesn\'t satisfy the specific requirement of the main method.\n\nExamples:\n\n * invalid arguments (should be String[] args)\n\npublic static void main(String args) {\n    System.out.println("Hello, Java");\n}\n\n\n1\n2\n3\n\n * the method declaration has no keyword static\n\npublic void main(String[] args) { \n    System.out.println("Hello, Java");\n} \n\n\n1\n2\n3\n\n\nIn both cases, an error happens at runtime.\n\n\n# Conclusion\n\nSo, the main method is the entry point of any Java program. It has a very specific syntax which you need to remember.',normalizedContent:'# the declaration of the main method\n\njava is primarily an object-oriented language. it means a java program can be considered as a collection of objects that communicate via calling each other\'s methods. a typical java program includes a lot of classes, interfaces, objects, and other concepts from object-oriented programming.\n\neven the simplest "procedural-style" program should have at least one class and the main method inside to start the program. the main method is the entry point for any application. it means that the execution of any program begins right here. ever since java 7, there has been no other way to start an application without this method (excluding the case when you start your application inside a special container for applications, but it is not considered in our materials).\n\nlet\'s see an example of the simplest application that prints the text "hello, java" in the standard output:\n\npublic class main {\n\n    public static void main(string[] args) {\n        system.out.println("hello, java");\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\nhere is a class named main. the class contains the main method for starting the program.\n\nit is important to mention that a class containing the main method can have any name, but the main method should always have the name main.\n\nlet\'s take a closer look at the declaration of the main method:\n\npublic static void main(string[] args)\n\n\n1\n\n * the keyword public indicates that the method can be invoked from everywhere;\n * the keyword static indicates the method can be invoked without creating an instance of the class;\n * the keyword void indicates the method doesn\'t return any value;\n * the array variable args contains arguments entered at the command line, the array is empty if there are no arguments.\n\nas you can see, even the simplest java application contains a lot of concepts. all of them will be studied in the next topics related to methods and the object-oriented programming. now you should just understand how to write and run a simple java program with the main method.\n\n\n# invalid declarations of the main method\n\nif the main method has an invalid declaration, two cases are possible:\n\n * your program cannot be compiled\n * your program is successfully compiled but can\'t be started\n\nyour program cannot be compiled. this is the case when the main method declaration breaks the syntax of java.\n\nexamples:\n\n * invalid method declaration: no return value (even void).\n\npublic static main(string[] args)\n\n\n1\n\n * invalid method declaration: a mistake in the keyword (pulic instead of public).\n\npulic static void main(string[] args)\n\n\n1\n\n\na program can be compiled but cannot be run. this is the case when the main method has a correct declaration as a regular method but doesn\'t satisfy the specific requirement of the main method.\n\nexamples:\n\n * invalid arguments (should be string[] args)\n\npublic static void main(string args) {\n    system.out.println("hello, java");\n}\n\n\n1\n2\n3\n\n * the method declaration has no keyword static\n\npublic void main(string[] args) { \n    system.out.println("hello, java");\n} \n\n\n1\n2\n3\n\n\nin both cases, an error happens at runtime.\n\n\n# conclusion\n\nso, the main method is the entry point of any java program. it has a very specific syntax which you need to remember.',charsets:{},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：Type casting",frontmatter:{title:"Theory：Type casting",date:"2022-08-09T14:18:31.000Z",permalink:"/pages/9f6278/",tags:["Data Type","Java"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/01.Java%20basic/19.Theory%EF%BC%9AType%20casting.html",relativePath:"01.Java/01.Hyperskill - Java/01.Java basic/19.Theory：Type casting.md",key:"v-2b0e2026",path:"/pages/9f6278/",headers:[{level:2,title:"Implicit casting",slug:"implicit-casting",normalizedTitle:"implicit casting",charIndex:374},{level:2,title:"Explicit casting",slug:"explicit-casting",normalizedTitle:"explicit casting",charIndex:2705},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:4932}],headersStr:"Implicit casting Explicit casting Conclusion",content:"Suppose you need to assign a value of one type to a variable of another type. To do that, your program needs to cast the source type to the target type. Java provides two kinds of casting for primitive types: implicit and explicit. The first one is performed automatically by the Java compiler when it is possible, while the second one can only be done by a programmer.\n\n\n# Implicit casting\n\nThe compiler automatically performs implicit casting when the target type is wider than the source type. The picture below illustrates the direction of this casting. Any value of a given type can be assigned to the one on the right implicitly, or below, in the case of char.\n\n\n\nThe direction of implicit primitive type castings\n\nNormally, there is no loss of information when the target type is wider than the source type, for example when we cast int to long. But it is not possible to automatically cast in the backward order (e.g. from long to int or from double to float).\n\n提示\n\nNote that there is no boolean type on the picture above, because it is impossible to cast this type to any other and vice versa.\n\nHere are several examples of implicit castings:\n\n * from int to long:\n\nint num = 100;\nlong bigNum = num; // 100L\n\n\n1\n2\n\n * from long to double:\n\nlong bigNum = 100_000_000L;\ndouble bigFraction = bigNum; // 100000000.0\n\n\n1\n2\n\n * from short to int:\n\nshort shortNum = 100;\nint num = shortNum; // 100\n\n\n1\n2\n\n * from char to int:\n\nchar ch = '?';\nint code = ch; // 63\n\n\n1\n2\n\n\nIn some cases, implicit type casting may result in some information loss. When we convert an int to float, or a long to float or to double, we may lose some less significant bits of the value, which will result in a loss of precision. However, the result of this conversion will be a correctly rounded version of the integer value, which will be in the overall range of the target type. To understand that, check out the example:\n\nlong bigLong =  1_200_000_002L;\nfloat bigFloat = bigLong; // 1.2E9 (= 1_200_000_000)\n\n\n1\n2\n\n\nWhen we convert a char to an int in Java we actually get the ASCII value for a given character. ASCII value is an integer representation of English alphabet letters (both uppercase and lowercase), digits, and other symbols. Here you can find some of the standard symbols in ASCII.\n\nchar character = 'a';\nchar upperCase = 'A';\n\nint ascii1 = character; // this is 97\nint ascii2 = upperCase; // this is 65\n\n\n1\n2\n3\n4\n5\n\n\n提示\n\nStrictly speaking, Java uses Unicode Character Representations (UTF-16), which is a superset of ASCII and includes a by far larger set of symbols. However, the numbers 0–127 have the same values in ASCII and Unicode.\n\nAs you can see, implicit casting works absolutely transparently.\n\n\n# Explicit casting\n\nThe considered implicit casting does not work when the target type is narrower than the source type. But programmers can apply explicit casting to a source type to get another type they want. It may lose information about the overall magnitude of a numeric value and may also lose precision.\n\nTo perform explicit casting, a programmer must write the target type in parentheses before the source.\n\n(targetType) source\n\n\n1\n\n\nAny possible casting not presented in the picture above needs such an approach, for example double to int, and long to char.\n\nExamples:\n\ndouble d = 2.00003;\n\n// it loses the fractional part\nlong l =  (long) d; // 2\n\n// requires explicit casting because long is wider than int\nint i = (int) l; // 2 \n\n// requires explicit casting because the result is long (indicated by L)\nint val = (int) (3 + 2L); // 5\n\n// casting from a long literal to char\nchar ch = (char) 55L; // '7'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\nHowever, the explicit casting may truncate the value, because long and double can store a much larger number than int.\n\nlong bigNum = 100_000_000_000_000L;\nint n = (int) bigNum; // 276447232\n\n\n1\n2\n\n\nOops! The value has been truncated. This problem is known as type overflow. The same problem may occur when casting int to short or byte. Let's see what happens exactly.\n\nAs you remember, in Java long is a 64-bit number, while int is 32-bit. When converting long to int the program just takes the last 32 bits to represent the new number. If the long contains a number less than or equal to Integer.MAX_VALUE you can convert it by casting without losing information. Otherwise, the result will be quite meaningless, although determined. That is why you shouldn't perform casting from a larger type to a smaller type unless you are absolutely sure that it is necessary, and that truncation will not interfere with your program.\n\nExplicit casting also works when implicit casting is enough.\n\nint num = 10;\nlong bigNum = (long) num; // redundant casting\n\n\n1\n2\n\n\nBut this is redundant and should not be used to avoid unnecessary constructs in your code.\n\n提示\n\nNote, that despite the power of explicit casting, it is still impossible to cast something to and from the boolean type.\n\n\n# Conclusion\n\nIf you want to cast a narrower type to a wider type, you do not need to write anything, the Java compiler will do it automatically for you. But if you want the opposite, specify the required type in parentheses following the assignment operator. Keep in mind, the boolean type cannot be cast to another type and vice versa.",normalizedContent:"suppose you need to assign a value of one type to a variable of another type. to do that, your program needs to cast the source type to the target type. java provides two kinds of casting for primitive types: implicit and explicit. the first one is performed automatically by the java compiler when it is possible, while the second one can only be done by a programmer.\n\n\n# implicit casting\n\nthe compiler automatically performs implicit casting when the target type is wider than the source type. the picture below illustrates the direction of this casting. any value of a given type can be assigned to the one on the right implicitly, or below, in the case of char.\n\n\n\nthe direction of implicit primitive type castings\n\nnormally, there is no loss of information when the target type is wider than the source type, for example when we cast int to long. but it is not possible to automatically cast in the backward order (e.g. from long to int or from double to float).\n\n提示\n\nnote that there is no boolean type on the picture above, because it is impossible to cast this type to any other and vice versa.\n\nhere are several examples of implicit castings:\n\n * from int to long:\n\nint num = 100;\nlong bignum = num; // 100l\n\n\n1\n2\n\n * from long to double:\n\nlong bignum = 100_000_000l;\ndouble bigfraction = bignum; // 100000000.0\n\n\n1\n2\n\n * from short to int:\n\nshort shortnum = 100;\nint num = shortnum; // 100\n\n\n1\n2\n\n * from char to int:\n\nchar ch = '?';\nint code = ch; // 63\n\n\n1\n2\n\n\nin some cases, implicit type casting may result in some information loss. when we convert an int to float, or a long to float or to double, we may lose some less significant bits of the value, which will result in a loss of precision. however, the result of this conversion will be a correctly rounded version of the integer value, which will be in the overall range of the target type. to understand that, check out the example:\n\nlong biglong =  1_200_000_002l;\nfloat bigfloat = biglong; // 1.2e9 (= 1_200_000_000)\n\n\n1\n2\n\n\nwhen we convert a char to an int in java we actually get the ascii value for a given character. ascii value is an integer representation of english alphabet letters (both uppercase and lowercase), digits, and other symbols. here you can find some of the standard symbols in ascii.\n\nchar character = 'a';\nchar uppercase = 'a';\n\nint ascii1 = character; // this is 97\nint ascii2 = uppercase; // this is 65\n\n\n1\n2\n3\n4\n5\n\n\n提示\n\nstrictly speaking, java uses unicode character representations (utf-16), which is a superset of ascii and includes a by far larger set of symbols. however, the numbers 0–127 have the same values in ascii and unicode.\n\nas you can see, implicit casting works absolutely transparently.\n\n\n# explicit casting\n\nthe considered implicit casting does not work when the target type is narrower than the source type. but programmers can apply explicit casting to a source type to get another type they want. it may lose information about the overall magnitude of a numeric value and may also lose precision.\n\nto perform explicit casting, a programmer must write the target type in parentheses before the source.\n\n(targettype) source\n\n\n1\n\n\nany possible casting not presented in the picture above needs such an approach, for example double to int, and long to char.\n\nexamples:\n\ndouble d = 2.00003;\n\n// it loses the fractional part\nlong l =  (long) d; // 2\n\n// requires explicit casting because long is wider than int\nint i = (int) l; // 2 \n\n// requires explicit casting because the result is long (indicated by l)\nint val = (int) (3 + 2l); // 5\n\n// casting from a long literal to char\nchar ch = (char) 55l; // '7'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\nhowever, the explicit casting may truncate the value, because long and double can store a much larger number than int.\n\nlong bignum = 100_000_000_000_000l;\nint n = (int) bignum; // 276447232\n\n\n1\n2\n\n\noops! the value has been truncated. this problem is known as type overflow. the same problem may occur when casting int to short or byte. let's see what happens exactly.\n\nas you remember, in java long is a 64-bit number, while int is 32-bit. when converting long to int the program just takes the last 32 bits to represent the new number. if the long contains a number less than or equal to integer.max_value you can convert it by casting without losing information. otherwise, the result will be quite meaningless, although determined. that is why you shouldn't perform casting from a larger type to a smaller type unless you are absolutely sure that it is necessary, and that truncation will not interfere with your program.\n\nexplicit casting also works when implicit casting is enough.\n\nint num = 10;\nlong bignum = (long) num; // redundant casting\n\n\n1\n2\n\n\nbut this is redundant and should not be used to avoid unnecessary constructs in your code.\n\n提示\n\nnote, that despite the power of explicit casting, it is still impossible to cast something to and from the boolean type.\n\n\n# conclusion\n\nif you want to cast a narrower type to a wider type, you do not need to write anything, the java compiler will do it automatically for you. but if you want the opposite, specify the required type in parentheses following the assignment operator. keep in mind, the boolean type cannot be cast to another type and vice versa.",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：Sizes and ranges",frontmatter:{title:"Theory：Sizes and ranges",date:"2022-08-09T14:48:22.000Z",permalink:"/pages/1266f4/",tags:["Java basic"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/01.Java%20basic/11.Theory%EF%BC%9ASizes%20and%20ranges.html",relativePath:"01.Java/01.Hyperskill - Java/01.Java basic/11.Theory：Sizes and ranges.md",key:"v-8fe997c6",path:"/pages/1266f4/",headers:[{level:2,title:"Numbers",slug:"numbers",normalizedTitle:"numbers",charIndex:532},{level:2,title:"Characters",slug:"characters",normalizedTitle:"characters",charIndex:2153},{level:2,title:"Booleans",slug:"booleans",normalizedTitle:"booleans",charIndex:2589},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:2917}],headersStr:"Numbers Characters Booleans Conclusion",content:"This topic teaches the classification and properties of primitive types provided by Java. Maybe you already know some of them. There are several groups of basic types divided by meaning. Types from the same group operate similarly, but they have different sizes and, as a result, represent different ranges of values.\n\nYou do not need to know all this information by heart because it is easy to find it in the documentation or Google it. But a common understanding of these concepts is essential in job interviews and practice.\n\n\n# Numbers\n\nJava provides several types for integers and fractional numbers. These types are often used in arithmetic expressions.\n\nInteger numbers (0, 1, 2, ...) are represented by the following four types: long, ⁣int, short, and byte(from the largest to the smallest). These types have different sizes and may represent different ranges of values. The range of an integer type is calculated as −(2^{n−1})−(2n−1) to (2^{n−1})−1(2n−1)−1, where n*n* is the number of bits. The range includes 0, so we subtract 1 from the upper bound.\n\n * byte: size 8 bits (1 byte), ranging from -128−128 to 127127;\n * short: size 16 bits (2 bytes), ranging from -32768−32768 to 3276732767;\n * int: size 32 bits (4 bytes), ranging from −(2^{31})−(231) to (2^{31})−1(231)−1;\n * long: size 64 bits (8 bytes), ranging from −(2^{63})−(263) to (2^{63})−1(263)−1.\n\nThe sizes of types are always the same. They do not depend on the operating system or hardware and cannot be changed.\n\nThe most commonly used integer types are int and long. Try to use int if it suits your purposes. Otherwise, use long.\n\nint one = 1;\nlong million = 1_000_000L;\n\n\n1\n2\n\n\nFloating-point types represent numbers with fractional parts. Java has two such types: double (64 bits) and float (32 bits). These types can store only a limited number of significant decimal digits (~6-7 for float and ~14-16 for double). Usually, you will use the double type in practice.\n\ndouble pi = 3.1415;\nfloat e = 2.71828f;\n\n\n1\n2\n\n\nWhen you declare and initialize a float variable, mark the assigned value with the special letter f. Similarly, a long value is marked with the letter L.\n\n\n# Characters\n\nJava has a type named char to represent letters (uppercase and lowercase), digits, and other symbols. Each character is just a single letter enclosed in single quotes. This type has the same size as the short type (2 bytes = 16 bits).\n\nchar lowerCaseLetter = 'a';\nchar upperCaseLetter = 'Q';\nchar dollar = '$';\n\n\n1\n2\n3\n\n\nCharacters represent symbols from many alphabets, including hieroglyphs and other special symbols.\n\n\n# Booleans\n\nJava provides a type called boolean, which can store only two values: true and false. It represents only one bit of information, but its size is not precisely defined.\n\nboolean enabled = true;\nboolean bugFound = false;\n\n\n1\n2\n\n\nYou will often use this type in conditionals and as a result of comparing two numbers.\n\n\n# Conclusion\n\n * There are several types for integers and fractional numbers;\n * Integer numbers are represented by long, ⁣int, ⁣short, and byte;\n * Floating-point types represent numbers with fractional parts: double (64 bits) and float (32 bits);\n * char type represents letters (uppercase and lowercase), digits, and other symbols;\n * boolean stores only true and falsevalues.\n\nRemember that knowledge of sizes and ranges of data types may help you with interviews.",normalizedContent:"this topic teaches the classification and properties of primitive types provided by java. maybe you already know some of them. there are several groups of basic types divided by meaning. types from the same group operate similarly, but they have different sizes and, as a result, represent different ranges of values.\n\nyou do not need to know all this information by heart because it is easy to find it in the documentation or google it. but a common understanding of these concepts is essential in job interviews and practice.\n\n\n# numbers\n\njava provides several types for integers and fractional numbers. these types are often used in arithmetic expressions.\n\ninteger numbers (0, 1, 2, ...) are represented by the following four types: long, ⁣int, short, and byte(from the largest to the smallest). these types have different sizes and may represent different ranges of values. the range of an integer type is calculated as −(2^{n−1})−(2n−1) to (2^{n−1})−1(2n−1)−1, where n*n* is the number of bits. the range includes 0, so we subtract 1 from the upper bound.\n\n * byte: size 8 bits (1 byte), ranging from -128−128 to 127127;\n * short: size 16 bits (2 bytes), ranging from -32768−32768 to 3276732767;\n * int: size 32 bits (4 bytes), ranging from −(2^{31})−(231) to (2^{31})−1(231)−1;\n * long: size 64 bits (8 bytes), ranging from −(2^{63})−(263) to (2^{63})−1(263)−1.\n\nthe sizes of types are always the same. they do not depend on the operating system or hardware and cannot be changed.\n\nthe most commonly used integer types are int and long. try to use int if it suits your purposes. otherwise, use long.\n\nint one = 1;\nlong million = 1_000_000l;\n\n\n1\n2\n\n\nfloating-point types represent numbers with fractional parts. java has two such types: double (64 bits) and float (32 bits). these types can store only a limited number of significant decimal digits (~6-7 for float and ~14-16 for double). usually, you will use the double type in practice.\n\ndouble pi = 3.1415;\nfloat e = 2.71828f;\n\n\n1\n2\n\n\nwhen you declare and initialize a float variable, mark the assigned value with the special letter f. similarly, a long value is marked with the letter l.\n\n\n# characters\n\njava has a type named char to represent letters (uppercase and lowercase), digits, and other symbols. each character is just a single letter enclosed in single quotes. this type has the same size as the short type (2 bytes = 16 bits).\n\nchar lowercaseletter = 'a';\nchar uppercaseletter = 'q';\nchar dollar = '$';\n\n\n1\n2\n3\n\n\ncharacters represent symbols from many alphabets, including hieroglyphs and other special symbols.\n\n\n# booleans\n\njava provides a type called boolean, which can store only two values: true and false. it represents only one bit of information, but its size is not precisely defined.\n\nboolean enabled = true;\nboolean bugfound = false;\n\n\n1\n2\n\n\nyou will often use this type in conditionals and as a result of comparing two numbers.\n\n\n# conclusion\n\n * there are several types for integers and fractional numbers;\n * integer numbers are represented by long, ⁣int, ⁣short, and byte;\n * floating-point types represent numbers with fractional parts: double (64 bits) and float (32 bits);\n * char type represents letters (uppercase and lowercase), digits, and other symbols;\n * boolean stores only true and falsevalues.\n\nremember that knowledge of sizes and ranges of data types may help you with interviews.",charsets:{},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：Primitive and reference types",frontmatter:{title:"Theory：Primitive and reference types",date:"2022-04-18T23:09:41.000Z",permalink:"/pages/577f0d/",tags:["Data Type","Java"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/01.Java%20basic/20.Theory%EF%BC%9APrimitive%20and%20reference%20types.html",relativePath:"01.Java/01.Hyperskill - Java/01.Java basic/20.Theory：Primitive and reference types.md",key:"v-d0785a8c",path:"/pages/577f0d/",headers:[{level:2,title:"The new keyword",slug:"the-new-keyword",normalizedTitle:"the new keyword",charIndex:855},{level:2,title:"The main difference",slug:"the-main-difference",normalizedTitle:"the main difference",charIndex:1650},{level:2,title:"Assignment",slug:"assignment",normalizedTitle:"assignment",charIndex:2377},{level:2,title:"Comparisons",slug:"comparisons",normalizedTitle:"comparisons",charIndex:3186},{level:2,title:"The null type",slug:"the-null-type",normalizedTitle:"the null type",charIndex:4018}],headersStr:"The new keyword The main difference Assignment Comparisons The null type",content:'# Theory：Primitive and reference types\n\n\n> [Reference Data Types in Java - Javatpoint.com](https://www.javatpoint.com/reference-data-types-in-java)\n\nIn Java, all data types are separated into two groups: primitive types and reference types.\n\nJava provides only eight primitive types. They are built-in in the language syntax as keywords. The names of all primitive types are lowercase. The most commonly used type is int which represents an integer number.\n\nint num = 100;\n\n\n1\n\n\nThe number of reference types is huge and constantly growing. A programmer can even create their own type and use it like standard types. The most frequently used reference types are String, Scanner and arrays. Remember that Java, like most programming languages, is case sensitive. In this topic, we will focus on String, which is a common example of the reference type.\n\n\n# The new keyword\n\nIn most cases, an object of a reference type can be created using the new keyword. When we use the new keyword, the memory is allocated for the object we create. That is called instantiation of the object because we create an instance of it. Then we initialize the variable by assigning some value to it. Often, as in our example, it is done with one line.\n\nString language = new String("java"); \n//instantiation of String and initialization with "java"\n\n\n1\n2\n\n\nYou can also use a literal for strings:\n\nString language = "java";\n\n\n1\n\n\nThe first approach with the keyword new is common for reference types, while the second is only string-specific. Both approaches give us the same result for strings but they have some technical differences which we will not consider here.\n\n\n# The main difference\n\nThe basic difference between primitive and reference types is that a variable of a primitive type stores the actual values, whereas a variable of a reference type stores an address in memory (reference) where the data is located. The data can be presented as a complex structure that includes other data types as their parts.\n\nThe following picture simply demonstrates this difference. There are two main memory spaces: stack and heap. All values of primitive types are stored in stack memory, but variables of reference types store addresses of objects located in heap memory.\n\n\n\nWe will not consider stack and heap in detail here. Just remember this difference between primitive and reference types.\n\n\n# Assignment\n\nThe way to store data also affects the mechanism to assign the value of a variable to another variable:\n\n * primitive types: the value is just copied;\n * reference types: the address to the value is copied (the data is shared between several variables).\n\nHere is a snippet of code and a picture that demonstrates this.\n\nint a = 100;\nint b = a; // 100 is copied to b\n\nString language = new String("java");\nString java = language;\n\n\n1\n2\n3\n4\n5\n\n\nThe variable b has a copy of the value stored in the variable a. But the variables language and java reference the same value, rather than copying it. The picture below clearly demonstrates the difference.\n\n\n\nJust remember, when assigning one value of a reference variable to another, we just make a copy of a reference rather than the value itself.\n\n\n# Comparisons\n\nComparing reference types using == and != is not the same as comparing primitive types. Actually, when you are comparing two variables of the String type, it compares references (addresses) rather than actual values.\n\nThe following code demonstrates it:\n\nString s1 = new String("java");\nString s2 = new String("java");\nString s3 = s2;\n\nSystem.out.println(s1 == s2); // false\nSystem.out.println(s2 == s3); // true\n\n\n1\n2\n3\n4\n5\n6\n\n\nThe picture below demonstrates this effect:\n\n\n\nSo, you should not use comparison operators when you want to compare the values. The correct way to compare content is to invoke the special method equals.\n\nString s1 = new String("java");\nString s2 = new String("java");\nString s3 = s2;\n\nSystem.out.println(s1.equals(s2)); // true\nSystem.out.println(s2.equals(s3)); // true\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# The null type\n\nUnlike primitive types, a variable of a reference type can refer to a special null value that represents the fact that it is not initialized yet or doesn\'t have a value.\n\nString str = null;\nSystem.out.println(str); // null\nstr = "hello";\nSystem.out.println(str); // hello\n\n\n1\n2\n3\n4\n\n\nThe following statement with a primitive type won\'t compile.\n\nint n = null; // it won\'t compile\n\n\n1\n\n\nUnfortunately, the frequent use of the null value can easily lead to errors in the program and complicate the code. Try to avoid null whenever it is possible, only use it if you really need it.',normalizedContent:'# theory：primitive and reference types\n\n\n> [reference data types in java - javatpoint.com](https://www.javatpoint.com/reference-data-types-in-java)\n\nin java, all data types are separated into two groups: primitive types and reference types.\n\njava provides only eight primitive types. they are built-in in the language syntax as keywords. the names of all primitive types are lowercase. the most commonly used type is int which represents an integer number.\n\nint num = 100;\n\n\n1\n\n\nthe number of reference types is huge and constantly growing. a programmer can even create their own type and use it like standard types. the most frequently used reference types are string, scanner and arrays. remember that java, like most programming languages, is case sensitive. in this topic, we will focus on string, which is a common example of the reference type.\n\n\n# the new keyword\n\nin most cases, an object of a reference type can be created using the new keyword. when we use the new keyword, the memory is allocated for the object we create. that is called instantiation of the object because we create an instance of it. then we initialize the variable by assigning some value to it. often, as in our example, it is done with one line.\n\nstring language = new string("java"); \n//instantiation of string and initialization with "java"\n\n\n1\n2\n\n\nyou can also use a literal for strings:\n\nstring language = "java";\n\n\n1\n\n\nthe first approach with the keyword new is common for reference types, while the second is only string-specific. both approaches give us the same result for strings but they have some technical differences which we will not consider here.\n\n\n# the main difference\n\nthe basic difference between primitive and reference types is that a variable of a primitive type stores the actual values, whereas a variable of a reference type stores an address in memory (reference) where the data is located. the data can be presented as a complex structure that includes other data types as their parts.\n\nthe following picture simply demonstrates this difference. there are two main memory spaces: stack and heap. all values of primitive types are stored in stack memory, but variables of reference types store addresses of objects located in heap memory.\n\n\n\nwe will not consider stack and heap in detail here. just remember this difference between primitive and reference types.\n\n\n# assignment\n\nthe way to store data also affects the mechanism to assign the value of a variable to another variable:\n\n * primitive types: the value is just copied;\n * reference types: the address to the value is copied (the data is shared between several variables).\n\nhere is a snippet of code and a picture that demonstrates this.\n\nint a = 100;\nint b = a; // 100 is copied to b\n\nstring language = new string("java");\nstring java = language;\n\n\n1\n2\n3\n4\n5\n\n\nthe variable b has a copy of the value stored in the variable a. but the variables language and java reference the same value, rather than copying it. the picture below clearly demonstrates the difference.\n\n\n\njust remember, when assigning one value of a reference variable to another, we just make a copy of a reference rather than the value itself.\n\n\n# comparisons\n\ncomparing reference types using == and != is not the same as comparing primitive types. actually, when you are comparing two variables of the string type, it compares references (addresses) rather than actual values.\n\nthe following code demonstrates it:\n\nstring s1 = new string("java");\nstring s2 = new string("java");\nstring s3 = s2;\n\nsystem.out.println(s1 == s2); // false\nsystem.out.println(s2 == s3); // true\n\n\n1\n2\n3\n4\n5\n6\n\n\nthe picture below demonstrates this effect:\n\n\n\nso, you should not use comparison operators when you want to compare the values. the correct way to compare content is to invoke the special method equals.\n\nstring s1 = new string("java");\nstring s2 = new string("java");\nstring s3 = s2;\n\nsystem.out.println(s1.equals(s2)); // true\nsystem.out.println(s2.equals(s3)); // true\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# the null type\n\nunlike primitive types, a variable of a reference type can refer to a special null value that represents the fact that it is not initialized yet or doesn\'t have a value.\n\nstring str = null;\nsystem.out.println(str); // null\nstr = "hello";\nsystem.out.println(str); // hello\n\n\n1\n2\n3\n4\n\n\nthe following statement with a primitive type won\'t compile.\n\nint n = null; // it won\'t compile\n\n\n1\n\n\nunfortunately, the frequent use of the null value can easily lead to errors in the program and complicate the code. try to avoid null whenever it is possible, only use it if you really need it.',charsets:{},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：Array",frontmatter:{title:"Theory：Array",date:"2022-04-21T15:51:37.000Z",permalink:"/pages/8da0ec/",tags:["Java","Array"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/01.Java%20basic/21.Theory%EF%BC%9AArray.html",relativePath:"01.Java/01.Hyperskill - Java/01.Java basic/21.Theory：Array.md",key:"v-5979dd85",path:"/pages/8da0ec/",headers:[{level:2,title:"Create an array",slug:"create-an-array",normalizedTitle:"create an array",charIndex:21},{level:3,title:"Declaration",slug:"declaration",normalizedTitle:"declaration",charIndex:41},{level:3,title:"Instantiation",slug:"instantiation",normalizedTitle:"instantiation",charIndex:248},{level:3,title:"Initialization",slug:"initialization",normalizedTitle:"initialization",charIndex:939},{level:3,title:"General write style",slug:"general-write-style",normalizedTitle:"general write style",charIndex:1137},{level:2,title:"To obtain the length of  the array",slug:"to-obtain-the-length-of-the-array",normalizedTitle:"to obtain the length of  the array",charIndex:null},{level:2,title:"Accessing elements",slug:"accessing-elements",normalizedTitle:"accessing elements",charIndex:1667},{level:2,title:"The utility class Arrays",slug:"the-utility-class-arrays",normalizedTitle:"the utility class arrays",charIndex:2212}],headersStr:"Create an array Declaration Instantiation Initialization General write style To obtain the length of  the array Accessing elements The utility class Arrays",content:"# Theory：Array\n\n\n\n\n# Create an array\n\n\n# Declaration\n\nint[] numbers;\n\n// int numbers[];    less used in parctice\n\n\n1\n2\n3\n\n\nDeclare the array variable's type and name. We must use two special characters [] after the type or the variable's name.\n\n\n# Instantiation\n\nint n = ...;    // n is a length of an array\nint[] number;    // declaration\n\nnumber = new int[n];    // instantiation\n\n\n1\n2\n3\n4\n\n\nThe new keyword represents instantiating the object. It depends on the array's type and length.\n\n提示\n\nThe size of an array cannot be greater than Integer.MAX_VALUE. Actually, it is even slightly smaller than this value.\n\n注意\n\nInstantiation happens when memory is allocated for this object.\n\nIf you don't assign some values for the array, will use the default values of its type.\n\nFor example, the int type's default value is 0(zero) and the String type's default value is null.\n\nSo, at instantiation phases, exists implicit initialize action.\n\n\n# Initialization\n\nint n = ...;    // n is a length of an array\nint[] number;    // declaration\nnumber = new int[n];    // instantiation\n\nnumber = { 1, 2, 3, 4 };    // initialization\n\n\n1\n2\n3\n4\n5\n\n\n\n# General write style\n\nYeah, we can separate declaration, instantiation, and initialization like above. Also, we can join them and put in fewer lines:\n\nint[] number = new int[4];\nnumber = { 1, 2, 3, 4 };\n\n\n1\n2\n\n\nOr this:\n\nint[] number = new int[] { 1, 2, 3, 4 };\n\n\n1\n\n\nOr even like this:\n\nint[] numbers = { 1, 2, 3, 4 };\n\n\n1\n\n\n\n# To obtain the length of the array\n\nint[] array = { 1, 2, 3, 4 }; // an array of numbers\n\nint length = array.length; // number of elements of the array\n\nSystem.out.println(length); // 4\n\n\n1\n2\n3\n4\n5\n\n\n\n# Accessing elements\n\nSet the value by the index:\n\narray[index] = val;\n\n\n1\n\n\nGet the value by the index:\n\nval = array[index];\n\n\n1\n\n\nIndexes of an array have numbers from 0 to length – 1 inclusive.\n\nLet's see an example.\n\nint[] numbers = new int[3]; // numbers: [0, 0, 0]\nnumbers[0] = 1; // numbers: [1, 0, 0]\nnumbers[1] = 2; // numbers: [1, 2, 0]\nnumbers[2] = numbers[0] + numbers[1]; // numbers: [1, 2, 3]\n\n\n1\n2\n3\n4\n\n\n提示\n\nIf we try to access a non-existing element by an index then a runtime exception occurs.\n\nArrayIndexOutOfBoundsException\n\n\n# The utility class Arrays\n\nIf you need to process arrays, you can import and use standard methods grouped in the utility class Arrays.\n\n * convert an array to string using Arrays.toString(array) and then print it:\n\nbyte[] famousNumbers = { 0, 1, 2, 4, 8, 16, 32, 64 };\nString arrayAsString = Arrays.toString(famousNumbers); // [0, 1, 2, 4, 8, 16, 32, 64]\nSystem.out.println(arrayAsString);\n\n\n1\n2\n3\n\n * sorting a whole array or a part of it using Arrays.sort(array):\n\nlong[] bigNumbers = { 200000000L, 400000000L, 100000000L, 300000000L }; // it's unsorted\n\nArrays.sort(bigNumbers); // sorting whole array\n\nSystem.out.println(Arrays.toString(bigNumbers)); // [100000000, 200000000, 300000000, 400000000]\n\n\n1\n2\n3\n4\n5\n\n * comparing arrays: two arrays are equal if they contain the same elements in the same order:\n\nint[] numbers1 = { 1, 2, 5, 8 };\nint[] numbers2 = { 1, 2, 5 };\nint[] numbers3 = { 1, 2, 5, 8 };\n\nSystem.out.println(Arrays.equals(numbers1, numbers2)); // it prints \"false\"\nSystem.out.println(Arrays.equals(numbers1, numbers3)); // it prints \"true\"\n\n\n1\n2\n3\n4\n5\n6\n\n * filling a whole array or a part of it by some values:\n\nint size = 10;\nchar[] characters = new char[size];\n\n// It takes an array, start index, end index (exclusive) and the value for filling the array\nArrays.fill(characters, 0, size / 2, 'A'); \nArrays.fill(characters, size / 2, size, 'B');\n\nSystem.out.println(Arrays.toString(characters)); // it prints [A, A, A, A, A, B, B, B, B, B]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nOf course, the Arrays class contains a lot of other useful methods, including array copying, searching in arrays, and so on. For details see here.",normalizedContent:"# theory：array\n\n\n\n\n# create an array\n\n\n# declaration\n\nint[] numbers;\n\n// int numbers[];    less used in parctice\n\n\n1\n2\n3\n\n\ndeclare the array variable's type and name. we must use two special characters [] after the type or the variable's name.\n\n\n# instantiation\n\nint n = ...;    // n is a length of an array\nint[] number;    // declaration\n\nnumber = new int[n];    // instantiation\n\n\n1\n2\n3\n4\n\n\nthe new keyword represents instantiating the object. it depends on the array's type and length.\n\n提示\n\nthe size of an array cannot be greater than integer.max_value. actually, it is even slightly smaller than this value.\n\n注意\n\ninstantiation happens when memory is allocated for this object.\n\nif you don't assign some values for the array, will use the default values of its type.\n\nfor example, the int type's default value is 0(zero) and the string type's default value is null.\n\nso, at instantiation phases, exists implicit initialize action.\n\n\n# initialization\n\nint n = ...;    // n is a length of an array\nint[] number;    // declaration\nnumber = new int[n];    // instantiation\n\nnumber = { 1, 2, 3, 4 };    // initialization\n\n\n1\n2\n3\n4\n5\n\n\n\n# general write style\n\nyeah, we can separate declaration, instantiation, and initialization like above. also, we can join them and put in fewer lines:\n\nint[] number = new int[4];\nnumber = { 1, 2, 3, 4 };\n\n\n1\n2\n\n\nor this:\n\nint[] number = new int[] { 1, 2, 3, 4 };\n\n\n1\n\n\nor even like this:\n\nint[] numbers = { 1, 2, 3, 4 };\n\n\n1\n\n\n\n# to obtain the length of the array\n\nint[] array = { 1, 2, 3, 4 }; // an array of numbers\n\nint length = array.length; // number of elements of the array\n\nsystem.out.println(length); // 4\n\n\n1\n2\n3\n4\n5\n\n\n\n# accessing elements\n\nset the value by the index:\n\narray[index] = val;\n\n\n1\n\n\nget the value by the index:\n\nval = array[index];\n\n\n1\n\n\nindexes of an array have numbers from 0 to length – 1 inclusive.\n\nlet's see an example.\n\nint[] numbers = new int[3]; // numbers: [0, 0, 0]\nnumbers[0] = 1; // numbers: [1, 0, 0]\nnumbers[1] = 2; // numbers: [1, 2, 0]\nnumbers[2] = numbers[0] + numbers[1]; // numbers: [1, 2, 3]\n\n\n1\n2\n3\n4\n\n\n提示\n\nif we try to access a non-existing element by an index then a runtime exception occurs.\n\narrayindexoutofboundsexception\n\n\n# the utility class arrays\n\nif you need to process arrays, you can import and use standard methods grouped in the utility class arrays.\n\n * convert an array to string using arrays.tostring(array) and then print it:\n\nbyte[] famousnumbers = { 0, 1, 2, 4, 8, 16, 32, 64 };\nstring arrayasstring = arrays.tostring(famousnumbers); // [0, 1, 2, 4, 8, 16, 32, 64]\nsystem.out.println(arrayasstring);\n\n\n1\n2\n3\n\n * sorting a whole array or a part of it using arrays.sort(array):\n\nlong[] bignumbers = { 200000000l, 400000000l, 100000000l, 300000000l }; // it's unsorted\n\narrays.sort(bignumbers); // sorting whole array\n\nsystem.out.println(arrays.tostring(bignumbers)); // [100000000, 200000000, 300000000, 400000000]\n\n\n1\n2\n3\n4\n5\n\n * comparing arrays: two arrays are equal if they contain the same elements in the same order:\n\nint[] numbers1 = { 1, 2, 5, 8 };\nint[] numbers2 = { 1, 2, 5 };\nint[] numbers3 = { 1, 2, 5, 8 };\n\nsystem.out.println(arrays.equals(numbers1, numbers2)); // it prints \"false\"\nsystem.out.println(arrays.equals(numbers1, numbers3)); // it prints \"true\"\n\n\n1\n2\n3\n4\n5\n6\n\n * filling a whole array or a part of it by some values:\n\nint size = 10;\nchar[] characters = new char[size];\n\n// it takes an array, start index, end index (exclusive) and the value for filling the array\narrays.fill(characters, 0, size / 2, 'a'); \narrays.fill(characters, size / 2, size, 'b');\n\nsystem.out.println(arrays.tostring(characters)); // it prints [a, a, a, a, a, b, b, b, b, b]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nof course, the arrays class contains a lot of other useful methods, including array copying, searching in arrays, and so on. for details see here.",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：Arrays as parameters",frontmatter:{title:"Theory：Arrays as parameters",date:"2022-04-22T21:08:09.000Z",permalink:"/pages/ffede0/",tags:["Java","Array"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/01.Java%20basic/22.Theory%EF%BC%9AArrays%20as%20parameters.html",relativePath:"01.Java/01.Hyperskill - Java/01.Java basic/22.Theory：Arrays as parameters.md",key:"v-6a060ba3",path:"/pages/ffede0/",headers:[{level:2,title:"Passing arrays to methods",slug:"passing-arrays-to-methods",normalizedTitle:"passing arrays to methods",charIndex:2},{level:2,title:"Varargs",slug:"varargs",normalizedTitle:"varargs",charIndex:1388},{level:2,title:"Varargs and other parameters",slug:"varargs-and-other-parameters",normalizedTitle:"varargs and other parameters",charIndex:2578}],headersStr:"Passing arrays to methods Varargs Varargs and other parameters",content:"# Passing arrays to methods\n\nWhen you pass a value of a primitive type to a method, a copy of the value is created. When you pass an array to a method, a copy of the reference is created, but the value is the same. It means that if you change the actual value (elements of an array) in the body of a method, you will see these changes outside the method.\n\nThe following method swaps the first and the last elements of its parameter (array).\n\npublic static void swapFirstAndLastElements(int[] nums) { // nums is an array\n    if (nums.length < 1) {\n        return; // it returns nothing, i.e. just exits the method\n    }\n\n    int temp = nums[nums.length - 1]; // save the last element in a temporary local variable\n    nums[nums.length - 1] = nums[0];  // now, the last element becomes the first\n    nums[0] = temp;                   // now, the former first element becomes the last\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nCalling the method from the main method:\n\npublic static void main(String[] args) {\n\n    int[] numbers = { 1, 2, 3, 4, 5 }; // numbers\n\n    System.out.println(Arrays.toString(numbers)); // before swapping\n\n    swapFirstAndLastElements(numbers); // swapping\n\n    System.out.println(Arrays.toString(numbers)); // after swapping\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nThe output is:\n\n[1, 2, 3, 4, 5]\n[5, 2, 3, 4, 1] \n\n\n1\n2\n\n\nSo, in the body of the main method, an array is visible as modified.\n\n\n# Varargs\n\nIt's possible to pass an arbitrary number of the same type arguments to a method using the special syntax named varargs (variable-length arguments). These arguments are specified by three dots ... after the type. In the body of the method, you can process this parameter as a regular array of the specified type.\n\nThe following method takes an integer vararg parameter and outputs the number of arguments in the standard output using the length property of arrays.\n\npublic static void printNumberOfArguments(int... numbers) {\n    System.out.println(numbers.length);\n}\n\n\n1\n2\n3\n\n\nAs you can see, a special syntax ... is used here to specify a vararg parameter.\n\nNow, you can invoke the method passing several integer numbers or an array of ints.\n\nprintNumberOfArguments(1);\nprintNumberOfArguments(1, 2);\nprintNumberOfArguments(1, 2, 3);\nprintNumberOfArguments(new int[] { }); // no arguments here\nprintNumberOfArguments(new int[] { 1, 2 });\n\n\n1\n2\n3\n4\n5\n\n\nThis code outputs:\n\n1\n2\n3\n0\n2\n\n\n1\n2\n3\n4\n5\n\n\nThis example also demonstrates the difference between the arguments and parameters of a method. The method has only a single parameter but it can be called with several arguments.\n\n\n# Varargs and other parameters\n\nIf a method has more than one parameter, the vararg parameter must be the last one in the declaration of the method.\n\nHere is an incorrect example:\n\npublic static void method(double... varargs, int a) { /* do something */ }\n\n\n1\n\n\nThe correct version of the method is:\n\npublic static void method(int a, double... varargs) { /* do something */ }\n\n\n1\n",normalizedContent:"# passing arrays to methods\n\nwhen you pass a value of a primitive type to a method, a copy of the value is created. when you pass an array to a method, a copy of the reference is created, but the value is the same. it means that if you change the actual value (elements of an array) in the body of a method, you will see these changes outside the method.\n\nthe following method swaps the first and the last elements of its parameter (array).\n\npublic static void swapfirstandlastelements(int[] nums) { // nums is an array\n    if (nums.length < 1) {\n        return; // it returns nothing, i.e. just exits the method\n    }\n\n    int temp = nums[nums.length - 1]; // save the last element in a temporary local variable\n    nums[nums.length - 1] = nums[0];  // now, the last element becomes the first\n    nums[0] = temp;                   // now, the former first element becomes the last\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\ncalling the method from the main method:\n\npublic static void main(string[] args) {\n\n    int[] numbers = { 1, 2, 3, 4, 5 }; // numbers\n\n    system.out.println(arrays.tostring(numbers)); // before swapping\n\n    swapfirstandlastelements(numbers); // swapping\n\n    system.out.println(arrays.tostring(numbers)); // after swapping\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nthe output is:\n\n[1, 2, 3, 4, 5]\n[5, 2, 3, 4, 1] \n\n\n1\n2\n\n\nso, in the body of the main method, an array is visible as modified.\n\n\n# varargs\n\nit's possible to pass an arbitrary number of the same type arguments to a method using the special syntax named varargs (variable-length arguments). these arguments are specified by three dots ... after the type. in the body of the method, you can process this parameter as a regular array of the specified type.\n\nthe following method takes an integer vararg parameter and outputs the number of arguments in the standard output using the length property of arrays.\n\npublic static void printnumberofarguments(int... numbers) {\n    system.out.println(numbers.length);\n}\n\n\n1\n2\n3\n\n\nas you can see, a special syntax ... is used here to specify a vararg parameter.\n\nnow, you can invoke the method passing several integer numbers or an array of ints.\n\nprintnumberofarguments(1);\nprintnumberofarguments(1, 2);\nprintnumberofarguments(1, 2, 3);\nprintnumberofarguments(new int[] { }); // no arguments here\nprintnumberofarguments(new int[] { 1, 2 });\n\n\n1\n2\n3\n4\n5\n\n\nthis code outputs:\n\n1\n2\n3\n0\n2\n\n\n1\n2\n3\n4\n5\n\n\nthis example also demonstrates the difference between the arguments and parameters of a method. the method has only a single parameter but it can be called with several arguments.\n\n\n# varargs and other parameters\n\nif a method has more than one parameter, the vararg parameter must be the last one in the declaration of the method.\n\nhere is an incorrect example:\n\npublic static void method(double... varargs, int a) { /* do something */ }\n\n\n1\n\n\nthe correct version of the method is:\n\npublic static void method(int a, double... varargs) { /* do something */ }\n\n\n1\n",charsets:{},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：Multidimensional array",frontmatter:{title:"Theory：Multidimensional array",date:"2022-07-09T16:18:26.000Z",permalink:"/pages/19feb9/",tags:["Java","Array"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/01.Java%20basic/24.Theory%EF%BC%9AMultidimensional%20array.html",relativePath:"01.Java/01.Hyperskill - Java/01.Java basic/24.Theory：Multidimensional array.md",key:"v-5d2edda6",path:"/pages/19feb9/",headers:[{level:2,title:"An array of arrays",slug:"an-array-of-arrays",normalizedTitle:"an array of arrays",charIndex:347},{level:2,title:"2-dimensional arrays",slug:"_2-dimensional-arrays",normalizedTitle:"2-dimensional arrays",charIndex:1639},{level:2,title:"Access the elements",slug:"access-the-elements",normalizedTitle:"access the elements",charIndex:2829},{level:2,title:"Working with 2D arrays",slug:"working-with-2d-arrays",normalizedTitle:"working with 2d arrays",charIndex:4259},{level:2,title:"Multidimensional arrays (>2)",slug:"multidimensional-arrays-2",normalizedTitle:"multidimensional arrays (&gt;2)",charIndex:null},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:8103}],headersStr:"An array of arrays 2-dimensional arrays Access the elements Working with 2D arrays Multidimensional arrays (>2) Conclusion",content:"You are already familiar with a structure called an array. It allows you to store elements of the same type. But why limit yourself to just one dimension? It would be so convenient to store matrices, 3D objects, or even 4D objects in one array! And now is the time: the adventure into multidimensional arrays is starting in three...two...one!\n\n\n# An array of arrays\n\nFirst, let's figure out what do we mean by a multidimensional array.\n\nBasically, we can say that a multidimensional array is an array of arrays. That is, in order to create a multidimensional array, we need to think of an array as an element of another array. Eventually, we get a multidimensional array.\n\nA multidimensional array makes it very easy to represent things that have more than one dimension: for example, 3D objects with length, height, and width. The universe we live in could be described with four dimensions, time being the fourth dimension, so it is 4D. Higher levels like 5D and so forth are hard to imagine at first, but when you put it into practice, they turn out to be handy and not too hard!\n\nLet's look at some more down-to-earth examples. A seat in the theater can be indicated with a 2D-array: one index for the row, and another for the number of the seat in that row. If you want to write a game that uses maps such as Sea Battle, two-dimensional arrays will be very helpful in setting coordinates on the map. Besides, some mathematical structures are conveniently represented as multidimensional arrays.\n\nFirst, let's take a look at a special case of a multidimensional array that is used quite often in practice: a two-dimensional array.\n\n\n# 2-dimensional arrays\n\nIf a one-dimensional array can be represented as a single sequence of elements, then an intuitive way of representing a two-dimensional array is a matrix or a table. If you're working with matrices or tables in your program, it makes sense to present them in the form of two-dimensional arrays.\n\nLet's create a two-dimensional array of ints with 3 rows and 3 columns. Here is what it looks like:\n\nint[][] twoDimArray = {\n        {0, 0, 0}, // first array of ints\n        {0, 0, 0}, // second array of ints\n        {0, 0, 0}  // third array of ints\n};\n\n\n1\n2\n3\n4\n5\n\n\nYou can picture it as a table:\n\n\n\nWe can say that the arrays with three zero elements are nested in the twoDimArray. The main array that contains other arrays is called the main array.\n\nHere's an interesting feature: nested arrays do not necessarily have to be of the same size. In the example below, each new embedded array has different lengths:\n\nint[][] twoDimArray = {\n        {0, 0},       // the length is 2\n        {1, 2, 3, 4}, // the length is 4\n        {3, 3, 3}     // the length is 3\n};\n\n\n1\n2\n3\n4\n5\n\n\nYou can create nested arrays with different numbers of elements in the same 2D array.\n\n\n# Access the elements\n\nLet's see how we can access an element of an array. The idea is exactly the same as for one-dimensional arrays. Only now we have to write two indices: first the index of the element of the main array, and then the index of the nested array.\n\nSuppose we need to access an element that is in the first row and the first column. How do we find this particular element? As you recall, a 2D array is an array of arrays. So, start by selecting one of the nested arrays by its index in the main array. The principle is similar to a 1D array.\n\nint[][] twoDimArray = {\n        {3, 4, 5},  // [0]\n        {6, 7, 8},  // [1]\n};\n\n\n1\n2\n3\n4\n\n\nFirst, go to the main array and choose the nested array with its index:\n\n\n\nSecond, in this nested array, choose the required element with its index. This is also like in simple arrays:\n\n\n\nLet's create a new variable int numberand put in it the element of the first row and the first column of our array:\n\nint number = twoDimArray[0][0]; // it is 3\n\n\n1\n\n\nRemember that in all arrays, indexing starts with 0!\n\nThe following code will show all the elements of the two-dimensional array twoDimArray:\n\nSystem.out.println(twoDimArray[0][0]); // 3\nSystem.out.println(twoDimArray[0][1]); // 4\nSystem.out.println(twoDimArray[0][2]); // 5\nSystem.out.println(twoDimArray[1][0]); // 6\nSystem.out.println(twoDimArray[1][1]); // 7\nSystem.out.println(twoDimArray[1][2]); // 8\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# Working with 2D arrays\n\nIn the previous examples, we were creating 2D arrays by enumerating all the elements. But one of the most popular ways to create a multidimensional array is using a for loop.\n\nLet's create twoDimArray with 2 rows and 10 columns and fill it with ones. To get access to every element we need to iterate through both for loops. The first for loop chooses the nested array and the second for loop iterates over all the elements of the nested array.\n\nint[][] twoDimArray = new int[2][10];\n\nfor (int i = 0; i < twoDimArray.length; i++) {\n    for (int j = 0; j < twoDimArray[i].length; j++) {\n        twoDimArray[i][j] = 1;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nYou can print all nested arrays:\n\nfor (int i = 0; i < twoDimArray.length; i++) {\n     System.out.println(Arrays.toString(twoDimArray[i]));\n}\n\n\n1\n2\n3\n\n\nThe output will be:\n\n[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\n\n1\n2\n\n\nAnd to print every element we also need two for loops. In the example below, we increase all the elements by one and print them to the standard output:\n\nfor (int i = 0; i < twoDimArray.length; i++) {\n    for (int j = 0; j < twoDimArray[i].length; j++) {\n        twoDimArray[i][j]++;\n        System.out.print(twoDimArray[i][j] + \" \");\n    }\n    System.out.println();\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nSo, the output will be:\n\n2 2 2 2 2 2 2 2 2 2 \n2 2 2 2 2 2 2 2 2 2\n\n\n1\n2\n\n\n\n# Multidimensional arrays (>2)\n\nWe are finally ready to deal with more complex concepts. There are arrays with more than two dimensions. Even though it is more difficult to understand what they look like, don't worry: you will get used to working with them.\n\nFirst of all, a three-dimensional array can be represented as a cube or a box: it has exactly three dimensions — length, width, and height. Take a look at a three-dimensional array with 24 elements:\n\n\n\nThe following practical situation also can help you to understand three-dimensional arrays: imagine that you need to figure out where the car is in a multi-story parking lot. Then you have to set three numbers, or three coordinates: floor, row, and place in a row.\n\nAnd the last one, but not least: you can imagine a three-dimensional array like this:\n\n\n\nIn each element of a two-dimensional array, you have another nested array.\n\nThe code below creates the three-dimensional array you just saw above:\n\nint[][][] threeDimArray = new int[2][3][4];\n\nint element = 0;\n\nfor (int i = 0; i < threeDimArray.length; i++) {\n    for (int j = 0; j < threeDimArray[i].length; j++) {\n        for (int k = 0; k < threeDimArray[i][j].length; k++) {\n            threeDimArray[i][j][k] = element;\n        }\n        element++;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nHere 2 is the number of rows, 3 is the number of columns and 4 is the number of elements in a nested array.\n\nAnd let's print the nested arrays:\n\nfor (int i = 0; i < threeDimArray.length; i++) {\n    for (int j = 0; j < threeDimArray[i].length; j++) {\n        System.out.print(Arrays.toString(threeDimArray[i][j]) + \" \");\n    }\n    System.out.println();\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\nThe output will be:\n\n[0, 0, 0, 0] [1, 1, 1, 1] [2, 2, 2, 2] \n[3, 3, 3, 3] [4, 4, 4, 4] [5, 5, 5, 5]\n\n\n1\n2\n\n\nAccordingly, in order to refer to an element of the three-dimensional array, we need three indices:\n\nSystem.out.println(threeDimArray[0][0][0]); // 0\nSystem.out.println(threeDimArray[0][1][0]); // 1\nSystem.out.println(threeDimArray[1][0][1]); // 3\nSystem.out.println(threeDimArray[1][2][3]); // 5 – the last element of the last array\n\n\n1\n2\n3\n4\n\n\nNotice, that you can simplify your code by using for-each loop and methods of the class Arrays to fill and print multidimensional arrays.\n\nAnd, of course, you can create arrays of other dimensions by analogy — 4, 5, 6, and so on. Just remember that an element of a multidimensional array has as many indices as dimensions of that array.\n\n\n# Conclusion\n\nLet's recap. You have figured out what multidimensional arrays are and how to create them in Java. Here are the main points to take away:\n\n * a multidimensional array is essentially an array of arrays;\n * indexing starts with 0;\n * to find an element of a multidimensional array, you need a number of indices equal to the array dimension;\n * you can assemble arrays of different sizes in a multidimensional array.",normalizedContent:"you are already familiar with a structure called an array. it allows you to store elements of the same type. but why limit yourself to just one dimension? it would be so convenient to store matrices, 3d objects, or even 4d objects in one array! and now is the time: the adventure into multidimensional arrays is starting in three...two...one!\n\n\n# an array of arrays\n\nfirst, let's figure out what do we mean by a multidimensional array.\n\nbasically, we can say that a multidimensional array is an array of arrays. that is, in order to create a multidimensional array, we need to think of an array as an element of another array. eventually, we get a multidimensional array.\n\na multidimensional array makes it very easy to represent things that have more than one dimension: for example, 3d objects with length, height, and width. the universe we live in could be described with four dimensions, time being the fourth dimension, so it is 4d. higher levels like 5d and so forth are hard to imagine at first, but when you put it into practice, they turn out to be handy and not too hard!\n\nlet's look at some more down-to-earth examples. a seat in the theater can be indicated with a 2d-array: one index for the row, and another for the number of the seat in that row. if you want to write a game that uses maps such as sea battle, two-dimensional arrays will be very helpful in setting coordinates on the map. besides, some mathematical structures are conveniently represented as multidimensional arrays.\n\nfirst, let's take a look at a special case of a multidimensional array that is used quite often in practice: a two-dimensional array.\n\n\n# 2-dimensional arrays\n\nif a one-dimensional array can be represented as a single sequence of elements, then an intuitive way of representing a two-dimensional array is a matrix or a table. if you're working with matrices or tables in your program, it makes sense to present them in the form of two-dimensional arrays.\n\nlet's create a two-dimensional array of ints with 3 rows and 3 columns. here is what it looks like:\n\nint[][] twodimarray = {\n        {0, 0, 0}, // first array of ints\n        {0, 0, 0}, // second array of ints\n        {0, 0, 0}  // third array of ints\n};\n\n\n1\n2\n3\n4\n5\n\n\nyou can picture it as a table:\n\n\n\nwe can say that the arrays with three zero elements are nested in the twodimarray. the main array that contains other arrays is called the main array.\n\nhere's an interesting feature: nested arrays do not necessarily have to be of the same size. in the example below, each new embedded array has different lengths:\n\nint[][] twodimarray = {\n        {0, 0},       // the length is 2\n        {1, 2, 3, 4}, // the length is 4\n        {3, 3, 3}     // the length is 3\n};\n\n\n1\n2\n3\n4\n5\n\n\nyou can create nested arrays with different numbers of elements in the same 2d array.\n\n\n# access the elements\n\nlet's see how we can access an element of an array. the idea is exactly the same as for one-dimensional arrays. only now we have to write two indices: first the index of the element of the main array, and then the index of the nested array.\n\nsuppose we need to access an element that is in the first row and the first column. how do we find this particular element? as you recall, a 2d array is an array of arrays. so, start by selecting one of the nested arrays by its index in the main array. the principle is similar to a 1d array.\n\nint[][] twodimarray = {\n        {3, 4, 5},  // [0]\n        {6, 7, 8},  // [1]\n};\n\n\n1\n2\n3\n4\n\n\nfirst, go to the main array and choose the nested array with its index:\n\n\n\nsecond, in this nested array, choose the required element with its index. this is also like in simple arrays:\n\n\n\nlet's create a new variable int numberand put in it the element of the first row and the first column of our array:\n\nint number = twodimarray[0][0]; // it is 3\n\n\n1\n\n\nremember that in all arrays, indexing starts with 0!\n\nthe following code will show all the elements of the two-dimensional array twodimarray:\n\nsystem.out.println(twodimarray[0][0]); // 3\nsystem.out.println(twodimarray[0][1]); // 4\nsystem.out.println(twodimarray[0][2]); // 5\nsystem.out.println(twodimarray[1][0]); // 6\nsystem.out.println(twodimarray[1][1]); // 7\nsystem.out.println(twodimarray[1][2]); // 8\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# working with 2d arrays\n\nin the previous examples, we were creating 2d arrays by enumerating all the elements. but one of the most popular ways to create a multidimensional array is using a for loop.\n\nlet's create twodimarray with 2 rows and 10 columns and fill it with ones. to get access to every element we need to iterate through both for loops. the first for loop chooses the nested array and the second for loop iterates over all the elements of the nested array.\n\nint[][] twodimarray = new int[2][10];\n\nfor (int i = 0; i < twodimarray.length; i++) {\n    for (int j = 0; j < twodimarray[i].length; j++) {\n        twodimarray[i][j] = 1;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nyou can print all nested arrays:\n\nfor (int i = 0; i < twodimarray.length; i++) {\n     system.out.println(arrays.tostring(twodimarray[i]));\n}\n\n\n1\n2\n3\n\n\nthe output will be:\n\n[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\n\n1\n2\n\n\nand to print every element we also need two for loops. in the example below, we increase all the elements by one and print them to the standard output:\n\nfor (int i = 0; i < twodimarray.length; i++) {\n    for (int j = 0; j < twodimarray[i].length; j++) {\n        twodimarray[i][j]++;\n        system.out.print(twodimarray[i][j] + \" \");\n    }\n    system.out.println();\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nso, the output will be:\n\n2 2 2 2 2 2 2 2 2 2 \n2 2 2 2 2 2 2 2 2 2\n\n\n1\n2\n\n\n\n# multidimensional arrays (>2)\n\nwe are finally ready to deal with more complex concepts. there are arrays with more than two dimensions. even though it is more difficult to understand what they look like, don't worry: you will get used to working with them.\n\nfirst of all, a three-dimensional array can be represented as a cube or a box: it has exactly three dimensions — length, width, and height. take a look at a three-dimensional array with 24 elements:\n\n\n\nthe following practical situation also can help you to understand three-dimensional arrays: imagine that you need to figure out where the car is in a multi-story parking lot. then you have to set three numbers, or three coordinates: floor, row, and place in a row.\n\nand the last one, but not least: you can imagine a three-dimensional array like this:\n\n\n\nin each element of a two-dimensional array, you have another nested array.\n\nthe code below creates the three-dimensional array you just saw above:\n\nint[][][] threedimarray = new int[2][3][4];\n\nint element = 0;\n\nfor (int i = 0; i < threedimarray.length; i++) {\n    for (int j = 0; j < threedimarray[i].length; j++) {\n        for (int k = 0; k < threedimarray[i][j].length; k++) {\n            threedimarray[i][j][k] = element;\n        }\n        element++;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nhere 2 is the number of rows, 3 is the number of columns and 4 is the number of elements in a nested array.\n\nand let's print the nested arrays:\n\nfor (int i = 0; i < threedimarray.length; i++) {\n    for (int j = 0; j < threedimarray[i].length; j++) {\n        system.out.print(arrays.tostring(threedimarray[i][j]) + \" \");\n    }\n    system.out.println();\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\nthe output will be:\n\n[0, 0, 0, 0] [1, 1, 1, 1] [2, 2, 2, 2] \n[3, 3, 3, 3] [4, 4, 4, 4] [5, 5, 5, 5]\n\n\n1\n2\n\n\naccordingly, in order to refer to an element of the three-dimensional array, we need three indices:\n\nsystem.out.println(threedimarray[0][0][0]); // 0\nsystem.out.println(threedimarray[0][1][0]); // 1\nsystem.out.println(threedimarray[1][0][1]); // 3\nsystem.out.println(threedimarray[1][2][3]); // 5 – the last element of the last array\n\n\n1\n2\n3\n4\n\n\nnotice, that you can simplify your code by using for-each loop and methods of the class arrays to fill and print multidimensional arrays.\n\nand, of course, you can create arrays of other dimensions by analogy — 4, 5, 6, and so on. just remember that an element of a multidimensional array has as many indices as dimensions of that array.\n\n\n# conclusion\n\nlet's recap. you have figured out what multidimensional arrays are and how to create them in java. here are the main points to take away:\n\n * a multidimensional array is essentially an array of arrays;\n * indexing starts with 0;\n * to find an element of a multidimensional array, you need a number of indices equal to the array dimension;\n * you can assemble arrays of different sizes in a multidimensional array.",charsets:{},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：Iterating over arrays",frontmatter:{title:"Theory：Iterating over arrays",date:"2022-04-30T11:14:49.000Z",permalink:"/pages/0b3cf5/",tags:["Java","Array"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/01.Java%20basic/23.Theory%EF%BC%9AIterating%20over%20arrays.html",relativePath:"01.Java/01.Hyperskill - Java/01.Java basic/23.Theory：Iterating over arrays.md",key:"v-1f417e61",path:"/pages/0b3cf5/",headers:[{level:2,title:"Reading an array from the standard input",slug:"reading-an-array-from-the-standard-input",normalizedTitle:"reading an array from the standard input",charIndex:276},{level:2,title:"Using for-each loop",slug:"using-for-each-loop",normalizedTitle:"using for-each loop",charIndex:1126},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:2142}],headersStr:"Reading an array from the standard input Using for-each loop Conclusion",content:"When we work with elements of an array, we often need to perform some kind of algorithm. For example, we might need to sort them, find the maximum element, print only positive numbers, reverse the order, calculate the arithmetic average of a series of numbers, and so on.\n\n\n# Reading an array from the standard input\n\nWe can also use a loop to read all the elements of an array from the standard input.\n\nFor example, the following input consists of two lines. The first line contains the length of the array and the second line contains all its elements.\n\n5\n101 102 504 302 881\n\n\n1\n2\n\n\nLet's read these numbers using Scanner (you can use other tools for reading) and then output all the numbers it read.\n\nScanner scanner = new Scanner(System.in);\n\nint len = scanner.nextInt(); // reading a length\nint[] array = new int[len];  // creating an array with the specified length\n\nfor (int i = 0; i < len; i++) {\n    array[i] = scanner.nextInt(); // read the next number of the array\n}\n\nSystem.out.println(Arrays.toString(array)); // output the array\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nThe program outputs:\n\n[101, 102, 504, 302, 881]\n\n\n1\n\n\n\n# Using for-each loop\n\nSince Java 5, there has been a special form of the for-loop called for-each. It is used to iterate through each element of an array, a string, or a collection (we will learn them in the following topics) without indices.\n\nHere's how it looks:\n\nfor (type var : array) { \n    //statements using var\n}\n\n\n1\n2\n3\n\n\nThe for-each loop has some limitations. First of all, you cannot use it if you want to modify an array, because the variable we use for iterations doesn't store the array element itself, only its copy. It is also impossible to obtain an element by its index since we have no index track. Finally, as is clear from the name, we cannot move through an array with more than one step per iteration: we iterate over each and every element, so we work with them one by one.\n\nAs you can see, the absence of indices makes the code more readable. The for-each loop also allows you to avoid the ArrayIndexOutOfBoundsException. All of this makes it a popular tool for iterating over an array.\n\n\n# Conclusion\n\nUsing loops is a convenient way to process an array of elements. You can perform various algorithms, iterate an array and read in from the standard input with a loop. A form of for-loop called for-each is commonly used to iterate through each element of an array, string, or collection without the elements' indices. There are some limitations to its use, but it makes the code more readable and allows us to avoid the ArrayIndexOutOfBoundsException.",normalizedContent:"when we work with elements of an array, we often need to perform some kind of algorithm. for example, we might need to sort them, find the maximum element, print only positive numbers, reverse the order, calculate the arithmetic average of a series of numbers, and so on.\n\n\n# reading an array from the standard input\n\nwe can also use a loop to read all the elements of an array from the standard input.\n\nfor example, the following input consists of two lines. the first line contains the length of the array and the second line contains all its elements.\n\n5\n101 102 504 302 881\n\n\n1\n2\n\n\nlet's read these numbers using scanner (you can use other tools for reading) and then output all the numbers it read.\n\nscanner scanner = new scanner(system.in);\n\nint len = scanner.nextint(); // reading a length\nint[] array = new int[len];  // creating an array with the specified length\n\nfor (int i = 0; i < len; i++) {\n    array[i] = scanner.nextint(); // read the next number of the array\n}\n\nsystem.out.println(arrays.tostring(array)); // output the array\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nthe program outputs:\n\n[101, 102, 504, 302, 881]\n\n\n1\n\n\n\n# using for-each loop\n\nsince java 5, there has been a special form of the for-loop called for-each. it is used to iterate through each element of an array, a string, or a collection (we will learn them in the following topics) without indices.\n\nhere's how it looks:\n\nfor (type var : array) { \n    //statements using var\n}\n\n\n1\n2\n3\n\n\nthe for-each loop has some limitations. first of all, you cannot use it if you want to modify an array, because the variable we use for iterations doesn't store the array element itself, only its copy. it is also impossible to obtain an element by its index since we have no index track. finally, as is clear from the name, we cannot move through an array with more than one step per iteration: we iterate over each and every element, so we work with them one by one.\n\nas you can see, the absence of indices makes the code more readable. the for-each loop also allows you to avoid the arrayindexoutofboundsexception. all of this makes it a popular tool for iterating over an array.\n\n\n# conclusion\n\nusing loops is a convenient way to process an array of elements. you can perform various algorithms, iterate an array and read in from the standard input with a loop. a form of for-loop called for-each is commonly used to iterate through each element of an array, string, or collection without the elements' indices. there are some limitations to its use, but it makes the code more readable and allows us to avoid the arrayindexoutofboundsexception.",charsets:{},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：Final variables",frontmatter:{title:"Theory：Final variables",date:"2022-04-30T11:55:46.000Z",permalink:"/pages/694b24/",tags:["Java"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/01.Java%20basic/26.Theory%EF%BC%9AFinal%20variables.html",relativePath:"01.Java/01.Hyperskill - Java/01.Java basic/26.Theory：Final variables.md",key:"v-519a112a",path:"/pages/694b24/",headers:[{level:2,title:"Final varibles",slug:"final-varibles",normalizedTitle:"final varibles",charIndex:485},{level:2,title:"Final reference variables",slug:"final-reference-variables",normalizedTitle:"final reference variables",charIndex:875},{level:2,title:"When to use final keyword",slug:"when-to-use-final-keyword",normalizedTitle:"when to use final keyword",charIndex:2559}],headersStr:"Final varibles Final reference variables When to use final keyword",content:'# Theory：Final variables\n\n\n\nSometimes, you need to use a variable that should not be modified during the program. Such variables are known as constants. Java provides a special keyword called final to declare them. The only difference between a regular variable and a final variable is that we cannot modify the value of a final variable once assigned. Hence final variables must be used only for the values that we want to remain constant throughout the execution of the program.\n\n\n# Final varibles\n\n注意\n\nNote, that the compiler will produce an error when trying to modify the value of a final variable.\n\nImportant, if a final variable has not been assigned before using it, the compiler also will produce an error.\n\n提示\n\nA final variable can be reassigned to a regular variable without any restrictions. The value of a regular variable can be changed any time as always.\n\n\n# Final reference variables\n\nThe final keyword can be legally used with reference variables. In this case, the final keyword means that it is not possible to reassign a reference to the variable.\n\nHere is an example with the StringBuilder class which is a mutable version of String.\n\nfinal StringBuilder builder = new StringBuilder();\nbuilder = new StringBuilder(); // error line\n\n\n1\n2\n\n\nIn this code, the second line won\'t compile since we are trying to reassign a reference to the final variable builder. But there is one important point.\n\n注意\n\nNote, that it is always possible to change the internal state of an object pointed at by a final reference variable, i.e. the constant is only the variable itself (the reference), not the object to which it refers.\n\nSo, the following code is absolutely correct:\n\nfinal StringBuilder builder = new StringBuilder(); // ""\nbuilder.append("Hello!"); // it works\nSystem.out.println(builder.toString()); // Hello!\n\n\n1\n2\n3\n\n\nAs you can see, this code changed the internal state of an object ("" → "Hello!") referenced by a final variable. When we invoked append() method we changed not the object itself but just the value of its fields. append() method is one of the main operations on a StringBuilder that are not available in String. It converts its argument to a String and then appends its characters to the character sequence.\n\nThe final keyword makes a constant reference, but does not prohibit changing the internal state of the object.\n\nSince Java 11, it is also possible to use final with var to use the automatic type inference for the constant variable.\n\nfinal var FINAL_VAR = 10; // int\nfinal var MSG = "Hello!"; // String\n\n\n1\n2\n\n\n\n# When to use final keyword\n\nSome programmers mark all variables that they do not want to modify as final. In this case, the program will contain a lot of such variables.\n\nfinal Scanner scanner = new Scanner(System.in);\nfinal int a = scanner.nextInt();\nfinal int b = scanner.nextInt();\nSystem.out.println(a + b);\n\n\n1\n2\n3\n4\n\n\nThis approach allows you to write programs with the minimum number of mutable variables which usually leads to fewer errors. In addition, the Java compiler can optimize code with final variables effectively and your program can be a little faster. But this is not always predictable behavior and needs some advanced knowledge.\n\nThere is also a contra-argument: massive use of the final keyword makes your code less readable (boilerplate code).\n\nDuring your real work as a programmer, we hope that the issue of using finals will be standardized for all programmers in the project.\n\n提示\n\nInterestingly, the final keyword can be also used in some different contexts, not only for declaring constants.',normalizedContent:'# theory：final variables\n\n\n\nsometimes, you need to use a variable that should not be modified during the program. such variables are known as constants. java provides a special keyword called final to declare them. the only difference between a regular variable and a final variable is that we cannot modify the value of a final variable once assigned. hence final variables must be used only for the values that we want to remain constant throughout the execution of the program.\n\n\n# final varibles\n\n注意\n\nnote, that the compiler will produce an error when trying to modify the value of a final variable.\n\nimportant, if a final variable has not been assigned before using it, the compiler also will produce an error.\n\n提示\n\na final variable can be reassigned to a regular variable without any restrictions. the value of a regular variable can be changed any time as always.\n\n\n# final reference variables\n\nthe final keyword can be legally used with reference variables. in this case, the final keyword means that it is not possible to reassign a reference to the variable.\n\nhere is an example with the stringbuilder class which is a mutable version of string.\n\nfinal stringbuilder builder = new stringbuilder();\nbuilder = new stringbuilder(); // error line\n\n\n1\n2\n\n\nin this code, the second line won\'t compile since we are trying to reassign a reference to the final variable builder. but there is one important point.\n\n注意\n\nnote, that it is always possible to change the internal state of an object pointed at by a final reference variable, i.e. the constant is only the variable itself (the reference), not the object to which it refers.\n\nso, the following code is absolutely correct:\n\nfinal stringbuilder builder = new stringbuilder(); // ""\nbuilder.append("hello!"); // it works\nsystem.out.println(builder.tostring()); // hello!\n\n\n1\n2\n3\n\n\nas you can see, this code changed the internal state of an object ("" → "hello!") referenced by a final variable. when we invoked append() method we changed not the object itself but just the value of its fields. append() method is one of the main operations on a stringbuilder that are not available in string. it converts its argument to a string and then appends its characters to the character sequence.\n\nthe final keyword makes a constant reference, but does not prohibit changing the internal state of the object.\n\nsince java 11, it is also possible to use final with var to use the automatic type inference for the constant variable.\n\nfinal var final_var = 10; // int\nfinal var msg = "hello!"; // string\n\n\n1\n2\n\n\n\n# when to use final keyword\n\nsome programmers mark all variables that they do not want to modify as final. in this case, the program will contain a lot of such variables.\n\nfinal scanner scanner = new scanner(system.in);\nfinal int a = scanner.nextint();\nfinal int b = scanner.nextint();\nsystem.out.println(a + b);\n\n\n1\n2\n3\n4\n\n\nthis approach allows you to write programs with the minimum number of mutable variables which usually leads to fewer errors. in addition, the java compiler can optimize code with final variables effectively and your program can be a little faster. but this is not always predictable behavior and needs some advanced knowledge.\n\nthere is also a contra-argument: massive use of the final keyword makes your code less readable (boilerplate code).\n\nduring your real work as a programmer, we hope that the issue of using finals will be standardized for all programmers in the project.\n\n提示\n\ninterestingly, the final keyword can be also used in some different contexts, not only for declaring constants.',charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：Defining classes",frontmatter:{title:"Theory：Defining classes",date:"2022-05-04T19:09:02.000Z",permalink:"/pages/98e983/",tags:["Java","OOP"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/02.Java%20OOP/32.Theory%EF%BC%9ADefining%20classes.html",relativePath:"01.Java/01.Hyperskill - Java/02.Java OOP/32.Theory：Defining classes.md",key:"v-695cc5c6",path:"/pages/98e983/",headers:[{level:2,title:"Declaring new classes",slug:"declaring-new-classes",normalizedTitle:"declaring new classes",charIndex:267},{level:2,title:"Writing fields",slug:"writing-fields",normalizedTitle:"writing fields",charIndex:952},{level:2,title:"Creating objects",slug:"creating-objects",normalizedTitle:"creating objects",charIndex:1652},{level:2,title:"Creating multiple objects of the same class",slug:"creating-multiple-objects-of-the-same-class",normalizedTitle:"creating multiple objects of the same class",charIndex:1998},{level:2,title:"Summary",slug:"summary",normalizedTitle:"summary",charIndex:3117}],headersStr:"Declaring new classes Writing fields Creating objects Creating multiple objects of the same class Summary",content:'When programmers are writing a real program, they use standard classes as building blocks. However, they often need to declare new program-specific classes to better represent the domain area. In this topic, we will see how you can create a custom class in Java.\n\n\n# Declaring new classes\n\nA new class is declared with the class keyword followed by the name of the class. For example, this is how you would create a class named Nothing:\n\nclass Nothing {\n    // empty body\n}\n\n\n1\n2\n3\n\n\nA class body can include fields, methods, and constructors. Fields store data, methods define behavior and constructors allow us to create and initialize new objects of the class. Not all Java classes have fields and methods so sometimes you will see classes without them.\n\nThe source code of a class is placed in a .java file. Usually, a source code file contains only one class and has the same name as that class, but sometimes a file can contain more classes.\n\n\n# Writing fields\n\nA field is a variable that stores data. It may have any type, including primitive types (int, float, boolean and so on) and classes (even the same class). A class can have as many fields as you need.\n\nLet\'s declare a class Patient:\n\n/**\n * The class is a "blueprint" for patients\n */\nclass Patient {\n\n    String name;\n    int age;\n    float height;\n    String[] complaints;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nThis class represents a patient in a hospital information system. It has four fields for storing important information about the patient: name, age, height, and complaints. All objects of the class Patient have the same fields, but their values may be different for each object.\n\n\n# Creating objects\n\nLet\'s create an instance of the class Patient using the keyword new:\n\nPatient patient = new Patient(); \n\n\n1\n\n\nWhen you create a new object, each field is initialized with the default value of the corresponding type.\n\nSystem.out.println(patient.name); // it prints null\nSystem.out.println(patient.age); // it prints 0\n\n\n1\n2\n\n\n\n# Creating multiple objects of the same class\n\nThe following program creates two objects of the class Patient and prints the information about them.\n\nNote that both classes are placed in the same file named PatientDemo.java.\n\npublic class PatientDemo {\n    \n    public static void main(String[] args) {\n        \n        Patient john = new Patient();\n        \n        john.name = "John";\n        john.age = 30;\n        john.height = 180;\n        \n        System.out.println(john.name + " " + john.age + " " + john.height);\n            \n        Patient alice = new Patient();\n\n        alice.name = "Alice";\n        alice.age = 22;\n        alice.height = 165;\n        \n        System.out.println(alice.name + " " + alice.age + " " + alice.height);\n    }\n}\n\nclass Patient {\n\n    String name;\n    int age;\n    float height;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\nIn the code above, we\'ve created two patients, John and Alice, defined the values of their fields and then printed out the information about them. So, the output of the code above is:\n\nJohn 30 180\nAlice 22 165\n\n\n1\n2\n\n\n\n# Summary\n\nIn this topic, we\'ve learned how to create classes in Java. Custom classes can be very useful because they allow you to define fields and methods that work best for your purposes.\n\nFields keep the current state (data) of the instances of the class and their values can be different for different instances. You can create objects of the class, assign values to their fields and use those objects in your programs. All in all, classes are a very powerful tool and we hope that you\'ll use them in your projects!',normalizedContent:'when programmers are writing a real program, they use standard classes as building blocks. however, they often need to declare new program-specific classes to better represent the domain area. in this topic, we will see how you can create a custom class in java.\n\n\n# declaring new classes\n\na new class is declared with the class keyword followed by the name of the class. for example, this is how you would create a class named nothing:\n\nclass nothing {\n    // empty body\n}\n\n\n1\n2\n3\n\n\na class body can include fields, methods, and constructors. fields store data, methods define behavior and constructors allow us to create and initialize new objects of the class. not all java classes have fields and methods so sometimes you will see classes without them.\n\nthe source code of a class is placed in a .java file. usually, a source code file contains only one class and has the same name as that class, but sometimes a file can contain more classes.\n\n\n# writing fields\n\na field is a variable that stores data. it may have any type, including primitive types (int, float, boolean and so on) and classes (even the same class). a class can have as many fields as you need.\n\nlet\'s declare a class patient:\n\n/**\n * the class is a "blueprint" for patients\n */\nclass patient {\n\n    string name;\n    int age;\n    float height;\n    string[] complaints;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nthis class represents a patient in a hospital information system. it has four fields for storing important information about the patient: name, age, height, and complaints. all objects of the class patient have the same fields, but their values may be different for each object.\n\n\n# creating objects\n\nlet\'s create an instance of the class patient using the keyword new:\n\npatient patient = new patient(); \n\n\n1\n\n\nwhen you create a new object, each field is initialized with the default value of the corresponding type.\n\nsystem.out.println(patient.name); // it prints null\nsystem.out.println(patient.age); // it prints 0\n\n\n1\n2\n\n\n\n# creating multiple objects of the same class\n\nthe following program creates two objects of the class patient and prints the information about them.\n\nnote that both classes are placed in the same file named patientdemo.java.\n\npublic class patientdemo {\n    \n    public static void main(string[] args) {\n        \n        patient john = new patient();\n        \n        john.name = "john";\n        john.age = 30;\n        john.height = 180;\n        \n        system.out.println(john.name + " " + john.age + " " + john.height);\n            \n        patient alice = new patient();\n\n        alice.name = "alice";\n        alice.age = 22;\n        alice.height = 165;\n        \n        system.out.println(alice.name + " " + alice.age + " " + alice.height);\n    }\n}\n\nclass patient {\n\n    string name;\n    int age;\n    float height;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\nin the code above, we\'ve created two patients, john and alice, defined the values of their fields and then printed out the information about them. so, the output of the code above is:\n\njohn 30 180\nalice 22 165\n\n\n1\n2\n\n\n\n# summary\n\nin this topic, we\'ve learned how to create classes in java. custom classes can be very useful because they allow you to define fields and methods that work best for your purposes.\n\nfields keep the current state (data) of the instances of the class and their values can be different for different instances. you can create objects of the class, assign values to their fields and use those objects in your programs. all in all, classes are a very powerful tool and we hope that you\'ll use them in your projects!',charsets:{},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：Instance methods",frontmatter:{title:"Theory：Instance methods",date:"2022-05-05T18:12:24.000Z",permalink:"/pages/732103/",tags:["Java","OOP"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/02.Java%20OOP/33.Theory%EF%BC%9AInstance%20methods.html",relativePath:"01.Java/01.Hyperskill - Java/02.Java OOP/33.Theory：Instance methods.md",key:"v-14b00586",path:"/pages/732103/",headers:[{level:2,title:"What's the difference?",slug:"what-s-the-difference",normalizedTitle:"what's the difference?",charIndex:523},{level:2,title:"Understanding: static and instance",slug:"understanding-static-and-instance",normalizedTitle:"understanding: static and instance",charIndex:1323},{level:2,title:"Instance methods: features",slug:"instance-methods-features",normalizedTitle:"instance methods: features",charIndex:2441},{level:2,title:"Summary",slug:"summary",normalizedTitle:"summary",charIndex:4470}],headersStr:"What's the difference? Understanding: static and instance Instance methods: features Summary",content:'As you know, a class is one of the fundamental concepts in Java. You develop the logic of a program by creating fields and methods inside classes. Fields describe an object\'s properties and methods describe what an object does. In this topic, we will go on to discuss the nature of methods in Java. All methods can be divided into two groups: instance and static. We were mostly focused on the static ones previously, so now let\'s learn more about instance methods to better understand the differences between the two.\n\n\n# What\'s the difference?\n\nLet\'s look at the code below. Here we have a class named Human with two fields and two methods.\n\nclass Human {\n    String name;\n    int age;\n\n    public static void printStatic() {\n        System.out.println("It\'s a static method");\n    }\n\n    public void printInstance() {\n        System.out.println("It\'s an instance method");\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nModifier public isn\'t important for us now. It just means that other classes can also get access to our methods.\n\nAs you see, methods printStatic and printInstance have differences in declaration. When you see a method, you can easily understand: if there is a word static, then the method is static; if there is no word static, then the method is an instance one.\n\nNow let\'s see what this really means!\n\n\n# Understanding: static and instance\n\nTo invoke a static method we don\'t need to create an object. We just call the method with the class name.\n\npublic static void main(String[] args) {\n\n    Human.printStatic(); // will print "It\'s a static method"\n}\n\n\n1\n2\n3\n4\n\n\nIn other words, you can say that a static method belongs to a class (because we don\'t need an object).\n\nThe instance method requires a different invocation. As you already guessed, to invoke an instance method we have to create an object first. Otherwise, there is no way to use an instance method.\n\nIt\'s called the instance method because an instance is a concrete representation of an object.\n\nHere we call the method printInstance for two different objects:\n\npublic static void main(String[] args) {\n        \n    Human peter =  new Human();\n    peter.printInstance(); // will print "It\'s an instance method"\n\n    Human alice =  new Human();\n    alice.printInstance(); // will print "It\'s an instance method"\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nSo, we can say that an instance method is a method that belongs to each object that we created of the particular class.\n\n\n# Instance methods: features\n\nInstance methods have a great advantage: they can access fields of the class.\n\nTo illustrate the feature, let\'s modify our class Human. Again, we have one static method averageWorking and one instance method work.\n\nclass Human {\n    String name;\n    int age;\n\n    public static void averageWorking() {\n        System.out.println("An average human works 40 hours per week.");\n    }\n\n    public void work() {\n        System.out.println(this.name + " loves working!");\n    }\n\n    public void workTogetherWith(Human other) {\n        System.out.println(this.name + " loves working with " + other.name + \'!\');\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\nThe keyword this represents a particular instance of the class.\n\nIt\'s easier to understand by an example:\n\npublic static void main(String[] args) {\n        \n    Human.averageWorking(); // "An average human works 40 hours per week."\n\n    Human peter =  new Human();\n    peter.name = "Peter";\n    peter.work(); // "Peter loves working!"\n\n        \n    Human alice =  new Human();\n    alice.name = "Alice";\n    alice.work(); // "Alice loves working!"\n\n    peter.workTogetherWith(alice); // "Peter loves working with Alice"\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\nLook, now we have different outputs for the method work because two different objects have different values for name. First, we created peter and gave him a name, then by invoking peter.work() we actually saw his name in the output. We did the same with alice and also saw her name in the output.\n\nLook at workTogetherWith method. The keyword this allows us to access a field of the particular object and distinguish it from the same field of another object.\n\n提示\n\nThis keyword this is optional, so the code will work the same without it. But it\'s a good practice to add it to avoid confusion.\n\nOf course, instance methods can take arguments and return values just as you saw in the previous topics. Returning values can be of any type including the same type as the defined class.\n\n\n# Summary\n\nIn Java, every method should be declared within a class. The difference between the instance and the static methods lies in whether they interact with an object or not. Let\'s recap:\n\n * static method is associated with the class as a whole;\n * instance method can only be invoked through an instance of a class, so that you have to create an object first;\n * instance methods can access the fields of the class with this keyword.\n\nInstance methods allow programmers to manipulate particular objects of a class. And because of it, they give us more functionality and are used more often than static methods!',normalizedContent:'as you know, a class is one of the fundamental concepts in java. you develop the logic of a program by creating fields and methods inside classes. fields describe an object\'s properties and methods describe what an object does. in this topic, we will go on to discuss the nature of methods in java. all methods can be divided into two groups: instance and static. we were mostly focused on the static ones previously, so now let\'s learn more about instance methods to better understand the differences between the two.\n\n\n# what\'s the difference?\n\nlet\'s look at the code below. here we have a class named human with two fields and two methods.\n\nclass human {\n    string name;\n    int age;\n\n    public static void printstatic() {\n        system.out.println("it\'s a static method");\n    }\n\n    public void printinstance() {\n        system.out.println("it\'s an instance method");\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nmodifier public isn\'t important for us now. it just means that other classes can also get access to our methods.\n\nas you see, methods printstatic and printinstance have differences in declaration. when you see a method, you can easily understand: if there is a word static, then the method is static; if there is no word static, then the method is an instance one.\n\nnow let\'s see what this really means!\n\n\n# understanding: static and instance\n\nto invoke a static method we don\'t need to create an object. we just call the method with the class name.\n\npublic static void main(string[] args) {\n\n    human.printstatic(); // will print "it\'s a static method"\n}\n\n\n1\n2\n3\n4\n\n\nin other words, you can say that a static method belongs to a class (because we don\'t need an object).\n\nthe instance method requires a different invocation. as you already guessed, to invoke an instance method we have to create an object first. otherwise, there is no way to use an instance method.\n\nit\'s called the instance method because an instance is a concrete representation of an object.\n\nhere we call the method printinstance for two different objects:\n\npublic static void main(string[] args) {\n        \n    human peter =  new human();\n    peter.printinstance(); // will print "it\'s an instance method"\n\n    human alice =  new human();\n    alice.printinstance(); // will print "it\'s an instance method"\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nso, we can say that an instance method is a method that belongs to each object that we created of the particular class.\n\n\n# instance methods: features\n\ninstance methods have a great advantage: they can access fields of the class.\n\nto illustrate the feature, let\'s modify our class human. again, we have one static method averageworking and one instance method work.\n\nclass human {\n    string name;\n    int age;\n\n    public static void averageworking() {\n        system.out.println("an average human works 40 hours per week.");\n    }\n\n    public void work() {\n        system.out.println(this.name + " loves working!");\n    }\n\n    public void worktogetherwith(human other) {\n        system.out.println(this.name + " loves working with " + other.name + \'!\');\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\nthe keyword this represents a particular instance of the class.\n\nit\'s easier to understand by an example:\n\npublic static void main(string[] args) {\n        \n    human.averageworking(); // "an average human works 40 hours per week."\n\n    human peter =  new human();\n    peter.name = "peter";\n    peter.work(); // "peter loves working!"\n\n        \n    human alice =  new human();\n    alice.name = "alice";\n    alice.work(); // "alice loves working!"\n\n    peter.worktogetherwith(alice); // "peter loves working with alice"\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\nlook, now we have different outputs for the method work because two different objects have different values for name. first, we created peter and gave him a name, then by invoking peter.work() we actually saw his name in the output. we did the same with alice and also saw her name in the output.\n\nlook at worktogetherwith method. the keyword this allows us to access a field of the particular object and distinguish it from the same field of another object.\n\n提示\n\nthis keyword this is optional, so the code will work the same without it. but it\'s a good practice to add it to avoid confusion.\n\nof course, instance methods can take arguments and return values just as you saw in the previous topics. returning values can be of any type including the same type as the defined class.\n\n\n# summary\n\nin java, every method should be declared within a class. the difference between the instance and the static methods lies in whether they interact with an object or not. let\'s recap:\n\n * static method is associated with the class as a whole;\n * instance method can only be invoked through an instance of a class, so that you have to create an object first;\n * instance methods can access the fields of the class with this keyword.\n\ninstance methods allow programmers to manipulate particular objects of a class. and because of it, they give us more functionality and are used more often than static methods!',charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Thoery：Constructor",frontmatter:{title:"Thoery：Constructor",date:"2022-05-06T20:04:09.000Z",permalink:"/pages/616a21/",tags:["Java","OOP"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/02.Java%20OOP/34.Thoery%EF%BC%9AConstructor.html",relativePath:"01.Java/01.Hyperskill - Java/02.Java OOP/34.Thoery：Constructor.md",key:"v-322e1d2d",path:"/pages/616a21/",headers:[{level:2,title:"Using constructors",slug:"using-constructors",normalizedTitle:"using constructors",charIndex:522},{level:2,title:"Keyword this",slug:"keyword-this",normalizedTitle:"keyword this",charIndex:1287},{level:2,title:"Default and no-argument constructor",slug:"default-and-no-argument-constructor",normalizedTitle:"default and no-argument constructor",charIndex:2257},{level:2,title:"To sum up",slug:"to-sum-up",normalizedTitle:"to sum up",charIndex:3195}],headersStr:"Using constructors Keyword this Default and no-argument constructor To sum up",content:'Constructors are special methods that initialize a new object of the class. A constructor of a class is invoked when an instance is created using the keyword new.\n\nA constructor is different from other methods in that:\n\n * it has the same name as the class that contains it;\n * it has no return type (not even void).\n\nConstructors initialize instances (objects) of the class. They set values to the fields when the object is created. Also, constructors can take parameters for initializing fields by the given values.\n\n\n# Using constructors\n\nHere is a class named Patient. An object of the class has a name, an age, and a height. The class has a three-argument constructor to initialize objects with specific values.\n\nclass Patient {\n\n    String name;\n    int age;\n    float height;\n\n    public Patient(String name, int age, float height) {\n        this.name = name;\n        this.age = age;\n        this.height = height;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nLet\'s go further and create some instances of the class using the constructor we\'ve written:\n\nPatient patient1 = new Patient("Heinrich", 40, 182.0f);\nPatient patient2 = new Patient("Mary", 33, 171.5f);\n\n\n1\n2\n\n\nNow we have two patients, Heinrich and Mary, with the same fields, but the values of those fields are different.\n\n\n# Keyword this\n\nIn the example above, Patient constructor takes three parameters:\n\nthis.name = name;\nthis.age = age;\nthis.height = height;\n\n\n1\n2\n3\n\n\nTo initialize the fields, the keyword this is used, which is a reference to the current object. Usually, the keyword this is used when an instance variable and a constructor or a method variable share the same name. This keyword helps to disambiguate these situations.\n\nIf you write something like name = name, it means that you\'re assigning the name variable to itself, which, of course, doesn\'t make any sense. Frankly speaking, you may distinguish two objects simply by assigning another name to the variable, like name = newName. It is not prohibited, but it is considered bad practice since these variables point to the same thing. These are the reasons why the keyword thisis extremely useful with constructors, fields, and methods. The absence of extra variables makes the code look clearer and less overloaded.\n\n\n# Default and no-argument constructor\n\nThe compiler automatically provides a default no-argument constructor for any class without constructors.\n\nclass Patient {\n\n    String name;\n    int age;\n    float height;\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\nWe can create an instance of the class Patient using the no-argument default constructor:\n\nPatient patient = new Patient();\n\n\n1\n\n\nIn this case, all fields will be filled with the default values of their types.\n\nIf you define a specific constructor, the default constructor will not be created.\n\nWe can also define a constructor without any arguments, but use it to set default values for fields of a class. For example, we can initialize name with "Unknown":\n\nclass Patient {\n\n    String name;\n    int age;\n    float height;\n\n    public Patient() {\n        this.name = "Unknown";\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nSuch no-argument constructors are useful in cases when any default value is better than null.\n\n\n# To sum up\n\n * Any Java class has a constructor to initialize objects;\n * A constructor has the same name as the class containing it;\n * A constructor has no return type, not even void;\n * If a class has no explicit constructors, the Java compiler automatically provides a default no-argument constructor;\n * If we want to introduce new variables to denote the same thing, make the code clearer and less loaded with extra variables, the keyword this is used.',normalizedContent:'constructors are special methods that initialize a new object of the class. a constructor of a class is invoked when an instance is created using the keyword new.\n\na constructor is different from other methods in that:\n\n * it has the same name as the class that contains it;\n * it has no return type (not even void).\n\nconstructors initialize instances (objects) of the class. they set values to the fields when the object is created. also, constructors can take parameters for initializing fields by the given values.\n\n\n# using constructors\n\nhere is a class named patient. an object of the class has a name, an age, and a height. the class has a three-argument constructor to initialize objects with specific values.\n\nclass patient {\n\n    string name;\n    int age;\n    float height;\n\n    public patient(string name, int age, float height) {\n        this.name = name;\n        this.age = age;\n        this.height = height;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nlet\'s go further and create some instances of the class using the constructor we\'ve written:\n\npatient patient1 = new patient("heinrich", 40, 182.0f);\npatient patient2 = new patient("mary", 33, 171.5f);\n\n\n1\n2\n\n\nnow we have two patients, heinrich and mary, with the same fields, but the values of those fields are different.\n\n\n# keyword this\n\nin the example above, patient constructor takes three parameters:\n\nthis.name = name;\nthis.age = age;\nthis.height = height;\n\n\n1\n2\n3\n\n\nto initialize the fields, the keyword this is used, which is a reference to the current object. usually, the keyword this is used when an instance variable and a constructor or a method variable share the same name. this keyword helps to disambiguate these situations.\n\nif you write something like name = name, it means that you\'re assigning the name variable to itself, which, of course, doesn\'t make any sense. frankly speaking, you may distinguish two objects simply by assigning another name to the variable, like name = newname. it is not prohibited, but it is considered bad practice since these variables point to the same thing. these are the reasons why the keyword thisis extremely useful with constructors, fields, and methods. the absence of extra variables makes the code look clearer and less overloaded.\n\n\n# default and no-argument constructor\n\nthe compiler automatically provides a default no-argument constructor for any class without constructors.\n\nclass patient {\n\n    string name;\n    int age;\n    float height;\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\nwe can create an instance of the class patient using the no-argument default constructor:\n\npatient patient = new patient();\n\n\n1\n\n\nin this case, all fields will be filled with the default values of their types.\n\nif you define a specific constructor, the default constructor will not be created.\n\nwe can also define a constructor without any arguments, but use it to set default values for fields of a class. for example, we can initialize name with "unknown":\n\nclass patient {\n\n    string name;\n    int age;\n    float height;\n\n    public patient() {\n        this.name = "unknown";\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nsuch no-argument constructors are useful in cases when any default value is better than null.\n\n\n# to sum up\n\n * any java class has a constructor to initialize objects;\n * a constructor has the same name as the class containing it;\n * a constructor has no return type, not even void;\n * if a class has no explicit constructors, the java compiler automatically provides a default no-argument constructor;\n * if we want to introduce new variables to denote the same thing, make the code clearer and less loaded with extra variables, the keyword this is used.',charsets:{},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：Package",frontmatter:{title:"Theory：Package",date:"2022-05-07T18:17:51.000Z",permalink:"/pages/d4be91/",tags:["Java","OOP"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/02.Java%20OOP/35.Theory%EF%BC%9APackage.html",relativePath:"01.Java/01.Hyperskill - Java/02.Java OOP/35.Theory：Package.md",key:"v-627480ef",path:"/pages/d4be91/",headers:[{level:2,title:"The basics of packages",slug:"the-basics-of-packages",normalizedTitle:"the basics of packages",charIndex:314},{level:2,title:"Avoiding conflicting class names",slug:"avoiding-conflicting-class-names",normalizedTitle:"avoiding conflicting class names",charIndex:1396},{level:2,title:"Importing classes",slug:"importing-classes",normalizedTitle:"importing classes",charIndex:2058},{level:2,title:"Importing standard classes",slug:"importing-standard-classes",normalizedTitle:"importing standard classes",charIndex:4827},{level:2,title:"Static imports",slug:"static-imports",normalizedTitle:"static imports",charIndex:5489},{level:2,title:"Default package",slug:"default-package",normalizedTitle:"default package",charIndex:6346},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:7012}],headersStr:"The basics of packages Avoiding conflicting class names Importing classes Importing standard classes Static imports Default package Conclusion",content:"Large Java projects have a lot of classes. It's difficult to manage them if they are stored in the same directory. Packages provide a mechanism for grouping classes together in the same module (or package). In this topic, you will learn how to use them to better systemize your classes and keep your app tidy.\n\n\n# The basics of packages\n\nIn general, packages have many advantages. They allow us to:\n\n * group related classes together, which makes it easier to figure out where a certain class is;\n * avoid conflicting class names;\n * control access to classes and members with access modifiers (you'll learn about this in another topic).\n\nAccording to the naming convention, package names are always lowercase, for example:\n\nmodel\ncollection\nutils\n\n\n1\n2\n3\n\n\nA package can contain other packages, and the whole structure resembles directories in a file system. Here is an example project with a simple tree of packages and classes.\n\n\n\nAt the top of the tree, there is a directory src. This is the source root directory. In this tree, the full name of the class User is org.company.webapp.data.User.\n\nYou can output the full name using the following code:\n\nSystem.out.println(User.class.getName()); // org.company.webapp.data.User\n\n\n1\n\n\nClasses declared inside a package have a special keyword package at the top of the file.\n\npackage org.company.webapp.data;\n\npublic class User {\n}\n\n\n1\n2\n3\n4\n\n\n\n# Avoiding conflicting class names\n\nWhen you use external libraries, two classes may have the same name. Packages allow us to avoid a conflict of class names because the full class name includes the name of the package. So even if two classes from different packages have the same name, their full names will be different. That is, of course, if there are no conflicts between the package names.\n\nTo avoid creating packages with the same names as other public packages it is generally recommended to start your package hierarchy with the reverse domain name of your company (or another organization). For example:\n\norg.company\norg.hyperskill\nnet.labs\n\n\n1\n2\n3\n\n\n\n# Importing classes\n\nIf two classes are located in the same package using one class inside the other is no problem. If this is not the case and the classes are in different packages, you need to write an import statement to use one class inside the other. The import statement is defined by the keyword import.\n\nHere is an example. We have two public classes in different packages:\n\norg.hyperskill.java.packages.theory.p1.A\norg.hyperskill.java.packages.theory.p2.B\n\n\n1\n2\n\n\nTo use class B inside class A we should use an import statement.\n\npackage org.hyperskill.java.packages.theory.p1;  // current package\n\nimport org.hyperskill.java.packages.theory.p2.B; // it's required to use the import\n\npublic class A {\n\n    public static void method() {\n\n        B b = new B();\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\nThe package declaration and import statements are optional. If both of them are present, the package must come before all imports! Otherwise, we get a compilation error.\n\nIt is also possible to import all classes from a package. To do this we need to write ***** in the import statement instead of a particular class name.\n\nimport org.hyperskill.java.packages.theory.p3.*; // import all classes from the package\n\n\n1\n\n\nDon't do this too often. In some cases, this is considered a bad practice and can break the compatibility of your program with new versions of Java. Here is an interesting discussion about such statements.\n\nIf two classes belong to the same package, you don't need to import them to each other.\n\nThere is a way to use a class from another package without the import statement. In this case, you should write the full class name (including the full package path) instead of the name of the class itself (short name). This is how we would use the Scanner class without explicitly importing it first:\n\njava.util.Scanner scanner = new java.util.Scanner(System.in);\njava.util.Date now = new java.util.Date();\n\n\n1\n2\n\n\nLet's polish the information about access to classes inside the package with the following example:\n\n\n\nThe classes City and Area are located in the same subpackage state, so you can use one class inside the other with a short name. The same thing is true for the classes Urban and Rural in the subpackage territory.\n\nIf you want to use any class of the subpackage territory inside the class of the subpackage state or vice versa, you need to write the full name of this class, import the class, or import the whole subpackage. Moreover, if you want to use classes from the subpackages state or territory inside the class Republic from the package country or vice versa, you also need to write a full name or import the class. This should be done even if these packages are in the same root package (here it is the package country).\n\n\n# Importing standard classes\n\nThere is no difference between importing standard or custom classes.\n\nFor example, many Java developers use java.util.Scanner to work with the standard input/output. In their programs, they include the following import:\n\nimport java.util.Scanner;\n\n\n1\n\n\nAfter this, we can create an instance of the Scanner like in the examples above and use it in our programs.\n\nEven though we have to import most packages to use their classes, there is a Java package that is always automatically imported, namely, java.lang. This package contains many widely used classes, such as String, System, Long, Integer, NullPointerException and others.\n\n\n# Static imports\n\nWe can also import static members (methods and fields) of a class inside another class. If we write an asterisk ***** in the import statement, we don't need to write the imported class name before invoking static methods or reading static fields.\n\nHere is an example of the static import of the class Arrays which contains a lot of useful methods for processing arrays.\n\npackage org.hyperskill.java.packages.theory;\n\nimport static java.util.Arrays.*; // instead of the statement \"import java.util.Arrays;\"\n\npublic class Main {\n\n    public static void main(String[] args) {\n        int[] numbers = { 10, 4, 5, 47, 5, 12 }; // an array\n\n        sort(numbers); // instead of writing Arrays.sort(...)\n\n        int[] copy = copyOf(numbers, numbers.length); // instead of writing Arrays.copyOf(...)\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# Default package\n\nIf we do not write a package statement before defining our class, it will be placed inside the default package. This package has a big disadvantage — classes located here can't be imported to classes located inside named packages.\n\nThe following class cannot be used in a class located inside packages since there is no package declaration.\n\n// no package declaration\n\npublic class Person {\n    String firstName;\n    String lastName;\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\nDo not use the default package for real applications. It is perfectly fine for simple, educational applications, like \"Hello world\", but more complex projects will be better in named packages.\n\n\n# Conclusion\n\nPackages are a very useful tool for OOP projects. They allow us to structure the source code better, and they make it more maintainable. That is very important for big projects that can consist of thousands of classes. Packages are also very helpful for avoiding conflicting class names because the full class name includes the path of the whole package. If we are careful with the naming of the package itself, there should be no conflicts!\n\nAnother thing to remember is that packages affect the visibility of classes and class members to each other. That means that we should keep in mind the imports, static members, and the default package.\n\nCreating packages even for small applications is great training for your great future projects!",normalizedContent:"large java projects have a lot of classes. it's difficult to manage them if they are stored in the same directory. packages provide a mechanism for grouping classes together in the same module (or package). in this topic, you will learn how to use them to better systemize your classes and keep your app tidy.\n\n\n# the basics of packages\n\nin general, packages have many advantages. they allow us to:\n\n * group related classes together, which makes it easier to figure out where a certain class is;\n * avoid conflicting class names;\n * control access to classes and members with access modifiers (you'll learn about this in another topic).\n\naccording to the naming convention, package names are always lowercase, for example:\n\nmodel\ncollection\nutils\n\n\n1\n2\n3\n\n\na package can contain other packages, and the whole structure resembles directories in a file system. here is an example project with a simple tree of packages and classes.\n\n\n\nat the top of the tree, there is a directory src. this is the source root directory. in this tree, the full name of the class user is org.company.webapp.data.user.\n\nyou can output the full name using the following code:\n\nsystem.out.println(user.class.getname()); // org.company.webapp.data.user\n\n\n1\n\n\nclasses declared inside a package have a special keyword package at the top of the file.\n\npackage org.company.webapp.data;\n\npublic class user {\n}\n\n\n1\n2\n3\n4\n\n\n\n# avoiding conflicting class names\n\nwhen you use external libraries, two classes may have the same name. packages allow us to avoid a conflict of class names because the full class name includes the name of the package. so even if two classes from different packages have the same name, their full names will be different. that is, of course, if there are no conflicts between the package names.\n\nto avoid creating packages with the same names as other public packages it is generally recommended to start your package hierarchy with the reverse domain name of your company (or another organization). for example:\n\norg.company\norg.hyperskill\nnet.labs\n\n\n1\n2\n3\n\n\n\n# importing classes\n\nif two classes are located in the same package using one class inside the other is no problem. if this is not the case and the classes are in different packages, you need to write an import statement to use one class inside the other. the import statement is defined by the keyword import.\n\nhere is an example. we have two public classes in different packages:\n\norg.hyperskill.java.packages.theory.p1.a\norg.hyperskill.java.packages.theory.p2.b\n\n\n1\n2\n\n\nto use class b inside class a we should use an import statement.\n\npackage org.hyperskill.java.packages.theory.p1;  // current package\n\nimport org.hyperskill.java.packages.theory.p2.b; // it's required to use the import\n\npublic class a {\n\n    public static void method() {\n\n        b b = new b();\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\nthe package declaration and import statements are optional. if both of them are present, the package must come before all imports! otherwise, we get a compilation error.\n\nit is also possible to import all classes from a package. to do this we need to write ***** in the import statement instead of a particular class name.\n\nimport org.hyperskill.java.packages.theory.p3.*; // import all classes from the package\n\n\n1\n\n\ndon't do this too often. in some cases, this is considered a bad practice and can break the compatibility of your program with new versions of java. here is an interesting discussion about such statements.\n\nif two classes belong to the same package, you don't need to import them to each other.\n\nthere is a way to use a class from another package without the import statement. in this case, you should write the full class name (including the full package path) instead of the name of the class itself (short name). this is how we would use the scanner class without explicitly importing it first:\n\njava.util.scanner scanner = new java.util.scanner(system.in);\njava.util.date now = new java.util.date();\n\n\n1\n2\n\n\nlet's polish the information about access to classes inside the package with the following example:\n\n\n\nthe classes city and area are located in the same subpackage state, so you can use one class inside the other with a short name. the same thing is true for the classes urban and rural in the subpackage territory.\n\nif you want to use any class of the subpackage territory inside the class of the subpackage state or vice versa, you need to write the full name of this class, import the class, or import the whole subpackage. moreover, if you want to use classes from the subpackages state or territory inside the class republic from the package country or vice versa, you also need to write a full name or import the class. this should be done even if these packages are in the same root package (here it is the package country).\n\n\n# importing standard classes\n\nthere is no difference between importing standard or custom classes.\n\nfor example, many java developers use java.util.scanner to work with the standard input/output. in their programs, they include the following import:\n\nimport java.util.scanner;\n\n\n1\n\n\nafter this, we can create an instance of the scanner like in the examples above and use it in our programs.\n\neven though we have to import most packages to use their classes, there is a java package that is always automatically imported, namely, java.lang. this package contains many widely used classes, such as string, system, long, integer, nullpointerexception and others.\n\n\n# static imports\n\nwe can also import static members (methods and fields) of a class inside another class. if we write an asterisk ***** in the import statement, we don't need to write the imported class name before invoking static methods or reading static fields.\n\nhere is an example of the static import of the class arrays which contains a lot of useful methods for processing arrays.\n\npackage org.hyperskill.java.packages.theory;\n\nimport static java.util.arrays.*; // instead of the statement \"import java.util.arrays;\"\n\npublic class main {\n\n    public static void main(string[] args) {\n        int[] numbers = { 10, 4, 5, 47, 5, 12 }; // an array\n\n        sort(numbers); // instead of writing arrays.sort(...)\n\n        int[] copy = copyof(numbers, numbers.length); // instead of writing arrays.copyof(...)\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# default package\n\nif we do not write a package statement before defining our class, it will be placed inside the default package. this package has a big disadvantage — classes located here can't be imported to classes located inside named packages.\n\nthe following class cannot be used in a class located inside packages since there is no package declaration.\n\n// no package declaration\n\npublic class person {\n    string firstname;\n    string lastname;\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\ndo not use the default package for real applications. it is perfectly fine for simple, educational applications, like \"hello world\", but more complex projects will be better in named packages.\n\n\n# conclusion\n\npackages are a very useful tool for oop projects. they allow us to structure the source code better, and they make it more maintainable. that is very important for big projects that can consist of thousands of classes. packages are also very helpful for avoiding conflicting class names because the full class name includes the path of the whole package. if we are careful with the naming of the package itself, there should be no conflicts!\n\nanother thing to remember is that packages affect the visibility of classes and class members to each other. that means that we should keep in mind the imports, static members, and the default package.\n\ncreating packages even for small applications is great training for your great future projects!",charsets:{},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：Access modifiers",frontmatter:{title:"Theory：Access modifiers",date:"2022-05-08T17:02:39.000Z",permalink:"/pages/9847c1/",tags:["Java","OOP"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/02.Java%20OOP/36.Theory%EF%BC%9AAccess%20modifiers.html",relativePath:"01.Java/01.Hyperskill - Java/02.Java OOP/36.Theory：Access modifiers.md",key:"v-877c8074",path:"/pages/9847c1/",headers:[{level:2,title:"OK, so why should I use them?",slug:"ok-so-why-should-i-use-them",normalizedTitle:"ok, so why should i use them?",charIndex:643},{level:2,title:"Public and package-private classes",slug:"public-and-package-private-classes",normalizedTitle:"public and package-private classes",charIndex:2079},{level:2,title:"Private members",slug:"private-members",normalizedTitle:"private members",charIndex:4404},{level:2,title:"Package-private members",slug:"package-private-members",normalizedTitle:"package-private members",charIndex:6217},{level:2,title:"Protected and public members",slug:"protected-and-public-members",normalizedTitle:"protected and public members",charIndex:7105},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:8832}],headersStr:"OK, so why should I use them? Public and package-private classes Private members Package-private members Protected and public members Conclusion",content:"You've probably seen the following piece of code:\n\npublic static void main(String[] args) { \n    // some code goes here\n}\n\n\n1\n2\n3\n\n\nWhy is the word \"public\" even there? As you could probably guess, it means that the main(...) method is available for everyone. The word public here is an access modifier.\n\nAn access modifier is a special keyword that specifies who is allowed to use your code or a special part of it. It can be placed in front of any field, method or the entire class.\n\nSo, you already know at least one of the access modifiers! The others are: package-private, protected, and private. Why do we need them? Let's find out.\n\n\n# OK, so why should I use them?\n\nThere are two main reasons to take access under control: clarity and safety of code.\n\nCode clarity. Imagine your code is a complicated engine of a washing machine. There are some available functions – for example, choosing a washing program or starting a washing process.\n\nWhat can we do to help the user quickly figure out how to wash their clothes? We can cover the engine with the body and add some buttons for choosing a washing mode and starting the process. The user has no need to know what is going on inside the machine’s body; the buttons to get the result are more than enough.\n\nThat’s how access control helps in code – you can “hide” the engine from the user by restricting access and simply provide them with the public “buttons”.\n\nCode safety. Now imagine you have developed a rather useful library that is used by other developers. One day some John Doe wants to use your code’s functionality in his project, but the problem is that he needs to change one variable in one of your classes. If it is public, nothing can stop him from doing that in his code before using method A from the library.\n\nWhat can happen if the variable is used somewhere in method B? Probably the B method would start to act unpredictably. So, protecting important parts of your code is a guarantee that it will be used as an unmodifiable part and its behavior will be the exact one you have developed for it.\n\n\n# Public and package-private classes\n\nIn fact, when you manage the access in your code, you simply divide objects of your program into two main groups: top-level items and low-level items. Fields and methods that are explicitly used outside the class are called top-level fields and methods. If fields and methods are used inside the class, they are known as low-level ones. This low-level and top-level logic is also applicable to classes. Usually, using low-level items helps to unload top-level classes, methods or fields in order to structure and decompose the code. If these items are not explicitly used, it will be efficient to restrict access to them.\n\nNow let’s see how we can set restrictions to different parts of the code. A top-level class (not an inner one, not a nested one) can have one of two following modifiers:\n\n * package-private (default, no explicit modifier): visible only for classes from the same package;\n * public: visible to all classes everywhere.\n\nHere is a class inside the package org.hyperskill.java.packages.theory.p1. with default package-private access:\n\npackage org.hyperskill.java.packages.theory.p1;\n\nclass PackagePrivateClass{\n\n}\n\n\n1\n2\n3\n4\n5\n\n\nThis class can be used only by other classes from the same package. It's not even visible for classes from any other package including:\n\norg.hyperskill\n\norg.hyperskill.java.packages.theory\n\ndefault package\n\n\n1\n2\n3\n4\n5\n\n\nNote the first two examples – if the class is package-private in package a.b, it is still unavailable from package a.c and package a itself.\n\nHere is a public class inside the package org.hyperskill.java.packages.theory.p2\n\npackage org.hyperskill.java.packages.theory.p2;\n\npublic class PublicClass {\n\n}\n\n\n1\n2\n3\n4\n5\n\n\nThis class has no access restrictions, it is visible to all classes and can be used everywhere including:\n\norg.hyperskill\n\norg.hyperskill.java.packages.theory\n\norg.hyperskill.java.packages.theory.p1\n\ndefault package\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nThe common way of using top-level class modifiers is:\n\n 1. make the classes containing methods for users (the “buttons”) public;\n 2. make all other classes with low-level logic methods used by public ones package-private (cover the engine with the body).\n\nRemember: everything that’s not meant to be used/changed by classes from other packages, should not be public.\n\n\n# Private members\n\nA class member (a field or a method, e. g. class constructor) has more options to choose from: private, package-private, protected and public. As you can see, there are two additional modifiers here. Let's consider member modifiers in more detail.\n\nFields are often declared private to control access to them from any other class. In some cases, these fields are only used internally in the class and there is no way to change and even access them from any other class. In other cases, it can be done via accessor methods (e.g. getters and setters). Getter and setter methods are used to protect and hide your data when creating classes. A getter method returns the value of a field while a setter method sets or updates the value. We will discuss the main features of getter and setter methods later in the topic related to these terms.\n\nPrivate methods are used to hide the internal low-level logic implementation from the rest of the code and make public methods more brief and readable.\n\nHere is the class Counter with the private field current. This field can be read-only with the method getCurrent() , a getter method, and changed with the inc() method. The last one is not exactly a setter method, because it doesn't manually set a value to a current variable but just increments it.\n\npublic class Counter {\n   private long current = 0;\n\n   public long getCurrent() {\n       return current;\n   }\n\n\n   public long inc() {\n       inc(1L);\n       return current;\n   }\n\n\n   private void inc(long val) {\n       current += val;\n   }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\nSometimes, a private class constructor is required. This type of constructor can only be used inside the class, e.g. from another constructor, which can be public or private too, or from the class methods.\n\n\n# Package-private members\n\nA package-private access modifier does not require any keyword. If a field, a method, or a constructor has this modifier, then it can be read or changed from any class inside the same package.\n\nLet's see an example. Here are two classes in the same package: Salary and Promotion.\n\nThe class Salary has a package-private field and a constructor. An instance of the Salary class can be created inside a method of Promotion, and the field can also be accessed by Promotion and its members because they have the same package.\n\npublic class Salary {\n    long income;\n\n    Salary(long income) {\n        this.income = income;\n    }\n}\n\npublic class Promotion {\n    Salary salary;\n\n    Promotion(Salary salary) {\n        this.salary = salary;\n    }\n\n    public void promote() {\n        salary.income += 1500;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n# Protected and public members\n\nDisclaimer: you will learn to use these two modifiers later!\n\nIf a class member has the protected access modifier, it can be accessed from classes inside the same package and all subclasses of this class (including the ones in other packages). For now, it is important to remember, that protected option is less restricting than package-private as it allows some classes from other packages access to the code member.\n\nA public access modifier means that there is no restriction on using a field, method or class. It's often used for constructors, methods representing the class API but not commonly used with fields.\n\nHere are common ways to understand which access modifier to choose. It is not the ultimate algorithm, because the inheritance and subclass topics have not been covered yet, but it can help you understand the main use cases of the modifiers.\n\n\n\nSo, let's review the names of access modifiers (from most to least limiting):\n\n * private — available only inside a class;\n * package-private (also known as default, implicit) — available for all classes in the same package;\n * protected — available for classes in the same package and for subclasses (will be covered later);\n * public — available for all classes everywhere.\n\n\n\nThe table above illustrates the level of access provided by the access modifiers: the class always has access to its members and so on. Note that by a subclass here we mean only a subclass of this class used in another package. We will learn inheritance and subclasses later.\n\n提示\n\nRemember, that only public or default (no keywords) modifiers may be used when declaring classes. All four of them can be applied to class members: fields, methods, etc.\n\n\n# Conclusion\n\nIn this topic, you learned about access modifiers that allow you to determine who will be able to use the code. Using them makes your code safer and clearer. In conclusion, here is a piece of advice: use the most restrictive access level that makes sense for a particular member. Don't make all members public.",normalizedContent:"you've probably seen the following piece of code:\n\npublic static void main(string[] args) { \n    // some code goes here\n}\n\n\n1\n2\n3\n\n\nwhy is the word \"public\" even there? as you could probably guess, it means that the main(...) method is available for everyone. the word public here is an access modifier.\n\nan access modifier is a special keyword that specifies who is allowed to use your code or a special part of it. it can be placed in front of any field, method or the entire class.\n\nso, you already know at least one of the access modifiers! the others are: package-private, protected, and private. why do we need them? let's find out.\n\n\n# ok, so why should i use them?\n\nthere are two main reasons to take access under control: clarity and safety of code.\n\ncode clarity. imagine your code is a complicated engine of a washing machine. there are some available functions – for example, choosing a washing program or starting a washing process.\n\nwhat can we do to help the user quickly figure out how to wash their clothes? we can cover the engine with the body and add some buttons for choosing a washing mode and starting the process. the user has no need to know what is going on inside the machine’s body; the buttons to get the result are more than enough.\n\nthat’s how access control helps in code – you can “hide” the engine from the user by restricting access and simply provide them with the public “buttons”.\n\ncode safety. now imagine you have developed a rather useful library that is used by other developers. one day some john doe wants to use your code’s functionality in his project, but the problem is that he needs to change one variable in one of your classes. if it is public, nothing can stop him from doing that in his code before using method a from the library.\n\nwhat can happen if the variable is used somewhere in method b? probably the b method would start to act unpredictably. so, protecting important parts of your code is a guarantee that it will be used as an unmodifiable part and its behavior will be the exact one you have developed for it.\n\n\n# public and package-private classes\n\nin fact, when you manage the access in your code, you simply divide objects of your program into two main groups: top-level items and low-level items. fields and methods that are explicitly used outside the class are called top-level fields and methods. if fields and methods are used inside the class, they are known as low-level ones. this low-level and top-level logic is also applicable to classes. usually, using low-level items helps to unload top-level classes, methods or fields in order to structure and decompose the code. if these items are not explicitly used, it will be efficient to restrict access to them.\n\nnow let’s see how we can set restrictions to different parts of the code. a top-level class (not an inner one, not a nested one) can have one of two following modifiers:\n\n * package-private (default, no explicit modifier): visible only for classes from the same package;\n * public: visible to all classes everywhere.\n\nhere is a class inside the package org.hyperskill.java.packages.theory.p1. with default package-private access:\n\npackage org.hyperskill.java.packages.theory.p1;\n\nclass packageprivateclass{\n\n}\n\n\n1\n2\n3\n4\n5\n\n\nthis class can be used only by other classes from the same package. it's not even visible for classes from any other package including:\n\norg.hyperskill\n\norg.hyperskill.java.packages.theory\n\ndefault package\n\n\n1\n2\n3\n4\n5\n\n\nnote the first two examples – if the class is package-private in package a.b, it is still unavailable from package a.c and package a itself.\n\nhere is a public class inside the package org.hyperskill.java.packages.theory.p2\n\npackage org.hyperskill.java.packages.theory.p2;\n\npublic class publicclass {\n\n}\n\n\n1\n2\n3\n4\n5\n\n\nthis class has no access restrictions, it is visible to all classes and can be used everywhere including:\n\norg.hyperskill\n\norg.hyperskill.java.packages.theory\n\norg.hyperskill.java.packages.theory.p1\n\ndefault package\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nthe common way of using top-level class modifiers is:\n\n 1. make the classes containing methods for users (the “buttons”) public;\n 2. make all other classes with low-level logic methods used by public ones package-private (cover the engine with the body).\n\nremember: everything that’s not meant to be used/changed by classes from other packages, should not be public.\n\n\n# private members\n\na class member (a field or a method, e. g. class constructor) has more options to choose from: private, package-private, protected and public. as you can see, there are two additional modifiers here. let's consider member modifiers in more detail.\n\nfields are often declared private to control access to them from any other class. in some cases, these fields are only used internally in the class and there is no way to change and even access them from any other class. in other cases, it can be done via accessor methods (e.g. getters and setters). getter and setter methods are used to protect and hide your data when creating classes. a getter method returns the value of a field while a setter method sets or updates the value. we will discuss the main features of getter and setter methods later in the topic related to these terms.\n\nprivate methods are used to hide the internal low-level logic implementation from the rest of the code and make public methods more brief and readable.\n\nhere is the class counter with the private field current. this field can be read-only with the method getcurrent() , a getter method, and changed with the inc() method. the last one is not exactly a setter method, because it doesn't manually set a value to a current variable but just increments it.\n\npublic class counter {\n   private long current = 0;\n\n   public long getcurrent() {\n       return current;\n   }\n\n\n   public long inc() {\n       inc(1l);\n       return current;\n   }\n\n\n   private void inc(long val) {\n       current += val;\n   }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\nsometimes, a private class constructor is required. this type of constructor can only be used inside the class, e.g. from another constructor, which can be public or private too, or from the class methods.\n\n\n# package-private members\n\na package-private access modifier does not require any keyword. if a field, a method, or a constructor has this modifier, then it can be read or changed from any class inside the same package.\n\nlet's see an example. here are two classes in the same package: salary and promotion.\n\nthe class salary has a package-private field and a constructor. an instance of the salary class can be created inside a method of promotion, and the field can also be accessed by promotion and its members because they have the same package.\n\npublic class salary {\n    long income;\n\n    salary(long income) {\n        this.income = income;\n    }\n}\n\npublic class promotion {\n    salary salary;\n\n    promotion(salary salary) {\n        this.salary = salary;\n    }\n\n    public void promote() {\n        salary.income += 1500;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n# protected and public members\n\ndisclaimer: you will learn to use these two modifiers later!\n\nif a class member has the protected access modifier, it can be accessed from classes inside the same package and all subclasses of this class (including the ones in other packages). for now, it is important to remember, that protected option is less restricting than package-private as it allows some classes from other packages access to the code member.\n\na public access modifier means that there is no restriction on using a field, method or class. it's often used for constructors, methods representing the class api but not commonly used with fields.\n\nhere are common ways to understand which access modifier to choose. it is not the ultimate algorithm, because the inheritance and subclass topics have not been covered yet, but it can help you understand the main use cases of the modifiers.\n\n\n\nso, let's review the names of access modifiers (from most to least limiting):\n\n * private — available only inside a class;\n * package-private (also known as default, implicit) — available for all classes in the same package;\n * protected — available for classes in the same package and for subclasses (will be covered later);\n * public — available for all classes everywhere.\n\n\n\nthe table above illustrates the level of access provided by the access modifiers: the class always has access to its members and so on. note that by a subclass here we mean only a subclass of this class used in another package. we will learn inheritance and subclasses later.\n\n提示\n\nremember, that only public or default (no keywords) modifiers may be used when declaring classes. all four of them can be applied to class members: fields, methods, etc.\n\n\n# conclusion\n\nin this topic, you learned about access modifiers that allow you to determine who will be able to use the code. using them makes your code safer and clearer. in conclusion, here is a piece of advice: use the most restrictive access level that makes sense for a particular member. don't make all members public.",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：Getters and setters",frontmatter:{title:"Theory：Getters and setters",date:"2022-05-09T12:46:08.000Z",permalink:"/pages/467f35/",tags:["Java","OOP"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/02.Java%20OOP/37.Theory%EF%BC%9AGetters%20and%20setters.html",relativePath:"01.Java/01.Hyperskill - Java/02.Java OOP/37.Theory：Getters and setters.md",key:"v-701b9342",path:"/pages/467f35/",headers:[{level:2,title:"Data encapsulation",slug:"data-encapsulation",normalizedTitle:"data encapsulation",charIndex:2},{level:2,title:"Getters and setters",slug:"getters-and-setters",normalizedTitle:"getters and setters",charIndex:717},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:3768}],headersStr:"Data encapsulation Getters and setters Conclusion",content:"# Data encapsulation\n\nAccording to the data encapsulation principle, the fields of a class cannot be directly accessed from other classes. The fields can be accessed only through the methods of that particular class.\n\nTo access hidden fields, programmers write special types of methods: getters and setters. Getters can only read fields, and setters can only write (modify) the fields. Both types of methods should be public.\n\nUsing these methods gives us some advantages:\n\n * the fields of a class can be made read-only, write-only, or both;\n * a class can have total control over what values are stored in the fields;\n * users of a class don't know how the class stores its data and don't depend on the fields.\n\n\n# Getters and setters\n\nJava doesn't provide any special keywords for getter and setter methods. Their main difference from other methods is their names.\n\nAccording to the JavaBeans Convention:\n\n * getters start with get, followed by the variable name, with the first letter of the variable name capitalized;\n * setters start with set, followed by the variable name, with the first letter of the variable name capitalized.\n\nThis convention applies to any types except boolean. A getter for a boolean field starts with is, followed by the variable name.\n\nExample 1. The class Account has four fields: id, code, balance and enabled. Each field has a keyword private to hide the field from direct access from other classes. Also, the class has public getters and setters for accessing fields through these methods.\n\nclass Account {\n\n    private long id;\n    private String code;\n    private long balance;\n    private boolean enabled;\n\n    public long getId() {\n        return id;\n    }\n\n    public void setId(long id) {\n        this.id = id;\n    }\n\n    public String getCode() {\n        return code;\n    }\n\n    public void setCode(String code) {\n        this.code = code;\n    }\n\n    public long getBalance() {\n        return balance;\n    }\n\n    public void setBalance(long balance) {\n        this.balance = balance;\n    }\n\n    public boolean isEnabled() {\n        return enabled;\n    }\n\n    public void setEnabled(boolean enabled) {\n        this.enabled = enabled;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n\n\nHere you can see the different getters and setters for the class Account. Just as the convention states, the boolean field enabled has a different getter name: it starts with the word is instead of get.\n\nLet's create an instance of the class and fill the fields, then read values from the fields and output them.\n\nAccount account = new Account();\n\naccount.setId(1000);\naccount.setCode(\"62968503812\");\naccount.setBalance(100_000_000);\naccount.setEnabled(true);\n\nSystem.out.println(account.getId());      // 1000\nSystem.out.println(account.getCode());    // 62968503812\nSystem.out.println(account.getBalance()); // 100000000\nSystem.out.println(account.isEnabled());  // true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\nSometimes, getters or setters can contain a more sophisticated logic. For example, g****etters may return non-stored values (calculated at runtime), or setters may also in some cases modify the value of another field according to changes. But usually, getters and setters have a minimum of programming logic.\n\nExample 2. In the following class, the setter setName doesn't change the current value if the passed value is null.\n\nclass Patient {\n\n    private String name;\n\n    public Patient(String name) {\n        this.name = name;\n    }\n\n    public String getName() {\n        return this.name;\n    }\n    \n    public void setName(String name) {\n        if (name != null) {\n            this.name = name;\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# Conclusion\n\nTo restrict access to fields from external code make them private and write suitable getters/setters to read/change only the fields you need. Do not forget to make use of the naming convention when writing them.\n\n提示\n\nNote, modern IDEs (such as IntelliJ IDEA) can generate getters and setters automatically based on class fields.",normalizedContent:"# data encapsulation\n\naccording to the data encapsulation principle, the fields of a class cannot be directly accessed from other classes. the fields can be accessed only through the methods of that particular class.\n\nto access hidden fields, programmers write special types of methods: getters and setters. getters can only read fields, and setters can only write (modify) the fields. both types of methods should be public.\n\nusing these methods gives us some advantages:\n\n * the fields of a class can be made read-only, write-only, or both;\n * a class can have total control over what values are stored in the fields;\n * users of a class don't know how the class stores its data and don't depend on the fields.\n\n\n# getters and setters\n\njava doesn't provide any special keywords for getter and setter methods. their main difference from other methods is their names.\n\naccording to the javabeans convention:\n\n * getters start with get, followed by the variable name, with the first letter of the variable name capitalized;\n * setters start with set, followed by the variable name, with the first letter of the variable name capitalized.\n\nthis convention applies to any types except boolean. a getter for a boolean field starts with is, followed by the variable name.\n\nexample 1. the class account has four fields: id, code, balance and enabled. each field has a keyword private to hide the field from direct access from other classes. also, the class has public getters and setters for accessing fields through these methods.\n\nclass account {\n\n    private long id;\n    private string code;\n    private long balance;\n    private boolean enabled;\n\n    public long getid() {\n        return id;\n    }\n\n    public void setid(long id) {\n        this.id = id;\n    }\n\n    public string getcode() {\n        return code;\n    }\n\n    public void setcode(string code) {\n        this.code = code;\n    }\n\n    public long getbalance() {\n        return balance;\n    }\n\n    public void setbalance(long balance) {\n        this.balance = balance;\n    }\n\n    public boolean isenabled() {\n        return enabled;\n    }\n\n    public void setenabled(boolean enabled) {\n        this.enabled = enabled;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n\n\nhere you can see the different getters and setters for the class account. just as the convention states, the boolean field enabled has a different getter name: it starts with the word is instead of get.\n\nlet's create an instance of the class and fill the fields, then read values from the fields and output them.\n\naccount account = new account();\n\naccount.setid(1000);\naccount.setcode(\"62968503812\");\naccount.setbalance(100_000_000);\naccount.setenabled(true);\n\nsystem.out.println(account.getid());      // 1000\nsystem.out.println(account.getcode());    // 62968503812\nsystem.out.println(account.getbalance()); // 100000000\nsystem.out.println(account.isenabled());  // true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\nsometimes, getters or setters can contain a more sophisticated logic. for example, g****etters may return non-stored values (calculated at runtime), or setters may also in some cases modify the value of another field according to changes. but usually, getters and setters have a minimum of programming logic.\n\nexample 2. in the following class, the setter setname doesn't change the current value if the passed value is null.\n\nclass patient {\n\n    private string name;\n\n    public patient(string name) {\n        this.name = name;\n    }\n\n    public string getname() {\n        return this.name;\n    }\n    \n    public void setname(string name) {\n        if (name != null) {\n            this.name = name;\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# conclusion\n\nto restrict access to fields from external code make them private and write suitable getters/setters to read/change only the fields you need. do not forget to make use of the naming convention when writing them.\n\n提示\n\nnote, modern ides (such as intellij idea) can generate getters and setters automatically based on class fields.",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：Inheritance",frontmatter:{title:"Theory：Inheritance",date:"2022-05-10T22:30:19.000Z",permalink:"/pages/249060/",tags:["Java","OOP"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/02.Java%20OOP/38.Theory%EF%BC%9AInheritance.html",relativePath:"01.Java/01.Hyperskill - Java/02.Java OOP/38.Theory：Inheritance.md",key:"v-d430be26",path:"/pages/249060/",headers:[{level:2,title:"Extending classes",slug:"extending-classes",normalizedTitle:"extending classes",charIndex:313},{level:2,title:"An example of a class hierarchy",slug:"an-example-of-a-class-hierarchy",normalizedTitle:"an example of a class hierarchy",charIndex:2105},{level:2,title:"Final classes",slug:"final-classes",normalizedTitle:"final classes",charIndex:5226},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:5525}],headersStr:"Extending classes An example of a class hierarchy Final classes Conclusion",content:"Inheritance is a mechanism for deriving a new class from another class (base class). The new class acquires some fields and methods of the base class. Inheritance is one of the main principles of object-oriented programming. It allows developers to build convenient class hierarchies and reuse existing code.\n\n\n# Extending classes\n\nWhen it comes to inheritance, there are several terms. A class derived from another class is called a subclass (it's also known as a derived class, extended class or child class). The class from which the subclass is derived is called a superclass (also a base class or a parent class).\n\nTo derive a new class from another the keyword extends is used. The common syntax is shown below.\n\nclass SuperClass { }\n\nclass SubClassA extends SuperClass { }\n\nclass SubClassB extends SuperClass { }\n\nclass SubClassC extends SubClassA { }\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nThere are important points about inheritance in Java:\n\n * Java doesn't support multiple-class inheritance meaning that a class can only inherit from a single superclass;\n * a class hierarchy can have multiple levels (class C can extend class B that extends class A);\n * a superclass can have more than one subclass.\n\nA subclass inherits all public and protected fields and methods from the superclass. A subclass can also add new fields and methods. The inherited and added members will be used in the same way.\n\nA subclass doesn't inherit private fields and methods from the superclass. However, if the superclass has public or protected methods for accessing its private fields, these members can be used inside subclasses.\n\nConstructors are not inherited, but the superclass's constructor can be invoked from the subclass using the special keyword super. This keyword is discussed in more detail in another topic.\n\nIf you'd like the base class members to be accessible from all subclasses but not from the outside code (excluding the same package), use the access modifier protected.\n\nInheritance represents the IS-A relationship. A base class represents the general and a subclass represents the particular or specific.\n\n\n# An example of a class hierarchy\n\nLet's consider a more graphic example. A telecommunication company serves clients. It has a small staff consisting only of managers and programmers. Let's consider a class hierarchy for people associated with the company's activities (including clients).\n\nAt first, we present the hierarchy as a figure. An arrow indicates that one class extends another one.\n\n\n\nThe class hierarchy for the telecommunication company\n\n * the base class Person has fields for storing common data: name, year of birth, and address;\n * the class Client has additional fields to store the contract number and status (gold or not);\n * the class Employee stores the start date of work for the company and the salary;\n * the class Programmer has an array of the programming languages a programmer uses;\n * the class Manager may have a dazzling smile.\n\nLet's see the code:\n\nclass Person {\n    protected String name;\n    protected int yearOfBirth;\n    protected String address;\n\n    // public getters and setters for all fields here\n}\n\nclass Client extends Person {\n    protected String contractNumber;\n    protected boolean gold;\n\n    // public getters and setters for all fields here\n}\n\nclass Employee extends Person {\n    protected Date startDate;\n    protected Long salary;\n\n    // public getters and setters for all fields here\n}\n\nclass Programmer extends Employee {\n    protected String[] programmingLanguages;\n\n    public String[] getProgrammingLanguages() {\n        return programmingLanguages;\n    }\n\n    public void setProgrammingLanguages(String[] programmingLanguages) {\n        this.programmingLanguages = programmingLanguages;\n    }\n}\n\nclass Manager extends Employee {\n    protected boolean smile;\n\n    public boolean isSmile() {\n        return smile;\n    }\n\n    public void setSmile(boolean smile) {\n        this.smile = smile;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n\n\nThis hierarchy has two levels and five classes overall. All fields are protected which means they are visible to subclasses. Each class also has public getters and setters but some are skipped in the code.\n\nLet's create an object of the Programmer class and fill the inherited fields using the inherited setters. To read the values of the fields we can use inherited getters.\n\nProgrammer p = new Programmer();\n\np.setName(\"John Elephant\");\np.setYearOfBirth(1985);\np.setAddress(\"Some street, 15\");\np.setStartDate(new Date());\np.setSalary(500_000L);\np.setProgrammingLanguages(new String[] { \"Java\", \"Scala\", \"Kotlin\" });\n\nSystem.out.println(p.getName()); // John Elephant\nSystem.out.println(p.getSalary()); // 500000\nSystem.out.println(Arrays.toString(p.getProgrammingLanguages())); // [Java, Scala, Kotlin]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nWe also can create an instance of any class included in the considered hierarchy.\n\nSo, inheritance provides a powerful mechanism for code reuse and writing convenient hierarchies. Many things of the real world can be simulated like hierarchies from a more general to a more particular concept.\n\n\n# Final classes\n\nIf a class is declared with the keyword final, it cannot have subclasses at all.\n\nfinal class SuperClass { }\n\n\n1\n\n\nIf you try to extend the class, a compile-time error will occur.\n\nSome standard classes are declared as final: Integer, Long, String, Math. They cannot be extended.\n\n\n# Conclusion\n\nInheritance allows you to build class hierarchies when subclasses (children) take some fields and methods of the superclass (parent). Such a hierarchy can have multiple levels, but every class can inherit only a single superclass. A good class hierarchy helps to avoid code duplication and make your program more modular. If a class should not have subclasses, it should be marked as final.",normalizedContent:"inheritance is a mechanism for deriving a new class from another class (base class). the new class acquires some fields and methods of the base class. inheritance is one of the main principles of object-oriented programming. it allows developers to build convenient class hierarchies and reuse existing code.\n\n\n# extending classes\n\nwhen it comes to inheritance, there are several terms. a class derived from another class is called a subclass (it's also known as a derived class, extended class or child class). the class from which the subclass is derived is called a superclass (also a base class or a parent class).\n\nto derive a new class from another the keyword extends is used. the common syntax is shown below.\n\nclass superclass { }\n\nclass subclassa extends superclass { }\n\nclass subclassb extends superclass { }\n\nclass subclassc extends subclassa { }\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nthere are important points about inheritance in java:\n\n * java doesn't support multiple-class inheritance meaning that a class can only inherit from a single superclass;\n * a class hierarchy can have multiple levels (class c can extend class b that extends class a);\n * a superclass can have more than one subclass.\n\na subclass inherits all public and protected fields and methods from the superclass. a subclass can also add new fields and methods. the inherited and added members will be used in the same way.\n\na subclass doesn't inherit private fields and methods from the superclass. however, if the superclass has public or protected methods for accessing its private fields, these members can be used inside subclasses.\n\nconstructors are not inherited, but the superclass's constructor can be invoked from the subclass using the special keyword super. this keyword is discussed in more detail in another topic.\n\nif you'd like the base class members to be accessible from all subclasses but not from the outside code (excluding the same package), use the access modifier protected.\n\ninheritance represents the is-a relationship. a base class represents the general and a subclass represents the particular or specific.\n\n\n# an example of a class hierarchy\n\nlet's consider a more graphic example. a telecommunication company serves clients. it has a small staff consisting only of managers and programmers. let's consider a class hierarchy for people associated with the company's activities (including clients).\n\nat first, we present the hierarchy as a figure. an arrow indicates that one class extends another one.\n\n\n\nthe class hierarchy for the telecommunication company\n\n * the base class person has fields for storing common data: name, year of birth, and address;\n * the class client has additional fields to store the contract number and status (gold or not);\n * the class employee stores the start date of work for the company and the salary;\n * the class programmer has an array of the programming languages a programmer uses;\n * the class manager may have a dazzling smile.\n\nlet's see the code:\n\nclass person {\n    protected string name;\n    protected int yearofbirth;\n    protected string address;\n\n    // public getters and setters for all fields here\n}\n\nclass client extends person {\n    protected string contractnumber;\n    protected boolean gold;\n\n    // public getters and setters for all fields here\n}\n\nclass employee extends person {\n    protected date startdate;\n    protected long salary;\n\n    // public getters and setters for all fields here\n}\n\nclass programmer extends employee {\n    protected string[] programminglanguages;\n\n    public string[] getprogramminglanguages() {\n        return programminglanguages;\n    }\n\n    public void setprogramminglanguages(string[] programminglanguages) {\n        this.programminglanguages = programminglanguages;\n    }\n}\n\nclass manager extends employee {\n    protected boolean smile;\n\n    public boolean issmile() {\n        return smile;\n    }\n\n    public void setsmile(boolean smile) {\n        this.smile = smile;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n\n\nthis hierarchy has two levels and five classes overall. all fields are protected which means they are visible to subclasses. each class also has public getters and setters but some are skipped in the code.\n\nlet's create an object of the programmer class and fill the inherited fields using the inherited setters. to read the values of the fields we can use inherited getters.\n\nprogrammer p = new programmer();\n\np.setname(\"john elephant\");\np.setyearofbirth(1985);\np.setaddress(\"some street, 15\");\np.setstartdate(new date());\np.setsalary(500_000l);\np.setprogramminglanguages(new string[] { \"java\", \"scala\", \"kotlin\" });\n\nsystem.out.println(p.getname()); // john elephant\nsystem.out.println(p.getsalary()); // 500000\nsystem.out.println(arrays.tostring(p.getprogramminglanguages())); // [java, scala, kotlin]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nwe also can create an instance of any class included in the considered hierarchy.\n\nso, inheritance provides a powerful mechanism for code reuse and writing convenient hierarchies. many things of the real world can be simulated like hierarchies from a more general to a more particular concept.\n\n\n# final classes\n\nif a class is declared with the keyword final, it cannot have subclasses at all.\n\nfinal class superclass { }\n\n\n1\n\n\nif you try to extend the class, a compile-time error will occur.\n\nsome standard classes are declared as final: integer, long, string, math. they cannot be extended.\n\n\n# conclusion\n\ninheritance allows you to build class hierarchies when subclasses (children) take some fields and methods of the superclass (parent). such a hierarchy can have multiple levels, but every class can inherit only a single superclass. a good class hierarchy helps to avoid code duplication and make your program more modular. if a class should not have subclasses, it should be marked as final.",charsets:{},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：Introduction OOP",frontmatter:{title:"Theory：Introduction OOP",date:"2022-05-04T19:19:56.000Z",permalink:"/pages/af043d/",tags:["Java","OOP"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/02.Java%20OOP/31.Theory%EF%BC%9AIntroduction%20OOP.html",relativePath:"01.Java/01.Hyperskill - Java/02.Java OOP/31.Theory：Introduction OOP.md",key:"v-4d919234",path:"/pages/af043d/",headers:[{level:2,title:"Fundamentals",slug:"fundamentals",normalizedTitle:"fundamentals",charIndex:2},{level:2,title:"Basic principles of OOP",slug:"basic-principles-of-oop",normalizedTitle:"basic principles of oop",charIndex:346},{level:2,title:"Objects",slug:"objects",normalizedTitle:"objects",charIndex:2215},{level:2,title:"Classes",slug:"classes",normalizedTitle:"classes",charIndex:3779},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:5821}],headersStr:"Fundamentals Basic principles of OOP Objects Classes Conclusion",content:"# Fundamentals\n\nObject-oriented programming (OOP) is a programming paradigm based on the concept of objects that interact with each other to perform the program functions. Each object can be characterized by a state and behavior. An object’s current state is represented by its fields, and an object’s behavior is represented by its methods.\n\n\n# Basic principles of OOP\n\nThere are four basic principles of OOP. They are encapsulation, abstraction, inheritance, and polymorphism.\n\n * Encapsulation ensures bundling (=encapsulating) of data and the methods operating on that data into a single unit. It also refers to the ability of an object to hide the internal structure of its properties and methods.\n * Data abstraction means that objects should provide the simplified, abstract version of their implementations. The details of their internal work usually aren't necessary for the user, so there's no need to represent them. Abstraction also means that only the most relevant features of the object will be presented.\n * Inheritance is a mechanism for defining parent-child relationships between classes. Often objects are very similar, so inheritance allows programmers to reuse common logic and at the same time introduce unique concepts into the classes.\n * Polymorphism literally means \"having many forms\" and is a concept related to inheritance. It allows programmers to define different implementations for the same method. Thus, the name (or interface) remains the same, but the actions performed may differ. For example, imagine a website that posts three main types of text: news, announcements, and articles. They are somewhat similar in that they all have a headline, some text, and a date. In other ways, they are different: articles have authors, news bulletins have sources, and announcements have a date after which they become irrelevant. It is convenient to write an abstract class with general information for all publications to avoid copying it every time and store what is different in the appropriate derived classes.\n\nThese are the key concepts of OOP. Each object-oriented language implements these principles in its own way, but the essence stays the same from language to language.\n\n\n# Objects\n\nThe key notion of OOP is, naturally, an object. There are a lot of real-world objects around you: pets, buildings, cars, computers, planes, you name it. Even a computer program may be considered as an object.\n\nIt's possible to identify some important characteristics of real-world objects. For instance, for a building, we can consider the number of floors, the year of construction, and the total area. Another example is a plane, which can accommodate a certain number of passengers and transfer you from one city to another. These characteristics constitute the object's attributes and methods. Attributes characterize the states or data of an object, and methods characterize its behavior.\n\nIn OOP, everything can be viewed as an object; a class, for example, is also an object. Programs are made up of different objects that interact with each other. Object state and behavior are usually combined, but this is not always the case. Sometimes we see objects without a state or methods. This, of course, depends on the purpose of the program and the nature of the object.\n\nFor example, there is such a thing as an interface. Not a user interface, but a class that only serves to be inherited from in order to guarantee an interface to its descendant classes. It is a stateless class. Structures exist in C++ for historical reasons. Now a structure is also a class, but once upon a time, a structure had only properties and did not have any methods – a type for storing data and nothing else. These are special cases, and they are sometimes useful.\n\n\n# Classes\n\nOften, many individual objects have similar characteristics. We can say these objects belong to the same type or class.\n\nA class is another important notion of OOP. A class describes a common structure of similar objects: their fields and methods. It may be considered a template or a blueprint for similar objects. An object is an individual instance of a class.\n\nIn accordance with the principle of encapsulation mentioned above, any class should be considered as a blackbox, that is, the user of the class should see and use only the interface part of the class, namely, the list of declared properties and methods, and should not delve into the internal implementation.\n\nLet's look at some examples below.\n\nExample 1. The building class\n\n\n\nAn abstract building for describing buildings as a type of object (class)\n\nEach building has the same attributes:\n\n * Number of floors (an integer number);\n * Area (a floating-point number, square meters);\n * Year of construction (an integer number).\n\nEach object of the building type has the same attributes but different values.\n\nFor instance:\n\n * Building 1: number of floors = 4, area = 2400.16, year of construction = 1966;\n * Building 2: number of floors = 6, area = 3200.54, year of construction = 2001.\n\nIt's quite difficult to determine the behavior of a building, but this example demonstrates attributes pretty well.\n\nExample 2. The plane class\n\nUnlike with a building, it is easy to define the behavior of a plane: it can fly and transfer you between two points on the planet.\n\n\n\nAn abstract plane for describing all planes as a type of object (class)\n\nEach plane has the following attributes:\n\n * Name (a string, for example, \"Airbus A320\" or \"Boeing 777\");\n * Passenger capacity (an integer number);\n * Standard speed (an integer number);\n * Current coordinates (they are needed to navigate).\n\nAlso, it has a behavior (a method): transferring passengers from one geographical point to another. This behavior changes the state of a plane, namely, its current coordinates.\n\n\n# Conclusion\n\nTo put it concisely, you should remember the following:\n\n * An object-oriented program consists of a set of interacting objects.\n * According to the principle of encapsulation, the internal implementation of the object is not accessible to the user.\n * An object may have characteristics: fields and methods.\n * An object is an instance of a class (type);\n * A class is a more abstract concept than an individual object; it may be considered a template or blueprint that describes the common structure of a set of similar objects.",normalizedContent:"# fundamentals\n\nobject-oriented programming (oop) is a programming paradigm based on the concept of objects that interact with each other to perform the program functions. each object can be characterized by a state and behavior. an object’s current state is represented by its fields, and an object’s behavior is represented by its methods.\n\n\n# basic principles of oop\n\nthere are four basic principles of oop. they are encapsulation, abstraction, inheritance, and polymorphism.\n\n * encapsulation ensures bundling (=encapsulating) of data and the methods operating on that data into a single unit. it also refers to the ability of an object to hide the internal structure of its properties and methods.\n * data abstraction means that objects should provide the simplified, abstract version of their implementations. the details of their internal work usually aren't necessary for the user, so there's no need to represent them. abstraction also means that only the most relevant features of the object will be presented.\n * inheritance is a mechanism for defining parent-child relationships between classes. often objects are very similar, so inheritance allows programmers to reuse common logic and at the same time introduce unique concepts into the classes.\n * polymorphism literally means \"having many forms\" and is a concept related to inheritance. it allows programmers to define different implementations for the same method. thus, the name (or interface) remains the same, but the actions performed may differ. for example, imagine a website that posts three main types of text: news, announcements, and articles. they are somewhat similar in that they all have a headline, some text, and a date. in other ways, they are different: articles have authors, news bulletins have sources, and announcements have a date after which they become irrelevant. it is convenient to write an abstract class with general information for all publications to avoid copying it every time and store what is different in the appropriate derived classes.\n\nthese are the key concepts of oop. each object-oriented language implements these principles in its own way, but the essence stays the same from language to language.\n\n\n# objects\n\nthe key notion of oop is, naturally, an object. there are a lot of real-world objects around you: pets, buildings, cars, computers, planes, you name it. even a computer program may be considered as an object.\n\nit's possible to identify some important characteristics of real-world objects. for instance, for a building, we can consider the number of floors, the year of construction, and the total area. another example is a plane, which can accommodate a certain number of passengers and transfer you from one city to another. these characteristics constitute the object's attributes and methods. attributes characterize the states or data of an object, and methods characterize its behavior.\n\nin oop, everything can be viewed as an object; a class, for example, is also an object. programs are made up of different objects that interact with each other. object state and behavior are usually combined, but this is not always the case. sometimes we see objects without a state or methods. this, of course, depends on the purpose of the program and the nature of the object.\n\nfor example, there is such a thing as an interface. not a user interface, but a class that only serves to be inherited from in order to guarantee an interface to its descendant classes. it is a stateless class. structures exist in c++ for historical reasons. now a structure is also a class, but once upon a time, a structure had only properties and did not have any methods – a type for storing data and nothing else. these are special cases, and they are sometimes useful.\n\n\n# classes\n\noften, many individual objects have similar characteristics. we can say these objects belong to the same type or class.\n\na class is another important notion of oop. a class describes a common structure of similar objects: their fields and methods. it may be considered a template or a blueprint for similar objects. an object is an individual instance of a class.\n\nin accordance with the principle of encapsulation mentioned above, any class should be considered as a blackbox, that is, the user of the class should see and use only the interface part of the class, namely, the list of declared properties and methods, and should not delve into the internal implementation.\n\nlet's look at some examples below.\n\nexample 1. the building class\n\n\n\nan abstract building for describing buildings as a type of object (class)\n\neach building has the same attributes:\n\n * number of floors (an integer number);\n * area (a floating-point number, square meters);\n * year of construction (an integer number).\n\neach object of the building type has the same attributes but different values.\n\nfor instance:\n\n * building 1: number of floors = 4, area = 2400.16, year of construction = 1966;\n * building 2: number of floors = 6, area = 3200.54, year of construction = 2001.\n\nit's quite difficult to determine the behavior of a building, but this example demonstrates attributes pretty well.\n\nexample 2. the plane class\n\nunlike with a building, it is easy to define the behavior of a plane: it can fly and transfer you between two points on the planet.\n\n\n\nan abstract plane for describing all planes as a type of object (class)\n\neach plane has the following attributes:\n\n * name (a string, for example, \"airbus a320\" or \"boeing 777\");\n * passenger capacity (an integer number);\n * standard speed (an integer number);\n * current coordinates (they are needed to navigate).\n\nalso, it has a behavior (a method): transferring passengers from one geographical point to another. this behavior changes the state of a plane, namely, its current coordinates.\n\n\n# conclusion\n\nto put it concisely, you should remember the following:\n\n * an object-oriented program consists of a set of interacting objects.\n * according to the principle of encapsulation, the internal implementation of the object is not accessible to the user.\n * an object may have characteristics: fields and methods.\n * an object is an instance of a class (type);\n * a class is a more abstract concept than an individual object; it may be considered a template or blueprint that describes the common structure of a set of similar objects.",charsets:{},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：Protected modifier",frontmatter:{title:"Theory：Protected modifier",date:"2022-05-11T19:05:30.000Z",permalink:"/pages/545cfc/",tags:["Java","OOP"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/02.Java%20OOP/39.Theory%EF%BC%9AProtected%20modifier.html",relativePath:"01.Java/01.Hyperskill - Java/02.Java OOP/39.Theory：Protected modifier.md",key:"v-67786560",path:"/pages/545cfc/",headers:[{level:2,title:"Protected vs default",slug:"protected-vs-default",normalizedTitle:"protected vs default",charIndex:982},{level:2,title:"Protected vs private",slug:"protected-vs-private",normalizedTitle:"protected vs private",charIndex:1472},{level:2,title:"Example",slug:"example",normalizedTitle:"example",charIndex:1912},{level:2,title:"Let's recap",slug:"let-s-recap",normalizedTitle:"let's recap",charIndex:4821},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:5004}],headersStr:"Protected vs default Protected vs private Example Let's recap Conclusion",content:"As you may remember, an access modifier describes who can use your piece of code. There are 4 of them in Java:\n\n * private: available only for the class itself;\n * default: available for classes from the same package (= package-private);\n * protected: available for classes from the same package and the extending classes.\n * public: available from everywhere;\n\nWe've already considered most of them, but there's the most interesting one left: the protected access modifier. Let's place it among the modifiers you already know:\n\n\n\nThis modifier determines that only subclasses and any classes from the same package can use a class member. A top-level class, which is a non-nested independent class defined in a .java file, cannot be protected, but an inner one can be declared this way. This is where the importance of a proper package decomposition comes in.\n\nNow let's discuss the difference between protected and its scale neighbors, private and \"package-private\" (default).\n\n\n# Protected vs default\n\nYou can think of classes from the same package as the neighbors and subclasses as the children of a particular class. There are some things you can share or do with your neighbors, for example, discuss a maintenance plan or share the basement. These things and actions would be package-private (default).\n\nThere are also things you can do for children and close friends, like borrow some money or go for a walk in a park on Sunday. These things will be protected.\n\n\n# Protected vs private\n\nThis distinction is even easier: if a variable, a method, or an inner class is used only by the class itself, then it is private, otherwise, it is protected. Following the main rule:\n\nUse the most restrictive access level that makes sense for a particular member.\n\nIf you're not sure whether the method is useful for other classes, it’s better to first make it private and expand its availability later if needed.\n\n\n# Example\n\nNow let's see how all of this works in practice. In the example below, the package org.hyperskill.bluetooth has three classes: Laptop, SmartPhone, and SmartWatch. All the gadgets in the package can be connected via Bluetooth. Laptop has a method receiveInfo(), responsible for getting any information from connected gadgets.\n\npackage org.hyperskill.bluetooth;\n\npublic class Laptop {\n\n    private String info;\n\n    void receiveInfo(String info) {\n        this.info = info;\n    }\n\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\nThe Laptop class has only a single field info which is not directly accessible since it is declared as private. But all classes from the same package can access it invoking the receiveInfo method which is declared as package-private (no modifier).\n\nWe consider that SmartPhone and SmartWatch classes extend the same MobileGadget class with the printNotification method:\n\npackage org.hyperskill.bluetooth;\n\npublic class MobileGadget {\n\n    protected void printNotification(String data) {\n        System.out.println(data);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nThe printNotification method is accessible for all subclasses of this class as well as for all classes in the same package (including the Laptop class).\n\nThe SmartPhone class can access the receiveInfo method of the Laptop class and the printNotification method of the MobileGadget class.\n\npackage org.hyperskill.bluetooth;\n\npublic class SmartPhone extends MobileGadget {\n\n    private Laptop connectedLaptop;\n\n    public SmartPhone() {\n        this.connectedLaptop = new Laptop();\n    }\n\n    private void sendInfoToLaptop(String data) {\n        printNotification(\"Sending data to laptop : \"  + data);\n        connectedLaptop.receiveInfo(data);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\nThe SmartWatch class has a private method countHeartRate, which is not available from other classes (even from a “brother” class SmartPhone). It also uses the Laptop's method of receiving data and a parent's method to print the notification:\n\npackage org.hyperskill.bluetooth;\n\npublic class SmartWatch extends MobileGadget {\n\n    private int avgHeartRate;\n    private Laptop connectedLaptop;\n\n    public SmartWatch() {\n        this.avgHeartRate = 75;\n        this.connectedLaptop = new Laptop();\n    }\n\n    private int countHeartRate() {\n        System.out.println(\"Counting heart rate\");\n        return avgHeartRate;\n    }\n\n    private void sendInfoToLaptop(String data) {\n        printNotification(\"Sending data to laptop : \"  + data);\n        connectedLaptop.receiveInfo(data);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\nWe hope all modifiers are clear now!\n\nThe complete code example is available on GitHub. It has a slightly different package structure which is closer to a real project. You can navigate it in the GitHub web interface. You can copy this code and try to change it to better understand the example.\n\n\n# Let's recap\n\nNow, it's time to put all the access modifiers together:\n\n\n\nThe scheme is the same as it was earlier, but the questions now are specified with regard to inheritance.\n\n\n# Conclusion\n\nIn this topic, you learned about the protected access modifier, its position among the other access modifiers, and how it differs from private and \"package-private\" (default) modifiers. We also saw how the modifiers work in an example and how to choose between them. Now, it's time to practice!",normalizedContent:"as you may remember, an access modifier describes who can use your piece of code. there are 4 of them in java:\n\n * private: available only for the class itself;\n * default: available for classes from the same package (= package-private);\n * protected: available for classes from the same package and the extending classes.\n * public: available from everywhere;\n\nwe've already considered most of them, but there's the most interesting one left: the protected access modifier. let's place it among the modifiers you already know:\n\n\n\nthis modifier determines that only subclasses and any classes from the same package can use a class member. a top-level class, which is a non-nested independent class defined in a .java file, cannot be protected, but an inner one can be declared this way. this is where the importance of a proper package decomposition comes in.\n\nnow let's discuss the difference between protected and its scale neighbors, private and \"package-private\" (default).\n\n\n# protected vs default\n\nyou can think of classes from the same package as the neighbors and subclasses as the children of a particular class. there are some things you can share or do with your neighbors, for example, discuss a maintenance plan or share the basement. these things and actions would be package-private (default).\n\nthere are also things you can do for children and close friends, like borrow some money or go for a walk in a park on sunday. these things will be protected.\n\n\n# protected vs private\n\nthis distinction is even easier: if a variable, a method, or an inner class is used only by the class itself, then it is private, otherwise, it is protected. following the main rule:\n\nuse the most restrictive access level that makes sense for a particular member.\n\nif you're not sure whether the method is useful for other classes, it’s better to first make it private and expand its availability later if needed.\n\n\n# example\n\nnow let's see how all of this works in practice. in the example below, the package org.hyperskill.bluetooth has three classes: laptop, smartphone, and smartwatch. all the gadgets in the package can be connected via bluetooth. laptop has a method receiveinfo(), responsible for getting any information from connected gadgets.\n\npackage org.hyperskill.bluetooth;\n\npublic class laptop {\n\n    private string info;\n\n    void receiveinfo(string info) {\n        this.info = info;\n    }\n\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\nthe laptop class has only a single field info which is not directly accessible since it is declared as private. but all classes from the same package can access it invoking the receiveinfo method which is declared as package-private (no modifier).\n\nwe consider that smartphone and smartwatch classes extend the same mobilegadget class with the printnotification method:\n\npackage org.hyperskill.bluetooth;\n\npublic class mobilegadget {\n\n    protected void printnotification(string data) {\n        system.out.println(data);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nthe printnotification method is accessible for all subclasses of this class as well as for all classes in the same package (including the laptop class).\n\nthe smartphone class can access the receiveinfo method of the laptop class and the printnotification method of the mobilegadget class.\n\npackage org.hyperskill.bluetooth;\n\npublic class smartphone extends mobilegadget {\n\n    private laptop connectedlaptop;\n\n    public smartphone() {\n        this.connectedlaptop = new laptop();\n    }\n\n    private void sendinfotolaptop(string data) {\n        printnotification(\"sending data to laptop : \"  + data);\n        connectedlaptop.receiveinfo(data);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\nthe smartwatch class has a private method countheartrate, which is not available from other classes (even from a “brother” class smartphone). it also uses the laptop's method of receiving data and a parent's method to print the notification:\n\npackage org.hyperskill.bluetooth;\n\npublic class smartwatch extends mobilegadget {\n\n    private int avgheartrate;\n    private laptop connectedlaptop;\n\n    public smartwatch() {\n        this.avgheartrate = 75;\n        this.connectedlaptop = new laptop();\n    }\n\n    private int countheartrate() {\n        system.out.println(\"counting heart rate\");\n        return avgheartrate;\n    }\n\n    private void sendinfotolaptop(string data) {\n        printnotification(\"sending data to laptop : \"  + data);\n        connectedlaptop.receiveinfo(data);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\nwe hope all modifiers are clear now!\n\nthe complete code example is available on github. it has a slightly different package structure which is closer to a real project. you can navigate it in the github web interface. you can copy this code and try to change it to better understand the example.\n\n\n# let's recap\n\nnow, it's time to put all the access modifiers together:\n\n\n\nthe scheme is the same as it was earlier, but the questions now are specified with regard to inheritance.\n\n\n# conclusion\n\nin this topic, you learned about the protected access modifier, its position among the other access modifiers, and how it differs from private and \"package-private\" (default) modifiers. we also saw how the modifiers work in an example and how to choose between them. now, it's time to practice!",charsets:{},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：Referencing subclass objects",frontmatter:{title:"Theory：Referencing subclass objects",date:"2022-05-12T19:03:10.000Z",permalink:"/pages/15dcd2/",tags:["Java","OOP"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/02.Java%20OOP/40.Theory%EF%BC%9AReferencing%20subclass%20objects.html",relativePath:"01.Java/01.Hyperskill - Java/02.Java OOP/40.Theory：Referencing subclass objects.md",key:"v-a983fefa",path:"/pages/15dcd2/",headers:[{level:2,title:"How to refer to a subclass object",slug:"how-to-refer-to-a-subclass-object",normalizedTitle:"how to refer to a subclass object",charIndex:445},{level:2,title:"Accessing fields and methods through a superclass reference",slug:"accessing-fields-and-methods-through-a-superclass-reference",normalizedTitle:"accessing fields and methods through a superclass reference",charIndex:3153},{level:2,title:"Casting between superclass and subclass",slug:"casting-between-superclass-and-subclass",normalizedTitle:"casting between superclass and subclass",charIndex:4009},{level:2,title:"When to use the superclass reference",slug:"when-to-use-the-superclass-reference",normalizedTitle:"when to use the superclass reference",charIndex:4615},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:6036}],headersStr:"How to refer to a subclass object Accessing fields and methods through a superclass reference Casting between superclass and subclass When to use the superclass reference Conclusion",content:'As you know, in Java, classes are organized into a hierarchy, which allows us to refer to objects in different ways. A class that is derived from another class is called a subclass. A class from which the subclass is derived is called a superclass. In this topic, you will learn the two ways to refer to a subclass object. You will find out when it is a good idea to use a superclass reference and what restrictions you should keep in mind.\n\n\n# How to refer to a subclass object\n\nThere are two ways to refer to a subclass object:\n\n1. Using the subclass reference: you can use the subclass reference to refer to its object;\n\n2. Using the superclass reference: you can use a reference variable of the superclass to refer to any subclass object derived from that superclass because a subclass is a special case of the superclass.\n\nLet\'s consider an example of a class hierarchy.\n\nclass Person {\n\n    protected String name;\n    protected int yearOfBirth;\n    protected String address;\n\n    // public getters and setters for all fields\n}\n\nclass Client extends Person {\n\n    protected String contractNumber;\n    protected boolean gold;\n\n    // public getters and setters for all fields\n}\n\nclass Employee extends Person {\n\n    protected Date startDate;\n    protected Long salary;\n\n    // public getters and setters for all fields\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\nAs you know, each of the presented classes has a default no-args constructor.\n\nNow let\'s see both approaches to the reference in action.\n\n\\1. Subclass reference. We can create instances of the subclasses using the constructor:\n\nPerson person = new Person(); // the reference is Person, the object is Person\nClient client = new Client(); // the reference is Client, the object is Client\nEmployee employee = new Employee(); // the reference is Employee, the object is Employee\n\n\n1\n2\n3\n\n\nIn this case, we used subclass references because the types of the references and the created object are the same.\n\n\\2. Superclass reference. When creating objects using the constructor, we can refer to a subclass object using the reference to the superclass:\n\nPerson client = new Client(); // the reference is Person, the object is Client\nPerson employee = new Employee(); // the reference is Person, the object is Employee\n\n\n1\n2\n\n\nIn this case, we used the superclass reference because the references have the type of the superclass and the actual types of created objects are subclasses.\n\nRemember, that:\n\n * you cannot assign an object of one subclass to the reference of another subclass because they don\'t inherit each other:\n\nClient whoIsIt = new Employee(); // it\'s impossible\n\n\n1\n\n * you cannot assign an object of the parent class to the reference of its subclass:\n\nClient client = new Person(); // it\'s impossible too\n\n\n1\n\n\nThe basic rule goes like this: If class A is a superclass of class B and class B is a superclass of class C then a variable of class A can reference any object derived from that class (for instance, objects of the class B and the class C). This is possible because each subclass object is an object of its superclass but not vice versa.\n\n\n# Accessing fields and methods through a superclass reference\n\nWe can use a superclass reference for any subclass object derived from it. However, we cannot access specific members of the subclass through the base class reference. We have access only to those members of the object that are defined by the type of reference.\n\nHere is an example; in the considered hierarchy, each class has getters and setters to access protected fields from the outside.\n\nPerson employee = new Employee();\n\nemployee.setName("Ginger R. Lee"); // Ok\nemployee.setYearOfBirth(1980); // Ok\nemployee.setSalary(30000); // Compile-time error, the base class "doesn\'t know" about the method\n\n\n1\n2\n3\n4\n5\n\n\nThe superclass Person doesn\'t have the method setSalary of the class Employee. You cannot invoke the method through the superclass reference. The same rule holds for fields.\n\n\n# Casting between superclass and subclass\n\nYou can always cast an object of a subclass to its superclass. It may also be possible to cast an object from a superclass type to a subclass, but only if the object is an instance of this subclass, otherwise a ClassCastException will be thrown. Be careful when casting a class to its subclass.\n\nPerson person = new Client();\n\nClient clientAgain = (Client) person; // it\'s ok\nEmployee employee = (Employee) person; // the ClassCastException occurs here\n\n\n1\n2\n3\n4\n\n\nAfter successfully casting a superclass to a subclass, we can access subclass-specific members.\n\n\n# When to use the superclass reference\n\nWhen to use a superclass reference in practice may not be so obvious. Moreover, using a superclass reference imposes some restrictions on accessing class members. There are two common cases:\n\n * processing an array (or another collection) of objects which have different types from the same hierarchy;\n * a method that accepts an object of the base class, but can also work with objects of its subclasses.\n\nWhat we did is we combined both of these cases into a single example. Our method called printNames takes an array of Person and displays the names.\n\npublic static void printNames(Person[] persons) {\n    for (Person person : persons) {\n        System.out.println(person.getName());\n    }\n}\n\n\n1\n2\n3\n4\n5\n\n\nThis method will work for an array with Person, Client and Employee objects.\n\nPerson person = new Employee();\nperson.setName("Ginger R. Lee");\n\nClient client = new Client();\nclient.setName("Pauline E. Morgan");\n\nEmployee employee = new Employee();\nemployee.setName("Lawrence V. Jones");\n\nPerson[] persons = {person, client, employee};\n\nprintNames(persons);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nThe output is exactly as we expected:\n\nGinger R. Lee\nPauline E. Morgan\nLawrence V. Jones\n\n\n1\n2\n3\n\n\nAs you can see, base class references have applications in some practical cases. Other cases of using the superclass references will be considered in topics related to polymorphism.\n\n\n# Conclusion\n\nYou can refer to a subclass object in two ways, using the subclass or the superclass reference. A superclass reference can be used for any of its subclass objects but you cannot assign an object of the parent class to the reference of its subclass. Remember, that when referring to objects with a superclass reference you cannot invoke methods and fields of a subclass.\n\nYou can always cast an object of a subclass to a superclass — and vice versa, but only if the object is indeed an instance of the subclass.\n\nIn practice, a superclass reference can be successfully applied when processing an array of objects which have the same parent class or when there is a method that accepts an object of the base class. You will learn about other cases of superclass references in topics related to polymorphism.',normalizedContent:'as you know, in java, classes are organized into a hierarchy, which allows us to refer to objects in different ways. a class that is derived from another class is called a subclass. a class from which the subclass is derived is called a superclass. in this topic, you will learn the two ways to refer to a subclass object. you will find out when it is a good idea to use a superclass reference and what restrictions you should keep in mind.\n\n\n# how to refer to a subclass object\n\nthere are two ways to refer to a subclass object:\n\n1. using the subclass reference: you can use the subclass reference to refer to its object;\n\n2. using the superclass reference: you can use a reference variable of the superclass to refer to any subclass object derived from that superclass because a subclass is a special case of the superclass.\n\nlet\'s consider an example of a class hierarchy.\n\nclass person {\n\n    protected string name;\n    protected int yearofbirth;\n    protected string address;\n\n    // public getters and setters for all fields\n}\n\nclass client extends person {\n\n    protected string contractnumber;\n    protected boolean gold;\n\n    // public getters and setters for all fields\n}\n\nclass employee extends person {\n\n    protected date startdate;\n    protected long salary;\n\n    // public getters and setters for all fields\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\nas you know, each of the presented classes has a default no-args constructor.\n\nnow let\'s see both approaches to the reference in action.\n\n\\1. subclass reference. we can create instances of the subclasses using the constructor:\n\nperson person = new person(); // the reference is person, the object is person\nclient client = new client(); // the reference is client, the object is client\nemployee employee = new employee(); // the reference is employee, the object is employee\n\n\n1\n2\n3\n\n\nin this case, we used subclass references because the types of the references and the created object are the same.\n\n\\2. superclass reference. when creating objects using the constructor, we can refer to a subclass object using the reference to the superclass:\n\nperson client = new client(); // the reference is person, the object is client\nperson employee = new employee(); // the reference is person, the object is employee\n\n\n1\n2\n\n\nin this case, we used the superclass reference because the references have the type of the superclass and the actual types of created objects are subclasses.\n\nremember, that:\n\n * you cannot assign an object of one subclass to the reference of another subclass because they don\'t inherit each other:\n\nclient whoisit = new employee(); // it\'s impossible\n\n\n1\n\n * you cannot assign an object of the parent class to the reference of its subclass:\n\nclient client = new person(); // it\'s impossible too\n\n\n1\n\n\nthe basic rule goes like this: if class a is a superclass of class b and class b is a superclass of class c then a variable of class a can reference any object derived from that class (for instance, objects of the class b and the class c). this is possible because each subclass object is an object of its superclass but not vice versa.\n\n\n# accessing fields and methods through a superclass reference\n\nwe can use a superclass reference for any subclass object derived from it. however, we cannot access specific members of the subclass through the base class reference. we have access only to those members of the object that are defined by the type of reference.\n\nhere is an example; in the considered hierarchy, each class has getters and setters to access protected fields from the outside.\n\nperson employee = new employee();\n\nemployee.setname("ginger r. lee"); // ok\nemployee.setyearofbirth(1980); // ok\nemployee.setsalary(30000); // compile-time error, the base class "doesn\'t know" about the method\n\n\n1\n2\n3\n4\n5\n\n\nthe superclass person doesn\'t have the method setsalary of the class employee. you cannot invoke the method through the superclass reference. the same rule holds for fields.\n\n\n# casting between superclass and subclass\n\nyou can always cast an object of a subclass to its superclass. it may also be possible to cast an object from a superclass type to a subclass, but only if the object is an instance of this subclass, otherwise a classcastexception will be thrown. be careful when casting a class to its subclass.\n\nperson person = new client();\n\nclient clientagain = (client) person; // it\'s ok\nemployee employee = (employee) person; // the classcastexception occurs here\n\n\n1\n2\n3\n4\n\n\nafter successfully casting a superclass to a subclass, we can access subclass-specific members.\n\n\n# when to use the superclass reference\n\nwhen to use a superclass reference in practice may not be so obvious. moreover, using a superclass reference imposes some restrictions on accessing class members. there are two common cases:\n\n * processing an array (or another collection) of objects which have different types from the same hierarchy;\n * a method that accepts an object of the base class, but can also work with objects of its subclasses.\n\nwhat we did is we combined both of these cases into a single example. our method called printnames takes an array of person and displays the names.\n\npublic static void printnames(person[] persons) {\n    for (person person : persons) {\n        system.out.println(person.getname());\n    }\n}\n\n\n1\n2\n3\n4\n5\n\n\nthis method will work for an array with person, client and employee objects.\n\nperson person = new employee();\nperson.setname("ginger r. lee");\n\nclient client = new client();\nclient.setname("pauline e. morgan");\n\nemployee employee = new employee();\nemployee.setname("lawrence v. jones");\n\nperson[] persons = {person, client, employee};\n\nprintnames(persons);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nthe output is exactly as we expected:\n\nginger r. lee\npauline e. morgan\nlawrence v. jones\n\n\n1\n2\n3\n\n\nas you can see, base class references have applications in some practical cases. other cases of using the superclass references will be considered in topics related to polymorphism.\n\n\n# conclusion\n\nyou can refer to a subclass object in two ways, using the subclass or the superclass reference. a superclass reference can be used for any of its subclass objects but you cannot assign an object of the parent class to the reference of its subclass. remember, that when referring to objects with a superclass reference you cannot invoke methods and fields of a subclass.\n\nyou can always cast an object of a subclass to a superclass — and vice versa, but only if the object is indeed an instance of the subclass.\n\nin practice, a superclass reference can be successfully applied when processing an array of objects which have the same parent class or when there is a method that accepts an object of the base class. you will learn about other cases of superclass references in topics related to polymorphism.',charsets:{},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：The Object class",frontmatter:{title:"Theory：The Object class",date:"2022-05-14T13:40:49.000Z",permalink:"/pages/bac11b/",tags:["Java","OOP"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/02.Java%20OOP/41.Theory%EF%BC%9AThe%20Object%20class.html",relativePath:"01.Java/01.Hyperskill - Java/02.Java OOP/41.Theory：The Object class.md",key:"v-09b4fe23",path:"/pages/bac11b/",headers:[{level:2,title:"Instantiating the Object class",slug:"instantiating-the-object-class",normalizedTitle:"instantiating the object class",charIndex:299},{level:2,title:"Methods provided by the Object class",slug:"methods-provided-by-the-object-class",normalizedTitle:"methods provided by the object class",charIndex:1038},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:2481}],headersStr:"Instantiating the Object class Methods provided by the Object class Conclusion",content:"The Java Standard Library has a class named Object that is the default parent of all standard classes and your custom classes. Every class extends this one implicitly, therefore it's a root of inheritance in Java programs. The class belongs to the java.lang package that is imported by default.\n\n\n# Instantiating the Object class\n\nLet's create an instance of the Object class.\n\nObject anObject = new Object();\n\n\n1\n\n\nThe Object class can refer to an instance of any class because any instance is a kind of Object (upcasting).\n\nLong number = 1_000_000L;\nObject obj1 = number; // an instance of Long can be cast to Object\n\nString str = \"str\";\nObject obj2 = str; // the same with the instance of String\n\n\n1\n2\n3\n4\n5\n\n\nWhen we declare a class, we can explicitly extend the Object class. However, there is no point, since the extension is already done implicitly. We advise you to avoid redundancy in your code, but here's an example, just in case:\n\nclass A extends Object { }\n\n\n1\n\n\nIn your own solutions, it is enough to write class A { }.\n\n\n# Methods provided by the Object class\n\nThe Object class provides some common methods to all subclasses. It has nine instance methods (excluding overloaded methods) which can be divided into four groups:\n\n * threads synchronization: wait, notify, notifyAll;\n * object identity: hashCode, equals;\n * object management: finalize, clone, getClass;\n * human-readable representation: toString;\n\nThis way of grouping methods isn't perfect, but it can help you remember them. Here's a more detailed explanation of the methods:\n\n * The first group of methods (wait, notify, notifyAll) are for working in multithreaded applications.\n * hashCode returns a hash code value for the object.\n * equals indicates whether some other object is \"equal to\" this particular one.\n * finalize is called by the garbage collector (GC) on an object when the GC wants to clean it up. (Note: this method has been deprecated as of JDK 9).\n * clone creates and returns a copy of the object.\n * getClass returns an instance of Class, which has information about the runtime class.\n * toString returns a string representation of the object.\n\nSome of the methods listed above are native, which means they are implemented in the native code. It is typically written in C or C++. Native methods are usually used to interface with system calls or libraries written in other programming languages.\n\nIn the following topics, we will consider these class methods in more detail.\n\n\n# Conclusion\n\nThe Object class is a default class in the java.lang package and is a root of inheritance in Java programs. Every instance of any class is a kind of Object so there is no need to explicitly extend it when declaring a class. It provides some common methods to all subclasses, including nine instance methods that are divided into four groups in the present topic for your convenience. Some of these methods are native so you can use them to interface with system calls or other programming language libraries. You will learn about the methods in the next topics.",normalizedContent:"the java standard library has a class named object that is the default parent of all standard classes and your custom classes. every class extends this one implicitly, therefore it's a root of inheritance in java programs. the class belongs to the java.lang package that is imported by default.\n\n\n# instantiating the object class\n\nlet's create an instance of the object class.\n\nobject anobject = new object();\n\n\n1\n\n\nthe object class can refer to an instance of any class because any instance is a kind of object (upcasting).\n\nlong number = 1_000_000l;\nobject obj1 = number; // an instance of long can be cast to object\n\nstring str = \"str\";\nobject obj2 = str; // the same with the instance of string\n\n\n1\n2\n3\n4\n5\n\n\nwhen we declare a class, we can explicitly extend the object class. however, there is no point, since the extension is already done implicitly. we advise you to avoid redundancy in your code, but here's an example, just in case:\n\nclass a extends object { }\n\n\n1\n\n\nin your own solutions, it is enough to write class a { }.\n\n\n# methods provided by the object class\n\nthe object class provides some common methods to all subclasses. it has nine instance methods (excluding overloaded methods) which can be divided into four groups:\n\n * threads synchronization: wait, notify, notifyall;\n * object identity: hashcode, equals;\n * object management: finalize, clone, getclass;\n * human-readable representation: tostring;\n\nthis way of grouping methods isn't perfect, but it can help you remember them. here's a more detailed explanation of the methods:\n\n * the first group of methods (wait, notify, notifyall) are for working in multithreaded applications.\n * hashcode returns a hash code value for the object.\n * equals indicates whether some other object is \"equal to\" this particular one.\n * finalize is called by the garbage collector (gc) on an object when the gc wants to clean it up. (note: this method has been deprecated as of jdk 9).\n * clone creates and returns a copy of the object.\n * getclass returns an instance of class, which has information about the runtime class.\n * tostring returns a string representation of the object.\n\nsome of the methods listed above are native, which means they are implemented in the native code. it is typically written in c or c++. native methods are usually used to interface with system calls or libraries written in other programming languages.\n\nin the following topics, we will consider these class methods in more detail.\n\n\n# conclusion\n\nthe object class is a default class in the java.lang package and is a root of inheritance in java programs. every instance of any class is a kind of object so there is no need to explicitly extend it when declaring a class. it provides some common methods to all subclasses, including nine instance methods that are divided into four groups in the present topic for your convenience. some of these methods are native so you can use them to interface with system calls or other programming language libraries. you will learn about the methods in the next topics.",charsets:{},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：Interface",frontmatter:{title:"Theory：Interface",date:"2022-05-15T11:26:58.000Z",permalink:"/pages/a19dfb/",tags:["Java","OOP","Abstraction"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/02.Java%20OOP/43.Theory%EF%BC%9AInterface.html",relativePath:"01.Java/01.Hyperskill - Java/02.Java OOP/43.Theory：Interface.md",key:"v-2b5996fa",path:"/pages/a19dfb/",headers:[{level:2,title:"Why interface",slug:"why-interface",normalizedTitle:"why interface",charIndex:2},{level:2,title:"Declaring interfaces",slug:"declaring-interfaces",normalizedTitle:"declaring interfaces",charIndex:3316},{level:2,title:"Implementing interfaces",slug:"implementing-interfaces",normalizedTitle:"implementing interfaces",charIndex:5557},{level:2,title:"Implementing and extending multiple interfaces",slug:"implementing-and-extending-multiple-interfaces",normalizedTitle:"implementing and extending multiple interfaces",charIndex:6554},{level:2,title:"Marker interfaces",slug:"marker-interfaces",normalizedTitle:"marker interfaces",charIndex:7491},{level:2,title:"Static methods",slug:"static-methods",normalizedTitle:"static methods",charIndex:7869},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:8400}],headersStr:"Why interface Declaring interfaces Implementing interfaces Implementing and extending multiple interfaces Marker interfaces Static methods Conclusion",content:'# Why interface\n\nThe general idea of OOP and one of its principles is abstraction. It means that real-world objects can be represented by their abstract models. Designing models is about focusing on the essential features of the objects and discarding the others. To understand what it means, let\'s take a look at a pencil. A pencil is an object that we can use to draw. Other properties such as material or length may be important to us sometimes but do not define the idea of a pencil.\n\nImagine we need to create a graphical editor program. One of the basic functions of the program is drawing. Before drawing, the program asks a user to select a drawing tool. It can be a pen, pencil, brush, highlighter, marker, spray, and others. Each tool from a set has its own specific features: a pencil and a spray leave different marks and that matters. But there is also an essential feature that unites them: the ability to draw.\n\nNow let\'s consider the Pencil class, which is an abstraction of a pencil. As we already discussed the class at least should have the draw method that accepts a model of a curve. This is a crucial function of a pencil for our program. Suppose Curve is a class that represents some curve:\n\nclass Pencil {\n    ...\n    public void draw(Curve curve) {...}\n}\n\n\n1\n2\n3\n4\n\n\nLet\'s define classes for other tools, for example, a brush:\n\nclass Brush {\n    ...\n    public void draw(Curve curve) {...}\n}\n\n\n1\n2\n3\n4\n\n\nEach of them has the method draw, although uses it in its own fashion. The ability to draw is a common feature for all of them. Let\'s call this feature DrawingTool. Then we can say that if a class has the DrawingTool feature, then it should be able to draw, that means the class should have the void draw(Curve curve) {...} method.\n\nJava allows declaring this feature by introducing interfaces. This is how our interface looks like:\n\ninterface DrawingTool {\n    void draw(Curve curve);\n}\n\n\n1\n2\n3\n\n\nIt declares the draw method without implementation.\n\nNow let\'s mark classes that are able to draw by adding implements DrawingTool to the class declaration. If a class implements an interface, it has to implement all declared methods:\n\nclass Pencil implements DrawingTool {\n    ...\n    public void draw(Curve curve) {...}\n}\n\nclass Brush implements DrawingTool {\n    ...\n    public void draw(Curve curve) {...}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nNow just a quick look at the class declaration is enough to understand that class is able to draw. In other words, the main idea of an interface is declaring functionality.\n\nAnother important advantage of introducing interfaces is that you can use them as a type:\n\nDrawingTool pencil = new Pencil();\nDrawingTool brush = new Brush();\n\n\n1\n2\n\n\nNow both a pencil and a brush objects have the same type. It means that both classes can be treated in a similar way as a DrawingTool. This is another way of supporting polymorphism, which helps to design reusable drawing function of the graphical editor program.\n\nvoid drawCurve(DrawingTool tool, Curve curve) {\n    System.out.println("Drawing a curve " + curve + " using a " + tool);\n    tool.draw(curve);\n}\n\n\n1\n2\n3\n4\n\n\nIn many cases, it is more important to know what an object can do, instead of how it does what it does. This is a reason why interfaces are commonly used for declaring a type of variable.\n\n\n# Declaring interfaces\n\nAn interface can be considered as a special kind of a class that can\'t be instantiated. To declare an interface you should write the keyword interface instead of class before the name of the interface:\n\ninterface Interface { }\n\n\n1\n\n\nAn interface can contain:\n\n * public constants;\n * abstract methods without an implementation (the keyword abstract is not required here);\n * default methods with implementation (the keyword default is required);\n * static methods with implementation (the keyword static is required);\n * private methods with implementation.\n\nIf the modifiers are not specified once the method is declared, its parameters will be public abstract by default.\n\nThe keyword abstract before a method means that the method does not have a body, it just declares a signature. default methods will be discussed further in detail.\n\nAn interface can\'t contain any fields other than public static final (constants), constructors, or non-public abstract methods. Let\'s declare an interface containing all possible members:\n\ninterface Interface {\n        \n    int INT_CONSTANT = 0; // it\'s a constant, the same as public static final int INT_FIELD = 0\n        \n    void instanceMethod1();\n        \n    void instanceMethod2();\n        \n    static void staticMethod() {\n        System.out.println("Interface: static method");\n    }\n        \n    default void defaultMethod() {\n        System.out.println("Interface: default method. It can be overridden");\n    }\n\n    private void privateMethod() {\n        System.out.println("Interface: private methods in interfaces are acceptable but should have a body");\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\nStatic, default, and private methods should have an implementation in the interface!\n\nLet\'s take a closer look at this interface. The variable INT_CONSTANT is not the same as a class field here – it\'s a static final constant. Two methods instanceMethod1() and instanceMethod2() are abstract methods. The staticMethod() is just a regular static method. The default method defaultMethod() has an implementation but it can be overridden in subclasses. The privateMethod has an implementation as well and can be used to decompose default methods.\n\n\n# Implementing interfaces\n\nA class can implement an interface using the keyword implements. We must provide implementations for all abstract methods of the interface.\n\nLet\'s implement the interface we\'ve considered earlier:\n\nclass Class implements Interface {\n\n    @Override\n    public void instanceMethod1() {\n        System.out.println("Class: instance method1");\n    }\n\n    @Override\n    public void instanceMethod2() {\n        System.out.println("Class: instance method2");\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nNow we can create an instance of the class and call its methods:\n\nInterface instance = new Class();\n\ninstance.instanceMethod1(); // it prints "Class: instance method1"\ninstance.instanceMethod2(); // it prints "Class: instance method2"\ninstance.defaultMethod();   // it prints "Interface: default method. It can be overridden"\n\n\n1\n2\n3\n4\n5\n\n\nNote that the instance variable has Interface type, although it is ok to use Class for denoting type.\n\nClass instance = new Class();\n\n\n1\n\n\n\n# Implementing and extending multiple interfaces\n\nOne of the important interface features is multiple inheritance.\n\nA class can implement multiple interfaces:\n\ninterface A { }\ninterface B { }\ninterface C { }\n    \nclass D implements A, B, C { }\n\n\n1\n2\n3\n4\n5\n\n\nAn interface can extend one or more other interfaces using the keyword extends:\n\ninterface A { }\ninterface B { }\ninterface C { }\n\ninterface E extends A, B, C { }\n\n\n1\n2\n3\n4\n5\n\n\nA class can also extend another class and implement multiple interfaces:\n\nclass A { }\n\ninterface B { }\ninterface C { }\n    \nclass D extends A implements B, C { }\n\n\n1\n2\n3\n4\n5\n6\n\n\nAll the examples above do not pose any problems.\n\nMultiple inheritance of interfaces is often used in the Java standard class library. The class String, for example, implements three interfaces at once:\n\npublic final class String \n    implements java.io.Serializable, Comparable<String>, CharSequence {\n// ...\n}\n\n\n1\n2\n3\n4\n\n\n\n# Marker interfaces\n\nIn some situations, an interface can have no members at all. Such interfaces are called marker or tagged interfaces. For example, a well-known interface Serializable is a marker interface:\n\npublic interface Serializable{ \n}\n\n\n1\n2\n\n\nOther examples of marker interfaces are Cloneable, Remote, etc. They are used to provide essential information to the JVM.\n\n\n# Static methods\n\nYou can declare and implement a static method in an interface\n\ninterface Car {\n    static float convertToMilesPerHour(float kmh) {\n        return 0.62 * kmh;\n    }\n}\n\n\n1\n2\n3\n4\n5\n\n\nTo use a static method you just need to invoke it directly from an interface\n\nCar.convertToMilesPerHour(4.5);\n\n\n1\n\n\nThe main purpose of interface static methods is defining utility functionality that is common for all classes implementing the interface. They help to avoid code duplication and creating additional utility classes.\n\n\n# Conclusion\n\nAn interface is a special kind of class that cannot be instantiated. The main idea of an interface is declaring functionality. Interfaces help to abstract from specific classes and emphasize the functionality. It makes software design more reusable and clean. It is a good practice to apply the so-called interface-oriented design which means that you should rely on interfaces instead of concrete implementations. To implement an interface, the keyword implements is used. Opposite to a class, an interface can extend several interfaces. A class can implement multiple interfaces.',normalizedContent:'# why interface\n\nthe general idea of oop and one of its principles is abstraction. it means that real-world objects can be represented by their abstract models. designing models is about focusing on the essential features of the objects and discarding the others. to understand what it means, let\'s take a look at a pencil. a pencil is an object that we can use to draw. other properties such as material or length may be important to us sometimes but do not define the idea of a pencil.\n\nimagine we need to create a graphical editor program. one of the basic functions of the program is drawing. before drawing, the program asks a user to select a drawing tool. it can be a pen, pencil, brush, highlighter, marker, spray, and others. each tool from a set has its own specific features: a pencil and a spray leave different marks and that matters. but there is also an essential feature that unites them: the ability to draw.\n\nnow let\'s consider the pencil class, which is an abstraction of a pencil. as we already discussed the class at least should have the draw method that accepts a model of a curve. this is a crucial function of a pencil for our program. suppose curve is a class that represents some curve:\n\nclass pencil {\n    ...\n    public void draw(curve curve) {...}\n}\n\n\n1\n2\n3\n4\n\n\nlet\'s define classes for other tools, for example, a brush:\n\nclass brush {\n    ...\n    public void draw(curve curve) {...}\n}\n\n\n1\n2\n3\n4\n\n\neach of them has the method draw, although uses it in its own fashion. the ability to draw is a common feature for all of them. let\'s call this feature drawingtool. then we can say that if a class has the drawingtool feature, then it should be able to draw, that means the class should have the void draw(curve curve) {...} method.\n\njava allows declaring this feature by introducing interfaces. this is how our interface looks like:\n\ninterface drawingtool {\n    void draw(curve curve);\n}\n\n\n1\n2\n3\n\n\nit declares the draw method without implementation.\n\nnow let\'s mark classes that are able to draw by adding implements drawingtool to the class declaration. if a class implements an interface, it has to implement all declared methods:\n\nclass pencil implements drawingtool {\n    ...\n    public void draw(curve curve) {...}\n}\n\nclass brush implements drawingtool {\n    ...\n    public void draw(curve curve) {...}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nnow just a quick look at the class declaration is enough to understand that class is able to draw. in other words, the main idea of an interface is declaring functionality.\n\nanother important advantage of introducing interfaces is that you can use them as a type:\n\ndrawingtool pencil = new pencil();\ndrawingtool brush = new brush();\n\n\n1\n2\n\n\nnow both a pencil and a brush objects have the same type. it means that both classes can be treated in a similar way as a drawingtool. this is another way of supporting polymorphism, which helps to design reusable drawing function of the graphical editor program.\n\nvoid drawcurve(drawingtool tool, curve curve) {\n    system.out.println("drawing a curve " + curve + " using a " + tool);\n    tool.draw(curve);\n}\n\n\n1\n2\n3\n4\n\n\nin many cases, it is more important to know what an object can do, instead of how it does what it does. this is a reason why interfaces are commonly used for declaring a type of variable.\n\n\n# declaring interfaces\n\nan interface can be considered as a special kind of a class that can\'t be instantiated. to declare an interface you should write the keyword interface instead of class before the name of the interface:\n\ninterface interface { }\n\n\n1\n\n\nan interface can contain:\n\n * public constants;\n * abstract methods without an implementation (the keyword abstract is not required here);\n * default methods with implementation (the keyword default is required);\n * static methods with implementation (the keyword static is required);\n * private methods with implementation.\n\nif the modifiers are not specified once the method is declared, its parameters will be public abstract by default.\n\nthe keyword abstract before a method means that the method does not have a body, it just declares a signature. default methods will be discussed further in detail.\n\nan interface can\'t contain any fields other than public static final (constants), constructors, or non-public abstract methods. let\'s declare an interface containing all possible members:\n\ninterface interface {\n        \n    int int_constant = 0; // it\'s a constant, the same as public static final int int_field = 0\n        \n    void instancemethod1();\n        \n    void instancemethod2();\n        \n    static void staticmethod() {\n        system.out.println("interface: static method");\n    }\n        \n    default void defaultmethod() {\n        system.out.println("interface: default method. it can be overridden");\n    }\n\n    private void privatemethod() {\n        system.out.println("interface: private methods in interfaces are acceptable but should have a body");\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\nstatic, default, and private methods should have an implementation in the interface!\n\nlet\'s take a closer look at this interface. the variable int_constant is not the same as a class field here – it\'s a static final constant. two methods instancemethod1() and instancemethod2() are abstract methods. the staticmethod() is just a regular static method. the default method defaultmethod() has an implementation but it can be overridden in subclasses. the privatemethod has an implementation as well and can be used to decompose default methods.\n\n\n# implementing interfaces\n\na class can implement an interface using the keyword implements. we must provide implementations for all abstract methods of the interface.\n\nlet\'s implement the interface we\'ve considered earlier:\n\nclass class implements interface {\n\n    @override\n    public void instancemethod1() {\n        system.out.println("class: instance method1");\n    }\n\n    @override\n    public void instancemethod2() {\n        system.out.println("class: instance method2");\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nnow we can create an instance of the class and call its methods:\n\ninterface instance = new class();\n\ninstance.instancemethod1(); // it prints "class: instance method1"\ninstance.instancemethod2(); // it prints "class: instance method2"\ninstance.defaultmethod();   // it prints "interface: default method. it can be overridden"\n\n\n1\n2\n3\n4\n5\n\n\nnote that the instance variable has interface type, although it is ok to use class for denoting type.\n\nclass instance = new class();\n\n\n1\n\n\n\n# implementing and extending multiple interfaces\n\none of the important interface features is multiple inheritance.\n\na class can implement multiple interfaces:\n\ninterface a { }\ninterface b { }\ninterface c { }\n    \nclass d implements a, b, c { }\n\n\n1\n2\n3\n4\n5\n\n\nan interface can extend one or more other interfaces using the keyword extends:\n\ninterface a { }\ninterface b { }\ninterface c { }\n\ninterface e extends a, b, c { }\n\n\n1\n2\n3\n4\n5\n\n\na class can also extend another class and implement multiple interfaces:\n\nclass a { }\n\ninterface b { }\ninterface c { }\n    \nclass d extends a implements b, c { }\n\n\n1\n2\n3\n4\n5\n6\n\n\nall the examples above do not pose any problems.\n\nmultiple inheritance of interfaces is often used in the java standard class library. the class string, for example, implements three interfaces at once:\n\npublic final class string \n    implements java.io.serializable, comparable<string>, charsequence {\n// ...\n}\n\n\n1\n2\n3\n4\n\n\n\n# marker interfaces\n\nin some situations, an interface can have no members at all. such interfaces are called marker or tagged interfaces. for example, a well-known interface serializable is a marker interface:\n\npublic interface serializable{ \n}\n\n\n1\n2\n\n\nother examples of marker interfaces are cloneable, remote, etc. they are used to provide essential information to the jvm.\n\n\n# static methods\n\nyou can declare and implement a static method in an interface\n\ninterface car {\n    static float converttomilesperhour(float kmh) {\n        return 0.62 * kmh;\n    }\n}\n\n\n1\n2\n3\n4\n5\n\n\nto use a static method you just need to invoke it directly from an interface\n\ncar.converttomilesperhour(4.5);\n\n\n1\n\n\nthe main purpose of interface static methods is defining utility functionality that is common for all classes implementing the interface. they help to avoid code duplication and creating additional utility classes.\n\n\n# conclusion\n\nan interface is a special kind of class that cannot be instantiated. the main idea of an interface is declaring functionality. interfaces help to abstract from specific classes and emphasize the functionality. it makes software design more reusable and clean. it is a good practice to apply the so-called interface-oriented design which means that you should rely on interfaces instead of concrete implementations. to implement an interface, the keyword implements is used. opposite to a class, an interface can extend several interfaces. a class can implement multiple interfaces.',charsets:{},lastUpdated:"2022/10/25, 17:57:56",lastUpdatedTimestamp:1666691876e3},{title:"Theory：Multiple constructors",frontmatter:{title:"Theory：Multiple constructors",date:"2022-05-16T17:36:18.000Z",permalink:"/pages/3e6dad/",tags:["Java","OOP"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/02.Java%20OOP/44.Theory%EF%BC%9AMultiple%20constructors.html",relativePath:"01.Java/01.Hyperskill - Java/02.Java OOP/44.Theory：Multiple constructors.md",key:"v-20bd447c",path:"/pages/3e6dad/",headers:[{level:2,title:"Constructor overloading",slug:"constructor-overloading",normalizedTitle:"constructor overloading",charIndex:413},{level:2,title:"Invoking constructors from other constructors",slug:"invoking-constructors-from-other-constructors",normalizedTitle:"invoking constructors from other constructors",charIndex:1604},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:3650}],headersStr:"Constructor overloading Invoking constructors from other constructors Conclusion",content:'Sometimes we need to initialize all fields of an object when creating it, but there are cases in which it might be appropriate to initialize only one or several fields. Fortunately, for this purpose, a class can have several constructors that assign values to the fields in different ways. In this topic, you will learn how to work with multiple constructors and define the way they interact with each other.\n\n\n# Constructor overloading\n\nYou can define as many constructors as you need. Each constructor should have a name that matches the class name but the parameters should be different. The situation when a class contains multiple constructors is known as constructor overloading.\n\nHere is an example:\n\npublic class Robot {\n    String name;\n    String model;\n\n    public Robot() {\n        this.name = "Anonymous";\n        this.model = "Unknown";\n    }\n\n    public Robot(String name, String model) {\n        this.name = name;\n        this.model = model;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\nThe class Robot has two constructors:\n\n * Robot() is a no-argument constructor that initializes fields with default values;\n * Robot(String name, String model) takes two parameters and assigns them to the corresponding fields.\n\nTo create an instance of the class Robot we can use either of the two constructors:\n\nRobot anonymous = new Robot(); // name is "Anonymous", model is "Unknown"\nRobot andrew = new Robot("Andrew", "NDR-114"); // name is "Andrew", model is "NDR-114"\n\n\n1\n2\n\n\n注意\n\nBear in mind that you cannot define two constructors with the same number, types, and order of the parameters!\n\n\n# Invoking constructors from other constructors\n\nWe can also invoke a constructor from another one. It allows you to initialize one part of an object by one constructor and another part by another constructor.\n\nCalling a constructor inside another one is done using this. For example:\n\nthis(); // calls a no-argument constructor\n\n\n1\n\n\nIf you called a constructor that has parameters you can pass some arguments:\n\nthis("arg1", "arg2"); // calls a constructor with two string arguments\n\n\n1\n\n\n注意\n\nRemember, the statement for invoking a constructor should be the first statement in the body of a caller constructor.\n\nHere is an extended example of the Robot class:\n\npublic class Robot {\n    String name;\n    String model;\n    int lifetime;\n\n    public Robot() {\n        this.name = "Anonymous";\n        this.model = "Unknown";\n    }\n\n    public Robot(String name, String model) {\n        this(name, model, 20);\n    }\n\n    public Robot(String name, String model, int lifetime) {\n        this.name = name;\n        this.model = model;\n        this.lifetime = lifetime;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\nNow, the class has three constructors:\n\n * Robot() is a no-argument constructor;\n * Robot(String name, String model) is a two-argument constructor that invokes another constructor;\n * Robot(String name, String model, int lifetime) is a three-argument constructor that fills all fields.\n\nThe second constructor invokes the third one and passes name, model, and lifetime = 20 to it. The third constructor, in its turn, initializes all fields of the created object.\n\nLet\'s add an output to the third constructor and see the result:\n\npublic Robot(String name, String model, int lifetime) {\n    this.name = name;\n    this.model = model;\n    this.lifetime = lifetime;\n    System.out.println("The third constructor is invoked");\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\nLet\'s now create an instance using the two-argument constructor.\n\nRobot andrew = new Robot("Andrew", "NDR-114");\n\n\n1\n\n\nThe program outputs:\n\nThe third constructor is invoked\n\n\n1\n\n\n\n# Conclusion\n\nIn this topic, we\'ve covered constructor overloading — creating multiple constructors for the class. Constructor overloading allows us to create an object of the class in different ways depending on the circumstances.\n\nWe can also invoke constructors inside other constructors. All in all, Java provides many useful features for writing constructors and defining interactions between them.',normalizedContent:'sometimes we need to initialize all fields of an object when creating it, but there are cases in which it might be appropriate to initialize only one or several fields. fortunately, for this purpose, a class can have several constructors that assign values to the fields in different ways. in this topic, you will learn how to work with multiple constructors and define the way they interact with each other.\n\n\n# constructor overloading\n\nyou can define as many constructors as you need. each constructor should have a name that matches the class name but the parameters should be different. the situation when a class contains multiple constructors is known as constructor overloading.\n\nhere is an example:\n\npublic class robot {\n    string name;\n    string model;\n\n    public robot() {\n        this.name = "anonymous";\n        this.model = "unknown";\n    }\n\n    public robot(string name, string model) {\n        this.name = name;\n        this.model = model;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\nthe class robot has two constructors:\n\n * robot() is a no-argument constructor that initializes fields with default values;\n * robot(string name, string model) takes two parameters and assigns them to the corresponding fields.\n\nto create an instance of the class robot we can use either of the two constructors:\n\nrobot anonymous = new robot(); // name is "anonymous", model is "unknown"\nrobot andrew = new robot("andrew", "ndr-114"); // name is "andrew", model is "ndr-114"\n\n\n1\n2\n\n\n注意\n\nbear in mind that you cannot define two constructors with the same number, types, and order of the parameters!\n\n\n# invoking constructors from other constructors\n\nwe can also invoke a constructor from another one. it allows you to initialize one part of an object by one constructor and another part by another constructor.\n\ncalling a constructor inside another one is done using this. for example:\n\nthis(); // calls a no-argument constructor\n\n\n1\n\n\nif you called a constructor that has parameters you can pass some arguments:\n\nthis("arg1", "arg2"); // calls a constructor with two string arguments\n\n\n1\n\n\n注意\n\nremember, the statement for invoking a constructor should be the first statement in the body of a caller constructor.\n\nhere is an extended example of the robot class:\n\npublic class robot {\n    string name;\n    string model;\n    int lifetime;\n\n    public robot() {\n        this.name = "anonymous";\n        this.model = "unknown";\n    }\n\n    public robot(string name, string model) {\n        this(name, model, 20);\n    }\n\n    public robot(string name, string model, int lifetime) {\n        this.name = name;\n        this.model = model;\n        this.lifetime = lifetime;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\nnow, the class has three constructors:\n\n * robot() is a no-argument constructor;\n * robot(string name, string model) is a two-argument constructor that invokes another constructor;\n * robot(string name, string model, int lifetime) is a three-argument constructor that fills all fields.\n\nthe second constructor invokes the third one and passes name, model, and lifetime = 20 to it. the third constructor, in its turn, initializes all fields of the created object.\n\nlet\'s add an output to the third constructor and see the result:\n\npublic robot(string name, string model, int lifetime) {\n    this.name = name;\n    this.model = model;\n    this.lifetime = lifetime;\n    system.out.println("the third constructor is invoked");\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\nlet\'s now create an instance using the two-argument constructor.\n\nrobot andrew = new robot("andrew", "ndr-114");\n\n\n1\n\n\nthe program outputs:\n\nthe third constructor is invoked\n\n\n1\n\n\n\n# conclusion\n\nin this topic, we\'ve covered constructor overloading — creating multiple constructors for the class. constructor overloading allows us to create an object of the class in different ways depending on the circumstances.\n\nwe can also invoke constructors inside other constructors. all in all, java provides many useful features for writing constructors and defining interactions between them.',charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：The keyword super",frontmatter:{title:"Theory：The keyword super",date:"2022-05-18T17:44:27.000Z",permalink:"/pages/aac9a9/",tags:["Java","OOP"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/02.Java%20OOP/45.Theory%EF%BC%9AThe%20keyword%20super.html",relativePath:"01.Java/01.Hyperskill - Java/02.Java OOP/45.Theory：The keyword super.md",key:"v-b65c8756",path:"/pages/aac9a9/",headers:[{level:2,title:"Accessing superclass fields and methods",slug:"accessing-superclass-fields-and-methods",normalizedTitle:"accessing superclass fields and methods",charIndex:414},{level:2,title:"Invoking superclass constructor",slug:"invoking-superclass-constructor",normalizedTitle:"invoking superclass constructor",charIndex:2287}],headersStr:"Accessing superclass fields and methods Invoking superclass constructor",content:"Sometimes when we define a new subclass we need to access members or constructors of its superclass. Java provides a special keyword super to do this. This keyword can be used in several cases:\n\n * to access instance fields of the parent class;\n * to invoke methods of the parent class;\n * to invoke constructors of the parent class (no-arg or parameterized).\n\nLet's consider all of these cases with examples.\n\n\n# Accessing superclass fields and methods\n\nThe keyword super can be used to access instance methods or fields of the superclass. In a sense, it is similar to the keyword this, but it refers to the immediate parent class object.\n\nThe keyword super is optional if members of a subclass have different names from members of the superclass. Otherwise, using super is the right way to access hidden (with the same name) members of the base class.\n\nExample. There are two classes: SuperClass and SubClass. Each class has a field and a method.\n\nclass SuperClass {\n    \n    protected int field;\n\n    protected int getField() {\n        return field;\n    }\n    \n    protected void printBaseValue() {\n        System.out.println(field);\n    }\n}\n\nclass SubClass extends SuperClass {\n    \n    protected int field;\n\n    public SubClass() {\n        this.field = 30;  // It initializes the field of SubClass\n        field = 30;       // It also initializes the field of SubClass\n        super.field = 20; // It initializes the field of SuperClass\n    }\n\n    /**     \n     * It prints the value of SuperClass and then the value of SubClass\n     */\n    public void printSubValue() {\n        super.printBaseValue(); // It invokes the method of SuperClass, super is optional here\n        System.out.println(field);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n\n\nIn the constructor of SubClass , the superclass field is initialized using the keyword super. We need to use the keyword here because the subclass field hides the base class field with the same name.\n\nIn the body of the method printSubValue , the superclass method printBaseValue is invoked. Here, the keyword super is optional. It is required when a subclass method has the same name as a method in the base class. This case will be considered in the topic concerning overriding.\n\n\n# Invoking superclass constructor\n\nConstructors are not inherited by subclasses, but a superclass constructor can be invoked from a subclass using the keyword super with parentheses. We can also pass some arguments to the superclass constructor.\n\n注意\n\nTwo important points:\n\n * invoking super(...) must be the first statement in a subclass constructor, otherwise, the code cannot be compiled;\n * the default constructor of a subclass automatically calls the no-argument constructor of the superclass.\n\nExample. Here are two classes Person and Employee. The second class extends the first one. Each class has a constructor to initialize fields.\n\nclass Person {\n\n    protected String name;\n    protected int yearOfBirth;\n    protected String address;\n\n    public Person(String name, int yearOfBirth, String address) {\n        this.name = name;\n        this.yearOfBirth = yearOfBirth;\n        this.address = address;\n    }\n\n    // getters and setters\n}\n\nclass Employee extends Person {\n\n    protected Date startDate;\n    protected Long salary;\n\n    public Employee(String name, int yearOfBirth, String address, Date startDate, Long salary) {\n        super(name, yearOfBirth, address); // invoking a constructor of the superclass\n        \n        this.startDate = startDate;\n        this.salary = salary;\n    }\n\n    // getters and setters\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n\nIn the provided example, the constructor of the class Employee invokes the parent class constructor for assigning values to the passed fields. In a way, it resembles working with multiple constructors using this().",normalizedContent:"sometimes when we define a new subclass we need to access members or constructors of its superclass. java provides a special keyword super to do this. this keyword can be used in several cases:\n\n * to access instance fields of the parent class;\n * to invoke methods of the parent class;\n * to invoke constructors of the parent class (no-arg or parameterized).\n\nlet's consider all of these cases with examples.\n\n\n# accessing superclass fields and methods\n\nthe keyword super can be used to access instance methods or fields of the superclass. in a sense, it is similar to the keyword this, but it refers to the immediate parent class object.\n\nthe keyword super is optional if members of a subclass have different names from members of the superclass. otherwise, using super is the right way to access hidden (with the same name) members of the base class.\n\nexample. there are two classes: superclass and subclass. each class has a field and a method.\n\nclass superclass {\n    \n    protected int field;\n\n    protected int getfield() {\n        return field;\n    }\n    \n    protected void printbasevalue() {\n        system.out.println(field);\n    }\n}\n\nclass subclass extends superclass {\n    \n    protected int field;\n\n    public subclass() {\n        this.field = 30;  // it initializes the field of subclass\n        field = 30;       // it also initializes the field of subclass\n        super.field = 20; // it initializes the field of superclass\n    }\n\n    /**     \n     * it prints the value of superclass and then the value of subclass\n     */\n    public void printsubvalue() {\n        super.printbasevalue(); // it invokes the method of superclass, super is optional here\n        system.out.println(field);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n\n\nin the constructor of subclass , the superclass field is initialized using the keyword super. we need to use the keyword here because the subclass field hides the base class field with the same name.\n\nin the body of the method printsubvalue , the superclass method printbasevalue is invoked. here, the keyword super is optional. it is required when a subclass method has the same name as a method in the base class. this case will be considered in the topic concerning overriding.\n\n\n# invoking superclass constructor\n\nconstructors are not inherited by subclasses, but a superclass constructor can be invoked from a subclass using the keyword super with parentheses. we can also pass some arguments to the superclass constructor.\n\n注意\n\ntwo important points:\n\n * invoking super(...) must be the first statement in a subclass constructor, otherwise, the code cannot be compiled;\n * the default constructor of a subclass automatically calls the no-argument constructor of the superclass.\n\nexample. here are two classes person and employee. the second class extends the first one. each class has a constructor to initialize fields.\n\nclass person {\n\n    protected string name;\n    protected int yearofbirth;\n    protected string address;\n\n    public person(string name, int yearofbirth, string address) {\n        this.name = name;\n        this.yearofbirth = yearofbirth;\n        this.address = address;\n    }\n\n    // getters and setters\n}\n\nclass employee extends person {\n\n    protected date startdate;\n    protected long salary;\n\n    public employee(string name, int yearofbirth, string address, date startdate, long salary) {\n        super(name, yearofbirth, address); // invoking a constructor of the superclass\n        \n        this.startdate = startdate;\n        this.salary = salary;\n    }\n\n    // getters and setters\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n\nin the provided example, the constructor of the class employee invokes the parent class constructor for assigning values to the passed fields. in a way, it resembles working with multiple constructors using this().",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：Objects",frontmatter:{title:"Theory：Objects",date:"2022-05-14T17:41:24.000Z",permalink:"/pages/a7716b/",tags:["Java","OOP"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/02.Java%20OOP/42.Theory%EF%BC%9AObjects.html",relativePath:"01.Java/01.Hyperskill - Java/02.Java OOP/42.Theory：Objects.md",key:"v-899877ea",path:"/pages/a7716b/",headers:[{level:2,title:"Creating objects",slug:"creating-objects",normalizedTitle:"creating objects",charIndex:578},{level:2,title:"Immutability of objects",slug:"immutability-of-objects",normalizedTitle:"immutability of objects",charIndex:1346},{level:2,title:"Sharing references",slug:"sharing-references",normalizedTitle:"sharing references",charIndex:2082},{level:2,title:"Nullability",slug:"nullability",normalizedTitle:"nullability",charIndex:2655},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:2894}],headersStr:"Creating objects Immutability of objects Sharing references Nullability Conclusion",content:'A typical object-oriented program consists of a set of interacting objects. Each object has its own state separated from others. Each object is an instance of a particular class (type) that defines common properties and possible behavior for its objects.\n\nAll classes from the standard library (String, Date) and classes defined by programmers are reference types which means that variables of these types store addresses where the actual objects are located. In this regard, the comparison and assignment operations work with objects differently than with primitive types.\n\n\n# Creating objects\n\nThe keyword new creates an object of a particular class. Here we create a standard string and assign it to the variable str:\n\nString str = new String("hello");\n\n\n1\n\n\nThe variable str stores a reference to the object "hello" located somewhere in the heap memory.\n\nIn the same way, we can create an object of any class we know.\n\nHere is a class that describes a patient in a hospital information system:\n\nclass Patient {\n    String name;\n    int age;\n}\n\n\n1\n2\n3\n4\n\n\nHere is an instance of this class:\n\nPatient patient = new Patient();\n\n\n1\n\n\nDespite the fact that String is a standard class and Patient is our own class, both classes are regular reference types. However, there is a big difference between those classes and we will discuss it below.\n\n\n# Immutability of objects\n\nThere is an important concept in programming called immutability. Immutability means that an object always stores the same values. If we need to modify these values, we should create a new object. The common example is the standard String class. Strings are immutable objects so all string operations produce a new string. Immutable types allow you to write programs with fewer errors.\n\nThe class Patient is not immutable because it is possible to change any field of an object.\n\nPatient patient = new Patient();\n\npatient.name = "Mary";\npatient.name = "Alice";\n\n\n1\n2\n3\n4\n\n\nIn the following topics, we will look at the existing immutable classes as well as learn how to create new ones and when to use them.\n\n\n# Sharing references\n\nMore than one variable can refer to the same object.\n\nPatient patient = new Patient();\n\npatient.name = "Mary";\npatient.age = 24;\n\nSystem.out.println(patient.name + " " + patient.age); // Mary 24\n\nPatient p = patient;\n\nSystem.out.println(p.name + " " + p.age); // Mary 24\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nIt is important to understand that two variables refer to the same data in memory rather than two independent copies. Since our class is mutable, we can modify the object using both references.\n\npatient.age = 25;\nSystem.out.println(p.age); // 25\n\n\n1\n2\n\n\n\n# Nullability\n\nAs for any reference types, a variable of class type can be null which means it is not initialized yet.\n\nPatient patient = null;\n\n\n1\n\n\nThis is a common feature in Java available for classes since they are reference types.\n\n\n# Conclusion\n\nBy now, not only have we already worked with some classes from the standard library but also learned how Java allows us to create our own classes. In this topic, we\'ve discussed that the nature of custom classes\' objects and standard library ones are based on the same principles.\n\nKeep in mind, that classes defined by programmers are reference types. When objects are created by the new operator it returns reference in memory where the created objects are located. By this reference, we can get access to its fields and change them. Several variables can refer to the same object through a reference. It is also possible to create two independent objects with the same field\'s content. It\'s important to understand that references to such objects are different. However, not all objects allow changing its state after creation. Such a feature is called immutability.',normalizedContent:'a typical object-oriented program consists of a set of interacting objects. each object has its own state separated from others. each object is an instance of a particular class (type) that defines common properties and possible behavior for its objects.\n\nall classes from the standard library (string, date) and classes defined by programmers are reference types which means that variables of these types store addresses where the actual objects are located. in this regard, the comparison and assignment operations work with objects differently than with primitive types.\n\n\n# creating objects\n\nthe keyword new creates an object of a particular class. here we create a standard string and assign it to the variable str:\n\nstring str = new string("hello");\n\n\n1\n\n\nthe variable str stores a reference to the object "hello" located somewhere in the heap memory.\n\nin the same way, we can create an object of any class we know.\n\nhere is a class that describes a patient in a hospital information system:\n\nclass patient {\n    string name;\n    int age;\n}\n\n\n1\n2\n3\n4\n\n\nhere is an instance of this class:\n\npatient patient = new patient();\n\n\n1\n\n\ndespite the fact that string is a standard class and patient is our own class, both classes are regular reference types. however, there is a big difference between those classes and we will discuss it below.\n\n\n# immutability of objects\n\nthere is an important concept in programming called immutability. immutability means that an object always stores the same values. if we need to modify these values, we should create a new object. the common example is the standard string class. strings are immutable objects so all string operations produce a new string. immutable types allow you to write programs with fewer errors.\n\nthe class patient is not immutable because it is possible to change any field of an object.\n\npatient patient = new patient();\n\npatient.name = "mary";\npatient.name = "alice";\n\n\n1\n2\n3\n4\n\n\nin the following topics, we will look at the existing immutable classes as well as learn how to create new ones and when to use them.\n\n\n# sharing references\n\nmore than one variable can refer to the same object.\n\npatient patient = new patient();\n\npatient.name = "mary";\npatient.age = 24;\n\nsystem.out.println(patient.name + " " + patient.age); // mary 24\n\npatient p = patient;\n\nsystem.out.println(p.name + " " + p.age); // mary 24\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nit is important to understand that two variables refer to the same data in memory rather than two independent copies. since our class is mutable, we can modify the object using both references.\n\npatient.age = 25;\nsystem.out.println(p.age); // 25\n\n\n1\n2\n\n\n\n# nullability\n\nas for any reference types, a variable of class type can be null which means it is not initialized yet.\n\npatient patient = null;\n\n\n1\n\n\nthis is a common feature in java available for classes since they are reference types.\n\n\n# conclusion\n\nby now, not only have we already worked with some classes from the standard library but also learned how java allows us to create our own classes. in this topic, we\'ve discussed that the nature of custom classes\' objects and standard library ones are based on the same principles.\n\nkeep in mind, that classes defined by programmers are reference types. when objects are created by the new operator it returns reference in memory where the created objects are located. by this reference, we can get access to its fields and change them. several variables can refer to the same object through a reference. it is also possible to create two independent objects with the same field\'s content. it\'s important to understand that references to such objects are different. however, not all objects allow changing its state after creation. such a feature is called immutability.',charsets:{},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：Static members",frontmatter:{title:"Theory：Static members",date:"2022-06-21T20:59:49.000Z",permalink:"/pages/2f6bd1/",tags:["Java","OOP"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/02.Java%20OOP/46.Theory%EF%BC%9AStatic%20members.html",relativePath:"01.Java/01.Hyperskill - Java/02.Java OOP/46.Theory：Static members.md",key:"v-2698ee46",path:"/pages/2f6bd1/",headers:[{level:2,title:"Class variables",slug:"class-variables",normalizedTitle:"class variables",charIndex:488},{level:2,title:"Class constants",slug:"class-constants",normalizedTitle:"class constants",charIndex:2817},{level:2,title:"Class methods",slug:"class-methods",normalizedTitle:"class methods",charIndex:4036},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:7019}],headersStr:"Class variables Class constants Class methods Conclusion",content:"All objects of a class have the same fields and methods, but the values of object fields are usually different. At the same time, a class may also have fields and methods which are common for all objects. Such fields and methods are known as static members, which are declared with the static keyword.\n\nIn this topic, you will learn how to use static class members. As a bonus, you will finally understand the part that the static keyword plays in the declaration of the main method.\n\n\n# Class variables\n\nA class variable (static field) is a field declared with the static keyword. It can have any primitive or reference type, just like a regular instance field. A static field has the same value for all instances of the class. It belongs to the class, rather than to an instance of the class.\n\nIf we want all instances of a class to share a common value, for example, a global variable, it's better to declare it as static. This can save us some memory because a single copy of a static variable is shared by all created objects.\n\nStatic variables can be accessed directly by the class name. To access a static field, you should write\n\nClassName.fieldName;\n\n\n1\n\n\nLet's look at an example. Here is a class with two public static variables:\n\nclass SomeClass {\n\n    public static String staticStringField;\n\n    public static int staticIntField;\n} \n\n\n1\n2\n3\n4\n5\n6\n\n\nWe can set their values and get them:\n\nSomeClass.staticIntField = 10;\nSomeClass.staticStringField = \"it's a static member\";\n\nSystem.out.println(SomeClass.staticIntField); // It prints \"10\"\nSystem.out.println(SomeClass.staticStringField); // It prints \"it's a static member\"\n\n\n1\n2\n3\n4\n5\n\n\nGenerally, it's not a good idea to declare non-final public static fields, here we just used them as an example.\n\nWe can also access the value of a static field through an instance of the class.\n\nSomeClass.staticIntField = 30;\n\nSomeClass instance = new SomeClass();\n\nSystem.out.println(instance.staticIntField); // It prints \"30\"\n\n\n1\n2\n3\n4\n5\n\n\nLet's see a more complex example. Here is a class with a static field named lastCreated. The field stores the date of the last created instance.\n\npublic class SomeClass {\n\n    public static Date lastCreated;\n\n    public SomeClass() {\n        lastCreated = new Date();\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nThe value of the static field is changed in the class constructor every time a new object is created.\n\nThe code below creates two instances and outputs intermediate results:\n\nSystem.out.println(SomeClass.lastCreated);\n\nSomeClass instance1 = new SomeClass();\nSystem.out.println(SomeClass.lastCreated);\n\nSomeClass instance2 = new SomeClass();\nSystem.out.println(SomeClass.lastCreated); \n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nIn my case, the results were the following:\n\nnull\nSun Aug 20 17:49:24 YEKT 2017\nSun Aug 20 17:49:25 YEKT 2017\n\n\n1\n2\n3\n\n\n\n# Class constants\n\nStatic fields with the final keyword are class constants, which means they cannot be changed. According to the naming convention, constant fields should always be written in uppercase with an underscore (_) to separate parts of the name.\n\nThe standard class Math , for example, contains two static constants:\n\npublic static final double E = 2.7182818284590452354;\n\npublic static final double PI = 3.14159265358979323846;\n\n\n1\n2\n3\n\n\nConstants are often public, but it's not a rule.\n\nTo see how they work in an example, let's declare a class named Physics with two static constants:\n\nclass Physics {\n\n    /**\n     * The speed of light in a vacuum (m/s)\n     */\n    public static final long SPEED_OF_LIGHT = 299_792_458;\n\n    /**\n     * Electron mass (kg)\n     */\n    public static final double ELECTRON_MASS = 9.10938356e-31;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nTo use the constants, let's write the following code:\n\nSystem.out.println(Physics.ELECTRON_MASS); // 9.10938356E-31\nSystem.out.println(Physics.SPEED_OF_LIGHT); // 299792458\n\n\n1\n2\n\n\nSince those fields are constants, we cannot change their values. If we try to do it, we'll get an error:\n\nPhysics.ELECTRON_MASS = 10; // compile-time error\n\n\n1\n\n\n\n# Class methods\n\nA class may have static methods as well as static fields. Such methods are also known as class methods. A static method can be accessed by the class name and doesn't require an object of the class.\n\nStatic methods can be called directly with the class name. To access a method, you should write\n\nClassName.staticMethodName(args);\n\n\n1\n\n\nA static method may have arguments like a regular instance method or it may well have no arguments. But, unlike instance methods, static methods have several special features:\n\n * a static method can access only static fields and cannot access non-static fields;\n * a static method can invoke another static method, but it cannot invoke an instance method;\n * a static method cannot refer to this keyword because there is no instance in the static context.\n\nInstance methods, however, can access static fields and methods.\n\nStatic methods are often used as utility methods that are the same for the whole project. As an example, you can create a class with only static methods for performing typical math operations.\n\nThe Java class library provides a lot of static methods for different classes. Here are just a few of them:\n\n * the Math class has a lot of static methods, such as Math.min(a, b), Math.abs(val), Math.pow(x, y) and so on;\n * the Arrays class has a lot of static methods for processing arrays such as toString(...);\n * Long.valueOf(...), Integer.parseInt(...), String.valueOf(...) are static methods too.\n\nHere is a class with one constructor, a static method and an instance method.\n\npublic class SomeClass {\n    \n    public SomeClass() {\n        invokeAnInstanceMethod(); // this is possible here\n        invokeAStaticMethod();    // this is possible here too\n    }\n    \n    public static void invokeAStaticMethod() { \n        // it's impossible to invoke invokeAnInstanceMethod() here\n    }\n    \n    public void invokeAnInstanceMethod() { \n        invokeAStaticMethod();  // this is possible too\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\nThis example shows that you can invoke a static method from the instance context (constructors and instance methods), but you can't invoke an instance method from a static context.\n\nThe only way to call an instance method from a static one is to provide a reference to this instance as an argument. You can also create objects of other classes and call their methods in a similar way. Here's an example:\n\npublic static void invokeAStaticMethod(SomeClass someClassInstance) {\n\n    // calling instance method from static context by passing instance as an argument\n    someClassInstance.invokeAnInstanceMethod(); \n\n    // calling instance and static methods of AnotherClass instance\n    AnotherClass anotherClassInstance = new AnotherClass();\n    anotherClassInstance.invokeAnotherClassInstanceMethod();\n    anotherClassInstance.invokeAnotherClassStaticMethod();\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nAn example of a static method is the main method. It always should be static.\n\n\n# Conclusion\n\nIn this lesson, we discussed static fields and methods and some situations where we can use them. It is important to remember that static members cannot access the values of object fields since there is no instance context (this). Nonetheless, they are a good option for providing a set of common constants (together with final) and utility methods for the whole project. We will consider other helpful ways of using static members in the next topics.",normalizedContent:"all objects of a class have the same fields and methods, but the values of object fields are usually different. at the same time, a class may also have fields and methods which are common for all objects. such fields and methods are known as static members, which are declared with the static keyword.\n\nin this topic, you will learn how to use static class members. as a bonus, you will finally understand the part that the static keyword plays in the declaration of the main method.\n\n\n# class variables\n\na class variable (static field) is a field declared with the static keyword. it can have any primitive or reference type, just like a regular instance field. a static field has the same value for all instances of the class. it belongs to the class, rather than to an instance of the class.\n\nif we want all instances of a class to share a common value, for example, a global variable, it's better to declare it as static. this can save us some memory because a single copy of a static variable is shared by all created objects.\n\nstatic variables can be accessed directly by the class name. to access a static field, you should write\n\nclassname.fieldname;\n\n\n1\n\n\nlet's look at an example. here is a class with two public static variables:\n\nclass someclass {\n\n    public static string staticstringfield;\n\n    public static int staticintfield;\n} \n\n\n1\n2\n3\n4\n5\n6\n\n\nwe can set their values and get them:\n\nsomeclass.staticintfield = 10;\nsomeclass.staticstringfield = \"it's a static member\";\n\nsystem.out.println(someclass.staticintfield); // it prints \"10\"\nsystem.out.println(someclass.staticstringfield); // it prints \"it's a static member\"\n\n\n1\n2\n3\n4\n5\n\n\ngenerally, it's not a good idea to declare non-final public static fields, here we just used them as an example.\n\nwe can also access the value of a static field through an instance of the class.\n\nsomeclass.staticintfield = 30;\n\nsomeclass instance = new someclass();\n\nsystem.out.println(instance.staticintfield); // it prints \"30\"\n\n\n1\n2\n3\n4\n5\n\n\nlet's see a more complex example. here is a class with a static field named lastcreated. the field stores the date of the last created instance.\n\npublic class someclass {\n\n    public static date lastcreated;\n\n    public someclass() {\n        lastcreated = new date();\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nthe value of the static field is changed in the class constructor every time a new object is created.\n\nthe code below creates two instances and outputs intermediate results:\n\nsystem.out.println(someclass.lastcreated);\n\nsomeclass instance1 = new someclass();\nsystem.out.println(someclass.lastcreated);\n\nsomeclass instance2 = new someclass();\nsystem.out.println(someclass.lastcreated); \n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nin my case, the results were the following:\n\nnull\nsun aug 20 17:49:24 yekt 2017\nsun aug 20 17:49:25 yekt 2017\n\n\n1\n2\n3\n\n\n\n# class constants\n\nstatic fields with the final keyword are class constants, which means they cannot be changed. according to the naming convention, constant fields should always be written in uppercase with an underscore (_) to separate parts of the name.\n\nthe standard class math , for example, contains two static constants:\n\npublic static final double e = 2.7182818284590452354;\n\npublic static final double pi = 3.14159265358979323846;\n\n\n1\n2\n3\n\n\nconstants are often public, but it's not a rule.\n\nto see how they work in an example, let's declare a class named physics with two static constants:\n\nclass physics {\n\n    /**\n     * the speed of light in a vacuum (m/s)\n     */\n    public static final long speed_of_light = 299_792_458;\n\n    /**\n     * electron mass (kg)\n     */\n    public static final double electron_mass = 9.10938356e-31;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nto use the constants, let's write the following code:\n\nsystem.out.println(physics.electron_mass); // 9.10938356e-31\nsystem.out.println(physics.speed_of_light); // 299792458\n\n\n1\n2\n\n\nsince those fields are constants, we cannot change their values. if we try to do it, we'll get an error:\n\nphysics.electron_mass = 10; // compile-time error\n\n\n1\n\n\n\n# class methods\n\na class may have static methods as well as static fields. such methods are also known as class methods. a static method can be accessed by the class name and doesn't require an object of the class.\n\nstatic methods can be called directly with the class name. to access a method, you should write\n\nclassname.staticmethodname(args);\n\n\n1\n\n\na static method may have arguments like a regular instance method or it may well have no arguments. but, unlike instance methods, static methods have several special features:\n\n * a static method can access only static fields and cannot access non-static fields;\n * a static method can invoke another static method, but it cannot invoke an instance method;\n * a static method cannot refer to this keyword because there is no instance in the static context.\n\ninstance methods, however, can access static fields and methods.\n\nstatic methods are often used as utility methods that are the same for the whole project. as an example, you can create a class with only static methods for performing typical math operations.\n\nthe java class library provides a lot of static methods for different classes. here are just a few of them:\n\n * the math class has a lot of static methods, such as math.min(a, b), math.abs(val), math.pow(x, y) and so on;\n * the arrays class has a lot of static methods for processing arrays such as tostring(...);\n * long.valueof(...), integer.parseint(...), string.valueof(...) are static methods too.\n\nhere is a class with one constructor, a static method and an instance method.\n\npublic class someclass {\n    \n    public someclass() {\n        invokeaninstancemethod(); // this is possible here\n        invokeastaticmethod();    // this is possible here too\n    }\n    \n    public static void invokeastaticmethod() { \n        // it's impossible to invoke invokeaninstancemethod() here\n    }\n    \n    public void invokeaninstancemethod() { \n        invokeastaticmethod();  // this is possible too\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\nthis example shows that you can invoke a static method from the instance context (constructors and instance methods), but you can't invoke an instance method from a static context.\n\nthe only way to call an instance method from a static one is to provide a reference to this instance as an argument. you can also create objects of other classes and call their methods in a similar way. here's an example:\n\npublic static void invokeastaticmethod(someclass someclassinstance) {\n\n    // calling instance method from static context by passing instance as an argument\n    someclassinstance.invokeaninstancemethod(); \n\n    // calling instance and static methods of anotherclass instance\n    anotherclass anotherclassinstance = new anotherclass();\n    anotherclassinstance.invokeanotherclassinstancemethod();\n    anotherclassinstance.invokeanotherclassstaticmethod();\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nan example of a static method is the main method. it always should be static.\n\n\n# conclusion\n\nin this lesson, we discussed static fields and methods and some situations where we can use them. it is important to remember that static members cannot access the values of object fields since there is no instance context (this). nonetheless, they are a good option for providing a set of common constants (together with final) and utility methods for the whole project. we will consider other helpful ways of using static members in the next topics.",charsets:{},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：Hiding and overriding",frontmatter:{title:"Theory：Hiding and overriding",date:"2022-06-22T17:41:39.000Z",permalink:"/pages/2e30c6/",tags:["Java","OOP"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/02.Java%20OOP/48.Theory%EF%BC%9AHiding%20and%20overriding.html",relativePath:"01.Java/01.Hyperskill - Java/02.Java OOP/48.Theory：Hiding and overriding.md",key:"v-ba2ec8da",path:"/pages/2e30c6/",headers:[{level:2,title:"Overriding instance methods",slug:"overriding-instance-methods",normalizedTitle:"overriding instance methods",charIndex:2},{level:2,title:"Rules for overriding methods",slug:"rules-for-overriding-methods",normalizedTitle:"rules for overriding methods",charIndex:1872},{level:2,title:"Forbidding overriding",slug:"forbidding-overriding",normalizedTitle:"forbidding overriding",charIndex:2901},{level:2,title:"Overriding and overloading methods together",slug:"overriding-and-overloading-methods-together",normalizedTitle:"overriding and overloading methods together",charIndex:3161},{level:2,title:"Hiding static methods",slug:"hiding-static-methods",normalizedTitle:"hiding static methods",charIndex:4539}],headersStr:"Overriding instance methods Rules for overriding methods Forbidding overriding Overriding and overloading methods together Hiding static methods",content:'# Overriding instance methods\n\nJava provides an opportunity to declare a method in a subclass with the same name as a method in the superclass. This is known as method overriding. The benefit of overriding is that a subclass can give its own specific implementation of a superclass method.\n\nOverriding methods in subclasses allows a class to inherit from a superclass whose behavior is "close enough" and then to change this behavior as the subclass needs.\n\nInstance methods can be overridden if they are inherited by the subclass. The overriding method must have the same name, parameters (number and type of parameters), and the return type (or a subclass of the type) as the overridden method.\n\nExample. Here is an example of overriding.\n\nclass Mammal {\n\n    public String sayHello() {\n        return "ohlllalalalalalaoaoaoa";\n    }\n}\n\nclass Cat extends Mammal {\n\n    @Override\n    public String sayHello() {\n        return "meow";\n    }\n}\n\nclass Human extends Mammal {\n\n    @Override\n    public String sayHello() {\n        return "hello";\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\nThe hierarchy includes three classes: Mammal, Cat and Human. The class Mammal has the method sayHello. Each subclass overrides this method. The @Override annotation indicates that the method is overridden. This annotation is optional but helpful.\n\nLet\'s create instances and invoke the method.\n\nMammal mammal = new Mammal();\nSystem.out.println(mammal.sayHello()); // it prints "ohlllalalalalalaoaoaoa"\n\nCat cat = new Cat();\nSystem.out.println(cat.sayHello()); // it prints "meow"\n\nHuman human = new Human();\nSystem.out.println(human.sayHello()); // it prints "hello"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nAs you can see, each subclass has its own implementation of the method sayHello.\n\nYou can invoke the base class method in the overridden method using the keyword super.\n\n\n# Rules for overriding methods\n\nThere are several rules for methods of subclasses which should override methods of a superclass:\n\n * the method must have the same name as in the superclass;\n * the arguments should be exactly the same as in the superclass method;\n * the return type should be the same type or a subtype of the return type declared in the method of the superclass;\n * the access level must be the same or more open than the overridden method\'s access level;\n * a private method cannot be overridden because it\'s not inherited by subclasses;\n * if the superclass and its subclass are in the same package, then package-private methods can be overridden;\n * static methods cannot be overridden.\n\nTo verify these rules, there is a special annotation @Override. It allows you to know whether a method will be actually overridden or not. If for some reason, the compiler decides that the method cannot be overridden, it will generate an error. But, remember, the annotation is not required, it\'s only for convenience.\n\n\n# Forbidding overriding\n\nIf you\'d like to forbid overriding of a method, declare it with the keyword final.\n\npublic final void method() {\n    // do something\n}\n\n\n1\n2\n3\n\n\nNow, if you try to override this method in a subclass, a compile-time error will occur.\n\n\n# Overriding and overloading methods together\n\nRecall, that overloading is a feature that allows a class to have more than one method with the same name, if their arguments are different.\n\nWe can also override and overload an instance method in a subclass at the same time. Overloaded methods do not override superclass instance methods. They are new methods, unique to the subclass.\n\nThe following example demonstrates it.\n\nclass SuperClass {\n\n    public void invokeInstanceMethod() {\n        System.out.println("SuperClass: invokeInstanceMethod");\n    }\n}\n\nclass SubClass extends SuperClass {\n\n    @Override\n    public void invokeInstanceMethod() {\n        System.out.println("SubClass: invokeInstanceMethod is overridden");\n    }\n    \n    // @Override -- method doesn\'t override anything\n    public void invokeInstanceMethod(String s) {\n        System.out.println("SubClass: overloaded invokeInstanceMethod(String)");\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\nThe following code creates an instance and calls both methods:\n\nSubClass clazz = new SubClass();\n\nclazz.invokeInstanceMethod();    // SubClass: invokeInstanceMethod() is overridden\nclazz.invokeInstanceMethod("s"); // SubClass: overloaded invokeInstanceMethod(String)\n\n\n1\n2\n3\n4\n\n\nRemember, overriding and overloading are different mechanisms but you can mix them together in one class hierarchy.\n\n\n# Hiding static methods\n\nStatic methods cannot be overridden. If a subclass has a static method with the same signature (name and parameters) as a static method in the superclass then the method in the subclass hides the one in the superclass. It\'s completely different from method overriding.\n\nYou will get a compile-time error if a subclass has a static method with the same signature as an instance method in the superclass or vice versa. But if the methods have the same name but different parameters there should be no problems.',normalizedContent:'# overriding instance methods\n\njava provides an opportunity to declare a method in a subclass with the same name as a method in the superclass. this is known as method overriding. the benefit of overriding is that a subclass can give its own specific implementation of a superclass method.\n\noverriding methods in subclasses allows a class to inherit from a superclass whose behavior is "close enough" and then to change this behavior as the subclass needs.\n\ninstance methods can be overridden if they are inherited by the subclass. the overriding method must have the same name, parameters (number and type of parameters), and the return type (or a subclass of the type) as the overridden method.\n\nexample. here is an example of overriding.\n\nclass mammal {\n\n    public string sayhello() {\n        return "ohlllalalalalalaoaoaoa";\n    }\n}\n\nclass cat extends mammal {\n\n    @override\n    public string sayhello() {\n        return "meow";\n    }\n}\n\nclass human extends mammal {\n\n    @override\n    public string sayhello() {\n        return "hello";\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\nthe hierarchy includes three classes: mammal, cat and human. the class mammal has the method sayhello. each subclass overrides this method. the @override annotation indicates that the method is overridden. this annotation is optional but helpful.\n\nlet\'s create instances and invoke the method.\n\nmammal mammal = new mammal();\nsystem.out.println(mammal.sayhello()); // it prints "ohlllalalalalalaoaoaoa"\n\ncat cat = new cat();\nsystem.out.println(cat.sayhello()); // it prints "meow"\n\nhuman human = new human();\nsystem.out.println(human.sayhello()); // it prints "hello"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nas you can see, each subclass has its own implementation of the method sayhello.\n\nyou can invoke the base class method in the overridden method using the keyword super.\n\n\n# rules for overriding methods\n\nthere are several rules for methods of subclasses which should override methods of a superclass:\n\n * the method must have the same name as in the superclass;\n * the arguments should be exactly the same as in the superclass method;\n * the return type should be the same type or a subtype of the return type declared in the method of the superclass;\n * the access level must be the same or more open than the overridden method\'s access level;\n * a private method cannot be overridden because it\'s not inherited by subclasses;\n * if the superclass and its subclass are in the same package, then package-private methods can be overridden;\n * static methods cannot be overridden.\n\nto verify these rules, there is a special annotation @override. it allows you to know whether a method will be actually overridden or not. if for some reason, the compiler decides that the method cannot be overridden, it will generate an error. but, remember, the annotation is not required, it\'s only for convenience.\n\n\n# forbidding overriding\n\nif you\'d like to forbid overriding of a method, declare it with the keyword final.\n\npublic final void method() {\n    // do something\n}\n\n\n1\n2\n3\n\n\nnow, if you try to override this method in a subclass, a compile-time error will occur.\n\n\n# overriding and overloading methods together\n\nrecall, that overloading is a feature that allows a class to have more than one method with the same name, if their arguments are different.\n\nwe can also override and overload an instance method in a subclass at the same time. overloaded methods do not override superclass instance methods. they are new methods, unique to the subclass.\n\nthe following example demonstrates it.\n\nclass superclass {\n\n    public void invokeinstancemethod() {\n        system.out.println("superclass: invokeinstancemethod");\n    }\n}\n\nclass subclass extends superclass {\n\n    @override\n    public void invokeinstancemethod() {\n        system.out.println("subclass: invokeinstancemethod is overridden");\n    }\n    \n    // @override -- method doesn\'t override anything\n    public void invokeinstancemethod(string s) {\n        system.out.println("subclass: overloaded invokeinstancemethod(string)");\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\nthe following code creates an instance and calls both methods:\n\nsubclass clazz = new subclass();\n\nclazz.invokeinstancemethod();    // subclass: invokeinstancemethod() is overridden\nclazz.invokeinstancemethod("s"); // subclass: overloaded invokeinstancemethod(string)\n\n\n1\n2\n3\n4\n\n\nremember, overriding and overloading are different mechanisms but you can mix them together in one class hierarchy.\n\n\n# hiding static methods\n\nstatic methods cannot be overridden. if a subclass has a static method with the same signature (name and parameters) as a static method in the superclass then the method in the subclass hides the one in the superclass. it\'s completely different from method overriding.\n\nyou will get a compile-time error if a subclass has a static method with the same signature as an instance method in the superclass or vice versa. but if the methods have the same name but different parameters there should be no problems.',charsets:{},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：Polymorphism",frontmatter:{title:"Theory：Polymorphism",date:"2022-06-22T17:45:52.000Z",permalink:"/pages/8cec9b/",tags:["Java","OOP"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/02.Java%20OOP/49.Theory%EF%BC%9APolymorphism.html",relativePath:"01.Java/01.Hyperskill - Java/02.Java OOP/49.Theory：Polymorphism.md",key:"v-133fb8e3",path:"/pages/8cec9b/",headers:[{level:2,title:"Kinds of polymorphism",slug:"kinds-of-polymorphism",normalizedTitle:"kinds of polymorphism",charIndex:2},{level:2,title:"Runtime polymorphic behavior",slug:"runtime-polymorphic-behavior",normalizedTitle:"runtime polymorphic behavior",charIndex:1144},{level:2,title:"Polymorphism within a class hierarchy",slug:"polymorphism-within-a-class-hierarchy",normalizedTitle:"polymorphism within a class hierarchy",charIndex:3441}],headersStr:"Kinds of polymorphism Runtime polymorphic behavior Polymorphism within a class hierarchy",content:'# Kinds of polymorphism\n\nIn general, polymorphism means that something (an object or another entity) has many forms.\n\nJava provides two types of polymorphism: static (compile-time) and dynamic (run-time) polymorphism. The first one is achieved by method overloading, the second one is based on inheritance and method overriding.\n\nThe more theoretical approach subdivides polymorphism into several fundamentally different types:\n\n * Ad-hoc polymorphism refers to polymorphic functions that can be applied to arguments of different types, but behave differently depending on the type of the argument to which they are applied. Java supports it as method overloading.\n * Subtype polymorphism (also known as subtyping) is a possibility to use an instance of a subclass when an instance of the base class is permitted.\n * Parametric polymorphism is when the code is written without mention of any specific type and thus can be used transparently with any number of new types. Java supports it as generics or generic programming.\n\nIn this topic, we consider only subtype (runtime) polymorphism that is widely used in object-oriented programming.\n\n\n# Runtime polymorphic behavior\n\nA reminder: method overriding is when a subclass redefines a method of the superclass with the same signature.\n\nRun-time polymorphism relies on two principles:\n\n * a reference variable of the superclass can refer to any subtype object;\n * a superclass method can be overridden in a subclass.\n\nRun-time polymorphism works when an overridden method is called through the reference variable of a superclass. Java determines at runtime which version of the method (superclass/subclasses) is to be executed based on the type of the object being referred, not the type of reference. It uses a mechanism known as dynamic method dispatching.\n\nExample. Here, you can see a class hierarchy. The superclass MythicalAnimal has two subclasses: Chimera and Dragon. The base class has a method hello. Both subclasses override this method.\n\nclass MythicalAnimal {    \n\n    public void hello() {\n        System.out.println("Hello, I\'m an unknown animal");\n    }\n}\n\nclass Chimera extends MythicalAnimal {\n    @Override\n    public void hello() {\n        System.out.println("Hello! Hello!");\n    }\n}\n\nclass Dragon extends MythicalAnimal {\n    @Override\n    public void hello() {\n        System.out.println("Rrrr...");\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\nWe can create a reference to the class MythicalAnimal and assign the subclass object to it:\n\nMythicalAnimal chimera = new Chimera();\nMythicalAnimal dragon = new Dragon();\nMythicalAnimal animal = new MythicalAnimal();\n\n\n1\n2\n3\n\n\nWe can also invoke overridden methods through the base class references:\n\nchimera.hello(); // Hello! Hello!\ndragon.hello(); // Rrrr...\nanimal.hello(); // Hello, I\'m an unknown animal\n\n\n1\n2\n3\n\n\nSo, the result of a method call depends on the actual type of instance, not the reference type. It\'s a polymorphic feature in Java. The JVM calls the appropriate method for the object that is referred to in each variable.\n\nSubtype polymorphism allows a class to specify methods that will be common to all of its subclasses. Subtype polymorphism also makes it possible for subclasses to override the implementations of those methods. Together with abstract methods and interfaces, which you\'ll learn about later, subtype polymorphism is a fundamental object-oriented design concept.\n\n\n# Polymorphism within a class hierarchy\n\nThe same thing works with methods that are used only within a hierarchy and are not accessible from the outside.\n\nIn the following example, we have a hierarchy of files. The parent class File represents a description of a single file in the file system. It has a subclass named ImageFile. It overrides the method getFileInfo of the parent class.\n\nclass File {\n\n    protected String fullName;\n\n    // constructor with a single parameter\n\n    // getters and setters\n\n    public void printFileInfo() {\n        String info = this.getFileInfo(); // here is polymorphic behavior!!!\n        System.out.println(info);\n    }\n\n    protected String getFileInfo() {\n        return "File: " + fullName;\n    }\n}\n\nclass ImageFile extends File {\n\n    protected int width;\n    protected int height;\n    protected byte[] content;\n\n    // constructor\n\n    // getters and setters\n\n    @Override\n    protected String getFileInfo() {\n        return String.format("Image: %s, width: %d, height: %d", fullName, width, height); \n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n\nThe parent class has a public method printFileInfo and a protected method getFileInfo. The second method is overridden in the subclass, but the subclass doesn\'t override the first method.\n\nLet\'s create an instance of ImageFile and assign it to a variable of File.\n\nFile img = new ImageFile("/path/to/file/img.png", 480, 640, someBytes); // assigning an object\n\n\n1\n\n\nNow, when we call the method printFileInfo, it invokes the overridden version of the method getFileInfo.\n\nimg.printFileInfo(); // It prints "Image: /path/to/file/img.png, width: 480, height: 640"\n\n\n1\n\n\nSo, run-time polymorphism allows you to invoke an overridden method of a subclass having a reference to the base class.',normalizedContent:'# kinds of polymorphism\n\nin general, polymorphism means that something (an object or another entity) has many forms.\n\njava provides two types of polymorphism: static (compile-time) and dynamic (run-time) polymorphism. the first one is achieved by method overloading, the second one is based on inheritance and method overriding.\n\nthe more theoretical approach subdivides polymorphism into several fundamentally different types:\n\n * ad-hoc polymorphism refers to polymorphic functions that can be applied to arguments of different types, but behave differently depending on the type of the argument to which they are applied. java supports it as method overloading.\n * subtype polymorphism (also known as subtyping) is a possibility to use an instance of a subclass when an instance of the base class is permitted.\n * parametric polymorphism is when the code is written without mention of any specific type and thus can be used transparently with any number of new types. java supports it as generics or generic programming.\n\nin this topic, we consider only subtype (runtime) polymorphism that is widely used in object-oriented programming.\n\n\n# runtime polymorphic behavior\n\na reminder: method overriding is when a subclass redefines a method of the superclass with the same signature.\n\nrun-time polymorphism relies on two principles:\n\n * a reference variable of the superclass can refer to any subtype object;\n * a superclass method can be overridden in a subclass.\n\nrun-time polymorphism works when an overridden method is called through the reference variable of a superclass. java determines at runtime which version of the method (superclass/subclasses) is to be executed based on the type of the object being referred, not the type of reference. it uses a mechanism known as dynamic method dispatching.\n\nexample. here, you can see a class hierarchy. the superclass mythicalanimal has two subclasses: chimera and dragon. the base class has a method hello. both subclasses override this method.\n\nclass mythicalanimal {    \n\n    public void hello() {\n        system.out.println("hello, i\'m an unknown animal");\n    }\n}\n\nclass chimera extends mythicalanimal {\n    @override\n    public void hello() {\n        system.out.println("hello! hello!");\n    }\n}\n\nclass dragon extends mythicalanimal {\n    @override\n    public void hello() {\n        system.out.println("rrrr...");\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\nwe can create a reference to the class mythicalanimal and assign the subclass object to it:\n\nmythicalanimal chimera = new chimera();\nmythicalanimal dragon = new dragon();\nmythicalanimal animal = new mythicalanimal();\n\n\n1\n2\n3\n\n\nwe can also invoke overridden methods through the base class references:\n\nchimera.hello(); // hello! hello!\ndragon.hello(); // rrrr...\nanimal.hello(); // hello, i\'m an unknown animal\n\n\n1\n2\n3\n\n\nso, the result of a method call depends on the actual type of instance, not the reference type. it\'s a polymorphic feature in java. the jvm calls the appropriate method for the object that is referred to in each variable.\n\nsubtype polymorphism allows a class to specify methods that will be common to all of its subclasses. subtype polymorphism also makes it possible for subclasses to override the implementations of those methods. together with abstract methods and interfaces, which you\'ll learn about later, subtype polymorphism is a fundamental object-oriented design concept.\n\n\n# polymorphism within a class hierarchy\n\nthe same thing works with methods that are used only within a hierarchy and are not accessible from the outside.\n\nin the following example, we have a hierarchy of files. the parent class file represents a description of a single file in the file system. it has a subclass named imagefile. it overrides the method getfileinfo of the parent class.\n\nclass file {\n\n    protected string fullname;\n\n    // constructor with a single parameter\n\n    // getters and setters\n\n    public void printfileinfo() {\n        string info = this.getfileinfo(); // here is polymorphic behavior!!!\n        system.out.println(info);\n    }\n\n    protected string getfileinfo() {\n        return "file: " + fullname;\n    }\n}\n\nclass imagefile extends file {\n\n    protected int width;\n    protected int height;\n    protected byte[] content;\n\n    // constructor\n\n    // getters and setters\n\n    @override\n    protected string getfileinfo() {\n        return string.format("image: %s, width: %d, height: %d", fullname, width, height); \n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n\nthe parent class has a public method printfileinfo and a protected method getfileinfo. the second method is overridden in the subclass, but the subclass doesn\'t override the first method.\n\nlet\'s create an instance of imagefile and assign it to a variable of file.\n\nfile img = new imagefile("/path/to/file/img.png", 480, 640, somebytes); // assigning an object\n\n\n1\n\n\nnow, when we call the method printfileinfo, it invokes the overridden version of the method getfileinfo.\n\nimg.printfileinfo(); // it prints "image: /path/to/file/img.png, width: 480, height: 640"\n\n\n1\n\n\nso, run-time polymorphism allows you to invoke an overridden method of a subclass having a reference to the base class.',charsets:{},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：Abstract class",frontmatter:{title:"Theory：Abstract class",date:"2022-09-12T17:14:48.000Z",permalink:"/pages/6795a3/",tags:["Java","OOP","Abstraction"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/02.Java%20OOP/50.Theory%EF%BC%9AAbstract%20class.html",relativePath:"01.Java/01.Hyperskill - Java/02.Java OOP/50.Theory：Abstract class.md",key:"v-150807c6",path:"/pages/6795a3/",headers:[{level:2,title:"What is an abstract class?",slug:"what-is-an-abstract-class",normalizedTitle:"what is an abstract class?",charIndex:390},{level:2,title:"Example",slug:"example",normalizedTitle:"example",charIndex:1359}],headersStr:"What is an abstract class? Example",content:'Sometimes you have a set of fields and methods that you need to reuse in all classes within a hierarchy. It is possible to put all the common members to a special base class and then declare subclasses which can access these members. At the same time, you do not need to create objects of the base class. To achieve it, you can use an abstract class as the base class in the hierarchy.\n\n\n# What is an abstract class?\n\nAn abstract class is a class declared with the keyword abstract. It represents an abstract concept that is used as a base class for subclasses.\n\nAbstract classes have some special features:\n\n * it\'s impossible to create an instance of an abstract class;\n * an abstract class can contain abstract methods that must be implemented in non-abstract subclasses;\n * it can contain fields and non-abstract methods (including static);\n * an abstract class can extend another class, including abstract;\n * it can contain a constructor.\n\nAs you can see, an abstract class has two main differences from regular (concrete) classes: no instances and abstract methods.\n\n注意\n\nAbstract methods are declared by adding the keyword abstract. They have a declaration (modifiers, a return type, and a signature) but don\'t have an implementation. Each concrete (non-abstract) subclass must implement these methods.\n\n提示\n\nNote, static methods can\'t be abstract!\n\n\n# Example\n\nHere is an abstract class Pet:\n\npublic abstract class Pet {\n\n    protected String name;\n    protected int age;\n\n    protected Pet(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public abstract void say(); // an abstract method\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nThe class has two fields, a constructor, and an abstract method.\n\nSince Pet is an abstract class we cannot create instances of this class:\n\nPet pet = new Pet("Unnamed", 5); // this throws a compile time error\n\n\n1\n\n\nThe method say() is declared abstract because, at this level of abstraction, its implementation is unknown. Concrete subclasses of the class Pet should have an implementation of this method.\n\nBelow are two concrete subclasses of Pet. You can see that they override the abstract method:\n\nclass Cat extends Pet {\n\n    // It can have additional fields as well\n\n    public Cat(String name, int age) {\n        super(name, age);\n    }\n\n    @Override\n    public void say() {\n        System.out.println("Meow!");\n    }\n}\n\nclass Dog extends Pet {\n\n    // It can have additional fields as well\n\n    public Dog(String name, int age) {\n        super(name, age);\n    }\n\n    @Override\n    public void say() {\n        System.out.println("Woof!");\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\nWe can create instances of these classes and call the say() method.\n\nDog dog = new Dog("Boss", 5);\nCat cat = new Cat("Tiger", 2);\n        \ndog.say(); // it prints "Woof!"\ncat.say(); // it prints "Meow!"\n\n\n1\n2\n3\n4\n5\n\n\nDo not forget that Java doesn\'t support multiple inheritance for classes. Therefore, a class can extend only one abstract class.',normalizedContent:'sometimes you have a set of fields and methods that you need to reuse in all classes within a hierarchy. it is possible to put all the common members to a special base class and then declare subclasses which can access these members. at the same time, you do not need to create objects of the base class. to achieve it, you can use an abstract class as the base class in the hierarchy.\n\n\n# what is an abstract class?\n\nan abstract class is a class declared with the keyword abstract. it represents an abstract concept that is used as a base class for subclasses.\n\nabstract classes have some special features:\n\n * it\'s impossible to create an instance of an abstract class;\n * an abstract class can contain abstract methods that must be implemented in non-abstract subclasses;\n * it can contain fields and non-abstract methods (including static);\n * an abstract class can extend another class, including abstract;\n * it can contain a constructor.\n\nas you can see, an abstract class has two main differences from regular (concrete) classes: no instances and abstract methods.\n\n注意\n\nabstract methods are declared by adding the keyword abstract. they have a declaration (modifiers, a return type, and a signature) but don\'t have an implementation. each concrete (non-abstract) subclass must implement these methods.\n\n提示\n\nnote, static methods can\'t be abstract!\n\n\n# example\n\nhere is an abstract class pet:\n\npublic abstract class pet {\n\n    protected string name;\n    protected int age;\n\n    protected pet(string name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public abstract void say(); // an abstract method\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nthe class has two fields, a constructor, and an abstract method.\n\nsince pet is an abstract class we cannot create instances of this class:\n\npet pet = new pet("unnamed", 5); // this throws a compile time error\n\n\n1\n\n\nthe method say() is declared abstract because, at this level of abstraction, its implementation is unknown. concrete subclasses of the class pet should have an implementation of this method.\n\nbelow are two concrete subclasses of pet. you can see that they override the abstract method:\n\nclass cat extends pet {\n\n    // it can have additional fields as well\n\n    public cat(string name, int age) {\n        super(name, age);\n    }\n\n    @override\n    public void say() {\n        system.out.println("meow!");\n    }\n}\n\nclass dog extends pet {\n\n    // it can have additional fields as well\n\n    public dog(string name, int age) {\n        super(name, age);\n    }\n\n    @override\n    public void say() {\n        system.out.println("woof!");\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\nwe can create instances of these classes and call the say() method.\n\ndog dog = new dog("boss", 5);\ncat cat = new cat("tiger", 2);\n        \ndog.say(); // it prints "woof!"\ncat.say(); // it prints "meow!"\n\n\n1\n2\n3\n4\n5\n\n\ndo not forget that java doesn\'t support multiple inheritance for classes. therefore, a class can extend only one abstract class.',charsets:{cjk:!0},lastUpdated:"2022/10/25, 17:57:56",lastUpdatedTimestamp:1666691876e3},{title:"Theory：Abstract class vs interface",frontmatter:{title:"Theory：Abstract class vs interface",date:"2022-10-25T15:50:11.000Z",permalink:"/pages/30c559/",tags:["Java","OOP","Abstraction"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/02.Java%20OOP/51.Theory%EF%BC%9AAbstract%20class%20vs%20interface.html",relativePath:"01.Java/01.Hyperskill - Java/02.Java OOP/51.Theory：Abstract class vs interface.md",key:"v-4818b098",path:"/pages/30c559/",headers:[{level:2,title:"Differences between abstract classes and interfaces",slug:"differences-between-abstract-classes-and-interfaces",normalizedTitle:"differences between abstract classes and interfaces",charIndex:2},{level:2,title:"Using abstract classes and interfaces together",slug:"using-abstract-classes-and-interfaces-together",normalizedTitle:"using abstract classes and interfaces together",charIndex:2090}],headersStr:"Differences between abstract classes and interfaces Using abstract classes and interfaces together",content:"# Differences between abstract classes and interfaces\n\nAbstract class and interface are both tools to achieve abstraction that allow us to declare the abstract methods. We cannot create instances of abstract classes and interfaces directly, we can only do that through classes that inherit them.\n\nSince Java 8, an interface can have default and static methods that contain an implementation. It makes interface more similar to an abstract class. So, the important question is: what is the difference between interfaces and abstract classes?\n\nBelow you can see a list of some important differences between these two concepts.\n\n * an abstract class can have abstract and non-abstract instance methods while an interface can have abstract or default instance methods;\n * an abstract class can extend another abstract or regular class and an interface can only extend another interface;\n * an abstract class can extend only one class while an interface can extend any number of interfaces;\n * an abstract class can have final, non-final, static, non-static variables (regular fields) while an interface can only have static final variables;\n * an abstract class can provide an implementation of an interface but an interface cannot provide an implementation of an abstract class;\n * an abstract class can have a constructor and an interface cannot;\n * in an abstract class, the keyword abstract is mandatory to declare a method as an abstract one while in an interface this keyword is optional.\n\n提示\n\nRemember, a class extends another class, a class implements an interface, but an interface extends another interface.\n\nThe provided list of differences is by no means complete. Abstract classes and interfaces have a lot of other differences but the main one is their purpose.\n\nTypically, interfaces are used to decouple the interface of a component (class) from the implementation while abstract classes are often used as base classes with common fields to be extended by subclasses.\n\n\n\nThe typical use of abstract classes and interfaces\n\nThe picture above demonstrates the last statement.\n\n\n# Using abstract classes and interfaces together\n\nSometimes interfaces and abstract classes are used together to make a class hierarchy more flexible. In this case, an abstract class contains common members and implements one or multiple interfaces, and concrete classes extend the abstract class and possibly implement other interfaces.\n\nSee the following simple example.\n\ninterface ManagedDevice {\n\n    void on();\n\n    void off();\n}\n\nabstract class AbstractDevice implements ManagedDevice {\n\n    protected String serialNumber;\n    protected boolean on;\n    \n    public AbstractDevice(String serialNumber) {\n        this.serialNumber = serialNumber;\n    }\n\n    protected void setOn(boolean on) {\n        this.on = on;\n    }\n}\n\nclass Kettle extends AbstractDevice {\n\n    protected double volume;\n\n    public Kettle(String serialNumber, double volume) {\n        super(serialNumber);\n        this.volume = volume;\n    }\n\n    @Override\n    public void on() {\n        // do complex logic to activate all electronic components\n        setOn(true);\n    }\n\n    @Override\n    public void off() {\n        // do complex logic to stop all electronic components\n        setOn(false);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n\n\nUsing both concepts (interfaces and abstract classes) makes your code more flexible. Use suitable abstractions or their combination when designing your class hierarchies.\n\nAs an example, you may see class hierarchies in the standard Java class library. An example of that is the collections hierarchy. It combines abstract classes and interfaces to make the hierarchy more maintainable and flexible to use in your code.",normalizedContent:"# differences between abstract classes and interfaces\n\nabstract class and interface are both tools to achieve abstraction that allow us to declare the abstract methods. we cannot create instances of abstract classes and interfaces directly, we can only do that through classes that inherit them.\n\nsince java 8, an interface can have default and static methods that contain an implementation. it makes interface more similar to an abstract class. so, the important question is: what is the difference between interfaces and abstract classes?\n\nbelow you can see a list of some important differences between these two concepts.\n\n * an abstract class can have abstract and non-abstract instance methods while an interface can have abstract or default instance methods;\n * an abstract class can extend another abstract or regular class and an interface can only extend another interface;\n * an abstract class can extend only one class while an interface can extend any number of interfaces;\n * an abstract class can have final, non-final, static, non-static variables (regular fields) while an interface can only have static final variables;\n * an abstract class can provide an implementation of an interface but an interface cannot provide an implementation of an abstract class;\n * an abstract class can have a constructor and an interface cannot;\n * in an abstract class, the keyword abstract is mandatory to declare a method as an abstract one while in an interface this keyword is optional.\n\n提示\n\nremember, a class extends another class, a class implements an interface, but an interface extends another interface.\n\nthe provided list of differences is by no means complete. abstract classes and interfaces have a lot of other differences but the main one is their purpose.\n\ntypically, interfaces are used to decouple the interface of a component (class) from the implementation while abstract classes are often used as base classes with common fields to be extended by subclasses.\n\n\n\nthe typical use of abstract classes and interfaces\n\nthe picture above demonstrates the last statement.\n\n\n# using abstract classes and interfaces together\n\nsometimes interfaces and abstract classes are used together to make a class hierarchy more flexible. in this case, an abstract class contains common members and implements one or multiple interfaces, and concrete classes extend the abstract class and possibly implement other interfaces.\n\nsee the following simple example.\n\ninterface manageddevice {\n\n    void on();\n\n    void off();\n}\n\nabstract class abstractdevice implements manageddevice {\n\n    protected string serialnumber;\n    protected boolean on;\n    \n    public abstractdevice(string serialnumber) {\n        this.serialnumber = serialnumber;\n    }\n\n    protected void seton(boolean on) {\n        this.on = on;\n    }\n}\n\nclass kettle extends abstractdevice {\n\n    protected double volume;\n\n    public kettle(string serialnumber, double volume) {\n        super(serialnumber);\n        this.volume = volume;\n    }\n\n    @override\n    public void on() {\n        // do complex logic to activate all electronic components\n        seton(true);\n    }\n\n    @override\n    public void off() {\n        // do complex logic to stop all electronic components\n        seton(false);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n\n\nusing both concepts (interfaces and abstract classes) makes your code more flexible. use suitable abstractions or their combination when designing your class hierarchies.\n\nas an example, you may see class hierarchies in the standard java class library. an example of that is the collections hierarchy. it combines abstract classes and interfaces to make the hierarchy more maintainable and flexible to use in your code.",charsets:{cjk:!0},lastUpdated:"2022/10/25, 17:57:56",lastUpdatedTimestamp:1666691876e3},{title:"Theory：Anonymous classes",frontmatter:{title:"Theory：Anonymous classes",date:"2022-10-24T17:57:14.000Z",permalink:"/pages/41d175/",tags:["Java","OOP","Abstraction"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/02.Java%20OOP/52.Theory%EF%BC%9AAnonymous%20classes.html",relativePath:"01.Java/01.Hyperskill - Java/02.Java OOP/52.Theory：Anonymous classes.md",key:"v-1fb0df4e",path:"/pages/41d175/",headers:[{level:2,title:"What is an anonymous class?",slug:"what-is-an-anonymous-class",normalizedTitle:"what is an anonymous class?",charIndex:438},{level:2,title:"Writing anonymous classes",slug:"writing-anonymous-classes",normalizedTitle:"writing anonymous classes",charIndex:1225},{level:2,title:"Accessing context variables",slug:"accessing-context-variables",normalizedTitle:"accessing context variables",charIndex:2640},{level:2,title:"When to use anonymous classes",slug:"when-to-use-anonymous-classes",normalizedTitle:"when to use anonymous classes",charIndex:4293}],headersStr:"What is an anonymous class? Writing anonymous classes Accessing context variables When to use anonymous classes",content:'Sometimes developers need to use a small class that overrides some methods of another class or interface only once. In this case, declaring a new class may be superfluous. Fortunately, Java provides a mechanism for creating a class in a single statement without having to declare a new named class. Such classes are called anonymous because they don\'t have name identifiers like String or MyClass (but they do have an internal name).\n\n\n# What is an anonymous class?\n\nAnonymous classes enable you to declare and instantiate a class at the same time.\n\nAn anonymous class always implements an interface or extends another class (concrete or abstract). Here is the common syntax of creating an anonymous class:\n\nnew SuperClassOrInterfaceName() {\n\n    // fields\n\n    // overridden methods\n};\n\n\n1\n2\n3\n4\n5\n6\n\n\nThe syntax of an anonymous class is an expression. And it\'s similar to a constructor call except that there is a class definition contained in a block of code.\n\n注意\n\nAn anonymous class must override all abstract methods of the superclass. That is, all interface methods must be overridden except default methods. If an anonymous class extends a class that has no abstract methods, it doesn\'t have to override anything.\n\n\n# Writing anonymous classes\n\nLet\'s assume we have the following interface with two methods:\n\ninterface SpeakingEntity {\n\n    void sayHello();\n\n    void sayBye();\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\nHere is an anonymous class that represents an English-speaking person:\n\nSpeakingEntity englishSpeakingPerson = new SpeakingEntity() {\n            \n    @Override\n    public void sayHello() {\n        System.out.println("Hello!");\n    }\n\n    @Override\n    public void sayBye() {\n        System.out.println("Bye!");\n    }\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nThe anonymous class is declared and instantiated at the same time — as an expression. It overrides both methods of the interface.\n\nWe assign an instance of the anonymous class to the variable of the interface type. Now, we can invoke overridden methods:\n\nenglishSpeakingPerson.sayHello();\nenglishSpeakingPerson.sayBye();\n\n\n1\n2\n\n\nOf course, the result is\n\nHello!\nBye!\n\n\n1\n2\n\n\nLet\'s declare and instantiate another anonymous class:\n\nSpeakingEntity cat = new SpeakingEntity() {\n\n    @Override\n    public void sayHello() {\n        System.out.println("Meow!");\n    }\n\n    @Override\n    public void sayBye() {\n        System.out.println("Meow!");\n    }\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nWhen we invoke the same methods, we obtain the following result:\n\nMeow!\nMeow!\n\n\n1\n2\n\n\nSo, englishSpeakingPerson and cat are instances of different anonymous classes that implement the same interface.\n\n\n# Accessing context variables\n\nIn the body of an anonymous class, it is possible to capture variables from a context where it is defined:\n\n * an anonymous class can capture members of its enclosing class (the outer class);\n * an anonymous class can capture local variables that are declared as final or are effectively final (i.e. the variable is not changed but it doesn\'t have the final keyword).\n\nHere is another anonymous class that implements the SpeakingEntity interface:\n\npublic class AnonymousClassExample {\n\n    private static String BYE_STRING = "Auf Wiedersehen!"; // static constant\n\n    public static void main(String[] args) {\n\n        final String hello = "Guten Tag!"; // final local variable\n\n        SpeakingEntity germanSpeakingPerson = new SpeakingEntity() {\n\n            @Override\n            public void sayHello() {\n                System.out.println(hello); // it captures the local variable\n            }\n\n            @Override\n            public void sayBye() {\n                System.out.println(BYE_STRING); // it captures the constant field\n            }\n        };\n\n        germanSpeakingPerson.sayHello();\n\n        germanSpeakingPerson.sayBye();\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\nThe anonymous class captures the constant field BYE_STRING and the local final variable hello. This code is successfully compiled and prints what we expect:\n\nGuten Tag!\nAuf Wiedersehen!\n\n\n1\n2\n\n\nA declaration of a variable or a method in an anonymous class shadows any other declaration in the enclosing scope that has the same name. You cannot access any shadowed declarations by their names.\n\n\n# When to use anonymous classes\n\nGenerally, you should consider using an anonymous class when:\n\n * only one instance of the class is needed\n * the class has a very short body\n * the class is used right after it\'s defined\n\nIn this topic, we\'ve considered rather simple anonymous classes to understand the basic syntax, but in real-life applications, they provide a powerful mechanism for creating classes that encapsulate behaviors and pass them to suitable methods. This is a convenient way to interact with parts of our application or with some third-party libraries.\n\nAnd in the next topic about anonymous classes you will become acquainted with more difficult examples and will dive into the intricacies of anonymous classes. See you soon!',normalizedContent:'sometimes developers need to use a small class that overrides some methods of another class or interface only once. in this case, declaring a new class may be superfluous. fortunately, java provides a mechanism for creating a class in a single statement without having to declare a new named class. such classes are called anonymous because they don\'t have name identifiers like string or myclass (but they do have an internal name).\n\n\n# what is an anonymous class?\n\nanonymous classes enable you to declare and instantiate a class at the same time.\n\nan anonymous class always implements an interface or extends another class (concrete or abstract). here is the common syntax of creating an anonymous class:\n\nnew superclassorinterfacename() {\n\n    // fields\n\n    // overridden methods\n};\n\n\n1\n2\n3\n4\n5\n6\n\n\nthe syntax of an anonymous class is an expression. and it\'s similar to a constructor call except that there is a class definition contained in a block of code.\n\n注意\n\nan anonymous class must override all abstract methods of the superclass. that is, all interface methods must be overridden except default methods. if an anonymous class extends a class that has no abstract methods, it doesn\'t have to override anything.\n\n\n# writing anonymous classes\n\nlet\'s assume we have the following interface with two methods:\n\ninterface speakingentity {\n\n    void sayhello();\n\n    void saybye();\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\nhere is an anonymous class that represents an english-speaking person:\n\nspeakingentity englishspeakingperson = new speakingentity() {\n            \n    @override\n    public void sayhello() {\n        system.out.println("hello!");\n    }\n\n    @override\n    public void saybye() {\n        system.out.println("bye!");\n    }\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nthe anonymous class is declared and instantiated at the same time — as an expression. it overrides both methods of the interface.\n\nwe assign an instance of the anonymous class to the variable of the interface type. now, we can invoke overridden methods:\n\nenglishspeakingperson.sayhello();\nenglishspeakingperson.saybye();\n\n\n1\n2\n\n\nof course, the result is\n\nhello!\nbye!\n\n\n1\n2\n\n\nlet\'s declare and instantiate another anonymous class:\n\nspeakingentity cat = new speakingentity() {\n\n    @override\n    public void sayhello() {\n        system.out.println("meow!");\n    }\n\n    @override\n    public void saybye() {\n        system.out.println("meow!");\n    }\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nwhen we invoke the same methods, we obtain the following result:\n\nmeow!\nmeow!\n\n\n1\n2\n\n\nso, englishspeakingperson and cat are instances of different anonymous classes that implement the same interface.\n\n\n# accessing context variables\n\nin the body of an anonymous class, it is possible to capture variables from a context where it is defined:\n\n * an anonymous class can capture members of its enclosing class (the outer class);\n * an anonymous class can capture local variables that are declared as final or are effectively final (i.e. the variable is not changed but it doesn\'t have the final keyword).\n\nhere is another anonymous class that implements the speakingentity interface:\n\npublic class anonymousclassexample {\n\n    private static string bye_string = "auf wiedersehen!"; // static constant\n\n    public static void main(string[] args) {\n\n        final string hello = "guten tag!"; // final local variable\n\n        speakingentity germanspeakingperson = new speakingentity() {\n\n            @override\n            public void sayhello() {\n                system.out.println(hello); // it captures the local variable\n            }\n\n            @override\n            public void saybye() {\n                system.out.println(bye_string); // it captures the constant field\n            }\n        };\n\n        germanspeakingperson.sayhello();\n\n        germanspeakingperson.saybye();\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\nthe anonymous class captures the constant field bye_string and the local final variable hello. this code is successfully compiled and prints what we expect:\n\nguten tag!\nauf wiedersehen!\n\n\n1\n2\n\n\na declaration of a variable or a method in an anonymous class shadows any other declaration in the enclosing scope that has the same name. you cannot access any shadowed declarations by their names.\n\n\n# when to use anonymous classes\n\ngenerally, you should consider using an anonymous class when:\n\n * only one instance of the class is needed\n * the class has a very short body\n * the class is used right after it\'s defined\n\nin this topic, we\'ve considered rather simple anonymous classes to understand the basic syntax, but in real-life applications, they provide a powerful mechanism for creating classes that encapsulate behaviors and pass them to suitable methods. this is a convenient way to interact with parts of our application or with some third-party libraries.\n\nand in the next topic about anonymous classes you will become acquainted with more difficult examples and will dive into the intricacies of anonymous classes. see you soon!',charsets:{cjk:!0},lastUpdated:"2022/10/25, 17:57:56",lastUpdatedTimestamp:1666691876e3},{title:"Theory：Immutability",frontmatter:{title:"Theory：Immutability",date:"2022-09-25T10:56:40.000Z",permalink:"/pages/a15ec2/",tags:["Java"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/03.%E5%BA%94%E7%9F%A5/100.Theory%EF%BC%9AImmutability.html",relativePath:"01.Java/01.Hyperskill - Java/03.应知/100.Theory：Immutability.md",key:"v-49add558",path:"/pages/a15ec2/",headers:[{level:2,title:"Mutability and immutability",slug:"mutability-and-immutability",normalizedTitle:"mutability and immutability",charIndex:950},{level:2,title:"Custom objects and immutability",slug:"custom-objects-and-immutability",normalizedTitle:"custom objects and immutability",charIndex:2550},{level:2,title:"Summary",slug:"summary",normalizedTitle:"summary",charIndex:3758}],headersStr:"Mutability and immutability Custom objects and immutability Summary",content:'In philosophy, there is a thought experiment called "Ship of Theseus". It is one of the oldest concepts in Western philosophy and it goes like this.\n\nThe famous ship of the hero Theseus has been kept as a museum piece in a harbor. Over the years, the wooden parts have rotted and been replaced. A hundred years later, all of the wooden parts of the ship have been replaced. The question is: is it still the same ship?\n\n\n\nThere are many ways to answer this question and you can check them out on Wikipedia. What is of interest to us is that this question of identity can be applied to programming as well. One of the most important concepts in programming, the one directly connected to change and identity, is the concept of (im)mutability.\n\nIn this topic, you will read about the general idea of immutability, and in the following topics, you will explore the means of ensuring immutability in the programming language you have chosen to study.\n\n\n# Mutability and immutability\n\nMutability literally means "the quality of being changeable" and, in programming, it refers to the idea of changing the state of the object after it has been created.\n\nAlong this line, we can distinguish between mutable and immutable objects. To put it simply, mutable objects can be altered once they\'ve been created and immutable cannot. This is the key difference between mutable and immutable objects.\n\nWhat does this mean in practice? Immutable objects always represent the same value: if you want to have a different value, you need to create a completely new object. With mutable objects, things are much easier and we can change the values they contain without creating a new object.\n\nReturning to the ship of Theseus, if we were to consider it an immutable object, then the answer to the question of identity would be no. Once you change something, you have a different object. In other words, the ship of Theseus is no longer the ship of Theseus even though it has the same name!\n\nAlternatively, if we regard the ship as a mutable object, then, yes, it is still the same ship. The changes that we made did not affect its identity.\n\nDepending on the programming language you\'re using, different types of objects may be immutable. For instance, strings are immutable in Python and Java, but Java also has StringBuilder and StringBuffer classes which are mutable. In Ruby and PHP strings are mutable. When writing a program in your favorite language, you need to take into account which objects are mutable and which are immutable in that particular language.\n\n\n# Custom objects and immutability\n\nIn general, objects of custom classes are mutable. However, there are cases when we would want to make them immutable: immutable objects are thread-safe, easier to test, and may be more secure.\n\n提示\n\nImmutable objects can be shared between different threads without additional protection. The state of mutable objects is hard to follow as long as they can be changed by any of the working threads.\n\nIn the context of custom objects, we can also talk about weak immutability and strong immutability. Weak immutability is when some fields of an object are immutable and others are mutable. Strong immutability is when all fields of an object are immutable.\n\nSpecific instructions on how to make a custom class immutable depend on the language, but we can give general guidelines. Basically, you need to forbid changing the value of the field once it has been created or forbid reassigning the value. This can be done, for example, by making the field read-only or a constant. Another option is to modify the methods that set attribute values so that they throw exceptions. You can also work with access modifiers: make the fields unattainable from the outside of the class.\n\n\n# Summary\n\nTo sum up, the difference between mutable and immutable objects lies in the fact that mutable objects can change their states after creation and immutable objects cannot. Languages have their own division into mutable and immutable objects. Custom classes are usually mutable but can be made immutable using language-specific tools and techniques if necessary.',normalizedContent:'in philosophy, there is a thought experiment called "ship of theseus". it is one of the oldest concepts in western philosophy and it goes like this.\n\nthe famous ship of the hero theseus has been kept as a museum piece in a harbor. over the years, the wooden parts have rotted and been replaced. a hundred years later, all of the wooden parts of the ship have been replaced. the question is: is it still the same ship?\n\n\n\nthere are many ways to answer this question and you can check them out on wikipedia. what is of interest to us is that this question of identity can be applied to programming as well. one of the most important concepts in programming, the one directly connected to change and identity, is the concept of (im)mutability.\n\nin this topic, you will read about the general idea of immutability, and in the following topics, you will explore the means of ensuring immutability in the programming language you have chosen to study.\n\n\n# mutability and immutability\n\nmutability literally means "the quality of being changeable" and, in programming, it refers to the idea of changing the state of the object after it has been created.\n\nalong this line, we can distinguish between mutable and immutable objects. to put it simply, mutable objects can be altered once they\'ve been created and immutable cannot. this is the key difference between mutable and immutable objects.\n\nwhat does this mean in practice? immutable objects always represent the same value: if you want to have a different value, you need to create a completely new object. with mutable objects, things are much easier and we can change the values they contain without creating a new object.\n\nreturning to the ship of theseus, if we were to consider it an immutable object, then the answer to the question of identity would be no. once you change something, you have a different object. in other words, the ship of theseus is no longer the ship of theseus even though it has the same name!\n\nalternatively, if we regard the ship as a mutable object, then, yes, it is still the same ship. the changes that we made did not affect its identity.\n\ndepending on the programming language you\'re using, different types of objects may be immutable. for instance, strings are immutable in python and java, but java also has stringbuilder and stringbuffer classes which are mutable. in ruby and php strings are mutable. when writing a program in your favorite language, you need to take into account which objects are mutable and which are immutable in that particular language.\n\n\n# custom objects and immutability\n\nin general, objects of custom classes are mutable. however, there are cases when we would want to make them immutable: immutable objects are thread-safe, easier to test, and may be more secure.\n\n提示\n\nimmutable objects can be shared between different threads without additional protection. the state of mutable objects is hard to follow as long as they can be changed by any of the working threads.\n\nin the context of custom objects, we can also talk about weak immutability and strong immutability. weak immutability is when some fields of an object are immutable and others are mutable. strong immutability is when all fields of an object are immutable.\n\nspecific instructions on how to make a custom class immutable depend on the language, but we can give general guidelines. basically, you need to forbid changing the value of the field once it has been created or forbid reassigning the value. this can be done, for example, by making the field read-only or a constant. another option is to modify the methods that set attribute values so that they throw exceptions. you can also work with access modifiers: make the fields unattainable from the outside of the class.\n\n\n# summary\n\nto sum up, the difference between mutable and immutable objects lies in the fact that mutable objects can change their states after creation and immutable objects cannot. languages have their own division into mutable and immutable objects. custom classes are usually mutable but can be made immutable using language-specific tools and techniques if necessary.',charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：Boxing and unboxing",frontmatter:{title:"Theory：Boxing and unboxing",date:"2022-09-25T18:13:46.000Z",permalink:"/pages/2efd30/",tags:["Java"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/03.%E5%BA%94%E7%9F%A5/101.Theory%EF%BC%9ABoxing%20and%20unboxing.html",relativePath:"01.Java/01.Hyperskill - Java/03.应知/101.Theory：Boxing and unboxing.md",key:"v-4efe5bbc",path:"/pages/2efd30/",headers:[{level:2,title:"Wrapper classes",slug:"wrapper-classes",normalizedTitle:"wrapper classes",charIndex:2},{level:2,title:"Boxing and unboxing",slug:"boxing-and-unboxing",normalizedTitle:"boxing and unboxing",charIndex:770},{level:2,title:"Constructing wrappers based on other types",slug:"constructing-wrappers-based-on-other-types",normalizedTitle:"constructing wrappers based on other types",charIndex:1797},{level:2,title:"Comparing wrappers",slug:"comparing-wrappers",normalizedTitle:"comparing wrappers",charIndex:2768},{level:2,title:"NPE when unboxing",slug:"npe-when-unboxing",normalizedTitle:"npe when unboxing",charIndex:3429},{level:2,title:"Primitive types vs wrapper classes",slug:"primitive-types-vs-wrapper-classes",normalizedTitle:"primitive types vs wrapper classes",charIndex:4073}],headersStr:"Wrapper classes Boxing and unboxing Constructing wrappers based on other types Comparing wrappers NPE when unboxing Primitive types vs wrapper classes",content:'# Wrapper classes\n\nEach primitive type has a class dedicated to it. These classes are known as wrappers and they are immutable (just like strings). Wrapper classes can be used in different situations:\n\n * when a variable can be null (absence of a value);\n * when you need to store values in generic collections (will be considered in the next topics);\n * when you want to use special methods of these classes.\n\nThe following table lists all primitive types and the corresponding wrapper classes.\n\n\n\nThe table with primitive types and the corresponding wrappers\n\nAs you can see, Java provides eight wrapper classes: one for each primitive type. The third column shows the type of argument you need so that you can create an object of the corresponding wrapper class.\n\n\n# Boxing and unboxing\n\nBoxing is the conversion of primitive types to objects of corresponding wrapper classes. Unboxing is the reverse process. The following code illustrates both processes:\n\nint primitive = 100;\nInteger reference = Integer.valueOf(primitive); // boxing\nint anotherPrimitive = reference.intValue();    // unboxing\n\n\n1\n2\n3\n\n\nAutoboxing and auto-unboxing are automatic conversions performed by the Java compiler.\n\ndouble primitiveDouble = 10.8;\nDouble wrapperDouble = primitiveDouble; // autoboxing\ndouble anotherPrimitiveDouble = wrapperDouble; // auto-unboxing\n\n\n1\n2\n3\n\n\nYou can mix both automatic and manual boxing/unboxing processes in your programs.\n\nAutoboxing works only when the left and the right parts of an assignment have the same type. In other cases, you will get a compilation error.\n\nLong n1 = 10L; // OK, assigning long to Long\nInteger n2 = 10; // OK, assigning int to Integer \n\nLong n3 = 10; // WRONG, assigning int to Long\nInteger n4 = 10L; // WRONG, assigning long to Integer\n\n\n1\n2\n3\n4\n5\n\n\n\n# Constructing wrappers based on other types\n\nThe wrapper classes have constructors for creating objects from other types. For instance, an object of a wrapper class can be created from a string (except for the Character class).\n\nInteger number = new Integer("10012"); // an Integer from "10012"\nFloat f = new Float("0.01");           // a Float from "0.01"\nLong longNumber = new Long("100000000"); // a Long from "100000000"\nBoolean boolVal = new Boolean("true");   // a Boolean from "true"\n\n\n1\n2\n3\n4\n\n\nYou can also create wrapper objects using special methods:\n\nLong longVal = Long.parseLong("1000");      // a Long from "1000"\nLong anotherLongVal = Long.valueOf("2000"); // a Long from "2000"\n\n\n1\n2\n\n\nIf the input string has an invalid argument (for instance, "1d0o3"), both of these methods throw the NumberFormatException.\n\nNote, since Java 9, the constructors are deprecated. You should use the available special methods to create objects of the wrapper classes.\n\n\n# Comparing wrappers\n\nJust like for any reference type, the operator == checks whether two wrapper objects are actually equal, i.e. if they refer to the same object in memory. The method equals , on the other hand, checks whether two wrapper objects are meaningfully equal, for example, it checks if two wrappers or strings have the same value.\n\nLong i1 = Long.valueOf("2000");\nLong i2 = Long.valueOf("2000");\nSystem.out.println(i1 == i2);      // false\nSystem.out.println(i1.equals(i2)); // true\n\n\n1\n2\n3\n4\n\n\nDo not forget about this feature when working with wrappers. Even though they correspond to the primitive types, wrapper objects are reference types!\n\n\n# NPE when unboxing\n\nThere is one possible problem when unboxing. If the wrapper object is null, the unboxing throws NullPointerException.\n\nLong longVal = null;\nlong primitiveLong = longVal; // It throws NPE\n\n\n1\n2\n\n\nTo fix it, we can add a conditional statement that produces a default value:\n\nlong unboxed = val != null ? val : 0; // No NPE here\n\n\n1\n\n\nThis code does not throw an exception.\n\nAnother example is arithmetic operations on Integer, Long, Double and other numeric wrapper types. They may cause an NPE since there is auto-unboxing involved.\n\nInteger n1 = 50;\nInteger n2 = null;\nInteger result = n1 / n2; // It throws NPE\n\n\n1\n2\n3\n\n\n\n# Primitive types vs wrapper classes\n\nIn this topic, we\'ve taken a look at wrapper classes for primitive data types. Wrapper classes allow us to represent primitive types as objects, that are reference data types.\n\nHere are some important points to keep in mind:\n\n * processing values of primitive types is faster than processing wrapper objects;\n * wrappers can be used when you need null as a no-value indicator;\n * primitive types cannot be used in standard collections (like lists, sets, or others), but wrappers can.',normalizedContent:'# wrapper classes\n\neach primitive type has a class dedicated to it. these classes are known as wrappers and they are immutable (just like strings). wrapper classes can be used in different situations:\n\n * when a variable can be null (absence of a value);\n * when you need to store values in generic collections (will be considered in the next topics);\n * when you want to use special methods of these classes.\n\nthe following table lists all primitive types and the corresponding wrapper classes.\n\n\n\nthe table with primitive types and the corresponding wrappers\n\nas you can see, java provides eight wrapper classes: one for each primitive type. the third column shows the type of argument you need so that you can create an object of the corresponding wrapper class.\n\n\n# boxing and unboxing\n\nboxing is the conversion of primitive types to objects of corresponding wrapper classes. unboxing is the reverse process. the following code illustrates both processes:\n\nint primitive = 100;\ninteger reference = integer.valueof(primitive); // boxing\nint anotherprimitive = reference.intvalue();    // unboxing\n\n\n1\n2\n3\n\n\nautoboxing and auto-unboxing are automatic conversions performed by the java compiler.\n\ndouble primitivedouble = 10.8;\ndouble wrapperdouble = primitivedouble; // autoboxing\ndouble anotherprimitivedouble = wrapperdouble; // auto-unboxing\n\n\n1\n2\n3\n\n\nyou can mix both automatic and manual boxing/unboxing processes in your programs.\n\nautoboxing works only when the left and the right parts of an assignment have the same type. in other cases, you will get a compilation error.\n\nlong n1 = 10l; // ok, assigning long to long\ninteger n2 = 10; // ok, assigning int to integer \n\nlong n3 = 10; // wrong, assigning int to long\ninteger n4 = 10l; // wrong, assigning long to integer\n\n\n1\n2\n3\n4\n5\n\n\n\n# constructing wrappers based on other types\n\nthe wrapper classes have constructors for creating objects from other types. for instance, an object of a wrapper class can be created from a string (except for the character class).\n\ninteger number = new integer("10012"); // an integer from "10012"\nfloat f = new float("0.01");           // a float from "0.01"\nlong longnumber = new long("100000000"); // a long from "100000000"\nboolean boolval = new boolean("true");   // a boolean from "true"\n\n\n1\n2\n3\n4\n\n\nyou can also create wrapper objects using special methods:\n\nlong longval = long.parselong("1000");      // a long from "1000"\nlong anotherlongval = long.valueof("2000"); // a long from "2000"\n\n\n1\n2\n\n\nif the input string has an invalid argument (for instance, "1d0o3"), both of these methods throw the numberformatexception.\n\nnote, since java 9, the constructors are deprecated. you should use the available special methods to create objects of the wrapper classes.\n\n\n# comparing wrappers\n\njust like for any reference type, the operator == checks whether two wrapper objects are actually equal, i.e. if they refer to the same object in memory. the method equals , on the other hand, checks whether two wrapper objects are meaningfully equal, for example, it checks if two wrappers or strings have the same value.\n\nlong i1 = long.valueof("2000");\nlong i2 = long.valueof("2000");\nsystem.out.println(i1 == i2);      // false\nsystem.out.println(i1.equals(i2)); // true\n\n\n1\n2\n3\n4\n\n\ndo not forget about this feature when working with wrappers. even though they correspond to the primitive types, wrapper objects are reference types!\n\n\n# npe when unboxing\n\nthere is one possible problem when unboxing. if the wrapper object is null, the unboxing throws nullpointerexception.\n\nlong longval = null;\nlong primitivelong = longval; // it throws npe\n\n\n1\n2\n\n\nto fix it, we can add a conditional statement that produces a default value:\n\nlong unboxed = val != null ? val : 0; // no npe here\n\n\n1\n\n\nthis code does not throw an exception.\n\nanother example is arithmetic operations on integer, long, double and other numeric wrapper types. they may cause an npe since there is auto-unboxing involved.\n\ninteger n1 = 50;\ninteger n2 = null;\ninteger result = n1 / n2; // it throws npe\n\n\n1\n2\n3\n\n\n\n# primitive types vs wrapper classes\n\nin this topic, we\'ve taken a look at wrapper classes for primitive data types. wrapper classes allow us to represent primitive types as objects, that are reference data types.\n\nhere are some important points to keep in mind:\n\n * processing values of primitive types is faster than processing wrapper objects;\n * wrappers can be used when you need null as a no-value indicator;\n * primitive types cannot be used in standard collections (like lists, sets, or others), but wrappers can.',charsets:{},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：Anonymous classes properties",frontmatter:{title:"Theory：Anonymous classes properties",date:"2022-10-29T19:39:20.000Z",permalink:"/pages/d95243/",tags:[null]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/02.Java%20OOP/53.Theory%EF%BC%9AAnonymous%20classes%20properties.html",relativePath:"01.Java/01.Hyperskill - Java/02.Java OOP/53.Theory：Anonymous classes properties.md",key:"v-ec3730c6",path:"/pages/d95243/",headers:[{level:2,title:"How to create?",slug:"how-to-create",normalizedTitle:"how to create?",charIndex:354},{level:2,title:"Learn callbacks by example",slug:"learn-callbacks-by-example",normalizedTitle:"learn callbacks by example",charIndex:3282},{level:2,title:"Restrictions on anonymous classes",slug:"restrictions-on-anonymous-classes",normalizedTitle:"restrictions on anonymous classes",charIndex:6518},{level:2,title:"Summary",slug:"summary",normalizedTitle:"summary",charIndex:8060}],headersStr:"How to create? Learn callbacks by example Restrictions on anonymous classes Summary",content:'As you remember, there are anonymous classes in the world of Java. They don\'t have name identifiers and they enable you to declare and instantiate a class at the same time. But you didn\'t think that the whole theory was covered in the first topic, did you? So, today is a special day — you will finally learn all the nuances about anonymous classes!\n\n\n# How to create?\n\nThe most popular way to create an anonymous class is to implement an interface and you have seen it already. So, now let\'s try something new — let\'s create an anonymous class that inherits from another class.\n\nImagine a human: they have a brain and many-many thoughts in it. Every couple of seconds they produce a new thought. And we want to describe it in Java language. So, how will we do it?\n\nabstract class HumanThought {\n    public void print() {\n        System.out.println("This is a very important thought.");\n    }\n}\n\n\n1\n2\n3\n4\n5\n\n\nThis is our superclass HumanThought that has one method for printing the standard thought. And now anonymous classes will help us. By inheriting from HumanThought we may have as many different thoughts as we want — and that\'s all without new .java files.\n\nAll new thoughts would be children of our superclass and will have their own method print:\n\nclass Human {\n\n    public void takeMilkshake() {\n\n        // creation of anonymous class by inheriting from class HumanThought\n        HumanThought thought = new HumanThought() {\n            public void print() {\n                System.out.println("What to take? Chocolate or strawberry milkshake..");\n            }\n        };\n        thought.print();\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\nAnd if we wanted to create an actual human and invoke method takeMilkshake — what would be the output?\n\npublic class Main {\n\n    public static void main(String[] args) {\n\n        Human human = new Human();\n        human.takeMilkshake();\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nOf course, you are thinking the right thought:\n\nWhat to take? Chocolate or strawberry milkshake..\n\n\n1\n\n\nAnd have you noticed that class HumanThought is abstract? Yes, it is — don\'t forget that we can create an anonymous class by inheriting from both: concrete and abstract classes.\n\nBut to become a master in programming you should get acquainted with another case of creating anonymous classes: when we create an anonymous class and pass it in a constructor as an argument.\n\nSo, what is going on in our example below? Firstly, Thread is a standard Java class. And if you don\'t know each other yet, don\'t be afraid — fruitful cooperation awaits you. And Runnable is an interface that describes some action — any you want. In our example, Runnable has an action that only prints a phrase.\n\nThread has several constructors, that is a normal situation, and one of its constructors take as an argument an anonymous class that implements the interface Runnable.\n\nAs a result, the anonymous class is passed as an argument of the constructor:\n\nclass MyExample {\n    public static void main(String[] args) {\n\n        //Anonymous class is created as a constructor argument\n        Thread t = new Thread(new Runnable() {\n            public void run() {\n                System.out.println("Run, Forrest, run!");\n            }\n        });\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# Learn callbacks by example\n\nAlso, often, after creating an instance of an anonymous class we pass it to some method as an argument. In this case, the anonymous class is called a callback. A callback is a piece of executable code that is passed to another code that executes it (performs a call back) at a convenient time. And can we call our previous example a callback? Yes, we can — because the constructor is a special method.\n\nLet\'s consider an example. There is a special kind of calculator that can only divide numbers. The calculator takes a callback as its argument and executes the callback passing the result of the calculation or an error message.\n\nThe Callback interface has two abstract methods:\n\ninterface Callback {\n\n    /**\n     * Takes a result and processes it\n     */\n    void calculated(int result);\n\n    /**\n     * Takes an error message\n     */\n    void failed(String errorMsg);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nThe class Divider has only one static method (just an example, the demonstrated technique works with any methods):\n\nclass Divider {\n\n    /**\n     * Divide a by b. It executes the specified callback to process results\n     */\n    public static void divide(int a, int b, Callback callback) {\n\n        if (b == 0) {\n            callback.failed("Division by zero!");\n            return;\n        }\n\n        callback.calculated(a / b);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\nOf course, in this case, you can perform the division and return the result without any callbacks. In general, though, callbacks can help you in large applications with multiple parts and layers (especially in multithreaded programs).\n\nCalling a method with a callback:\n\npublic class CallbacksExample {\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        int a = scanner.nextInt();\n        int b = scanner.nextInt();\n\n        Divider.divide(a, b, new Callback() { // passing callback as an argument\n\n            @Override\n            public void calculated(int result) {\n                String textToPrint = String.format("%d / %d is %d", a, b, result);\n                print(textToPrint);\n            }\n\n            @Override\n            public void failed(String errorMsg) {\n                print(errorMsg);\n            }\n        });\n    }\n\n    public static void print(String text) {\n        System.out.println(text);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\nAs you can see, we instantiate and pass the callback without any additional variables of the Callback type. It\'s a very common practice for working with callbacks, especially if they are small.\n\nThe callback captures the static method print and the local variables a and b from its context. The variables a and b are effectively final here. (i.e the variables aren\'t changed you don\'t need to write the keyword final ).\n\nLet\'s run the program.\n\nInput 1:\n\n8 2\n\n\n1\n\n\nOutput 1:\n\n8 / 2 is 4\n\n\n1\n\n\nInput 2:\n\n10 0\n\n\n1\n\n\nOutput 2:\n\nDivision by zero!\n\n\n1\n\n\nSo, anonymous classes along with the context capture mechanism allow you to transfer logic between parts of your program. They are used as callbacks in large applications and when working with external libraries.\n\n\n# Restrictions on anonymous classes\n\nAnd, of course, anonymous classes have some restrictions:\n\n * they cannot have static initializers or interface declarations\n * they cannot have static members, except the constant variables (final static fields)\n * they cannot have constructors\n\nLet\'s consider the following example with an anonymous class SpeakingEntity. To not have static initializers, static members, or interface declarations — it\'s not a big deal. But what about not having a constructor? How to initialize our fields?\n\nfinal String robotName = "Bug";\nfinal int robotAssemblyYear = 2112;\n\nSpeakingEntity robot = new SpeakingEntity() {\n\n    static final int MAGIC_CONSTANT = 10;\n\n    private String name;\n    private int assemblyYear;\n\n    { /* instance initialization block for setting fields */\n        name = robotName;\n        assemblyYear = robotAssemblyYear;\n    }\n\n    @Override\n    public void sayHello() {\n        System.out.println("1010001" + MAGIC_CONSTANT);\n    }\n\n    @Override\n    public void sayBye() {\n        System.out.println("0101110" + MAGIC_CONSTANT);\n    }\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\nAnd for examples like this one you should be friends with the good old theory! Remember about instance initializers and what they are for? Yeah, instance initializer allows us to substitute a constructor. It runs each time when an object of the class is created. So, fields name and assemblyYear will be initialized and our robot will have the name "Bug" and a year of birth!\n\n\n# Summary\n\nPerhaps you are wondering where to go to see how anonymous classes are used in "real life"? In that case, we may have a suggestion.\n\nAnonymous classes are actively used when writing user interfaces with the standard Java library called Swing. The same with developing a web user interface using Google Web Toolkit (GWT). It is very common to have a lot of listeners that are used just once for one button, so using anonymous classes allows us to avoid writing a lot of classes and having useless files in the development of the code. Some widespread libraries for working through the HTTP protocol also use anonymous classes. For example, this HttpAsyncClient.\n\nAnd the last one — what are the advantages of anonymous classes? Anonymous classes enable you to make code more concise and reduce the number of .java files. And what about encapsulation? Yes, you are thinking right — each anonymous class has very local scope, it is defined exactly where it is needed and it can never be used anywhere else. So, it definitely increases encapsulation and provides you with a great reason to fall in love with Java!',normalizedContent:'as you remember, there are anonymous classes in the world of java. they don\'t have name identifiers and they enable you to declare and instantiate a class at the same time. but you didn\'t think that the whole theory was covered in the first topic, did you? so, today is a special day — you will finally learn all the nuances about anonymous classes!\n\n\n# how to create?\n\nthe most popular way to create an anonymous class is to implement an interface and you have seen it already. so, now let\'s try something new — let\'s create an anonymous class that inherits from another class.\n\nimagine a human: they have a brain and many-many thoughts in it. every couple of seconds they produce a new thought. and we want to describe it in java language. so, how will we do it?\n\nabstract class humanthought {\n    public void print() {\n        system.out.println("this is a very important thought.");\n    }\n}\n\n\n1\n2\n3\n4\n5\n\n\nthis is our superclass humanthought that has one method for printing the standard thought. and now anonymous classes will help us. by inheriting from humanthought we may have as many different thoughts as we want — and that\'s all without new .java files.\n\nall new thoughts would be children of our superclass and will have their own method print:\n\nclass human {\n\n    public void takemilkshake() {\n\n        // creation of anonymous class by inheriting from class humanthought\n        humanthought thought = new humanthought() {\n            public void print() {\n                system.out.println("what to take? chocolate or strawberry milkshake..");\n            }\n        };\n        thought.print();\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\nand if we wanted to create an actual human and invoke method takemilkshake — what would be the output?\n\npublic class main {\n\n    public static void main(string[] args) {\n\n        human human = new human();\n        human.takemilkshake();\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nof course, you are thinking the right thought:\n\nwhat to take? chocolate or strawberry milkshake..\n\n\n1\n\n\nand have you noticed that class humanthought is abstract? yes, it is — don\'t forget that we can create an anonymous class by inheriting from both: concrete and abstract classes.\n\nbut to become a master in programming you should get acquainted with another case of creating anonymous classes: when we create an anonymous class and pass it in a constructor as an argument.\n\nso, what is going on in our example below? firstly, thread is a standard java class. and if you don\'t know each other yet, don\'t be afraid — fruitful cooperation awaits you. and runnable is an interface that describes some action — any you want. in our example, runnable has an action that only prints a phrase.\n\nthread has several constructors, that is a normal situation, and one of its constructors take as an argument an anonymous class that implements the interface runnable.\n\nas a result, the anonymous class is passed as an argument of the constructor:\n\nclass myexample {\n    public static void main(string[] args) {\n\n        //anonymous class is created as a constructor argument\n        thread t = new thread(new runnable() {\n            public void run() {\n                system.out.println("run, forrest, run!");\n            }\n        });\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# learn callbacks by example\n\nalso, often, after creating an instance of an anonymous class we pass it to some method as an argument. in this case, the anonymous class is called a callback. a callback is a piece of executable code that is passed to another code that executes it (performs a call back) at a convenient time. and can we call our previous example a callback? yes, we can — because the constructor is a special method.\n\nlet\'s consider an example. there is a special kind of calculator that can only divide numbers. the calculator takes a callback as its argument and executes the callback passing the result of the calculation or an error message.\n\nthe callback interface has two abstract methods:\n\ninterface callback {\n\n    /**\n     * takes a result and processes it\n     */\n    void calculated(int result);\n\n    /**\n     * takes an error message\n     */\n    void failed(string errormsg);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nthe class divider has only one static method (just an example, the demonstrated technique works with any methods):\n\nclass divider {\n\n    /**\n     * divide a by b. it executes the specified callback to process results\n     */\n    public static void divide(int a, int b, callback callback) {\n\n        if (b == 0) {\n            callback.failed("division by zero!");\n            return;\n        }\n\n        callback.calculated(a / b);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\nof course, in this case, you can perform the division and return the result without any callbacks. in general, though, callbacks can help you in large applications with multiple parts and layers (especially in multithreaded programs).\n\ncalling a method with a callback:\n\npublic class callbacksexample {\n\n    public static void main(string[] args) {\n        scanner scanner = new scanner(system.in);\n\n        int a = scanner.nextint();\n        int b = scanner.nextint();\n\n        divider.divide(a, b, new callback() { // passing callback as an argument\n\n            @override\n            public void calculated(int result) {\n                string texttoprint = string.format("%d / %d is %d", a, b, result);\n                print(texttoprint);\n            }\n\n            @override\n            public void failed(string errormsg) {\n                print(errormsg);\n            }\n        });\n    }\n\n    public static void print(string text) {\n        system.out.println(text);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\nas you can see, we instantiate and pass the callback without any additional variables of the callback type. it\'s a very common practice for working with callbacks, especially if they are small.\n\nthe callback captures the static method print and the local variables a and b from its context. the variables a and b are effectively final here. (i.e the variables aren\'t changed you don\'t need to write the keyword final ).\n\nlet\'s run the program.\n\ninput 1:\n\n8 2\n\n\n1\n\n\noutput 1:\n\n8 / 2 is 4\n\n\n1\n\n\ninput 2:\n\n10 0\n\n\n1\n\n\noutput 2:\n\ndivision by zero!\n\n\n1\n\n\nso, anonymous classes along with the context capture mechanism allow you to transfer logic between parts of your program. they are used as callbacks in large applications and when working with external libraries.\n\n\n# restrictions on anonymous classes\n\nand, of course, anonymous classes have some restrictions:\n\n * they cannot have static initializers or interface declarations\n * they cannot have static members, except the constant variables (final static fields)\n * they cannot have constructors\n\nlet\'s consider the following example with an anonymous class speakingentity. to not have static initializers, static members, or interface declarations — it\'s not a big deal. but what about not having a constructor? how to initialize our fields?\n\nfinal string robotname = "bug";\nfinal int robotassemblyyear = 2112;\n\nspeakingentity robot = new speakingentity() {\n\n    static final int magic_constant = 10;\n\n    private string name;\n    private int assemblyyear;\n\n    { /* instance initialization block for setting fields */\n        name = robotname;\n        assemblyyear = robotassemblyyear;\n    }\n\n    @override\n    public void sayhello() {\n        system.out.println("1010001" + magic_constant);\n    }\n\n    @override\n    public void saybye() {\n        system.out.println("0101110" + magic_constant);\n    }\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\nand for examples like this one you should be friends with the good old theory! remember about instance initializers and what they are for? yeah, instance initializer allows us to substitute a constructor. it runs each time when an object of the class is created. so, fields name and assemblyyear will be initialized and our robot will have the name "bug" and a year of birth!\n\n\n# summary\n\nperhaps you are wondering where to go to see how anonymous classes are used in "real life"? in that case, we may have a suggestion.\n\nanonymous classes are actively used when writing user interfaces with the standard java library called swing. the same with developing a web user interface using google web toolkit (gwt). it is very common to have a lot of listeners that are used just once for one button, so using anonymous classes allows us to avoid writing a lot of classes and having useless files in the development of the code. some widespread libraries for working through the http protocol also use anonymous classes. for example, this httpasyncclient.\n\nand the last one — what are the advantages of anonymous classes? anonymous classes enable you to make code more concise and reduce the number of .java files. and what about encapsulation? yes, you are thinking right — each anonymous class has very local scope, it is defined exactly where it is needed and it can never be used anywhere else. so, it definitely increases encapsulation and provides you with a great reason to fall in love with java!',charsets:{},lastUpdated:"2022/10/29, 19:52:35",lastUpdatedTimestamp:1667044355e3},{title:"Theory：Introduction to generic programming",frontmatter:{title:"Theory：Introduction to generic programming",date:"2022-09-26T16:14:35.000Z",permalink:"/pages/c7945c/",tags:["Generic","Java"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/03.%E5%BA%94%E7%9F%A5/102.Theory%EF%BC%9AIntroduction%20to%20generic%20programming.html",relativePath:"01.Java/01.Hyperskill - Java/03.应知/102.Theory：Introduction to generic programming.md",key:"v-6345c5cb",path:"/pages/c7945c/",headers:[{level:2,title:"Generic programming",slug:"generic-programming",normalizedTitle:"generic programming",charIndex:2},{level:2,title:"Type parameters",slug:"type-parameters",normalizedTitle:"type parameters",charIndex:881},{level:2,title:"The naming convention for type parameters",slug:"the-naming-convention-for-type-parameters",normalizedTitle:"the naming convention for type parameters",charIndex:2516},{level:2,title:"Creating objects of generic classes",slug:"creating-objects-of-generic-classes",normalizedTitle:"creating objects of generic classes",charIndex:2984},{level:2,title:"Custom generic array",slug:"custom-generic-array",normalizedTitle:"custom generic array",charIndex:4672},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:6357}],headersStr:"Generic programming Type parameters The naming convention for type parameters Creating objects of generic classes Custom generic array Conclusion",content:'# Generic programming\n\nThere are situations when methods and classes do not depend on the data types on which they operate. For example, the algorithm to find an element in an array can process arrays of strings, integers or custom classes. It does not matter what the array stores: the algorithm is always the same. Yet we cannot write this algorithm as a single method, because it requires different arguments (int[], String[], etc).\n\nSince version 5, Java has supported generic programming that introduces abstraction over types. Generic methods and classes can handle different types in the same general way. A concrete type is determined only when a developer creates an object of the class or invokes the method. This approach enables us to write more abstract code and develop reusable software libraries. Let us consider it step by step using examples written in Java.\n\n\n# Type parameters\n\nA generic type is a generic class (or interface) that is parameterized over types. To declare a generic class, we need to declare a class with the type parameter section delimited by angle brackets < > following the class name.\n\nIn the following example, the class GenericType has a single type parameter named T. We assume that the type T is "some type" and write the class body regardless of the concrete type.\n\nclass GenericType<T> { \n\n    /**\n     * A field of "some type"\n     */\n    private T t;\n\n    /**\n     * Takes a value of "some type" and assigns it to the field\n     */\n    public GenericType(T t) {\n        this.t = t;\n    }\n\n    /**\n     * Returns a value of "some type"\n     */\n    public T get() {\n        return t;\n    }\n\n    /**\n     * Takes a value of "some type", assigns it to a field and then returns it\n     */\n    public T set(T t) {\n        this.t = t;\n        return this.t;   \n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n\nAfter being declared, a type parameter can be used inside the class body as an ordinary type. For instance, the above example uses the type parameter T as:\n\n * a type for a field\n * a constructor argument type\n * an instance method argument and return type\n\nThe behavior of both instance methods does not depend on the concrete type of T; it can take/return a string or a number in the same way.\n\nA class can have any number of type parameters. For example, the following class has three.\n\nclass Three<T, U, V> {\n    T t;\n    U u;\n    V v;\n}\n\n\n1\n2\n3\n4\n5\n\n\nBut most generic classes have just one or two type parameters.\n\n\n# The naming convention for type parameters\n\nThere is a naming convention that restricts type parameter name choices to single uppercase letters. Without this convention, it would be difficult to tell the difference between a type variable and an ordinary class name.\n\nThe most commonly used type parameter names are:\n\n * T – Type\n * S, U, V etc. – 2nd, 3rd, 4th types\n * E – Element (used extensively by different collections)\n * K – Key\n * V – Value\n * N – Number\n\n\n# Creating objects of generic classes\n\nTo create an object of a generic class (standard or custom), we need to specify the type argument following the type name.\n\nGenericType<Integer> obj1 = new GenericType<Integer>(10);\n\nGenericType<String> obj2 = new GenericType<String>("abc");\n\n\n1\n2\n3\n\n\n注意\n\nIt is important to note that a type argument must be a reference type. Primitive types like int or double are invalid type arguments.\n\nJava 7 made it possible to replace the type arguments required to invoke the constructor of a generic class with an empty set of type arguments, as long as the compiler can infer the type arguments from the context.\n\nGenericType<Integer> obj1 = new GenericType<>(10);\n\nGenericType<String> obj2 = new GenericType<>("abc");\n\n\n1\n2\n3\n\n\nWe will use this format in all further examples.\n\n提示\n\nThe pair of angle brackets <> is informally called the diamond operator.\n\nSometimes, declaring a variable with a generic type can be lengthy and difficult to read. Starting from Java 10, we can write var instead of a specific type to force automatic type inference based on the type of assigned value.\n\nvar obj3 = new GenericType<>("abc");\n\n\n1\n\n\nAfter we have created an object with a specified type argument, we can invoke methods of the class that take or return the type parameter:\n\nInteger number = obj1.get(); // 10\nString string = obj2.get();  // "abc"\n\nSystem.out.println(obj1.set(20));    // prints the number 20\nSystem.out.println(obj2.set("def")); // prints the string "def"\n\n\n1\n2\n3\n4\n5\n\n\nIf a class has multiple type parameters, we need to specify all of them when creating instances:\n\nGenericType<Type1, Type2, ..., TypeN> obj = new GenericType<>(...);\n\n\n1\n\n\n\n# Custom generic array\n\nAs a more complicated example, let us consider the following class which represents a generic immutable array. It has one field to store items of type T, a constructor to set items, a method to get an item by its index, and another method to get the length of the internal array. The class is immutable because it does not provide methods to modify the items array.\n\npublic class ImmutableArray<T> {\n\n    private final T[] items;\n\n    public ImmutableArray(T[] items) {\n        this.items = items.clone();\n    }\n\n    public T get(int index) {\n        return items[index];\n    }\n\n    public int length() {\n        return items.length;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\nThis class shows that a generic class can have methods (like length) that do not use the parameter type at all.\n\nThe following code creates an instance of ImmutableArray to store three strings and then output the items to the standard output.\n\nvar stringArray = new ImmutableArray<>(new String[] {"item1", "item2", "item3"});\n\nfor (int i = 0; i < stringArray.length(); i++) {\n    System.out.print(stringArray.get(i) + " ");\n}\n\n\n1\n2\n3\n4\n5\n\n\nIt is possible to parameterize ImmutableArray with any reference type, including arrays, standard classes, or your own classes.\n\nvar doubleArray = new ImmutableArray<>(new Double[] {1.03, 2.04});\n\nMyClass obj1 = ..., obj2 = ...; // suppose, you have two objects of your custom class\n\nvar array = new ImmutableArray<>(new MyClass[] {obj1, obj2});\n\n\n1\n2\n3\n4\n5\n\n\nWe used var in the above examples to save space. Instead of using var, we could have explicitly specified the type, e.g. ImmutableArray<String> stringArray = ...; and so on.\n\n\n# Conclusion\n\nA class can declare one or more type parameters and use them inside the class body as types for fields, method arguments, return values, and local variables. In this case, the class does not know the concrete type on which it operates. The concrete type must be specified when creating instances of the class. This approach allows you to write classes and methods that can process many different types in the same way.\n\nRemember that only a reference type (an array, a standard class, a custom class) can be used as a concrete type for generics. This means that instead of primitive types, we use wrapper classes such as Integer, Double, Boolean, and so on when creating an object of a generic class.',normalizedContent:'# generic programming\n\nthere are situations when methods and classes do not depend on the data types on which they operate. for example, the algorithm to find an element in an array can process arrays of strings, integers or custom classes. it does not matter what the array stores: the algorithm is always the same. yet we cannot write this algorithm as a single method, because it requires different arguments (int[], string[], etc).\n\nsince version 5, java has supported generic programming that introduces abstraction over types. generic methods and classes can handle different types in the same general way. a concrete type is determined only when a developer creates an object of the class or invokes the method. this approach enables us to write more abstract code and develop reusable software libraries. let us consider it step by step using examples written in java.\n\n\n# type parameters\n\na generic type is a generic class (or interface) that is parameterized over types. to declare a generic class, we need to declare a class with the type parameter section delimited by angle brackets < > following the class name.\n\nin the following example, the class generictype has a single type parameter named t. we assume that the type t is "some type" and write the class body regardless of the concrete type.\n\nclass generictype<t> { \n\n    /**\n     * a field of "some type"\n     */\n    private t t;\n\n    /**\n     * takes a value of "some type" and assigns it to the field\n     */\n    public generictype(t t) {\n        this.t = t;\n    }\n\n    /**\n     * returns a value of "some type"\n     */\n    public t get() {\n        return t;\n    }\n\n    /**\n     * takes a value of "some type", assigns it to a field and then returns it\n     */\n    public t set(t t) {\n        this.t = t;\n        return this.t;   \n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n\nafter being declared, a type parameter can be used inside the class body as an ordinary type. for instance, the above example uses the type parameter t as:\n\n * a type for a field\n * a constructor argument type\n * an instance method argument and return type\n\nthe behavior of both instance methods does not depend on the concrete type of t; it can take/return a string or a number in the same way.\n\na class can have any number of type parameters. for example, the following class has three.\n\nclass three<t, u, v> {\n    t t;\n    u u;\n    v v;\n}\n\n\n1\n2\n3\n4\n5\n\n\nbut most generic classes have just one or two type parameters.\n\n\n# the naming convention for type parameters\n\nthere is a naming convention that restricts type parameter name choices to single uppercase letters. without this convention, it would be difficult to tell the difference between a type variable and an ordinary class name.\n\nthe most commonly used type parameter names are:\n\n * t – type\n * s, u, v etc. – 2nd, 3rd, 4th types\n * e – element (used extensively by different collections)\n * k – key\n * v – value\n * n – number\n\n\n# creating objects of generic classes\n\nto create an object of a generic class (standard or custom), we need to specify the type argument following the type name.\n\ngenerictype<integer> obj1 = new generictype<integer>(10);\n\ngenerictype<string> obj2 = new generictype<string>("abc");\n\n\n1\n2\n3\n\n\n注意\n\nit is important to note that a type argument must be a reference type. primitive types like int or double are invalid type arguments.\n\njava 7 made it possible to replace the type arguments required to invoke the constructor of a generic class with an empty set of type arguments, as long as the compiler can infer the type arguments from the context.\n\ngenerictype<integer> obj1 = new generictype<>(10);\n\ngenerictype<string> obj2 = new generictype<>("abc");\n\n\n1\n2\n3\n\n\nwe will use this format in all further examples.\n\n提示\n\nthe pair of angle brackets <> is informally called the diamond operator.\n\nsometimes, declaring a variable with a generic type can be lengthy and difficult to read. starting from java 10, we can write var instead of a specific type to force automatic type inference based on the type of assigned value.\n\nvar obj3 = new generictype<>("abc");\n\n\n1\n\n\nafter we have created an object with a specified type argument, we can invoke methods of the class that take or return the type parameter:\n\ninteger number = obj1.get(); // 10\nstring string = obj2.get();  // "abc"\n\nsystem.out.println(obj1.set(20));    // prints the number 20\nsystem.out.println(obj2.set("def")); // prints the string "def"\n\n\n1\n2\n3\n4\n5\n\n\nif a class has multiple type parameters, we need to specify all of them when creating instances:\n\ngenerictype<type1, type2, ..., typen> obj = new generictype<>(...);\n\n\n1\n\n\n\n# custom generic array\n\nas a more complicated example, let us consider the following class which represents a generic immutable array. it has one field to store items of type t, a constructor to set items, a method to get an item by its index, and another method to get the length of the internal array. the class is immutable because it does not provide methods to modify the items array.\n\npublic class immutablearray<t> {\n\n    private final t[] items;\n\n    public immutablearray(t[] items) {\n        this.items = items.clone();\n    }\n\n    public t get(int index) {\n        return items[index];\n    }\n\n    public int length() {\n        return items.length;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\nthis class shows that a generic class can have methods (like length) that do not use the parameter type at all.\n\nthe following code creates an instance of immutablearray to store three strings and then output the items to the standard output.\n\nvar stringarray = new immutablearray<>(new string[] {"item1", "item2", "item3"});\n\nfor (int i = 0; i < stringarray.length(); i++) {\n    system.out.print(stringarray.get(i) + " ");\n}\n\n\n1\n2\n3\n4\n5\n\n\nit is possible to parameterize immutablearray with any reference type, including arrays, standard classes, or your own classes.\n\nvar doublearray = new immutablearray<>(new double[] {1.03, 2.04});\n\nmyclass obj1 = ..., obj2 = ...; // suppose, you have two objects of your custom class\n\nvar array = new immutablearray<>(new myclass[] {obj1, obj2});\n\n\n1\n2\n3\n4\n5\n\n\nwe used var in the above examples to save space. instead of using var, we could have explicitly specified the type, e.g. immutablearray<string> stringarray = ...; and so on.\n\n\n# conclusion\n\na class can declare one or more type parameters and use them inside the class body as types for fields, method arguments, return values, and local variables. in this case, the class does not know the concrete type on which it operates. the concrete type must be specified when creating instances of the class. this approach allows you to write classes and methods that can process many different types in the same way.\n\nremember that only a reference type (an array, a standard class, a custom class) can be used as a concrete type for generics. this means that instead of primitive types, we use wrapper classes such as integer, double, boolean, and so on when creating an object of a generic class.',charsets:{cjk:!0},lastUpdated:"2022/10/04, 21:45:45",lastUpdatedTimestamp:1664891145e3},{title:"Theory：What are collections",frontmatter:{title:"Theory：What are collections",date:"2022-09-29T16:30:03.000Z",permalink:"/pages/79c741/",tags:["Collection","Java"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/03.%E5%BA%94%E7%9F%A5/104.Theory%EF%BC%9AWhat%20are%20collections.html",relativePath:"01.Java/01.Hyperskill - Java/03.应知/104.Theory：What are collections.md",key:"v-8524be88",path:"/pages/79c741/",headers:[{level:2,title:"When arrays are not enough",slug:"when-arrays-are-not-enough",normalizedTitle:"when arrays are not enough",charIndex:2},{level:2,title:"Different collections",slug:"different-collections",normalizedTitle:"different collections",charIndex:495},{level:2,title:"Features of collections",slug:"features-of-collections",normalizedTitle:"features of collections",charIndex:1553},{level:2,title:"The simplest collection example",slug:"the-simplest-collection-example",normalizedTitle:"the simplest collection example",charIndex:2326},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:3797}],headersStr:"When arrays are not enough Different collections Features of collections The simplest collection example Conclusion",content:'# When arrays are not enough\n\nThe Java language supports arrays to store multiple values or objects of the same type together. An array is initialized with a predefined size during creation. The size cannot be changed in the future, and that imposes some limitations on their use for solving business problems. If we want to store more data, we need to create a new larger array and then copy the data in this array manually. This can be inefficient for programs that process a lot of data.\n\n\n# Different collections\n\nFortunately, there is a set of containers called collections for grouping elements into a single unit. They are used to store, retrieve, manipulate, and communicate aggregated data.\n\nCollections are more sophisticated and flexible than arrays. First of all, they are resizable: you can add any number of elements to a collection. A collection will automatically handle the deletion of an element from any position. The second point is collections provide a rich set of methods that are already implemented for you.\n\nThere are several types of collections with different internal storage structure. You can choose a collection type best matching your problem so that your most frequent operations will be convenient and efficient.\n\n提示\n\nActually, collections are representations of different data structures and abstract data types from computer science. It is good to understand the relationship between them and collections in Java. This will help you in programming interviews, and in working to select an appropriate collection.\n\n\n# Features of collections\n\nThere are several specific features of collections in Java:\n\n 1. They are represented by different classes from the Java Standard Library.\n 2. All modern collections are generic types while old collections are non-generic. We will only focus on new collections. As regular generics, they can store any reference types including classes defined by you (like Person or something else).\n 3. Collections can be mutable (possible to add and remove elements) and immutable (impossible to do that).\n\nIn addition to standard collections, there are a number of external libraries with collections. One of such libraries is Guava Collections which was developed by Google. It can be used if standard collections are not enough for solving your problems.\n\n\n# The simplest collection example\n\nThere is an example of a simple collection called ArrayList. To use it, make the following import:\n\njava.util.ArrayList;\n\n\n1\n\n\nIt works in a similar way to a regular array, but you do not have to manually resize it to add and remove elements.\n\nArrayList<String> list = new ArrayList<>();\n\nlist.add("first");\nlist.add("second");\nlist.add("third");\n\nSystem.out.println(list); // [first, second, third]\n\nSystem.out.println(list.get(0)); // first\nSystem.out.println(list.get(1)); // second\nSystem.out.println(list.get(2)); // third\n\nlist.remove("first");\n\nSystem.out.println(list); // [second, third]\n\nSystem.out.println(list.size()); // 2\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n提示\n\nNote, in this example we used the get method to access an element by its index. Unlike arrays, collections do not have the [] operator.\n\nWe hope this is enough for the first acquaintance with the collections. In further topics, you will learn different kinds of collections in more detail. Now the main thing to understand is that using collections is not more difficult than using a regular array.\n\n注意\n\nAll modern collections are generic, so you can specify any reference type as a generic parameter and store it in a collection. But there is one restriction, collections cannot store primitive values at all (int, long, char, double and so on). You should use one of the wrapper classes (Integer, Long, Character, Double or another one) instead.\n\n\n# Conclusion\n\nSometimes arrays are not flexible enough to store and manipulate your data. For that, Java provides collections — mostly generic classes from the Java Standard Library or external libraries, either mutable or immutable, that are more adjusted to store objects for specific complicated purposes. It\'ll take you more than one topic to learn even about basic types of collections that represent different data structures and serve different purposes. Stay tuned!',normalizedContent:'# when arrays are not enough\n\nthe java language supports arrays to store multiple values or objects of the same type together. an array is initialized with a predefined size during creation. the size cannot be changed in the future, and that imposes some limitations on their use for solving business problems. if we want to store more data, we need to create a new larger array and then copy the data in this array manually. this can be inefficient for programs that process a lot of data.\n\n\n# different collections\n\nfortunately, there is a set of containers called collections for grouping elements into a single unit. they are used to store, retrieve, manipulate, and communicate aggregated data.\n\ncollections are more sophisticated and flexible than arrays. first of all, they are resizable: you can add any number of elements to a collection. a collection will automatically handle the deletion of an element from any position. the second point is collections provide a rich set of methods that are already implemented for you.\n\nthere are several types of collections with different internal storage structure. you can choose a collection type best matching your problem so that your most frequent operations will be convenient and efficient.\n\n提示\n\nactually, collections are representations of different data structures and abstract data types from computer science. it is good to understand the relationship between them and collections in java. this will help you in programming interviews, and in working to select an appropriate collection.\n\n\n# features of collections\n\nthere are several specific features of collections in java:\n\n 1. they are represented by different classes from the java standard library.\n 2. all modern collections are generic types while old collections are non-generic. we will only focus on new collections. as regular generics, they can store any reference types including classes defined by you (like person or something else).\n 3. collections can be mutable (possible to add and remove elements) and immutable (impossible to do that).\n\nin addition to standard collections, there are a number of external libraries with collections. one of such libraries is guava collections which was developed by google. it can be used if standard collections are not enough for solving your problems.\n\n\n# the simplest collection example\n\nthere is an example of a simple collection called arraylist. to use it, make the following import:\n\njava.util.arraylist;\n\n\n1\n\n\nit works in a similar way to a regular array, but you do not have to manually resize it to add and remove elements.\n\narraylist<string> list = new arraylist<>();\n\nlist.add("first");\nlist.add("second");\nlist.add("third");\n\nsystem.out.println(list); // [first, second, third]\n\nsystem.out.println(list.get(0)); // first\nsystem.out.println(list.get(1)); // second\nsystem.out.println(list.get(2)); // third\n\nlist.remove("first");\n\nsystem.out.println(list); // [second, third]\n\nsystem.out.println(list.size()); // 2\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n提示\n\nnote, in this example we used the get method to access an element by its index. unlike arrays, collections do not have the [] operator.\n\nwe hope this is enough for the first acquaintance with the collections. in further topics, you will learn different kinds of collections in more detail. now the main thing to understand is that using collections is not more difficult than using a regular array.\n\n注意\n\nall modern collections are generic, so you can specify any reference type as a generic parameter and store it in a collection. but there is one restriction, collections cannot store primitive values at all (int, long, char, double and so on). you should use one of the wrapper classes (integer, long, character, double or another one) instead.\n\n\n# conclusion\n\nsometimes arrays are not flexible enough to store and manipulate your data. for that, java provides collections — mostly generic classes from the java standard library or external libraries, either mutable or immutable, that are more adjusted to store objects for specific complicated purposes. it\'ll take you more than one topic to learn even about basic types of collections that represent different data structures and serve different purposes. stay tuned!',charsets:{cjk:!0},lastUpdated:"2022/10/12, 17:01:25",lastUpdatedTimestamp:1665565285e3},{title:"Theory：Generics and Object",frontmatter:{title:"Theory：Generics and Object",date:"2022-09-28T16:29:42.000Z",permalink:"/pages/47e30b/",tags:["Generic","Java"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/03.%E5%BA%94%E7%9F%A5/103.Theory%EF%BC%9AGenerics%20and%20Object.html",relativePath:"01.Java/01.Hyperskill - Java/03.应知/103.Theory：Generics and Object.md",key:"v-68880222",path:"/pages/47e30b/",headers:[{level:2,title:"Reusing code with generics",slug:"reusing-code-with-generics",normalizedTitle:"reusing code with generics",charIndex:213},{level:2,title:"Reusing code with Object",slug:"reusing-code-with-object",normalizedTitle:"reusing code with object",charIndex:906},{level:2,title:"The advantage of generics: from run-time to compile-time",slug:"the-advantage-of-generics-from-run-time-to-compile-time",normalizedTitle:"the advantage of generics: from run-time to compile-time",charIndex:1791},{level:2,title:"Generics without specifying a type argument",slug:"generics-without-specifying-a-type-argument",normalizedTitle:"generics without specifying a type argument",charIndex:3216},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:3829}],headersStr:"Reusing code with generics Reusing code with Object The advantage of generics: from run-time to compile-time Generics without specifying a type argument Conclusion",content:'As you know, generics enable us to parameterize types when defining classes (or interfaces) and methods. Parameterized types make it possible to re-use the same code while processing different concrete types.\n\n\n# Reusing code with generics\n\nLet\'s consider a generic class named GenericType that stores a value of "some type".\n\nclass GenericType<T> { \n\n    private T t;\n\n    public GenericType(T t) {\n        this.t = t;\n    }\n\n    public T get() {\n        return t;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nIt is possible to create an object with a concrete type (e.g., String):\n\nGenericType<String> instance1 = new GenericType<>("abc");\nString str = instance1.get();\n\n\n1\n2\n\n\nWe can also create instances with other types (Integer, Character) and then invoke the get method to access the internal field. In this manner, generics allow us to use the same class and methods for processing different types.\n\n\n# Reusing code with Object\n\nBut there is another way to reuse code. If we declare a field of type Object, we can assign a value of any reference type to it. This approach was widely used before the introduction of generics in Java 5.\n\nThe following class demonstrates this concept:\n\nclass NonGenericClass {\n\n    private Object val;\n\n    public NonGenericClass(Object val) {\n        this.val = val;\n    }\n\n    public Object get() {\n        return val;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nNow we can create an instance of this class with the same string as in the previous example (see GenericType).\n\nNonGenericClass instance2 = new NonGenericClass("abc");\n\n\n1\n\n\nIt is also possible to create an instance by passing in a value of type Integer, Character, or any other reference type.\n\nUsing the Object class this way allows us to reuse the same class to store different data types.\n\n\n# The advantage of generics: from run-time to compile-time\n\nAfter an invocation of the get() method we obtain an Object, not a String or an Integer. We cannot get a string directly from the method.\n\nNonGenericClass instance2 = new NonGenericClass("abc");\nString str = instance2.get(); // Compile-time error: Incompatible types\n\n\n1\n2\n\n\nTo get the string back, we must perform an explicit type-cast to the String class.\n\nString str = (String) instance2.get(); // "abc"\n\n\n1\n\n\nThis works because a string was passed into instance2. But what if the instance does not store a string? If this is the case, the code throws an exception. Here is an example:\n\nNonGenericClass instance3 = new NonGenericClass(123);\nString str = (String) instance3.get(); // throws java.lang.ClassCastException\n\n\n1\n2\n\n\nNow we can see the main advantage of generics over the Object class. Because there is no need to perform an explicit type-cast, we never get a runtime exception. If we do something wrong, we can see it at compile-time.\n\nGenericType<String> instance4 = new GenericType<>("abc");\n        \nString str = instance4.get(); // There is no type-casting here\nInteger num = instance4.get(); // It does not compile\n\n\n1\n2\n3\n4\n\n\nA compile-time error will be detected by the programmer, not a user of the program. Because generics let the compiler take care of type casting, generics are both safer and more flexible compared to the Object class.\n\n\n# Generics without specifying a type argument\n\nWhen you create an instance of a generic class, you have the option to not specify an argument type at all.\n\nGenericType instance5 = new GenericType("my-string");\n\n\n1\n\n\nIn this case, the field of the class is Object, and the get method returns an Object as well.\n\nThe above code is equivalent to the following line:\n\nGenericType<Object> instance5 = new GenericType<>("abc"); // it is parameterized with Object\n\n\n1\n\n\nUsually, you will not use generics parameterized by Object due to the same problems as presented above. Just remember that this possibility exists.\n\n\n# Conclusion\n\nBoth generics and Object allow you to write generalized code. Using Object, however, may require explicit type-casting, which can lead to error-prone code. Generics provide type-safety by shifting type checking responsibilities to the Java compiler.',normalizedContent:'as you know, generics enable us to parameterize types when defining classes (or interfaces) and methods. parameterized types make it possible to re-use the same code while processing different concrete types.\n\n\n# reusing code with generics\n\nlet\'s consider a generic class named generictype that stores a value of "some type".\n\nclass generictype<t> { \n\n    private t t;\n\n    public generictype(t t) {\n        this.t = t;\n    }\n\n    public t get() {\n        return t;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nit is possible to create an object with a concrete type (e.g., string):\n\ngenerictype<string> instance1 = new generictype<>("abc");\nstring str = instance1.get();\n\n\n1\n2\n\n\nwe can also create instances with other types (integer, character) and then invoke the get method to access the internal field. in this manner, generics allow us to use the same class and methods for processing different types.\n\n\n# reusing code with object\n\nbut there is another way to reuse code. if we declare a field of type object, we can assign a value of any reference type to it. this approach was widely used before the introduction of generics in java 5.\n\nthe following class demonstrates this concept:\n\nclass nongenericclass {\n\n    private object val;\n\n    public nongenericclass(object val) {\n        this.val = val;\n    }\n\n    public object get() {\n        return val;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nnow we can create an instance of this class with the same string as in the previous example (see generictype).\n\nnongenericclass instance2 = new nongenericclass("abc");\n\n\n1\n\n\nit is also possible to create an instance by passing in a value of type integer, character, or any other reference type.\n\nusing the object class this way allows us to reuse the same class to store different data types.\n\n\n# the advantage of generics: from run-time to compile-time\n\nafter an invocation of the get() method we obtain an object, not a string or an integer. we cannot get a string directly from the method.\n\nnongenericclass instance2 = new nongenericclass("abc");\nstring str = instance2.get(); // compile-time error: incompatible types\n\n\n1\n2\n\n\nto get the string back, we must perform an explicit type-cast to the string class.\n\nstring str = (string) instance2.get(); // "abc"\n\n\n1\n\n\nthis works because a string was passed into instance2. but what if the instance does not store a string? if this is the case, the code throws an exception. here is an example:\n\nnongenericclass instance3 = new nongenericclass(123);\nstring str = (string) instance3.get(); // throws java.lang.classcastexception\n\n\n1\n2\n\n\nnow we can see the main advantage of generics over the object class. because there is no need to perform an explicit type-cast, we never get a runtime exception. if we do something wrong, we can see it at compile-time.\n\ngenerictype<string> instance4 = new generictype<>("abc");\n        \nstring str = instance4.get(); // there is no type-casting here\ninteger num = instance4.get(); // it does not compile\n\n\n1\n2\n3\n4\n\n\na compile-time error will be detected by the programmer, not a user of the program. because generics let the compiler take care of type casting, generics are both safer and more flexible compared to the object class.\n\n\n# generics without specifying a type argument\n\nwhen you create an instance of a generic class, you have the option to not specify an argument type at all.\n\ngenerictype instance5 = new generictype("my-string");\n\n\n1\n\n\nin this case, the field of the class is object, and the get method returns an object as well.\n\nthe above code is equivalent to the following line:\n\ngenerictype<object> instance5 = new generictype<>("abc"); // it is parameterized with object\n\n\n1\n\n\nusually, you will not use generics parameterized by object due to the same problems as presented above. just remember that this possibility exists.\n\n\n# conclusion\n\nboth generics and object allow you to write generalized code. using object, however, may require explicit type-casting, which can lead to error-prone code. generics provide type-safety by shifting type checking responsibilities to the java compiler.',charsets:{},lastUpdated:"2022/10/04, 21:45:45",lastUpdatedTimestamp:1664891145e3},{title:"Theory：The collections Framework overview",frontmatter:{title:"Theory：The collections Framework overview",date:"2022-09-30T09:26:21.000Z",permalink:"/pages/f03390/",tags:["Java","Collection"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/03.%E5%BA%94%E7%9F%A5/105.Theory%EF%BC%9AThe%20collections%20Framework%20overview.html",relativePath:"01.Java/01.Hyperskill - Java/03.应知/105.Theory：The collections Framework overview.md",key:"v-18dc29fb",path:"/pages/f03390/",headers:[{level:2,title:"Commonly used interfaces",slug:"commonly-used-interfaces",normalizedTitle:"commonly used interfaces",charIndex:841},{level:2,title:"The Collection interface",slug:"the-collection-interface",normalizedTitle:"the collection interface",charIndex:2207},{level:2,title:"Mutable and Immutable collections",slug:"mutable-and-immutable-collections",normalizedTitle:"mutable and immutable collections",charIndex:4375},{level:2,title:"Iterating over collections",slug:"iterating-over-collections",normalizedTitle:"iterating over collections",charIndex:4831},{level:2,title:"Removing elements",slug:"removing-elements",normalizedTitle:"removing elements",charIndex:5647},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:6347}],headersStr:"Commonly used interfaces The Collection interface Mutable and Immutable collections Iterating over collections Removing elements Conclusion",content:'Java provides the collections framework which consists of classes and interfaces for commonly reusable data structures such as lists, dynamic arrays, sets, and so on. The framework has a unified architecture for representing and manipulating collections, enabling collections to be used independently of implementation details via its interfaces.\n\nThe framework includes:\n\n * interfaces that represent different types of collections;\n * primary implementations of the interfaces;\n * legacy implementations from earlier releases (known as "old collections");\n * special-purpose implementations (like immutable collections);\n * algorithms represented by static methods that perform useful operations on collections.\n\nIn this topic, we will only consider the basic interfaces from the collections framework placed in the java.util package.\n\n\n# Commonly used interfaces\n\nThere are two root generic interfaces Collection<E> and Map<K,V>, and some more specific interfaces to represent different types of collections.\n\n\n\nThe interface Collection<E> represents an abstract collection, which is a container for objects of the same type. It provides some common methods for all other types of collections.\n\nThe interfaces List<E>, Set<E>, Queue<E>, SortedSet<E>, and Deque<E> represent different types of collections. You cannot directly create an object of them since they are just interfaces. But each of them has several implementations. As an example, the ArrayList class, that represents a resizable array, is a primary representation of the List<E> interface. Other interfaces, as well as their implementations, will be considered in the following topics.\n\nAnother root interface is Map<K,V> that represents a map (or dictionary) for storing key-value pairs where K is the type of keys and V is the type of stored values. In the real world, a good example of a map is a phone book where keys are names of your friends and values are their phones. The Map<K,V> interface is not a subtype of the Collection interface, but maps are often considered as collections since they are part of the collection framework and have similar methods.\n\n提示\n\nNote, the Collection and Map interfaces do not extend each other.\n\n\n# The Collection interface\n\nHere are common methods provided by the Collection interface.\n\n * int size() returns the number of elements in this collection;\n * boolean isEmpty() returns true if this collection contains no elements;\n * boolean contains(Object o) returns true if this collection contains the specified element;\n * boolean add(E e) adds an element to the collection. Returns true, if the element was added, else returns false;\n * boolean remove(Object o) removes a single instance of the specified element;\n * boolean removeAll(Collection<?> collection) removes elements from this collection that are also contained in the specified collection;\n * void clear() removes all elements from this collection.\n\nIt is possible to refer to any particular collection via this base interface since, as you know, the superclass can be used to refer to any subclass object derived from that superclass.\n\nLet\'s create languages collection and add three elements to it:\n\nCollection<String> languages = new ArrayList<>();\n\nlanguages.add("English");\nlanguages.add("Deutsch");\nlanguages.add("Français");\n\nSystem.out.println(languages.size()); // 3\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nThis approach allows you to replace the concrete collection at any time without changing the code that uses it. It also fosters software reuse by providing a standard interface for collections and algorithms to manipulate them. It may sound complicated now, but the more you work with collections, the more understandable it will become.\n\nIt is impossible to get an element by index via the Collection interface because it is very abstract and does not provide such a method. But if it doesn\'t matter for you which particular collection to use, you can work via this interface.\n\n注意\n\nIt is important to understand that the order of the elements in the ArrayList is still preserved. We simply cannot call the get method via the Collection interface.\n\nEvery collection can be cast to a string by using toString and compared with another collection using the equals method. These methods come from Object and their behavior depends on elements stored in the collection and the type of the collection itself.\n\n\n# Mutable and Immutable collections\n\nAll collections can be divided into two large groups: mutable and immutable. They both implement the Collection<E> interface, but immutable collections will throw UnsupportedOperationException when trying to invoke some methods which change them: for example, add, remove, clear.\n\nIn the next topics, we will consider how to create and when to use immutable collections. Now just remember that they are present here.\n\n\n# Iterating over collections\n\nIf you would like to iterate over all elements of any collection, you can use the for-each style loop. Let\'s return to our languages collection:\n\nfor (String lang : languages) {\n    System.out.println(lang);\n}\n\n\n1\n2\n3\n\n\nThis code prints all elements of this collection.\n\nEnglish\nDeutsch\nFrançais\n\n\n1\n2\n3\n\n\nThe order of elements when iterating depends on the type of particular collection that is actually being used.\n\nIf you are already familiar with method references or lambda expressions, you can use another style for iterations using the forEach(Consumer<T> consumer) method:\n\nlanguages.forEach(System.out::println); // with method reference\nlanguages.forEach(elem -> System.out.println(elem)); // with lambda expression\n\n\n1\n2\n\n\nThis looks very readable but is optional for use.\n\n\n# Removing elements\n\nIt is also possible to remove elements from a mutable collection (like ArrayList).\n\nlanguages.remove("Deutsch");\n\nSystem.out.println(languages.size()); // 2\n\n\n1\n2\n3\n\n\n提示\n\nNote, the remove as well as the contains methods rely on the method equals of the elements. If you store non-standard classes in the collection, equals together with hashCode should be overridden.\n\nAgain, if you are already familiar with lambda expressions, you can invoke the removeIf method to remove all of the elements that satisfy the given predicate:\n\nlanguages.removeIf(lang -> lang.startsWith("E")); // it removes English\n\nSystem.out.println(languages.size()); // 1\n\n\n1\n2\n3\n\n\nUse any way you like.\n\n\n# Conclusion\n\nJava collections framework provides a set of interfaces with common methods for different types of collections. We\'ve considered the Collection<E> interface which is an abstract container for storing values of the same type. Any particular collection (excluding maps) can be used through it in a program and can be iterated through by using the for-each loop or the forEach method.\n\nFor now, we confine ourselves to this much. All other interfaces including Map<K,V> will be considered in the following topics.',normalizedContent:'java provides the collections framework which consists of classes and interfaces for commonly reusable data structures such as lists, dynamic arrays, sets, and so on. the framework has a unified architecture for representing and manipulating collections, enabling collections to be used independently of implementation details via its interfaces.\n\nthe framework includes:\n\n * interfaces that represent different types of collections;\n * primary implementations of the interfaces;\n * legacy implementations from earlier releases (known as "old collections");\n * special-purpose implementations (like immutable collections);\n * algorithms represented by static methods that perform useful operations on collections.\n\nin this topic, we will only consider the basic interfaces from the collections framework placed in the java.util package.\n\n\n# commonly used interfaces\n\nthere are two root generic interfaces collection<e> and map<k,v>, and some more specific interfaces to represent different types of collections.\n\n\n\nthe interface collection<e> represents an abstract collection, which is a container for objects of the same type. it provides some common methods for all other types of collections.\n\nthe interfaces list<e>, set<e>, queue<e>, sortedset<e>, and deque<e> represent different types of collections. you cannot directly create an object of them since they are just interfaces. but each of them has several implementations. as an example, the arraylist class, that represents a resizable array, is a primary representation of the list<e> interface. other interfaces, as well as their implementations, will be considered in the following topics.\n\nanother root interface is map<k,v> that represents a map (or dictionary) for storing key-value pairs where k is the type of keys and v is the type of stored values. in the real world, a good example of a map is a phone book where keys are names of your friends and values are their phones. the map<k,v> interface is not a subtype of the collection interface, but maps are often considered as collections since they are part of the collection framework and have similar methods.\n\n提示\n\nnote, the collection and map interfaces do not extend each other.\n\n\n# the collection interface\n\nhere are common methods provided by the collection interface.\n\n * int size() returns the number of elements in this collection;\n * boolean isempty() returns true if this collection contains no elements;\n * boolean contains(object o) returns true if this collection contains the specified element;\n * boolean add(e e) adds an element to the collection. returns true, if the element was added, else returns false;\n * boolean remove(object o) removes a single instance of the specified element;\n * boolean removeall(collection<?> collection) removes elements from this collection that are also contained in the specified collection;\n * void clear() removes all elements from this collection.\n\nit is possible to refer to any particular collection via this base interface since, as you know, the superclass can be used to refer to any subclass object derived from that superclass.\n\nlet\'s create languages collection and add three elements to it:\n\ncollection<string> languages = new arraylist<>();\n\nlanguages.add("english");\nlanguages.add("deutsch");\nlanguages.add("francais");\n\nsystem.out.println(languages.size()); // 3\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nthis approach allows you to replace the concrete collection at any time without changing the code that uses it. it also fosters software reuse by providing a standard interface for collections and algorithms to manipulate them. it may sound complicated now, but the more you work with collections, the more understandable it will become.\n\nit is impossible to get an element by index via the collection interface because it is very abstract and does not provide such a method. but if it doesn\'t matter for you which particular collection to use, you can work via this interface.\n\n注意\n\nit is important to understand that the order of the elements in the arraylist is still preserved. we simply cannot call the get method via the collection interface.\n\nevery collection can be cast to a string by using tostring and compared with another collection using the equals method. these methods come from object and their behavior depends on elements stored in the collection and the type of the collection itself.\n\n\n# mutable and immutable collections\n\nall collections can be divided into two large groups: mutable and immutable. they both implement the collection<e> interface, but immutable collections will throw unsupportedoperationexception when trying to invoke some methods which change them: for example, add, remove, clear.\n\nin the next topics, we will consider how to create and when to use immutable collections. now just remember that they are present here.\n\n\n# iterating over collections\n\nif you would like to iterate over all elements of any collection, you can use the for-each style loop. let\'s return to our languages collection:\n\nfor (string lang : languages) {\n    system.out.println(lang);\n}\n\n\n1\n2\n3\n\n\nthis code prints all elements of this collection.\n\nenglish\ndeutsch\nfrancais\n\n\n1\n2\n3\n\n\nthe order of elements when iterating depends on the type of particular collection that is actually being used.\n\nif you are already familiar with method references or lambda expressions, you can use another style for iterations using the foreach(consumer<t> consumer) method:\n\nlanguages.foreach(system.out::println); // with method reference\nlanguages.foreach(elem -> system.out.println(elem)); // with lambda expression\n\n\n1\n2\n\n\nthis looks very readable but is optional for use.\n\n\n# removing elements\n\nit is also possible to remove elements from a mutable collection (like arraylist).\n\nlanguages.remove("deutsch");\n\nsystem.out.println(languages.size()); // 2\n\n\n1\n2\n3\n\n\n提示\n\nnote, the remove as well as the contains methods rely on the method equals of the elements. if you store non-standard classes in the collection, equals together with hashcode should be overridden.\n\nagain, if you are already familiar with lambda expressions, you can invoke the removeif method to remove all of the elements that satisfy the given predicate:\n\nlanguages.removeif(lang -> lang.startswith("e")); // it removes english\n\nsystem.out.println(languages.size()); // 1\n\n\n1\n2\n3\n\n\nuse any way you like.\n\n\n# conclusion\n\njava collections framework provides a set of interfaces with common methods for different types of collections. we\'ve considered the collection<e> interface which is an abstract container for storing values of the same type. any particular collection (excluding maps) can be used through it in a program and can be iterated through by using the for-each loop or the foreach method.\n\nfor now, we confine ourselves to this much. all other interfaces including map<k,v> will be considered in the following topics.',charsets:{cjk:!0},lastUpdated:"2022/10/12, 17:01:25",lastUpdatedTimestamp:1665565285e3},{title:"Theory：ArrayList",frontmatter:{title:"Theory：ArrayList",date:"2022-10-04T17:23:21.000Z",permalink:"/pages/0d095f/",tags:["Java","Collection"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/03.%E5%BA%94%E7%9F%A5/106.Theory%EF%BC%9AArrayList.html",relativePath:"01.Java/01.Hyperskill - Java/03.应知/106.Theory：ArrayList.md",key:"v-14d43fa8",path:"/pages/0d095f/",headers:[{level:2,title:"Resizable arrays",slug:"resizable-arrays",normalizedTitle:"resizable arrays",charIndex:2},{level:2,title:"Creating an instance of ArrayList",slug:"creating-an-instance-of-arraylist",normalizedTitle:"creating an instance of arraylist",charIndex:938},{level:2,title:"Basic methods",slug:"basic-methods",normalizedTitle:"basic methods",charIndex:2119},{level:2,title:"More ArrayList methods",slug:"more-arraylist-methods",normalizedTitle:"more arraylist methods",charIndex:4518},{level:2,title:"Iterating over ArrayList",slug:"iterating-over-arraylist",normalizedTitle:"iterating over arraylist",charIndex:5947},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:6629}],headersStr:"Resizable arrays Creating an instance of ArrayList Basic methods More ArrayList methods Iterating over ArrayList Conclusion",content:'# Resizable arrays\n\nOne of the most widely used classes of Java Class Library is a class named ArrayList that represents a resizable array of objects of a specified type. Unlike the standard array denoted as [], it can dynamically grow after the addition and shrink after the removal of its elements. This behavior is very useful if you do not know the size of the array in advance or you need one that can change size over the lifetime of a program.\n\nIn fact, this class is built on top of a standard Java array, extending it with a set of convenient operations. Like a standard array, it allows getting the current number of elements (its size) as well as accessing its elements by their indexes.\n\nThere is only one restriction: ArrayList: being a generic class, it cannot store primitive types. However, it can store any reference types, including String\'s, wrapper classes (like Integer\'s), other ArrayList\'s, and custom classes.\n\n\n# Creating an instance of ArrayList\n\nTo start using the class by its short name, make the following import:\n\nimport java.util.ArrayList;\n\n\n1\n\n\nLet\'s consider several ways to create instances of this class.\n\n\\1) The simplest way is to use a no-argument constructor:\n\nArrayList<String> list = new ArrayList<>();\n\n\n1\n\n\nThe created list is empty, but its initial capacity is 10 (by default).\n\n\\2) We can also specify the initial capacity of it:\n\nArrayList<String> list = new ArrayList<>(50);\n\n\n1\n\n\nThis list is empty, but its initial capacity is set to 50.\n\n\\3) Or you can construct an ArrayList that consists of elements of another list:\n\nArrayList<String> list = new ArrayList<>(anotherList);\n\n\n1\n\n\nRegardless of how you create an instance of ArrayList, its size will dynamically change. In this lesson, we will create a list with the default capacity like in the first example.\n\n提示\n\nIf you are an advanced user, you know that it is better to create and use an ArrayList via its List interface. We will do it in the next lessons after learning inheritance. We believe that the current approach is enough for now since it requires less knowledge to start using dynamic collections.\n\n\n# Basic methods\n\nThe collection has a set of convenient methods that emulate and extend the functionality of standard arrays. Let\'s discuss what they are. First, let\'s initialize some collection:\n\nArrayList<String> names = new ArrayList<>(); // empty collection of strings\n\n\n1\n\n\nFirst of all, there\'s a method to determine the size of the collection size that returns the number of elements of the list. Let\'s try learning the size of ours:\n\nSystem.out.println(names.size()); // 0\n\n\n1\n\n\nAs expected, it is empty and the result is zero. We also might want to learn the value of the specified position of the object. For that, collections have a get(int index) method that returns the object of the list which is present at the specified index.\n\nNext, there are a bunch of methods to add elements and set values of a collection:\n\n * add(Object o) adds a passed element to the last position of the collection;\n * add(int index, Object o) adds a passed element to the specified position of the collection;\n * set(int index, Object o) replaces the element present at the specified index with the object;\n\nLet\'s add some names to our collection:\n\nnames.add("Justin");      // [Justin]\nnames.add("Helen");       // [Justin, Helen]\nnames.add(1, "Joshua");   // [Justin, Joshua, Helen]\nnames.add(0, "Laura");    // [Laura, Justin, Joshua, Helen]\n\n\n1\n2\n3\n4\n\n\nAnd replace one name with another:\n\nnames.set(3, "Marie"); // now: [Laura, Justin, Joshua, Marie]\n\n\n1\n\n\nWe can check that everything is as expected:\n\nSystem.out.println(names);        // [Laura, Justin, Joshua, Marie]\nSystem.out.println(names.size()); // 4\nSystem.out.println(names.get(0)); // the first element is "Laura"\nSystem.out.println(names.get(3)); // the last element is "Marie"\n\n\n1\n2\n3\n4\n\n\nFinally, there are methods for removing elements from the collection:\n\n * remove(Object o) removes the first occurrence of the specified element from this list, if it is present;\n * remove(int index) removes the element at the specified position in this list;\n * clear() removes all elements from the collection.\n\nLet\'s try removing elements by value and index:\n\nnames.remove("Justin"); // [Laura, Joshua, Marie]\nnames.remove(1);        // [Laura, Marie]\nnames.clear();          // []\n\n\n1\n2\n3\n\n\n注意\n\nImportant: indexes of elements start with 0 just like for standard arrays\n\nTry to play with this code by yourself and enjoy the power of ArrayList .\n\n\n# More ArrayList methods\n\nWe\'ve illustrated the possibilities of basic methods for collections in Java applied to an ArrayList object. But this class has some more methods of its own. First, let\'s create another ArrayList:\n\n/* an ArrayList of Integers, not ints */\nArrayList<Integer> numbers = new ArrayList<>();\n\nnumbers.add(1);\nnumbers.add(2);\nnumbers.add(3);\nnumbers.add(1);\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nThere\'s also an addAll(Collection c) method for adding the whole collection to an ArrayList. It appends elements of the provided collection to the end of the list:\n\nArrayList<Integer> numbers2 = new ArrayList<>();    // creating another list of Integers\nnumbers2.add(100);\nnumbers2.addAll(numbers); // [100, 1, 2, 3, 1]\n\n\n1\n2\n3\n\n\nThe class also has a method called contains that checks whether a list contains a value or not, and two methods indexOfandlastIndexOf that find the index of the first and the last occurrences of an element, respectively. They return -1 if there is no such element.\n\nLet\'s see:\n\nSystem.out.println(numbers2.contains(2));    // true\nSystem.out.println(numbers2.contains(4));    // false\nSystem.out.println(numbers2.indexOf(1));     // 1\nSystem.out.println(numbers2.lastIndexOf(1)); // 4\nSystem.out.println(numbers2.lastIndexOf(4)); // -1\n\n\n1\n2\n3\n4\n5\n\n\nAs you see, this class provides a rich set of methods to work with elements. You do not have to write them by yourself, as you do for standard arrays.\n\n\n# Iterating over ArrayList\n\nIt is possible to iterate over elements of an instance of the class. It is done in the same way as iterating over an array. In the following example, we use for and for-each loops to add the five first powers of ten in a list and then print the numbers to the standard output.\n\nArrayList<Long> powersOfTen = new ArrayList<>();\n\nint count = 5;\nfor (int i = 0; i < count; i++) {\n    long power = (long) Math.pow(10, i);\n    powersOfTen.add(power);\n}\n\nfor (Long value : powersOfTen) {\n    System.out.print(value + " ");\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\nThe code prints the following:\n\n1 10 100 1000 10000 \n\n\n1\n\n\nIt is not harder than using a standard array.\n\n\n# Conclusion\n\nWe\'ve considered the ArrayList class from the java.util package. This class is similar to standard Java arrays but has the possibility to dynamically change its size. It has methods to get the size, add, remove and access elements by their indexes. In addition, ArrayList provides a set of useful methods that check whether an element is present in the array and find it. A regular array does not have such methods built-in.',normalizedContent:'# resizable arrays\n\none of the most widely used classes of java class library is a class named arraylist that represents a resizable array of objects of a specified type. unlike the standard array denoted as [], it can dynamically grow after the addition and shrink after the removal of its elements. this behavior is very useful if you do not know the size of the array in advance or you need one that can change size over the lifetime of a program.\n\nin fact, this class is built on top of a standard java array, extending it with a set of convenient operations. like a standard array, it allows getting the current number of elements (its size) as well as accessing its elements by their indexes.\n\nthere is only one restriction: arraylist: being a generic class, it cannot store primitive types. however, it can store any reference types, including string\'s, wrapper classes (like integer\'s), other arraylist\'s, and custom classes.\n\n\n# creating an instance of arraylist\n\nto start using the class by its short name, make the following import:\n\nimport java.util.arraylist;\n\n\n1\n\n\nlet\'s consider several ways to create instances of this class.\n\n\\1) the simplest way is to use a no-argument constructor:\n\narraylist<string> list = new arraylist<>();\n\n\n1\n\n\nthe created list is empty, but its initial capacity is 10 (by default).\n\n\\2) we can also specify the initial capacity of it:\n\narraylist<string> list = new arraylist<>(50);\n\n\n1\n\n\nthis list is empty, but its initial capacity is set to 50.\n\n\\3) or you can construct an arraylist that consists of elements of another list:\n\narraylist<string> list = new arraylist<>(anotherlist);\n\n\n1\n\n\nregardless of how you create an instance of arraylist, its size will dynamically change. in this lesson, we will create a list with the default capacity like in the first example.\n\n提示\n\nif you are an advanced user, you know that it is better to create and use an arraylist via its list interface. we will do it in the next lessons after learning inheritance. we believe that the current approach is enough for now since it requires less knowledge to start using dynamic collections.\n\n\n# basic methods\n\nthe collection has a set of convenient methods that emulate and extend the functionality of standard arrays. let\'s discuss what they are. first, let\'s initialize some collection:\n\narraylist<string> names = new arraylist<>(); // empty collection of strings\n\n\n1\n\n\nfirst of all, there\'s a method to determine the size of the collection size that returns the number of elements of the list. let\'s try learning the size of ours:\n\nsystem.out.println(names.size()); // 0\n\n\n1\n\n\nas expected, it is empty and the result is zero. we also might want to learn the value of the specified position of the object. for that, collections have a get(int index) method that returns the object of the list which is present at the specified index.\n\nnext, there are a bunch of methods to add elements and set values of a collection:\n\n * add(object o) adds a passed element to the last position of the collection;\n * add(int index, object o) adds a passed element to the specified position of the collection;\n * set(int index, object o) replaces the element present at the specified index with the object;\n\nlet\'s add some names to our collection:\n\nnames.add("justin");      // [justin]\nnames.add("helen");       // [justin, helen]\nnames.add(1, "joshua");   // [justin, joshua, helen]\nnames.add(0, "laura");    // [laura, justin, joshua, helen]\n\n\n1\n2\n3\n4\n\n\nand replace one name with another:\n\nnames.set(3, "marie"); // now: [laura, justin, joshua, marie]\n\n\n1\n\n\nwe can check that everything is as expected:\n\nsystem.out.println(names);        // [laura, justin, joshua, marie]\nsystem.out.println(names.size()); // 4\nsystem.out.println(names.get(0)); // the first element is "laura"\nsystem.out.println(names.get(3)); // the last element is "marie"\n\n\n1\n2\n3\n4\n\n\nfinally, there are methods for removing elements from the collection:\n\n * remove(object o) removes the first occurrence of the specified element from this list, if it is present;\n * remove(int index) removes the element at the specified position in this list;\n * clear() removes all elements from the collection.\n\nlet\'s try removing elements by value and index:\n\nnames.remove("justin"); // [laura, joshua, marie]\nnames.remove(1);        // [laura, marie]\nnames.clear();          // []\n\n\n1\n2\n3\n\n\n注意\n\nimportant: indexes of elements start with 0 just like for standard arrays\n\ntry to play with this code by yourself and enjoy the power of arraylist .\n\n\n# more arraylist methods\n\nwe\'ve illustrated the possibilities of basic methods for collections in java applied to an arraylist object. but this class has some more methods of its own. first, let\'s create another arraylist:\n\n/* an arraylist of integers, not ints */\narraylist<integer> numbers = new arraylist<>();\n\nnumbers.add(1);\nnumbers.add(2);\nnumbers.add(3);\nnumbers.add(1);\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nthere\'s also an addall(collection c) method for adding the whole collection to an arraylist. it appends elements of the provided collection to the end of the list:\n\narraylist<integer> numbers2 = new arraylist<>();    // creating another list of integers\nnumbers2.add(100);\nnumbers2.addall(numbers); // [100, 1, 2, 3, 1]\n\n\n1\n2\n3\n\n\nthe class also has a method called contains that checks whether a list contains a value or not, and two methods indexofandlastindexof that find the index of the first and the last occurrences of an element, respectively. they return -1 if there is no such element.\n\nlet\'s see:\n\nsystem.out.println(numbers2.contains(2));    // true\nsystem.out.println(numbers2.contains(4));    // false\nsystem.out.println(numbers2.indexof(1));     // 1\nsystem.out.println(numbers2.lastindexof(1)); // 4\nsystem.out.println(numbers2.lastindexof(4)); // -1\n\n\n1\n2\n3\n4\n5\n\n\nas you see, this class provides a rich set of methods to work with elements. you do not have to write them by yourself, as you do for standard arrays.\n\n\n# iterating over arraylist\n\nit is possible to iterate over elements of an instance of the class. it is done in the same way as iterating over an array. in the following example, we use for and for-each loops to add the five first powers of ten in a list and then print the numbers to the standard output.\n\narraylist<long> powersoften = new arraylist<>();\n\nint count = 5;\nfor (int i = 0; i < count; i++) {\n    long power = (long) math.pow(10, i);\n    powersoften.add(power);\n}\n\nfor (long value : powersoften) {\n    system.out.print(value + " ");\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\nthe code prints the following:\n\n1 10 100 1000 10000 \n\n\n1\n\n\nit is not harder than using a standard array.\n\n\n# conclusion\n\nwe\'ve considered the arraylist class from the java.util package. this class is similar to standard java arrays but has the possibility to dynamically change its size. it has methods to get the size, add, remove and access elements by their indexes. in addition, arraylist provides a set of useful methods that check whether an element is present in the array and find it. a regular array does not have such methods built-in.',charsets:{cjk:!0},lastUpdated:"2022/10/12, 17:01:25",lastUpdatedTimestamp:1665565285e3},{title:"Theory：The List interface",frontmatter:{title:"Theory：The List interface",date:"2022-10-04T17:25:30.000Z",permalink:"/pages/0d55d4/",tags:["Collection","Java"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/03.%E5%BA%94%E7%9F%A5/107.Theory%EF%BC%9AThe%20List%20interface.html",relativePath:"01.Java/01.Hyperskill - Java/03.应知/107.Theory：The List interface.md",key:"v-67fed644",path:"/pages/0d55d4/",headers:[{level:2,title:"The List interface",slug:"the-list-interface",normalizedTitle:"the list interface",charIndex:462},{level:2,title:"Immutable lists",slug:"immutable-lists",normalizedTitle:"immutable lists",charIndex:1826},{level:2,title:"Mutable lists",slug:"mutable-lists",normalizedTitle:"mutable lists",charIndex:3574},{level:2,title:"Iterating over a list",slug:"iterating-over-a-list",normalizedTitle:"iterating over a list",charIndex:5531},{level:2,title:"List equality",slug:"list-equality",normalizedTitle:"list equality",charIndex:6168}],headersStr:"The List interface Immutable lists Mutable lists Iterating over a list List equality",content:'As you know, lists are the closest type to arrays, except their size can be changed dynamically while an array\'s size is constrained. Moreover, lists provide more advanced behavior than arrays. In this topic, you will deepen your knowledge of lists and their relationship with the Collections Framework.\n\nA list is an ordered collection of elements. It means that each element has a position in the list specified by an integer index like in regular arrays.\n\n\n# The List interface\n\nThe List<E> interface represents a list as an abstract data type. It extends the Collection<E> interface acquiring its methods and adds some new methods:\n\n * E set(int index, E element) replaces the element at the specified position in this list with the specified element and returns the element that was replaced;\n * E get(int index) returns the element at the specified position in the list;\n * int indexOf(Object obj) returns the index of the first occurrence of the element in the list or -1 if there is no such element;\n * int lastIndexOf(Object obj) returns the index of the last occurrence of the element in the list or -1 if there is no such element;\n * List<E> subList(int fromIndex, int toIndex) returns a sublist of this list from fromIndex included totoIndex excluded.\n\nAs you can see, the methods presume that a list is an ordered collection.\n\nYou cannot create an instance of the List interface, but you can create an instance of one of its implementations: ArrayList or LinkedList or an immutable list, and then use it through the common List interface. You will have access to all methods declared in both List<E> and Collection<E> interfaces.\n\nWorking with lists through the List interface is considered good practice in programming since your code will not depend on the internal mechanisms of a specific implementation.\n\n\n# Immutable lists\n\nThe simplest way to create a list is to invoke the of method of the List interface.\n\nList<String> emptyList = List.of(); // 0 elements\nList<String> names = List.of("Larry", "Kenny", "Sabrina"); // 3 elements\nList<Integer> numbers = List.of(0, 1, 1, 2, 3, 5, 8, 13);  // 8 elements\n\n\n1\n2\n3\n\n\nIt returns an immutable list containing either all the passed elements or an empty list. Using this method is convenient when creating a list of constants or testing some code.\n\nLet\'s perform some operations:\n\nList<String> daysOfWeek = List.of(\n        "Monday",\n        "Tuesday",\n        "Wednesday",\n        "Thursday",\n        "Friday",\n        "Saturday",\n        "Sunday"\n);\n\nSystem.out.println(daysOfWeek.size()); // 7\nSystem.out.println(daysOfWeek.get(1)); // Tuesday\nSystem.out.println(daysOfWeek.indexOf("Sunday")); // 6\n\nList<String> weekDays = daysOfWeek.subList(0, 5);\nSystem.out.println(weekDays); // [Monday, Tuesday, Wednesday, Thursday, Friday]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\nSince it is immutable, only methods that do not change the elements in the list will work. Others will throw an exception.\n\ndaysOfWeek.set(0, "Funday"); // throws UnsupportedOperationException\ndaysOfWeek.add("Holiday");   // throws UnsupportedOperationException\n\n\n1\n2\n\n\nThis situation clearly demonstrates when immutable lists are needed. It\'s hard to imagine that someone renames a day or adds another one!\n\nBe careful when working with immutable lists. Sometimes even experienced developers get UnsupportedOperationException.\n\nAnother way to create unmodifiable lists introduced before Java 9 was the following:\n\nList<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);\n\n\n1\n\n\nTo use it, the class java.util.Arrays must be imported.\n\n\n# Mutable lists\n\nWhen you need to use a mutable list, you can take one of two commonly used mutable implementations of the List interface.\n\nOne of them is familiar to you: the ArrayList<E> class. It represents a resizable array. In addition to implementing the List interface, it provides methods to manipulate the size of the array that is used internally. These methods are not needed in programs often, so it is better to use an object of this class through the List interface.\n\nList<Integer> numbers = new ArrayList<>();\n\nnumbers.add(15);\nnumbers.add(10);\nnumbers.add(20);\n\nSystem.out.println(numbers); // [15, 10, 20]\n\nnumbers.set(0, 30); // no exceptions here\n\nSystem.out.println(numbers); // [30, 10, 20]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\nIf you have an immutable list, you can take the mutable version from it using the following code:\n\nList<String> immutableList = Arrays.asList("one", "two", "three");\nList<String> mutableList = new ArrayList<>(immutableList); \n\n\n1\n2\n\n\nAnother mutable implementation of the List interface is the LinkedList class. It represents a doubly-linked list based on connected nodes. All operations that index into the list will traverse the list from the beginning or from the end, whichever is closer to the specified index.\n\nList<Integer> numbers = new LinkedList<>();\n        \nnumbers.add(10);\nnumbers.add(20);\nnumbers.add(30);\n\nSystem.out.println(numbers); // [10, 20, 30]\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nAccess to the first and the last element of the list is always carried out in constant time O(1) because links are permanently stored in the first and the last element, so adding an item to the end of the list does not mean that you have to iterate the whole list in search of the last element. But accessing/setting an element by its index takes O(n) time for a linked list.\n\nIn the general case, LinkedList loses to ArrayList in memory consumption and speed of operations. But it depends on the problem you are trying to solve.\n\n\n# Iterating over a list\n\nThere are no problems to iterate over elements of a list.\n\nList<String> names = List.of("Larry", "Kenny", "Sabrina");\n\n\n1\n\n\n\\1) Using the "for-each" loop:\n\n// print every name\nfor (String name : names) {\n    System.out.println(name);\n}\n\n\n1\n2\n3\n4\n\n\n\\2) Using indexes and the size() method:\n\n// print every second name\nfor (int i = 0; i < names.size(); i += 2) {\n    System.out.println(names.get(i));\n}\n\n\n1\n2\n3\n4\n\n\nWhen you need to go through all elements of a list, we recommend choosing the first way to iterate. The second way is good when you need to skip some elements based on their positions in the list.\n\n\n# List equality\n\nThe final question is how lists are compared. Two lists are equal when they contain the same elements in the same order. The equality does not depend on the types of the lists themselves (ArrayList, LinkedList or something else).\n\nObjects.equals(List.of(1, 2, 3), List.of(1, 2, 3));    // true\nObjects.equals(List.of(1, 2, 3), List.of(1, 3, 2));    // false\nObjects.equals(List.of(1, 2, 3), List.of(1, 2, 3, 1)); // false\n\nList<Integer> numbers = new ArrayList<>();\n        \nnumbers.add(1);\nnumbers.add(2);\nnumbers.add(3);\n\nObjects.equals(numbers, List.of(1, 2, 3)); // true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\nWith this, we have finished our discussion of the List interface and common features for all lists. There was a lot of theory. If there\'s something you do not yet understand, try to practice and go back to the theory when questions arise.',normalizedContent:'as you know, lists are the closest type to arrays, except their size can be changed dynamically while an array\'s size is constrained. moreover, lists provide more advanced behavior than arrays. in this topic, you will deepen your knowledge of lists and their relationship with the collections framework.\n\na list is an ordered collection of elements. it means that each element has a position in the list specified by an integer index like in regular arrays.\n\n\n# the list interface\n\nthe list<e> interface represents a list as an abstract data type. it extends the collection<e> interface acquiring its methods and adds some new methods:\n\n * e set(int index, e element) replaces the element at the specified position in this list with the specified element and returns the element that was replaced;\n * e get(int index) returns the element at the specified position in the list;\n * int indexof(object obj) returns the index of the first occurrence of the element in the list or -1 if there is no such element;\n * int lastindexof(object obj) returns the index of the last occurrence of the element in the list or -1 if there is no such element;\n * list<e> sublist(int fromindex, int toindex) returns a sublist of this list from fromindex included totoindex excluded.\n\nas you can see, the methods presume that a list is an ordered collection.\n\nyou cannot create an instance of the list interface, but you can create an instance of one of its implementations: arraylist or linkedlist or an immutable list, and then use it through the common list interface. you will have access to all methods declared in both list<e> and collection<e> interfaces.\n\nworking with lists through the list interface is considered good practice in programming since your code will not depend on the internal mechanisms of a specific implementation.\n\n\n# immutable lists\n\nthe simplest way to create a list is to invoke the of method of the list interface.\n\nlist<string> emptylist = list.of(); // 0 elements\nlist<string> names = list.of("larry", "kenny", "sabrina"); // 3 elements\nlist<integer> numbers = list.of(0, 1, 1, 2, 3, 5, 8, 13);  // 8 elements\n\n\n1\n2\n3\n\n\nit returns an immutable list containing either all the passed elements or an empty list. using this method is convenient when creating a list of constants or testing some code.\n\nlet\'s perform some operations:\n\nlist<string> daysofweek = list.of(\n        "monday",\n        "tuesday",\n        "wednesday",\n        "thursday",\n        "friday",\n        "saturday",\n        "sunday"\n);\n\nsystem.out.println(daysofweek.size()); // 7\nsystem.out.println(daysofweek.get(1)); // tuesday\nsystem.out.println(daysofweek.indexof("sunday")); // 6\n\nlist<string> weekdays = daysofweek.sublist(0, 5);\nsystem.out.println(weekdays); // [monday, tuesday, wednesday, thursday, friday]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\nsince it is immutable, only methods that do not change the elements in the list will work. others will throw an exception.\n\ndaysofweek.set(0, "funday"); // throws unsupportedoperationexception\ndaysofweek.add("holiday");   // throws unsupportedoperationexception\n\n\n1\n2\n\n\nthis situation clearly demonstrates when immutable lists are needed. it\'s hard to imagine that someone renames a day or adds another one!\n\nbe careful when working with immutable lists. sometimes even experienced developers get unsupportedoperationexception.\n\nanother way to create unmodifiable lists introduced before java 9 was the following:\n\nlist<integer> numbers = arrays.aslist(1, 2, 3, 4, 5);\n\n\n1\n\n\nto use it, the class java.util.arrays must be imported.\n\n\n# mutable lists\n\nwhen you need to use a mutable list, you can take one of two commonly used mutable implementations of the list interface.\n\none of them is familiar to you: the arraylist<e> class. it represents a resizable array. in addition to implementing the list interface, it provides methods to manipulate the size of the array that is used internally. these methods are not needed in programs often, so it is better to use an object of this class through the list interface.\n\nlist<integer> numbers = new arraylist<>();\n\nnumbers.add(15);\nnumbers.add(10);\nnumbers.add(20);\n\nsystem.out.println(numbers); // [15, 10, 20]\n\nnumbers.set(0, 30); // no exceptions here\n\nsystem.out.println(numbers); // [30, 10, 20]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\nif you have an immutable list, you can take the mutable version from it using the following code:\n\nlist<string> immutablelist = arrays.aslist("one", "two", "three");\nlist<string> mutablelist = new arraylist<>(immutablelist); \n\n\n1\n2\n\n\nanother mutable implementation of the list interface is the linkedlist class. it represents a doubly-linked list based on connected nodes. all operations that index into the list will traverse the list from the beginning or from the end, whichever is closer to the specified index.\n\nlist<integer> numbers = new linkedlist<>();\n        \nnumbers.add(10);\nnumbers.add(20);\nnumbers.add(30);\n\nsystem.out.println(numbers); // [10, 20, 30]\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\naccess to the first and the last element of the list is always carried out in constant time o(1) because links are permanently stored in the first and the last element, so adding an item to the end of the list does not mean that you have to iterate the whole list in search of the last element. but accessing/setting an element by its index takes o(n) time for a linked list.\n\nin the general case, linkedlist loses to arraylist in memory consumption and speed of operations. but it depends on the problem you are trying to solve.\n\n\n# iterating over a list\n\nthere are no problems to iterate over elements of a list.\n\nlist<string> names = list.of("larry", "kenny", "sabrina");\n\n\n1\n\n\n\\1) using the "for-each" loop:\n\n// print every name\nfor (string name : names) {\n    system.out.println(name);\n}\n\n\n1\n2\n3\n4\n\n\n\\2) using indexes and the size() method:\n\n// print every second name\nfor (int i = 0; i < names.size(); i += 2) {\n    system.out.println(names.get(i));\n}\n\n\n1\n2\n3\n4\n\n\nwhen you need to go through all elements of a list, we recommend choosing the first way to iterate. the second way is good when you need to skip some elements based on their positions in the list.\n\n\n# list equality\n\nthe final question is how lists are compared. two lists are equal when they contain the same elements in the same order. the equality does not depend on the types of the lists themselves (arraylist, linkedlist or something else).\n\nobjects.equals(list.of(1, 2, 3), list.of(1, 2, 3));    // true\nobjects.equals(list.of(1, 2, 3), list.of(1, 3, 2));    // false\nobjects.equals(list.of(1, 2, 3), list.of(1, 2, 3, 1)); // false\n\nlist<integer> numbers = new arraylist<>();\n        \nnumbers.add(1);\nnumbers.add(2);\nnumbers.add(3);\n\nobjects.equals(numbers, list.of(1, 2, 3)); // true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\nwith this, we have finished our discussion of the list interface and common features for all lists. there was a lot of theory. if there\'s something you do not yet understand, try to practice and go back to the theory when questions arise.',charsets:{},lastUpdated:"2022/10/12, 17:01:25",lastUpdatedTimestamp:1665565285e3},{title:"Theory：Comparable",frontmatter:{title:"Theory：Comparable",date:"2022-10-06T21:29:22.000Z",permalink:"/pages/03f897/",tags:["Java","Collection"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/03.%E5%BA%94%E7%9F%A5/108.Theory%EF%BC%9AComparable.html",relativePath:"01.Java/01.Hyperskill - Java/03.应知/108.Theory：Comparable.md",key:"v-2c8ff494",path:"/pages/03f897/",headers:[{level:2,title:"Preparing to compare",slug:"preparing-to-compare",normalizedTitle:"preparing to compare",charIndex:628},{level:2,title:"Comparable interface",slug:"comparable-interface",normalizedTitle:"comparable interface",charIndex:505},{level:2,title:"Implementing the compareTo method",slug:"implementing-the-compareto-method",normalizedTitle:"implementing the compareto method",charIndex:3617},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:7583}],headersStr:"Preparing to compare Comparable interface Implementing the compareTo method Conclusion",content:'While working with data, you will likely need to order it in a convenient way. For example, you may have to put numbers in ascending order, group lines in alphabetical order, and organize anything you work with by date, by price, or by other custom characteristics.\n\nIn Java, it\'s possible to implement various sorting algorithms for any type of data. What if you have to work with custom types, sort elements of a collection, and try to compare objects that are not directly comparable? That\'s where the Comparable interface comes in handy. In this topic, we will learn all about this interface and its compareTo() method.\n\n\n# Preparing to compare\n\nLet\'s look at an example. We created a list of Integer\'s, added some elements and then sorted them.\n\npublic static void main(String[] args) {\n    List<Integer> list = new ArrayList<>();\n    list.add(55);\n    list.add(13);\n    list.add(47);\n\n    Collections.sort(list);\n    System.out.println(list);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nAs expected, we get:\n\n[13, 47, 55]\n\n\n1\n\n\nNow, let\'s create a simple class Carwhere we want to sort cars by their numbers.\n\npublic class Car {\n    private int number;\n    private String model;\n    private String color;\n    private int weight;\n\n    // constructor\n\n    // getters, setters\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nNow we try to write some code for the main method, create our collection and sort it using the Collections.sort() method.\n\npublic static void main(String[] args) {\n    List<Car> cars = new ArrayList<>();\n    Car car1 = new Car(876, "BMW", "white", 1400);\n    Car car2 = new Car(345, "Mercedes", "black", 2000);\n    Car car3 = new Car(470, "Volvo", "blue", 1800);\n    cars.add(car1);\n    cars.add(car2);\n    cars.add(car3);\n\n    Collections.sort(cars);\n    System.out.println(cars);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nAs a result, we get a compilation error:\n\nThe method sort(List) in the type Collections \n  is not applicable for the arguments (ArrayList)\n\n\n1\n2\n\n\nThe reason for this is that standard classes like Integer, String and so on implement a special interface, so we can compare them without any problems. As for our custom class Car, it doesn\'t work like that. Let\'s see how we can fix this.\n\n\n# Comparable interface\n\nComparable` provides the `compareTo()` method which allows comparing an object with other objects of the same type. It\'s also important to comply with the conditions: all objects can be compared to other objects of the same type in the most widely used way, which means `compareTo()` should be consistent with the `equals` method. A sequence of data has the **natural ordering**, if for each 2 elements `a` and `b`, where `a` is located to the left of `b`, the condition is true: `a.compareTo(b) <= 0\n\n\n1\n\n\nIt\'s easy to understand how to compare an Integer or String because they already implement the Comparable interface, but how do we compare objects of our custom type? We can do it in different ways depending on the task. We can compare them by any single field or several fields.\n\nTo be able to sort, we must rewrite our Car class using the Comparable interface. For example, we can compare our Car objects by their number. Here\'s how you can implement it:\n\npublic class Car implements Comparable<Car> {\n\n    private int number;\n    private String model;\n    private String color;\n    private int weight;\n\n    // constructor\n\n    // getters, setters\n\n    @Override\n    public int compareTo(Car otherCar) {\n        return Integer.valueOf(getNumber()).compareTo(otherCar.getNumber());\n    }\n\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\nNow if we run our new code we get the correct result.\n\n\n# Implementing the compareTo method\n\nLet\'s talk about the compareTo() method. It compares the current object with the object sent as a parameter. To implement it correctly we need to make sure that the method returns:\n\n * A positive integer (for example, 1), if the current object is greater;\n * A negative integer (for example, -1), if the current object is less;\n * Zero, if they are equal.\n\nBelow you can see an example of how the compareTo() method is implemented in the Integer class.\n\n@Override\npublic int compareTo(Integer anotherInteger) {\n    return compare(this.value, anotherInteger.value);\n}\n\npublic static int compare (int x, int y) {\n    return (x < y) ? -1 : ((x == y) ? 0 : 1);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nThere are some other rules for implementing the compareTo() method. To demonstrate them, imagine we have a class called Coin:\n\nclass Coin implements Comparable<Coin> {\n    private final int nominalValue;    // nominal value\n    private final int mintYear;        // the year the coin was minted\n\n    Coin(int nominalValue, int mintYear) {\n        this.nominalValue = nominalValue;\n        this.mintYear = mintYear;\n    }\n\n    @Override\n    public int compareTo(Coin other) {\n        // This method we have to implement\n    }\n\n    // We consider two coins equal if they have the same nominal value\n    @Override\n    public boolean equals(Object that) {\n        if (this == that) return true;\n        if (that == null || getClass() != that.getClass()) return false;\n        Coin coin = (Coin) that;\n        return nominalValue == coin.nominalValue;\n    }\n\n    // getters, setters, hashCode and toString\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\nLet\'s create some objects of Coin.\n\npublic static void main(String[] args) {\n\n    Coin big = new Coin(25, 2006);\n    Coin medium1 = new Coin(10, 2016);\n    Coin medium2 = new Coin(10, 2001);\n    Coin small = new Coin(2, 2000);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nOne of the rules is to keep the compareTo() implementation consistent with the implementation of the equals() method. For example:\n\n * medium1.compareTo(medium2) == 0 should have the same boolean value as medium2.equals(medium1)\n\nIf we compare our coins and big is bigger than medium1 and medium1 is bigger than small, then big is bigger than small:\n\n * (big.compareTo(medium1) > 0 && medium1.compareTo(small) > 0) implies big.compareTo(small) > 0\n\nbig is bigger than small, hence small is smaller than big:\n\n * big.compareTo(small) > 0 and small.compareTo(big) < 0\n\nif medium1 is equal to medium2, they both must be bigger or smaller than small and big respectively:\n\n * medium1.compareTo(medium2) == 0 implies that big.compareTo(medium1) > 0 and big.compareTo(medium2) > 0 or small.compareTo(medium1) < 0 and small.compareTo(medium2) < 0\n\nThis will ensure that we can safely use such objects in sorted sets and sorted maps.\n\nIn this case, we can comply with all these requirements if we compare our coins by their nominal value:\n\nclass Coin implements Comparable<Coin> {\n\n    // fields, constructor, equals, hashCode, getters and setters\n\n    @Override\n    public int compareTo(Coin other) {\n        if (nominalValue == other.nominalValue) {\n            return 0;\n        } else if (nominalValue < other.nominalValue) {\n            return -1;\n        } else {\n            return 1;\n        }\n    }\n\n    @Override\n    public String toString() {\n        return "Coin{nominal=" + nominalValue + ", year=" + mintYear + "}";\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\nNow we can add the coins to a list and sort them:\n\nList<Coin> coins = new ArrayList<>();\n\ncoins.add(big);\ncoins.add(medium1);\ncoins.add(medium2);\ncoins.add(small);\n\nCollections.sort(coins);\ncoins.forEach(System.out::println);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nIn the output, we can see that the coins have been successfully sorted:\n\nCoin{nominal=2, year=2000}\nCoin{nominal=10, year=2016}\nCoin{nominal=10, year=2001}\nCoin{nominal=25, year=2006}\n\n\n1\n2\n3\n4\n\n\n\n# Conclusion\n\nIn this topic, we explored how to use the Comparable interface in our custom classes to define natural ordering algorithms. We also learned how to properly implement the compareTo method.',normalizedContent:'while working with data, you will likely need to order it in a convenient way. for example, you may have to put numbers in ascending order, group lines in alphabetical order, and organize anything you work with by date, by price, or by other custom characteristics.\n\nin java, it\'s possible to implement various sorting algorithms for any type of data. what if you have to work with custom types, sort elements of a collection, and try to compare objects that are not directly comparable? that\'s where the comparable interface comes in handy. in this topic, we will learn all about this interface and its compareto() method.\n\n\n# preparing to compare\n\nlet\'s look at an example. we created a list of integer\'s, added some elements and then sorted them.\n\npublic static void main(string[] args) {\n    list<integer> list = new arraylist<>();\n    list.add(55);\n    list.add(13);\n    list.add(47);\n\n    collections.sort(list);\n    system.out.println(list);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nas expected, we get:\n\n[13, 47, 55]\n\n\n1\n\n\nnow, let\'s create a simple class carwhere we want to sort cars by their numbers.\n\npublic class car {\n    private int number;\n    private string model;\n    private string color;\n    private int weight;\n\n    // constructor\n\n    // getters, setters\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nnow we try to write some code for the main method, create our collection and sort it using the collections.sort() method.\n\npublic static void main(string[] args) {\n    list<car> cars = new arraylist<>();\n    car car1 = new car(876, "bmw", "white", 1400);\n    car car2 = new car(345, "mercedes", "black", 2000);\n    car car3 = new car(470, "volvo", "blue", 1800);\n    cars.add(car1);\n    cars.add(car2);\n    cars.add(car3);\n\n    collections.sort(cars);\n    system.out.println(cars);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nas a result, we get a compilation error:\n\nthe method sort(list) in the type collections \n  is not applicable for the arguments (arraylist)\n\n\n1\n2\n\n\nthe reason for this is that standard classes like integer, string and so on implement a special interface, so we can compare them without any problems. as for our custom class car, it doesn\'t work like that. let\'s see how we can fix this.\n\n\n# comparable interface\n\ncomparable` provides the `compareto()` method which allows comparing an object with other objects of the same type. it\'s also important to comply with the conditions: all objects can be compared to other objects of the same type in the most widely used way, which means `compareto()` should be consistent with the `equals` method. a sequence of data has the **natural ordering**, if for each 2 elements `a` and `b`, where `a` is located to the left of `b`, the condition is true: `a.compareto(b) <= 0\n\n\n1\n\n\nit\'s easy to understand how to compare an integer or string because they already implement the comparable interface, but how do we compare objects of our custom type? we can do it in different ways depending on the task. we can compare them by any single field or several fields.\n\nto be able to sort, we must rewrite our car class using the comparable interface. for example, we can compare our car objects by their number. here\'s how you can implement it:\n\npublic class car implements comparable<car> {\n\n    private int number;\n    private string model;\n    private string color;\n    private int weight;\n\n    // constructor\n\n    // getters, setters\n\n    @override\n    public int compareto(car othercar) {\n        return integer.valueof(getnumber()).compareto(othercar.getnumber());\n    }\n\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\nnow if we run our new code we get the correct result.\n\n\n# implementing the compareto method\n\nlet\'s talk about the compareto() method. it compares the current object with the object sent as a parameter. to implement it correctly we need to make sure that the method returns:\n\n * a positive integer (for example, 1), if the current object is greater;\n * a negative integer (for example, -1), if the current object is less;\n * zero, if they are equal.\n\nbelow you can see an example of how the compareto() method is implemented in the integer class.\n\n@override\npublic int compareto(integer anotherinteger) {\n    return compare(this.value, anotherinteger.value);\n}\n\npublic static int compare (int x, int y) {\n    return (x < y) ? -1 : ((x == y) ? 0 : 1);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nthere are some other rules for implementing the compareto() method. to demonstrate them, imagine we have a class called coin:\n\nclass coin implements comparable<coin> {\n    private final int nominalvalue;    // nominal value\n    private final int mintyear;        // the year the coin was minted\n\n    coin(int nominalvalue, int mintyear) {\n        this.nominalvalue = nominalvalue;\n        this.mintyear = mintyear;\n    }\n\n    @override\n    public int compareto(coin other) {\n        // this method we have to implement\n    }\n\n    // we consider two coins equal if they have the same nominal value\n    @override\n    public boolean equals(object that) {\n        if (this == that) return true;\n        if (that == null || getclass() != that.getclass()) return false;\n        coin coin = (coin) that;\n        return nominalvalue == coin.nominalvalue;\n    }\n\n    // getters, setters, hashcode and tostring\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\nlet\'s create some objects of coin.\n\npublic static void main(string[] args) {\n\n    coin big = new coin(25, 2006);\n    coin medium1 = new coin(10, 2016);\n    coin medium2 = new coin(10, 2001);\n    coin small = new coin(2, 2000);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\none of the rules is to keep the compareto() implementation consistent with the implementation of the equals() method. for example:\n\n * medium1.compareto(medium2) == 0 should have the same boolean value as medium2.equals(medium1)\n\nif we compare our coins and big is bigger than medium1 and medium1 is bigger than small, then big is bigger than small:\n\n * (big.compareto(medium1) > 0 && medium1.compareto(small) > 0) implies big.compareto(small) > 0\n\nbig is bigger than small, hence small is smaller than big:\n\n * big.compareto(small) > 0 and small.compareto(big) < 0\n\nif medium1 is equal to medium2, they both must be bigger or smaller than small and big respectively:\n\n * medium1.compareto(medium2) == 0 implies that big.compareto(medium1) > 0 and big.compareto(medium2) > 0 or small.compareto(medium1) < 0 and small.compareto(medium2) < 0\n\nthis will ensure that we can safely use such objects in sorted sets and sorted maps.\n\nin this case, we can comply with all these requirements if we compare our coins by their nominal value:\n\nclass coin implements comparable<coin> {\n\n    // fields, constructor, equals, hashcode, getters and setters\n\n    @override\n    public int compareto(coin other) {\n        if (nominalvalue == other.nominalvalue) {\n            return 0;\n        } else if (nominalvalue < other.nominalvalue) {\n            return -1;\n        } else {\n            return 1;\n        }\n    }\n\n    @override\n    public string tostring() {\n        return "coin{nominal=" + nominalvalue + ", year=" + mintyear + "}";\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\nnow we can add the coins to a list and sort them:\n\nlist<coin> coins = new arraylist<>();\n\ncoins.add(big);\ncoins.add(medium1);\ncoins.add(medium2);\ncoins.add(small);\n\ncollections.sort(coins);\ncoins.foreach(system.out::println);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nin the output, we can see that the coins have been successfully sorted:\n\ncoin{nominal=2, year=2000}\ncoin{nominal=10, year=2016}\ncoin{nominal=10, year=2001}\ncoin{nominal=25, year=2006}\n\n\n1\n2\n3\n4\n\n\n\n# conclusion\n\nin this topic, we explored how to use the comparable interface in our custom classes to define natural ordering algorithms. we also learned how to properly implement the compareto method.',charsets:{cjk:!0},lastUpdated:"2022/10/12, 17:01:25",lastUpdatedTimestamp:1665565285e3},{title:"Theory：Processing strings",frontmatter:{title:"Theory：Processing strings",date:"2022-10-06T21:30:30.000Z",permalink:"/pages/78c165/",tags:["Java","String"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/03.%E5%BA%94%E7%9F%A5/109.Theory%EF%BC%9AProcessing%20strings.html",relativePath:"01.Java/01.Hyperskill - Java/03.应知/109.Theory：Processing strings.md",key:"v-6952ef1f",path:"/pages/78c165/",headers:[{level:2,title:"Strings and arrays",slug:"strings-and-arrays",normalizedTitle:"strings and arrays",charIndex:385},{level:2,title:"Splitting the string",slug:"splitting-the-string",normalizedTitle:"splitting the string",charIndex:1083},{level:2,title:"Iterating over a string",slug:"iterating-over-a-string",normalizedTitle:"iterating over a string",charIndex:2636},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:3314}],headersStr:"Strings and arrays Splitting the string Iterating over a string Conclusion",content:'As you already know, a string is a sequence of characters with a single data type, and so is an array. Strings are similar to arrays in many ways: in some sense, a string looks like an array of characters. Moreover, you can iterate over both strings and arrays. Sometimes you may need to process a string and convert it into an array, and in this topic we\'ll learn how to do that.\n\n\n# Strings and arrays\n\nIt\'s possible to convert between strings and character arrays using special methods like valueOf() and toCharArray().\n\nchar[] chars = { \'A\', \'B\', \'C\', \'D\', \'E\', \'F\' };\n\nString stringFromChars = String.valueOf(chars); // "ABCDEF"\n\nchar[] charsFromString = stringFromChars.toCharArray(); \n// { \'A\', \'B\', \'C\', \'D\', \'E\', \'F\' }\n\nString theSameString = new String(charsFromString); // "ABCDEF"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nThere is another way to turn a string into an array. Take a look:\n\nString text = "Hello";\nString[] parts = text.split(""); // {"H", "e", "l", "l", "o"}\n\n\n1\n2\n\n\nHere we used a much more concise method that splits a string into parts. Let\'s explore it in more detail!\n\n\n# Splitting the string\n\nA string can be divided into an array of strings based on a delimiter. To perform this, we call the split method, which divides the string into substrings by a separator. In the previous example, we used the "" delimiter, which automatically splits a string into smaller elements (substrings) that consist of one char.\n\nIf the delimiter is specified, the method returns an array of all the substrings. Note that the delimiter itself is not included in any of the substrings:\n\nString sentence = "a long text";\nString[] words = sentence.split(" "); // {"a", "long", "text"}\n\n\n1\n2\n\n\nLet\'s try to split an American phone number into the country code, the area code, the central office code, and other remaining digits:\n\nString number = "+1-213-345-6789";\nString[] parts = number.split("-"); // {"+1", "213", "345", "6789"}\n\n\n1\n2\n\n\nKeep in mind that all these parts are still strings no matter what they look like!\n\nChoose your delimiter wisely, otherwise you might get some sentences that start with a space:\n\nString text = "That\'s one small step for a man, one giant leap for mankind.";\nString[] parts = text.split(","); \n// {"That\'s one small step for a man", " one giant leap for mankind."}\n\n\n1\n2\n3\n\n\nYou can choose any delimiter you prefer, including a combination of spaces and words:\n\nString text = "I\'m gonna be a programmer";\nString[] parts = text.split(" gonna be "); // {"I\'m", "a programmer"}\n\n\n1\n2\n\n\nAs you can see here, the split method is also a good tool to get rid of something you don\'t need or don\'t want to use.\n\n\n# Iterating over a string\n\nIt\'s possible to iterate over the characters of a string using a loop (while, do-while, for-loop).\n\nSee the following example:\n\nString scientistName = "Isaac Newton";\n\nfor (int i = 0; i < scientistName.length(); i++) {\n    System.out.print(scientistName.charAt(i) + " ");\n}\n\n\n1\n2\n3\n4\n5\n\n\nIn strings, like in arrays, indexing begins from 0. In our example, the for-loop iterates over the string "Isaac Newton" . With each iteration, the charAt method returns the current character at the i index, and that character is then printed to the console, followed by a blank space.\n\nHere is what the code outputs as a result:\n\nI s a a c   N e w t o n \n\n\n1\n\n\n\n# Conclusion\n\nIn this topic, you learned about different ways of processing a string. You can convert between a string and an array using the valueOf() and toCharArray() methods or divide a string into substrings with the help of the split() method. You can also iterate over the characters of a string using a loop. All these methods will help you solve different tasks and improve your programming experience.',normalizedContent:'as you already know, a string is a sequence of characters with a single data type, and so is an array. strings are similar to arrays in many ways: in some sense, a string looks like an array of characters. moreover, you can iterate over both strings and arrays. sometimes you may need to process a string and convert it into an array, and in this topic we\'ll learn how to do that.\n\n\n# strings and arrays\n\nit\'s possible to convert between strings and character arrays using special methods like valueof() and tochararray().\n\nchar[] chars = { \'a\', \'b\', \'c\', \'d\', \'e\', \'f\' };\n\nstring stringfromchars = string.valueof(chars); // "abcdef"\n\nchar[] charsfromstring = stringfromchars.tochararray(); \n// { \'a\', \'b\', \'c\', \'d\', \'e\', \'f\' }\n\nstring thesamestring = new string(charsfromstring); // "abcdef"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nthere is another way to turn a string into an array. take a look:\n\nstring text = "hello";\nstring[] parts = text.split(""); // {"h", "e", "l", "l", "o"}\n\n\n1\n2\n\n\nhere we used a much more concise method that splits a string into parts. let\'s explore it in more detail!\n\n\n# splitting the string\n\na string can be divided into an array of strings based on a delimiter. to perform this, we call the split method, which divides the string into substrings by a separator. in the previous example, we used the "" delimiter, which automatically splits a string into smaller elements (substrings) that consist of one char.\n\nif the delimiter is specified, the method returns an array of all the substrings. note that the delimiter itself is not included in any of the substrings:\n\nstring sentence = "a long text";\nstring[] words = sentence.split(" "); // {"a", "long", "text"}\n\n\n1\n2\n\n\nlet\'s try to split an american phone number into the country code, the area code, the central office code, and other remaining digits:\n\nstring number = "+1-213-345-6789";\nstring[] parts = number.split("-"); // {"+1", "213", "345", "6789"}\n\n\n1\n2\n\n\nkeep in mind that all these parts are still strings no matter what they look like!\n\nchoose your delimiter wisely, otherwise you might get some sentences that start with a space:\n\nstring text = "that\'s one small step for a man, one giant leap for mankind.";\nstring[] parts = text.split(","); \n// {"that\'s one small step for a man", " one giant leap for mankind."}\n\n\n1\n2\n3\n\n\nyou can choose any delimiter you prefer, including a combination of spaces and words:\n\nstring text = "i\'m gonna be a programmer";\nstring[] parts = text.split(" gonna be "); // {"i\'m", "a programmer"}\n\n\n1\n2\n\n\nas you can see here, the split method is also a good tool to get rid of something you don\'t need or don\'t want to use.\n\n\n# iterating over a string\n\nit\'s possible to iterate over the characters of a string using a loop (while, do-while, for-loop).\n\nsee the following example:\n\nstring scientistname = "isaac newton";\n\nfor (int i = 0; i < scientistname.length(); i++) {\n    system.out.print(scientistname.charat(i) + " ");\n}\n\n\n1\n2\n3\n4\n5\n\n\nin strings, like in arrays, indexing begins from 0. in our example, the for-loop iterates over the string "isaac newton" . with each iteration, the charat method returns the current character at the i index, and that character is then printed to the console, followed by a blank space.\n\nhere is what the code outputs as a result:\n\ni s a a c   n e w t o n \n\n\n1\n\n\n\n# conclusion\n\nin this topic, you learned about different ways of processing a string. you can convert between a string and an array using the valueof() and tochararray() methods or divide a string into substrings with the help of the split() method. you can also iterate over the characters of a string using a loop. all these methods will help you solve different tasks and improve your programming experience.',charsets:{},lastUpdated:"2022/10/12, 17:01:25",lastUpdatedTimestamp:1665565285e3},{title:"Theory：Initialization blocks",frontmatter:{title:"Theory：Initialization blocks",date:"2022-10-09T18:45:19.000Z",permalink:"/pages/827871/",tags:["Java"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/03.%E5%BA%94%E7%9F%A5/110.Theory%EF%BC%9AInitialization%20blocks.html",relativePath:"01.Java/01.Hyperskill - Java/03.应知/110.Theory：Initialization blocks.md",key:"v-0dab8476",path:"/pages/827871/",headers:[{level:2,title:"Static initialization block",slug:"static-initialization-block",normalizedTitle:"static initialization block",charIndex:2},{level:2,title:"Instance initialization block",slug:"instance-initialization-block",normalizedTitle:"instance initialization block",charIndex:1690}],headersStr:"Static initialization block Instance initialization block",content:'# Static initialization block\n\nA static initialization block is a block of code enclosed in braces {} and preceded by the static keyword:\n\nstatic {\n    // code\n}\n\n\n1\n2\n3\n\n\nIt\'s used to initialize static fields and constants, just like constructors help to initialize instance fields. We can create objects and invoke static methods in a static block.\n\nHere is an example.\n\nimport java.util.Date;\n\npublic class StaticInitBlockExample {\n\n    private static String stringField;\n    private static Date dateField;\n\n    private static final String A_STRING_CONSTANT;\n\n    static {\n        stringField = getEmptyString();\n        dateField = new Date();\n        A_STRING_CONSTANT = "unknown";\n    }\n\n    private static String getEmptyString() {\n        return "empty";\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\nA class can have multiple static blocks which will be executed in the order in which they appear in the source code. The values initialized in the first block are overwritten by the following blocks.\n\nBut the question is, what is performed earlier — the direct assignment to static fields or the static block?\n\nSee the following example.\n\npublic class StaticInitOrderExample {\n\n    static int field = 30; // the first assignment\n\n    static {\n        field = 50; // the second assignment\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nFirst, the direct assignment to the static field is performed. After that, the static block is executed. If you print the value of field, it will be equal to 50.\n\nNote, it\'s impossible to access instance fields and methods in a static block.\n\nA static initialization block is executed once for the whole class, not for each instance of the class.\n\n\n# Instance initialization block\n\nThere is also an instance initialization block. It\'s used to initialize instance data members. It is run each time an object of the class is created. An instance initialization block is code enclosed in braces {}.\n\nclass InstanceInitBlockExample {\n\n    private int field;\n\n    {\n        field = 40;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nOf course, we can also directly assign values to fields:\n\nprivate int field = 40;\n\n\n1\n\n\nBut if we need to perform more complex logic before a constructor is invoked, it\'s convenient to write an instance initialization block. For example, an instance initialization block is useful when we need to fill an array:\n\nclass ArrayInitExample {\n\n    private int[] array;\n\n    { \n        System.out.println("Before the constructor");\n\n        array = new int[10];\n        for (int i = 0; i < array.length; i++) {\n            array[i] = i * i;\n        } \n    }\n    \n    public void print() {\n        for (int num : array) {\n            System.out.printf("%d ", num);\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\nThe instance initialization block is executed before any constructor of a class (but after the superclass constructors). The java compiler invokes the block as the first statement in the constructor, before other statements.\n\nAll instances of this class will be initialized during creation. There is an example:\n\npublic class UsingArrayExample {\n    public static void main(String args[]) {\n        ArrayInitExample obj = new ArrayInitExample();\n        obj.print();\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\nThis code outputs:\n\nBefore the constructor\n0 1 4 9 16 25 36 49 64 81 \n\n\n1\n2\n\n\nYou can write as many initialization blocks as you need. They will be performed in the order in which they appear in your code.\n\n提示\n\nNote, static class members can be accessed in an instance initialization block.',normalizedContent:'# static initialization block\n\na static initialization block is a block of code enclosed in braces {} and preceded by the static keyword:\n\nstatic {\n    // code\n}\n\n\n1\n2\n3\n\n\nit\'s used to initialize static fields and constants, just like constructors help to initialize instance fields. we can create objects and invoke static methods in a static block.\n\nhere is an example.\n\nimport java.util.date;\n\npublic class staticinitblockexample {\n\n    private static string stringfield;\n    private static date datefield;\n\n    private static final string a_string_constant;\n\n    static {\n        stringfield = getemptystring();\n        datefield = new date();\n        a_string_constant = "unknown";\n    }\n\n    private static string getemptystring() {\n        return "empty";\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\na class can have multiple static blocks which will be executed in the order in which they appear in the source code. the values initialized in the first block are overwritten by the following blocks.\n\nbut the question is, what is performed earlier — the direct assignment to static fields or the static block?\n\nsee the following example.\n\npublic class staticinitorderexample {\n\n    static int field = 30; // the first assignment\n\n    static {\n        field = 50; // the second assignment\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nfirst, the direct assignment to the static field is performed. after that, the static block is executed. if you print the value of field, it will be equal to 50.\n\nnote, it\'s impossible to access instance fields and methods in a static block.\n\na static initialization block is executed once for the whole class, not for each instance of the class.\n\n\n# instance initialization block\n\nthere is also an instance initialization block. it\'s used to initialize instance data members. it is run each time an object of the class is created. an instance initialization block is code enclosed in braces {}.\n\nclass instanceinitblockexample {\n\n    private int field;\n\n    {\n        field = 40;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nof course, we can also directly assign values to fields:\n\nprivate int field = 40;\n\n\n1\n\n\nbut if we need to perform more complex logic before a constructor is invoked, it\'s convenient to write an instance initialization block. for example, an instance initialization block is useful when we need to fill an array:\n\nclass arrayinitexample {\n\n    private int[] array;\n\n    { \n        system.out.println("before the constructor");\n\n        array = new int[10];\n        for (int i = 0; i < array.length; i++) {\n            array[i] = i * i;\n        } \n    }\n    \n    public void print() {\n        for (int num : array) {\n            system.out.printf("%d ", num);\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\nthe instance initialization block is executed before any constructor of a class (but after the superclass constructors). the java compiler invokes the block as the first statement in the constructor, before other statements.\n\nall instances of this class will be initialized during creation. there is an example:\n\npublic class usingarrayexample {\n    public static void main(string args[]) {\n        arrayinitexample obj = new arrayinitexample();\n        obj.print();\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\nthis code outputs:\n\nbefore the constructor\n0 1 4 9 16 25 36 49 64 81 \n\n\n1\n2\n\n\nyou can write as many initialization blocks as you need. they will be performed in the order in which they appear in your code.\n\n提示\n\nnote, static class members can be accessed in an instance initialization block.',charsets:{cjk:!0},lastUpdated:"2022/12/03, 17:31:39",lastUpdatedTimestamp:1670059899e3},{title:"Theory：Generic methods",frontmatter:{title:"Theory：Generic methods",date:"2022-11-24T11:35:15.000Z",permalink:"/pages/4b79aa/",tags:["Generic","Java"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/03.%E5%BA%94%E7%9F%A5/112.Theory%EF%BC%9AGeneric%20methods.html",relativePath:"01.Java/01.Hyperskill - Java/03.应知/112.Theory：Generic methods.md",key:"v-1345ef6a",path:"/pages/4b79aa/",headers:[{level:2,title:"Generic static methods",slug:"generic-static-methods",normalizedTitle:"generic static methods",charIndex:795},{level:2,title:"Generic instance methods",slug:"generic-instance-methods",normalizedTitle:"generic instance methods",charIndex:3261},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:4769}],headersStr:"Generic static methods Generic instance methods Conclusion",content:"In previous topics we have discussed generic classes and how one can use them. But Java also has generic methods that can be very useful. Generic methods allow type parameters to be passed to a method and used in its logic. They also allow a type parameter to be the return type.\n\nAll methods can declare their own type parameters, regardless of the class they belong to. This means that a non-generic class can contain generic methods.\n\n提示\n\nStatic methods cannot use type parameters of their class! Type parameters of the class these methods belong to can only be used in instance methods. If you want to use type parameters in a static method, declare this method's own type parameters.\n\nLet's take a look at examples of generic static and instance methods and find out how they are used.\n\n\n# Generic static methods\n\nThe following static method is declared as generic. The declaration of the generic type T surrounded by angle brackets allows us to use this type in the method. We remind you that it can belong to a generic or a non-generic class because it does not matter for generic methods.\n\npublic static <T> T doSomething(T t) {\n    return t;\n}\n\n\n1\n2\n3\n\n\nThe type parameter T can be used to declare the return type and the type of the method's arguments. A generic method can take or return values of non-generic types as well. For instance, the following method takes a generic array and returns its size as an int.\n\npublic static <E> int length(E[] array) {\n    return array.length;\n}\n\n\n1\n2\n3\n\n\nA generic method's body is declared like that of any other method.\n\nWe can pass an array of integers to the method we defined earlier and find its length:\n\nInteger[] array = { 1, 2, 3, 4 };\nint len = length(array); // pass an array of Integers\n\n\n1\n2\n\n\nWe could use this same method to find the length of an array of Strings (or any other reference type).\n\nString[] stringArray = { \"a\", \"b\", \"c\", \"d\" };\nlen = length(stringArray); \n\n\n1\n2\n\n\n提示\n\nRecall that type parameters can represent only reference types, not primitive types.\n\nAs another example of a generic method, take a look at one that prints the elements of a generic array.\n\npublic static <E> void print(E[] array) {\n    for (int i = 0; i < array.length; i++) {\n        System.out.print(array[i] + \" \");\n    }\n    System.out.println();\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\nLet's create an array and print it using this method.\n\nCharacter[] characters = { 'a', 'b', 'c' };\nprint(characters);\n\n\n1\n2\n\n\nThe output will be:\n\na b c \n\n\n1\n\n\n提示\n\nIn this example, we used the void keyword in the declaration of the method because the method does not return anything.\n\nJust like in generic classes, the type parameter section can contain multiple type parameters separated by commas.\n\nFor instance, the following method declares two type parameters.\n\npublic static <T, U> void method(T t, U u) {\n    // do something\n}\n\n\n1\n2\n3\n\n\nStatic generic methods are often used to write generic algorithms that do not depend on the type they operate on. This can be convenient when the method has to be used independently from the class it belongs to. We frequently use generic static methods for different operations with arrays and collections: sorting an array, searching for a value in a collection, reversing an array, and so on.\n\n\n# Generic instance methods\n\nJust like static methods, instance methods can have their own type parameters. There is no difference in their declaration compared to static methods, excluding the absence of the static keyword.\n\nclass SimpleClass {\n \n    public <T> T getParameterizedObject(T t) {\n        return t;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\nThe class above does not provide a type parameter, so we have to specify the type parameter in the method declaration to make the method getParameterizedObject generic.\n\n提示\n\nNote that in this example we cannot use T as the type for a field in the class, because it belongs to the method rather than the class itself.\n\nNow we can create an instance of the class and invoke the method. It will return a value that has the same type as the value that was passed in.\n\nSimpleClass instance = new SimpleClass();\nInteger value = instance.getParameterizedObject(601); // this will return 601\n\n\n1\n2\n\n\nAlthough generic methods can belong to non-generic classes, it is more common for a generic method to belong to a class that is also generic. Below is an example of a generic class that contains a generic instance method.\n\nclass SimpleClass<T> {\n \n    public <U> T getParameterizedObject(T t, U u) {\n        return t;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\nThe method receives arguments of both the class's type (T) and the method's own type (U). Because T was already declared in the class header, the method only has to declare the generic type U. The method returns the variable of type T.\n\n\n# Conclusion\n\nGeneric methods are a must-have for programmers since they allow us to restrict the scope of type parameters to a single function. Type parameters in generic methods can be used as return types or as types for arguments passed to the function. Both static and instance methods can be generic.",normalizedContent:"in previous topics we have discussed generic classes and how one can use them. but java also has generic methods that can be very useful. generic methods allow type parameters to be passed to a method and used in its logic. they also allow a type parameter to be the return type.\n\nall methods can declare their own type parameters, regardless of the class they belong to. this means that a non-generic class can contain generic methods.\n\n提示\n\nstatic methods cannot use type parameters of their class! type parameters of the class these methods belong to can only be used in instance methods. if you want to use type parameters in a static method, declare this method's own type parameters.\n\nlet's take a look at examples of generic static and instance methods and find out how they are used.\n\n\n# generic static methods\n\nthe following static method is declared as generic. the declaration of the generic type t surrounded by angle brackets allows us to use this type in the method. we remind you that it can belong to a generic or a non-generic class because it does not matter for generic methods.\n\npublic static <t> t dosomething(t t) {\n    return t;\n}\n\n\n1\n2\n3\n\n\nthe type parameter t can be used to declare the return type and the type of the method's arguments. a generic method can take or return values of non-generic types as well. for instance, the following method takes a generic array and returns its size as an int.\n\npublic static <e> int length(e[] array) {\n    return array.length;\n}\n\n\n1\n2\n3\n\n\na generic method's body is declared like that of any other method.\n\nwe can pass an array of integers to the method we defined earlier and find its length:\n\ninteger[] array = { 1, 2, 3, 4 };\nint len = length(array); // pass an array of integers\n\n\n1\n2\n\n\nwe could use this same method to find the length of an array of strings (or any other reference type).\n\nstring[] stringarray = { \"a\", \"b\", \"c\", \"d\" };\nlen = length(stringarray); \n\n\n1\n2\n\n\n提示\n\nrecall that type parameters can represent only reference types, not primitive types.\n\nas another example of a generic method, take a look at one that prints the elements of a generic array.\n\npublic static <e> void print(e[] array) {\n    for (int i = 0; i < array.length; i++) {\n        system.out.print(array[i] + \" \");\n    }\n    system.out.println();\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\nlet's create an array and print it using this method.\n\ncharacter[] characters = { 'a', 'b', 'c' };\nprint(characters);\n\n\n1\n2\n\n\nthe output will be:\n\na b c \n\n\n1\n\n\n提示\n\nin this example, we used the void keyword in the declaration of the method because the method does not return anything.\n\njust like in generic classes, the type parameter section can contain multiple type parameters separated by commas.\n\nfor instance, the following method declares two type parameters.\n\npublic static <t, u> void method(t t, u u) {\n    // do something\n}\n\n\n1\n2\n3\n\n\nstatic generic methods are often used to write generic algorithms that do not depend on the type they operate on. this can be convenient when the method has to be used independently from the class it belongs to. we frequently use generic static methods for different operations with arrays and collections: sorting an array, searching for a value in a collection, reversing an array, and so on.\n\n\n# generic instance methods\n\njust like static methods, instance methods can have their own type parameters. there is no difference in their declaration compared to static methods, excluding the absence of the static keyword.\n\nclass simpleclass {\n \n    public <t> t getparameterizedobject(t t) {\n        return t;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\nthe class above does not provide a type parameter, so we have to specify the type parameter in the method declaration to make the method getparameterizedobject generic.\n\n提示\n\nnote that in this example we cannot use t as the type for a field in the class, because it belongs to the method rather than the class itself.\n\nnow we can create an instance of the class and invoke the method. it will return a value that has the same type as the value that was passed in.\n\nsimpleclass instance = new simpleclass();\ninteger value = instance.getparameterizedobject(601); // this will return 601\n\n\n1\n2\n\n\nalthough generic methods can belong to non-generic classes, it is more common for a generic method to belong to a class that is also generic. below is an example of a generic class that contains a generic instance method.\n\nclass simpleclass<t> {\n \n    public <u> t getparameterizedobject(t t, u u) {\n        return t;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\nthe method receives arguments of both the class's type (t) and the method's own type (u). because t was already declared in the class header, the method only has to declare the generic type u. the method returns the variable of type t.\n\n\n# conclusion\n\ngeneric methods are a must-have for programmers since they allow us to restrict the scope of type parameters to a single function. type parameters in generic methods can be used as return types or as types for arguments passed to the function. both static and instance methods can be generic.",charsets:{cjk:!0},lastUpdated:"2022/12/03, 17:31:39",lastUpdatedTimestamp:1670059899e3},{title:"Theory：Introduction to API",frontmatter:{title:"Theory：Introduction to API",date:"2022-10-19T16:49:55.000Z",permalink:"/pages/8dcfb6/",tags:["Programming"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/03.%E5%BA%94%E7%9F%A5/111.Theory%EF%BC%9AIntroduction%20to%20API.html",relativePath:"01.Java/01.Hyperskill - Java/03.应知/111.Theory：Introduction to API.md",key:"v-603e6248",path:"/pages/8dcfb6/",headers:[{level:2,title:"What is API",slug:"what-is-api",normalizedTitle:"what is api",charIndex:293},{level:2,title:"Why we may need API",slug:"why-we-may-need-api",normalizedTitle:"why we may need api",charIndex:1521},{level:2,title:"Using API",slug:"using-api",normalizedTitle:"using api",charIndex:2362},{level:2,title:"Common tasks",slug:"common-tasks",normalizedTitle:"common tasks",charIndex:4024},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:4977}],headersStr:"What is API Why we may need API Using API Common tasks Conclusion",content:"You have probably come across the abbreviation API. It can be seen almost anywhere: in software, Internet protocols, websites. The API is used by many services and applications. In this topic, we will find out what it is, what it is for, and how it makes life easier for the developers.\n\n\n\n\n# What is API\n\nAPI stands for Application Programming Interface.\n\nUsually, when we say interface, we mean a user interface that connects a computer to a user. However, in this case, we are talking about the connection of a computer or a piece of software with another. This also needs some kind of interface, i.e. API.\n\nAPI is a description of the ways and rules by which different programs can interact with each other. The basic principle of the API is that programs have certain functions, classes, methods, structures, and sometimes constants that can be accessed by other programs using the corresponding interface.\n\nIt is not intended to be used directly by the end user, other than the programmer who incorporates it into the software when writing all sorts of applications. This greatly simplifies development since using API calls, one can execute certain functions of a program without knowing exactly how it works.\n\nFor example, one wants to make an application for a specific operating system. Its API will be needed to interact with this system. This way, the developers don't have to spend time figuring out the internals of the system.\n\nOkay, now you know what the API is. Let's find out why we need to use it.\n\n\n# Why we may need API\n\nLet's list the main reasons why the programmers might be interested in using the API:\n\n * The programming interface provides tools for working with the software. For example, OpenAI helps you work with sound libraries in applications. So, if you want to use audio software in your application, you don't need to write it from scratch. It is enough to connect to the ready-made one using the appropriate interface.\n * API helps to connect systems. Using the API, you can log in to the site using a third-party service account like Google, Facebook, and so on. Payment systems work on the same principle, connecting with bank accounts.\n * API provides data security. The programming interface highlights the data that needs to be protected. Thus, other programs cannot use them if they do not have permission to do so.\n * Using API reduces the cost of the software product. It is more profitable to apply an API than to create your own software.\n\nSo, these are the main reasons why one may need to use API. Now let's talk about how to use it.\n\n\n# Using API\n\nAPI is usually included in the description of some Internet protocol, software framework or standard functions calls of an operating system. It is often implemented as a separate software library or operating system service.\n\n\n\nSo, there are several API usage types. API may be included in:\n\n * Libraries. A library is a set of ready-made codes to be reused during development, and its API is the method by which these running codes interact with each other. An API may consist of several libraries.\n * Frameworks. A framework can be based on multiple libraries that implement multiple APIs.\n * Operating systems. An API can specify the interface between an application and the operating system. Most operating systems provide their APIs to other programs to enable them to work with the file system, render graphics, store data, use network capabilities, play audio, and so on.\n * Web API. These are interfaces for a web server to interact with the application.\n * There are also remote APIs. They are needed to manage remote resources, for example, databases with the same functionality regardless of language or platform. One such API is the Java Database Connectivity API, where the Java Remote Method Invocation API uses the Java Remote Method Protocol to allow calls to functions that work remotely but appear to be local to the developer.\n\nBelow we will describe the most popular tasks developers solve using APIs.\n\n\n# Common tasks\n\nAn API can have many different functions, and they all depend on a specific application area. Usually, developers need API when\n\n * working with documents. An example API is the Document Object Model (DOM) which lets you experiment with the look of a web page.\n * working with graphic data, video, or audio. For example, using Canvas and WebGL, one can render 2D and 3D graphics and using the Web Audio API, one can create sounds right in the browser.\n * receiving data from the server. Using the API, applications with the weather, maps, and currency converters are embedded on the site.\n * reading data from devices. This is required to work on some applications. For example, to create your own navigator, you need an API that can read the location.\n * storing information for the user. APIs, like the Web Storage API, provide mechanisms for storing data on the client-side. It is an alternative to cookies with more storage space.\n\n\n# Conclusion\n\nTo sum up,\n\n * API is an Application Programming Interface that describes the ways of interacting with other programs,\n * Using API one can connect to the ready-made software to use it in an application and save the development time, or connect to a system using a third-party service account,\n * There are different APIs for libraries and frameworks, operating systems, web servers and web browsers, and also remote APIs to manage remote resources,\n * Developers can use APIs for various tasks like working with video and audio, receiving data from the server, reading devices data, and so on.",normalizedContent:"you have probably come across the abbreviation api. it can be seen almost anywhere: in software, internet protocols, websites. the api is used by many services and applications. in this topic, we will find out what it is, what it is for, and how it makes life easier for the developers.\n\n\n\n\n# what is api\n\napi stands for application programming interface.\n\nusually, when we say interface, we mean a user interface that connects a computer to a user. however, in this case, we are talking about the connection of a computer or a piece of software with another. this also needs some kind of interface, i.e. api.\n\napi is a description of the ways and rules by which different programs can interact with each other. the basic principle of the api is that programs have certain functions, classes, methods, structures, and sometimes constants that can be accessed by other programs using the corresponding interface.\n\nit is not intended to be used directly by the end user, other than the programmer who incorporates it into the software when writing all sorts of applications. this greatly simplifies development since using api calls, one can execute certain functions of a program without knowing exactly how it works.\n\nfor example, one wants to make an application for a specific operating system. its api will be needed to interact with this system. this way, the developers don't have to spend time figuring out the internals of the system.\n\nokay, now you know what the api is. let's find out why we need to use it.\n\n\n# why we may need api\n\nlet's list the main reasons why the programmers might be interested in using the api:\n\n * the programming interface provides tools for working with the software. for example, openai helps you work with sound libraries in applications. so, if you want to use audio software in your application, you don't need to write it from scratch. it is enough to connect to the ready-made one using the appropriate interface.\n * api helps to connect systems. using the api, you can log in to the site using a third-party service account like google, facebook, and so on. payment systems work on the same principle, connecting with bank accounts.\n * api provides data security. the programming interface highlights the data that needs to be protected. thus, other programs cannot use them if they do not have permission to do so.\n * using api reduces the cost of the software product. it is more profitable to apply an api than to create your own software.\n\nso, these are the main reasons why one may need to use api. now let's talk about how to use it.\n\n\n# using api\n\napi is usually included in the description of some internet protocol, software framework or standard functions calls of an operating system. it is often implemented as a separate software library or operating system service.\n\n\n\nso, there are several api usage types. api may be included in:\n\n * libraries. a library is a set of ready-made codes to be reused during development, and its api is the method by which these running codes interact with each other. an api may consist of several libraries.\n * frameworks. a framework can be based on multiple libraries that implement multiple apis.\n * operating systems. an api can specify the interface between an application and the operating system. most operating systems provide their apis to other programs to enable them to work with the file system, render graphics, store data, use network capabilities, play audio, and so on.\n * web api. these are interfaces for a web server to interact with the application.\n * there are also remote apis. they are needed to manage remote resources, for example, databases with the same functionality regardless of language or platform. one such api is the java database connectivity api, where the java remote method invocation api uses the java remote method protocol to allow calls to functions that work remotely but appear to be local to the developer.\n\nbelow we will describe the most popular tasks developers solve using apis.\n\n\n# common tasks\n\nan api can have many different functions, and they all depend on a specific application area. usually, developers need api when\n\n * working with documents. an example api is the document object model (dom) which lets you experiment with the look of a web page.\n * working with graphic data, video, or audio. for example, using canvas and webgl, one can render 2d and 3d graphics and using the web audio api, one can create sounds right in the browser.\n * receiving data from the server. using the api, applications with the weather, maps, and currency converters are embedded on the site.\n * reading data from devices. this is required to work on some applications. for example, to create your own navigator, you need an api that can read the location.\n * storing information for the user. apis, like the web storage api, provide mechanisms for storing data on the client-side. it is an alternative to cookies with more storage space.\n\n\n# conclusion\n\nto sum up,\n\n * api is an application programming interface that describes the ways of interacting with other programs,\n * using api one can connect to the ready-made software to use it in an application and save the development time, or connect to a system using a third-party service account,\n * there are different apis for libraries and frameworks, operating systems, web servers and web browsers, and also remote apis to manage remote resources,\n * developers can use apis for various tasks like working with video and audio, receiving data from the server, reading devices data, and so on.",charsets:{},lastUpdated:"2022/12/03, 17:31:39",lastUpdatedTimestamp:1670059899e3},{title:"Theory：Paradigms",frontmatter:{title:"Theory：Paradigms",date:"2022-04-30T11:24:45.000Z",permalink:"/pages/6bc01b/",tags:["Programming"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/03.%E5%BA%94%E7%9F%A5/15.Theory%EF%BC%9AParadigms.html",relativePath:"01.Java/01.Hyperskill - Java/03.应知/15.Theory：Paradigms.md",key:"v-4a3a6bd4",path:"/pages/6bc01b/",headers:[{level:2,title:"Imperative paradigm",slug:"imperative-paradigm",normalizedTitle:"imperative paradigm",charIndex:643},{level:3,title:"Procedural programming paradigm",slug:"procedural-programming-paradigm",normalizedTitle:"procedural programming paradigm",charIndex:1392},{level:3,title:"Object-oriented programming",slug:"object-oriented-programming",normalizedTitle:"object-oriented programming",charIndex:1425},{level:3,title:"Parallel processing approach",slug:"parallel-processing-approach",normalizedTitle:"parallel processing approach",charIndex:1458},{level:2,title:"Declarative paradigm",slug:"declarative-paradigm",normalizedTitle:"declarative paradigm",charIndex:4126},{level:3,title:"Logic programming paradigm",slug:"logic-programming-paradigm",normalizedTitle:"logic programming paradigm",charIndex:4751},{level:3,title:"Functional programming paradigm",slug:"functional-programming-paradigm",normalizedTitle:"functional programming paradigm",charIndex:5514},{level:3,title:"Database programming paradigm",slug:"database-programming-paradigm",normalizedTitle:"database programming paradigm",charIndex:6399},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:6955}],headersStr:"Imperative paradigm Procedural programming paradigm Object-oriented programming Parallel processing approach Declarative paradigm Logic programming paradigm Functional programming paradigm Database programming paradigm Conclusion",content:'Different programming tasks can be solved in different ways: you might need to write a function, or create a separate class with methods, and so on. All such variants are combined into different programming approaches, which are also called paradigms. Below we will analyze two main paradigms: imperative and declarative and their types.\n\n\n\nAlmost all modern languages are multi-paradigm. They easily combine the capabilities of the imperative and declarative approaches. Nevertheless, in the section about each paradigm, we will give a list of languages where, among other paradigms, the one discussed in the section is also implemented.\n\n\n# Imperative paradigm\n\nThe imperative paradigm is one of the oldest programming paradigms. It is closely related to machine architecture. The imperative program is similar to the orders expressed by the imperative mood in natural languages. It is a sequence of instructions that the processor must execute step by step. The main focus of this paradigm is on how to achieve the goal. The paradigm consists of several statements, and after executing them all, the result is stored.\n\nFor example, you want to display the phrase "Hello, !" on the screen. How should the program do it? Through the following steps:\n\n * ask the username\n * read and remember the username\n * display the result\n\nImperative programming is divided into three broad categories: Procedural programming paradigm, Object-oriented programming, and Parallel processing approach. Let\'s talk about them in more detail.\n\n\n# Procedural programming paradigm\n\nThe procedural programming paradigm is based upon the concept of procedure calls, in which statements are structured into procedures also known as subroutines or functions. They are a list of instructions to tell the computer what to do step by step. In other words, the computer takes input data and changes it sequentially, remembering each new change. There is no difference between procedural and imperative approaches.\n\nProcedural Programming is suitable for general-purpose programming in order to complete common tasks. So, this can be a small computational problem, such as calculating a factorial, or finding the area of a figure, or displaying some information/phrase like "Hello, world!". Also, the code can be reused in different parts of the program, without the need to copy it.\n\nThe algorithm written in this paradigm is very simple to implement, but it is rather slow and cannot solve a complex problem.\n\nProgramming languages that have implemented the Procedural Programming paradigm are C, Java, C++, ColdFusion, Pascal.\n\n\n# Object-oriented programming\n\nObject-oriented programming or OOP is the paradigm where the program is written as a collection of classes. Each class has its instances called objects.\n\nA class is a way of describing an entity in general, defining the usual state and behavior that depends on that state, as well as the usual rules for interacting with this entity. Formally, a class is viewed as a set of data like fields, attributes, class members, and functions, i.e. methods for working with them.\n\nFor example, we have an entity cat and we want to describe it using a class. So, the cat will be an object of the corresponding Cat class. A cat has some attributes, for example, a tail, paws, claws, muzzle, ears, whiskers. A cat\'s behavior is what it usually does, for example, it can run, jump, meow, eat, and rip off the wallpaper. All of these will be cat methods.\n\nOOP can handle almost all kinds of common real-life problems where you need to model typical objects and work with them.\n\nProgramming languages that have implemented the OO paradigm are Ruby, Java, C++, Python, Simula (the first OOP language), Smalltalk, Visual Basic .NET, Objective-C.\n\n\n# Parallel processing approach\n\nParallel processing helps reduce instruction execution time. It does this by sharing or parallelizing instructions across multiple processors. The meaning of the approach can be summarized in one phrase: "divide and conquer". Examples are NESL (one of the oldest) and C / C ++ (also supported due to some library functions).\n\n\n# Declarative paradigm\n\nDeclarative programming is a programming paradigm in which it is important to specify the problem and the expected result of its solution. That is, in contrast to the imperative paradigm, where it is necessary to answer the question "how to do this?" you need to ask the questions "What needs to be done?" and "What will be the result of the work?". So, rather than providing step-by-step instruction, you tell the system what you need and let it try to come up with a solution.\n\n\n\nDeclarative programming is divided into Logic, Functional, and Database paradigm types. We will describe them below.\n\n\n# Logic programming paradigm\n\nLogic programming is a programming paradigm that is heavily based on formal logic. Any program written in a logical programming language is a set of sentences in a logical form that express facts and rules about a certain problem area.\n\nSo, the basic statements of logic programming are as follows:\n\n * Facts are fundamental assertions about the problem domain, like "Socrates is a man."\n * Rules are inferences about the facts in the domain ("All men are mortal.")\n * Queries are questions about that domain ("Is Socrates mortal?")\n\nIn general, the task here is to find the answer to the query based on facts and rules.\n\nThe major families of logic programming languages include Prolog, Answer Set Programming (ASP), and Datalog.\n\n\n# Functional programming paradigm\n\nFunctional programming is a programming paradigm, in which the computation process is interpreted as the computation of the values of functions. The function, in this case, is similar to a mathematical one. That is, a function in which input is an array that is not changed, and the output is a new array with new data. This makes a mathematical function different from a function in procedural programming, where a function is a sequence of actions that change the original data.\n\nHere\'s a simple example: you might have a function that takes a list of numbers as input and returns a new list with the squares of those numbers. This does not change the original list of numbers.\n\nProgramming languages that have implemented the Functional programming paradigm are JavaScript, Haskell, Scala, Erlang, Lisp, ML, Clojure, OCaml, Common Lisp, and F#.\n\n\n# Database programming paradigm\n\nThis programming methodology is based on working with data. The data is stored in the database and queries are made to this database in a special language, for example, SQL. With these languages, you can access the data for filtering, transformations, calculating statistics, and so on. Program statements are data-defined rather than a hard-coded series of steps.\n\nThe database program is the heart of the business information system, allowing for file creation, data entry, updating, querying, and reporting functions.\n\n\n# Conclusion\n\nTo sum up,\n\n * Different approaches to creating programs are called paradigms.\n * There are two main programming paradigms: imperative and declarative.\n * The imperative paradigm focuses on achieving a result using step-by-step instructions that change the data sequentially.\n * Imperative paradigm includes Procedural programming paradigm, Object-oriented programming, and Parallel processing approach.\n * The declarative paradigm focuses on the task and tries to get an expected result.\n * Declarative paradigm includes Logic, Functional, and Database paradigms.',normalizedContent:'different programming tasks can be solved in different ways: you might need to write a function, or create a separate class with methods, and so on. all such variants are combined into different programming approaches, which are also called paradigms. below we will analyze two main paradigms: imperative and declarative and their types.\n\n\n\nalmost all modern languages are multi-paradigm. they easily combine the capabilities of the imperative and declarative approaches. nevertheless, in the section about each paradigm, we will give a list of languages where, among other paradigms, the one discussed in the section is also implemented.\n\n\n# imperative paradigm\n\nthe imperative paradigm is one of the oldest programming paradigms. it is closely related to machine architecture. the imperative program is similar to the orders expressed by the imperative mood in natural languages. it is a sequence of instructions that the processor must execute step by step. the main focus of this paradigm is on how to achieve the goal. the paradigm consists of several statements, and after executing them all, the result is stored.\n\nfor example, you want to display the phrase "hello, !" on the screen. how should the program do it? through the following steps:\n\n * ask the username\n * read and remember the username\n * display the result\n\nimperative programming is divided into three broad categories: procedural programming paradigm, object-oriented programming, and parallel processing approach. let\'s talk about them in more detail.\n\n\n# procedural programming paradigm\n\nthe procedural programming paradigm is based upon the concept of procedure calls, in which statements are structured into procedures also known as subroutines or functions. they are a list of instructions to tell the computer what to do step by step. in other words, the computer takes input data and changes it sequentially, remembering each new change. there is no difference between procedural and imperative approaches.\n\nprocedural programming is suitable for general-purpose programming in order to complete common tasks. so, this can be a small computational problem, such as calculating a factorial, or finding the area of a figure, or displaying some information/phrase like "hello, world!". also, the code can be reused in different parts of the program, without the need to copy it.\n\nthe algorithm written in this paradigm is very simple to implement, but it is rather slow and cannot solve a complex problem.\n\nprogramming languages that have implemented the procedural programming paradigm are c, java, c++, coldfusion, pascal.\n\n\n# object-oriented programming\n\nobject-oriented programming or oop is the paradigm where the program is written as a collection of classes. each class has its instances called objects.\n\na class is a way of describing an entity in general, defining the usual state and behavior that depends on that state, as well as the usual rules for interacting with this entity. formally, a class is viewed as a set of data like fields, attributes, class members, and functions, i.e. methods for working with them.\n\nfor example, we have an entity cat and we want to describe it using a class. so, the cat will be an object of the corresponding cat class. a cat has some attributes, for example, a tail, paws, claws, muzzle, ears, whiskers. a cat\'s behavior is what it usually does, for example, it can run, jump, meow, eat, and rip off the wallpaper. all of these will be cat methods.\n\noop can handle almost all kinds of common real-life problems where you need to model typical objects and work with them.\n\nprogramming languages that have implemented the oo paradigm are ruby, java, c++, python, simula (the first oop language), smalltalk, visual basic .net, objective-c.\n\n\n# parallel processing approach\n\nparallel processing helps reduce instruction execution time. it does this by sharing or parallelizing instructions across multiple processors. the meaning of the approach can be summarized in one phrase: "divide and conquer". examples are nesl (one of the oldest) and c / c ++ (also supported due to some library functions).\n\n\n# declarative paradigm\n\ndeclarative programming is a programming paradigm in which it is important to specify the problem and the expected result of its solution. that is, in contrast to the imperative paradigm, where it is necessary to answer the question "how to do this?" you need to ask the questions "what needs to be done?" and "what will be the result of the work?". so, rather than providing step-by-step instruction, you tell the system what you need and let it try to come up with a solution.\n\n\n\ndeclarative programming is divided into logic, functional, and database paradigm types. we will describe them below.\n\n\n# logic programming paradigm\n\nlogic programming is a programming paradigm that is heavily based on formal logic. any program written in a logical programming language is a set of sentences in a logical form that express facts and rules about a certain problem area.\n\nso, the basic statements of logic programming are as follows:\n\n * facts are fundamental assertions about the problem domain, like "socrates is a man."\n * rules are inferences about the facts in the domain ("all men are mortal.")\n * queries are questions about that domain ("is socrates mortal?")\n\nin general, the task here is to find the answer to the query based on facts and rules.\n\nthe major families of logic programming languages include prolog, answer set programming (asp), and datalog.\n\n\n# functional programming paradigm\n\nfunctional programming is a programming paradigm, in which the computation process is interpreted as the computation of the values of functions. the function, in this case, is similar to a mathematical one. that is, a function in which input is an array that is not changed, and the output is a new array with new data. this makes a mathematical function different from a function in procedural programming, where a function is a sequence of actions that change the original data.\n\nhere\'s a simple example: you might have a function that takes a list of numbers as input and returns a new list with the squares of those numbers. this does not change the original list of numbers.\n\nprogramming languages that have implemented the functional programming paradigm are javascript, haskell, scala, erlang, lisp, ml, clojure, ocaml, common lisp, and f#.\n\n\n# database programming paradigm\n\nthis programming methodology is based on working with data. the data is stored in the database and queries are made to this database in a special language, for example, sql. with these languages, you can access the data for filtering, transformations, calculating statistics, and so on. program statements are data-defined rather than a hard-coded series of steps.\n\nthe database program is the heart of the business information system, allowing for file creation, data entry, updating, querying, and reporting functions.\n\n\n# conclusion\n\nto sum up,\n\n * different approaches to creating programs are called paradigms.\n * there are two main programming paradigms: imperative and declarative.\n * the imperative paradigm focuses on achieving a result using step-by-step instructions that change the data sequentially.\n * imperative paradigm includes procedural programming paradigm, object-oriented programming, and parallel processing approach.\n * the declarative paradigm focuses on the task and tries to get an expected result.\n * declarative paradigm includes logic, functional, and database paradigms.',charsets:{},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：Functional decomposition",frontmatter:{title:"Theory：Functional decomposition",date:"2022-08-09T14:22:57.000Z",permalink:"/pages/591f82/",tags:["Programming"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/03.%E5%BA%94%E7%9F%A5/14.Theory%EF%BC%9AFunctional%20decomposition.html",relativePath:"01.Java/01.Hyperskill - Java/03.应知/14.Theory：Functional decomposition.md",key:"v-4b6cd045",path:"/pages/591f82/",headers:[{level:2,title:"Solving complex tasks",slug:"solving-complex-tasks",normalizedTitle:"solving complex tasks",charIndex:696},{level:2,title:"Decomposing a program into methods",slug:"decomposing-a-program-into-methods",normalizedTitle:"decomposing a program into methods",charIndex:4171},{level:2,title:"Adding new features",slug:"adding-new-features",normalizedTitle:"adding new features",charIndex:7166},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:8362}],headersStr:"Solving complex tasks Decomposing a program into methods Adding new features Conclusion",content:' * You already know how to create simple methods in Java. This is a very useful skill that can help you shorten your code, reuse some operations, and make your program more readable.\n   \n   Step by step, your programming tasks are becoming more complex, so are your methods. Though you can create a complex program that is wrapped in one solid method or even in a main method, it is better to divide a program into a number of more specific methods that are easy to read and understand. The approach of dividing a complex program into subroutines is called functional decomposition.\n   \n   In this topic, we\'ll see how to decompose the solution of a particular problem into methods.\n   \n   \n   # Solving complex tasks\n   \n   The very idea of decomposing some problems into several subproblems is quite intuitive. If you want to cook a pizza, you don\'t just put all the ingredients in the oven: instead, you break the process up into separate tasks – from making the dough to actual cooking. Functional decomposition is not about cooking pizza, but it is based on the same principle of breaking a problem into small pieces called methods.\n   \n   Let\'s consider an example. Think of a program that simulates the Smart home app. This app is used to control home devices that can be remotely accessed: wireless speaker systems, lights, home security, door locks, and even robots. Imagine that we have a simple Smart home app that can perform three actions: turn the music on or off, switch the light on and off, and control the door lock. Let\'s consider these actions as parts of our computer program.\n   \n   If we decompose this task, that\'s how its algorithm can be described in general:\n   \n   1. Parse the input data (entered password);\n   2. Check that the password is correct;\n   3. Ask the user what they want to do;\n   4. If the action is supported, perform it.\n   \n   Imagine that you wrapped this program in code, but without a single method. That\'s how its structure would look like:\n   \n           // ...\n           int password = 76543210;\n           String speakersState;\n           String lampState;\n           String doorState;\n   \n           // reading the password\n           System.out.println("Enter password: ");\n           int passwordInput = scanner.nextInt();\n   \n           // checking if the password is correct\n           if (passwordInput != password) {\n               System.out.println("Incorrect password!");\n           } else {\n               // asking the user what they want to do\n               System.out.println("Choose the object: 1 – speakers, 2 – lamp, 3 – door");\n               String action = scanner.next();\n               \n               switch (action) {\n                   case "1":\n                       // asking the user about speakers\n                       \n                       switch (speakersState) {\n                           case "on":\n                               // ...\n                           case "off":\n                               // ...\n                           default:\n                               // ...\n                       }\n                       break;\n                   case "2":\n                       // asking the user about lights...\n                   case "3":\n                       // asking the user about the door...\n                   }\n           }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   16\n   17\n   18\n   19\n   20\n   21\n   22\n   23\n   24\n   25\n   26\n   27\n   28\n   29\n   30\n   31\n   32\n   33\n   34\n   35\n   36\n   37\n   \n   \n   Though you see just a truncated version of a real program, this code still looks overloaded. At the same time, it works perfectly fine for our problem and we could leave it like that. However, later on we might want to adjust it for our needs or extend its functionality.\n   \n   What if we want this code to work for many users and not just one, or to expand the number of actions, make them more complex? Some parts of this code would be useful, and some of them would probably be deleted. To make this code less specific and more flexible, we can use functional decomposition.\n   \n   \n   # Decomposing a program into methods\n   \n   Functional decomposition is simply a process of decomposing a problem into several functions or methods. Each method does a particular task so that we can perform these methods in a row to get the results we need. When we look at a problem, we need to think about which actions we may want to repeat multiple times or, alternatively, perform separately. This is how we get the desired methods. As a result, these methods are easier to read, understand, reuse, test, and debug.\n   \n   Let\'s look at our Smart home app again and figure out which steps can be turned into separate methods. First of all, we can separate our main operations into three methods: one method to control the music, another one to turn the lights on and off, and the third to operate the door lock. Take a look at the method controlMusic() that controls the music.\n   \n   Methods controlLight() and controlDoor() follow the same algorithm.\n   \n   // method that turns the music on and off\n   \n   public static void controlMusic() {\n       Scanner scanner = new Scanner(System.in);\n       System.out.println("on/off?");\n       String tumbler = scanner.next();\n       if (tumbler.equals("on")) {\n           System.out.println("The music is on");\n       } else if (tumbler.equals("off")) {\n           System.out.println("The music is off");\n       } else {\n           System.out.println("Invalid operation");\n       }\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   \n   \n   These controlling methods perform the main actions that our app provides. Of course, these actions are greatly simplified, but the main goal here is to show the process of revising the functionality of our program.\n   \n   To make things work, we need to create a method that checks the password.\n   \n   // method that verifies the password and gives access to Smart home actions if the password is correct\n   public static void accessSmartHome() {\n       Scanner scanner = new Scanner(System.in);\n       final int password = 76543210;\n       System.out.println("Enter password: ");\n       int passwordInput = scanner.nextInt();\n       if (passwordInput == password) {\n           chooseAction();\n       } else {\n           System.out.println("Incorrect password!");\n       }\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   \n   \n   Also, we need a method with the main menu where you can choose the action, so we created a method chooseAction(). This method asks the user what action they want to perform and gives control to the method that performs the picked action.\n   \n   Finally, we can run our decomposed program in the main method, which is called once our program is started:\n   \n   public static void main(String[] args) {\n       accessSmartHome();\n   }\n   \n   \n   1\n   2\n   3\n   \n   \n   This method calls accessSmartHome, which asks to enter a password and, if it is correct, allows us to manage the Smart home.\n   \n   \n   # Adding new features\n   \n   Now, if we want to add another action, all we have to do is define the method with this action. For example, we\'ve got a new Smart device, an electric kettle. We create a method that switches it on and off. To get access to the new method, we need to modify the chooseAction() method by adding a new case statement:\n   \n   // method that controls electric kettle\n   public static void controlKettle() {\n       // ...\n   }\n   \n   // method with the main menu for choosing the action\n   public static void chooseAction() {\n       Scanner scanner = new Scanner(System.in);\n   // adding case 4\n       System.out.println("Choose the object: 1 – speakers, 2 – lamp, 3 – door, 4 – kettle");\n       // ...\n           case 4:\n               controlKettle();\n               break;\n       // ...\n       }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   16\n   \n   \n   As you see, we now have a real functioning program that won\'t fall apart if we decide to change it a bit. We can easily test separate components since they are determined in separate methods. This also makes it easier to support the program in the future.\n   \n   \n   # Conclusion\n   \n   In this topic, we have learned the importance of functional decomposition. It is used to divide the program into several methods. This approach has a lot of advantages. It helps us to:\n   \n   * structure the code;\n   * follow the general logic of the program;\n   * make changes easily;\n   * test separate methods.\n   \n   Functional decomposition is not key to everything, but using this approach will help you create neat and understandable programs that are easy to work with.',normalizedContent:' * you already know how to create simple methods in java. this is a very useful skill that can help you shorten your code, reuse some operations, and make your program more readable.\n   \n   step by step, your programming tasks are becoming more complex, so are your methods. though you can create a complex program that is wrapped in one solid method or even in a main method, it is better to divide a program into a number of more specific methods that are easy to read and understand. the approach of dividing a complex program into subroutines is called functional decomposition.\n   \n   in this topic, we\'ll see how to decompose the solution of a particular problem into methods.\n   \n   \n   # solving complex tasks\n   \n   the very idea of decomposing some problems into several subproblems is quite intuitive. if you want to cook a pizza, you don\'t just put all the ingredients in the oven: instead, you break the process up into separate tasks – from making the dough to actual cooking. functional decomposition is not about cooking pizza, but it is based on the same principle of breaking a problem into small pieces called methods.\n   \n   let\'s consider an example. think of a program that simulates the smart home app. this app is used to control home devices that can be remotely accessed: wireless speaker systems, lights, home security, door locks, and even robots. imagine that we have a simple smart home app that can perform three actions: turn the music on or off, switch the light on and off, and control the door lock. let\'s consider these actions as parts of our computer program.\n   \n   if we decompose this task, that\'s how its algorithm can be described in general:\n   \n   1. parse the input data (entered password);\n   2. check that the password is correct;\n   3. ask the user what they want to do;\n   4. if the action is supported, perform it.\n   \n   imagine that you wrapped this program in code, but without a single method. that\'s how its structure would look like:\n   \n           // ...\n           int password = 76543210;\n           string speakersstate;\n           string lampstate;\n           string doorstate;\n   \n           // reading the password\n           system.out.println("enter password: ");\n           int passwordinput = scanner.nextint();\n   \n           // checking if the password is correct\n           if (passwordinput != password) {\n               system.out.println("incorrect password!");\n           } else {\n               // asking the user what they want to do\n               system.out.println("choose the object: 1 – speakers, 2 – lamp, 3 – door");\n               string action = scanner.next();\n               \n               switch (action) {\n                   case "1":\n                       // asking the user about speakers\n                       \n                       switch (speakersstate) {\n                           case "on":\n                               // ...\n                           case "off":\n                               // ...\n                           default:\n                               // ...\n                       }\n                       break;\n                   case "2":\n                       // asking the user about lights...\n                   case "3":\n                       // asking the user about the door...\n                   }\n           }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   16\n   17\n   18\n   19\n   20\n   21\n   22\n   23\n   24\n   25\n   26\n   27\n   28\n   29\n   30\n   31\n   32\n   33\n   34\n   35\n   36\n   37\n   \n   \n   though you see just a truncated version of a real program, this code still looks overloaded. at the same time, it works perfectly fine for our problem and we could leave it like that. however, later on we might want to adjust it for our needs or extend its functionality.\n   \n   what if we want this code to work for many users and not just one, or to expand the number of actions, make them more complex? some parts of this code would be useful, and some of them would probably be deleted. to make this code less specific and more flexible, we can use functional decomposition.\n   \n   \n   # decomposing a program into methods\n   \n   functional decomposition is simply a process of decomposing a problem into several functions or methods. each method does a particular task so that we can perform these methods in a row to get the results we need. when we look at a problem, we need to think about which actions we may want to repeat multiple times or, alternatively, perform separately. this is how we get the desired methods. as a result, these methods are easier to read, understand, reuse, test, and debug.\n   \n   let\'s look at our smart home app again and figure out which steps can be turned into separate methods. first of all, we can separate our main operations into three methods: one method to control the music, another one to turn the lights on and off, and the third to operate the door lock. take a look at the method controlmusic() that controls the music.\n   \n   methods controllight() and controldoor() follow the same algorithm.\n   \n   // method that turns the music on and off\n   \n   public static void controlmusic() {\n       scanner scanner = new scanner(system.in);\n       system.out.println("on/off?");\n       string tumbler = scanner.next();\n       if (tumbler.equals("on")) {\n           system.out.println("the music is on");\n       } else if (tumbler.equals("off")) {\n           system.out.println("the music is off");\n       } else {\n           system.out.println("invalid operation");\n       }\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   \n   \n   these controlling methods perform the main actions that our app provides. of course, these actions are greatly simplified, but the main goal here is to show the process of revising the functionality of our program.\n   \n   to make things work, we need to create a method that checks the password.\n   \n   // method that verifies the password and gives access to smart home actions if the password is correct\n   public static void accesssmarthome() {\n       scanner scanner = new scanner(system.in);\n       final int password = 76543210;\n       system.out.println("enter password: ");\n       int passwordinput = scanner.nextint();\n       if (passwordinput == password) {\n           chooseaction();\n       } else {\n           system.out.println("incorrect password!");\n       }\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   \n   \n   also, we need a method with the main menu where you can choose the action, so we created a method chooseaction(). this method asks the user what action they want to perform and gives control to the method that performs the picked action.\n   \n   finally, we can run our decomposed program in the main method, which is called once our program is started:\n   \n   public static void main(string[] args) {\n       accesssmarthome();\n   }\n   \n   \n   1\n   2\n   3\n   \n   \n   this method calls accesssmarthome, which asks to enter a password and, if it is correct, allows us to manage the smart home.\n   \n   \n   # adding new features\n   \n   now, if we want to add another action, all we have to do is define the method with this action. for example, we\'ve got a new smart device, an electric kettle. we create a method that switches it on and off. to get access to the new method, we need to modify the chooseaction() method by adding a new case statement:\n   \n   // method that controls electric kettle\n   public static void controlkettle() {\n       // ...\n   }\n   \n   // method with the main menu for choosing the action\n   public static void chooseaction() {\n       scanner scanner = new scanner(system.in);\n   // adding case 4\n       system.out.println("choose the object: 1 – speakers, 2 – lamp, 3 – door, 4 – kettle");\n       // ...\n           case 4:\n               controlkettle();\n               break;\n       // ...\n       }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   16\n   \n   \n   as you see, we now have a real functioning program that won\'t fall apart if we decide to change it a bit. we can easily test separate components since they are determined in separate methods. this also makes it easier to support the program in the future.\n   \n   \n   # conclusion\n   \n   in this topic, we have learned the importance of functional decomposition. it is used to divide the program into several methods. this approach has a lot of advantages. it helps us to:\n   \n   * structure the code;\n   * follow the general logic of the program;\n   * make changes easily;\n   * test separate methods.\n   \n   functional decomposition is not key to everything, but using this approach will help you create neat and understandable programs that are easy to work with.',charsets:{},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：Overloading",frontmatter:{title:"Theory：Overloading",date:"2022-04-24T12:29:00.000Z",permalink:"/pages/030e2b/",tags:["Java"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/03.%E5%BA%94%E7%9F%A5/25.Theory%EF%BC%9AOverloading.html",relativePath:"01.Java/01.Hyperskill - Java/03.应知/25.Theory：Overloading.md",key:"v-fb918adc",path:"/pages/030e2b/",headers:[{level:2,title:"Overloading and casting",slug:"overloading-and-casting",normalizedTitle:"overloading and casting",charIndex:461},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:2970}],headersStr:"Overloading and casting Conclusion",content:'The overloading mechanism allows us to not write different names for methods that perform similar operations.\n\n提示\n\nImportant that it\'s impossible to declare more than one method with the same name and parameters (number and types), even with different return types. The return type is not considered for overloading because it\'s not a part of the signature.\n\nLooking ahead, we\'ll assume that overloading is a form of the static (compile-time) polymorphism.\n\n\n# Overloading and casting\n\nTo understand how overloading deals with type casting, let\'s consider an example of overloaded methods that only differ in the type of the single argument and see when each of them will be invoked and why.\n\npublic class OverloadingExample {\n\n    public static void print(short a) {\n        System.out.println("short arg: " + a);\n    }\n\n    public static void print(int a) {\n        System.out.println("int arg: " + a);\n    }\n\n    public static void print(long a) {\n        System.out.println("long arg: " + a);\n    }\n\n    public static void print(double a) {\n        System.out.println("double arg: " + a);\n    }\n\n    public static void main(String[] args) {\n        print(100);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\nNow if we call print(100), the program outputs:\n\nint arg: 100\n\n\n1\n\n\nWhat we see here is that 100 is treated as int and the corresponding method is invoked.\n\nIn the case where the type of a method parameter is not exactly the same as the type of the passed argument, the compiler chooses the method that has the closest type of the argument in order of the implicit casting.\n\nSince all integer literals are treated as int by default, int will be the starting point. The closest one will then be long.\n\nLet\'s remove or comment the method public static void print(int a), then recompile and run the program again. The result is as expected:\n\nlong arg: 100\n\n\n1\n\n\nOk, now, let\'s remove the method public static void print(long a) too. Since we have no method with float argument, the next type in the order of implicit type casting will be double. After recompiling the program outputs:\n\ndouble arg: 100.0\n\n\n1\n\n\nIf we remove the method public static void print(double a) the only method we have left is the one with short type of argument. The program won\'t compile if we just call print(100) as we did before.\n\nLet\'s explain why. When we pass some value to the method, the compiler does not evaluate it. All that is known is that it is integer literal and hence has integer type.\n\nIn our case, since 100 is treated as an int by default and JVM doesn\'t know if the passed value can be cast to short safely, the only way to pass short argument is by casting the value explicitly:\n\n public class OverloadingExample {\n\n    public static void print(short a) {\n        System.out.println("short arg: " + a);\n    }\n\n    public static void main(String[] args) {\n        print((short) 100);  // explicit casting \n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# Conclusion\n\nMethod overloading allows you to implement two or more methods with the same name, but different arguments. The arguments of such methods may differ in their number or type. This helps to avoid having various method references for similar tasks. When invoked, the proper method is chosen based on the provided arguments. If the argument has a different type from what is expected, the closest type of the argument in order of the implicit casting is used.',normalizedContent:'the overloading mechanism allows us to not write different names for methods that perform similar operations.\n\n提示\n\nimportant that it\'s impossible to declare more than one method with the same name and parameters (number and types), even with different return types. the return type is not considered for overloading because it\'s not a part of the signature.\n\nlooking ahead, we\'ll assume that overloading is a form of the static (compile-time) polymorphism.\n\n\n# overloading and casting\n\nto understand how overloading deals with type casting, let\'s consider an example of overloaded methods that only differ in the type of the single argument and see when each of them will be invoked and why.\n\npublic class overloadingexample {\n\n    public static void print(short a) {\n        system.out.println("short arg: " + a);\n    }\n\n    public static void print(int a) {\n        system.out.println("int arg: " + a);\n    }\n\n    public static void print(long a) {\n        system.out.println("long arg: " + a);\n    }\n\n    public static void print(double a) {\n        system.out.println("double arg: " + a);\n    }\n\n    public static void main(string[] args) {\n        print(100);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\nnow if we call print(100), the program outputs:\n\nint arg: 100\n\n\n1\n\n\nwhat we see here is that 100 is treated as int and the corresponding method is invoked.\n\nin the case where the type of a method parameter is not exactly the same as the type of the passed argument, the compiler chooses the method that has the closest type of the argument in order of the implicit casting.\n\nsince all integer literals are treated as int by default, int will be the starting point. the closest one will then be long.\n\nlet\'s remove or comment the method public static void print(int a), then recompile and run the program again. the result is as expected:\n\nlong arg: 100\n\n\n1\n\n\nok, now, let\'s remove the method public static void print(long a) too. since we have no method with float argument, the next type in the order of implicit type casting will be double. after recompiling the program outputs:\n\ndouble arg: 100.0\n\n\n1\n\n\nif we remove the method public static void print(double a) the only method we have left is the one with short type of argument. the program won\'t compile if we just call print(100) as we did before.\n\nlet\'s explain why. when we pass some value to the method, the compiler does not evaluate it. all that is known is that it is integer literal and hence has integer type.\n\nin our case, since 100 is treated as an int by default and jvm doesn\'t know if the passed value can be cast to short safely, the only way to pass short argument is by casting the value explicitly:\n\n public class overloadingexample {\n\n    public static void print(short a) {\n        system.out.println("short arg: " + a);\n    }\n\n    public static void main(string[] args) {\n        print((short) 100);  // explicit casting \n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# conclusion\n\nmethod overloading allows you to implement two or more methods with the same name, but different arguments. the arguments of such methods may differ in their number or type. this helps to avoid having various method references for similar tasks. when invoked, the proper method is chosen based on the provided arguments. if the argument has a different type from what is expected, the closest type of the argument in order of the implicit casting is used.',charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：Write, compile, and run",frontmatter:{title:"Theory：Write, compile, and run",date:"2022-04-30T17:32:36.000Z",permalink:"/pages/f9cc7c/",tags:["Java","JVM"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/03.%E5%BA%94%E7%9F%A5/27.Theory%EF%BC%9AWrite,%20compile,%20and%20run.html",relativePath:"01.Java/01.Hyperskill - Java/03.应知/27.Theory：Write, compile, and run.md",key:"v-6141012d",path:"/pages/f9cc7c/",headers:[{level:2,title:"Writing a program",slug:"writing-a-program",normalizedTitle:"writing a program",charIndex:316},{level:2,title:"Compilation",slug:"compilation",normalizedTitle:"compilation",charIndex:819},{level:2,title:"Running a program",slug:"running-a-program",normalizedTitle:"running a program",charIndex:1689},{level:2,title:"JVM languages",slug:"jvm-languages",normalizedTitle:"jvm languages",charIndex:2740},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:3682}],headersStr:"Writing a program Compilation Running a program JVM languages Conclusion",content:"Even if you are not an experienced programmer, you have probably heard something about Java. It is not only a programming language but also a widely used software platform. In this topic, you will get some essential ideas about the Java platform and learn how to write and run your programs in Java environment.\n\n\n# Writing a program\n\nAs a developer, the first thing you do while creating a program is writing the source code in a plain text file and saving it with an extension corresponding to the programming language you've chosen (.java for the Java language, .kt for Kotlin, and so on). A single program consists of one or more such files, which contain instructions specifying what the program does. The source code must follow the syntax rules of the respective language and be easy to read and understand.\n\n\n# Compilation\n\nAfter the code is written, you need to make the computer run the program. As computers don't understand the source code, it needs to be translated into a computer-comprehensible format. That's where a special program called a compiler comes in handy. The code obtained after compilation is called native code or low-level code. Each computer platform uses different low-level commands, just like people around the world speak different languages. It creates an additional challenge to use a program on different devices.\n\nIn the world of Java, a compiler (the javac tool for Java or the kotlinc tool for Kotlin) translates source code into an intermediate representation known as Java bytecode stored in files with a .class extension. Computers can't read bytecode without translation, but a system called the Java Virtual Machine (JVM) can execute it.\n\n\n# Running a program\n\nThe Java Virtual Machine is an application that represents a virtual computer according to the JVM specification document. It executes the compiled Java bytecode and translates it into low-level commands, which the computer understands. Each platform has its own version of the JVM, but since all JVMs match the same specification, your program will behave identically on different devices.\n\nOne of the main concepts of the Java Platform is \"write once, run anywhere\". It means that a program can run on various devices as long as they have a JVM installed. This concept is also frequently called platform independence or portability.\n\n提示\n\nIt's important to remember: the code input into the JVM is platform-independent, while the output code is platform-dependent.\n\n\n\nA platform-independent program in the world of Java\n\nIf the JVM is installed on the computer, you can run a compiled JVM program using the java tool. It will open a file with the .class extension to launch the program from this file. The tool is the same for all JVM languages.\n\nThe picture below briefly summarizes the work cycle of a JVM program.\n\n\n\n\n# JVM languages\n\nThe Java Platform allows using more than one programming language to create programs. This is achieved by the design of the JVM: it doesn't know anything about any particular programming language. It only understands Java bytecode. If the tools for a programming language can generate bytecode, programs written in this language can be executed on the JVM. Such languages are often called JVM languages. They include Java itself, Kotlin, Scala, Groovy, Clojure, and others. So, to create programs in the world of Java, you can choose the most convenient language of your choice.\n\nNowadays, you can find tools to generate Java bytecode for almost any programming language, which means that there's hardly any language that is not a JVM language.\n\n\n\nDifferent programming languages can be used to write programs in the world of Java\n\n\n# Conclusion\n\n * Developers write program source code in text files with appropriate extensions.\n * Compilers translate source code into Java bytecode stored in .class files.\n * The Java Virtual Machine executes bytecode, giving low-level commands to the computer.\n * All JVMs are defined by the JVM specification, thus providing platform independence for programs.",normalizedContent:"even if you are not an experienced programmer, you have probably heard something about java. it is not only a programming language but also a widely used software platform. in this topic, you will get some essential ideas about the java platform and learn how to write and run your programs in java environment.\n\n\n# writing a program\n\nas a developer, the first thing you do while creating a program is writing the source code in a plain text file and saving it with an extension corresponding to the programming language you've chosen (.java for the java language, .kt for kotlin, and so on). a single program consists of one or more such files, which contain instructions specifying what the program does. the source code must follow the syntax rules of the respective language and be easy to read and understand.\n\n\n# compilation\n\nafter the code is written, you need to make the computer run the program. as computers don't understand the source code, it needs to be translated into a computer-comprehensible format. that's where a special program called a compiler comes in handy. the code obtained after compilation is called native code or low-level code. each computer platform uses different low-level commands, just like people around the world speak different languages. it creates an additional challenge to use a program on different devices.\n\nin the world of java, a compiler (the javac tool for java or the kotlinc tool for kotlin) translates source code into an intermediate representation known as java bytecode stored in files with a .class extension. computers can't read bytecode without translation, but a system called the java virtual machine (jvm) can execute it.\n\n\n# running a program\n\nthe java virtual machine is an application that represents a virtual computer according to the jvm specification document. it executes the compiled java bytecode and translates it into low-level commands, which the computer understands. each platform has its own version of the jvm, but since all jvms match the same specification, your program will behave identically on different devices.\n\none of the main concepts of the java platform is \"write once, run anywhere\". it means that a program can run on various devices as long as they have a jvm installed. this concept is also frequently called platform independence or portability.\n\n提示\n\nit's important to remember: the code input into the jvm is platform-independent, while the output code is platform-dependent.\n\n\n\na platform-independent program in the world of java\n\nif the jvm is installed on the computer, you can run a compiled jvm program using the java tool. it will open a file with the .class extension to launch the program from this file. the tool is the same for all jvm languages.\n\nthe picture below briefly summarizes the work cycle of a jvm program.\n\n\n\n\n# jvm languages\n\nthe java platform allows using more than one programming language to create programs. this is achieved by the design of the jvm: it doesn't know anything about any particular programming language. it only understands java bytecode. if the tools for a programming language can generate bytecode, programs written in this language can be executed on the jvm. such languages are often called jvm languages. they include java itself, kotlin, scala, groovy, clojure, and others. so, to create programs in the world of java, you can choose the most convenient language of your choice.\n\nnowadays, you can find tools to generate java bytecode for almost any programming language, which means that there's hardly any language that is not a jvm language.\n\n\n\ndifferent programming languages can be used to write programs in the world of java\n\n\n# conclusion\n\n * developers write program source code in text files with appropriate extensions.\n * compilers translate source code into java bytecode stored in .class files.\n * the java virtual machine executes bytecode, giving low-level commands to the computer.\n * all jvms are defined by the jvm specification, thus providing platform independence for programs.",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：Annotations basics",frontmatter:{title:"Theory：Annotations basics",date:"2022-06-21T20:56:57.000Z",permalink:"/pages/2e50ec/",tags:["Java"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/03.%E5%BA%94%E7%9F%A5/47.Theory%EF%BC%9AAnnotations%20basics.html",relativePath:"01.Java/01.Hyperskill - Java/03.应知/47.Theory：Annotations basics.md",key:"v-8e2fd182",path:"/pages/2e50ec/",headers:[{level:2,title:"Annotation, where are you?",slug:"annotation-where-are-you",normalizedTitle:"annotation, where are you?",charIndex:609},{level:2,title:"Built-in annotations",slug:"built-in-annotations",normalizedTitle:"built-in annotations",charIndex:1102},{level:2,title:"Annotation elements",slug:"annotation-elements",normalizedTitle:"annotation elements",charIndex:2616},{level:2,title:"@Deprecated annotation",slug:"deprecated-annotation",normalizedTitle:"@deprecated annotation",charIndex:4231},{level:2,title:"Wow, a custom annotation",slug:"wow-a-custom-annotation",normalizedTitle:"wow, a custom annotation",charIndex:5002},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:6344}],headersStr:"Annotation, where are you? Built-in annotations Annotation elements @Deprecated annotation Wow, a custom annotation Conclusion",content:'An annotation is a special Java instrument that provides information about a program. Its main goal is to make programmers\' lives easier. To give them a more formal definition, annotations are a form of metadata, which means they are not part of the program itself.\n\nYou can mark classes, methods, fields, variables, and other parts of a program with annotations. When you do it, annotations provide information for the compiler, for some development tools, or for frameworks and libraries at runtime.\n\nNow that you know how useful they are, you have no other choice but to make friends with annotations!\n\n\n# Annotation, where are you?\n\nBut do you understand that the day has come and what is in front of you is your first annotation? All annotations are started with the @ symbol followed by the annotation name, and they are usually marked with a color different from the code.\n\nHere is an example:\n\n@Override\npublic void printName() {\n    System.out.println(this.name);\n}\n\n\n1\n2\n3\n4\n\n\n@Override is an annotation here.\n\n提示\n\nYou can also mark a class/method/field/etc with two or more annotations!\n\n\n# Built-in annotations\n\nJava has several built-in annotations. If you want to use other annotations, you will need to include libraries or frameworks, or even create your own annotations.\n\nBut first, let\'s discuss the three main built-in annotations that were presented to the world in Java 5:\n\n * @Deprecated\n   \n   \n   1\n   \n   \n   is a simple annotation which means that the marked method (or class, field, and so on) is deprecated, that is, obsolete and should no longer be used. This annotation causes a compile warning if the code is used.\n   \n   @Deprecated\n   public void oldMethod() {\n       System.out.println("Hello!");\n   }\n   \n   \n   1\n   2\n   3\n   4\n   \n\n * @SuppressWarnings\n   \n   \n   1\n   \n   \n   commands the compiler to disable some compile-time warnings. You specify in parameters which warnings you don\'t want to see, for example:\n   \n   @SuppressWarnings("unused")\n   public void printHello() {\n       System.out.println("Hello!");\n   }\n   \n   \n   1\n   2\n   3\n   4\n   \n\nImagine you created a method printHello but didn\'t use it. The compiler doesn\'t like unused methods, but with the @SuppressWarnings("unused") annotation where "unused" is a parameter, you can disable that compile warning. This annotation can be applied to classes, methods, fields, local variables, and other parts of the program.\n\n * @Override marks a method that overrides a superclass method. This annotation can only be applied to methods. We will consider it in detail in a separate topic about overriding methods.\n\n\n# Annotation elements\n\nSome annotations have elements, where an element is similar to an attribute or a parameter. You have already seen an example of an element in a previous section. Let\'s give it a closer look.\n\nRemember the annotation called @SuppressWarnings? It takes the type of warning you want to disable as a parameter.\n\n@SuppressWarnings("unused") \npublic void printHello() {\n    System.out.println("Hello!");\n}\n\n\n1\n2\n3\n4\n\n\nIf you show some curiosity and look inside the @SuppressWarnings annotation, you will find out that it has only one element named value. Because the element is just one and is called value, it can be omitted, but the full definition will look like this:\n\n@SuppressWarnings(value = "unused")\npublic void printHello() {\n    System.out.println("Hello!");\n}\n\n\n1\n2\n3\n4\n\n\n提示\n\nPay attention the full definition could be omitted for value field only. For other field names full definition is required\n\nAn annotation element can also be an array. In fact, the actual type of value in@SuppressWarnings annotation is String[]:\n\n@SuppressWarnings({"unused", "deprecation"})\npublic void printHello() { ... }\n\n\n1\n2\n\n\n"deprecation", as you might have guessed from the name, instructs the compiler to suppress warnings about the use of deprecated code.\n\nFinally, the last thing you need to know is that some annotations have a default value for an element, and some don\'t.\n\n@SuppressWarnings // wrong syntax, there is no default value!\npublic void printHello() {\n    System.out.println("Hello!");\n}\n\n\n1\n2\n3\n4\n\n\nFor example, @SuppressWarnings doesn\'t have a default value, so you can\'t skip it.\n\n\n# @Deprecated annotation\n\nFor many years the @Deprecated annotation didn\'t have any elements, but starting from Java 9 it has two: since and forRemoval. We will quickly break them down because there is a big chance you will meet them in practice.\n\n * since requires the version (String) in which the annotated element has become deprecated. The default value is an empty string.\n * forRemoval indicates whether the annotated element is to be removed in a future version. The default value is false.\n\n@Deprecated(since = "5.3", forRemoval = true)\npublic void printHello() {\n    System.out.println("Hello!");\n}\n\n\n1\n2\n3\n4\n\n\nThe example above means that the printHello method has been deprecated since version 5.3 of our library and it will be removed in the next release.\n\n\n# Wow, a custom annotation\n\nFear not: we won\'t create any new annotations in this topic. But we will look into two annotations from external sources. Both @NotNull and @Range annotations mark classes, fields, methods, and parameters.\n\nThe @NotNull annotation indicates that:\n\n * a variable cannot be null;\n * a method should not return null.\n\nAnd the @Range annotation indicates that:\n\n * a variable always belongs to the specified range;\n * a method returns an integer number that belongs to the specified range.\n\nNow let\'s look at our class called GameCharacter:\n\nclass GameCharacter {\n\n    @NotNull\n    private String login;\n\n    @Range(min = 1, max = 100)\n    private int level = 1;\n\n    public GameCharacter(\n            @NotNull String login,\n            @Range(min = 1, max = 100) int level) {\n\n        this.login = login;\n        this.level = level;\n    }\n\n    @NotNull\n    public String getLogin() {\n        return login;\n    }\n\n    @Range(min = 1, max = 100)\n    public int getLevel() {\n        return level;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\nHere these annotations will help you by showing warnings if login contains null, or if the level of your character is less than 1 or more than 100.\n\n@NotNull is taken from JetBrains and @Range is taken from the popular framework Hibernate.\n\n\n# Conclusion\n\nIn this topic, you finally learned about annotations and now you know that their main goal is to provide some important information to the compiler, development tools, frameworks, and libraries at runtime. Some annotations contain elements, for which you can provide values. You also learned about the three built-in annotations and looked at a couple of examples of custom annotations. And in the next topic, you will learn how to create them yourself.\n\nIn real-life programming, you will meet plenty of different annotations, but there is no reason to be afraid: they are here to make your life easier and you can always find the explanations you need in documentation.',normalizedContent:'an annotation is a special java instrument that provides information about a program. its main goal is to make programmers\' lives easier. to give them a more formal definition, annotations are a form of metadata, which means they are not part of the program itself.\n\nyou can mark classes, methods, fields, variables, and other parts of a program with annotations. when you do it, annotations provide information for the compiler, for some development tools, or for frameworks and libraries at runtime.\n\nnow that you know how useful they are, you have no other choice but to make friends with annotations!\n\n\n# annotation, where are you?\n\nbut do you understand that the day has come and what is in front of you is your first annotation? all annotations are started with the @ symbol followed by the annotation name, and they are usually marked with a color different from the code.\n\nhere is an example:\n\n@override\npublic void printname() {\n    system.out.println(this.name);\n}\n\n\n1\n2\n3\n4\n\n\n@override is an annotation here.\n\n提示\n\nyou can also mark a class/method/field/etc with two or more annotations!\n\n\n# built-in annotations\n\njava has several built-in annotations. if you want to use other annotations, you will need to include libraries or frameworks, or even create your own annotations.\n\nbut first, let\'s discuss the three main built-in annotations that were presented to the world in java 5:\n\n * @deprecated\n   \n   \n   1\n   \n   \n   is a simple annotation which means that the marked method (or class, field, and so on) is deprecated, that is, obsolete and should no longer be used. this annotation causes a compile warning if the code is used.\n   \n   @deprecated\n   public void oldmethod() {\n       system.out.println("hello!");\n   }\n   \n   \n   1\n   2\n   3\n   4\n   \n\n * @suppresswarnings\n   \n   \n   1\n   \n   \n   commands the compiler to disable some compile-time warnings. you specify in parameters which warnings you don\'t want to see, for example:\n   \n   @suppresswarnings("unused")\n   public void printhello() {\n       system.out.println("hello!");\n   }\n   \n   \n   1\n   2\n   3\n   4\n   \n\nimagine you created a method printhello but didn\'t use it. the compiler doesn\'t like unused methods, but with the @suppresswarnings("unused") annotation where "unused" is a parameter, you can disable that compile warning. this annotation can be applied to classes, methods, fields, local variables, and other parts of the program.\n\n * @override marks a method that overrides a superclass method. this annotation can only be applied to methods. we will consider it in detail in a separate topic about overriding methods.\n\n\n# annotation elements\n\nsome annotations have elements, where an element is similar to an attribute or a parameter. you have already seen an example of an element in a previous section. let\'s give it a closer look.\n\nremember the annotation called @suppresswarnings? it takes the type of warning you want to disable as a parameter.\n\n@suppresswarnings("unused") \npublic void printhello() {\n    system.out.println("hello!");\n}\n\n\n1\n2\n3\n4\n\n\nif you show some curiosity and look inside the @suppresswarnings annotation, you will find out that it has only one element named value. because the element is just one and is called value, it can be omitted, but the full definition will look like this:\n\n@suppresswarnings(value = "unused")\npublic void printhello() {\n    system.out.println("hello!");\n}\n\n\n1\n2\n3\n4\n\n\n提示\n\npay attention the full definition could be omitted for value field only. for other field names full definition is required\n\nan annotation element can also be an array. in fact, the actual type of value in@suppresswarnings annotation is string[]:\n\n@suppresswarnings({"unused", "deprecation"})\npublic void printhello() { ... }\n\n\n1\n2\n\n\n"deprecation", as you might have guessed from the name, instructs the compiler to suppress warnings about the use of deprecated code.\n\nfinally, the last thing you need to know is that some annotations have a default value for an element, and some don\'t.\n\n@suppresswarnings // wrong syntax, there is no default value!\npublic void printhello() {\n    system.out.println("hello!");\n}\n\n\n1\n2\n3\n4\n\n\nfor example, @suppresswarnings doesn\'t have a default value, so you can\'t skip it.\n\n\n# @deprecated annotation\n\nfor many years the @deprecated annotation didn\'t have any elements, but starting from java 9 it has two: since and forremoval. we will quickly break them down because there is a big chance you will meet them in practice.\n\n * since requires the version (string) in which the annotated element has become deprecated. the default value is an empty string.\n * forremoval indicates whether the annotated element is to be removed in a future version. the default value is false.\n\n@deprecated(since = "5.3", forremoval = true)\npublic void printhello() {\n    system.out.println("hello!");\n}\n\n\n1\n2\n3\n4\n\n\nthe example above means that the printhello method has been deprecated since version 5.3 of our library and it will be removed in the next release.\n\n\n# wow, a custom annotation\n\nfear not: we won\'t create any new annotations in this topic. but we will look into two annotations from external sources. both @notnull and @range annotations mark classes, fields, methods, and parameters.\n\nthe @notnull annotation indicates that:\n\n * a variable cannot be null;\n * a method should not return null.\n\nand the @range annotation indicates that:\n\n * a variable always belongs to the specified range;\n * a method returns an integer number that belongs to the specified range.\n\nnow let\'s look at our class called gamecharacter:\n\nclass gamecharacter {\n\n    @notnull\n    private string login;\n\n    @range(min = 1, max = 100)\n    private int level = 1;\n\n    public gamecharacter(\n            @notnull string login,\n            @range(min = 1, max = 100) int level) {\n\n        this.login = login;\n        this.level = level;\n    }\n\n    @notnull\n    public string getlogin() {\n        return login;\n    }\n\n    @range(min = 1, max = 100)\n    public int getlevel() {\n        return level;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\nhere these annotations will help you by showing warnings if login contains null, or if the level of your character is less than 1 or more than 100.\n\n@notnull is taken from jetbrains and @range is taken from the popular framework hibernate.\n\n\n# conclusion\n\nin this topic, you finally learned about annotations and now you know that their main goal is to provide some important information to the compiler, development tools, frameworks, and libraries at runtime. some annotations contain elements, for which you can provide values. you also learned about the three built-in annotations and looked at a couple of examples of custom annotations. and in the next topic, you will learn how to create them yourself.\n\nin real-life programming, you will meet plenty of different annotations, but there is no reason to be afraid: they are here to make your life easier and you can always find the explanations you need in documentation.',charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：JVM, JRE, and JDK",frontmatter:{title:"Theory：JVM, JRE, and JDK",date:"2022-06-24T20:10:50.000Z",permalink:"/pages/d75f79/",tags:["Java","JVM"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/03.%E5%BA%94%E7%9F%A5/50.Theory%EF%BC%9AJVM,%20JRE,%20and%20JDK.html",relativePath:"01.Java/01.Hyperskill - Java/03.应知/50.Theory：JVM, JRE, and JDK.md",key:"v-58374e5d",path:"/pages/d75f79/",headers:[{level:2,title:"Java Virtual Machine (JVM)",slug:"java-virtual-machine-jvm",normalizedTitle:"java virtual machine (jvm)",charIndex:374},{level:2,title:"Java Runtime Environment (JRE)",slug:"java-runtime-environment-jre",normalizedTitle:"java runtime environment (jre)",charIndex:1227},{level:2,title:"Java Development Kit (JDK)",slug:"java-development-kit-jdk",normalizedTitle:"java development kit (jdk)",charIndex:1838},{level:2,title:"The relationship between JVM, JRE, and JDK",slug:"the-relationship-between-jvm-jre-and-jdk",normalizedTitle:"the relationship between jvm, jre, and jdk",charIndex:2963},{level:2,title:"Summary",slug:"summary",normalizedTitle:"summary",charIndex:3089}],headersStr:"Java Virtual Machine (JVM) Java Runtime Environment (JRE) Java Development Kit (JDK) The relationship between JVM, JRE, and JDK Summary",content:"JVM languages, such as Java, Kotlin, or Scala, may be confusing for beginners since there are a number of basic terms that might be hard to differentiate between at first. This topic will get you more familiar with development for Java Platform by introducing those basics and giving an overview of how the code is being treated by different components of the platform.\n\n\n# Java Virtual Machine (JVM)\n\nJava Virtual Machine, or JVM, is a virtual simulation of a physical computer. It executes the Java (or Java compatible) bytecode, which comes after the source code compilation. In some sense, JVM acts as a mediator between the code and the real machine. It operates with a set of unified bytecode instructions that are interpreted and translated into machine instructions.\n\nJVMs are available for many hardware and software platforms, so you can run the bytecode almost everywhere. A program compiled to the bytecode is almost always platform-independent. Basically, when you have a JVM language code, you need to compile it only once, get the bytecode, and you'll be able to run it on any platform that has JVM.\n\nToday there is a variety of JVM implementations, Java HotSpot Virtual Machine being the primary reference.\n\n\n# Java Runtime Environment (JRE)\n\nJava Runtime Environment, or JRE, is an execution environment. It includes the necessary components for running compiled JVM programs: JVM itself and Java Class Library (JCL).\n\nJCL is essentially a set of standard libraries providing the most common functionality: fundamental classes, input/output, math package, collections, security, user interface toolkits, and many others. You can utilize these libraries in your programs.\n\nWhen you run a compiled program, JRE combines the program bytecode with necessary libraries and runs JVM, which executes the resulting bytecode.\n\n\n# Java Development Kit (JDK)\n\nJava Development Kit, or JDK, is a package to develop programs for the Java Platform. It includes JRE to run the programs and tools for developers: Java compiler, debugger, archiver, documentation generator, etc.\n\nAt the compilation stage, compilers translate source code into .class files that contain bytecode and can be executed by JVM. Note that if you're using JVM languages other than Java, you will need to download compilers separately, as they are not bundled with JDK.\n\nIn practice, programs often consist of multiple .class files packed together with an archiver tool into a single Java Archive (JAR file). JRE can run the program packed into a JAR directly without extracting the archived files. The resulting file is more convenient to store and share over the network since the data is compressed.\n\n提示\n\nBefore Java 11, if you wanted only to run a Java program, JRE was enough for you. However, since Java 11 was released, for most JVM implementations JRE is no longer downloadable as a separate component. If you want to run programs in JVM 11 or newer, you have to install JDK.\n\n\n# The relationship between JVM, JRE, and JDK\n\nThe following image illustrates the relationship between JVM, JRE, and JDK:\n\n\n\n\n# Summary\n\n * Java Virtual Machine executes compiled bytecode.\n * Java Runtime Environment includes JVM and standard libraries and runs compiled programs.\n * Java Development Kit, which includes JRE and development tools, is used by developers to write programs.",normalizedContent:"jvm languages, such as java, kotlin, or scala, may be confusing for beginners since there are a number of basic terms that might be hard to differentiate between at first. this topic will get you more familiar with development for java platform by introducing those basics and giving an overview of how the code is being treated by different components of the platform.\n\n\n# java virtual machine (jvm)\n\njava virtual machine, or jvm, is a virtual simulation of a physical computer. it executes the java (or java compatible) bytecode, which comes after the source code compilation. in some sense, jvm acts as a mediator between the code and the real machine. it operates with a set of unified bytecode instructions that are interpreted and translated into machine instructions.\n\njvms are available for many hardware and software platforms, so you can run the bytecode almost everywhere. a program compiled to the bytecode is almost always platform-independent. basically, when you have a jvm language code, you need to compile it only once, get the bytecode, and you'll be able to run it on any platform that has jvm.\n\ntoday there is a variety of jvm implementations, java hotspot virtual machine being the primary reference.\n\n\n# java runtime environment (jre)\n\njava runtime environment, or jre, is an execution environment. it includes the necessary components for running compiled jvm programs: jvm itself and java class library (jcl).\n\njcl is essentially a set of standard libraries providing the most common functionality: fundamental classes, input/output, math package, collections, security, user interface toolkits, and many others. you can utilize these libraries in your programs.\n\nwhen you run a compiled program, jre combines the program bytecode with necessary libraries and runs jvm, which executes the resulting bytecode.\n\n\n# java development kit (jdk)\n\njava development kit, or jdk, is a package to develop programs for the java platform. it includes jre to run the programs and tools for developers: java compiler, debugger, archiver, documentation generator, etc.\n\nat the compilation stage, compilers translate source code into .class files that contain bytecode and can be executed by jvm. note that if you're using jvm languages other than java, you will need to download compilers separately, as they are not bundled with jdk.\n\nin practice, programs often consist of multiple .class files packed together with an archiver tool into a single java archive (jar file). jre can run the program packed into a jar directly without extracting the archived files. the resulting file is more convenient to store and share over the network since the data is compressed.\n\n提示\n\nbefore java 11, if you wanted only to run a java program, jre was enough for you. however, since java 11 was released, for most jvm implementations jre is no longer downloadable as a separate component. if you want to run programs in jvm 11 or newer, you have to install jdk.\n\n\n# the relationship between jvm, jre, and jdk\n\nthe following image illustrates the relationship between jvm, jre, and jdk:\n\n\n\n\n# summary\n\n * java virtual machine executes compiled bytecode.\n * java runtime environment includes jvm and standard libraries and runs compiled programs.\n * java development kit, which includes jre and development tools, is used by developers to write programs.",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：Jave Archive",frontmatter:{title:"Theory：Jave Archive",date:"2022-06-27T15:56:56.000Z",permalink:"/pages/df0a86/",tags:["Java"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/03.%E5%BA%94%E7%9F%A5/53.Theory%EF%BC%9AJave%20Archive.html",relativePath:"01.Java/01.Hyperskill - Java/03.应知/53.Theory：Jave Archive.md",key:"v-34448c65",path:"/pages/df0a86/",headers:[{level:2,title:"What is Java Archive?",slug:"what-is-java-archive",normalizedTitle:"what is java archive?",charIndex:2},{level:2,title:"The structure of a JAR file",slug:"the-structure-of-a-jar-file",normalizedTitle:"the structure of a jar file",charIndex:636},{level:2,title:"Running a JAR file",slug:"running-a-jar-file",normalizedTitle:"running a jar file",charIndex:2526},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:3688}],headersStr:"What is Java Archive? The structure of a JAR file Running a JAR file Conclusion",content:"# What is Java Archive?\n\nJava Archive (JAR) is a platform-independent file format to pack multiple files together and distribute them as a single unit. So it comes in handy if your application contains lots of files.\n\n\n\nThese are the main benefits of a JAR file:\n\n * it can aggregate multiple files of different types;\n * it is a compressed archive (with a ZIP algorithm) that reduces the size of the application and makes it easier to move it over a network;\n * you can digitally sign it (this feature won't be discussed in this topic).\n\nA JRE can start an application packed into a JAR, but to create a JAR you need to use a JDK.\n\n\n# The structure of a JAR file\n\nA JAR file is simply an aggregation of bytecode files (.class), configuration files (e.g., .json, .xml), images, and even sound clips into a single compressed file. All files except bytecode files are usually called resources. It is also recommended that a JAR file contains a special file named MANIFEST.MF in a special folder named META-INF. This file should describe the JAR file itself (a manifest is a kind of metadata): its version, the author, and so on.\n\nHere is the example of a structure of a JAR file:\n\nexample.jar\n├── META-INF\n│   └── MANIFEST.MF\n├── second\n│   ├── Main.class\n│   └── MyIcon.png\n└── third\n    └── another\n        └── OneMore.class\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nUsually, a JAR file has a set of .class grouped by packages. For now, just imagine a package simply as a directory or some nested directories. In our example, there are two packages: second and third/another. Also, to represent a specific package name dots are used instead of slashes (so third.another notation would be correct in this case). Finally, there are some rules for naming the packages. For instance, a name can contain letters and digits, but no hyphens (-).\n\nAs you can see, JAR may have several packages and many .class files and/or resources in these packages.\n\nThe manifest file has a set of headers. The name and the value are separated by a colon (:). Take a look at a small example below:\n\nManifest-Version: 1.0\nCreated-By: 9.0.1 (Oracle Corporation)\nMain-Class: second.Main\n\n\n1\n2\n3\n\n\nThe key feature here is the optional header Main-Class that defines the relative path of a class with the main method to start the application. The value shouldn't have the .class extension appended to the class name.\n\nIt's important to remember that the last line of the manifest file should end with a new line or a carriage return, or it will not be parsed properly.\n\n\n# Running a JAR file\n\nThere are two ways to run a JAR file, depending on whether you want to use Main-Class header in the manifest file or not.\n\n * if this header is not present or you want to specify the main class manually, run:\n\njava -cp app-without-main-class-header.jar path.to.Main\n\n\n1\n\n\nThe last parameter here is the full class name (with packages). The -cp option means classpath i.e. paths to all the JARs which the JRE should scan for bytecode and resources. If you want, you can repeat multiple -cp path-to-Nth.jar pairs of parameters to provide the JRE with multiple different JAR files.\n\n * if this header is present, then run:\n\njava -jar app-with-main-class-header.jar\n\n\n1\n\n\nYou can try executing both commands locally with these two JAR files (unpack top-level archives):\n\n * a demo application without Main-Class header (path to main is myapp.Main);\n * a demo application with Main-Class header.\n\nBoth of them print the same line:\n\nHello, Java\n\n\n1\n\n\nAlso, you can find some JAR files on the Internet and try running those. At the same time, you can view their internal structure – just replace .jar with .zip and open these files as archives.\n\n\n# Conclusion\n\nNow you know what JAR is, what JAR files consist of, and how to run them on your computer. We have not discussed here how to create a JAR. Usually, developers use build tools (like Maven or Gradle) or an IDE (like IntelliJ IDEA or Eclipse), which we cover in other topics. You can also create them just by merging some files into a .zip archive and renaming it into a .jar file.\n\nIf you'd like to know more about the JAR file structure, read the specification.",normalizedContent:"# what is java archive?\n\njava archive (jar) is a platform-independent file format to pack multiple files together and distribute them as a single unit. so it comes in handy if your application contains lots of files.\n\n\n\nthese are the main benefits of a jar file:\n\n * it can aggregate multiple files of different types;\n * it is a compressed archive (with a zip algorithm) that reduces the size of the application and makes it easier to move it over a network;\n * you can digitally sign it (this feature won't be discussed in this topic).\n\na jre can start an application packed into a jar, but to create a jar you need to use a jdk.\n\n\n# the structure of a jar file\n\na jar file is simply an aggregation of bytecode files (.class), configuration files (e.g., .json, .xml), images, and even sound clips into a single compressed file. all files except bytecode files are usually called resources. it is also recommended that a jar file contains a special file named manifest.mf in a special folder named meta-inf. this file should describe the jar file itself (a manifest is a kind of metadata): its version, the author, and so on.\n\nhere is the example of a structure of a jar file:\n\nexample.jar\n├── meta-inf\n│   └── manifest.mf\n├── second\n│   ├── main.class\n│   └── myicon.png\n└── third\n    └── another\n        └── onemore.class\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nusually, a jar file has a set of .class grouped by packages. for now, just imagine a package simply as a directory or some nested directories. in our example, there are two packages: second and third/another. also, to represent a specific package name dots are used instead of slashes (so third.another notation would be correct in this case). finally, there are some rules for naming the packages. for instance, a name can contain letters and digits, but no hyphens (-).\n\nas you can see, jar may have several packages and many .class files and/or resources in these packages.\n\nthe manifest file has a set of headers. the name and the value are separated by a colon (:). take a look at a small example below:\n\nmanifest-version: 1.0\ncreated-by: 9.0.1 (oracle corporation)\nmain-class: second.main\n\n\n1\n2\n3\n\n\nthe key feature here is the optional header main-class that defines the relative path of a class with the main method to start the application. the value shouldn't have the .class extension appended to the class name.\n\nit's important to remember that the last line of the manifest file should end with a new line or a carriage return, or it will not be parsed properly.\n\n\n# running a jar file\n\nthere are two ways to run a jar file, depending on whether you want to use main-class header in the manifest file or not.\n\n * if this header is not present or you want to specify the main class manually, run:\n\njava -cp app-without-main-class-header.jar path.to.main\n\n\n1\n\n\nthe last parameter here is the full class name (with packages). the -cp option means classpath i.e. paths to all the jars which the jre should scan for bytecode and resources. if you want, you can repeat multiple -cp path-to-nth.jar pairs of parameters to provide the jre with multiple different jar files.\n\n * if this header is present, then run:\n\njava -jar app-with-main-class-header.jar\n\n\n1\n\n\nyou can try executing both commands locally with these two jar files (unpack top-level archives):\n\n * a demo application without main-class header (path to main is myapp.main);\n * a demo application with main-class header.\n\nboth of them print the same line:\n\nhello, java\n\n\n1\n\n\nalso, you can find some jar files on the internet and try running those. at the same time, you can view their internal structure – just replace .jar with .zip and open these files as archives.\n\n\n# conclusion\n\nnow you know what jar is, what jar files consist of, and how to run them on your computer. we have not discussed here how to create a jar. usually, developers use build tools (like maven or gradle) or an ide (like intellij idea or eclipse), which we cover in other topics. you can also create them just by merging some files into a .zip archive and renaming it into a .jar file.\n\nif you'd like to know more about the jar file structure, read the specification.",charsets:{},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：Running programs on your computer",frontmatter:{title:"Theory：Running programs on your computer",date:"2022-08-07T10:46:45.000Z",permalink:"/pages/838d38/",tags:["Java","Programming"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/03.%E5%BA%94%E7%9F%A5/90.Theory%EF%BC%9ARunning%20programs%20on%20your%20computer.html",relativePath:"01.Java/01.Hyperskill - Java/03.应知/90.Theory：Running programs on your computer.md",key:"v-cebfecc8",path:"/pages/838d38/",headers:[{level:2,title:"Installing Java on your computer",slug:"installing-java-on-your-computer",normalizedTitle:"installing java on your computer",charIndex:2},{level:2,title:"Writing a program",slug:"writing-a-program",normalizedTitle:"writing a program",charIndex:791},{level:2,title:"Compiling and running a program",slug:"compiling-and-running-a-program",normalizedTitle:"compiling and running a program",charIndex:1473}],headersStr:"Installing Java on your computer Writing a program Compiling and running a program",content:"# Installing Java on your computer\n\nIn this topic, you will compile and run the simplest Hello World program on your computer. There is one prerequisite: you need to install a JDK to develop Java applications. Please, download the up to date Java version. Our projects now support Java 17. Just follow the installation instructions given for your operating system.\n\nTo check that the installation has been completed, let's check the version of Java by typing the following command in a terminal:\n\njava -version\n\n\n1\n\n\nIt outputs the version of Java that is installed on your computer. If it does not work correctly, open the installation instructions and try to set the path variable in your operating system.\n\nIf you get stuck with Javac not being recognizable, try to watch this video.\n\n\n# Writing a program\n\nLet's write a simple program and then start it on your computer. To do that we will use a terminal.\n\nStep 1. Create a file named Main.java using any text editor (such as TextPad or NotePad++ for Windows; jEdit or gedit for Mac OS X; gedit for Ubuntu; or something else) and save it in a folder.\n\nStep 2. Paste the following source code into this file:\n\npublic class Main {\n\n    public static void main(String[] args) {\n        System.out.println(\"Hello, Java\");\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\nThe public class name must be the same as the file name.\n\n提示\n\nNote, we assume you already understand how the Hello World program works. If not, see here and then come back.\n\n\n# Compiling and running a program\n\nTo run the program, we will use a terminal installed in your OS. All the following commands need to be executed from within the same folder that the .java file is created in.\n\nStep 3. Compile the program using the following command in the terminal:\n\njavac Main.java\n\n\n1\n\n\nThe javac command asks the compiler to translate the source code into bytecode. The result of this command is a file named Main.class.\n\nStep 4. Run the compiled program (make sure that your terminal is open in the same directory as your source file):\n\njava -cp . Main\n\n\n1\n\n\nThe java command starts a Java application. It does this by starting a JRE and invoking the main method inside the Main class.\n\nThe -cp parameter (classpath) specifies the location of user-defined classes and packages. The dot . means the current terminal directory. We will consider it in detail in the next topics.\n\n提示\n\nNote: you should not specify the .class extension when running a program.\n\nThe program should output the following text:\n\nHello, Java\n\n\n1\n\n\nBelow is an animation that executes all these steps.\n\n\n\nCongratulations! You have just started a simple program on your computer. Try to change this program, if you would like to get more interesting results.\n\n提示\n\nSince Java 11 it is possible to compile and run Java source code file using a single command java Main.java. It will compile the file in-memory, so it does not produce a .class file. Many developers don't know this small but interesting feature.",normalizedContent:"# installing java on your computer\n\nin this topic, you will compile and run the simplest hello world program on your computer. there is one prerequisite: you need to install a jdk to develop java applications. please, download the up to date java version. our projects now support java 17. just follow the installation instructions given for your operating system.\n\nto check that the installation has been completed, let's check the version of java by typing the following command in a terminal:\n\njava -version\n\n\n1\n\n\nit outputs the version of java that is installed on your computer. if it does not work correctly, open the installation instructions and try to set the path variable in your operating system.\n\nif you get stuck with javac not being recognizable, try to watch this video.\n\n\n# writing a program\n\nlet's write a simple program and then start it on your computer. to do that we will use a terminal.\n\nstep 1. create a file named main.java using any text editor (such as textpad or notepad++ for windows; jedit or gedit for mac os x; gedit for ubuntu; or something else) and save it in a folder.\n\nstep 2. paste the following source code into this file:\n\npublic class main {\n\n    public static void main(string[] args) {\n        system.out.println(\"hello, java\");\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\nthe public class name must be the same as the file name.\n\n提示\n\nnote, we assume you already understand how the hello world program works. if not, see here and then come back.\n\n\n# compiling and running a program\n\nto run the program, we will use a terminal installed in your os. all the following commands need to be executed from within the same folder that the .java file is created in.\n\nstep 3. compile the program using the following command in the terminal:\n\njavac main.java\n\n\n1\n\n\nthe javac command asks the compiler to translate the source code into bytecode. the result of this command is a file named main.class.\n\nstep 4. run the compiled program (make sure that your terminal is open in the same directory as your source file):\n\njava -cp . main\n\n\n1\n\n\nthe java command starts a java application. it does this by starting a jre and invoking the main method inside the main class.\n\nthe -cp parameter (classpath) specifies the location of user-defined classes and packages. the dot . means the current terminal directory. we will consider it in detail in the next topics.\n\n提示\n\nnote: you should not specify the .class extension when running a program.\n\nthe program should output the following text:\n\nhello, java\n\n\n1\n\n\nbelow is an animation that executes all these steps.\n\n\n\ncongratulations! you have just started a simple program on your computer. try to change this program, if you would like to get more interesting results.\n\n提示\n\nsince java 11 it is possible to compile and run java source code file using a single command java main.java. it will compile the file in-memory, so it does not produce a .class file. many developers don't know this small but interesting feature.",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：Enums in Java",frontmatter:{title:"Theory：Enums in Java",date:"2022-09-03T11:57:37.000Z",permalink:"/pages/a7afdd/",tags:["Java","Enum"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/03.%E5%BA%94%E7%9F%A5/96.Theory%EF%BC%9AEnums%20in%20Java.html",relativePath:"01.Java/01.Hyperskill - Java/03.应知/96.Theory：Enums in Java.md",key:"v-35f418d8",path:"/pages/a7afdd/",headers:[{level:2,title:"Defining an enum",slug:"defining-an-enum",normalizedTitle:"defining an enum",charIndex:472},{level:2,title:"Methods for processing enums",slug:"methods-for-processing-enums",normalizedTitle:"methods for processing enums",charIndex:1437},{level:2,title:"Enumerations in the switch statement",slug:"enumerations-in-the-switch-statement",normalizedTitle:"enumerations in the switch statement",charIndex:3165},{level:2,title:"Iterating over an enum",slug:"iterating-over-an-enum",normalizedTitle:"iterating over an enum",charIndex:3948},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:4416}],headersStr:"Defining an enum Methods for processing enums Enumerations in the switch statement Iterating over an enum Conclusion",content:'When a variable can only take one out of a small set of possible values, it\'s a good idea to use enums in a program. Enum is a special keyword short for enumeration that allows us to create a list of constants grouped by their content: seasons, colors, states, etc. When we store a bunch of constants in one place and handle them together**,** it helps us to avoid errors, and it makes the code look more readable and clear.\n\nNow, let\'s look closer at how enums work.\n\n\n# Defining an enum\n\nWe can create our own enumeration in a way that is similar to declaring classes. According to the Java Code Convention, constants in an enum are written in uppercase letters. All constants should be separated with commas. Take a look at the example enum Season:\n\npublic enum Season {\n    SPRING, SUMMER, AUTUMN, WINTER // four instances\n}\n\n\n1\n2\n3\n\n\n提示\n\nIt is possible to declare an enum inside the class. In this case, we don\'t need to use public modifier in the enum declaration.\n\nIn general, an enum can be considered as a class with predefined instances. Here, we have four instances of seasons SPRING, SUMMER, AUTUMN and WINTER inside the storage Season. If we want to extend the list of constants, we can simply add another instance in our enum: mid-winter, Australian winter, etc. Don\'t forget that in real life they have to make sense.\n\nNow that we\'ve got an idea of how to define basic enums, let\'s learn how to use them in a program.\n\n\n# Methods for processing enums\n\nSuppose that we have to write a program with an enum that displays three possible user statuses. Let\'s create an enum UserStatus with these statuses:\n\npublic enum UserStatus {\n    PENDING, ACTIVE, BLOCKED\n}\n\n\n1\n2\n3\n\n\nAnd now we initialize a variable of the type UserStatus from the previous example:\n\nUserStatus active = UserStatus.ACTIVE;\n\n\n1\n\n\nEach enum value has a name that can be accessed by using the method name():\n\nSystem.out.println(active.name()); // ACTIVE\n\n\n1\n\n\nSometimes, we may need to access an enumeration instance by its name. This can be done with the valueOf() method which provides us with another way to initialize a variable:\n\nUserStatus blocked = UserStatus.valueOf("BLOCKED"); // BLOCKED\n\n\n1\n\n\nAn important thing to remember about this method is that it is case-sensitive**.** That means that if the given string doesn\'t exactly match any constant, we will get an IllegalArgumentException.\n\nUserStatus blocked = UserStatus.valueOf("blocked"); // IllegalArgumentException, valueOf is case-sensitive\n\n\n1\n\n\nIf we want to look at all constants of an enumeration, we can get them in an array by using the values() method:\n\nUserStatus[] statuses = UserStatus.values(); // [PENDING, ACTIVE, BLOCKED]\n\n\n1\n\n\nAnother method called ordinal() returns the ordinal position of an instance of an enum:\n\nSystem.out.println(active.ordinal()); // 1 (starting with 0)\nSystem.out.println(UserStatus.BLOCKED.ordinal()); // 2\n\n\n1\n2\n\n\nAlthough an enum is a reference type, two variables can be correctly compared by using both the equals method and the operator ==.\n\nSystem.out.println(active.equals(UserStatus.ACTIVE)); // true\nSystem.out.println(active == UserStatus.ACTIVE); // true\n\n\n1\n2\n\n\n\n# Enumerations in the switch statement\n\nAn enum can be successfully used in the switch statement. Depending on the status, our program can perform different actions indicated by the switch statement. In this case, it prints out different responses:\n\nUserStatus status = ... // some status\n \nswitch (status) {\n    case PENDING:\n        System.out.println("You need to wait a little.");\n        break;\n    case ACTIVE:\n        System.out.println("No problems, you may pass here.");\n        break;\n    case BLOCKED:\n        System.out.println("Stop! You can\'t pass here.");\n        break;\n    default:\n        System.out.println("Unsupported enum constant.");\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\nThe message that our program outputs depends on the value of the variable status.\n\n\n# Iterating over an enum\n\nOne of the best ways to iterate over an enum is to use a for or a for-each loop. Let\'s apply it to our sample enum:\n\n    for (UserStatus status : UserStatus.values()) {\n        System.out.println(status);\n    }\n/* the output is\nPENDING \nACTIVE\nBLOCKED\n*/\n        \n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nHere, we used the values() method to return an array of enum values. This loop comes in handy when iterating over enums with a large number of constants.\n\n\n# Conclusion\n\nAn enum is a special keyword that helps us to define named constants grouped together according to their content. By defining enums you can make code more readable and avoid invalid values being passed in. The number of constants in an enum may be extended whenever we want. Also, you can use the name(), valueOf(), ordinal() and equals() methods to process the enum. switch statements and for-each loops are widely used while working with enums in simple programs.\n\nNow you know how to use it, so get ready for some practice!',normalizedContent:'when a variable can only take one out of a small set of possible values, it\'s a good idea to use enums in a program. enum is a special keyword short for enumeration that allows us to create a list of constants grouped by their content: seasons, colors, states, etc. when we store a bunch of constants in one place and handle them together**,** it helps us to avoid errors, and it makes the code look more readable and clear.\n\nnow, let\'s look closer at how enums work.\n\n\n# defining an enum\n\nwe can create our own enumeration in a way that is similar to declaring classes. according to the java code convention, constants in an enum are written in uppercase letters. all constants should be separated with commas. take a look at the example enum season:\n\npublic enum season {\n    spring, summer, autumn, winter // four instances\n}\n\n\n1\n2\n3\n\n\n提示\n\nit is possible to declare an enum inside the class. in this case, we don\'t need to use public modifier in the enum declaration.\n\nin general, an enum can be considered as a class with predefined instances. here, we have four instances of seasons spring, summer, autumn and winter inside the storage season. if we want to extend the list of constants, we can simply add another instance in our enum: mid-winter, australian winter, etc. don\'t forget that in real life they have to make sense.\n\nnow that we\'ve got an idea of how to define basic enums, let\'s learn how to use them in a program.\n\n\n# methods for processing enums\n\nsuppose that we have to write a program with an enum that displays three possible user statuses. let\'s create an enum userstatus with these statuses:\n\npublic enum userstatus {\n    pending, active, blocked\n}\n\n\n1\n2\n3\n\n\nand now we initialize a variable of the type userstatus from the previous example:\n\nuserstatus active = userstatus.active;\n\n\n1\n\n\neach enum value has a name that can be accessed by using the method name():\n\nsystem.out.println(active.name()); // active\n\n\n1\n\n\nsometimes, we may need to access an enumeration instance by its name. this can be done with the valueof() method which provides us with another way to initialize a variable:\n\nuserstatus blocked = userstatus.valueof("blocked"); // blocked\n\n\n1\n\n\nan important thing to remember about this method is that it is case-sensitive**.** that means that if the given string doesn\'t exactly match any constant, we will get an illegalargumentexception.\n\nuserstatus blocked = userstatus.valueof("blocked"); // illegalargumentexception, valueof is case-sensitive\n\n\n1\n\n\nif we want to look at all constants of an enumeration, we can get them in an array by using the values() method:\n\nuserstatus[] statuses = userstatus.values(); // [pending, active, blocked]\n\n\n1\n\n\nanother method called ordinal() returns the ordinal position of an instance of an enum:\n\nsystem.out.println(active.ordinal()); // 1 (starting with 0)\nsystem.out.println(userstatus.blocked.ordinal()); // 2\n\n\n1\n2\n\n\nalthough an enum is a reference type, two variables can be correctly compared by using both the equals method and the operator ==.\n\nsystem.out.println(active.equals(userstatus.active)); // true\nsystem.out.println(active == userstatus.active); // true\n\n\n1\n2\n\n\n\n# enumerations in the switch statement\n\nan enum can be successfully used in the switch statement. depending on the status, our program can perform different actions indicated by the switch statement. in this case, it prints out different responses:\n\nuserstatus status = ... // some status\n \nswitch (status) {\n    case pending:\n        system.out.println("you need to wait a little.");\n        break;\n    case active:\n        system.out.println("no problems, you may pass here.");\n        break;\n    case blocked:\n        system.out.println("stop! you can\'t pass here.");\n        break;\n    default:\n        system.out.println("unsupported enum constant.");\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\nthe message that our program outputs depends on the value of the variable status.\n\n\n# iterating over an enum\n\none of the best ways to iterate over an enum is to use a for or a for-each loop. let\'s apply it to our sample enum:\n\n    for (userstatus status : userstatus.values()) {\n        system.out.println(status);\n    }\n/* the output is\npending \nactive\nblocked\n*/\n        \n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nhere, we used the values() method to return an array of enum values. this loop comes in handy when iterating over enums with a large number of constants.\n\n\n# conclusion\n\nan enum is a special keyword that helps us to define named constants grouped together according to their content. by defining enums you can make code more readable and avoid invalid values being passed in. the number of constants in an enum may be extended whenever we want. also, you can use the name(), valueof(), ordinal() and equals() methods to process the enum. switch statements and for-each loops are widely used while working with enums in simple programs.\n\nnow you know how to use it, so get ready for some practice!',charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：Fields and methods in enum",frontmatter:{title:"Theory：Fields and methods in enum",date:"2022-09-03T11:59:52.000Z",permalink:"/pages/342a00/",tags:["Java","Enum"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/03.%E5%BA%94%E7%9F%A5/97.Theory%EF%BC%9AFields%20and%20methods%20in%20enum.html",relativePath:"01.Java/01.Hyperskill - Java/03.应知/97.Theory：Fields and methods in enum.md",key:"v-40e99d88",path:"/pages/342a00/",headers:[{level:2,title:"Sample enum",slug:"sample-enum",normalizedTitle:"sample enum",charIndex:378},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:3466}],headersStr:"Sample enum Conclusion",content:'We use enums to define sets of unchangeable variables. After we defined them, we may need to extend the functionality of the enum and add values to the constants. Just like a class, an enum can have fields, constructors and methods. That\'s why an enum comes in handy when working with values you\'re not going to change.\n\nTo prove that, let\'s consider the following example.\n\n\n# Sample enum\n\nSuppose we have to write a program that displays the battery level of a smartphone, power bank, or any device with a discrete scale.\n\nFirst of all, let\'s create an enum with several threshold levels that represent the battery\'s level of charge:\n\npublic enum ChargeLevel {\n    FULL, HIGH, MEDIUM, LOW\n}\n\n\n1\n2\n3\n\n\nSuppose that we need to display the level of battery charge visually. We want it to be divided into several segments and have a color indication as well, in this way:\n\n\n\nTo do this, we will add corresponding fields and values to our enum. When we define them, we must supply values to the constructor of the enum. Here, we created a constructor in the ChargeLevel enum and added two fields sections and color. Also, there are two methods getSections() and getColor() that return the values of fields respectively.\n\npublic enum ChargeLevel {\n\n    FULL(4, "green"),\n    HIGH(3, "green"),\n    MEDIUM(2, "yellow"),\n    LOW(1, "red");\n\n    int sections;\n    String color;\n\n    ChargeLevel(int sections, String color) {\n        this.sections = sections;\n        this.color = color;\n    }\n\n    public int getSections() {\n        return sections;\n    }\n\n    public String getColor() {\n        return color;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\nNote that all enum instances are created by the JVM in the same way as a static field of a class. This is the reason why an enum cannot contain a public constructor. This means we cannot create enum objects by invoking an enum constructor with the new keyword but have to choose one of the predefined instances instead. Keep in mind that if your enum contains fields and methods, you should always define them after the list of constants in the enum.\n\nNow we have a class with additional info gathered in one place: the number of sections to highlight and the color.\n\nSystem.out.println(ChargeLevel.LOW.sections); // 1\nSystem.out.println(ChargeLevel.LOW.color); // red\n\n\n1\n2\n\n\nIt is possible to extend an enum by adding custom static methods. For example, let\'s add a method that finds a ChargeLevel instance by the given number of sections:\n\npublic enum ChargeLevel {\n\n    FULL(4, "green"),\n    HIGH(3, "green"),\n    MEDIUM(2, "yellow"),\n    LOW(1, "red");\n\n    int sections;\n    String color;\n\n    ChargeLevel(int sections, String color) {\n        this.sections = sections;\n        this.color = color;\n    }\n\n    public int getSections() {\n        return sections;\n    }\n\n    public String getColor() {\n        return color;\n    }\n\n    public static ChargeLevel findByNumberOfSections(int sections) {\n        for (ChargeLevel value: values()) {\n            if (value.sections == sections) {\n                return value;\n            }\n        }\n        return null;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\n\nInside the findByNumberOfSections() method, we iterated over the possible values using a for-each loop. Here\'s an example of our method\'s output:\n\nSystem.out.println(ChargeLevel.findByNumberOfSections(2)); // MEDIUM\n\n\n1\n\n\n\n# Conclusion\n\nSince an enum is a special class type in Java, we can add constructors, fields, and methods to it. Thus, it is possible to enhance our enum to include the values we need. The values of the constants are defined when we declare the enum. If you want to add enum fields, methods and constructors, you should do it after the enum constants\' declaration.',normalizedContent:'we use enums to define sets of unchangeable variables. after we defined them, we may need to extend the functionality of the enum and add values to the constants. just like a class, an enum can have fields, constructors and methods. that\'s why an enum comes in handy when working with values you\'re not going to change.\n\nto prove that, let\'s consider the following example.\n\n\n# sample enum\n\nsuppose we have to write a program that displays the battery level of a smartphone, power bank, or any device with a discrete scale.\n\nfirst of all, let\'s create an enum with several threshold levels that represent the battery\'s level of charge:\n\npublic enum chargelevel {\n    full, high, medium, low\n}\n\n\n1\n2\n3\n\n\nsuppose that we need to display the level of battery charge visually. we want it to be divided into several segments and have a color indication as well, in this way:\n\n\n\nto do this, we will add corresponding fields and values to our enum. when we define them, we must supply values to the constructor of the enum. here, we created a constructor in the chargelevel enum and added two fields sections and color. also, there are two methods getsections() and getcolor() that return the values of fields respectively.\n\npublic enum chargelevel {\n\n    full(4, "green"),\n    high(3, "green"),\n    medium(2, "yellow"),\n    low(1, "red");\n\n    int sections;\n    string color;\n\n    chargelevel(int sections, string color) {\n        this.sections = sections;\n        this.color = color;\n    }\n\n    public int getsections() {\n        return sections;\n    }\n\n    public string getcolor() {\n        return color;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\nnote that all enum instances are created by the jvm in the same way as a static field of a class. this is the reason why an enum cannot contain a public constructor. this means we cannot create enum objects by invoking an enum constructor with the new keyword but have to choose one of the predefined instances instead. keep in mind that if your enum contains fields and methods, you should always define them after the list of constants in the enum.\n\nnow we have a class with additional info gathered in one place: the number of sections to highlight and the color.\n\nsystem.out.println(chargelevel.low.sections); // 1\nsystem.out.println(chargelevel.low.color); // red\n\n\n1\n2\n\n\nit is possible to extend an enum by adding custom static methods. for example, let\'s add a method that finds a chargelevel instance by the given number of sections:\n\npublic enum chargelevel {\n\n    full(4, "green"),\n    high(3, "green"),\n    medium(2, "yellow"),\n    low(1, "red");\n\n    int sections;\n    string color;\n\n    chargelevel(int sections, string color) {\n        this.sections = sections;\n        this.color = color;\n    }\n\n    public int getsections() {\n        return sections;\n    }\n\n    public string getcolor() {\n        return color;\n    }\n\n    public static chargelevel findbynumberofsections(int sections) {\n        for (chargelevel value: values()) {\n            if (value.sections == sections) {\n                return value;\n            }\n        }\n        return null;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\n\ninside the findbynumberofsections() method, we iterated over the possible values using a for-each loop. here\'s an example of our method\'s output:\n\nsystem.out.println(chargelevel.findbynumberofsections(2)); // medium\n\n\n1\n\n\n\n# conclusion\n\nsince an enum is a special class type in java, we can add constructors, fields, and methods to it. thus, it is possible to enhance our enum to include the values we need. the values of the constants are defined when we declare the enum. if you want to add enum fields, methods and constructors, you should do it after the enum constants\' declaration.',charsets:{},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：StringBuilder",frontmatter:{title:"Theory：StringBuilder",date:"2022-09-15T14:31:43.000Z",permalink:"/pages/4931da/",tags:["String","Java"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/03.%E5%BA%94%E7%9F%A5/99.Theory%EF%BC%9AStringBuilder.html",relativePath:"01.Java/01.Hyperskill - Java/03.应知/99.Theory：StringBuilder.md",key:"v-69a19b70",path:"/pages/4931da/",headers:[{level:2,title:"Mutable strings",slug:"mutable-strings",normalizedTitle:"mutable strings",charIndex:2},{level:2,title:"Constructing objects",slug:"constructing-objects",normalizedTitle:"constructing objects",charIndex:664},{level:2,title:"Some important methods",slug:"some-important-methods",normalizedTitle:"some important methods",charIndex:1035},{level:2,title:"The length() and capacity()",slug:"the-length-and-capacity",normalizedTitle:"the length() and capacity()",charIndex:4307},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:5304}],headersStr:"Mutable strings Constructing objects Some important methods The length() and capacity() Conclusion",content:'# Mutable strings\n\nAs you may know, strings in Java are immutable. It means that once created, a string cannot be changed. If we want to modify the content of a string object, we should create a new string. This may not be the best way when we perform a lot of modifications because each operation creates a new object, which is bad for performance.\n\nFortunately, there is a special class named StringBuilder that is used to create mutable string objects. An object of this class is similar to a regular string, except that it can be modified. As an example, it is better to use StringBuilder than String where lots of concatenations are performed at runtime.\n\n\n# Constructing objects\n\nIt is possible to create an empty object of the type StringBuilder:\n\nStringBuilder empty = new StringBuilder();\nSystem.out.println(empty); // ""\n\n\n1\n2\n\n\nor pass a string to it:\n\nStringBuilder sb = new StringBuilder("Hello!");\nSystem.out.println(sb); // "Hello!"\n\n\n1\n2\n\n\n提示\n\nNote, we do not need to import anything to use this class in programs.\n\n\n# Some important methods\n\nThe StringBuilder class provides a set of useful methods to manipulate objects. Let\'s consider some of them.\n\n * int **length**() returns the length (the character count), like in regular strings. This method does not modify the object.\n\nStringBuilder sb = new StringBuilder("I use Java");\nSystem.out.println(sb.length()); // 10\n\n\n1\n2\n\n * char **charAt**(int index) returns a character located at the specified index. The first character has the index 0. This method does not modify the object.\n\nStringBuilder sb = new StringBuilder("I use Java");\nSystem.out.println(sb.charAt(0)); // \'I\'\nSystem.out.println(sb.charAt(6)); // \'J\'\n\n\n1\n2\n3\n\n * void **setCharAt**(int index, char ch) sets a character located at the specified index to ch.\n\nStringBuilder sb = new StringBuilder("start");\nsb.setCharAt(1, \'m\');\nSystem.out.println(sb); // "smart"\n\n\n1\n2\n3\n\n * StringBuilder **deleteCharAt**(int index) removes the character at the specified position.\n\nStringBuilder sb = new StringBuilder("dessert");\nsb.deleteCharAt(2);\nSystem.out.println(sb); // "desert"\n\n\n1\n2\n3\n\n * StringBuilder **append**(String str) concatenates the given string to the end of the invoking StringBuilder object. There are also several overloadings to take primitive types and even arrays of characters.\n\nStringBuilder sb = new StringBuilder("abc");\nsb.append("123");\nSystem.out.println(sb); // "abc123"\n\n\n1\n2\n3\n\n\nIt is also possible to invoke this method multiple times on the same object in the same statement because this method returns the same modified object.\n\nStringBuilder messageBuilder = new StringBuilder(); // empty\n\nmessageBuilder\n        .append("From: Kate@gmail.com\\n")\n        .append("To: Max@gmail.com\\n")\n        .append("Text: I lost my keys.\\n")\n        .append("Please, open the door!");\n\nSystem.out.println(messageBuilder);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nOutput:\n\nFrom: Kate@gmail.com\nTo: Max@gmail.com\nText: I lost my keys.\nPlease, open the door!\n\n\n1\n2\n3\n4\n\n * StringBuilder **insert**(int offset, String str) inserts the given string into the existing StringBuilder object at the given position indicated by the offset. This method has a lot of overloadings for different types.\n\nStringBuilder sb = new StringBuilder("I\'m a programmer.");\nsb.insert(6, "Java ");\nSystem.out.println(sb); // I\'m a Java programmer.\n\n\n1\n2\n3\n\n * StringBuilder **replace**(int start, int end, String str) replaces the substring from the specified string index (inclusive) to the end index (exclusive) with a given string.\n\nStringBuilder sb = new StringBuilder("Let\'s use C#");\nsb.replace(10,12,"Java");\nSystem.out.println(sb); // Let\'s use Java\n\n\n1\n2\n3\n\n * StringBuilder **delete**(int start, int end) removes the substring from the start index (inclusive) to the end index (exclusive).\n\nStringBuilder sb = new StringBuilder("Welcome");\nsb.delete(0,3);\nSystem.out.println(sb); // "come"\n\n\n1\n2\n3\n\n * StringBuilder **reverse**() causes this character sequence to be replaced by the reverse of the sequence.\n\nStringBuilder sb = new StringBuilder("2 * 3 + 8 * 4");\nsb.reverse();\nSystem.out.println(sb); // "4 * 8 + 3 * 2"\n\n\n1\n2\n3\n\n\n提示\n\nNote, when you have a StringBuilder object, you can get a String by invoking the toString method.\n\nFor more details about methods see the documentation.\n\n\n# The length() and capacity()\n\nThere are two methods that should not be confused: length and capacity. The length returns the actual number of characters whereas capacity returns the amount of storage available for newly inserted characters, beyond which an allocation will occur. The capacity is a part of the internal representation of StringBuilder, and its value will dynamically change.\n\nThe following example will help you better distinguish these methods:\n\nStringBuilder sb = new StringBuilder(); // initial capacity is 16\n\nSystem.out.println(sb.length());   // 0\nSystem.out.println(sb.capacity()); // 16\n\nsb.append("A very long string");\n\nSystem.out.println(sb.length());   // 18\nSystem.out.println(sb.capacity()); // 34\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nIt is possible to specify the capacity when creating a StringBuilder object, but it is not used very often:\n\nStringBuilder sb = new StringBuilder(30);\n\nSystem.out.println(sb.length());   // 0\nSystem.out.println(sb.capacity()); // 30\n\n\n1\n2\n3\n4\n\n\n\n# Conclusion\n\nThe StringBuilder class is used to create mutable strings, which can be modified at runtime. You can perform different operations on StringBuilder objects, like append, reverse, replace, delete, etc. No new objects will be created. It is recommended to use this class instead of String when a lot of modifications are performed. This will prevent the creation of multiple intermediate objects; therefore, it will work faster and require less memory. One common case for this is a sequence of concatenations.\n\n提示\n\nNote, there is another similar class called StringBuffer. We will consider it in coming topics.',normalizedContent:'# mutable strings\n\nas you may know, strings in java are immutable. it means that once created, a string cannot be changed. if we want to modify the content of a string object, we should create a new string. this may not be the best way when we perform a lot of modifications because each operation creates a new object, which is bad for performance.\n\nfortunately, there is a special class named stringbuilder that is used to create mutable string objects. an object of this class is similar to a regular string, except that it can be modified. as an example, it is better to use stringbuilder than string where lots of concatenations are performed at runtime.\n\n\n# constructing objects\n\nit is possible to create an empty object of the type stringbuilder:\n\nstringbuilder empty = new stringbuilder();\nsystem.out.println(empty); // ""\n\n\n1\n2\n\n\nor pass a string to it:\n\nstringbuilder sb = new stringbuilder("hello!");\nsystem.out.println(sb); // "hello!"\n\n\n1\n2\n\n\n提示\n\nnote, we do not need to import anything to use this class in programs.\n\n\n# some important methods\n\nthe stringbuilder class provides a set of useful methods to manipulate objects. let\'s consider some of them.\n\n * int **length**() returns the length (the character count), like in regular strings. this method does not modify the object.\n\nstringbuilder sb = new stringbuilder("i use java");\nsystem.out.println(sb.length()); // 10\n\n\n1\n2\n\n * char **charat**(int index) returns a character located at the specified index. the first character has the index 0. this method does not modify the object.\n\nstringbuilder sb = new stringbuilder("i use java");\nsystem.out.println(sb.charat(0)); // \'i\'\nsystem.out.println(sb.charat(6)); // \'j\'\n\n\n1\n2\n3\n\n * void **setcharat**(int index, char ch) sets a character located at the specified index to ch.\n\nstringbuilder sb = new stringbuilder("start");\nsb.setcharat(1, \'m\');\nsystem.out.println(sb); // "smart"\n\n\n1\n2\n3\n\n * stringbuilder **deletecharat**(int index) removes the character at the specified position.\n\nstringbuilder sb = new stringbuilder("dessert");\nsb.deletecharat(2);\nsystem.out.println(sb); // "desert"\n\n\n1\n2\n3\n\n * stringbuilder **append**(string str) concatenates the given string to the end of the invoking stringbuilder object. there are also several overloadings to take primitive types and even arrays of characters.\n\nstringbuilder sb = new stringbuilder("abc");\nsb.append("123");\nsystem.out.println(sb); // "abc123"\n\n\n1\n2\n3\n\n\nit is also possible to invoke this method multiple times on the same object in the same statement because this method returns the same modified object.\n\nstringbuilder messagebuilder = new stringbuilder(); // empty\n\nmessagebuilder\n        .append("from: kate@gmail.com\\n")\n        .append("to: max@gmail.com\\n")\n        .append("text: i lost my keys.\\n")\n        .append("please, open the door!");\n\nsystem.out.println(messagebuilder);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\noutput:\n\nfrom: kate@gmail.com\nto: max@gmail.com\ntext: i lost my keys.\nplease, open the door!\n\n\n1\n2\n3\n4\n\n * stringbuilder **insert**(int offset, string str) inserts the given string into the existing stringbuilder object at the given position indicated by the offset. this method has a lot of overloadings for different types.\n\nstringbuilder sb = new stringbuilder("i\'m a programmer.");\nsb.insert(6, "java ");\nsystem.out.println(sb); // i\'m a java programmer.\n\n\n1\n2\n3\n\n * stringbuilder **replace**(int start, int end, string str) replaces the substring from the specified string index (inclusive) to the end index (exclusive) with a given string.\n\nstringbuilder sb = new stringbuilder("let\'s use c#");\nsb.replace(10,12,"java");\nsystem.out.println(sb); // let\'s use java\n\n\n1\n2\n3\n\n * stringbuilder **delete**(int start, int end) removes the substring from the start index (inclusive) to the end index (exclusive).\n\nstringbuilder sb = new stringbuilder("welcome");\nsb.delete(0,3);\nsystem.out.println(sb); // "come"\n\n\n1\n2\n3\n\n * stringbuilder **reverse**() causes this character sequence to be replaced by the reverse of the sequence.\n\nstringbuilder sb = new stringbuilder("2 * 3 + 8 * 4");\nsb.reverse();\nsystem.out.println(sb); // "4 * 8 + 3 * 2"\n\n\n1\n2\n3\n\n\n提示\n\nnote, when you have a stringbuilder object, you can get a string by invoking the tostring method.\n\nfor more details about methods see the documentation.\n\n\n# the length() and capacity()\n\nthere are two methods that should not be confused: length and capacity. the length returns the actual number of characters whereas capacity returns the amount of storage available for newly inserted characters, beyond which an allocation will occur. the capacity is a part of the internal representation of stringbuilder, and its value will dynamically change.\n\nthe following example will help you better distinguish these methods:\n\nstringbuilder sb = new stringbuilder(); // initial capacity is 16\n\nsystem.out.println(sb.length());   // 0\nsystem.out.println(sb.capacity()); // 16\n\nsb.append("a very long string");\n\nsystem.out.println(sb.length());   // 18\nsystem.out.println(sb.capacity()); // 34\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nit is possible to specify the capacity when creating a stringbuilder object, but it is not used very often:\n\nstringbuilder sb = new stringbuilder(30);\n\nsystem.out.println(sb.length());   // 0\nsystem.out.println(sb.capacity()); // 30\n\n\n1\n2\n3\n4\n\n\n\n# conclusion\n\nthe stringbuilder class is used to create mutable strings, which can be modified at runtime. you can perform different operations on stringbuilder objects, like append, reverse, replace, delete, etc. no new objects will be created. it is recommended to use this class instead of string when a lot of modifications are performed. this will prevent the creation of multiple intermediate objects; therefore, it will work faster and require less memory. one common case for this is a sequence of concatenations.\n\n提示\n\nnote, there is another similar class called stringbuffer. we will consider it in coming topics.',charsets:{cjk:!0},lastUpdated:"2023/02/14, 11:54:58",lastUpdatedTimestamp:1676346898e3},{title:"Theory：XML",frontmatter:{title:"Theory：XML",date:"2022-08-09T14:15:24.000Z",permalink:"/pages/281194/",tags:["Language"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/04.%E6%89%A9%E5%B1%95/120.Theory%EF%BC%9AXML.html",relativePath:"01.Java/01.Hyperskill - Java/04.扩展/120.Theory：XML.md",key:"v-79427016",path:"/pages/281194/",headers:[{level:2,title:"Tags and elements",slug:"tags-and-elements",normalizedTitle:"tags and elements",charIndex:555},{level:2,title:"Child elements",slug:"child-elements",normalizedTitle:"child elements",charIndex:2168},{level:2,title:"Attributes",slug:"attributes",normalizedTitle:"attributes",charIndex:2935},{level:2,title:"Pros and cons of XML",slug:"pros-and-cons-of-xml",normalizedTitle:"pros and cons of xml",charIndex:4271},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:4858}],headersStr:"Tags and elements Child elements Attributes Pros and cons of XML Conclusion",content:'XML (eXtensible Markup Language) is a text-based format for storing and exchanging structured data on the Internet. In this format, the data is presented as documents with a clear and flexible structure. An XML document can be stored on the computer with the .xml extension that is often used to keep configuration files of programs.\n\nAt this moment, XML is one of the most popular formats around the world, used both by small startups and huge companies. XML is especially valued for being very expressive for people and easy for machine processing.\n\n\n# Tags and elements\n\nEach XML document consists of tags and elements.\n\nA tag is a string with an assigned meaning like a book, a person or something of the sort. It is interesting that XML does not provide tags at all, but it gives developers an opportunity to invent tags independently.\n\nAn element is a building block of an XML structure: it may contain text, tags, other elements and attributes.\n\nHere is an example of an XML document that describes a book with a title and one author:\n\n<?xml version="1.0" encoding="UTF-8"?>\n<book>\n  <title>The Three-Body Problem</title>\n  <author>Liu Cixin</author>\n</book>\n\n\n1\n2\n3\n4\n5\n\n\nThis document has three tags enclosed in angle brackets: <book>, <title> and <author>.\n\nBy element we understand the combination of a starting tag with the corresponding ending tag together with their content. Elements set the structure of a document since they can be nested in each other.\n\nOur document has the following elements:\n\n * <book>....</book> contain two other elements;\n * <title>The Three-Body Problem</title>\n * <author>Liu Cixin</author>\n\n注意\n\nAll elements should have a closing tag (a similar tag, but with a slash / in front) or just end with a slash (/>). Here\'s an example of using an unpaired tag: <picture name="sun"/>.\n\nThe first line in the XML document is called a prologue:\n\n<?xml version="1.0" encoding="UTF-8"?>\n\n\n1\n\n\nIt specifies the version of the XML standard (usually 1.0) and defines the encoding (here it\'s UTF-8). The prologue is optional, but if it\'s there, it must come first in the document.\n\n提示\n\nNote that a prologue does not have a closing tag!\n\n\n# Child elements\n\nEach XML document always has a single element called root. This element can contain other elements called child elements which in their turn can have their own children.\n\nThe following XML document represents books contained in a library:\n\n<?xml version="1.0" encoding="UTF-8"?>\n<library>\n  <book>\n    <title>The Three-Body Problem</title>\n    <author>Liu Cixin</author>\n  </book>\n  <book>\n    <title>Modern Operating Systems</title>\n    <author>Andrew S. Tanenbaum</author>\n  </book>\n</library>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\nHere, the root element <library> has two children <book> elements, while the elements <title> and <author> are the children of <book>. So, XML documents represent hierarchical structures that are often used in programming.\n\n\n# Attributes\n\nXML elements can possess attributes that provide additional information about the element.\n\nThe value of the attribute is always set in either double or single quotes. For example, the name of a picture can be written as follows:\n\n<picture name="The Black Square"/>\n\n\n1\n\n\nIf the value of the attribute contains double quotes, you need to use single quotes. For example:\n\n<picture name=\'"Sunset at Sea", Ivan Aivazovsky\'/>\n\n\n1\n\n\nSometimes, you can also see quotes replaced by special entity symbols ("):\n\n<picture name="&quot;Sunflowers&quot;, Vincent van Gogh"/>\n\n\n1\n\n\nAn element can contain more than one attribute:\n\n<picture name=\'Sunset at Sea\' author=\'Ivan Aivazovsky\'/>\n\n\n1\n\n\nThe following XML document presents an art gallery:\n\n<?xml version="1.0" encoding="UTF-8"?>\n<gallery>\n  <picture name=\'Sunset at Sea\' painter=\'Ivan Aivazovsky\'/>\n  <picture name=\'The Black Square\' painter=\'Kazimir Malevich\'/>\n  <picture name=\'Sunflowers\' painter=\'Vincent van Gogh\'/>\n</gallery>\n\n\n1\n2\n3\n4\n5\n6\n\n\nAs you can see, in some cases, attributes can replace child elements. There is no consensus about what\'s better to use. It usually depends on the data you are trying to model, your tools for XML processing and, of course, the people you work with.\n\n提示\n\nNote that an element can have both attributes and child elements together.\n\n\n# Pros and cons of XML\n\nXML has won popularity due to its apparent advantages:\n\n * it can be easily understood by machines and people alike;\n * the format is based on international standards;\n * it has a well-defined structure which facilitates the search and extraction of information;\n * modern programming languages have libraries for processing XML documents automatically.\n\nAt the same time, XML has an important disadvantage. Its redundant syntax causes higher storage and transportation cost. It is especially important when we need to store or transfer a large amount of data.\n\n\n# Conclusion\n\nIn summary, XML is a format for saving and transferring data as documents with the .xml extension. The main components of these documents are tags, elements, and attributes. Keep in mind, though XML has its advantages like a well-defined structure, using it with a large amount of data could sometimes be inefficient due to its verbose syntax. Now that you have learned the basic principles of XML, it is time to put your skills to practice!',normalizedContent:'xml (extensible markup language) is a text-based format for storing and exchanging structured data on the internet. in this format, the data is presented as documents with a clear and flexible structure. an xml document can be stored on the computer with the .xml extension that is often used to keep configuration files of programs.\n\nat this moment, xml is one of the most popular formats around the world, used both by small startups and huge companies. xml is especially valued for being very expressive for people and easy for machine processing.\n\n\n# tags and elements\n\neach xml document consists of tags and elements.\n\na tag is a string with an assigned meaning like a book, a person or something of the sort. it is interesting that xml does not provide tags at all, but it gives developers an opportunity to invent tags independently.\n\nan element is a building block of an xml structure: it may contain text, tags, other elements and attributes.\n\nhere is an example of an xml document that describes a book with a title and one author:\n\n<?xml version="1.0" encoding="utf-8"?>\n<book>\n  <title>the three-body problem</title>\n  <author>liu cixin</author>\n</book>\n\n\n1\n2\n3\n4\n5\n\n\nthis document has three tags enclosed in angle brackets: <book>, <title> and <author>.\n\nby element we understand the combination of a starting tag with the corresponding ending tag together with their content. elements set the structure of a document since they can be nested in each other.\n\nour document has the following elements:\n\n * <book>....</book> contain two other elements;\n * <title>the three-body problem</title>\n * <author>liu cixin</author>\n\n注意\n\nall elements should have a closing tag (a similar tag, but with a slash / in front) or just end with a slash (/>). here\'s an example of using an unpaired tag: <picture name="sun"/>.\n\nthe first line in the xml document is called a prologue:\n\n<?xml version="1.0" encoding="utf-8"?>\n\n\n1\n\n\nit specifies the version of the xml standard (usually 1.0) and defines the encoding (here it\'s utf-8). the prologue is optional, but if it\'s there, it must come first in the document.\n\n提示\n\nnote that a prologue does not have a closing tag!\n\n\n# child elements\n\neach xml document always has a single element called root. this element can contain other elements called child elements which in their turn can have their own children.\n\nthe following xml document represents books contained in a library:\n\n<?xml version="1.0" encoding="utf-8"?>\n<library>\n  <book>\n    <title>the three-body problem</title>\n    <author>liu cixin</author>\n  </book>\n  <book>\n    <title>modern operating systems</title>\n    <author>andrew s. tanenbaum</author>\n  </book>\n</library>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\nhere, the root element <library> has two children <book> elements, while the elements <title> and <author> are the children of <book>. so, xml documents represent hierarchical structures that are often used in programming.\n\n\n# attributes\n\nxml elements can possess attributes that provide additional information about the element.\n\nthe value of the attribute is always set in either double or single quotes. for example, the name of a picture can be written as follows:\n\n<picture name="the black square"/>\n\n\n1\n\n\nif the value of the attribute contains double quotes, you need to use single quotes. for example:\n\n<picture name=\'"sunset at sea", ivan aivazovsky\'/>\n\n\n1\n\n\nsometimes, you can also see quotes replaced by special entity symbols ("):\n\n<picture name="&quot;sunflowers&quot;, vincent van gogh"/>\n\n\n1\n\n\nan element can contain more than one attribute:\n\n<picture name=\'sunset at sea\' author=\'ivan aivazovsky\'/>\n\n\n1\n\n\nthe following xml document presents an art gallery:\n\n<?xml version="1.0" encoding="utf-8"?>\n<gallery>\n  <picture name=\'sunset at sea\' painter=\'ivan aivazovsky\'/>\n  <picture name=\'the black square\' painter=\'kazimir malevich\'/>\n  <picture name=\'sunflowers\' painter=\'vincent van gogh\'/>\n</gallery>\n\n\n1\n2\n3\n4\n5\n6\n\n\nas you can see, in some cases, attributes can replace child elements. there is no consensus about what\'s better to use. it usually depends on the data you are trying to model, your tools for xml processing and, of course, the people you work with.\n\n提示\n\nnote that an element can have both attributes and child elements together.\n\n\n# pros and cons of xml\n\nxml has won popularity due to its apparent advantages:\n\n * it can be easily understood by machines and people alike;\n * the format is based on international standards;\n * it has a well-defined structure which facilitates the search and extraction of information;\n * modern programming languages have libraries for processing xml documents automatically.\n\nat the same time, xml has an important disadvantage. its redundant syntax causes higher storage and transportation cost. it is especially important when we need to store or transfer a large amount of data.\n\n\n# conclusion\n\nin summary, xml is a format for saving and transferring data as documents with the .xml extension. the main components of these documents are tags, elements, and attributes. keep in mind, though xml has its advantages like a well-defined structure, using it with a large amount of data could sometimes be inefficient due to its verbose syntax. now that you have learned the basic principles of xml, it is time to put your skills to practice!',charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：YAML",frontmatter:{title:"Theory：YAML",date:"2022-07-19T17:51:02.000Z",permalink:"/pages/40f52b/",tags:["Language"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/04.%E6%89%A9%E5%B1%95/119.Theory%EF%BC%9AYAML.html",relativePath:"01.Java/01.Hyperskill - Java/04.扩展/119.Theory：YAML.md",key:"v-149463ce",path:"/pages/40f52b/",headers:[{level:2,title:"Introduction",slug:"introduction",normalizedTitle:"introduction",charIndex:2},{level:2,title:"Basic data types",slug:"basic-data-types",normalizedTitle:"basic data types",charIndex:936},{level:2,title:"Maps",slug:"maps",normalizedTitle:"maps",charIndex:1651},{level:2,title:"Lists",slug:"lists",normalizedTitle:"lists",charIndex:2390},{level:2,title:"Combination",slug:"combination",normalizedTitle:"combination",charIndex:2882},{level:2,title:"Comments",slug:"comments",normalizedTitle:"comments",charIndex:3585},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:3871}],headersStr:"Introduction Basic data types Maps Lists Combination Comments Conclusion",content:"# Introduction\n\nImagine objects with complex structures. For example, you have a large dictionary or a list with a bunch of other values. You need to preserve such an object without losing its structure. In other words, you want to serialize it. It's also good if the format of serialization has a simple syntax and is human-readable. So, let's get acquainted with a famous data format called YAML.\n\n\n\nYAML is a recursive acronym for YAML Ain't Markup Language**.** It's a human-readable data serialization standard for all programming languages. It is commonly used for configuration files, and for storing and transferring data. It’s difficult to escape YAML if you’re doing anything related to software configuration. The usual extensions for YAML files are .yaml and .yml.\n\nLet's take a closer look at this language in order to appreciate all its simplicity and functionality. We'll go over basic types, structures, and syntax.\n\n\n# Basic data types\n\nYAML supports all essential data types like numbers, strings, booleans, etc. It recognizes some language-specific data types, such as dates, timestamps, and special numerical values. So, the list of basic YAML data types includes:\n\n * integers like 15, 123\n * strings like \"15\", 'Hello, YAML!', which may be enclosed either in double or single quotation marks\n * floats like 15.033\n * booleans (true or false)\n * null type (null)\n\nYAML auto-detects the type of data, but users can specify the type they need using !!. For example, if you need to specify the string yes, you need to write !!str yes.\n\nNow you know the basic data types in YAML. Let's figure out the structures and their syntax.\n\n\n# Maps\n\nMapping consists of key-value pairs. For example:\n\n---\nobject: Book\n\nmetadata:  \n  name: Three Men in a Boat\n  author: Jerome K Jerome \n  genre: humorous account\n  \npublished:\n  year: 1889\n  country: United Kingdom\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\nThe first line is a separator. It's optional unless you’re trying to define multiple structures in a single file. Then there is a set of key: value pairs as a block. Pairs are called scalars. The syntax is clean and simple; the usual format symbols, such as braces, square brackets, closing tags, or quotation marks, are unnecessary. Scalars are colon-separated, and there should be a space between the map elements. Note, that In YAML indentation is always done with spaces, not tabs.\n\n\n# Lists\n\nThe lists in YAML are sequences of objects, as the example below shows.\n\nanimals:\n  - cat\n  - dog\n  - bird\n\n\n1\n2\n3\n4\n\n\nThe number of items in the list is not limited. Each item on the list should start with a dash. Elements are separated from the parent with spaces; after a parent name there should be a colon. The example above represents a block style. In flow style, the list looks like this: [cat, dog, bird].\n\nThese are the structures. Next, we'll learn how to combine them.\n\n\n# Combination\n\nMaps and lists can be combined, so that one may have maps of maps, or maps of lists, or lists of lists, or lists of maps. Let's consider an example of a to-do map, where keys are weekends and values are lists of things to do during each day:\n\nweekend:\n  saturday: \n    - order cleaning\n    - order a pizza\n    - watch new series\n  sunday: \n    - go to yoga \n    - hang out with a friend \n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nAlso, if you need to denote a string that preserves newlines instead of a list, use | character:\n\nsaturday: |\n  order cleaning\n  order a pizza\n  watch new series\n\n\n1\n2\n3\n4\n\n\nGreat, now you know how to use structures. The last important thing we should mention here is comments.\n\n\n# Comments\n\nOne may add comments to the YAML file. Comments start with # and go till newline. They can be made anywhere in the line, for example:\n\n# The comment\nmetadata:  # this is metadata\n  name: Three Men in a Boat\n  author: Jerome K Jerome\n  genre: humorous account\n\n\n1\n2\n3\n4\n5\n\n\n\n# Conclusion\n\nTo sum up, we've discussed that\n\n * YAML is a human-readable text-based format that lets you easily specify configuration-type information\n * YAML supports integers, strings, floats, booleans, and null data types\n * there are two data structures in YAML, lists and maps, that can also be combined\n * comments can be added to YAML file\n\nLet's get to the tasks!",normalizedContent:"# introduction\n\nimagine objects with complex structures. for example, you have a large dictionary or a list with a bunch of other values. you need to preserve such an object without losing its structure. in other words, you want to serialize it. it's also good if the format of serialization has a simple syntax and is human-readable. so, let's get acquainted with a famous data format called yaml.\n\n\n\nyaml is a recursive acronym for yaml ain't markup language**.** it's a human-readable data serialization standard for all programming languages. it is commonly used for configuration files, and for storing and transferring data. it’s difficult to escape yaml if you’re doing anything related to software configuration. the usual extensions for yaml files are .yaml and .yml.\n\nlet's take a closer look at this language in order to appreciate all its simplicity and functionality. we'll go over basic types, structures, and syntax.\n\n\n# basic data types\n\nyaml supports all essential data types like numbers, strings, booleans, etc. it recognizes some language-specific data types, such as dates, timestamps, and special numerical values. so, the list of basic yaml data types includes:\n\n * integers like 15, 123\n * strings like \"15\", 'hello, yaml!', which may be enclosed either in double or single quotation marks\n * floats like 15.033\n * booleans (true or false)\n * null type (null)\n\nyaml auto-detects the type of data, but users can specify the type they need using !!. for example, if you need to specify the string yes, you need to write !!str yes.\n\nnow you know the basic data types in yaml. let's figure out the structures and their syntax.\n\n\n# maps\n\nmapping consists of key-value pairs. for example:\n\n---\nobject: book\n\nmetadata:  \n  name: three men in a boat\n  author: jerome k jerome \n  genre: humorous account\n  \npublished:\n  year: 1889\n  country: united kingdom\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\nthe first line is a separator. it's optional unless you’re trying to define multiple structures in a single file. then there is a set of key: value pairs as a block. pairs are called scalars. the syntax is clean and simple; the usual format symbols, such as braces, square brackets, closing tags, or quotation marks, are unnecessary. scalars are colon-separated, and there should be a space between the map elements. note, that in yaml indentation is always done with spaces, not tabs.\n\n\n# lists\n\nthe lists in yaml are sequences of objects, as the example below shows.\n\nanimals:\n  - cat\n  - dog\n  - bird\n\n\n1\n2\n3\n4\n\n\nthe number of items in the list is not limited. each item on the list should start with a dash. elements are separated from the parent with spaces; after a parent name there should be a colon. the example above represents a block style. in flow style, the list looks like this: [cat, dog, bird].\n\nthese are the structures. next, we'll learn how to combine them.\n\n\n# combination\n\nmaps and lists can be combined, so that one may have maps of maps, or maps of lists, or lists of lists, or lists of maps. let's consider an example of a to-do map, where keys are weekends and values are lists of things to do during each day:\n\nweekend:\n  saturday: \n    - order cleaning\n    - order a pizza\n    - watch new series\n  sunday: \n    - go to yoga \n    - hang out with a friend \n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nalso, if you need to denote a string that preserves newlines instead of a list, use | character:\n\nsaturday: |\n  order cleaning\n  order a pizza\n  watch new series\n\n\n1\n2\n3\n4\n\n\ngreat, now you know how to use structures. the last important thing we should mention here is comments.\n\n\n# comments\n\none may add comments to the yaml file. comments start with # and go till newline. they can be made anywhere in the line, for example:\n\n# the comment\nmetadata:  # this is metadata\n  name: three men in a boat\n  author: jerome k jerome\n  genre: humorous account\n\n\n1\n2\n3\n4\n5\n\n\n\n# conclusion\n\nto sum up, we've discussed that\n\n * yaml is a human-readable text-based format that lets you easily specify configuration-type information\n * yaml supports integers, strings, floats, booleans, and null data types\n * there are two data structures in yaml, lists and maps, that can also be combined\n * comments can be added to yaml file\n\nlet's get to the tasks!",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：JSON",frontmatter:{title:"Theory：JSON",date:"2022-08-12T14:02:53.000Z",permalink:"/pages/31c36e/",tags:["Language"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/04.%E6%89%A9%E5%B1%95/121.Theory%EF%BC%9AJSON.html",relativePath:"01.Java/01.Hyperskill - Java/04.扩展/121.Theory：JSON.md",key:"v-adbd0d2e",path:"/pages/31c36e/",headers:[{level:2,title:"Basic syntax and structure",slug:"basic-syntax-and-structure",normalizedTitle:"basic syntax and structure",charIndex:468},{level:2,title:"Nested objects",slug:"nested-objects",normalizedTitle:"nested objects",charIndex:1545},{level:2,title:"camelCase VS snake_case",slug:"camelcase-vs-snake-case",normalizedTitle:"camelcase vs snake_case",charIndex:2385},{level:2,title:"The advantages of JSON",slug:"the-advantages-of-json",normalizedTitle:"the advantages of json",charIndex:3129},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:3923}],headersStr:"Basic syntax and structure Nested objects camelCase VS snake_case The advantages of JSON Conclusion",content:'JSON (or JavaScript Object Notation) is a text-based format for storing and transmitting structured data. It comes from the JavaScript language, but it is still considered to be language-independent: it works with almost any programming language. With JSON\'s lightweight syntax, you can easily store and send to other apps everything from numbers and strings to arrays and objects. You can also create more complex data structures by linking arrays to each other.\n\n\n# Basic syntax and structure\n\nJSON text can be built on one of two structures:\n\n * a collection of key:value pairs (associative array);\n * an orderly set of values (array or list).\n\nJSON objects are written in curly braces {}, and their key:value pairs are separated by a comma ,. The key and the value in the pair are separated by a colon :. Here is an example for you:\n\n{\n    "first_name": "Sophie",\n    "last_name": "Goodwin",\n    "age": 34\n}\n\n\n1\n2\n3\n4\n5\n\n\nHere you can see some user\'s data in JSON format.\n\nKeys in an object are always strings, but values can be any of seven types of values, including another object or array.\n\n注意\n\nNote that there is no need to put a comma (,) after the last key:value pair.\n\nArrays are written in square brackets [] and their values are separated by a comma ,. The value in the array, again, can be of any type, including another array or object. Here is an example of an array:\n\n["night", "street", false, [ 345, 23, 8, "juice"], "fruit"]\n\n\n1\n\n\nMost often, an array will include similar elements.\n\n注意\n\nJSON does not support comments.\n\n\n# Nested objects\n\nJSON is a highly flexible format. You can nest objects inside other objects as properties:\n\n{\n  "persons": [\n    {\n      "firstName": "Whitney",\n      "lastName": "Byrd",\n      "age": 20\n    },\n    {\n      "firstName": "Eugene",\n      "lastName": "Lang",\n      "age": 26\n    },\n    {\n      "firstName": "Sophie",\n      "lastName": "Goodwin",\n      "age": 34\n    }\n  ]\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\nIf objects and arrays contain other objects or arrays, the data has a tree-like structure.\n\nThe nested objects are fully independent and may have different properties:\n\n{\n  "persons": [\n    {\n      "firstName": "Whitney",\n      "age": 20\n    },\n    {\n      "firstName": "Eugene",\n      "lastName": "Lang"\n    }\n  ]\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nBut in practice, such objects often look similar.\n\n\n# camelCase VS snake_case\n\nIf you have read the JSON objects examples really carefully, you might have a lingering question: what style of compound word writing should be used for JSON?\n\nCamelCase is a style where compound words are written together and without spaces, but each word inside the phrase starts with a capital letter. The style is called camelCase because the capital letters inside the word resemble camel\'s humps.\n\nIn snake_case style, compound words are written through the bottom underline.\n\n提示\n\nIn fact, the choice of the right JSON naming convention depends directly on your programming language and libraries. You can use both camelCase and snake_case, any choice will be valid, but do not mix them together in one JSON.\n\n\n# The advantages of JSON\n\nJSON is widely spread for data exchange on the Internet because of its strong advantages:\n\n * compactness;\n * flexibility;\n * high readability, even for people far from programming;\n * most programming languages have functions and libraries for reading and creating JSON structures.\n\nThe JSON is a general format to pass structured data through the network because after you serialize data to JSON, you can deserialize it back without losing any information. The main advantage of JSON comparing to plain text is the ability to describe relations between objects via nesting and key-value pairs. So, it\'s high chances that the sites you\'re often visiting use JSON too.\n\nOther popular applications of JSON are data storage and configuration files for other programs.\n\n\n# Conclusion\n\nNow you have seen that JSON is easy to understand and use, and it\'s quite awesome since it\'s a very useful tool for transferring data between applications. In working practice, you probably won\'t have to create JSON files yourself, you will get them from other sources, but if you want to save the code on your computer, you should save the files in the .json extension.',normalizedContent:'json (or javascript object notation) is a text-based format for storing and transmitting structured data. it comes from the javascript language, but it is still considered to be language-independent: it works with almost any programming language. with json\'s lightweight syntax, you can easily store and send to other apps everything from numbers and strings to arrays and objects. you can also create more complex data structures by linking arrays to each other.\n\n\n# basic syntax and structure\n\njson text can be built on one of two structures:\n\n * a collection of key:value pairs (associative array);\n * an orderly set of values (array or list).\n\njson objects are written in curly braces {}, and their key:value pairs are separated by a comma ,. the key and the value in the pair are separated by a colon :. here is an example for you:\n\n{\n    "first_name": "sophie",\n    "last_name": "goodwin",\n    "age": 34\n}\n\n\n1\n2\n3\n4\n5\n\n\nhere you can see some user\'s data in json format.\n\nkeys in an object are always strings, but values can be any of seven types of values, including another object or array.\n\n注意\n\nnote that there is no need to put a comma (,) after the last key:value pair.\n\narrays are written in square brackets [] and their values are separated by a comma ,. the value in the array, again, can be of any type, including another array or object. here is an example of an array:\n\n["night", "street", false, [ 345, 23, 8, "juice"], "fruit"]\n\n\n1\n\n\nmost often, an array will include similar elements.\n\n注意\n\njson does not support comments.\n\n\n# nested objects\n\njson is a highly flexible format. you can nest objects inside other objects as properties:\n\n{\n  "persons": [\n    {\n      "firstname": "whitney",\n      "lastname": "byrd",\n      "age": 20\n    },\n    {\n      "firstname": "eugene",\n      "lastname": "lang",\n      "age": 26\n    },\n    {\n      "firstname": "sophie",\n      "lastname": "goodwin",\n      "age": 34\n    }\n  ]\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\nif objects and arrays contain other objects or arrays, the data has a tree-like structure.\n\nthe nested objects are fully independent and may have different properties:\n\n{\n  "persons": [\n    {\n      "firstname": "whitney",\n      "age": 20\n    },\n    {\n      "firstname": "eugene",\n      "lastname": "lang"\n    }\n  ]\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nbut in practice, such objects often look similar.\n\n\n# camelcase vs snake_case\n\nif you have read the json objects examples really carefully, you might have a lingering question: what style of compound word writing should be used for json?\n\ncamelcase is a style where compound words are written together and without spaces, but each word inside the phrase starts with a capital letter. the style is called camelcase because the capital letters inside the word resemble camel\'s humps.\n\nin snake_case style, compound words are written through the bottom underline.\n\n提示\n\nin fact, the choice of the right json naming convention depends directly on your programming language and libraries. you can use both camelcase and snake_case, any choice will be valid, but do not mix them together in one json.\n\n\n# the advantages of json\n\njson is widely spread for data exchange on the internet because of its strong advantages:\n\n * compactness;\n * flexibility;\n * high readability, even for people far from programming;\n * most programming languages have functions and libraries for reading and creating json structures.\n\nthe json is a general format to pass structured data through the network because after you serialize data to json, you can deserialize it back without losing any information. the main advantage of json comparing to plain text is the ability to describe relations between objects via nesting and key-value pairs. so, it\'s high chances that the sites you\'re often visiting use json too.\n\nother popular applications of json are data storage and configuration files for other programs.\n\n\n# conclusion\n\nnow you have seen that json is easy to understand and use, and it\'s quite awesome since it\'s a very useful tool for transferring data between applications. in working practice, you probably won\'t have to create json files yourself, you will get them from other sources, but if you want to save the code on your computer, you should save the files in the .json extension.',charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：Units of information",frontmatter:{title:"Theory：Units of information",date:"2022-08-09T14:51:47.000Z",permalink:"/pages/df27b6/",tags:["Computer science"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/04.%E6%89%A9%E5%B1%95/16.Theory%EF%BC%9AUnits%20of%20information.html",relativePath:"01.Java/01.Hyperskill - Java/04.扩展/16.Theory：Units of information.md",key:"v-2afd436f",path:"/pages/df27b6/",headers:[{level:2,title:"Bit: the smallest unit of information",slug:"bit-the-smallest-unit-of-information",normalizedTitle:"bit: the smallest unit of information",charIndex:540},{level:2,title:"Byte: a sequence of eight bits",slug:"byte-a-sequence-of-eight-bits",normalizedTitle:"byte: a sequence of eight bits",charIndex:1857},{level:2,title:"Large units of information",slug:"large-units-of-information",normalizedTitle:"large units of information",charIndex:2508},{level:2,title:"Measurement units conversion",slug:"measurement-units-conversion",normalizedTitle:"measurement units conversion",charIndex:4616},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:5396}],headersStr:"Bit: the smallest unit of information Byte: a sequence of eight bits Large units of information Measurement units conversion Conclusion",content:'Throughout life, we always find something to measure: the amount of food we need to cook for the family, the length and width of that couch you want to put in the room, our weight and height. The latter is especially exciting: it\'s really cool to learn that in just one year you grew by a full 2 inches!\n\nEach measurement requires an instrument and its own unit of measurement. For example, bodyweight is measured with scales in kilograms (or pounds), time is measured with clocks in seconds, etc. But how does one measure information?\n\n\n# Bit: the smallest unit of information\n\nThe information entered into the computer should be specific and unambiguous. For a long time, people have used ciphers. The simplest and most convenient of them were digital. Any information from the names of flowers to the days of the week can be presented in the form of numbers. When processed with a conventional computer, the data is encoded by numbers. They are represented by the electrical signals that the computer works with.\n\nFor the convenience of distinguishing, signals of two levels are used in classical electronic computers. One of them corresponds to the number 1, and the other to 0. Any letter, sound, or image on a computer is represented by a set of numbers. The numbers 1 and 0 are called binary. These are the symbols that make up the language understood and used by the computer. Any information on the computer is represented by binary digits: 1, meaning "there is a signal" or "there is a high signal" and 0, meaning "no signal" or "there is a low signal".\n\n提示\n\nThe smallest unit of information is the bit (b).\n\nEach digit of the machine binary code carries the amount of information equal to one bit. It can take only one of two values: either 1 or 0. It is very inconvenient to measure information in bits because the numbers come out too big.\n\n\n# Byte: a sequence of eight bits\n\nSince people do not consider the mass of ships in grams, larger and hence more convenient units were invented for measuring information as well.\n\nThe processing of information takes place in the processor. This is a device that can work with several bits at once (8, 16, 32, 64, ...). The first computers processed 8 bits of information simultaneously, so we needed a new unit of measurement which was called a byte (B), which means 8 bits.\n\n注意\n\nBit marks are easily confused with byte marks. Note that the abbreviations for bit numbers uses the lowercase letter "b", while bytes are denoted using the capital "B".\n\n\n# Large units of information\n\nThere are even larger units of information, since modern computers process huge amounts of information significantly exceeding bytes.\n\nThe computer industry has historically used the units kilobyte, megabyte, and gigabyte in at least two slightly different measurement systems, which are slightly contradictory to each other.\n\n * The first one is a decimal-based system, which uses bytes in the powers of ten: kilobyte (10^3 bytes), megabyte (10^6 bytes), gigabyte (10^9 bytes), and so on. These units are used by the International System of Units (SI).\n * The second one is a binary-based system which uses bytes in the powers of two: kilobyte (2^10 bytes), megabyte (2^20 bytes), gigabyte (2^30 bytes), and so on. This system was actively used to describe computer memory.\n\nTo resolve this confusion, the International Electrotechnical Commission (IEC) suggested using prefixes kilo, mega, and giga only for the decimal-based system and to use new prefixes kibi, mebi, and gibi for the binary-based system. Here bi means binary: kibibyte is kilo binary byte.\n\nHere is a table with commonly used units of information according to the modern international standards.\n\nSI METRIC   SYMBOL   POWERS OF TEN       IEC METRIC   SYMBOL   POWERS OF TWO\nKilobyte    kB       10^3 B (1000 B)     Kibibyte     KiB      2^10 B (or 1024 B)\nMegabyte    MB       10^6 B (1000 kB)    Mebibyte     MiB      2^20 B (or 1024 KiB)\nGigabyte    GB       10^9 B (1000 MB)    Gibibyte     GiB      2^30 B (or 1024 MiB)\nTerabyte    TB       10^12 B (1000 GB)   Tebibyte     TiB      2^40 B (or 1024 GiB)\nPetabyte    PB       10^15 B (1000 TB)   Pebibyte     PiB      2^50 B (or 1024 TiB)\n\nOf course, not all units of measurement are listed here. We hope this classification will not cause you any difficulties. It is good that a byte is always 8 bits. But even this did not come immediately.\n\n提示\n\nNote that some people and organizations still prefer kilo, mega, and giga to describe powers of two. In this course, we follow the recommendations of the IEC and use modern prefixes kibi, mebi, and gibi.\n\n\n# Measurement units conversion\n\nTo strengthen your newly obtained knowledge, let\'s look at the solution of a rather typical problem where you need to convert 1 GiB to KiB. When we convert bigger units into smaller ones, we need to resort to an arithmetic operation called multiplication:\n\n1 GiB = 1KiB * 1024 * 1024 = 1048576 KiB\n\n\n1\n\n\nAccordingly, when you need to convert small units into big ones, you use division. Let\'s try to convert 16384 bits to KiB:\n\n16384 bits = (16384 / 8) / 1024 = 2 KiB\n\n\n1\n\n\nIf you want to convert 1 GB to kB, you should multiply the number by a thousand twice:\n\n1 GB = 1kB * 1000 * 1000 = 1000000 kB\n\n\n1\n\n\nCongratulations, now you have studied one of the basic topics of computer science and are ready to storm new dizzying heights of knowledge.\n\n\n# Conclusion\n\nTo wrap-up:\n\n * The smallest unit of information is a bit.\n * One byte consists of 8 bits.\n * For convenience in computer science, we use binary-based units of information as bytes, kibibytes, mebibytes, etc.\n * To convert one kibibyte to bytes, we need to multiply one by 2 ^ {10}210, to convert one mebibyte, to multiply one by 2 ^ {20}220, etc.',normalizedContent:'throughout life, we always find something to measure: the amount of food we need to cook for the family, the length and width of that couch you want to put in the room, our weight and height. the latter is especially exciting: it\'s really cool to learn that in just one year you grew by a full 2 inches!\n\neach measurement requires an instrument and its own unit of measurement. for example, bodyweight is measured with scales in kilograms (or pounds), time is measured with clocks in seconds, etc. but how does one measure information?\n\n\n# bit: the smallest unit of information\n\nthe information entered into the computer should be specific and unambiguous. for a long time, people have used ciphers. the simplest and most convenient of them were digital. any information from the names of flowers to the days of the week can be presented in the form of numbers. when processed with a conventional computer, the data is encoded by numbers. they are represented by the electrical signals that the computer works with.\n\nfor the convenience of distinguishing, signals of two levels are used in classical electronic computers. one of them corresponds to the number 1, and the other to 0. any letter, sound, or image on a computer is represented by a set of numbers. the numbers 1 and 0 are called binary. these are the symbols that make up the language understood and used by the computer. any information on the computer is represented by binary digits: 1, meaning "there is a signal" or "there is a high signal" and 0, meaning "no signal" or "there is a low signal".\n\n提示\n\nthe smallest unit of information is the bit (b).\n\neach digit of the machine binary code carries the amount of information equal to one bit. it can take only one of two values: either 1 or 0. it is very inconvenient to measure information in bits because the numbers come out too big.\n\n\n# byte: a sequence of eight bits\n\nsince people do not consider the mass of ships in grams, larger and hence more convenient units were invented for measuring information as well.\n\nthe processing of information takes place in the processor. this is a device that can work with several bits at once (8, 16, 32, 64, ...). the first computers processed 8 bits of information simultaneously, so we needed a new unit of measurement which was called a byte (b), which means 8 bits.\n\n注意\n\nbit marks are easily confused with byte marks. note that the abbreviations for bit numbers uses the lowercase letter "b", while bytes are denoted using the capital "b".\n\n\n# large units of information\n\nthere are even larger units of information, since modern computers process huge amounts of information significantly exceeding bytes.\n\nthe computer industry has historically used the units kilobyte, megabyte, and gigabyte in at least two slightly different measurement systems, which are slightly contradictory to each other.\n\n * the first one is a decimal-based system, which uses bytes in the powers of ten: kilobyte (10^3 bytes), megabyte (10^6 bytes), gigabyte (10^9 bytes), and so on. these units are used by the international system of units (si).\n * the second one is a binary-based system which uses bytes in the powers of two: kilobyte (2^10 bytes), megabyte (2^20 bytes), gigabyte (2^30 bytes), and so on. this system was actively used to describe computer memory.\n\nto resolve this confusion, the international electrotechnical commission (iec) suggested using prefixes kilo, mega, and giga only for the decimal-based system and to use new prefixes kibi, mebi, and gibi for the binary-based system. here bi means binary: kibibyte is kilo binary byte.\n\nhere is a table with commonly used units of information according to the modern international standards.\n\nsi metric   symbol   powers of ten       iec metric   symbol   powers of two\nkilobyte    kb       10^3 b (1000 b)     kibibyte     kib      2^10 b (or 1024 b)\nmegabyte    mb       10^6 b (1000 kb)    mebibyte     mib      2^20 b (or 1024 kib)\ngigabyte    gb       10^9 b (1000 mb)    gibibyte     gib      2^30 b (or 1024 mib)\nterabyte    tb       10^12 b (1000 gb)   tebibyte     tib      2^40 b (or 1024 gib)\npetabyte    pb       10^15 b (1000 tb)   pebibyte     pib      2^50 b (or 1024 tib)\n\nof course, not all units of measurement are listed here. we hope this classification will not cause you any difficulties. it is good that a byte is always 8 bits. but even this did not come immediately.\n\n提示\n\nnote that some people and organizations still prefer kilo, mega, and giga to describe powers of two. in this course, we follow the recommendations of the iec and use modern prefixes kibi, mebi, and gibi.\n\n\n# measurement units conversion\n\nto strengthen your newly obtained knowledge, let\'s look at the solution of a rather typical problem where you need to convert 1 gib to kib. when we convert bigger units into smaller ones, we need to resort to an arithmetic operation called multiplication:\n\n1 gib = 1kib * 1024 * 1024 = 1048576 kib\n\n\n1\n\n\naccordingly, when you need to convert small units into big ones, you use division. let\'s try to convert 16384 bits to kib:\n\n16384 bits = (16384 / 8) / 1024 = 2 kib\n\n\n1\n\n\nif you want to convert 1 gb to kb, you should multiply the number by a thousand twice:\n\n1 gb = 1kb * 1000 * 1000 = 1000000 kb\n\n\n1\n\n\ncongratulations, now you have studied one of the basic topics of computer science and are ready to storm new dizzying heights of knowledge.\n\n\n# conclusion\n\nto wrap-up:\n\n * the smallest unit of information is a bit.\n * one byte consists of 8 bits.\n * for convenience in computer science, we use binary-based units of information as bytes, kibibytes, mebibytes, etc.\n * to convert one kibibyte to bytes, we need to multiply one by 2 ^ {10}210, to convert one mebibyte, to multiply one by 2 ^ {20}220, etc.',charsets:{cjk:!0},lastUpdated:"2022/10/04, 21:45:45",lastUpdatedTimestamp:1664891145e3},{title:"Theory：IDE",frontmatter:{title:"Theory：IDE",date:"2022-09-15T21:46:17.000Z",permalink:"/pages/09aac1/",tags:["Tool Guide"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/04.%E6%89%A9%E5%B1%95/49.Theory%EF%BC%9AIDE.html",relativePath:"01.Java/01.Hyperskill - Java/04.扩展/49.Theory：IDE.md",key:"v-0e3be9f1",path:"/pages/09aac1/",headers:[{level:2,title:"Brief historical background",slug:"brief-historical-background",normalizedTitle:"brief historical background",charIndex:936},{level:2,title:"What is a modern IDE?",slug:"what-is-a-modern-ide",normalizedTitle:"what is a modern ide?",charIndex:2228},{level:2,title:"IDE components",slug:"ide-components",normalizedTitle:"ide components",charIndex:3379},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:4697}],headersStr:"Brief historical background What is a modern IDE? IDE components Conclusion",content:"Writing just one program involves a whole variety of tasks: you write the code, find and fix errors that inevitably arise, then the code has to be compiled, run, and documented. And guess what, all of this has to be done over and over again (well, that's just great). With small programs like Hello World, you can perform these tasks using a simple text editor to write your source code and a set of tools to translate and start the programs. Some text editors can even highlight the syntax, which simplifies the writing process, but this may not suffice for working on something larger and more complex.\n\nAs a professional developer, you need a specialized tool to navigate through your multiple-file programs, modify, compile, run, and debug them, display syntax errors, and so on. An Integrated Development Environment (IDE) is precisely that: it offers a single program in which developers can deal with all these common tasks.\n\n\n# Brief historical background\n\nMost modern IDEs are graphical, though the first ones were used back in the era when no one dreamed of graphics. They were built on a text-based interface and could only be operated using function keys and hotkeys to invoke various functions. This was, for example, Turbo Pascal, created by Borland:\n\n\n\nThe first IDEs were designed to be operated via a console or terminal, which were new in themselves. Indeed, before that, programs were generally created on paper and entered into the machine using pre-prepared paper media such as punched cards or punched tapes.\n\nHere are some specific historical examples. Dartmouth BASIC was the first language designed to run in a console or terminal. This ancient IDE was controlled by commands, not even using menus and hotkeys. However, it did allow you to edit source code, manage files, compile, debug, and run programs in a manner fundamentally similar to modern IDEs.\n\nThen it was time for Maestro I. It was a product from Softlab Munich that was the world's first integrated development environment for software. Can you believe it held a leading position in its niche for almost twenty years? Today, though, Maestro I belongs to history.\n\nAs you see, humanity did not immediately come to multifunctional IDEs.\n\n\n# What is a modern IDE?\n\nIDEs were created to maximize programmer productivity through tightly coupled components with simple user interfaces. This allows the developer to do fewer steps to switch between different modes, as opposed to discrete development programs. However, modern graphical IDEs are a complex software package. It means, one can achieve the necessary acceleration of the work process only after training. Anyway, there are no big difficulties here either: many IDEs are quite interactive, and the interfaces of different manufacturers are often very similar, so it is not too hard to switch from one IDE to another.\n\nThere are a lot of IDEs for different programming languages. Some support only a single language, while others support multiple or can be extended with plugins. For instance, IDEs that support multiple languages are IntelliJ IDEA, Eclipse, NetBeans, Android Studio, Visual Studio Code. IDEs for one specific programming language are Delphi, Dev-C++, IDLE for Python, PyCharm.\n\nAs an example, this is what the IntelliJ IDEA IDE looks like:\n\n\n\nAll of these environments can be run on Windows, Mac OS, or GNU/Linux.\n\n\n# IDE components\n\nIn general, the development environment includes:\n\n 1. A text editor, which is designed to work with text files interactively. It allows you to view the contents of text files and perform various actions like inserting, deleting, and copying text, contextual search, replacement, sorting strings, viewing character codes and converting encodings, printing. They often contain additional functionality, such as syntax highlighting.\n 2. A translator (compiler and/or interpreter), which translates a text written in a programming language into machine code and does this either immediately before starting the program (compilation) or line by line (interpretation).\n 3. Build automation tools, which get the code ready and put everything together.\n 4. A Debugger*,* which looks for errors in the code and immediately reports them.\n\n\n\nBy and large, using an IDE makes you a more productive developer because it provides tight-knit components with a similar user interface. It also automates some routine tasks, and even gives you advice and feedback. That's all because the purpose of the integrated environment is to combine various utilities into one product. This approach allows developers to focus on solving their core problems, while common and standard operations are taken care of by an IDE.\n\n\n# Conclusion\n\nTo sum up,\n\n * an IDE is a specialized tool that navigates through your multiple-file programs, modifies, compiles, runs, debugs them, and also displays syntax errors;\n * modern IDEs are graphical and interactive;\n * some IDEs support only a single language, while others support multiple languages.",normalizedContent:"writing just one program involves a whole variety of tasks: you write the code, find and fix errors that inevitably arise, then the code has to be compiled, run, and documented. and guess what, all of this has to be done over and over again (well, that's just great). with small programs like hello world, you can perform these tasks using a simple text editor to write your source code and a set of tools to translate and start the programs. some text editors can even highlight the syntax, which simplifies the writing process, but this may not suffice for working on something larger and more complex.\n\nas a professional developer, you need a specialized tool to navigate through your multiple-file programs, modify, compile, run, and debug them, display syntax errors, and so on. an integrated development environment (ide) is precisely that: it offers a single program in which developers can deal with all these common tasks.\n\n\n# brief historical background\n\nmost modern ides are graphical, though the first ones were used back in the era when no one dreamed of graphics. they were built on a text-based interface and could only be operated using function keys and hotkeys to invoke various functions. this was, for example, turbo pascal, created by borland:\n\n\n\nthe first ides were designed to be operated via a console or terminal, which were new in themselves. indeed, before that, programs were generally created on paper and entered into the machine using pre-prepared paper media such as punched cards or punched tapes.\n\nhere are some specific historical examples. dartmouth basic was the first language designed to run in a console or terminal. this ancient ide was controlled by commands, not even using menus and hotkeys. however, it did allow you to edit source code, manage files, compile, debug, and run programs in a manner fundamentally similar to modern ides.\n\nthen it was time for maestro i. it was a product from softlab munich that was the world's first integrated development environment for software. can you believe it held a leading position in its niche for almost twenty years? today, though, maestro i belongs to history.\n\nas you see, humanity did not immediately come to multifunctional ides.\n\n\n# what is a modern ide?\n\nides were created to maximize programmer productivity through tightly coupled components with simple user interfaces. this allows the developer to do fewer steps to switch between different modes, as opposed to discrete development programs. however, modern graphical ides are a complex software package. it means, one can achieve the necessary acceleration of the work process only after training. anyway, there are no big difficulties here either: many ides are quite interactive, and the interfaces of different manufacturers are often very similar, so it is not too hard to switch from one ide to another.\n\nthere are a lot of ides for different programming languages. some support only a single language, while others support multiple or can be extended with plugins. for instance, ides that support multiple languages are intellij idea, eclipse, netbeans, android studio, visual studio code. ides for one specific programming language are delphi, dev-c++, idle for python, pycharm.\n\nas an example, this is what the intellij idea ide looks like:\n\n\n\nall of these environments can be run on windows, mac os, or gnu/linux.\n\n\n# ide components\n\nin general, the development environment includes:\n\n 1. a text editor, which is designed to work with text files interactively. it allows you to view the contents of text files and perform various actions like inserting, deleting, and copying text, contextual search, replacement, sorting strings, viewing character codes and converting encodings, printing. they often contain additional functionality, such as syntax highlighting.\n 2. a translator (compiler and/or interpreter), which translates a text written in a programming language into machine code and does this either immediately before starting the program (compilation) or line by line (interpretation).\n 3. build automation tools, which get the code ready and put everything together.\n 4. a debugger*,* which looks for errors in the code and immediately reports them.\n\n\n\nby and large, using an ide makes you a more productive developer because it provides tight-knit components with a similar user interface. it also automates some routine tasks, and even gives you advice and feedback. that's all because the purpose of the integrated environment is to combine various utilities into one product. this approach allows developers to focus on solving their core problems, while common and standard operations are taken care of by an ide.\n\n\n# conclusion\n\nto sum up,\n\n * an ide is a specialized tool that navigates through your multiple-file programs, modifies, compiles, runs, debugs them, and also displays syntax errors;\n * modern ides are graphical and interactive;\n * some ides support only a single language, while others support multiple languages.",charsets:{},lastUpdated:"2022/10/12, 17:01:25",lastUpdatedTimestamp:1665565285e3},{title:"Theory：IDEA",frontmatter:{title:"Theory：IDEA",date:"2022-10-08T21:52:10.000Z",permalink:"/pages/9cf6c9/",tags:[null]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/04.%E6%89%A9%E5%B1%95/50.Theory%EF%BC%9AIDEA.html",relativePath:"01.Java/01.Hyperskill - Java/04.扩展/50.Theory：IDEA.md",key:"v-6522b1a2",path:"/pages/9cf6c9/",headers:[{level:2,title:"IntelliJ IDEA",slug:"intellij-idea",normalizedTitle:"intellij idea",charIndex:2},{level:2,title:"Creating the first project in IntelliJ IDEA",slug:"creating-the-first-project-in-intellij-idea",normalizedTitle:"creating the first project in intellij idea",charIndex:880},{level:2,title:"Writing",slug:"writing",normalizedTitle:"writing",charIndex:2946},{level:2,title:"IDEA Settings",slug:"idea-settings",normalizedTitle:"idea settings",charIndex:1368},{level:2,title:"How to start my program?",slug:"how-to-start-my-program",normalizedTitle:"how to start my program?",charIndex:4770},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:5433}],headersStr:"IntelliJ IDEA Creating the first project in IntelliJ IDEA Writing IDEA Settings How to start my program? Conclusion",content:'# IntelliJ IDEA\n\nIntelliJ IDEA is an intelligent, context-aware IDE for working with Java and other JVM languages like Kotlin, Scala, and Groovy on all sorts of applications. It has an ergonomic user interface, supports a lot of plugins, and provides a very powerful automatic code completion feature. IntelliJ IDEA has three editions: community, enterprise, and educational. All editions support multiple programming languages, including Java, Kotlin, Scala, and some others. The educational edition has a convenient functionality for downloading programming problems from the Hyperskill platform and checking your solutions directly from the IDEA. However, the community edition is enough to complete any project.\n\n\n\nThe logo of IntelliJ IDEA\n\nIf you want to know more about this IDE, please, visit the official website. You can also learn about its more powerful features.\n\n\n# Creating the first project in IntelliJ IDEA\n\nLet\'s write some text using IntelliJ IDEA. Here we assume that you have the community edition already installed on your computer. The other editions have minor differences in the interface.\n\n\\1. If no project is currently open in IntelliJ IDEA, click Create New Project on the Welcome screen. Otherwise, select File | New | Project. As a result, the New Project wizard opens.\n\n\n\nThe color scheme of your window may be different. Later, in the IDEA Settings paragraph, is a description of how to change it.\n\n\\2. In the panel on the left, select your language (for example, Java or Kotlin). There is also an option to create an empty project without any language support:\n\n\n\nYou may see additional options, like the JDK (Java Development Kit), that you may want to modify for your project. Just leave them unchanged for now.\n\n\\3. The next pages may propose different templates. Code templates are prewritten snippets of code provided by the IDE. Now we are going to study the very basics of IntelliJ IDEA, and do everything from scratch, so we aren\'t selecting any of the options. Just leave the default.\n\n\n\n\\4. On the final page, specify the project name (e.g. HelloWorld). If necessary, you can change the project location on disk, but you can also use one suggested by IntelliJ IDEA.\n\n\n\n\\5. Click Finish.\n\nWait while IntelliJ IDEA creates the project. When this process is complete, the structure of your new project is shown in the Project tool window.\n\nLet\'s take a look at the project structure on the left side of the window.\n\n\n\nThere are two top-level nodes:\n\n * HelloWorld. This node represents your project module. The .idea folder and the file HelloWorld.iml are used to store configuration data for your project and module respectively. The folder src is for your source code.\n * External Libraries. This is a category that represents all the "external" resources necessary for your development work. The standard files of your project language are placed there. Also, you can add other resources manually.\n\n\n# Writing\n\nNow we are going to write a text for the Hello World project.\n\n\\1. In the Project tool window, select the src folder and select File | New, or right-click the folder src and select New from the context menu.\n\n\\2. In the New menu, select File.\n\n\n\n\\3. In the New File dialog that opens, type text.txt in the text field. Press Enter to create the file.\n\n\n\nNow, you can see this file in the src folder. At the same time, the file opens in the editor. So, we\'ve just created a text file and in the future, you can use the same way to create source code files for your language.\n\nWe are to create something like this:\n\nThis is my test text file in IDEA.\n\nOr is there a mistake?\n\n\n1\n2\n3\n\n\nBut do not rush! Let\'s do it gradually, step by step.\n\nAs you see, there is a typo. And our IDE warns us about it:\n\n\n\nThere are many features of the IDEA. Now we want to introduce you to one called "Context actions". Place the cursor at the wrong word, press Alt+Enter, select Typo: Change to... with arrows and press Enter, and finally select the correct word from the list and press Enter again. The typo disappears 😃\n\n\n\n\n\nIDEA supports other context actions for code, give it a try.\n\nCongratulations! You have written your probably first text in IntelliJ IDEA and understood that there is a hidden power. You can always refer to the more complete official tutorial. We especially recommend reading about templates and code completion.\n\n\n# IDEA Settings\n\nIntelliJ IDEA has a lot of settings that can be configured as you wish. Go to File | Settings. There are many sections in the open Settings tab.\n\n\n\nAs an example, please go to Appearance & Behavior | Appearance and choose different themes. In this lesson, we use Darcula.\n\n\n\nNote: If you would like to find something in the settings, use the search box as shown below.\n\n\n\n\n# How to start my program?\n\nOf course, you can create and run your programs in IDEA. Just create a new language-specific file, write content, find the green triangle "run" button ( ), and click it.\n\nSometimes, your program cannot be started from IDEA for various reasons.\n\n 1. Make sure your program contains the main method. If not, then add it.\n 2. The source code should be placed inside the src directory, not next to it.\n 3. Sometimes no JDK is selected. To fix this, go to File | Project Structure | Project settings | Project and then set your JDK in the Project SDK section.\n\n\n\nIf you have another problem, please write it in the comments or Google it.\n\n\n# Conclusion\n\nIntelliJ IDEA is one of the best IDEs for Java and JVM languages. It allows programmers to easily work and code while having convenient access to all of its functions. Features like automatic code completion and ergonomic UI make the working experience quite pleasant.',normalizedContent:'# intellij idea\n\nintellij idea is an intelligent, context-aware ide for working with java and other jvm languages like kotlin, scala, and groovy on all sorts of applications. it has an ergonomic user interface, supports a lot of plugins, and provides a very powerful automatic code completion feature. intellij idea has three editions: community, enterprise, and educational. all editions support multiple programming languages, including java, kotlin, scala, and some others. the educational edition has a convenient functionality for downloading programming problems from the hyperskill platform and checking your solutions directly from the idea. however, the community edition is enough to complete any project.\n\n\n\nthe logo of intellij idea\n\nif you want to know more about this ide, please, visit the official website. you can also learn about its more powerful features.\n\n\n# creating the first project in intellij idea\n\nlet\'s write some text using intellij idea. here we assume that you have the community edition already installed on your computer. the other editions have minor differences in the interface.\n\n\\1. if no project is currently open in intellij idea, click create new project on the welcome screen. otherwise, select file | new | project. as a result, the new project wizard opens.\n\n\n\nthe color scheme of your window may be different. later, in the idea settings paragraph, is a description of how to change it.\n\n\\2. in the panel on the left, select your language (for example, java or kotlin). there is also an option to create an empty project without any language support:\n\n\n\nyou may see additional options, like the jdk (java development kit), that you may want to modify for your project. just leave them unchanged for now.\n\n\\3. the next pages may propose different templates. code templates are prewritten snippets of code provided by the ide. now we are going to study the very basics of intellij idea, and do everything from scratch, so we aren\'t selecting any of the options. just leave the default.\n\n\n\n\\4. on the final page, specify the project name (e.g. helloworld). if necessary, you can change the project location on disk, but you can also use one suggested by intellij idea.\n\n\n\n\\5. click finish.\n\nwait while intellij idea creates the project. when this process is complete, the structure of your new project is shown in the project tool window.\n\nlet\'s take a look at the project structure on the left side of the window.\n\n\n\nthere are two top-level nodes:\n\n * helloworld. this node represents your project module. the .idea folder and the file helloworld.iml are used to store configuration data for your project and module respectively. the folder src is for your source code.\n * external libraries. this is a category that represents all the "external" resources necessary for your development work. the standard files of your project language are placed there. also, you can add other resources manually.\n\n\n# writing\n\nnow we are going to write a text for the hello world project.\n\n\\1. in the project tool window, select the src folder and select file | new, or right-click the folder src and select new from the context menu.\n\n\\2. in the new menu, select file.\n\n\n\n\\3. in the new file dialog that opens, type text.txt in the text field. press enter to create the file.\n\n\n\nnow, you can see this file in the src folder. at the same time, the file opens in the editor. so, we\'ve just created a text file and in the future, you can use the same way to create source code files for your language.\n\nwe are to create something like this:\n\nthis is my test text file in idea.\n\nor is there a mistake?\n\n\n1\n2\n3\n\n\nbut do not rush! let\'s do it gradually, step by step.\n\nas you see, there is a typo. and our ide warns us about it:\n\n\n\nthere are many features of the idea. now we want to introduce you to one called "context actions". place the cursor at the wrong word, press alt+enter, select typo: change to... with arrows and press enter, and finally select the correct word from the list and press enter again. the typo disappears 😃\n\n\n\n\n\nidea supports other context actions for code, give it a try.\n\ncongratulations! you have written your probably first text in intellij idea and understood that there is a hidden power. you can always refer to the more complete official tutorial. we especially recommend reading about templates and code completion.\n\n\n# idea settings\n\nintellij idea has a lot of settings that can be configured as you wish. go to file | settings. there are many sections in the open settings tab.\n\n\n\nas an example, please go to appearance & behavior | appearance and choose different themes. in this lesson, we use darcula.\n\n\n\nnote: if you would like to find something in the settings, use the search box as shown below.\n\n\n\n\n# how to start my program?\n\nof course, you can create and run your programs in idea. just create a new language-specific file, write content, find the green triangle "run" button ( ), and click it.\n\nsometimes, your program cannot be started from idea for various reasons.\n\n 1. make sure your program contains the main method. if not, then add it.\n 2. the source code should be placed inside the src directory, not next to it.\n 3. sometimes no jdk is selected. to fix this, go to file | project structure | project settings | project and then set your jdk in the project sdk section.\n\n\n\nif you have another problem, please write it in the comments or google it.\n\n\n# conclusion\n\nintellij idea is one of the best ides for java and jvm languages. it allows programmers to easily work and code while having convenient access to all of its functions. features like automatic code completion and ergonomic ui make the working experience quite pleasant.',charsets:{cjk:!0},lastUpdated:"2022/10/12, 17:01:25",lastUpdatedTimestamp:1665565285e3},{title:"Theory：Operating systems",frontmatter:{title:"Theory：Operating systems",date:"2022-06-26T12:24:08.000Z",permalink:"/pages/96307c/",tags:["Computer science"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/04.%E6%89%A9%E5%B1%95/52.Theory%EF%BC%9AOperating%20systems.html",relativePath:"01.Java/01.Hyperskill - Java/04.扩展/52.Theory：Operating systems.md",key:"v-25aef1ae",path:"/pages/96307c/",headers:[{level:2,title:"Operating system",slug:"operating-system",normalizedTitle:"operating system",charIndex:250},{level:2,title:"Functions of the OS",slug:"functions-of-the-os",normalizedTitle:"functions of the os",charIndex:1246},{level:2,title:"Operating systems' components",slug:"operating-systems-components",normalizedTitle:"operating systems' components",charIndex:2315},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:3426}],headersStr:"Operating system Functions of the OS Operating systems' components Conclusion",content:"How can it be that there are thousands of different computer models but they all can run the same programs? Have you ever thought about how the programs interact with the hardware? These and other features are made possible by operating systems.\n\n\n# Operating system\n\nAn operating system (OS) is a set of software that manages communication between all other applications and hardware. It turns a computer into something more than just a bunch of metal parts, namely, a complex system that can effectively perform different tasks.\n\nNowadays, there exist a lot of operating systems for you to choose from. For personal computers, the most popular ones are Microsoft Windows, macOS, and Linux distributions. The two top mobile operating systems are Android and iOS. If you've ever heard of smart kettles and smart fridges, even they have their own OS.\n\nOf course, the operating systems for such a range of devices differ greatly from one another. What they have in common are the means they provide to the programs and to those who use them.\n\nOn the one hand, it's only an illusion that your favorite browser is the same on Windows as it is on macOS. On the other hand, you can run the same application on different computers with the same OS.\n\n\n# Functions of the OS\n\nAn operating system controls the communication between all the computer software and hardware. An OS can give programs restricted access to processor units, memory, hard drives, network, peripherals, and other resources.\n\nYou can run a browser, a media player, and ten other applications, and your OS is the one giving them all the resources they need to run properly. At the same time, this OS acts as a fair referee prohibiting any application to take up more resources than it actually needs.\n\nAs a mediator between the applications and hardware, the operating system allows us to communicate with the device without going into details about its specifics or mechanics.\n\n\n\nAny operating system has several essential functions. Here is a list of some of them:\n\n * data protection and secure access;\n * resource management;\n * interaction between hardware and peripherals;\n * file management;\n * running other programs.\n\nIt is possible to distinguish more functions of modern operating systems, but those listed above are enough for starters.\n\n\n# Operating systems' components\n\nA mandatory part of all operating systems, its core, is the kernel. Usually, it's one of the first programs that loads when you turn on your computer. It provides all the necessary means to run the programs you want.\n\nTypically, when you start your OS, you see the Graphical User Interface (GUI). It is the type of interface that allows users to interact with the device using graphical icons and audio indicators. Another way to interact with the OS is to use commands in a text-based terminal known as a Command Line Interface (CLI).\n\n\n\nThere are two types of kernels, known as monolithic and microkernels. A monolithic kernel is a large program that performs most of the OS functions. At the same time, a microkernel performs only a small subset of the operating system functions, but we can extend it with additional modules known as drivers.\n\nThere are other important parts of the operating system besides the kernel and the graphical user interface. We will review them in the next topic. For now, use the following image to brush up everything we've covered so far:\n\n\n\n\n# Conclusion\n\nThe operating system efficiently distributes the resources of the computer in a way we've described above. It is important to understand that without the operating system, it would not be possible to use the computer.\n\nNow you know about the main functions of the operating systems and their essential elements. Let's test what you've learned so far!",normalizedContent:"how can it be that there are thousands of different computer models but they all can run the same programs? have you ever thought about how the programs interact with the hardware? these and other features are made possible by operating systems.\n\n\n# operating system\n\nan operating system (os) is a set of software that manages communication between all other applications and hardware. it turns a computer into something more than just a bunch of metal parts, namely, a complex system that can effectively perform different tasks.\n\nnowadays, there exist a lot of operating systems for you to choose from. for personal computers, the most popular ones are microsoft windows, macos, and linux distributions. the two top mobile operating systems are android and ios. if you've ever heard of smart kettles and smart fridges, even they have their own os.\n\nof course, the operating systems for such a range of devices differ greatly from one another. what they have in common are the means they provide to the programs and to those who use them.\n\non the one hand, it's only an illusion that your favorite browser is the same on windows as it is on macos. on the other hand, you can run the same application on different computers with the same os.\n\n\n# functions of the os\n\nan operating system controls the communication between all the computer software and hardware. an os can give programs restricted access to processor units, memory, hard drives, network, peripherals, and other resources.\n\nyou can run a browser, a media player, and ten other applications, and your os is the one giving them all the resources they need to run properly. at the same time, this os acts as a fair referee prohibiting any application to take up more resources than it actually needs.\n\nas a mediator between the applications and hardware, the operating system allows us to communicate with the device without going into details about its specifics or mechanics.\n\n\n\nany operating system has several essential functions. here is a list of some of them:\n\n * data protection and secure access;\n * resource management;\n * interaction between hardware and peripherals;\n * file management;\n * running other programs.\n\nit is possible to distinguish more functions of modern operating systems, but those listed above are enough for starters.\n\n\n# operating systems' components\n\na mandatory part of all operating systems, its core, is the kernel. usually, it's one of the first programs that loads when you turn on your computer. it provides all the necessary means to run the programs you want.\n\ntypically, when you start your os, you see the graphical user interface (gui). it is the type of interface that allows users to interact with the device using graphical icons and audio indicators. another way to interact with the os is to use commands in a text-based terminal known as a command line interface (cli).\n\n\n\nthere are two types of kernels, known as monolithic and microkernels. a monolithic kernel is a large program that performs most of the os functions. at the same time, a microkernel performs only a small subset of the operating system functions, but we can extend it with additional modules known as drivers.\n\nthere are other important parts of the operating system besides the kernel and the graphical user interface. we will review them in the next topic. for now, use the following image to brush up everything we've covered so far:\n\n\n\n\n# conclusion\n\nthe operating system efficiently distributes the resources of the computer in a way we've described above. it is important to understand that without the operating system, it would not be possible to use the computer.\n\nnow you know about the main functions of the operating systems and their essential elements. let's test what you've learned so far!",charsets:{},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：Gradle basics",frontmatter:{title:"Theory：Gradle basics",date:"2022-06-29T19:55:38.000Z",permalink:"/pages/2392d7/",tags:["Gradle","Build tools","Tool Guide"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/04.%E6%89%A9%E5%B1%95/54.Theory%EF%BC%9AGradle%20basics.html",relativePath:"01.Java/01.Hyperskill - Java/04.扩展/54.Theory：Gradle basics.md",key:"v-f4fa39cc",path:"/pages/2392d7/",headers:[{level:2,title:"The key concepts",slug:"the-key-concepts",normalizedTitle:"the key concepts",charIndex:1273},{level:2,title:"Downloading and installing Gradle",slug:"downloading-and-installing-gradle",normalizedTitle:"downloading and installing gradle",charIndex:2280},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:3033}],headersStr:"The key concepts Downloading and installing Gradle Conclusion",content:"Gradle is a modern automation tool that helps build and manage projects written in Java, Kotlin, Scala, and other JVM-based languages. It describes project dependencies and determines how to build a project. Gradle uses a well-designed plugin system, that is why it is a highly extendable tool. You can use plugins for automatic versioning, automatic testing, reporting about the build, and so on.\n\nOne of the best things about Gradle is its Groovy-based domain-specific language (DSL) that gives developers a specific way to form custom build scripts. The Kotlin developers are especially lucky since Gradle also started to support Kotlin for such scripts. So, there are two languages to write the Gradle build scripts (Groovy and Kotlin) and you can choose any of them.\n\n提示\n\nPlease, note, that DSL is a computer language specialized to a particular application domain (like build automation). This is in contrast to a general-purpose language (GPL), which is broadly applicable across domains.\n\n\n\nNowadays, Gradle is a de-facto standard for building Android applications. However, programmers use it for server-side and desktop development gradually replacing other build tools with it. Here is the full list of features, if you want to get more information on them.\n\n\n# The key concepts\n\nThe key features of Gradle are as follows:\n\n * Settings files. Gradle uses several types of settings files to describe how to build a project.\n * Build-by-convention. A programmer doesn't need to specify every building step that needs to be done. Instead, Gradle uses default settings and behavior. Although, every step of the default build process can be customized if necessary.\n * Dependency management. Gradle automatically downloads specified external libraries and solves conflict cases with dependencies. You can declare as many dependencies as you need for a project.\n * Builds. Gradle allows programmers to design well-structured and easily maintained comprehensible builds. It also supports complex cases such as multi-project or partial builds.\n * Ease of migration. Gradle can easily adapt to any project structure you have. Therefore, you can always develop your project exactly the way you want.\n * DSL (based on Groovy and Kotlin) for writing scripts in settings files.\n\n\n# Downloading and installing Gradle\n\nYou can download Gradle from the official website and unpack the archive somewhere on your computer. We recommend choosing version 5.0 or higher.\n\nTo install Gradle, follow the installation instructions for your operating system.\n\nTo verify that the installation has been completed correctly, run the following command:\n\ngradle -v\n\n\n1\n\n\nThe result should look similar to:\n\n------------------------------------------------------------\nGradle 5.6.4\n------------------------------------------------------------\n\n\n1\n2\n3\n\n\nYour version of Gradle may differ; the main thing is that the command should successfully work. If you have errors, try to google them, read the docs, or write us a comment describing your issue.\n\n\n# Conclusion\n\nEven though it’s yet another build tool, Gradle builds are more neat and concise thanks to its DSL. It provides a rich infrastructure to build, test, automate, and deliver your project. Next, we will learn how to create the simplest Gradle project.",normalizedContent:"gradle is a modern automation tool that helps build and manage projects written in java, kotlin, scala, and other jvm-based languages. it describes project dependencies and determines how to build a project. gradle uses a well-designed plugin system, that is why it is a highly extendable tool. you can use plugins for automatic versioning, automatic testing, reporting about the build, and so on.\n\none of the best things about gradle is its groovy-based domain-specific language (dsl) that gives developers a specific way to form custom build scripts. the kotlin developers are especially lucky since gradle also started to support kotlin for such scripts. so, there are two languages to write the gradle build scripts (groovy and kotlin) and you can choose any of them.\n\n提示\n\nplease, note, that dsl is a computer language specialized to a particular application domain (like build automation). this is in contrast to a general-purpose language (gpl), which is broadly applicable across domains.\n\n\n\nnowadays, gradle is a de-facto standard for building android applications. however, programmers use it for server-side and desktop development gradually replacing other build tools with it. here is the full list of features, if you want to get more information on them.\n\n\n# the key concepts\n\nthe key features of gradle are as follows:\n\n * settings files. gradle uses several types of settings files to describe how to build a project.\n * build-by-convention. a programmer doesn't need to specify every building step that needs to be done. instead, gradle uses default settings and behavior. although, every step of the default build process can be customized if necessary.\n * dependency management. gradle automatically downloads specified external libraries and solves conflict cases with dependencies. you can declare as many dependencies as you need for a project.\n * builds. gradle allows programmers to design well-structured and easily maintained comprehensible builds. it also supports complex cases such as multi-project or partial builds.\n * ease of migration. gradle can easily adapt to any project structure you have. therefore, you can always develop your project exactly the way you want.\n * dsl (based on groovy and kotlin) for writing scripts in settings files.\n\n\n# downloading and installing gradle\n\nyou can download gradle from the official website and unpack the archive somewhere on your computer. we recommend choosing version 5.0 or higher.\n\nto install gradle, follow the installation instructions for your operating system.\n\nto verify that the installation has been completed correctly, run the following command:\n\ngradle -v\n\n\n1\n\n\nthe result should look similar to:\n\n------------------------------------------------------------\ngradle 5.6.4\n------------------------------------------------------------\n\n\n1\n2\n3\n\n\nyour version of gradle may differ; the main thing is that the command should successfully work. if you have errors, try to google them, read the docs, or write us a comment describing your issue.\n\n\n# conclusion\n\neven though it’s yet another build tool, gradle builds are more neat and concise thanks to its dsl. it provides a rich infrastructure to build, test, automate, and deliver your project. next, we will learn how to create the simplest gradle project.",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：Build tools",frontmatter:{title:"Theory：Build tools",date:"2022-06-24T21:27:26.000Z",permalink:"/pages/d40e09/",tags:["Build tools"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/04.%E6%89%A9%E5%B1%95/51.Theory%EF%BC%9ABuild%20tools.html",relativePath:"01.Java/01.Hyperskill - Java/04.扩展/51.Theory：Build tools.md",key:"v-6bcabb64",path:"/pages/d40e09/",headers:[{level:2,title:"What is a build tool?",slug:"what-is-a-build-tool",normalizedTitle:"what is a build tool?",charIndex:2},{level:2,title:"What can build tools do?",slug:"what-can-build-tools-do",normalizedTitle:"what can build tools do?",charIndex:756},{level:2,title:"Build tools for Java-based projects",slug:"build-tools-for-java-based-projects",normalizedTitle:"build tools for java-based projects",charIndex:1697},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:3282}],headersStr:"What is a build tool? What can build tools do? Build tools for Java-based projects Conclusion",content:'# What is a build tool?\n\nA build tool is a program that automates the process of creating executable applications from source code. The build process includes compiling sources and linking and packaging the code into a usable or executable form.\n\n\n\nIn small projects (like projects for learning), developers can manually invoke the build process. However, this approach is not efficient for larger projects, when it is pretty hard to keep track of what needs to be built. Automating the build process minimizes the risk of human error. Additionally, an automated build tool typically runs faster than someone performing the same steps manually. As a consequence, an automated build process improves the quality of the product and saves time and money.\n\n\n# What can build tools do?\n\nModern build tools can perform a wide variety of tasks that software developers do in their day-to-day activities:\n\n 1. Downloading and adding dependencies. This is especially convenient when your project depends on a large number of libraries.\n 2. Compiling source code into bytecode. Build tools will invoke compiler for all the files in your project.\n 3. Packaging compiled code. You will have a production-ready application archive like JAR, APK, or some other.\n 4. Running tests. For example, testing the application archive every time to check if it works correctly. It allows programmers to avoid bugs after modifying the application.\n 5. Deploying to a production environment.\n\nThis list of tasks is not complete and may be different depending on the particular build tool used. Some additional features might be available; for example, you can use some tools to generate documentation after the build.\n\n\n# Build tools for Java-based projects\n\nThere are three main build tools for Java-based projects: Apache Ant, Apache Maven, and Gradle.\n\nApache Ant was released in 2000. It is the oldest of these three build tools. Coders rarely use Ant in new projects but it still occurs in practice. You can use this tool together with Apache Ivy to manage dependencies.\n\nApache Maven was released in 2004, and now it is one of the most popular choices for Java developers (especially for server-side development). Many projects, both old and new, use Maven as a build tool because of its powerful dependency management possibilities.\n\nMaven follows the Convention Over Configuration concept which means that a developer needs to specify only unconventional aspects of the application, and all standard aspects work by default.\n\nGradle is a new tool compared to Ant and Maven. It was released in 2007 and is now standard for Android applications. Also, developers use it for server and desktop development. Gradle aims to “combine the power and flexibility of Ant with the dependency management and conventions of Maven into a more effective way to build.”\n\nAll of these build tools are free and can be used in any operating system.\n\nNote: Apache Maven and Gradle are more than simply build tools. They manage almost the entire lifecycle of an application.\n\nThere is also another build tool called sbt (Scala Build Tool). It is primarily used for Scala projects but you can use it for Java or Kotlin as well.\n\nIf you are interested, here you can find a list of build tools for different languages.\n\n\n# Conclusion\n\nIn summary, a build tool is a software that creates executable applications from source code. Using a build tool minimizes the risk of human error, speeds up the process, improves the quality of the product, and saves time and money. Modern build tools do plenty of jobs such as downloading and adding dependencies, compiling source code, packaging compiled code, running tests, deploying to a production environment. For Java-based projects, widely used build tools are "oldie" Apache Ant, popular Apache Maven, and a "new" Gradle.',normalizedContent:'# what is a build tool?\n\na build tool is a program that automates the process of creating executable applications from source code. the build process includes compiling sources and linking and packaging the code into a usable or executable form.\n\n\n\nin small projects (like projects for learning), developers can manually invoke the build process. however, this approach is not efficient for larger projects, when it is pretty hard to keep track of what needs to be built. automating the build process minimizes the risk of human error. additionally, an automated build tool typically runs faster than someone performing the same steps manually. as a consequence, an automated build process improves the quality of the product and saves time and money.\n\n\n# what can build tools do?\n\nmodern build tools can perform a wide variety of tasks that software developers do in their day-to-day activities:\n\n 1. downloading and adding dependencies. this is especially convenient when your project depends on a large number of libraries.\n 2. compiling source code into bytecode. build tools will invoke compiler for all the files in your project.\n 3. packaging compiled code. you will have a production-ready application archive like jar, apk, or some other.\n 4. running tests. for example, testing the application archive every time to check if it works correctly. it allows programmers to avoid bugs after modifying the application.\n 5. deploying to a production environment.\n\nthis list of tasks is not complete and may be different depending on the particular build tool used. some additional features might be available; for example, you can use some tools to generate documentation after the build.\n\n\n# build tools for java-based projects\n\nthere are three main build tools for java-based projects: apache ant, apache maven, and gradle.\n\napache ant was released in 2000. it is the oldest of these three build tools. coders rarely use ant in new projects but it still occurs in practice. you can use this tool together with apache ivy to manage dependencies.\n\napache maven was released in 2004, and now it is one of the most popular choices for java developers (especially for server-side development). many projects, both old and new, use maven as a build tool because of its powerful dependency management possibilities.\n\nmaven follows the convention over configuration concept which means that a developer needs to specify only unconventional aspects of the application, and all standard aspects work by default.\n\ngradle is a new tool compared to ant and maven. it was released in 2007 and is now standard for android applications. also, developers use it for server and desktop development. gradle aims to “combine the power and flexibility of ant with the dependency management and conventions of maven into a more effective way to build.”\n\nall of these build tools are free and can be used in any operating system.\n\nnote: apache maven and gradle are more than simply build tools. they manage almost the entire lifecycle of an application.\n\nthere is also another build tool called sbt (scala build tool). it is primarily used for scala projects but you can use it for java or kotlin as well.\n\nif you are interested, here you can find a list of build tools for different languages.\n\n\n# conclusion\n\nin summary, a build tool is a software that creates executable applications from source code. using a build tool minimizes the risk of human error, speeds up the process, improves the quality of the product, and saves time and money. modern build tools do plenty of jobs such as downloading and adding dependencies, compiling source code, packaging compiled code, running tests, deploying to a production environment. for java-based projects, widely used build tools are "oldie" apache ant, popular apache maven, and a "new" gradle.',charsets:{},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：Basic project with Gradle",frontmatter:{title:"Theory：Basic project with Gradle",date:"2022-06-30T12:28:45.000Z",permalink:"/pages/6a2c0f/",tags:["Gradle","Build tools","Tool Guide"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/04.%E6%89%A9%E5%B1%95/55.Theory%EF%BC%9ABasic%20project%20with%20Gradle.html",relativePath:"01.Java/01.Hyperskill - Java/04.扩展/55.Theory：Basic project with Gradle.md",key:"v-d8a45364",path:"/pages/6a2c0f/",headers:[{level:2,title:"The key concepts of Gradle",slug:"the-key-concepts-of-gradle",normalizedTitle:"the key concepts of gradle",charIndex:393},{level:2,title:"Initializing a basic project managed by Gradle",slug:"initializing-a-basic-project-managed-by-gradle",normalizedTitle:"initializing a basic project managed by gradle",charIndex:1220},{level:2,title:"Modifying the build file",slug:"modifying-the-build-file",normalizedTitle:"modifying the build file",charIndex:3678},{level:2,title:"The list of all the tasks",slug:"the-list-of-all-the-tasks",normalizedTitle:"the list of all the tasks",charIndex:4865},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:5870}],headersStr:"The key concepts of Gradle Initializing a basic project managed by Gradle Modifying the build file The list of all the tasks Conclusion",content:"In this topic, you will learn how to create a simple Gradle project and how Gradle manages it. We assume that you have already installed Gradle on your computer. Otherwise, follow the installation instructions. To verify that the installation has been successful, run the gradle -v command. If you get errors, try to google them, read the docs, or write us a comment describing the issue.\n\n\n# The key concepts of Gradle\n\nLet's start with an introduction to the key concepts in Gradle: projects and tasks.\n\n * A project might represent either something to be built (e.g. a JAR file or ZIP archive) or a thing to do (e.g. deploying the application). Every Gradle build contains one or more projects.\n * A task is a single piece of work that a build performs. This can include compiling classes, running tests, generating docs, and so on. Every project is essentially a collection of one or several tasks.\n\nThe following picture illustrates the relationships between these concepts:\n\n\n\nIn simple cases, a build will contain only a single project with several tasks. This will be a common situation in your learning process. Do not worry, if the concepts look a bit abstract. We will study a more specific example soon.\n\n\n# Initializing a basic project managed by Gradle\n\nLet's initialize a new project with Gradle using a terminal in your OS.\n\nIn the future, you most likely will not have to do this manually since modern IDEs can do this for you automatically.\n\n 1. Create a new directory to store files of your project and go to it.\n\nmkdir gradle-demo\ncd gradle-demo\n\n\n1\n2\n\n 2. Invoke the gradle init command to generate a simple project. Modern versions of Gradle will ask you to fill several parameters in a dialogue form. To get acquainted with the process just choose basic as the type of project and Groovy as the build script DSL.\n\nThis command will produce the following output:\n\n> Task :init\n\nBUILD SUCCESSFUL in 10s\n2 actionable tasks: 2 executed\n\n\n1\n2\n3\n4\n\n\nGradle performed some tasks for you and now there is a simple project with the most basic structure:\n\n.\n├── build.gradle\n├── gradle\n│   └── wrapper\n│       ├── gradle-wrapper.jar\n│       └── gradle-wrapper.properties\n├── gradlew\n├── gradlew.bat\n└── settings.gradle\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nHere is brief info about all the generated files:\n\n * The build.gradle file is a primary file that specifies the Gradle's project, including its tasks and external libraries. For now, this file doesn't contain anything useful, but in real projects it is often updated with new information.\n * The files gradle-wrapper.jar, gradle-wrapper.properties, gradlew and gradlew.bat belong to Gradle Wrapper which allows you to run Gradle without its manual installation.\n * The settings.gradle file specifies which projects to include in your build. This file is optional for a build that has only one project, but it is mandatory for a multi-project build.\n\nLet's build our project invoking the gradle build command from the same location where build.gradle resides. It will produce an output like this:\n\n> Task :buildEnvironment\n\n------------------------------------------------------------\nRoot project\n------------------------------------------------------------\n\n...\n\nBUILD SUCCESSFUL in 725ms\n1 actionable task: 1 executed\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nSo, the project was successfully built with one executed task.\n\nYou can also invoke build and other commands like ./gradlew build for Unix-based systems and gradlew.bat build for Windows. It will automatically download Gradle and run the specified command. Using wrappers allows developers to start working with a Gradle-based project without having to install it manually.\n\n\n# Modifying the build file\n\nLet's make our build more interesting by adding some properties and one task to the build.gradle file using Groovy DSL.\n\ndescription = \"A basic Gradle project\"\n\ntask helloGradle {\n    doLast {\n        println 'Hello, Gradle!'\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nHere, we set the description property and define a simple task that prints a 'hello' message. There is an output after executing the task with the gradle -q helloGradle command:\n\n> Task :buildEnvironment\n\n------------------------------------------------------------\nRoot project - A basic Gradle project\n------------------------------------------------------------\n\n...\n\n> Task :helloGradle\nHello, Gradle!\n\nBUILD SUCCESSFUL in 831ms\n2 actionable tasks: 2 executed\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\nThis build was completed with 2 tasks executed. Our new task printed the Hello, Gradle! message. In addition, we modified the description of the project in the build. The -q argument just simplifies the command output.\n\nYou can also use Kotlin as DSL inside the build file. To allow it, you need to specify Kotlin as DSL when creating a project. In this case, the name of the file will be build.gradle.kts.\n\n\n# The list of all the tasks\n\nIf you would like to see all the possible Gradle tasks to perform, just run the gradle tasks --all command. The list will include our tasks as well:\n\n> Task :tasks\n\n------------------------------------------------------------\nTasks runnable from root project - A basic Gradle project\n------------------------------------------------------------\n\nBuild Setup tasks\n-----------------\ninit - Initializes a new Gradle build.\nwrapper - Generates Gradle wrapper files.\n\nHelp tasks\n----------\nbuildEnvironment - Displays all buildscript dependencies declared in root project 'gradle-demo'.\n...\n\nOther tasks\n-----------\nhelloGradle\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\nIn a real project, the list of tasks will be much larger, because, in addition to standard tasks, it will contain a lot of tasks from various plugins (like Java or Kotlin plugin).\n\nWe've considered all Gradle-related files from the generated simple project in isolation from any source code files.\n\n\n# Conclusion\n\nYou've learned the key concepts of Gradle projects and studied all the files from a simple generated project in isolation from any source code files. Now it's time to combine Gradle together with your favorite programming language!",normalizedContent:"in this topic, you will learn how to create a simple gradle project and how gradle manages it. we assume that you have already installed gradle on your computer. otherwise, follow the installation instructions. to verify that the installation has been successful, run the gradle -v command. if you get errors, try to google them, read the docs, or write us a comment describing the issue.\n\n\n# the key concepts of gradle\n\nlet's start with an introduction to the key concepts in gradle: projects and tasks.\n\n * a project might represent either something to be built (e.g. a jar file or zip archive) or a thing to do (e.g. deploying the application). every gradle build contains one or more projects.\n * a task is a single piece of work that a build performs. this can include compiling classes, running tests, generating docs, and so on. every project is essentially a collection of one or several tasks.\n\nthe following picture illustrates the relationships between these concepts:\n\n\n\nin simple cases, a build will contain only a single project with several tasks. this will be a common situation in your learning process. do not worry, if the concepts look a bit abstract. we will study a more specific example soon.\n\n\n# initializing a basic project managed by gradle\n\nlet's initialize a new project with gradle using a terminal in your os.\n\nin the future, you most likely will not have to do this manually since modern ides can do this for you automatically.\n\n 1. create a new directory to store files of your project and go to it.\n\nmkdir gradle-demo\ncd gradle-demo\n\n\n1\n2\n\n 2. invoke the gradle init command to generate a simple project. modern versions of gradle will ask you to fill several parameters in a dialogue form. to get acquainted with the process just choose basic as the type of project and groovy as the build script dsl.\n\nthis command will produce the following output:\n\n> task :init\n\nbuild successful in 10s\n2 actionable tasks: 2 executed\n\n\n1\n2\n3\n4\n\n\ngradle performed some tasks for you and now there is a simple project with the most basic structure:\n\n.\n├── build.gradle\n├── gradle\n│   └── wrapper\n│       ├── gradle-wrapper.jar\n│       └── gradle-wrapper.properties\n├── gradlew\n├── gradlew.bat\n└── settings.gradle\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nhere is brief info about all the generated files:\n\n * the build.gradle file is a primary file that specifies the gradle's project, including its tasks and external libraries. for now, this file doesn't contain anything useful, but in real projects it is often updated with new information.\n * the files gradle-wrapper.jar, gradle-wrapper.properties, gradlew and gradlew.bat belong to gradle wrapper which allows you to run gradle without its manual installation.\n * the settings.gradle file specifies which projects to include in your build. this file is optional for a build that has only one project, but it is mandatory for a multi-project build.\n\nlet's build our project invoking the gradle build command from the same location where build.gradle resides. it will produce an output like this:\n\n> task :buildenvironment\n\n------------------------------------------------------------\nroot project\n------------------------------------------------------------\n\n...\n\nbuild successful in 725ms\n1 actionable task: 1 executed\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nso, the project was successfully built with one executed task.\n\nyou can also invoke build and other commands like ./gradlew build for unix-based systems and gradlew.bat build for windows. it will automatically download gradle and run the specified command. using wrappers allows developers to start working with a gradle-based project without having to install it manually.\n\n\n# modifying the build file\n\nlet's make our build more interesting by adding some properties and one task to the build.gradle file using groovy dsl.\n\ndescription = \"a basic gradle project\"\n\ntask hellogradle {\n    dolast {\n        println 'hello, gradle!'\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nhere, we set the description property and define a simple task that prints a 'hello' message. there is an output after executing the task with the gradle -q hellogradle command:\n\n> task :buildenvironment\n\n------------------------------------------------------------\nroot project - a basic gradle project\n------------------------------------------------------------\n\n...\n\n> task :hellogradle\nhello, gradle!\n\nbuild successful in 831ms\n2 actionable tasks: 2 executed\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\nthis build was completed with 2 tasks executed. our new task printed the hello, gradle! message. in addition, we modified the description of the project in the build. the -q argument just simplifies the command output.\n\nyou can also use kotlin as dsl inside the build file. to allow it, you need to specify kotlin as dsl when creating a project. in this case, the name of the file will be build.gradle.kts.\n\n\n# the list of all the tasks\n\nif you would like to see all the possible gradle tasks to perform, just run the gradle tasks --all command. the list will include our tasks as well:\n\n> task :tasks\n\n------------------------------------------------------------\ntasks runnable from root project - a basic gradle project\n------------------------------------------------------------\n\nbuild setup tasks\n-----------------\ninit - initializes a new gradle build.\nwrapper - generates gradle wrapper files.\n\nhelp tasks\n----------\nbuildenvironment - displays all buildscript dependencies declared in root project 'gradle-demo'.\n...\n\nother tasks\n-----------\nhellogradle\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\nin a real project, the list of tasks will be much larger, because, in addition to standard tasks, it will contain a lot of tasks from various plugins (like java or kotlin plugin).\n\nwe've considered all gradle-related files from the generated simple project in isolation from any source code files.\n\n\n# conclusion\n\nyou've learned the key concepts of gradle projects and studied all the files from a simple generated project in isolation from any source code files. now it's time to combine gradle together with your favorite programming language!",charsets:{},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：Building apps using Gradle",frontmatter:{title:"Theory：Building apps using Gradle",date:"2022-07-02T14:59:18.000Z",permalink:"/pages/672585/",tags:["Gradle","Build tools","Tool Guide"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/04.%E6%89%A9%E5%B1%95/56.Theory%EF%BC%9ABuilding%20apps%20using%20Gradle.html",relativePath:"01.Java/01.Hyperskill - Java/04.扩展/56.Theory：Building apps using Gradle.md",key:"v-1acef428",path:"/pages/672585/",headers:[{level:2,title:"Initializing an application",slug:"initializing-an-application",normalizedTitle:"initializing an application",charIndex:561},{level:2,title:"Running the application",slug:"running-the-application",normalizedTitle:"running the application",charIndex:4015},{level:2,title:"Plugins",slug:"plugins",normalizedTitle:"plugins",charIndex:5561},{level:2,title:"Repositories and dependencies",slug:"repositories-and-dependencies",normalizedTitle:"repositories and dependencies",charIndex:6867},{level:2,title:"Configurations for the application plugin",slug:"configurations-for-the-application-plugin",normalizedTitle:"configurations for the application plugin",charIndex:8230},{level:2,title:"Generating and running Jar archive",slug:"generating-and-running-jar-archive",normalizedTitle:"generating and running jar archive",charIndex:8742},{level:2,title:"Building the application",slug:"building-the-application",normalizedTitle:"building the application",charIndex:10480},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:10920}],headersStr:"Initializing an application Running the application Plugins Repositories and dependencies Configurations for the application plugin Generating and running Jar archive Building the application Conclusion",content:'We hope you already got a basic understanding of what Gradle is and how to use it. In this topic, we will consider the basic structure of the build.gradle file, and then build and run a small application. The knowledge you obtain here can be used for any JVM-based programming language supported by Gradle (e.g. Java or Kotlin).\n\n注意\n\nThis article was written using Gradle 6.8.1. There may be some differences for other versions of Gradle. If you have troubles with this article, you can read the comments or just follow official Gradle doc instead of this.\n\n\n# Initializing an application\n\nWe assume that you already have some experience with the terminal of your operating system and will interact with Gradle using it. First of all, create a new empty folder named what you want (e.g., demo). In this folder, you need to invoke the gradle init command to start initialising a new Gradle-based project. This command will show you a dialogue form to set up the project you need.\n\nIn this form, choose application as the type of the project; Java or Kotlin as the implementation language; and org.hyperskill.gradleapp as the project name if you would like to precisely follow our example (but it isn\'t required). For all other questions, you can choose their default options, since it doesn\'t matter now.\n\nBelow is an example of choosing options.\n\nSelect type of project to generate:\n  1: basic\n  2: application\n  3: library\n  4: Gradle plugin\nEnter selection (default: basic) [1..4] 2\n\nSelect implementation language:\n  1: C++\n  2: Groovy\n  3: Java\n  4: Kotlin\n  5: Scala\n  6: Swift\nEnter selection (default: Java) [1..6] 3\n\nSplit functionality across multiple subprojects?:\n  1: no - only one application project\n  2: yes - application and library projects\nEnter selection (default: no - only one application project) [1..2] \n\nSelect build script DSL:\n  1: Groovy\n  2: Kotlin\nEnter selection (default: Groovy) [1..2] \n\nSelect test framework:\n  1: JUnit 4\n  2: TestNG\n  3: Spock\n  4: JUnit Jupiter\nEnter selection (default: JUnit 4) [1..4]  \n\nProject name (default: demo): org.hyperskill.gradleapp\nSource package (default: org.hyperskill.gradleapp): \n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n\n\nAfter the initialisation is completed, the project structure will be the following:\n\n.\n├── app\n│   ├── build.gradle\n│   └── src\n│       ├── main\n│       │   ├── java\n│       │   │   └── org\n│       │   │       └── hyperskill\n│       │   │           └── gradleapp\n│       │   │               └── App.java\n│       │   └── resources\n│       └── test\n│           ├── java\n│           │   └── org\n│           │       └── hyperskill\n│           │           └── gradleapp\n│           │               └── AppTest.java\n│           └── resources\n├── gradle\n│   └── wrapper\n│       ├── gradle-wrapper.jar\n│       └── gradle-wrapper.properties\n├── gradlew\n├── gradlew.bat\n└── settings.gradle\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\nThis structure includes a lot of files we have already considered (settings.gradle, wrapper files, etc). The most important file called build.gradle, which contains tasks and external libraries, is located within the app directory. This folder exists because we\'ve chosen application as the type of the project and the folder represents our application.\n\nThere is also the src directory inside app. It contains two sub-directories main and test. This is a quite standard project structure when using Gradle. In our case, the package org.hyperskill.gradleapp has some Java source code (App.java).\n\nIf you chose Kotlin as the implementation language, the project structure will be the same except for Kotlin source code files (.kt instead of .java) and kotlin folders instead of java ones.\n\n提示\n\nPlease note, it is a good practice for Java and Kotlin projects to include the name of your organization in the path to your source code files as a package name like org.hyperskill. We follow this recommendation too.\n\n\n# Running the application\n\nIf you look at the list of available tasks for managing the project using the command gradle tasks --all, you will see that the list is fairly long. Here is a shortened version of it:\n\nApplication tasks\n-----------------\nrun - Runs this project as a JVM application\n\nBuild tasks\n-----------\nassemble - Assembles the outputs of this project.\nbuild - Assembles and tests this project.\n...\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nThere is the command run which can start the application. To do it, just invoke the gradle run command or use a Gradle wrapper script for your OS. This command will build and run the application. Here is an output example:\n\n> Task :app:run\nHello World!\n\nBUILD SUCCESSFUL in 623ms\n2 actionable tasks: 1 executed, 1 up-to-date\n\n\n1\n2\n3\n4\n5\n\n\nAs you can see, the autogenerated application can already display a welcome string. If you get a similar result, it means that everything is OK: your application works and Gradle can manage it!\n\nIf you look at the project structure again, you will see that it has some new files, including files with bytecode (App.class, AppTest.class). Actually, Gradle built and started the App.class file when we invoked the run command.\n\nNow, let\'s consider the build file (build.gradle for Groovy DSL or build.gradle.kts for Kotlin DSL) thanks to which we can build our application successfully and run it using Gradle. This file specifies project structure and adds some tasks and external libraries to the project. We will not present the entire file here, only its main parts.\n\n\n# Plugins\n\nThe plugins section adds some plugins to extend the capabilities of the project: e.g., to add new tasks or properties.\n\nplugins {\n    // Apply the application plugin to add support for building a CLI application\n    id("application")\n\n    // Apply the plugin which adds support for Java\n    id("java")\n\n    // Apply the plugin which adds support for Kotlin/JVM\n    id("org.jetbrains.kotlin.jvm")\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nHere, id is a globally unique identifier, or name, for plugins. Core Gradle plugins are special in that they provide short names, such as "java" or "application".\n\nBasically, plugins for Kotlin and Java know how to build, package, and run tests on the project. The application plugin facilitates creating an executable JVM application.\n\nThere is an alternative way to use a plugin in the project. It\'s more like a legacy way of applying plugins which is not widely used now, but just in case you see it somewhere, here it is:\n\napply plugin: "application"   // for Groovy DSL\napply(plugin = "application") // for Kotlin DSL\n\n\n1\n2\n\n\nThere are many other plugins already available for you, and you can find them at the official Gradle Plugins page. A large project can use dozens and hundreds of them. Gradle does not limit the maximum number of plugins used in a project.\n\n\n# Repositories and dependencies\n\nUsually you don\'t need to write your program from scratch – you use already written pieces of code, either yours or other developers\'. This is where the dependency system comes in handy.\n\nThe repositories section declares locations from which dependencies will be downloaded and added to the project.\n\nrepositories {\n    jcenter()\n}\n\n\n1\n2\n3\n\n\nThere are plenty of public repositories: JCenter, Maven Central, Google and others. Usually, a description of a dependency says which repository contains it.\n\nThe dependencies section is used to add external libraries to the project. Gradle will automatically download them from the repositories and put in the archive with the application. Right now your dependencies section should contain at least a testing library like JUnit or something else, depending on your choice when the project was initialized.\n\ndependencies {\n    // Use JUnit test framework.\n    testImplementation \'junit:junit:4.13\'\n\n    // This dependency is used by the application.\n    implementation \'com.google.guava:guava:29.0-jre\'\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nWe will take a closer look at repositories and dependencies in the next topics.\n\n提示\n\nThis is a standard Gradle build structure. You apply some plugins and specify dependencies for your project. This structure will be the same for any project managed by Gradle.\n\n\n# Configurations for the application plugin\n\nThe auto-generated build.gradle(.kts) file has a section which configures the application plugin thanks to which the application runs with the gradle run command as mentioned above.\n\napplication {\n    // Defines the main class for the application\n    mainClassName = "org.hyperskill.gradleapp.App"\n}\n\n\n1\n2\n3\n4\n\n\nThe mainClassName property defines a class with the entry point of the application. It allows us to run the application invoking the gradle run command.\n\n\n# Generating and running Jar archive\n\nThe classic way to run a JVM-based application is to use the java -jar command. This command can be run without Gradle, you only need to have a JAR beforehand.\n\nSo let\'s build the JAR file for our application:\n\ngradle jar\n\nBUILD SUCCESSFUL in 748ms\n2 actionable tasks: 2 executed\n\n\n1\n2\n3\n4\n\n\nNow, the JAR file is in the app/build/libs directory.\n\n提示\n\nIf you want to clean the project folder from all generated artifacts, just run the gradle clean command.\n\nHowever, if you now try to run our generated application using the classic approach, there will be a problem:\n\njava -jar app/build/libs/app.jar\nno main manifest attribute, in app/build/libs/app.jar\n\n\n1\n2\n\n\nThe thing is that the application does not contain the Main-Class attribute in the MANIFEST.MF file. So, the JVM does not know the path to the entry point of the application.\n\nTo fix this we need to add the required attribute when generating an archive for the application. Just add the following declaration to the build.gradle(.kts) file:\n\njar {\n    manifest {\n        attributes("Main-Class": "org.hyperskill.gradleapp.App")   // for Groovy DSL\n        attributes("Main-Class" to "org.hyperskill.gradleapp.App") // for Kotlin DSL\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\nThis code adds the Main-Class attribute to the manifest property of the jar task. See the manifest as a map of properties where we put our pair Main-Class -> Main.\n\nSo, now when we execute gradle jar followed by java -jar app/build/libs/gradleapp.jar, everything should work as planned and you will see the output line Hello world!. What is good about this way of running applications is that java -jar command can be run without Gradle, you only need to have a JAR beforehand.\n\n\n# Building the application\n\nIf you would like to generate a bundle of the application with all its dependencies and a script to start the application, use the gradle build command.\n\nBUILD SUCCESSFUL in 1s\n7 actionable tasks: 7 executed\n\n\n1\n2\n\n\nIf everything is OK, Gradle will have produced the archive in two formats for you: app/build/distributions/app.tar and app/build/distributions/app.zip. Now, you can distribute your application!\n\n\n# Conclusion\n\nIn this topic, you\'ve learned how to generate Gradle-based applications with source code in Java or Kotlin as well as how to run this application using both gradle run and java -jar commands. You have also become familiar with the basic structure of the build.gradle(.kts) file and got initial information about plugins, repositories, and dependencies. You will learn more about these things further on.',normalizedContent:'we hope you already got a basic understanding of what gradle is and how to use it. in this topic, we will consider the basic structure of the build.gradle file, and then build and run a small application. the knowledge you obtain here can be used for any jvm-based programming language supported by gradle (e.g. java or kotlin).\n\n注意\n\nthis article was written using gradle 6.8.1. there may be some differences for other versions of gradle. if you have troubles with this article, you can read the comments or just follow official gradle doc instead of this.\n\n\n# initializing an application\n\nwe assume that you already have some experience with the terminal of your operating system and will interact with gradle using it. first of all, create a new empty folder named what you want (e.g., demo). in this folder, you need to invoke the gradle init command to start initialising a new gradle-based project. this command will show you a dialogue form to set up the project you need.\n\nin this form, choose application as the type of the project; java or kotlin as the implementation language; and org.hyperskill.gradleapp as the project name if you would like to precisely follow our example (but it isn\'t required). for all other questions, you can choose their default options, since it doesn\'t matter now.\n\nbelow is an example of choosing options.\n\nselect type of project to generate:\n  1: basic\n  2: application\n  3: library\n  4: gradle plugin\nenter selection (default: basic) [1..4] 2\n\nselect implementation language:\n  1: c++\n  2: groovy\n  3: java\n  4: kotlin\n  5: scala\n  6: swift\nenter selection (default: java) [1..6] 3\n\nsplit functionality across multiple subprojects?:\n  1: no - only one application project\n  2: yes - application and library projects\nenter selection (default: no - only one application project) [1..2] \n\nselect build script dsl:\n  1: groovy\n  2: kotlin\nenter selection (default: groovy) [1..2] \n\nselect test framework:\n  1: junit 4\n  2: testng\n  3: spock\n  4: junit jupiter\nenter selection (default: junit 4) [1..4]  \n\nproject name (default: demo): org.hyperskill.gradleapp\nsource package (default: org.hyperskill.gradleapp): \n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n\n\nafter the initialisation is completed, the project structure will be the following:\n\n.\n├── app\n│   ├── build.gradle\n│   └── src\n│       ├── main\n│       │   ├── java\n│       │   │   └── org\n│       │   │       └── hyperskill\n│       │   │           └── gradleapp\n│       │   │               └── app.java\n│       │   └── resources\n│       └── test\n│           ├── java\n│           │   └── org\n│           │       └── hyperskill\n│           │           └── gradleapp\n│           │               └── apptest.java\n│           └── resources\n├── gradle\n│   └── wrapper\n│       ├── gradle-wrapper.jar\n│       └── gradle-wrapper.properties\n├── gradlew\n├── gradlew.bat\n└── settings.gradle\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\nthis structure includes a lot of files we have already considered (settings.gradle, wrapper files, etc). the most important file called build.gradle, which contains tasks and external libraries, is located within the app directory. this folder exists because we\'ve chosen application as the type of the project and the folder represents our application.\n\nthere is also the src directory inside app. it contains two sub-directories main and test. this is a quite standard project structure when using gradle. in our case, the package org.hyperskill.gradleapp has some java source code (app.java).\n\nif you chose kotlin as the implementation language, the project structure will be the same except for kotlin source code files (.kt instead of .java) and kotlin folders instead of java ones.\n\n提示\n\nplease note, it is a good practice for java and kotlin projects to include the name of your organization in the path to your source code files as a package name like org.hyperskill. we follow this recommendation too.\n\n\n# running the application\n\nif you look at the list of available tasks for managing the project using the command gradle tasks --all, you will see that the list is fairly long. here is a shortened version of it:\n\napplication tasks\n-----------------\nrun - runs this project as a jvm application\n\nbuild tasks\n-----------\nassemble - assembles the outputs of this project.\nbuild - assembles and tests this project.\n...\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nthere is the command run which can start the application. to do it, just invoke the gradle run command or use a gradle wrapper script for your os. this command will build and run the application. here is an output example:\n\n> task :app:run\nhello world!\n\nbuild successful in 623ms\n2 actionable tasks: 1 executed, 1 up-to-date\n\n\n1\n2\n3\n4\n5\n\n\nas you can see, the autogenerated application can already display a welcome string. if you get a similar result, it means that everything is ok: your application works and gradle can manage it!\n\nif you look at the project structure again, you will see that it has some new files, including files with bytecode (app.class, apptest.class). actually, gradle built and started the app.class file when we invoked the run command.\n\nnow, let\'s consider the build file (build.gradle for groovy dsl or build.gradle.kts for kotlin dsl) thanks to which we can build our application successfully and run it using gradle. this file specifies project structure and adds some tasks and external libraries to the project. we will not present the entire file here, only its main parts.\n\n\n# plugins\n\nthe plugins section adds some plugins to extend the capabilities of the project: e.g., to add new tasks or properties.\n\nplugins {\n    // apply the application plugin to add support for building a cli application\n    id("application")\n\n    // apply the plugin which adds support for java\n    id("java")\n\n    // apply the plugin which adds support for kotlin/jvm\n    id("org.jetbrains.kotlin.jvm")\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nhere, id is a globally unique identifier, or name, for plugins. core gradle plugins are special in that they provide short names, such as "java" or "application".\n\nbasically, plugins for kotlin and java know how to build, package, and run tests on the project. the application plugin facilitates creating an executable jvm application.\n\nthere is an alternative way to use a plugin in the project. it\'s more like a legacy way of applying plugins which is not widely used now, but just in case you see it somewhere, here it is:\n\napply plugin: "application"   // for groovy dsl\napply(plugin = "application") // for kotlin dsl\n\n\n1\n2\n\n\nthere are many other plugins already available for you, and you can find them at the official gradle plugins page. a large project can use dozens and hundreds of them. gradle does not limit the maximum number of plugins used in a project.\n\n\n# repositories and dependencies\n\nusually you don\'t need to write your program from scratch – you use already written pieces of code, either yours or other developers\'. this is where the dependency system comes in handy.\n\nthe repositories section declares locations from which dependencies will be downloaded and added to the project.\n\nrepositories {\n    jcenter()\n}\n\n\n1\n2\n3\n\n\nthere are plenty of public repositories: jcenter, maven central, google and others. usually, a description of a dependency says which repository contains it.\n\nthe dependencies section is used to add external libraries to the project. gradle will automatically download them from the repositories and put in the archive with the application. right now your dependencies section should contain at least a testing library like junit or something else, depending on your choice when the project was initialized.\n\ndependencies {\n    // use junit test framework.\n    testimplementation \'junit:junit:4.13\'\n\n    // this dependency is used by the application.\n    implementation \'com.google.guava:guava:29.0-jre\'\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nwe will take a closer look at repositories and dependencies in the next topics.\n\n提示\n\nthis is a standard gradle build structure. you apply some plugins and specify dependencies for your project. this structure will be the same for any project managed by gradle.\n\n\n# configurations for the application plugin\n\nthe auto-generated build.gradle(.kts) file has a section which configures the application plugin thanks to which the application runs with the gradle run command as mentioned above.\n\napplication {\n    // defines the main class for the application\n    mainclassname = "org.hyperskill.gradleapp.app"\n}\n\n\n1\n2\n3\n4\n\n\nthe mainclassname property defines a class with the entry point of the application. it allows us to run the application invoking the gradle run command.\n\n\n# generating and running jar archive\n\nthe classic way to run a jvm-based application is to use the java -jar command. this command can be run without gradle, you only need to have a jar beforehand.\n\nso let\'s build the jar file for our application:\n\ngradle jar\n\nbuild successful in 748ms\n2 actionable tasks: 2 executed\n\n\n1\n2\n3\n4\n\n\nnow, the jar file is in the app/build/libs directory.\n\n提示\n\nif you want to clean the project folder from all generated artifacts, just run the gradle clean command.\n\nhowever, if you now try to run our generated application using the classic approach, there will be a problem:\n\njava -jar app/build/libs/app.jar\nno main manifest attribute, in app/build/libs/app.jar\n\n\n1\n2\n\n\nthe thing is that the application does not contain the main-class attribute in the manifest.mf file. so, the jvm does not know the path to the entry point of the application.\n\nto fix this we need to add the required attribute when generating an archive for the application. just add the following declaration to the build.gradle(.kts) file:\n\njar {\n    manifest {\n        attributes("main-class": "org.hyperskill.gradleapp.app")   // for groovy dsl\n        attributes("main-class" to "org.hyperskill.gradleapp.app") // for kotlin dsl\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\nthis code adds the main-class attribute to the manifest property of the jar task. see the manifest as a map of properties where we put our pair main-class -> main.\n\nso, now when we execute gradle jar followed by java -jar app/build/libs/gradleapp.jar, everything should work as planned and you will see the output line hello world!. what is good about this way of running applications is that java -jar command can be run without gradle, you only need to have a jar beforehand.\n\n\n# building the application\n\nif you would like to generate a bundle of the application with all its dependencies and a script to start the application, use the gradle build command.\n\nbuild successful in 1s\n7 actionable tasks: 7 executed\n\n\n1\n2\n\n\nif everything is ok, gradle will have produced the archive in two formats for you: app/build/distributions/app.tar and app/build/distributions/app.zip. now, you can distribute your application!\n\n\n# conclusion\n\nin this topic, you\'ve learned how to generate gradle-based applications with source code in java or kotlin as well as how to run this application using both gradle run and java -jar commands. you have also become familiar with the basic structure of the build.gradle(.kts) file and got initial information about plugins, repositories, and dependencies. you will learn more about these things further on.',charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：Dependency management",frontmatter:{title:"Theory：Dependency management",date:"2022-07-03T20:00:27.000Z",permalink:"/pages/640a2b/",tags:["Gradle","Build tools","Tool Guide"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/04.%E6%89%A9%E5%B1%95/57.Theory%EF%BC%9ADependency%20management.html",relativePath:"01.Java/01.Hyperskill - Java/04.扩展/57.Theory：Dependency management.md",key:"v-4d30c4ec",path:"/pages/640a2b/",headers:[{level:2,title:"How to add dependencies?",slug:"how-to-add-dependencies",normalizedTitle:"how to add dependencies?",charIndex:491},{level:2,title:"Repository definition",slug:"repository-definition",normalizedTitle:"repository definition",charIndex:1465},{level:2,title:"Dependencies definition",slug:"dependencies-definition",normalizedTitle:"dependencies definition",charIndex:3e3},{level:2,title:"Colorful world",slug:"colorful-world",normalizedTitle:"colorful world",charIndex:7317},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:8608}],headersStr:"How to add dependencies? Repository definition Dependencies definition Colorful world Conclusion",content:"Small programs that you write when learning a language may not use any external libraries at all. When you need some functionality, you will find it in the standard library or create it yourself. However, it is quite difficult to develop a real application that doesn't use any libraries because they save tons of your time and provide solutions tested by millions of people around the world.\n\nIn this topic, we will learn how to add external libraries to our applications using Gradle.\n\n\n# How to add dependencies?\n\nIn Gradle terminology, all external libraries are called dependencies. As a rule, they are packaged in JAR files. Gradle can automatically download them and add them to the project. It saves a lot of time and solves possible conflicts between versions of libraries.\n\nWhere do we get these dependencies and how do we add them to a project? To use a class, you need to have it locally, and your JVM must know that you have it. If you want to do it manually, you need to find and download such jars on your own and add them to the classpath of your project. Sounds quite tedious, right?\n\nFortunately, dependency management is one of the key features of Gradle. You don’t even need a plugin for it. To add an external library to a project, you need to do exactly two steps:\n\n 1. Define a repository where to search for dependencies.\n 2. Define a dependency that you want to include in your project.\n\nNow, let's consider these steps in more detail.\n\n\n# Repository definition\n\nRepositories are just places where libraries are stored. Any project can use zero or more repositories.\n\nThere are different possible formats of repositories:\n\n * a Maven compatible repository (e.g.: Maven Central, JCenter, Google)\n * an Ivy compatible repository;\n * local (flat) directories.\n\nIt's possible to host repositories like Maven or JCenter locally in your organization, but that is out of the scope of this tutorial. We will only consider public online versions of them.\n\nGradle has four aliases that you can use when adding Maven compatible repositories to the project.\n\n * mavenCentral(): fetches dependencies from the Maven Central Repository.\n * jcenter(): fetches dependencies from the Bintray’s JCenter Maven repository.\n * mavenLocal(): fetches dependencies from the local Maven repository.\n * google(): fetches dependencies from Google Maven repository.\n\nDefining a repository in Gradle is a piece of cake. Just add this to your build.gradle file:\n\nrepositories {\n    mavenCentral()\n    jcenter()\n}\n\n\n1\n2\n3\n4\n\n\nAlso, you can just download the jars you need and place them into some directory on your computer, commonly in the libs folder of your project. This comes in handy when the jars you need are not available in public repositories.\n\nrepositories {\n    flatDir {\n        dirs 'lib'\n    }\n}\n\n\n1\n2\n3\n4\n5\n\n\nThe following picture demonstrates how to add dependencies from different repositories using Gradle.\n\n\n\nNow let's find out how to download dependencies from these repositories.\n\n\n# Dependencies definition\n\nTo add a new dependency to your project, first, you need to identify it by the following attributes: group, name and version. All these attributes are required when you use Maven compatible repositories. If you use other repositories, some attributes might be optional. For example, a flat repository only needs a name and a version.\n\nThere are several ways to find these attributes. Some library maintainers are nice enough to list them on their website or git repository. Also, you can just search for them in your preferred repository.\n\n\n\nMaven Central search example\n\nAll the dependencies are grouped into a named set of dependencies called configurations. Each of them has different characteristics and determines the following points:\n\n * the availability of dependencies on building steps;\n * the need to include dependencies in the final build artifact;\n * the visibility of dependencies for programmers who use your project as a library.\n\nThe 'java' and 'kotlin' plugins add a number of these configurations to your project. There are four of them:\n\n * implementation configuration means that the dependency is available at compile-time and it can't be exposed to people who use your compiled code as an external library in their own projects. This configuration is considered the default one.\n * compileOnly configuration is used to define dependencies that should only be available at compile-time, but you do not need them at runtime.\n * runtimeOnly is used to define dependencies that you need only during runtime, and not at compile time.\n * api configuration is similar to implementation, but will be exposed to the programmers who use your compiled code as a library in their projects.\n\nIn an existing project, you may see compile and runtime configurations as well, but they are deprecated now. Consider using implementation and runtimeOnly instead.\n\nThere also exist the same configurations only with the test prefix (e.g. testImplementation). Since tests are compiled and run separately and are not included in the final JAR (as well as their dependencies), they have their own set of dependencies. It helps decrease the size of a JAR, which is especially useful in Android development.\n\nPlease, note, that at this moment, you do not need to understand everything about configurations. Usually, the type of dependency configuration is already specified when you copy dependency info from an online repository or a website. If you would like to read more about configurations, see the official Gradle docs.\n\nWhen we decided on what dependencies we want and settled on their configurations, we are ready to add them to our build.gradle, which is as simple as adding repositories.\n\ndependencies {\n    // This dependency is used by the application.\n    implementation group: 'com.google.guava', name: 'guava', version: '28.0-jre'\n\n    // Use JUnit test framework only for testing\n    testImplementation 'junit:junit:4.12'\n\n    // It is only needed to compile the application\n    compileOnly 'org.projectlombok:lombok:1.18.4'\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nHere, we add these three dependencies as an example:\n\n * Guava library, provides useful collections and utils for a project;\n * JUnit, used for testing purposes;\n * Lombok, modifies bytecode at compile time and isn't necessary anymore after compilation.\n\nAs you may have noticed, there are two ways of declaring dependencies: the one where we explicitly declare group, name, and version, and the one where we just list them separated by the colon. Both are perfectly fine and are up to your preferences. Note that Groovy syntax is flexible and you can use either single or double quotes for the dependency string and optionally enclose it in parentheses. All the following declarations are equally valid:\n\n// 1\nimplementation(\"com.google.guava:guava:28.0-jre\")\n\n// 2\nimplementation \"com.google.guava:guava:28.0-jre\"\n\n// 3\nimplementation 'com.google.guava:guava:28.0-jre'\n\n// 4\ndef guava_version = \"28.0-jre\"\nimplementation \"com.google.guava:guava:$guava_version\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nAfter adding dependencies in the build.gradle file, you can use the libraries in your source code, but do not forget to import them. Gradle will automatically download the libraries from repositories when building the project.\n\n\n# Colorful world\n\nAs an example of using external libraries, we take a look at a program that prints colored text messages.\n\n 1. In the dependencies section of the build.gradle file we need to include JCDP library:\n\nimplementation group: 'com.diogonunes', name: 'JCDP', version: '2.0.3.1'\n\n\n1\n\n\n\\2. And then import and use it inside the source code. Here are Java and Kotlin examples.\n\nJava:\n\npackage org.hyperskill.gradleapp;\n\nimport com.diogonunes.jcdp.color.ColoredPrinter;\nimport com.diogonunes.jcdp.color.api.Ansi;\n\npublic class App {\n    public static void main(String[] args) {\n        ColoredPrinter printer = new ColoredPrinter\n                .Builder(1, false).build();\n\n        printer.print(\"Hello, colorful world!\",\n                Ansi.Attribute.BOLD, Ansi.FColor.BLUE, Ansi.BColor.WHITE);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\nKotlin:\n\npackage com.hyperskill.gradleapp\n\nimport com.diogonunes.jcdp.color.ColoredPrinter\nimport com.diogonunes.jcdp.color.api.Ansi\n\nfun main(args: Array<String>) {\n    val printer = ColoredPrinter.Builder(1, false).build()\n\n    printer.print(\"Hello, colorful world!\",\n            Ansi.Attribute.BOLD, Ansi.FColor.BLUE, Ansi.BColor.WHITE)\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\nBoth programs print the same colored message: Hello, colorful world!\n\n\n# Conclusion\n\nYou've learned only the basics of dependency management, but this is enough to write programs with external libraries. As you may have noticed, Gradle is a very flexible tool for managing dependencies. It allows you to choose repositories where to download them and also to configure when to use dependencies: during compile-time, during runtime, or when testing, and so on. As an example, we examined a program that prints colored messages using an external library.",normalizedContent:"small programs that you write when learning a language may not use any external libraries at all. when you need some functionality, you will find it in the standard library or create it yourself. however, it is quite difficult to develop a real application that doesn't use any libraries because they save tons of your time and provide solutions tested by millions of people around the world.\n\nin this topic, we will learn how to add external libraries to our applications using gradle.\n\n\n# how to add dependencies?\n\nin gradle terminology, all external libraries are called dependencies. as a rule, they are packaged in jar files. gradle can automatically download them and add them to the project. it saves a lot of time and solves possible conflicts between versions of libraries.\n\nwhere do we get these dependencies and how do we add them to a project? to use a class, you need to have it locally, and your jvm must know that you have it. if you want to do it manually, you need to find and download such jars on your own and add them to the classpath of your project. sounds quite tedious, right?\n\nfortunately, dependency management is one of the key features of gradle. you don’t even need a plugin for it. to add an external library to a project, you need to do exactly two steps:\n\n 1. define a repository where to search for dependencies.\n 2. define a dependency that you want to include in your project.\n\nnow, let's consider these steps in more detail.\n\n\n# repository definition\n\nrepositories are just places where libraries are stored. any project can use zero or more repositories.\n\nthere are different possible formats of repositories:\n\n * a maven compatible repository (e.g.: maven central, jcenter, google)\n * an ivy compatible repository;\n * local (flat) directories.\n\nit's possible to host repositories like maven or jcenter locally in your organization, but that is out of the scope of this tutorial. we will only consider public online versions of them.\n\ngradle has four aliases that you can use when adding maven compatible repositories to the project.\n\n * mavencentral(): fetches dependencies from the maven central repository.\n * jcenter(): fetches dependencies from the bintray’s jcenter maven repository.\n * mavenlocal(): fetches dependencies from the local maven repository.\n * google(): fetches dependencies from google maven repository.\n\ndefining a repository in gradle is a piece of cake. just add this to your build.gradle file:\n\nrepositories {\n    mavencentral()\n    jcenter()\n}\n\n\n1\n2\n3\n4\n\n\nalso, you can just download the jars you need and place them into some directory on your computer, commonly in the libs folder of your project. this comes in handy when the jars you need are not available in public repositories.\n\nrepositories {\n    flatdir {\n        dirs 'lib'\n    }\n}\n\n\n1\n2\n3\n4\n5\n\n\nthe following picture demonstrates how to add dependencies from different repositories using gradle.\n\n\n\nnow let's find out how to download dependencies from these repositories.\n\n\n# dependencies definition\n\nto add a new dependency to your project, first, you need to identify it by the following attributes: group, name and version. all these attributes are required when you use maven compatible repositories. if you use other repositories, some attributes might be optional. for example, a flat repository only needs a name and a version.\n\nthere are several ways to find these attributes. some library maintainers are nice enough to list them on their website or git repository. also, you can just search for them in your preferred repository.\n\n\n\nmaven central search example\n\nall the dependencies are grouped into a named set of dependencies called configurations. each of them has different characteristics and determines the following points:\n\n * the availability of dependencies on building steps;\n * the need to include dependencies in the final build artifact;\n * the visibility of dependencies for programmers who use your project as a library.\n\nthe 'java' and 'kotlin' plugins add a number of these configurations to your project. there are four of them:\n\n * implementation configuration means that the dependency is available at compile-time and it can't be exposed to people who use your compiled code as an external library in their own projects. this configuration is considered the default one.\n * compileonly configuration is used to define dependencies that should only be available at compile-time, but you do not need them at runtime.\n * runtimeonly is used to define dependencies that you need only during runtime, and not at compile time.\n * api configuration is similar to implementation, but will be exposed to the programmers who use your compiled code as a library in their projects.\n\nin an existing project, you may see compile and runtime configurations as well, but they are deprecated now. consider using implementation and runtimeonly instead.\n\nthere also exist the same configurations only with the test prefix (e.g. testimplementation). since tests are compiled and run separately and are not included in the final jar (as well as their dependencies), they have their own set of dependencies. it helps decrease the size of a jar, which is especially useful in android development.\n\nplease, note, that at this moment, you do not need to understand everything about configurations. usually, the type of dependency configuration is already specified when you copy dependency info from an online repository or a website. if you would like to read more about configurations, see the official gradle docs.\n\nwhen we decided on what dependencies we want and settled on their configurations, we are ready to add them to our build.gradle, which is as simple as adding repositories.\n\ndependencies {\n    // this dependency is used by the application.\n    implementation group: 'com.google.guava', name: 'guava', version: '28.0-jre'\n\n    // use junit test framework only for testing\n    testimplementation 'junit:junit:4.12'\n\n    // it is only needed to compile the application\n    compileonly 'org.projectlombok:lombok:1.18.4'\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nhere, we add these three dependencies as an example:\n\n * guava library, provides useful collections and utils for a project;\n * junit, used for testing purposes;\n * lombok, modifies bytecode at compile time and isn't necessary anymore after compilation.\n\nas you may have noticed, there are two ways of declaring dependencies: the one where we explicitly declare group, name, and version, and the one where we just list them separated by the colon. both are perfectly fine and are up to your preferences. note that groovy syntax is flexible and you can use either single or double quotes for the dependency string and optionally enclose it in parentheses. all the following declarations are equally valid:\n\n// 1\nimplementation(\"com.google.guava:guava:28.0-jre\")\n\n// 2\nimplementation \"com.google.guava:guava:28.0-jre\"\n\n// 3\nimplementation 'com.google.guava:guava:28.0-jre'\n\n// 4\ndef guava_version = \"28.0-jre\"\nimplementation \"com.google.guava:guava:$guava_version\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nafter adding dependencies in the build.gradle file, you can use the libraries in your source code, but do not forget to import them. gradle will automatically download the libraries from repositories when building the project.\n\n\n# colorful world\n\nas an example of using external libraries, we take a look at a program that prints colored text messages.\n\n 1. in the dependencies section of the build.gradle file we need to include jcdp library:\n\nimplementation group: 'com.diogonunes', name: 'jcdp', version: '2.0.3.1'\n\n\n1\n\n\n\\2. and then import and use it inside the source code. here are java and kotlin examples.\n\njava:\n\npackage org.hyperskill.gradleapp;\n\nimport com.diogonunes.jcdp.color.coloredprinter;\nimport com.diogonunes.jcdp.color.api.ansi;\n\npublic class app {\n    public static void main(string[] args) {\n        coloredprinter printer = new coloredprinter\n                .builder(1, false).build();\n\n        printer.print(\"hello, colorful world!\",\n                ansi.attribute.bold, ansi.fcolor.blue, ansi.bcolor.white);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\nkotlin:\n\npackage com.hyperskill.gradleapp\n\nimport com.diogonunes.jcdp.color.coloredprinter\nimport com.diogonunes.jcdp.color.api.ansi\n\nfun main(args: array<string>) {\n    val printer = coloredprinter.builder(1, false).build()\n\n    printer.print(\"hello, colorful world!\",\n            ansi.attribute.bold, ansi.fcolor.blue, ansi.bcolor.white)\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\nboth programs print the same colored message: hello, colorful world!\n\n\n# conclusion\n\nyou've learned only the basics of dependency management, but this is enough to write programs with external libraries. as you may have noticed, gradle is a very flexible tool for managing dependencies. it allows you to choose repositories where to download them and also to configure when to use dependencies: during compile-time, during runtime, or when testing, and so on. as an example, we examined a program that prints colored messages using an external library.",charsets:{},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：Formatted output",frontmatter:{title:"Theory：Formatted output",date:"2022-07-09T16:22:34.000Z",permalink:"/pages/0ae67e/",tags:["Java","String","Code style"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/04.%E6%89%A9%E5%B1%95/62.Theory%EF%BC%9AFormatted%20output.html",relativePath:"01.Java/01.Hyperskill - Java/04.扩展/62.Theory：Formatted output.md",key:"v-6b8ab12c",path:"/pages/0ae67e/",headers:[{level:2,title:"Introduction",slug:"introduction",normalizedTitle:"introduction",charIndex:2},{level:2,title:"Introducing the printf() method",slug:"introducing-the-printf-method",normalizedTitle:"introducing the printf() method",charIndex:403},{level:2,title:"Different use cases of printf()",slug:"different-use-cases-of-printf",normalizedTitle:"different use cases of printf()",charIndex:1113},{level:2,title:"The String.format() Method",slug:"the-string-format-method",normalizedTitle:"the string.format() method",charIndex:3217},{level:2,title:"Summary",slug:"summary",normalizedTitle:"summary",charIndex:5545},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:6365}],headersStr:"Introduction Introducing the printf() method Different use cases of printf() The String.format() Method Summary Conclusion",content:'# Introduction\n\nYou are already familiar with the System.out.print() and System.out.println() methods to print output to the console. But when you need complex formatting of output, these two methods are not really helpful. There are two methods that you can use in such cases, namely, System.out.printf() and String.format(). Let\'s discuss them in detail and focus on string and number formatting.\n\n\n# Introducing the printf() method\n\nThe printf() method usually has two parts. First, you give the string you want to format as the first attribute. This string itself includes rules to format it via format specifiers. Some examples of format specifiers are %d, %s, etc. In the second part, you give the argument list that Java can use to format the string according to the format-specifiers.\n\nSee the following example to understand the different parts of the printf() function.\n\nSystem.out.printf("My Name is %s. I was born in %d", "Mike", 1998);\n\n\n1\n\n * The first part is "My Name is %s. I was born in %d", where %s and %d are the format specifiers.\n * The second part is the argument list: "Mike", 1998 .\n\n\n# Different use cases of printf()\n\nIt\'s time to know the different use cases of format-specifiers. It\'s quite easy to understand it with code samples. Let\'s try now.\n\nYou can display an integer with the %d format specifier.\n\npublic static void main(String[] args){\n    System.out.printf("Display a Number %d", 15000);\n}\n\n\n1\n2\n3\n\n\nJava will replace %d with 15000. The output of the above code is Display a Number 15000.\n\nIf you want several integers to be displayed in the output, use several %d specifiers.\n\npublic static void main(String[] args){\n    System.out.printf("The sum of %d and %d is %d", 15, 40, 55);\n}\n\n\n1\n2\n3\n\n\nJava will put each argument in place of %d, starting from left. The output of the above code is The sum of 15 and 40 is 55.\n\nIf you want to display a floating-point value, use the %f specifier.\n\npublic static void main(String[] args){\n    System.out.printf("Display a Number %f", 15.23);\n}\n\n\n1\n2\n3\n\n\nSimilar to the above cases, Java will put 15.23 in place of %f. The above code will produce the following output. Display a Number 15.230000 Although it\'s technically correct, it looks ugly. You don\'t want so many trailing zeros. You can set precision with the printf() method.\n\npublic static void main(String[] args){\n    System.out.printf("Display a Number %.2f", 15.23);\n}\n.2f` decides that the number of digits that should appear after the **decimal** place is two. The code given above will output `Display a Number 15.23\n\n\n1\n2\n3\n4\n\n\nSimilarly, you can display Characters and Strings with the printf() method. Take a look at the following code. If you want to print a character, use %c, and if you want to print a String, use %s.\n\npublic static void main(String[] args){\n    char abbr = \'H\';\n    String element = "Hydrogen";\n    System.out.printf("%c stands for %s", abbr, element);\n}\n\n\n1\n2\n3\n4\n5\n\n\nWhen this code runs, the value of the abbr variable will replace %c and the value of the element variable will replace %s. The output of the above code is H stands for Hydrogen. That\'s all about the printf() method. Let\'s move on to learn about the String.format() method.\n\n\n# The String.format() Method\n\nThe format() method in the String class works very much like the printf() method. The main difference here is that you return a string instead of printing it. Let\'s see several examples.\n\nThe following code formats an integer using it.\n\npublic static void main(String[] args){\n    int age = 22;\n    String str = String.format("My age is %d", age);\n    System.out.println(str);\n}\n\n\n1\n2\n3\n4\n5\n\n\nWhen you execute this code, Java will create a String called str by concatenating My age is with the value of the age variable. Then it will print the value of str. The output is:\n\nMy age is 22\n\n\n1\n\n\nSimilarly, you can format other data types as well. See the following code.\n\npublic static void main(String[] args){\n    int age = 22;\n    char initial = \'M\';\n    String surname = "Anderson";\n    double height = 1.72;\n\n    String details = String.format(\n            "My name is %c. %s.%nMy age is %d.%nMy height is %.2f.",\n            initial, surname, age, height);\n    System.out.println(details);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\nYou can see that we have used four data types in this example. Java will replace %c, %s, %d, %f with initial, surname, age, and height respectively. %n is the newline character that breaks the line every time it is used. The output of our code is:\n\nMy name is M. Anderson.\nMy age is 22.\nMy height is 1.72.\n\n\n1\n2\n3\n\n\nThe String class also has a newer and slightly simpler method formatted(Object... args) that you can use instead of the static String.format method. Both of them have the same method body, so they are completely interchangeable. Here\'s how it looks in the program:\n\npublic static void main(String[] args) {\n    int age = 22;\n    char initial = \'M\';\n    String surname = "Anderson";\n    double height = 1.72;\n\n    String details = "My name is %c. %s.%nMy age is %d.%nMy height is %.2f."\n            .formatted(initial, surname, age, height);\n\n    System.out.println(details);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\nThe result is exactly the same as with the String.format method:\n\nMy name is M. Anderson.\nMy age is 22.\nMy height is 1.72.\n\n\n1\n2\n3\n\n\nKeep in mind that formatted is an instance method whereas the String.format method is a static one. You don\'t need to focus on this difference right now; you will learn about instance and static methods in the future.\n\n\n# Summary\n\nLet\'s summarize what we\'ve learned in this topic.\n\nFORMAT-SPECIFIER   DATATYPE                 FORMAT PRINTING                                      FORMATTING A STRING\n%d                 int, short, byte, long   System.out.printf("Display an Integer %d",15000);    String.format("Display an Integer %d",15000)\n%c                 char                     System.out.printf("Display a Character %c",\'c\');     String.format("Display a Character %c",\'c\')\n%f                 double, float            System.out.printf("Display a Floating-point Number   String.format("Display a Floating-point Number %f",123.45)\n                                            %f",123.45);\n%s                 String                   System.out.printf("Display a String %s","String");   String.format("Display a String %s","String")\n\n\n# Conclusion\n\nWhen you are writing complex applications, combining strings and variables with a + sign is not recommended. The printf() and format() methods are specifically created for that. Both these methods work exactly the same way except that the printf()method prints the output, while the format() method returns a String. In this article, you have learned most of the uses of both functions. Enjoy it.',normalizedContent:'# introduction\n\nyou are already familiar with the system.out.print() and system.out.println() methods to print output to the console. but when you need complex formatting of output, these two methods are not really helpful. there are two methods that you can use in such cases, namely, system.out.printf() and string.format(). let\'s discuss them in detail and focus on string and number formatting.\n\n\n# introducing the printf() method\n\nthe printf() method usually has two parts. first, you give the string you want to format as the first attribute. this string itself includes rules to format it via format specifiers. some examples of format specifiers are %d, %s, etc. in the second part, you give the argument list that java can use to format the string according to the format-specifiers.\n\nsee the following example to understand the different parts of the printf() function.\n\nsystem.out.printf("my name is %s. i was born in %d", "mike", 1998);\n\n\n1\n\n * the first part is "my name is %s. i was born in %d", where %s and %d are the format specifiers.\n * the second part is the argument list: "mike", 1998 .\n\n\n# different use cases of printf()\n\nit\'s time to know the different use cases of format-specifiers. it\'s quite easy to understand it with code samples. let\'s try now.\n\nyou can display an integer with the %d format specifier.\n\npublic static void main(string[] args){\n    system.out.printf("display a number %d", 15000);\n}\n\n\n1\n2\n3\n\n\njava will replace %d with 15000. the output of the above code is display a number 15000.\n\nif you want several integers to be displayed in the output, use several %d specifiers.\n\npublic static void main(string[] args){\n    system.out.printf("the sum of %d and %d is %d", 15, 40, 55);\n}\n\n\n1\n2\n3\n\n\njava will put each argument in place of %d, starting from left. the output of the above code is the sum of 15 and 40 is 55.\n\nif you want to display a floating-point value, use the %f specifier.\n\npublic static void main(string[] args){\n    system.out.printf("display a number %f", 15.23);\n}\n\n\n1\n2\n3\n\n\nsimilar to the above cases, java will put 15.23 in place of %f. the above code will produce the following output. display a number 15.230000 although it\'s technically correct, it looks ugly. you don\'t want so many trailing zeros. you can set precision with the printf() method.\n\npublic static void main(string[] args){\n    system.out.printf("display a number %.2f", 15.23);\n}\n.2f` decides that the number of digits that should appear after the **decimal** place is two. the code given above will output `display a number 15.23\n\n\n1\n2\n3\n4\n\n\nsimilarly, you can display characters and strings with the printf() method. take a look at the following code. if you want to print a character, use %c, and if you want to print a string, use %s.\n\npublic static void main(string[] args){\n    char abbr = \'h\';\n    string element = "hydrogen";\n    system.out.printf("%c stands for %s", abbr, element);\n}\n\n\n1\n2\n3\n4\n5\n\n\nwhen this code runs, the value of the abbr variable will replace %c and the value of the element variable will replace %s. the output of the above code is h stands for hydrogen. that\'s all about the printf() method. let\'s move on to learn about the string.format() method.\n\n\n# the string.format() method\n\nthe format() method in the string class works very much like the printf() method. the main difference here is that you return a string instead of printing it. let\'s see several examples.\n\nthe following code formats an integer using it.\n\npublic static void main(string[] args){\n    int age = 22;\n    string str = string.format("my age is %d", age);\n    system.out.println(str);\n}\n\n\n1\n2\n3\n4\n5\n\n\nwhen you execute this code, java will create a string called str by concatenating my age is with the value of the age variable. then it will print the value of str. the output is:\n\nmy age is 22\n\n\n1\n\n\nsimilarly, you can format other data types as well. see the following code.\n\npublic static void main(string[] args){\n    int age = 22;\n    char initial = \'m\';\n    string surname = "anderson";\n    double height = 1.72;\n\n    string details = string.format(\n            "my name is %c. %s.%nmy age is %d.%nmy height is %.2f.",\n            initial, surname, age, height);\n    system.out.println(details);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\nyou can see that we have used four data types in this example. java will replace %c, %s, %d, %f with initial, surname, age, and height respectively. %n is the newline character that breaks the line every time it is used. the output of our code is:\n\nmy name is m. anderson.\nmy age is 22.\nmy height is 1.72.\n\n\n1\n2\n3\n\n\nthe string class also has a newer and slightly simpler method formatted(object... args) that you can use instead of the static string.format method. both of them have the same method body, so they are completely interchangeable. here\'s how it looks in the program:\n\npublic static void main(string[] args) {\n    int age = 22;\n    char initial = \'m\';\n    string surname = "anderson";\n    double height = 1.72;\n\n    string details = "my name is %c. %s.%nmy age is %d.%nmy height is %.2f."\n            .formatted(initial, surname, age, height);\n\n    system.out.println(details);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\nthe result is exactly the same as with the string.format method:\n\nmy name is m. anderson.\nmy age is 22.\nmy height is 1.72.\n\n\n1\n2\n3\n\n\nkeep in mind that formatted is an instance method whereas the string.format method is a static one. you don\'t need to focus on this difference right now; you will learn about instance and static methods in the future.\n\n\n# summary\n\nlet\'s summarize what we\'ve learned in this topic.\n\nformat-specifier   datatype                 format printing                                      formatting a string\n%d                 int, short, byte, long   system.out.printf("display an integer %d",15000);    string.format("display an integer %d",15000)\n%c                 char                     system.out.printf("display a character %c",\'c\');     string.format("display a character %c",\'c\')\n%f                 double, float            system.out.printf("display a floating-point number   string.format("display a floating-point number %f",123.45)\n                                            %f",123.45);\n%s                 string                   system.out.printf("display a string %s","string");   string.format("display a string %s","string")\n\n\n# conclusion\n\nwhen you are writing complex applications, combining strings and variables with a + sign is not recommended. the printf() and format() methods are specifically created for that. both these methods work exactly the same way except that the printf()method prints the output, while the format() method returns a string. in this article, you have learned most of the uses of both functions. enjoy it.',charsets:{},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：Libraries",frontmatter:{title:"Theory：Libraries",date:"2022-07-11T18:56:57.000Z",permalink:"/pages/9fd950/",tags:["Programming"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/04.%E6%89%A9%E5%B1%95/64.Theory%EF%BC%9ALibraries.html",relativePath:"01.Java/01.Hyperskill - Java/04.扩展/64.Theory：Libraries.md",key:"v-0c983905",path:"/pages/9fd950/",headers:[{level:2,title:"What is a library",slug:"what-is-a-library",normalizedTitle:"what is a library",charIndex:1043},{level:2,title:"Standard and third-party libraries",slug:"standard-and-third-party-libraries",normalizedTitle:"standard and third-party libraries",charIndex:2278},{level:2,title:"Why use libraries",slug:"why-use-libraries",normalizedTitle:"why use libraries",charIndex:3808},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:5204}],headersStr:"What is a library Standard and third-party libraries Why use libraries Conclusion",content:"If you are already familiar with at least one programming language, you know that any programming language has a human-readable design. Most of them use Latin-script symbols to represent functions, keywords, and operators. However, it's not the language that the machine can understand, that's why we use interpreters, compilers, and assemblers. So, to make the process of creating machine code easier, we need a high-level interface that allows us to operate with verbal commands, which would be transformed to 'zeros and ones' by the program itself.\n\n\n\nThe same idea can be applied when you want to reuse existing code that provides you with high-level functions and methods, rather than write it by yourself once more. We are there not to talk about tedious copy-paste but the usefulness of programming libraries.\n\n提示\n\nHigh-level means that each function you're calling orchestrates the low-level work for you. For example, some imaginary function WRITE_DATA under the hood opens a file, writes data to it, and finally closes the file.\n\n\n# What is a library\n\nA programming library is a collection of reusable and redistributable code that has a well-defined interface to use.\n\nA library provides you with high-level functions and methods. We can expect that a library has documentation to get familiar with the behavior of the inner implementation. You should treat a library as a black box: you have the documentation of its interface, but you don't need to know an implementation. Just like programming languages isolate you from working with machine code, libraries isolate you from working with low-level operations.\n\nSo, what do you think: can a big pile of incoherent functions be a library? Of course, but it's unlikely that someone will use it! Let's try to highlight the main features that we find important in terms of usability. A good library:\n\n * belongs to one domain of knowledge, for example reading and writing to files, nothing more\n * provides the documentation\n * has a clear interface, where the name of each object reflects its function\n * does not have malicious code in it\n * has tests\n * follows programming language's code style\n\n\n\nNow you know how to understand whether a library you've chosen is a well-written one. How exactly can we use it?\n\n\n# Standard and third-party libraries\n\nThere are several types of libraries, but where can you find them?\n\nProgramming language implementations are the usual software that you can install on your computer, and most implementations come with standard libraries. The standard library is a stable and standardized collection of modules for the essential needs of the development process. Usually, standard libraries consist of common utilities like working with the file system, making network connections, or parsing JSON files, and are a part of the programming language specification.\n\nThe standard library can hardly cover all your needs. For example, you may want to make a desktop application or a web crawler, but the standard library doesn't give you handy tools for that. In this case you can search through the internet to find a third-party library on sites like Github. A third-party library is a collection of high-level modules, apart from the standard library of a programming language. Those libraries are often opensource.\n\nTo include a library in your program, you should use a keyword and its name. If you use third-party tools, you should look through the documentation and find out how you can install it on your computer first; authors of a library provide this information in the README file.\n\nSo, now you could feel like you've learned all the basics about using libraries. Perhaps you still have a question though: is it more efficient than just writing code by yourself? The answer is: in many cases, yes.\n\n\n# Why use libraries\n\nLibraries are not a silver bullet for all programming problems. Not all libraries are mature enough to be used in code production, and some of them are buggy. If the problem is too narrow, it's hard to find a library to solve it even if it exists.\n\nLet's suppose that a library for your problem exists. We cannot cover all the cases, but we can give you several reasons to use it:\n\n * It reduces the time of developing an end product. We can focus on implementing the logic of the application, not on making auxiliary software.\n * The development of a library is community-driven. It means many people support a library, and you can join them if a library is opensource, if you want.\n * If a library is popular, many companies and programmers use it. It means that the library has been tested and utilized by different people, and a new developer in your team will likely know this library too.\n * Libraries have documentation. You can just read a tutorial and start using a library without learning about the inner implementation.\n\nThe main goal of libraries is to prevent people from doing the same work twice. You can follow this rule and make your software without getting distracted by any other issues.\n\n提示\n\nIf your code uses a library, you can always replace a library function with your own without breaking the program. You are in control of what you want to use.\n\n\n# Conclusion\n\nLet's summarize what we've learned so far. In essence, the library is a compilation of code with an understandable interface made for specific situations. Libraries can be standard and third-party. The use of third-party libraries instead of writing your own code can be reasonable in many cases simply because it saves time and effort. Moreover, popular libraries are usually well tested, and if they are open-source, you can even join the community of their supporters.",normalizedContent:"if you are already familiar with at least one programming language, you know that any programming language has a human-readable design. most of them use latin-script symbols to represent functions, keywords, and operators. however, it's not the language that the machine can understand, that's why we use interpreters, compilers, and assemblers. so, to make the process of creating machine code easier, we need a high-level interface that allows us to operate with verbal commands, which would be transformed to 'zeros and ones' by the program itself.\n\n\n\nthe same idea can be applied when you want to reuse existing code that provides you with high-level functions and methods, rather than write it by yourself once more. we are there not to talk about tedious copy-paste but the usefulness of programming libraries.\n\n提示\n\nhigh-level means that each function you're calling orchestrates the low-level work for you. for example, some imaginary function write_data under the hood opens a file, writes data to it, and finally closes the file.\n\n\n# what is a library\n\na programming library is a collection of reusable and redistributable code that has a well-defined interface to use.\n\na library provides you with high-level functions and methods. we can expect that a library has documentation to get familiar with the behavior of the inner implementation. you should treat a library as a black box: you have the documentation of its interface, but you don't need to know an implementation. just like programming languages isolate you from working with machine code, libraries isolate you from working with low-level operations.\n\nso, what do you think: can a big pile of incoherent functions be a library? of course, but it's unlikely that someone will use it! let's try to highlight the main features that we find important in terms of usability. a good library:\n\n * belongs to one domain of knowledge, for example reading and writing to files, nothing more\n * provides the documentation\n * has a clear interface, where the name of each object reflects its function\n * does not have malicious code in it\n * has tests\n * follows programming language's code style\n\n\n\nnow you know how to understand whether a library you've chosen is a well-written one. how exactly can we use it?\n\n\n# standard and third-party libraries\n\nthere are several types of libraries, but where can you find them?\n\nprogramming language implementations are the usual software that you can install on your computer, and most implementations come with standard libraries. the standard library is a stable and standardized collection of modules for the essential needs of the development process. usually, standard libraries consist of common utilities like working with the file system, making network connections, or parsing json files, and are a part of the programming language specification.\n\nthe standard library can hardly cover all your needs. for example, you may want to make a desktop application or a web crawler, but the standard library doesn't give you handy tools for that. in this case you can search through the internet to find a third-party library on sites like github. a third-party library is a collection of high-level modules, apart from the standard library of a programming language. those libraries are often opensource.\n\nto include a library in your program, you should use a keyword and its name. if you use third-party tools, you should look through the documentation and find out how you can install it on your computer first; authors of a library provide this information in the readme file.\n\nso, now you could feel like you've learned all the basics about using libraries. perhaps you still have a question though: is it more efficient than just writing code by yourself? the answer is: in many cases, yes.\n\n\n# why use libraries\n\nlibraries are not a silver bullet for all programming problems. not all libraries are mature enough to be used in code production, and some of them are buggy. if the problem is too narrow, it's hard to find a library to solve it even if it exists.\n\nlet's suppose that a library for your problem exists. we cannot cover all the cases, but we can give you several reasons to use it:\n\n * it reduces the time of developing an end product. we can focus on implementing the logic of the application, not on making auxiliary software.\n * the development of a library is community-driven. it means many people support a library, and you can join them if a library is opensource, if you want.\n * if a library is popular, many companies and programmers use it. it means that the library has been tested and utilized by different people, and a new developer in your team will likely know this library too.\n * libraries have documentation. you can just read a tutorial and start using a library without learning about the inner implementation.\n\nthe main goal of libraries is to prevent people from doing the same work twice. you can follow this rule and make your software without getting distracted by any other issues.\n\n提示\n\nif your code uses a library, you can always replace a library function with your own without breaking the program. you are in control of what you want to use.\n\n\n# conclusion\n\nlet's summarize what we've learned so far. in essence, the library is a compilation of code with an understandable interface made for specific situations. libraries can be standard and third-party. the use of third-party libraries instead of writing your own code can be reasonable in many cases simply because it saves time and effort. moreover, popular libraries are usually well tested, and if they are open-source, you can even join the community of their supporters.",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：Frameworks",frontmatter:{title:"Theory：Frameworks",date:"2022-07-11T19:03:48.000Z",permalink:"/pages/a63654/",tags:["Framework"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/04.%E6%89%A9%E5%B1%95/65.Theory%EF%BC%9AFrameworks.html",relativePath:"01.Java/01.Hyperskill - Java/04.扩展/65.Theory：Frameworks.md",key:"v-636f026f",path:"/pages/a63654/",headers:[{level:2,title:"What are frameworks?",slug:"what-are-frameworks",normalizedTitle:"what are frameworks?",charIndex:2},{level:2,title:"Frameworks vs libraries",slug:"frameworks-vs-libraries",normalizedTitle:"frameworks vs libraries",charIndex:1579},{level:2,title:"Inversion of Control",slug:"inversion-of-control",normalizedTitle:"inversion of control",charIndex:2349},{level:2,title:"Advantages and disadvantages",slug:"advantages-and-disadvantages",normalizedTitle:"advantages and disadvantages",charIndex:2948},{level:2,title:"How to choose frameworks",slug:"how-to-choose-frameworks",normalizedTitle:"how to choose frameworks",charIndex:4072},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:5331}],headersStr:"What are frameworks? Frameworks vs libraries Inversion of Control Advantages and disadvantages How to choose frameworks Conclusion",content:"# What are frameworks?\n\nAll programs are different just like snowflakes, yet it is similarities in code that we want to draw your attention to, or rather, how these similarities can be used to the developer's advantage. In programming, it is common practice to reuse code packed into libraries in order to simplify the development and avoid making the same errors over and over. Such libraries exist for most programming languages; they provide good documentation and well-tested code used by many people.\n\nLarge applications like Internet stores, online banks or social networks often need the same typical components and functionality such as user authorization, database interaction, sending notifications and so on. To reuse them, developers created a special kind of software called frameworks for all popular programming languages.\n\nA framework is a universal, reusable piece of software that facilitates the development of typical applications or their parts. It consists of structured code templates and provides generic functionality which can be easily extended for the needs of a specific application. To relinquish control on low-level tasks and focus on the high-level problems, you should use the API provided by the framework. It can significantly reduce total development time.\n\nSome frameworks are so large that they are in fact a union of different frameworks under a single name.\n\nFrameworks are extremely useful and relatively easy to grasp: for example, the very concept of a framework has some real-life analogies, which help to understand its meaning.\n\n\n# Frameworks vs libraries\n\nAt first glance, it might seem like frameworks and libraries are very similar, but it's not quite true.\n\nApplications that use frameworks are built on top of them and extend their code to get specific functionality. In a sense, a framework serves as the skeleton of an application or its parts and sets \"the rules of the game\". A library, on the other hand, only provides some specific operations without having such a global influence. This is the key difference between frameworks and libraries. However, libraries can be provided as parts of frameworks.\n\nOf course, there's no escape from evident similarities between frameworks and libraries. The programmer who uses a framework does not modify its source code, acting only as its user.\n\n\n# Inversion of Control\n\nThe most common principle that comes with frameworks is Inversion of Control (IoC).\n\nIn a framework, unlike in libraries or standard user applications, the overall program's flow of control is dictated not by the caller but by the framework. It means the framework calls your code, and not vice versa:\n\n\n\nThis happens because a framework provides templates for solving possible tasks and the interaction between the templates has been defined by developers of the framework. The user of a framework just takes the templates and extends them with application-specific code.\n\n\n# Advantages and disadvantages\n\nTime to weigh everything. To start on a positive note, the use of frameworks has a number of strong advantages:\n\n * Rapid prototyping and development;\n * Standardization of project structures: it is easier to understand similar projects with the same structure;\n * Wide use in companies around the world;\n * Bug fixes and security updates by the authors;\n * A well-designed skeleton: as a rule, frameworks use up-to-date practices and patterns to provide a firm skeleton for applications.\n\nDespite the advantages, there are a number of common drawbacks:\n\n * Selecting an unsuitable framework can make an application harder to implement;\n * Application slowdown: frameworks often do a lot of heavyweight things hidden from programmers;\n * It is difficult to replace a no longer suitable framework with another one while libraries can be easily replaced;\n * You may encounter a bug in the framework which may affect your work.\n\nThis might not be a complete list of advantages and disadvantages, but as you'll be getting more practice with using frameworks, you'll discover them for yourself.\n\n\n# How to choose frameworks\n\nAs a rule, each programming language has several frameworks to choose from. Of course, if you come to a company where some framework is already being used, there may be no choice for you. But if you do have a choice, try to take into account all possible benefits and problems when making a decision.\n\nHere is some general advice for choosing a suitable framework:\n\n * Pay attention to well-known frameworks with good documentation. This will greatly simplify the use and allow you to easily find developers already familiar with this framework. Some popular frameworks even become a de facto standard for developing specific types of applications. Such frameworks should be considered first.\n * If you write a small application that will most probably never change, you can develop it without frameworks. Moreover, for such an application they can introduce unnecessary additional complexity. But you may also consider the use of the so-called lightweight frameworks or choose a framework only for some part(s) of your application.\n\nThis is general information; as we said, programs are different, and so are the possible frameworks out there. The best part is getting to know specific frameworks and working with them closely.\n\n\n# Conclusion\n\nAs you see, a framework is simply a sort of carcass for the whole application or some of its parts. The developers build an application they need around this carcass. It is reflected by the universal principle of frameworks: 'the Inversion of control'. It means that the framework, not you, calls your code and libraries.\n\nAmong the significant benefits of using frameworks are, above all, fast development, and the standard and well-designed structure of an application. However, you should not forget about possible flaws such as bad choice of the framework for a specific task, a possible slowdown of an application, and potential problems replacing one framework with another in the future.\n\nWhen you are choosing a framework for a specific task we suggest you first take a look at the well-known ones with good documentation and for simple tasks – consider simpler, lightweight frameworks or no frameworks at all.",normalizedContent:"# what are frameworks?\n\nall programs are different just like snowflakes, yet it is similarities in code that we want to draw your attention to, or rather, how these similarities can be used to the developer's advantage. in programming, it is common practice to reuse code packed into libraries in order to simplify the development and avoid making the same errors over and over. such libraries exist for most programming languages; they provide good documentation and well-tested code used by many people.\n\nlarge applications like internet stores, online banks or social networks often need the same typical components and functionality such as user authorization, database interaction, sending notifications and so on. to reuse them, developers created a special kind of software called frameworks for all popular programming languages.\n\na framework is a universal, reusable piece of software that facilitates the development of typical applications or their parts. it consists of structured code templates and provides generic functionality which can be easily extended for the needs of a specific application. to relinquish control on low-level tasks and focus on the high-level problems, you should use the api provided by the framework. it can significantly reduce total development time.\n\nsome frameworks are so large that they are in fact a union of different frameworks under a single name.\n\nframeworks are extremely useful and relatively easy to grasp: for example, the very concept of a framework has some real-life analogies, which help to understand its meaning.\n\n\n# frameworks vs libraries\n\nat first glance, it might seem like frameworks and libraries are very similar, but it's not quite true.\n\napplications that use frameworks are built on top of them and extend their code to get specific functionality. in a sense, a framework serves as the skeleton of an application or its parts and sets \"the rules of the game\". a library, on the other hand, only provides some specific operations without having such a global influence. this is the key difference between frameworks and libraries. however, libraries can be provided as parts of frameworks.\n\nof course, there's no escape from evident similarities between frameworks and libraries. the programmer who uses a framework does not modify its source code, acting only as its user.\n\n\n# inversion of control\n\nthe most common principle that comes with frameworks is inversion of control (ioc).\n\nin a framework, unlike in libraries or standard user applications, the overall program's flow of control is dictated not by the caller but by the framework. it means the framework calls your code, and not vice versa:\n\n\n\nthis happens because a framework provides templates for solving possible tasks and the interaction between the templates has been defined by developers of the framework. the user of a framework just takes the templates and extends them with application-specific code.\n\n\n# advantages and disadvantages\n\ntime to weigh everything. to start on a positive note, the use of frameworks has a number of strong advantages:\n\n * rapid prototyping and development;\n * standardization of project structures: it is easier to understand similar projects with the same structure;\n * wide use in companies around the world;\n * bug fixes and security updates by the authors;\n * a well-designed skeleton: as a rule, frameworks use up-to-date practices and patterns to provide a firm skeleton for applications.\n\ndespite the advantages, there are a number of common drawbacks:\n\n * selecting an unsuitable framework can make an application harder to implement;\n * application slowdown: frameworks often do a lot of heavyweight things hidden from programmers;\n * it is difficult to replace a no longer suitable framework with another one while libraries can be easily replaced;\n * you may encounter a bug in the framework which may affect your work.\n\nthis might not be a complete list of advantages and disadvantages, but as you'll be getting more practice with using frameworks, you'll discover them for yourself.\n\n\n# how to choose frameworks\n\nas a rule, each programming language has several frameworks to choose from. of course, if you come to a company where some framework is already being used, there may be no choice for you. but if you do have a choice, try to take into account all possible benefits and problems when making a decision.\n\nhere is some general advice for choosing a suitable framework:\n\n * pay attention to well-known frameworks with good documentation. this will greatly simplify the use and allow you to easily find developers already familiar with this framework. some popular frameworks even become a de facto standard for developing specific types of applications. such frameworks should be considered first.\n * if you write a small application that will most probably never change, you can develop it without frameworks. moreover, for such an application they can introduce unnecessary additional complexity. but you may also consider the use of the so-called lightweight frameworks or choose a framework only for some part(s) of your application.\n\nthis is general information; as we said, programs are different, and so are the possible frameworks out there. the best part is getting to know specific frameworks and working with them closely.\n\n\n# conclusion\n\nas you see, a framework is simply a sort of carcass for the whole application or some of its parts. the developers build an application they need around this carcass. it is reflected by the universal principle of frameworks: 'the inversion of control'. it means that the framework, not you, calls your code and libraries.\n\namong the significant benefits of using frameworks are, above all, fast development, and the standard and well-designed structure of an application. however, you should not forget about possible flaws such as bad choice of the framework for a specific task, a possible slowdown of an application, and potential problems replacing one framework with another in the future.\n\nwhen you are choosing a framework for a specific task we suggest you first take a look at the well-known ones with good documentation and for simple tasks – consider simpler, lightweight frameworks or no frameworks at all.",charsets:{},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：Modules",frontmatter:{title:"Theory：Modules",date:"2022-07-17T11:30:19.000Z",permalink:"/pages/4a417a/",tags:["Java","Programming"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/04.%E6%89%A9%E5%B1%95/69.Theory%EF%BC%9AModules.html",relativePath:"01.Java/01.Hyperskill - Java/04.扩展/69.Theory：Modules.md",key:"v-e577561a",path:"/pages/4a417a/",headers:[{level:2,title:"Packages VS modules",slug:"packages-vs-modules",normalizedTitle:"packages vs modules",charIndex:709},{level:2,title:"Application size",slug:"application-size",normalizedTitle:"application size",charIndex:2e3},{level:2,title:"Encapsulation",slug:"encapsulation",normalizedTitle:"encapsulation",charIndex:2590},{level:2,title:"Dependency management",slug:"dependency-management",normalizedTitle:"dependency management",charIndex:4398},{level:2,title:"Modules in action",slug:"modules-in-action",normalizedTitle:"modules in action",charIndex:5911},{level:2,title:"Example program",slug:"example-program",normalizedTitle:"example program",charIndex:7647},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:9528}],headersStr:"Packages VS modules Application size Encapsulation Dependency management Modules in action Example program Conclusion",content:"Java 9 introduced Java modules to break large applications down into smaller, more manageable chunks. Unfortunately, when a codebase grows in size, some things are bound to happen. First, dependency management becomes very difficult if you try to do it manually. Also, the size of your application begins to balloon. These things can complicate the interaction between different parts of a large codebase. With no foolproof way of enforcing private access to classes, a developer working on a distant part of a large application might make a few changes to their code and inadvertently cause breaking changes in yours. The Java Platform Module System (JPMS) is Java 9's attempt at solving these problems.\n\n\n# Packages VS modules\n\nSince packages and modules have a lot in common, it can be difficult to see the difference between them at first. Think of it like this. Packages group related classes. Usually, they are just folders in your source directory. They were introduced to keep related classes together, but they also serve the additional purpose of distinguishing between classes with the same name. Prepending the package name to a class is a simple way to remove any ambiguity. Packages have existed in Java from the very beginning.\n\nTwo additional points to keep in mind about Java packages (we will see how they are relevant in the following sections):\n\n * Packages cannot be deployed by themselves. They contain the source code of an application, but the application still requires the JRE to run it.\n * Classes in a package can be accessed via reflection, even if the classes were declared private.\n\nAs for Java modules, it is helpful to think of them as large boxes that you put packages into. If the packages are similar or if they logically belong together because they contribute to one functionality, they can be bundled together into a Java module. In fact, starting from Java 9, the Java Platform API has been split into separate modules instead of one monolithic .jar file.\n\n\n# Application size\n\nBecause the Java Platform API is now broken down into modules, your application only needs to include the class files from the modules of the API you used. This has the lovely side effect of shrinking your compiled program file size, making it much easier to use Java programs on resource-limited computers (embedded systems, mobile devices, RaspberryPi, etc.).\n\nWhile it is beyond the scope of this topic, you can even package the JRE into your module so that it becomes an independent executable file that does not require the user to have installed Java to run it.\n\n\n# Encapsulation\n\nJava modules also introduce some new ways to choose which parts of the module have their class files visible to other developers and which parts are completely encapsulated as if they were a black box. As a result, it makes it possible to build programs as a collection of loosely coupled modules. This way the developers of one particular module in a large program have no choice but play nice with the developers of other modules, keeping their hands to themselves and only interacting with other modules at the API level.\n\nIt is generally easier for developers to update their codebase when they provide an interface for their program but keep the internals hidden. Users and other developers don't need to know how it is structured internally, that is, its implementation. They only need to understand how the outside interface that is visible to them works.\n\n提示\n\nLikewise, when developers provide an interface but restrict access to the implementation, it allows them to optimize, update, or even completely rewrite the implementation. As long as the interface still works as expected, any program using this module as a dependency will still work.\n\nAt this point, you may be thinking: couldn't we always do this in Java? How is this a new feature? Technically, yes, you could design an application to be used this way, but the issue was that developers couldn't enforce the encapsulation of the implementation. Other developers could always use reflection to access the internals, even if they were declared private. So Java modules changed the rules of the game by making it so that application developers don't need to trust other developers to use their interface but not mess with the internals. Instead, they can now lock away whichever parts of the implementation they choose.\n\n\n# Dependency management\n\nJava modules must contain a Module Descriptor file, which is titled module-info.java. While it contains some obvious data, like the module's name, the services it offers, and the services it consumes, it also specifies a few more targeted pieces of information. Oracle summarizes them as such:\n\n * the module’s dependencies (that is, other modules this module depends on);\n * the packages it explicitly makes available to other modules (all other packages in the module are implicitly unavailable to other modules);\n * to what other modules it allows reflection*.*\n\nIt makes sense that modules can depend on other modules, but now developers have to explicitly say which packages of their module are available to other modules. The best part is that developers can now also be selective about which other modules can access it via reflection.\n\nAs we mentioned in the introduction, more dependencies to keep track of increase the likelihood that someone will accidentally miss some of them, or that conflicts between dependency versions will arise. While it is true that developers often use build tools like Maven and Gradle to manage dependencies, up until the introduction of Java modules, there was nothing internal to Java that could help with this. For instance, JVM wouldn't detect a missing class file until the program actually tried to use it. However, beginning in Java 9, the JVM will check the dependency graph on startup and throw an error if any dependencies are missing.\n\n\n# Modules in action\n\nWe are going to create a basic module named myModuleName. The name of our module must be unique. This is why you often see both packages and modules prefixed with a company domain before their names. For example, if your module is named JsonUtil, there's a fair chance someone else in the world have used that name already or will try to do so in the future. But if you used com.myCompany.JsonUtil instead, you will likely be safe.\n\nWe begin with a java file titled *module-info.java*, which is placed in the module’s root source directory. In this file, the word module is followed by the name of our module and a pair of curly braces.\n\n\n\nAn empty module declaration with a generic company domain would look like this:\n\nmodule com.myCompany.myModuleName {\n\n}\n\n\n1\n2\n3\n\n\nWe can declare our module's dependencies inside this declaration using requires. If our module used JavaFX for its GUI, we would need to requires the appropriate JavaFX modules. In this example, we add the javafx.graphics module to our *module-info.java*. There are other modules in javafx, of course, but we will only take the one we need.\n\nmodule com.myCompany.myModuleName {\n    requires javafx.graphics;\n}\n\n\n1\n2\n3\n\n\nIf we want to make parts of our module available for other modules to use, we must explicitly do so using the exports keyword.\n\nmodule com.myCompany.myModuleName {\n    exports com.myCompany.myModuleName;\n}\n\n\n1\n2\n3\n\n\n注意\n\nOnly the specific packages mentioned will be made available. To access a package's child packages, you need to explicitly export those as well. For example, other modules now have access to the base package *com.myCompany.myModuleName*, but they do not have access to *com.myCompany.myModuleName.util*.\n\n\n# Example program\n\nSuppose you want to build a program composed of two modules. One module will be the main module and the other will be added as a dependency to it. You created a module of super utilities that could revolutionize the world, but you only want other modules to be able to use its baseUtilities package. The baseUtilities package should have access to the other classes to do its job, but no one else will have access to them. To make this happen, we need to export only the package we want to share.\n\nmodule com.myCompany.superUtilities {\n    exports com.myCompany.superUtilities.baseUtilities;\n}\n\n\n1\n2\n3\n\n\nThe baseUtilities package has a class called SuperOptimizer, which we want to use in our program.\n\npackage com.myCompany.superUtilities.baseUtilities;\n\npublic class SuperOptimizer {\n\n}\n\n\n1\n2\n3\n4\n5\n\n\nThe main module of our program is com.myCompany.WorldChanger. It can only change the world if it has access to the SuperUtilities module, therefore we will need to add it as a dependency. While we're at it, let's export our module so others can use it in their programs too.\n\nmodule com.myCompany.worldChanger {\n    requires com.myCompany.superUtilities;\n    exports com.myCompany.worldChanger;\n}\n \n\n\n1\n2\n3\n4\n5\n\n\n提示\n\nNote that while you must be as specific as possible when exporting packages from a module, you can import the module as a whole without specifying any packages. You will, of course, only get access to the packages that have been specifically mentioned in the exports statement of that module's module-info.java file.\n\nNow we can write our Java program.\n\npackage com.myCompany.worldChanger;\n\nimport com.myCompany.superUtilities.baseUtilities.SuperOptimizer;\n\npublic class WorldChangerImpl {\n\n    public static void main(String[] args) {\n\n        SuperOptimizer so = new SuperOptimizer();\n        // rest of code\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# Conclusion\n\nIn this topic, we learned how Java modules help us with dependency management by checking for all the dependencies at startup, rather than waiting until they are used during runtime. Java modules also help developers to have better control over who can access different parts of their code. This helps with privacy, but it also allows developers to make more substantive changes behind the scenes without worrying about breaking others' code. Since the JDK itself is made of modules, we can also shrink the size of our applications just by using the exact modules we need. Now, let's get our hands dirty with some practice!",normalizedContent:"java 9 introduced java modules to break large applications down into smaller, more manageable chunks. unfortunately, when a codebase grows in size, some things are bound to happen. first, dependency management becomes very difficult if you try to do it manually. also, the size of your application begins to balloon. these things can complicate the interaction between different parts of a large codebase. with no foolproof way of enforcing private access to classes, a developer working on a distant part of a large application might make a few changes to their code and inadvertently cause breaking changes in yours. the java platform module system (jpms) is java 9's attempt at solving these problems.\n\n\n# packages vs modules\n\nsince packages and modules have a lot in common, it can be difficult to see the difference between them at first. think of it like this. packages group related classes. usually, they are just folders in your source directory. they were introduced to keep related classes together, but they also serve the additional purpose of distinguishing between classes with the same name. prepending the package name to a class is a simple way to remove any ambiguity. packages have existed in java from the very beginning.\n\ntwo additional points to keep in mind about java packages (we will see how they are relevant in the following sections):\n\n * packages cannot be deployed by themselves. they contain the source code of an application, but the application still requires the jre to run it.\n * classes in a package can be accessed via reflection, even if the classes were declared private.\n\nas for java modules, it is helpful to think of them as large boxes that you put packages into. if the packages are similar or if they logically belong together because they contribute to one functionality, they can be bundled together into a java module. in fact, starting from java 9, the java platform api has been split into separate modules instead of one monolithic .jar file.\n\n\n# application size\n\nbecause the java platform api is now broken down into modules, your application only needs to include the class files from the modules of the api you used. this has the lovely side effect of shrinking your compiled program file size, making it much easier to use java programs on resource-limited computers (embedded systems, mobile devices, raspberrypi, etc.).\n\nwhile it is beyond the scope of this topic, you can even package the jre into your module so that it becomes an independent executable file that does not require the user to have installed java to run it.\n\n\n# encapsulation\n\njava modules also introduce some new ways to choose which parts of the module have their class files visible to other developers and which parts are completely encapsulated as if they were a black box. as a result, it makes it possible to build programs as a collection of loosely coupled modules. this way the developers of one particular module in a large program have no choice but play nice with the developers of other modules, keeping their hands to themselves and only interacting with other modules at the api level.\n\nit is generally easier for developers to update their codebase when they provide an interface for their program but keep the internals hidden. users and other developers don't need to know how it is structured internally, that is, its implementation. they only need to understand how the outside interface that is visible to them works.\n\n提示\n\nlikewise, when developers provide an interface but restrict access to the implementation, it allows them to optimize, update, or even completely rewrite the implementation. as long as the interface still works as expected, any program using this module as a dependency will still work.\n\nat this point, you may be thinking: couldn't we always do this in java? how is this a new feature? technically, yes, you could design an application to be used this way, but the issue was that developers couldn't enforce the encapsulation of the implementation. other developers could always use reflection to access the internals, even if they were declared private. so java modules changed the rules of the game by making it so that application developers don't need to trust other developers to use their interface but not mess with the internals. instead, they can now lock away whichever parts of the implementation they choose.\n\n\n# dependency management\n\njava modules must contain a module descriptor file, which is titled module-info.java. while it contains some obvious data, like the module's name, the services it offers, and the services it consumes, it also specifies a few more targeted pieces of information. oracle summarizes them as such:\n\n * the module’s dependencies (that is, other modules this module depends on);\n * the packages it explicitly makes available to other modules (all other packages in the module are implicitly unavailable to other modules);\n * to what other modules it allows reflection*.*\n\nit makes sense that modules can depend on other modules, but now developers have to explicitly say which packages of their module are available to other modules. the best part is that developers can now also be selective about which other modules can access it via reflection.\n\nas we mentioned in the introduction, more dependencies to keep track of increase the likelihood that someone will accidentally miss some of them, or that conflicts between dependency versions will arise. while it is true that developers often use build tools like maven and gradle to manage dependencies, up until the introduction of java modules, there was nothing internal to java that could help with this. for instance, jvm wouldn't detect a missing class file until the program actually tried to use it. however, beginning in java 9, the jvm will check the dependency graph on startup and throw an error if any dependencies are missing.\n\n\n# modules in action\n\nwe are going to create a basic module named mymodulename. the name of our module must be unique. this is why you often see both packages and modules prefixed with a company domain before their names. for example, if your module is named jsonutil, there's a fair chance someone else in the world have used that name already or will try to do so in the future. but if you used com.mycompany.jsonutil instead, you will likely be safe.\n\nwe begin with a java file titled *module-info.java*, which is placed in the module’s root source directory. in this file, the word module is followed by the name of our module and a pair of curly braces.\n\n\n\nan empty module declaration with a generic company domain would look like this:\n\nmodule com.mycompany.mymodulename {\n\n}\n\n\n1\n2\n3\n\n\nwe can declare our module's dependencies inside this declaration using requires. if our module used javafx for its gui, we would need to requires the appropriate javafx modules. in this example, we add the javafx.graphics module to our *module-info.java*. there are other modules in javafx, of course, but we will only take the one we need.\n\nmodule com.mycompany.mymodulename {\n    requires javafx.graphics;\n}\n\n\n1\n2\n3\n\n\nif we want to make parts of our module available for other modules to use, we must explicitly do so using the exports keyword.\n\nmodule com.mycompany.mymodulename {\n    exports com.mycompany.mymodulename;\n}\n\n\n1\n2\n3\n\n\n注意\n\nonly the specific packages mentioned will be made available. to access a package's child packages, you need to explicitly export those as well. for example, other modules now have access to the base package *com.mycompany.mymodulename*, but they do not have access to *com.mycompany.mymodulename.util*.\n\n\n# example program\n\nsuppose you want to build a program composed of two modules. one module will be the main module and the other will be added as a dependency to it. you created a module of super utilities that could revolutionize the world, but you only want other modules to be able to use its baseutilities package. the baseutilities package should have access to the other classes to do its job, but no one else will have access to them. to make this happen, we need to export only the package we want to share.\n\nmodule com.mycompany.superutilities {\n    exports com.mycompany.superutilities.baseutilities;\n}\n\n\n1\n2\n3\n\n\nthe baseutilities package has a class called superoptimizer, which we want to use in our program.\n\npackage com.mycompany.superutilities.baseutilities;\n\npublic class superoptimizer {\n\n}\n\n\n1\n2\n3\n4\n5\n\n\nthe main module of our program is com.mycompany.worldchanger. it can only change the world if it has access to the superutilities module, therefore we will need to add it as a dependency. while we're at it, let's export our module so others can use it in their programs too.\n\nmodule com.mycompany.worldchanger {\n    requires com.mycompany.superutilities;\n    exports com.mycompany.worldchanger;\n}\n \n\n\n1\n2\n3\n4\n5\n\n\n提示\n\nnote that while you must be as specific as possible when exporting packages from a module, you can import the module as a whole without specifying any packages. you will, of course, only get access to the packages that have been specifically mentioned in the exports statement of that module's module-info.java file.\n\nnow we can write our java program.\n\npackage com.mycompany.worldchanger;\n\nimport com.mycompany.superutilities.baseutilities.superoptimizer;\n\npublic class worldchangerimpl {\n\n    public static void main(string[] args) {\n\n        superoptimizer so = new superoptimizer();\n        // rest of code\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# conclusion\n\nin this topic, we learned how java modules help us with dependency management by checking for all the dependencies at startup, rather than waiting until they are used during runtime. java modules also help developers to have better control over who can access different parts of their code. this helps with privacy, but it also allows developers to make more substantive changes behind the scenes without worrying about breaking others' code. since the jdk itself is made of modules, we can also shrink the size of our applications just by using the exact modules we need. now, let's get our hands dirty with some practice!",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：Introduction to software architecture",frontmatter:{title:"Theory：Introduction to software architecture",date:"2022-07-18T15:16:34.000Z",permalink:"/pages/8e174b/",tags:["Programming"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/04.%E6%89%A9%E5%B1%95/72.Theory%EF%BC%9AIntroduction%20to%20software%20architecture.html",relativePath:"01.Java/01.Hyperskill - Java/04.扩展/72.Theory：Introduction to software architecture.md",key:"v-641ea554",path:"/pages/8e174b/",headers:[{level:2,title:"What is software architecture?",slug:"what-is-software-architecture",normalizedTitle:"what is software architecture?",charIndex:812},{level:2,title:"Why would you need software architecture?",slug:"why-would-you-need-software-architecture",normalizedTitle:"why would you need software architecture?",charIndex:1835},{level:2,title:"Types of software architecture",slug:"types-of-software-architecture",normalizedTitle:"types of software architecture",charIndex:2914},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:4548}],headersStr:"What is software architecture? Why would you need software architecture? Types of software architecture Conclusion",content:"At the beginning of a development cycle for a complex application that combines multiple components, you may notice that you need to have a proper structure that represents all interactions happening within. Software architecture is the term that defines such a structure. It helps understand the relationships between each major system component and simultaneously provides the necessary documentation for developers and clients.\n\nEvery project that combines multiple different components has to have a clear software architecture to define technical and structural requirements for the system. It allows reducing any possible risks when creating a project. If you need to complete your project and establish communications within a team in a short amount of time, you need to master software architecture.\n\n\n# What is software architecture?\n\nFor example, you want to develop a brand new application, that potentially could do whatever you want. What will be the first thing that you’ll do? Your answer should be, \"Divide my application into several components, write documentation and draw a scheme of all the connections within it\".\n\nBasically, software architecture or SA is a pattern, which describes all inner components of the system and interactions between them. It has spheres of influence which you can classify as Direct and Indirect. By direct influence, you can make any changes to the project itself. Like improvements of security and quality attributes, optimizing project structure, and any influence on used technologies.\n\nIndirect influence means changes to the environment of a project. On a picture down below you can see how the classification goes. SA directly influences Project Structure, IT environment, and Quality Attributes. While indirect influence encompasses Human Dynamics and Business Strategy.\n\n\n\n\n# Why would you need software architecture?\n\nWhen working on a complex project, developers need to understand what they are doing, what they will do next, and what they are supposed to get in the end. An architectural pattern that describes every connection within a system can help developers understand their project and adjust the workflow.\n\nHere's a list of advantages of the software architecture:\n\n * It describes the system in a simple way without implementation details.\n * It displays all working scenarios.\n * It distinguishes functional and quality requirements.\n * It improves the working and business environment.\n\nIf you properly distribute functions between the elements of SA, you could potentially save time for the developers working on implementing new features. Also, it would be easier for the new team members to adjust to the workflow.\n\nThen again, although creating a software architecture can make a real difference, it’s not always treated properly. Thus we experience a shortage of methods to represent SA and a lack of prioritization in making one.\n\n\n# Types of software architecture\n\nYou won't always need to create an absolutely unique software architecture, because there are lots of different pattern types created as optimal solutions to commonly occurring problems. There are few types of patterns like Layered, Primary-Secondary, Peer-to-Peer, etc. You will learn more about them in future topics. To represent any pattern you could use schemes, models, diagrams, and even documents that collect every architectural decision (like Architecture Decision Record (ADR)). Also, you can visualize SA through Unified Modeling Language or UML**.** UML is a visual language that combines different types of diagrams specified for individual purposes.\n\nFor a better understanding, here's a list of a few basic types of software architecture:\n\n * Application architecture – description of patterns required to build an application. This type of architecture provides a team with a roadmap to build a well-structured app.\n * Information architecture – description of the content organization, structure, and labeling in a way that allows users to conveniently access the information they need.\n * Database architecture – a concept that focuses on the design, development, implementation, and maintenance of a database management system (DBMS). Simply put, it's an architecture that describes all the steps needed to realize and support a database and gives proper access to its functions for users and admins.\n * Network architecture – description of a network system's physical and logical design. Basically, it depicts relations between network components and their logical functions.\n\n\n# Conclusion\n\nSoftware architecture is a complex concept that combines both the knowledge of IT and a way to represent it. Having a software architecture for a project provides a few benefits, such as written documentation and plans that help developers work toward a common goal. By creating a software architecture, you're potentially saving your time in the future, making sure that your project will have a solid structure at its core.",normalizedContent:"at the beginning of a development cycle for a complex application that combines multiple components, you may notice that you need to have a proper structure that represents all interactions happening within. software architecture is the term that defines such a structure. it helps understand the relationships between each major system component and simultaneously provides the necessary documentation for developers and clients.\n\nevery project that combines multiple different components has to have a clear software architecture to define technical and structural requirements for the system. it allows reducing any possible risks when creating a project. if you need to complete your project and establish communications within a team in a short amount of time, you need to master software architecture.\n\n\n# what is software architecture?\n\nfor example, you want to develop a brand new application, that potentially could do whatever you want. what will be the first thing that you’ll do? your answer should be, \"divide my application into several components, write documentation and draw a scheme of all the connections within it\".\n\nbasically, software architecture or sa is a pattern, which describes all inner components of the system and interactions between them. it has spheres of influence which you can classify as direct and indirect. by direct influence, you can make any changes to the project itself. like improvements of security and quality attributes, optimizing project structure, and any influence on used technologies.\n\nindirect influence means changes to the environment of a project. on a picture down below you can see how the classification goes. sa directly influences project structure, it environment, and quality attributes. while indirect influence encompasses human dynamics and business strategy.\n\n\n\n\n# why would you need software architecture?\n\nwhen working on a complex project, developers need to understand what they are doing, what they will do next, and what they are supposed to get in the end. an architectural pattern that describes every connection within a system can help developers understand their project and adjust the workflow.\n\nhere's a list of advantages of the software architecture:\n\n * it describes the system in a simple way without implementation details.\n * it displays all working scenarios.\n * it distinguishes functional and quality requirements.\n * it improves the working and business environment.\n\nif you properly distribute functions between the elements of sa, you could potentially save time for the developers working on implementing new features. also, it would be easier for the new team members to adjust to the workflow.\n\nthen again, although creating a software architecture can make a real difference, it’s not always treated properly. thus we experience a shortage of methods to represent sa and a lack of prioritization in making one.\n\n\n# types of software architecture\n\nyou won't always need to create an absolutely unique software architecture, because there are lots of different pattern types created as optimal solutions to commonly occurring problems. there are few types of patterns like layered, primary-secondary, peer-to-peer, etc. you will learn more about them in future topics. to represent any pattern you could use schemes, models, diagrams, and even documents that collect every architectural decision (like architecture decision record (adr)). also, you can visualize sa through unified modeling language or uml**.** uml is a visual language that combines different types of diagrams specified for individual purposes.\n\nfor a better understanding, here's a list of a few basic types of software architecture:\n\n * application architecture – description of patterns required to build an application. this type of architecture provides a team with a roadmap to build a well-structured app.\n * information architecture – description of the content organization, structure, and labeling in a way that allows users to conveniently access the information they need.\n * database architecture – a concept that focuses on the design, development, implementation, and maintenance of a database management system (dbms). simply put, it's an architecture that describes all the steps needed to realize and support a database and gives proper access to its functions for users and admins.\n * network architecture – description of a network system's physical and logical design. basically, it depicts relations between network components and their logical functions.\n\n\n# conclusion\n\nsoftware architecture is a complex concept that combines both the knowledge of it and a way to represent it. having a software architecture for a project provides a few benefits, such as written documentation and plans that help developers work toward a common goal. by creating a software architecture, you're potentially saving your time in the future, making sure that your project will have a solid structure at its core.",charsets:{},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：Class Diagrams",frontmatter:{title:"Theory：Class Diagrams",date:"2022-10-15T20:47:13.000Z",permalink:"/pages/db92b4/",tags:["Pattern","Programming"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/04.%E6%89%A9%E5%B1%95/74.Theory%EF%BC%9AClass%20Diagrams.html",relativePath:"01.Java/01.Hyperskill - Java/04.扩展/74.Theory：Class Diagrams.md",key:"v-c1db8328",path:"/pages/db92b4/",headers:[{level:2,title:"What is a class diagram?",slug:"what-is-a-class-diagram",normalizedTitle:"what is a class diagram?",charIndex:495},{level:2,title:"Description of a class",slug:"description-of-a-class",normalizedTitle:"description of a class",charIndex:987},{level:2,title:"Description of class relationships",slug:"description-of-class-relationships",normalizedTitle:"description of class relationships",charIndex:2320},{level:2,title:"Description of association relationships",slug:"description-of-association-relationships",normalizedTitle:"description of association relationships",charIndex:3726},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:5139}],headersStr:"What is a class diagram? Description of a class Description of class relationships Description of association relationships Conclusion",content:"When you work on a project, you might need a proper visual representation of a system structure. If you can divide your project into a set of objects and use the Object-Oriented Paradigm (OOP) on it, you can use Class Diagram. It would help you to describe the components of your application and better understand the connections between them.\n\nIf you are working on an application that uses OOP, Class Diagram will define your project structure and will make it apparent to the developers.\n\n\n# What is a class diagram?\n\nIn Unified Model Language (UML), Class Diagram is a visual representation of an object-oriented structure. To describe said structure the diagram uses the following elements:\n\n * Classes;\n * Class attributes;\n * Class methods;\n * Class relationships.\n\nThese elements form a set of classes and relationships between them. Such structure provides a better understanding of connections within a system and allows us to easily demonstrate the contents of an object.\n\n\n# Description of a class\n\nClass is a representation of an object that describes its methods and attributes. Simply put class can be seen as a blueprint for an object. When the system creates a specimen of an object, it will be created according to a template that was described by the class. Here's an example of a class, called \"Student\":\n\n\n\nStudent has 2 attributes: Name defined by String type, and Age defined by int type. The class also has 2 methods: write() which returns String type and study() which returns nothing. Methods also have brackets that can be filled in with some parameters. In this example, we have the parameter String str that is required to activate method write*()*.\n\nEach element of a class has a visibility option, defined before the name of the element. In this example, all the elements have a \"+\" before their names. That means that all the visibility options of these elements are set to public. Let's elaborate on these visibility options:\n\n * + (Public) – element can be accessed by any class in the system;\n * - (Private) – element can be accessed only by a class that owns it;\n * # (Protected) – element can be accessed by classes that have a generalization (or inheritance) relationship with its class;\n * ~ (Package) – element can be accessed by classes that are located in the same package.\n\n\n# Description of class relationships\n\nClass relationships are a concept that defines connections between classes. For example, we have 2 classes in our applications: Student headman and Teacher. We define their connection by establishing a relationship of some sort. Here's an example:\n\n\n\nIn this example, we use the type of relationship called generalization (or inheritance). Let's elaborate on the relationship types:\n\n * Generalization (inheritance) – a type of relationship where one class could be described as a child class which assumes and could use methods of a parent class. In our case Student headman is the child class of Teacher. This relationship could be visualized by this arrow below:\n\n\n\n * Dependency – a type of relationship that indicates that some change in one class can affect another class. Here's an example of Student depending on School:\n\n\n\n * Realization – the relationship between the blueprint class and the object containing its respective implementation level details. For example, we have a class Person which describes the basic attributes of a person. It's a blueprint that can be made into an object that represents a specific person like a Student, or a Salesman. Our Student class can study and go to school, and our Salesman class can go to work and sell stuff, but they are people, so they will have Age and Name attributes. Here's how you could visualize it:\n\n\n\n\n# Description of association relationships\n\nAssociation – a type of relationship that indicates that instances of one class are connected to instances of another. For example, Teacher teaches Student. This relationship can be visualized by a straight line:\n\n\n\nAssociation relationships could also include a cardinality attribute. Simply put, this attribute defines the number of instances of a class that could exist in this relationship. Here's how it can be visualized for different situations:\n\n\n\nA basic example of this concept is this: class Teacher and class Student are connected by an association relationship. It means that Teacher teaches Student. One student can have one or multiple teachers, and the same can be said about teachers. So the diagram that describes this relationship would look like this:\n\n\n\nAssociation relationships also have two special types:\n\n * Aggregation – a special type of association relation that describes one class as a part of the other. Classes in this relation have a separate lifespan. If we come back to our Student example, we can describe class Student as part of a Group. This relation can be represented in this way:\n\n\n\n * Composition – a special type of aggregation, where classes share lifespan. If the main class (School) stops its functions, the class that is a part of it (Group) will stop functioning too. This relationship can be visualized like this:\n\n\n\n\n# Conclusion\n\nClass Diagram could be seen as too complicated at first. But when you start working on your first project, making your first framework, and connecting all the components into one structure, you may realize that this way of presenting project structure is really helpful. It makes all the application components look more apparent, and it also helps to set boundaries of their contents.",normalizedContent:"when you work on a project, you might need a proper visual representation of a system structure. if you can divide your project into a set of objects and use the object-oriented paradigm (oop) on it, you can use class diagram. it would help you to describe the components of your application and better understand the connections between them.\n\nif you are working on an application that uses oop, class diagram will define your project structure and will make it apparent to the developers.\n\n\n# what is a class diagram?\n\nin unified model language (uml), class diagram is a visual representation of an object-oriented structure. to describe said structure the diagram uses the following elements:\n\n * classes;\n * class attributes;\n * class methods;\n * class relationships.\n\nthese elements form a set of classes and relationships between them. such structure provides a better understanding of connections within a system and allows us to easily demonstrate the contents of an object.\n\n\n# description of a class\n\nclass is a representation of an object that describes its methods and attributes. simply put class can be seen as a blueprint for an object. when the system creates a specimen of an object, it will be created according to a template that was described by the class. here's an example of a class, called \"student\":\n\n\n\nstudent has 2 attributes: name defined by string type, and age defined by int type. the class also has 2 methods: write() which returns string type and study() which returns nothing. methods also have brackets that can be filled in with some parameters. in this example, we have the parameter string str that is required to activate method write*()*.\n\neach element of a class has a visibility option, defined before the name of the element. in this example, all the elements have a \"+\" before their names. that means that all the visibility options of these elements are set to public. let's elaborate on these visibility options:\n\n * + (public) – element can be accessed by any class in the system;\n * - (private) – element can be accessed only by a class that owns it;\n * # (protected) – element can be accessed by classes that have a generalization (or inheritance) relationship with its class;\n * ~ (package) – element can be accessed by classes that are located in the same package.\n\n\n# description of class relationships\n\nclass relationships are a concept that defines connections between classes. for example, we have 2 classes in our applications: student headman and teacher. we define their connection by establishing a relationship of some sort. here's an example:\n\n\n\nin this example, we use the type of relationship called generalization (or inheritance). let's elaborate on the relationship types:\n\n * generalization (inheritance) – a type of relationship where one class could be described as a child class which assumes and could use methods of a parent class. in our case student headman is the child class of teacher. this relationship could be visualized by this arrow below:\n\n\n\n * dependency – a type of relationship that indicates that some change in one class can affect another class. here's an example of student depending on school:\n\n\n\n * realization – the relationship between the blueprint class and the object containing its respective implementation level details. for example, we have a class person which describes the basic attributes of a person. it's a blueprint that can be made into an object that represents a specific person like a student, or a salesman. our student class can study and go to school, and our salesman class can go to work and sell stuff, but they are people, so they will have age and name attributes. here's how you could visualize it:\n\n\n\n\n# description of association relationships\n\nassociation – a type of relationship that indicates that instances of one class are connected to instances of another. for example, teacher teaches student. this relationship can be visualized by a straight line:\n\n\n\nassociation relationships could also include a cardinality attribute. simply put, this attribute defines the number of instances of a class that could exist in this relationship. here's how it can be visualized for different situations:\n\n\n\na basic example of this concept is this: class teacher and class student are connected by an association relationship. it means that teacher teaches student. one student can have one or multiple teachers, and the same can be said about teachers. so the diagram that describes this relationship would look like this:\n\n\n\nassociation relationships also have two special types:\n\n * aggregation – a special type of association relation that describes one class as a part of the other. classes in this relation have a separate lifespan. if we come back to our student example, we can describe class student as part of a group. this relation can be represented in this way:\n\n\n\n * composition – a special type of aggregation, where classes share lifespan. if the main class (school) stops its functions, the class that is a part of it (group) will stop functioning too. this relationship can be visualized like this:\n\n\n\n\n# conclusion\n\nclass diagram could be seen as too complicated at first. but when you start working on your first project, making your first framework, and connecting all the components into one structure, you may realize that this way of presenting project structure is really helpful. it makes all the application components look more apparent, and it also helps to set boundaries of their contents.",charsets:{},lastUpdated:"2022/10/25, 17:57:56",lastUpdatedTimestamp:1666691876e3},{title:"Theory：Text blocks",frontmatter:{title:"Theory：Text blocks",date:"2022-11-24T11:31:06.000Z",permalink:"/pages/ed16a5/",tags:["Java","Code style","String"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/04.%E6%89%A9%E5%B1%95/80.Theory%EF%BC%9AText%20blocks.html",relativePath:"01.Java/01.Hyperskill - Java/04.扩展/80.Theory：Text blocks.md",key:"v-221ce4d6",path:"/pages/ed16a5/",headers:[{level:2,title:"The good, the bad, and the ugly",slug:"the-good-the-bad-and-the-ugly",normalizedTitle:"the good, the bad, and the ugly",charIndex:750},{level:2,title:"The Java Text Block",slug:"the-java-text-block",normalizedTitle:"the java text block",charIndex:3069},{level:2,title:"Indentation and whitespace",slug:"indentation-and-whitespace",normalizedTitle:"indentation and whitespace",charIndex:4262},{level:2,title:"Beyond the basics",slug:"beyond-the-basics",normalizedTitle:"beyond the basics",charIndex:6088},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:8417}],headersStr:"The good, the bad, and the ugly The Java Text Block Indentation and whitespace Beyond the basics Conclusion",content:'Anyone who has ever written a Java program that deals with a lot of text has likely run into the nightmare of working with Java Strings that span more than one line. When a string fits on a single line, Java does not give us any trouble. But when we paste in a longer String that spans multiple lines, the dark underbelly of this ancient language comes to light. If you use an IDE like IntelliJ, the String will automatically be formatted for you when you paste it in between quotes. However, it is most definitely not a pretty sight, nor is it a pleasure to read. Java Text Blocks are Java 15\'s solution to these problems. Text Blocks are multi-line string literals that make our code easier to read and write, with more predictable formatting.\n\n\n# The good, the bad, and the ugly\n\nImagine for a second that you are programming a computer game set in Ancient Greece. You set the mood of the story with some poetic quotations from Homer\'s The Iliad, painting a picture of the main character Achilles. You assign the following String to a variable named iliadQuote for ease of reference.\n\n提示\n\nIf you paste your String in between two quotation marks, IntelliJ will automatically format the String with required escape characters and concatenations.\n\nString iliadQuote = "\\"But raging still, amidst his navy sat\\n" +\n                    "The stern Achilles, stedfast in his hate;\\n" +\n                    "Nor mix’d in combat, nor in council join’d;\\n" +\n                    "But wasting cares lay heavy on his mind:\\n" +\n                    "In his black thoughts revenge and slaughter roll,\\n" +\n                    "And scenes of blood rise dreadful in his soul.\\"";\n\n\n1\n2\n3\n4\n5\n6\n\n\nAs code goes, this isn\'t as terrible to read as it could be. The escaped quotation marks at the beginning and the end of the String, however, look a bit messy. Likewise, the quotation marks, the escaped newline character, and the concatenation operators in each line detract from the readability of the text.\n\nIf the quotation from The Iliad was "the bad," then the following SQL query is without question "the ugly." You don\'t need to know anything about SQL, or databases in general, to recognize that this String is a nuisance to read:\n\nString query = "SELECT \\"EMP_ID\\", \\"LAST_NAME\\" FROM \\"EMPLOYEE_TB\\"\\n" +\n               "WHERE \\"CITY\\" = \'INDIANAPOLIS\'\\n" +\n               "ORDER BY \\"EMP_ID\\", \\"LAST_NAME\\";\\n";\n\n\n1\n2\n3\n\n\nBecause SQL queries are conventionally written with the column names in quotes and spread over multiple lines, the above code is a mess of escaped quotation marks and escaped newlines characters. For a final example of a difficult to work with String, let\'s look at a block of properly indented HTML code that could be returned as a String from a Java server endpoint:\n\nString html = "<html>\\n" +\n              "    <body>\\n" +\n              "        <p>Hello, world</p>\\n" +\n              "    </body>\\n" +\n              "</html>\\n";\n\n\n1\n2\n3\n4\n5\n\n\nNow that we\'ve been properly traumatized by the bad and the ugly, let\'s take a look at "the good."\n\n\n# The Java Text Block\n\nJava text blocks simplify multiline Strings by using a group of three quotes at the beginning and end. Almost every character in between does not need to be escaped, no explicit newlines are required, and no concatenation operators are needed. Look how pleasant and clean the quote from The Iliad looks in a Java 15 text block:\n\nString iliadQuote = """\n    "But raging still, amidst his navy sat\n    The stern Achilles, stedfast in his hate;\n    Nor mix’d in combat, nor in council join’d;\n    But wasting cares lay heavy on his mind:\n    In his black thoughts revenge and slaughter roll,\n    And scenes of blood rise dreadful in his soul."\n    """;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nLikewise, the SQL query is improved significantly. If you don\'t know anything about SQL, just know that the String in the following code block is written exactly as a native SQL query would be. Where the traditional Java way of writing the query obscured the meaning of the code, the Java 15 text block could not make it any clearer.\n\nString query = """\n    SELECT "EMP_ID", "LAST_NAME" FROM "EMPLOYEE_TB"\n    WHERE "CITY" = \'INDIANAPOLIS\'\n    ORDER BY "EMP_ID", "LAST_NAME";\n    """;\n\n\n1\n2\n3\n4\n5\n\n\n\n# Indentation and whitespace\n\nWriting the HTML code as a text block brings us to an important question yet to be addressed. How do Java text blocks sort out String indentation when they themselves are also indented in the Java source code? The short answer is that the Java compiler makes a distinction between incidental whitespace and essential whitespace. Incidental whitespace is the whitespace added in the IDE to make the code easier to read, which the developer does not want to be a part of the String. Another source of incidental whitespace is copying text from a source document with unnecessarily added extra trailing spaces.\n\nBy contrast, essential whitespace is written when the developer intentionally wants the whitespace to be stored as part of the String. A common example of essential whitespace is a String of properly indented HTML code. The Java compiler counts the number of leading spaces that all the lines have in common and then subtracts them from the String. Any additional leading spaces are left in the String. The trailing spaces are also removed after that. Then the compiler concatenates all the lines together so that it conforms to the standard Java String type.\n\n提示\n\nIf the closing delimiter (""") occurs on its own line at the bottom of the String, a newline character is automatically included. However, if it occurs at the end of the final line with text preceding it, nothing will be added.\n\nThis text block containing a String of HTML code is very readable in the Java source code.\n\nString html = """\n    <html>\n        <body>\n            <p>Hello, world</p>\n        </body>\n    </html>\n    """;\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nIf we print html to the standard output, we will see the perfectly indented text below:\n\n<html>\n    <body>\n        <p>Hello, world</p>\n    </body>\n</html>\n\n\n1\n2\n3\n4\n5\n\n\n\n# Beyond the basics\n\nNow that we have a handle on the basics of text blocks, let\'s look at a few extra features. One of the benefits of text blocks is that we don\'t have to escape quotation marks. However, because the closing delimiter of a text block is a triple quote, we cannot put an unescaped triple quote inside our text block; the compiler would incorrectly assume this is the end of the String. We only need to escape one of the quotes, because we are trying to prevent the total of unescaped quotes from reaching three in a row.\n\nIf you want the enhanced readability of text blocks but don\'t want the new line character automatically added, you can add \\ as a new line character suppresser at the end of each line. You can also use \\s at the end of a line to add a space that won\'t be stripped and to prevent the compiler from removing trailing spaces occurring before the \\s.\n\nString example = """\n    You can use "single" or ""double"" quotes any time you like. \n    But you must escape one if you want triple quotes: \\"""\n    or \\"\\""" if you want four. \n    The line after me will be directly concatenated onto the same line\\\n    But this line will preserve a single trailing space at the end\\s\n    And this line will keep six trailing spaces     \\s \n    """;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nText blocks do not directly support String interpolation, but since a text block is still a String type, you can use the format static method of String class to create a new String with interpolated values. replace method can be used for the same purpose, but format is more efficient if you are inserting multiple values. There is a newer and slightly simpler String instance method formatted(Object... args) that you can use instead of the static format method. Both of them have the same method body, so they are completely interchangeable.\n\nInternally, two new String methods are called during the process of compiling text blocks. They are stripIndent and translateEscapes. As you might guess from their names, the compiler strips the whitespace indentation with the first method and uses the second to make escaped characters appear properly. We do not need to use them directly with text blocks because they are already being called under the hood, but we do have access to them in case we want to utilize their functionality.\n\n\n# Conclusion\n\nIn this topic, we looked at how Java handles long multi-line strings. In order to make them less cluttered and more visually appealing to developers, Java 15 introduced text blocks. Java text blocks remove the need for concatenating multiple lines of strings and for the vast majority of escape characters. A text block is defined with an opening and closing pair of triple quotes. Aside from stripping the leading and trailing indentation, all of the whitespaces are kept as they are, and there is no need to escape them.\n\nBecause escaped characters are processed after indented whitespace, you can use the new escape characters \\ and \\s to override the stripIndent algorithm when needed. Adding \\ to the end of a line indicates that the newline character is only meant for more readable Java code and not to be kept in the resulting String. \\s will alter how the trailing whitespace is stripped; any whitespace to the left of the \\s is kept in the string. String interpolation can be achieved by using replace, format, or formatted. While their use is not necessary, the stripIndent and translateEscapes of String class expose the inner text block algorithms to the developer if needed.',normalizedContent:'anyone who has ever written a java program that deals with a lot of text has likely run into the nightmare of working with java strings that span more than one line. when a string fits on a single line, java does not give us any trouble. but when we paste in a longer string that spans multiple lines, the dark underbelly of this ancient language comes to light. if you use an ide like intellij, the string will automatically be formatted for you when you paste it in between quotes. however, it is most definitely not a pretty sight, nor is it a pleasure to read. java text blocks are java 15\'s solution to these problems. text blocks are multi-line string literals that make our code easier to read and write, with more predictable formatting.\n\n\n# the good, the bad, and the ugly\n\nimagine for a second that you are programming a computer game set in ancient greece. you set the mood of the story with some poetic quotations from homer\'s the iliad, painting a picture of the main character achilles. you assign the following string to a variable named iliadquote for ease of reference.\n\n提示\n\nif you paste your string in between two quotation marks, intellij will automatically format the string with required escape characters and concatenations.\n\nstring iliadquote = "\\"but raging still, amidst his navy sat\\n" +\n                    "the stern achilles, stedfast in his hate;\\n" +\n                    "nor mix’d in combat, nor in council join’d;\\n" +\n                    "but wasting cares lay heavy on his mind:\\n" +\n                    "in his black thoughts revenge and slaughter roll,\\n" +\n                    "and scenes of blood rise dreadful in his soul.\\"";\n\n\n1\n2\n3\n4\n5\n6\n\n\nas code goes, this isn\'t as terrible to read as it could be. the escaped quotation marks at the beginning and the end of the string, however, look a bit messy. likewise, the quotation marks, the escaped newline character, and the concatenation operators in each line detract from the readability of the text.\n\nif the quotation from the iliad was "the bad," then the following sql query is without question "the ugly." you don\'t need to know anything about sql, or databases in general, to recognize that this string is a nuisance to read:\n\nstring query = "select \\"emp_id\\", \\"last_name\\" from \\"employee_tb\\"\\n" +\n               "where \\"city\\" = \'indianapolis\'\\n" +\n               "order by \\"emp_id\\", \\"last_name\\";\\n";\n\n\n1\n2\n3\n\n\nbecause sql queries are conventionally written with the column names in quotes and spread over multiple lines, the above code is a mess of escaped quotation marks and escaped newlines characters. for a final example of a difficult to work with string, let\'s look at a block of properly indented html code that could be returned as a string from a java server endpoint:\n\nstring html = "<html>\\n" +\n              "    <body>\\n" +\n              "        <p>hello, world</p>\\n" +\n              "    </body>\\n" +\n              "</html>\\n";\n\n\n1\n2\n3\n4\n5\n\n\nnow that we\'ve been properly traumatized by the bad and the ugly, let\'s take a look at "the good."\n\n\n# the java text block\n\njava text blocks simplify multiline strings by using a group of three quotes at the beginning and end. almost every character in between does not need to be escaped, no explicit newlines are required, and no concatenation operators are needed. look how pleasant and clean the quote from the iliad looks in a java 15 text block:\n\nstring iliadquote = """\n    "but raging still, amidst his navy sat\n    the stern achilles, stedfast in his hate;\n    nor mix’d in combat, nor in council join’d;\n    but wasting cares lay heavy on his mind:\n    in his black thoughts revenge and slaughter roll,\n    and scenes of blood rise dreadful in his soul."\n    """;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nlikewise, the sql query is improved significantly. if you don\'t know anything about sql, just know that the string in the following code block is written exactly as a native sql query would be. where the traditional java way of writing the query obscured the meaning of the code, the java 15 text block could not make it any clearer.\n\nstring query = """\n    select "emp_id", "last_name" from "employee_tb"\n    where "city" = \'indianapolis\'\n    order by "emp_id", "last_name";\n    """;\n\n\n1\n2\n3\n4\n5\n\n\n\n# indentation and whitespace\n\nwriting the html code as a text block brings us to an important question yet to be addressed. how do java text blocks sort out string indentation when they themselves are also indented in the java source code? the short answer is that the java compiler makes a distinction between incidental whitespace and essential whitespace. incidental whitespace is the whitespace added in the ide to make the code easier to read, which the developer does not want to be a part of the string. another source of incidental whitespace is copying text from a source document with unnecessarily added extra trailing spaces.\n\nby contrast, essential whitespace is written when the developer intentionally wants the whitespace to be stored as part of the string. a common example of essential whitespace is a string of properly indented html code. the java compiler counts the number of leading spaces that all the lines have in common and then subtracts them from the string. any additional leading spaces are left in the string. the trailing spaces are also removed after that. then the compiler concatenates all the lines together so that it conforms to the standard java string type.\n\n提示\n\nif the closing delimiter (""") occurs on its own line at the bottom of the string, a newline character is automatically included. however, if it occurs at the end of the final line with text preceding it, nothing will be added.\n\nthis text block containing a string of html code is very readable in the java source code.\n\nstring html = """\n    <html>\n        <body>\n            <p>hello, world</p>\n        </body>\n    </html>\n    """;\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nif we print html to the standard output, we will see the perfectly indented text below:\n\n<html>\n    <body>\n        <p>hello, world</p>\n    </body>\n</html>\n\n\n1\n2\n3\n4\n5\n\n\n\n# beyond the basics\n\nnow that we have a handle on the basics of text blocks, let\'s look at a few extra features. one of the benefits of text blocks is that we don\'t have to escape quotation marks. however, because the closing delimiter of a text block is a triple quote, we cannot put an unescaped triple quote inside our text block; the compiler would incorrectly assume this is the end of the string. we only need to escape one of the quotes, because we are trying to prevent the total of unescaped quotes from reaching three in a row.\n\nif you want the enhanced readability of text blocks but don\'t want the new line character automatically added, you can add \\ as a new line character suppresser at the end of each line. you can also use \\s at the end of a line to add a space that won\'t be stripped and to prevent the compiler from removing trailing spaces occurring before the \\s.\n\nstring example = """\n    you can use "single" or ""double"" quotes any time you like. \n    but you must escape one if you want triple quotes: \\"""\n    or \\"\\""" if you want four. \n    the line after me will be directly concatenated onto the same line\\\n    but this line will preserve a single trailing space at the end\\s\n    and this line will keep six trailing spaces     \\s \n    """;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\ntext blocks do not directly support string interpolation, but since a text block is still a string type, you can use the format static method of string class to create a new string with interpolated values. replace method can be used for the same purpose, but format is more efficient if you are inserting multiple values. there is a newer and slightly simpler string instance method formatted(object... args) that you can use instead of the static format method. both of them have the same method body, so they are completely interchangeable.\n\ninternally, two new string methods are called during the process of compiling text blocks. they are stripindent and translateescapes. as you might guess from their names, the compiler strips the whitespace indentation with the first method and uses the second to make escaped characters appear properly. we do not need to use them directly with text blocks because they are already being called under the hood, but we do have access to them in case we want to utilize their functionality.\n\n\n# conclusion\n\nin this topic, we looked at how java handles long multi-line strings. in order to make them less cluttered and more visually appealing to developers, java 15 introduced text blocks. java text blocks remove the need for concatenating multiple lines of strings and for the vast majority of escape characters. a text block is defined with an opening and closing pair of triple quotes. aside from stripping the leading and trailing indentation, all of the whitespaces are kept as they are, and there is no need to escape them.\n\nbecause escaped characters are processed after indented whitespace, you can use the new escape characters \\ and \\s to override the stripindent algorithm when needed. adding \\ to the end of a line indicates that the newline character is only meant for more readable java code and not to be kept in the resulting string. \\s will alter how the trailing whitespace is stripped; any whitespace to the left of the \\s is kept in the string. string interpolation can be achieved by using replace, format, or formatted. while their use is not necessary, the stripindent and translateescapes of string class expose the inner text block algorithms to the developer if needed.',charsets:{cjk:!0},lastUpdated:"2022/12/03, 17:31:39",lastUpdatedTimestamp:1670059899e3},{title:"Theory：Files",frontmatter:{title:"Theory：Files",date:"2022-08-08T12:23:15.000Z",permalink:"/pages/03b557/",tags:["I/O","Java"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/05.IO%20&%20Stream/91.Theory%EF%BC%9AFiles.html",relativePath:"01.Java/01.Hyperskill - Java/05.IO & Stream/91.Theory：Files.md",key:"v-2a3868cc",path:"/pages/03b557/",headers:[{level:2,title:"The File class",slug:"the-file-class",normalizedTitle:"the file class",charIndex:624},{level:2,title:"Absolute and relative path",slug:"absolute-and-relative-path",normalizedTitle:"absolute and relative path",charIndex:2115},{level:2,title:"Basic methods",slug:"basic-methods",normalizedTitle:"basic methods",charIndex:4040}],headersStr:"The File class Absolute and relative path Basic methods",content:'It is often the case that a program needs to process and store data located outside the codebase: configuration settings, some dataset for processing, logs of execution and so on. The simplest way to store data is to use files that are supported by all modern operating systems. You can consider a file as a collection of data that is stored on a disk or another device, and that can be manipulated as a single unit when addressed by its name. Files can be organized into directories that act as folders for other files and directories.\n\nIn this topic, we will learn how to work with files directly from a Java program.\n\n\n# The File class\n\nThere is a class called File in the java.io package. An object of this class represents an existing or non-existing file or a directory. The class can be used to manipulate files and directories: creating, removing, accessing properties and more.\n\nThe simplest way to create a file object is to pass a string path to its constructor. The valid format of the string depends on the operating system:\n\n * Windows uses backslashes for paths (\'\\\'),\n * Linux, OS X, Android and other UNIX-like systems use the forward slash (\'/\').\n\nYou should keep this difference in mind while working with files.\n\nIf your operating system is Windows, do not forget to use the escape character \'\\\'.\n\nLet\'s create two objects of the File class for different platforms.\n\nFile fileOnUnix = new File("/home/username/Documents");    // a directory on a UNIX-like system\nFile fileOnWin = new File("D:\\\\Materials\\\\java-materials.pdf"); // a file on Windows\n\n\n1\n2\n\n\nThe code will work even if a file or a directory does not actually exist in your file system. It does not create a new file or directory. It just represents "a virtual" file or directory that exists already or may be created in the future.\n\nTo display the character for separating the path to a file in your case, you can print the following:\n\nSystem.out.println(File.separator); // \'/\' - for Linux\n\n\n1\n\n\nObjects of the File class are immutable; that is, once created, the abstract pathname represented by an object will never change.\n\n\n# Absolute and relative path\n\nYou\'ve already seen examples of files described by an absolute path. Simply, a path is absolute if it starts with the root element of the file system. It has the complete information about the file location including the type of the operating system.\n\n提示\n\nIt is considered bad practice to locate a file using its absolute path inside your programs, since you will lose the ability to reuse your program on different platforms. Another problem is that you cannot transfer the file along with the specified directory, you will have to change the code that accesses it.\n\nA relative path is a path that doesn\'t include the root element of the file system. This always starts from your working directory. This directory is represented by a . (dot). A relative path is not complete and needs to be combined with the current directory path in order to reach the requested file.\n\nHere is an example with a file inside the images directory which is in your working directory:\n\nFile fileOnUnix = new File("./images/picture.jpg");\nFile fileOnWin = new File("./images/picture.jpg");\n\n\n1\n2\n\n\nAs you can see, both paths look exactly the same, which provides platform independence. Interestingly, the dot character can be skipped, so the path images/picture.jpg is also correct.\n\n提示\n\nIn order to construct platform-independent programs, it is a common convention to use relative paths whenever possible. You can also transfer the working directory that contains images/picture.jpg without any code modifications.\n\nTo access the parent directory, just write .. (double dot). So, ../picture.jpg is a file placed in the parent directory of the working directory. The relative path images/../images/picture.jpg means the parent directory of images, then the images folder again. And picture.jpg is the file inside images folder. In general images/../images/picture.jpg and images/picture.jpg are the same paths.\n\n\n# Basic methods\n\nAn instance of File has a list of methods. Take a look at some of them:\n\n * String **getPath()** returns the string path to this file or directory;\n * String **getName()** returns the name of this file or directory (just the last name of the path)\n * boolean **isDirectory()** returns true if it is a directory and exists, otherwise, false;\n * boolean **isFile()** returns true if it is a file that exists (not a directory), otherwise, false;\n * boolean **exists()** returns true if this file or directory actually exists in your file system, otherwise, false;\n * String **getParent()** returns the string path to the parent directory that contains this file or directory.\n\nThe list is not complete, but for now, we will focus on these ones. For other methods, see here.\n\nLet\'s create an instance of an existing file and print out some info about it.\n\nFile file = new File("/home/username/Documents/javamaterials.pdf");\n\nSystem.out.println("File name: " + file.getName());\nSystem.out.println("File path: " + file.getPath());\nSystem.out.println("Is file: " + file.isFile());\nSystem.out.println("Is directory: " + file.isDirectory());\nSystem.out.println("Exists: " + file.exists());\nSystem.out.println("Parent path: " + file.getParent());\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nAs we expect, the code prints the following:\n\nFile name: javamaterials.pdf\nFile path: /home/username/Documents/javamaterials.pdf\nIs file: true\nIs directory: false\nExists: true\nParent path: /home/username/Documents\n\n\n1\n2\n3\n4\n5\n6\n\n\nSuppose now we have an instance that represents a non-existing file and prints the details about it:\n\nFile name: javamaterials1.pdf\nFile path: /home/art/Documents/javamaterials1.pdf\nIs file: false\nIs directory: false\nExists: false\nParent path: /home/art/Documents\n\n\n1\n2\n3\n4\n5\n6\n\n\nThe file does not exist, so the application does not know its type.\n\nThere is also a group of methods canRead(), canWrite(), canExecute() to test whether the application can read/modify/execute the file denoted by the path. It is recommended to use these methods, otherwise, you can encounter file access errors when your user does not have enough permissions to perform an operation with a file.\n\nWe believe the File class provides a very clear API to process files and directories on different platforms.',normalizedContent:'it is often the case that a program needs to process and store data located outside the codebase: configuration settings, some dataset for processing, logs of execution and so on. the simplest way to store data is to use files that are supported by all modern operating systems. you can consider a file as a collection of data that is stored on a disk or another device, and that can be manipulated as a single unit when addressed by its name. files can be organized into directories that act as folders for other files and directories.\n\nin this topic, we will learn how to work with files directly from a java program.\n\n\n# the file class\n\nthere is a class called file in the java.io package. an object of this class represents an existing or non-existing file or a directory. the class can be used to manipulate files and directories: creating, removing, accessing properties and more.\n\nthe simplest way to create a file object is to pass a string path to its constructor. the valid format of the string depends on the operating system:\n\n * windows uses backslashes for paths (\'\\\'),\n * linux, os x, android and other unix-like systems use the forward slash (\'/\').\n\nyou should keep this difference in mind while working with files.\n\nif your operating system is windows, do not forget to use the escape character \'\\\'.\n\nlet\'s create two objects of the file class for different platforms.\n\nfile fileonunix = new file("/home/username/documents");    // a directory on a unix-like system\nfile fileonwin = new file("d:\\\\materials\\\\java-materials.pdf"); // a file on windows\n\n\n1\n2\n\n\nthe code will work even if a file or a directory does not actually exist in your file system. it does not create a new file or directory. it just represents "a virtual" file or directory that exists already or may be created in the future.\n\nto display the character for separating the path to a file in your case, you can print the following:\n\nsystem.out.println(file.separator); // \'/\' - for linux\n\n\n1\n\n\nobjects of the file class are immutable; that is, once created, the abstract pathname represented by an object will never change.\n\n\n# absolute and relative path\n\nyou\'ve already seen examples of files described by an absolute path. simply, a path is absolute if it starts with the root element of the file system. it has the complete information about the file location including the type of the operating system.\n\n提示\n\nit is considered bad practice to locate a file using its absolute path inside your programs, since you will lose the ability to reuse your program on different platforms. another problem is that you cannot transfer the file along with the specified directory, you will have to change the code that accesses it.\n\na relative path is a path that doesn\'t include the root element of the file system. this always starts from your working directory. this directory is represented by a . (dot). a relative path is not complete and needs to be combined with the current directory path in order to reach the requested file.\n\nhere is an example with a file inside the images directory which is in your working directory:\n\nfile fileonunix = new file("./images/picture.jpg");\nfile fileonwin = new file("./images/picture.jpg");\n\n\n1\n2\n\n\nas you can see, both paths look exactly the same, which provides platform independence. interestingly, the dot character can be skipped, so the path images/picture.jpg is also correct.\n\n提示\n\nin order to construct platform-independent programs, it is a common convention to use relative paths whenever possible. you can also transfer the working directory that contains images/picture.jpg without any code modifications.\n\nto access the parent directory, just write .. (double dot). so, ../picture.jpg is a file placed in the parent directory of the working directory. the relative path images/../images/picture.jpg means the parent directory of images, then the images folder again. and picture.jpg is the file inside images folder. in general images/../images/picture.jpg and images/picture.jpg are the same paths.\n\n\n# basic methods\n\nan instance of file has a list of methods. take a look at some of them:\n\n * string **getpath()** returns the string path to this file or directory;\n * string **getname()** returns the name of this file or directory (just the last name of the path)\n * boolean **isdirectory()** returns true if it is a directory and exists, otherwise, false;\n * boolean **isfile()** returns true if it is a file that exists (not a directory), otherwise, false;\n * boolean **exists()** returns true if this file or directory actually exists in your file system, otherwise, false;\n * string **getparent()** returns the string path to the parent directory that contains this file or directory.\n\nthe list is not complete, but for now, we will focus on these ones. for other methods, see here.\n\nlet\'s create an instance of an existing file and print out some info about it.\n\nfile file = new file("/home/username/documents/javamaterials.pdf");\n\nsystem.out.println("file name: " + file.getname());\nsystem.out.println("file path: " + file.getpath());\nsystem.out.println("is file: " + file.isfile());\nsystem.out.println("is directory: " + file.isdirectory());\nsystem.out.println("exists: " + file.exists());\nsystem.out.println("parent path: " + file.getparent());\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nas we expect, the code prints the following:\n\nfile name: javamaterials.pdf\nfile path: /home/username/documents/javamaterials.pdf\nis file: true\nis directory: false\nexists: true\nparent path: /home/username/documents\n\n\n1\n2\n3\n4\n5\n6\n\n\nsuppose now we have an instance that represents a non-existing file and prints the details about it:\n\nfile name: javamaterials1.pdf\nfile path: /home/art/documents/javamaterials1.pdf\nis file: false\nis directory: false\nexists: false\nparent path: /home/art/documents\n\n\n1\n2\n3\n4\n5\n6\n\n\nthe file does not exist, so the application does not know its type.\n\nthere is also a group of methods canread(), canwrite(), canexecute() to test whether the application can read/modify/execute the file denoted by the path. it is recommended to use these methods, otherwise, you can encounter file access errors when your user does not have enough permissions to perform an operation with a file.\n\nwe believe the file class provides a very clear api to process files and directories on different platforms.',charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：Write files",frontmatter:{title:"Theory：Write files",date:"2022-08-12T17:33:23.000Z",permalink:"/pages/39305b/",tags:["I/O","Java"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/05.IO%20&%20Stream/92.Theory%EF%BC%9AWriting%20files.html",relativePath:"01.Java/01.Hyperskill - Java/05.IO & Stream/92.Theory：Writing files.md",key:"v-4a301fef",path:"/pages/39305b/",headers:[{level:2,title:"The FileWriter class",slug:"the-filewriter-class",normalizedTitle:"the filewriter class",charIndex:274},{level:2,title:"Closing a FileWriter",slug:"closing-a-filewriter",normalizedTitle:"closing a filewriter",charIndex:1969},{level:2,title:"The PrintWriter class",slug:"the-printwriter-class",normalizedTitle:"the printwriter class",charIndex:2548},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:3969}],headersStr:"The FileWriter class Closing a FileWriter The PrintWriter class Conclusion",content:'Now that we\'ve learned how to create and manage files, let\'s discuss how to write text to a file. Java provides different ways for doing it, and in this lesson, we will consider two of the simplest ways: using the java.io.FileWriter and the java.io.PrintWriter classes.\n\n\n# The FileWriter class\n\nThe class FileWriter has a set of constructors to write characters and strings to a specified file:\n\n * FileWriter(String fileName);\n * FileWriter(String fileName, boolean append);\n * FileWriter(File file);\n * FileWriter(File file, boolean append);\n\nTwo constructors take an additional parameter append that indicates whether to append (true) or overwrite (false) an existing file.\n\nAll these constructors can throw an IOException for several reasons:\n\n * if the named file exists but it is a directory;\n * if a file does not exist and cannot be created;\n * if a file exists but cannot be opened.\n\nIn this lesson, sometimes we will skip the exception handling mechanism to simplify our examples.\n\nLet\'s consider the following code:\n\nFile file = new File("/home/username/path/to/your/file.txt");\nFileWriter writer = new FileWriter(file); // overwrites the file\n\nwriter.write("Hello");\nwriter.write("Java");\n\nwriter.close();\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nIf the specified file does not exist, it will be created after executing this code. If the file already exists, this code overwrites the data.\n\nThe file will contain the text HelloJava.\n\nIf you want to append some new data, you should specify the second argument as true.\n\nFile file = new File("/home/username/path/to/your/file.txt");\nFileWriter writer = new FileWriter(file, true); // appends text to the file\n\nwriter.write("Hello, World\\n");\nwriter.close();\n\n\n1\n2\n3\n4\n5\n\n\nThis code appends a new line to the file. Run it multiple times to see what happens. Note that here we are using Unix-like OS line breaks. There is a difference between line break characters on different platforms:\n\n * \\n Unix-like OS\n * \\r\\n Windows OS\n\n\n# Closing a FileWriter\n\nIt is important to close a FileWriter after using it to avoid a resource leak. This is done by invoking the close method:\n\nwriter.close();\n\n\n1\n\n\nSince Java 7, a convenient way to close an object of FileWriter is to use the try-with-resources statement.\n\nFile file = new File("/home/username/path/to/your/file.txt");\n\ntry (FileWriter writer = new FileWriter(file)) {\n    writer.write("Hello, World");\n} catch (IOException e) {\n    System.out.printf("An exception occurred %s", e.getMessage());\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nIt will close the writer automatically.\n\n\n# The PrintWriter class\n\nThe PrintWriter class allows you to write formatted data to a file. It can output strings, primitive types and even an array of characters. The class provides several overloaded methods: print, println and printf.\n\nFile file = new File("/home/art/Documents/file.txt");\ntry (PrintWriter printWriter = new PrintWriter(file)) {\n    printWriter.print("Hello"); // prints a string\n    printWriter.println("Java"); // prints a string and then terminates the line\n    printWriter.println(123); // prints a number\n    printWriter.printf("You have %d %s", 400, "gold coins"); // prints a formatted string\n} catch (IOException e) {\n    System.out.printf("An exception occurred %s", e.getMessage());\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nThis example first creates an instance of File and, second, a PrintWriter in the try-with-resources statement to close it correctly. It writes "Hello"and "Java" on the same line, and then 123 on a new line. This example also calls the advanced printf method which can format a text using %d, %s and so on. Finally, the PrintWriter is closed.\n\nThe result contains:\n\nHelloJava\n123\nYou have 400 gold coins\n\n\n1\n2\n3\n\n\nThe class has several constructors. Some of them are similar to FileWriter\'s constructors:\n\n * PrintWriter(String fileName);\n * PrintWriter(File file).\n\nOthers allow to pass FileWriter as a class that extends the Writer abstract class:\n\n * PrintWriter(Writer writer).\n\n\n# Conclusion\n\nFileWriter and PrintWriter both extend the Writer abstract class and have many similarities. However, PrintWriter is more of a high-level one and provides several useful methods. Among them are formatting methods and overloaded print methods for writing primitive types.',normalizedContent:'now that we\'ve learned how to create and manage files, let\'s discuss how to write text to a file. java provides different ways for doing it, and in this lesson, we will consider two of the simplest ways: using the java.io.filewriter and the java.io.printwriter classes.\n\n\n# the filewriter class\n\nthe class filewriter has a set of constructors to write characters and strings to a specified file:\n\n * filewriter(string filename);\n * filewriter(string filename, boolean append);\n * filewriter(file file);\n * filewriter(file file, boolean append);\n\ntwo constructors take an additional parameter append that indicates whether to append (true) or overwrite (false) an existing file.\n\nall these constructors can throw an ioexception for several reasons:\n\n * if the named file exists but it is a directory;\n * if a file does not exist and cannot be created;\n * if a file exists but cannot be opened.\n\nin this lesson, sometimes we will skip the exception handling mechanism to simplify our examples.\n\nlet\'s consider the following code:\n\nfile file = new file("/home/username/path/to/your/file.txt");\nfilewriter writer = new filewriter(file); // overwrites the file\n\nwriter.write("hello");\nwriter.write("java");\n\nwriter.close();\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nif the specified file does not exist, it will be created after executing this code. if the file already exists, this code overwrites the data.\n\nthe file will contain the text hellojava.\n\nif you want to append some new data, you should specify the second argument as true.\n\nfile file = new file("/home/username/path/to/your/file.txt");\nfilewriter writer = new filewriter(file, true); // appends text to the file\n\nwriter.write("hello, world\\n");\nwriter.close();\n\n\n1\n2\n3\n4\n5\n\n\nthis code appends a new line to the file. run it multiple times to see what happens. note that here we are using unix-like os line breaks. there is a difference between line break characters on different platforms:\n\n * \\n unix-like os\n * \\r\\n windows os\n\n\n# closing a filewriter\n\nit is important to close a filewriter after using it to avoid a resource leak. this is done by invoking the close method:\n\nwriter.close();\n\n\n1\n\n\nsince java 7, a convenient way to close an object of filewriter is to use the try-with-resources statement.\n\nfile file = new file("/home/username/path/to/your/file.txt");\n\ntry (filewriter writer = new filewriter(file)) {\n    writer.write("hello, world");\n} catch (ioexception e) {\n    system.out.printf("an exception occurred %s", e.getmessage());\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nit will close the writer automatically.\n\n\n# the printwriter class\n\nthe printwriter class allows you to write formatted data to a file. it can output strings, primitive types and even an array of characters. the class provides several overloaded methods: print, println and printf.\n\nfile file = new file("/home/art/documents/file.txt");\ntry (printwriter printwriter = new printwriter(file)) {\n    printwriter.print("hello"); // prints a string\n    printwriter.println("java"); // prints a string and then terminates the line\n    printwriter.println(123); // prints a number\n    printwriter.printf("you have %d %s", 400, "gold coins"); // prints a formatted string\n} catch (ioexception e) {\n    system.out.printf("an exception occurred %s", e.getmessage());\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nthis example first creates an instance of file and, second, a printwriter in the try-with-resources statement to close it correctly. it writes "hello"and "java" on the same line, and then 123 on a new line. this example also calls the advanced printf method which can format a text using %d, %s and so on. finally, the printwriter is closed.\n\nthe result contains:\n\nhellojava\n123\nyou have 400 gold coins\n\n\n1\n2\n3\n\n\nthe class has several constructors. some of them are similar to filewriter\'s constructors:\n\n * printwriter(string filename);\n * printwriter(file file).\n\nothers allow to pass filewriter as a class that extends the writer abstract class:\n\n * printwriter(writer writer).\n\n\n# conclusion\n\nfilewriter and printwriter both extend the writer abstract class and have many similarities. however, printwriter is more of a high-level one and provides several useful methods. among them are formatting methods and overloaded print methods for writing primitive types.',charsets:{},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：What are streams",frontmatter:{title:"Theory：What are streams",date:"2022-08-12T17:34:41.000Z",permalink:"/pages/0fced5/",tags:["Stream",null]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/05.IO%20&%20Stream/93.Theory%EF%BC%9AWhat%20are%20streams.html",relativePath:"01.Java/01.Hyperskill - Java/05.IO & Stream/93.Theory：What are streams.md",key:"v-166a75b0",path:"/pages/0fced5/",headers:[{level:2,title:"Input and output streams",slug:"input-and-output-streams",normalizedTitle:"input and output streams",charIndex:229},{level:2,title:"Byte and char streams",slug:"byte-and-char-streams",normalizedTitle:"byte and char streams",charIndex:768},{level:2,title:"Buffered streams",slug:"buffered-streams",normalizedTitle:"buffered streams",charIndex:1251}],headersStr:"Input and output streams Byte and char streams Buffered streams",content:"Sometimes your program should process data located outside it or save results to an external destination. Java provides an abstraction called stream that unifies work with disks, files, network locations and other resources.\n\n\n# Input and output streams\n\nIn some sense, a Java stream is similar to a real-world water stream which has a beginning (source) and an end (destination). Based on the same principles, IO streams can be categorized into two groups:\n\n * input stream, which reads data from a source;\n * output stream, which writes data to a specified destination.\n\nThe picture below demonstrates it.\n\n\n\nIn fact, you've already known two specific examples of IO streams: System.in and System.out. We used them to read/write data from/to the console before.\n\n\n# Byte and char streams\n\nStreams can be further classified into two categories based on how they represent sequences of data:\n\n * byte streams that are used to read and write data in bytes;\n * char streams that are used to read and write data in characters according to the 16-bit Unicode format.\n\nChar streams make processing text data much easier for programmers. In comparison with them, byte streams are quite low-level but can work with data of any type including multimedia.\n\n\n# Buffered streams\n\nSome streams use a temporary memory location. At first, such streams read or write data to a temporary location, and then data is moved on to a source or destination from it. This temporary location is typically a byte or character array called a buffer, and the whole process is called buffering. The reason why an intermediate memory location is introduced is that appealing to some sources or destinations takes a substantial time interval. So buffering is a kind of optimization that minimizes the number of interactions with them.\n\nLet's see how buffering works in output streams. When you write data to the stream, it is first accumulated in a buffer. Once the buffer is full, the whole stored data is written to the destination.\n\nSome input streams also have a buffering feature. When a stream reads data for the first time, it reads as much as a buffer can hold. Even if only a few bytes or characters were requested, the buffered input stream will read bytes until the buffer is full. The next reading first checks if there is any unread data in the buffer. In case the buffer contains some unread data, the stream takes it from the buffer and does not have to interact with the source. Otherwise, it requests data from the source like the first time.\n\nNow let’s do a few exercises and have a look at streams in detail.",normalizedContent:"sometimes your program should process data located outside it or save results to an external destination. java provides an abstraction called stream that unifies work with disks, files, network locations and other resources.\n\n\n# input and output streams\n\nin some sense, a java stream is similar to a real-world water stream which has a beginning (source) and an end (destination). based on the same principles, io streams can be categorized into two groups:\n\n * input stream, which reads data from a source;\n * output stream, which writes data to a specified destination.\n\nthe picture below demonstrates it.\n\n\n\nin fact, you've already known two specific examples of io streams: system.in and system.out. we used them to read/write data from/to the console before.\n\n\n# byte and char streams\n\nstreams can be further classified into two categories based on how they represent sequences of data:\n\n * byte streams that are used to read and write data in bytes;\n * char streams that are used to read and write data in characters according to the 16-bit unicode format.\n\nchar streams make processing text data much easier for programmers. in comparison with them, byte streams are quite low-level but can work with data of any type including multimedia.\n\n\n# buffered streams\n\nsome streams use a temporary memory location. at first, such streams read or write data to a temporary location, and then data is moved on to a source or destination from it. this temporary location is typically a byte or character array called a buffer, and the whole process is called buffering. the reason why an intermediate memory location is introduced is that appealing to some sources or destinations takes a substantial time interval. so buffering is a kind of optimization that minimizes the number of interactions with them.\n\nlet's see how buffering works in output streams. when you write data to the stream, it is first accumulated in a buffer. once the buffer is full, the whole stored data is written to the destination.\n\nsome input streams also have a buffering feature. when a stream reads data for the first time, it reads as much as a buffer can hold. even if only a few bytes or characters were requested, the buffered input stream will read bytes until the buffer is full. the next reading first checks if there is any unread data in the buffer. in case the buffer contains some unread data, the stream takes it from the buffer and does not have to interact with the source. otherwise, it requests data from the source like the first time.\n\nnow let’s do a few exercises and have a look at streams in detail.",charsets:{},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：Input streams",frontmatter:{title:"Theory：Input streams",date:"2022-08-15T11:37:08.000Z",permalink:"/pages/3f7bd2/",tags:["Stream",null]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/05.IO%20&%20Stream/94.Theory%EF%BC%9AInput%20streams.html",relativePath:"01.Java/01.Hyperskill - Java/05.IO & Stream/94.Theory：Input streams.md",key:"v-77a4a72f",path:"/pages/3f7bd2/",headers:[{level:2,title:"Sources",slug:"sources",normalizedTitle:"sources",charIndex:373},{level:2,title:"Character streams",slug:"character-streams",normalizedTitle:"character streams",charIndex:769},{level:2,title:"Example of a character stream",slug:"example-of-a-character-stream",normalizedTitle:"example of a character stream",charIndex:2201},{level:2,title:"Byte streams",slug:"byte-streams",normalizedTitle:"byte streams",charIndex:4467},{level:2,title:"Example of a byte stream",slug:"example-of-a-byte-stream",normalizedTitle:"example of a byte stream",charIndex:5722},{level:2,title:"Testing input streams",slug:"testing-input-streams",normalizedTitle:"testing input streams",charIndex:6479},{level:2,title:"What type of stream should I use?",slug:"what-type-of-stream-should-i-use",normalizedTitle:"what type of stream should i use?",charIndex:7370},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:8210}],headersStr:"Sources Character streams Example of a character stream Byte streams Example of a byte stream Testing input streams What type of stream should I use? Conclusion",content:"As a rule, every program consumes some data as a way to communicate with the outer world. It can be a user input from the console, a configuration file, or something else. Java has a common mechanism for consuming data called input streams. We have already provided some text as data for our programs, and now it is time to dive deeper and explore the whole mechanism.\n\n\n# Sources\n\nData can be obtained from many points considered as providers. Besides standard input or files, those can be network connections, in-memory buffers, or even objects. All of them are called sources for input streams. In fact, a source is any data that can be consumed and processed by a program. Working with data is quite a specific thing, and each source needs a specialized class.\n\n\n# Character streams\n\nThere are several classes for reading text. They are called character input streams and allow reading text data: char or String. For instance, there are FileReader, CharArrayReader, StringReader, etc.\n\n提示\n\nThe class name indicates what type of source it uses as input and usually ends with Reader, since all such classes extend the java.io.Reader class.\n\nEach class provides a set of useful methods while they also have common methods for reading data:\n\n * int read() reads a single character. If the end of the stream is reached, the method returns the value -1. Otherwise, it returns the numerical representation of the character according to the current encoding;\n * int read(char[] cbuf) reads a sequence of characters into the passed array up to its capacity and returns the number of characters that were actually read. It can also return -1 in case no data was read;\n * int read(char[] cbuf, int off, int len) reads characters into a portion of an array.\n\nThese methods return the number of characters that were actually read or -1. They also block the program from running until some input is available or the end of the stream is reached.\n\nAnother important method is void close() that should be invoked after a stream was used.\n\n提示\n\nIf you're familiar with the try-with-resources construction, you know it is a better way to prevent resource leaks. For now, we're skipping it for learning purposes.\n\n\n# Example of a character stream\n\nLet's consider FileReader as an example of the Reader classes. FileReader has a set of constructors. Here are some of them:\n\n * new FileReader(String fileName)\n * new FileReader(String fileName, Charset charset)\n * new FileReader(File file)\n * new FileReader(File file, Charset charset)\n\nAs you can see, it can read text data from the file indicated either by a path String or as a File object.\n\n提示\n\nA charset is a class that declares the encoding from sequences of bytes to characters. By default, java uses the UTF-16 encoding, suitable for most tasks. However, sometimes the file may have another encoding and you'll have to use a different charset to read the content of the file properly.\n\nNow let's try to read a file. Say we have a file file.txt with the following content: input stream.\n\nReader reader = new FileReader(\"file.txt\");\n\nchar first = (char) reader.read(); // i\nchar second = (char) reader.read(); // n\n\nchar[] others = new char[12];\nint number = reader.read(others); // 10\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nAfter running the code, others will contain ['p', 'u', 't', ' ', 's', 't', 'r', 'e', 'a', 'm', '\\u0000', '\\u0000'].\n\nLet's explain the result. Since we've read the first two letters into other variables, the first 10 characters of others are filled starting from the third letter. When the stream reached the end of the file it stopped reading, so the last two characters are not updated.\n\nWhen you create an empty array it is actually filled with default values, which are '\\u0000' for a char array. This is the reason why the last 2 elements of others are '\\u0000'.\n\nThe tricky thing here is that '\\u0000' is interpreted as an empty symbol and not displayed at all, although technically it is present. Remember that when you read data into an array.\n\nAnother common way of reading a text data stream is to read it char by char until the stream is closed:\n\nFileReader reader = new FileReader(\"file.txt\");\n\nint charAsNumber = reader.read();\nwhile(charAsNumber != -1) {\n    char character = (char) charAsNumber;\n    System.out.print(character);\n    charAsNumber = reader.read();\n}\nreader.close();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nWhen -1 is returned, it means the end of stream was reached, so that is there's nothing left to read.\n\n\n# Byte streams\n\nByte streams may seem more complicated so let's start with something you already know. To read some text data from the standard input we may create a Scanner instance. You are familiar with the process:\n\nScanner scanner = new Scanner(System.in);\n\n\n1\n\n\nSystem.in here is actually an example of a byte input stream. There are other specialized byte stream classes: ByteArrayInputStream is used for reading from byte[], FileInputStream is dedicated for files, AudioInputStream is a way of consuming audio input and there's more.\n\n提示\n\nThe class name of a byte stream indicates what type of source it uses as input and usually ends with InputStream, since all such classes extend the java.io.InputStreamclass.\n\nAll byte stream classes have methods for reading similar to character input streams:\n\n * abstract int read() reads a single byte;\n * int read(byte[] b) reads a number of bytes and stores them in a byte array;\n * byte[] readAllBytes() reads all bytes.\n\nThe method that reads bytes into an array, returns an int value. It is the number of bytes that were actually read from the source. If -1 value is returned it is a sign that no bytes were read.\n\nEach input stream class also has a void close() method to release system resources.\n\n\n# Example of a byte stream\n\nSuppose we have a file file.txt that contains the following text: input stream. Let's read it using the FileInputStream class. It can be created by using several constructors, such as:\n\n * new FileInputStream(String pathToFile)\n * new FileInputStream(File file)\n\nHere we create a file input stream by specifying the name of the file:\n\nFileInputStream inputStream = new FileInputStream(\"myfile.txt\");\n\n\n1\n\n\nWe are going to read the first five bytes:\n\nbyte[] bytes = new byte[5];\nint numberOfBytes = inputStream.read(bytes);\nSystem.out.println(numberOfBytes); // 5\ninputStream.close();\n\n\n1\n2\n3\n4\n\n\nNow bytescontains ['i', 'n', 'p', 'u', 't'].\n\nThe byte-by-byte approach also works here, similar to the character streams example.\n\n\n# Testing input streams\n\nIn previous examples, we were considering reading data from files to show you how it is done. You can try it yourself at any moment. However, in the following coding problems, we are going to ask you to read data from standard input by other input streams classes.\n\nAnd there are some things to keep in mind.\n\nWhen testing your programs in IDE, you type the text and then press Enter to push the typed text into the input stream, like when you did with Scanner. In this case, the end-of-line symbol is also appended as the last symbol of the typed sequence of characters and will be read into an array if that's what you do.\n\n注意\n\nPressing Enter doesn't close the input stream*.* It is still opened and waits for input. To actually close the input stream you need to produce an end-of-file event. In IDEA, you should press Ctrl+D (Windows and Linux) or +D (MacOS).\n\n\n# What type of stream should I use?\n\nThe main difference between byte and character streams is that byte ones read input data as bytes while character ones work with characters.\n\nA computer understands only sequences of bytes. From this perspective, any data is a set of bytes and byte input streams are a common way of reading any kind of data. For computers, characters are still combinations of bytes defined by a charset specification.\n\nOn the contrary, as human beings, we are used to dealing with sequences of characters. Character input streams are aimed to read data which consists of characters. Under the hood, they still read bytes, but they immediately encode bytes to characters.\n\nIf you need to read a text, use character input streams. Otherwise, for example, while reading audio, video, zip, etc., use byte input streams.\n\n\n# Conclusion\n\nInput streams provide a way to read data from a source. The source is a data provider like a console, standard input, a file, a string, or even a network connection. There are two types of sources: byte and character ones. Character input streams are intended for reading text only. Byte input streams allow reading sequences of raw bytes. Character input stream classes usually end with Reader. Similarly, byte input streams end with InputStream.",normalizedContent:"as a rule, every program consumes some data as a way to communicate with the outer world. it can be a user input from the console, a configuration file, or something else. java has a common mechanism for consuming data called input streams. we have already provided some text as data for our programs, and now it is time to dive deeper and explore the whole mechanism.\n\n\n# sources\n\ndata can be obtained from many points considered as providers. besides standard input or files, those can be network connections, in-memory buffers, or even objects. all of them are called sources for input streams. in fact, a source is any data that can be consumed and processed by a program. working with data is quite a specific thing, and each source needs a specialized class.\n\n\n# character streams\n\nthere are several classes for reading text. they are called character input streams and allow reading text data: char or string. for instance, there are filereader, chararrayreader, stringreader, etc.\n\n提示\n\nthe class name indicates what type of source it uses as input and usually ends with reader, since all such classes extend the java.io.reader class.\n\neach class provides a set of useful methods while they also have common methods for reading data:\n\n * int read() reads a single character. if the end of the stream is reached, the method returns the value -1. otherwise, it returns the numerical representation of the character according to the current encoding;\n * int read(char[] cbuf) reads a sequence of characters into the passed array up to its capacity and returns the number of characters that were actually read. it can also return -1 in case no data was read;\n * int read(char[] cbuf, int off, int len) reads characters into a portion of an array.\n\nthese methods return the number of characters that were actually read or -1. they also block the program from running until some input is available or the end of the stream is reached.\n\nanother important method is void close() that should be invoked after a stream was used.\n\n提示\n\nif you're familiar with the try-with-resources construction, you know it is a better way to prevent resource leaks. for now, we're skipping it for learning purposes.\n\n\n# example of a character stream\n\nlet's consider filereader as an example of the reader classes. filereader has a set of constructors. here are some of them:\n\n * new filereader(string filename)\n * new filereader(string filename, charset charset)\n * new filereader(file file)\n * new filereader(file file, charset charset)\n\nas you can see, it can read text data from the file indicated either by a path string or as a file object.\n\n提示\n\na charset is a class that declares the encoding from sequences of bytes to characters. by default, java uses the utf-16 encoding, suitable for most tasks. however, sometimes the file may have another encoding and you'll have to use a different charset to read the content of the file properly.\n\nnow let's try to read a file. say we have a file file.txt with the following content: input stream.\n\nreader reader = new filereader(\"file.txt\");\n\nchar first = (char) reader.read(); // i\nchar second = (char) reader.read(); // n\n\nchar[] others = new char[12];\nint number = reader.read(others); // 10\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nafter running the code, others will contain ['p', 'u', 't', ' ', 's', 't', 'r', 'e', 'a', 'm', '\\u0000', '\\u0000'].\n\nlet's explain the result. since we've read the first two letters into other variables, the first 10 characters of others are filled starting from the third letter. when the stream reached the end of the file it stopped reading, so the last two characters are not updated.\n\nwhen you create an empty array it is actually filled with default values, which are '\\u0000' for a char array. this is the reason why the last 2 elements of others are '\\u0000'.\n\nthe tricky thing here is that '\\u0000' is interpreted as an empty symbol and not displayed at all, although technically it is present. remember that when you read data into an array.\n\nanother common way of reading a text data stream is to read it char by char until the stream is closed:\n\nfilereader reader = new filereader(\"file.txt\");\n\nint charasnumber = reader.read();\nwhile(charasnumber != -1) {\n    char character = (char) charasnumber;\n    system.out.print(character);\n    charasnumber = reader.read();\n}\nreader.close();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nwhen -1 is returned, it means the end of stream was reached, so that is there's nothing left to read.\n\n\n# byte streams\n\nbyte streams may seem more complicated so let's start with something you already know. to read some text data from the standard input we may create a scanner instance. you are familiar with the process:\n\nscanner scanner = new scanner(system.in);\n\n\n1\n\n\nsystem.in here is actually an example of a byte input stream. there are other specialized byte stream classes: bytearrayinputstream is used for reading from byte[], fileinputstream is dedicated for files, audioinputstream is a way of consuming audio input and there's more.\n\n提示\n\nthe class name of a byte stream indicates what type of source it uses as input and usually ends with inputstream, since all such classes extend the java.io.inputstreamclass.\n\nall byte stream classes have methods for reading similar to character input streams:\n\n * abstract int read() reads a single byte;\n * int read(byte[] b) reads a number of bytes and stores them in a byte array;\n * byte[] readallbytes() reads all bytes.\n\nthe method that reads bytes into an array, returns an int value. it is the number of bytes that were actually read from the source. if -1 value is returned it is a sign that no bytes were read.\n\neach input stream class also has a void close() method to release system resources.\n\n\n# example of a byte stream\n\nsuppose we have a file file.txt that contains the following text: input stream. let's read it using the fileinputstream class. it can be created by using several constructors, such as:\n\n * new fileinputstream(string pathtofile)\n * new fileinputstream(file file)\n\nhere we create a file input stream by specifying the name of the file:\n\nfileinputstream inputstream = new fileinputstream(\"myfile.txt\");\n\n\n1\n\n\nwe are going to read the first five bytes:\n\nbyte[] bytes = new byte[5];\nint numberofbytes = inputstream.read(bytes);\nsystem.out.println(numberofbytes); // 5\ninputstream.close();\n\n\n1\n2\n3\n4\n\n\nnow bytescontains ['i', 'n', 'p', 'u', 't'].\n\nthe byte-by-byte approach also works here, similar to the character streams example.\n\n\n# testing input streams\n\nin previous examples, we were considering reading data from files to show you how it is done. you can try it yourself at any moment. however, in the following coding problems, we are going to ask you to read data from standard input by other input streams classes.\n\nand there are some things to keep in mind.\n\nwhen testing your programs in ide, you type the text and then press enter to push the typed text into the input stream, like when you did with scanner. in this case, the end-of-line symbol is also appended as the last symbol of the typed sequence of characters and will be read into an array if that's what you do.\n\n注意\n\npressing enter doesn't close the input stream*.* it is still opened and waits for input. to actually close the input stream you need to produce an end-of-file event. in idea, you should press ctrl+d (windows and linux) or +d (macos).\n\n\n# what type of stream should i use?\n\nthe main difference between byte and character streams is that byte ones read input data as bytes while character ones work with characters.\n\na computer understands only sequences of bytes. from this perspective, any data is a set of bytes and byte input streams are a common way of reading any kind of data. for computers, characters are still combinations of bytes defined by a charset specification.\n\non the contrary, as human beings, we are used to dealing with sequences of characters. character input streams are aimed to read data which consists of characters. under the hood, they still read bytes, but they immediately encode bytes to characters.\n\nif you need to read a text, use character input streams. otherwise, for example, while reading audio, video, zip, etc., use byte input streams.\n\n\n# conclusion\n\ninput streams provide a way to read data from a source. the source is a data provider like a console, standard input, a file, a string, or even a network connection. there are two types of sources: byte and character ones. character input streams are intended for reading text only. byte input streams allow reading sequences of raw bytes. character input stream classes usually end with reader. similarly, byte input streams end with inputstream.",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：Errors in programs",frontmatter:{title:"Theory：Errors in programs",date:"2022-05-02T09:48:28.000Z",permalink:"/pages/5fc0af/",tags:["Java","Exception"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/06.Error%20&%20Exception/28.Theory%EF%BC%9AErrors%20in%20programs.html",relativePath:"01.Java/01.Hyperskill - Java/06.Error & Exception/28.Theory：Errors in programs.md",key:"v-07a02de6",path:"/pages/5fc0af/",headers:[{level:2,title:"Compile-time errors",slug:"compile-time-errors",normalizedTitle:"compile-time errors",charIndex:264},{level:2,title:"Run-time errors",slug:"run-time-errors",normalizedTitle:"run-time errors",charIndex:1419},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:2505}],headersStr:"Compile-time errors Run-time errors Conclusion",content:'Suppose, you\'re writing a Java program. Different errors may occur during its compilation or execution. We will divide all possible errors into two groups: compile-time errors and run-time errors.\n\nLet\'s look at cases where errors occur and how to avoid them.\n\n\n# Compile-time errors\n\nCompile-time errors are errors that prevent a Java program from being compiled:\n\n * a syntax error: incorrect keyword, a forgotten symbol ; at the end of a statement;\n * a bad source code file name;\n * invoking a non-existing method;\n * and many others.\n\nConsider an example of compile-time errors. The following program should output the string "Hello!" but it does not compile.\n\npublic class MyClass {\n\n    public ztatic void main(String args[]) {\n        System.out.printn("Hello!");\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\nThere are two errors in this program:\n\n * a typo in the keyword static;\n * incorrect name of the method println.\n\nIf you fix these mistakes, it will be possible to compile this program.\n\nTo avoid such errors, programmers use a modern IDE (Integrated Development Environment) with a static code analyzer. This tool allows programmers to identify compile-time errors before the compilation. In addition, it is able to highlight warnings about more complex errors and weak places in your code, as well as tips on how to improve the code.\n\nOver time, you will write code that contains fewer or even no compile-time errors.\n\n\n# Run-time errors\n\nRun-time errors (also known as "bugs") are errors that occur when the program is running. Run-time errors will cause your program to behave unexpectedly or may even stop the execution.\n\nThere are two subtypes of run-time errors:\n\n * logic errors – when a program produces a wrong result because the code is not correct (for example, instead of "Hello!", your program outputs "Hi!");\n * unhandled exceptional events like division by zero, not found files, and other unexpected cases.\n\nWe will learn how to handle exceptional events (exceptions) in further lessons.\n\nAvoiding such run-time errors is a more difficult task than avoiding compile-time errors. If your program compiles successfully, there are no guarantees that it does not have bugs. There are different strategies to find such errors:\n\n * to debug your program;\n * to write automatic tests for your program;\n * to use the practice of code review as part of the development process. In general, this practice stands for a case, when one or more developers visually inspect the source code of a program.\n\n\n# Conclusion\n\n * Compile-time errors happen when a program fails to compile. They include typos and incorrect method invocations.\n * Static code analyzers in IDEs help to spot compile-time errors before program compilation.\n * Run-time errors, or bugs, occur after compilation when a program is running. They may result in unexpected program behavior and crashes.\n * Debugging is a useful instrument to identify run-time errors in your program.',normalizedContent:'suppose, you\'re writing a java program. different errors may occur during its compilation or execution. we will divide all possible errors into two groups: compile-time errors and run-time errors.\n\nlet\'s look at cases where errors occur and how to avoid them.\n\n\n# compile-time errors\n\ncompile-time errors are errors that prevent a java program from being compiled:\n\n * a syntax error: incorrect keyword, a forgotten symbol ; at the end of a statement;\n * a bad source code file name;\n * invoking a non-existing method;\n * and many others.\n\nconsider an example of compile-time errors. the following program should output the string "hello!" but it does not compile.\n\npublic class myclass {\n\n    public ztatic void main(string args[]) {\n        system.out.printn("hello!");\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\nthere are two errors in this program:\n\n * a typo in the keyword static;\n * incorrect name of the method println.\n\nif you fix these mistakes, it will be possible to compile this program.\n\nto avoid such errors, programmers use a modern ide (integrated development environment) with a static code analyzer. this tool allows programmers to identify compile-time errors before the compilation. in addition, it is able to highlight warnings about more complex errors and weak places in your code, as well as tips on how to improve the code.\n\nover time, you will write code that contains fewer or even no compile-time errors.\n\n\n# run-time errors\n\nrun-time errors (also known as "bugs") are errors that occur when the program is running. run-time errors will cause your program to behave unexpectedly or may even stop the execution.\n\nthere are two subtypes of run-time errors:\n\n * logic errors – when a program produces a wrong result because the code is not correct (for example, instead of "hello!", your program outputs "hi!");\n * unhandled exceptional events like division by zero, not found files, and other unexpected cases.\n\nwe will learn how to handle exceptional events (exceptions) in further lessons.\n\navoiding such run-time errors is a more difficult task than avoiding compile-time errors. if your program compiles successfully, there are no guarantees that it does not have bugs. there are different strategies to find such errors:\n\n * to debug your program;\n * to write automatic tests for your program;\n * to use the practice of code review as part of the development process. in general, this practice stands for a case, when one or more developers visually inspect the source code of a program.\n\n\n# conclusion\n\n * compile-time errors happen when a program fails to compile. they include typos and incorrect method invocations.\n * static code analyzers in ides help to spot compile-time errors before program compilation.\n * run-time errors, or bugs, occur after compilation when a program is running. they may result in unexpected program behavior and crashes.\n * debugging is a useful instrument to identify run-time errors in your program.',charsets:{},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：Try with resources",frontmatter:{title:"Theory：Try with resources",date:"2022-08-15T20:09:09.000Z",permalink:"/pages/6a8e23/",tags:["Stream","Java"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/05.IO%20&%20Stream/95.Theory%EF%BC%9ATry%20with%20resources.html",relativePath:"01.Java/01.Hyperskill - Java/05.IO & Stream/95.Theory：Try with resources.md",key:"v-7c9be7fc",path:"/pages/6a8e23/",headers:[{level:2,title:"Why close?",slug:"why-close",normalizedTitle:"why close?",charIndex:205},{level:2,title:"Pitfalls",slug:"pitfalls",normalizedTitle:"pitfalls",charIndex:843},{level:2,title:"Solution",slug:"solution",normalizedTitle:"solution",charIndex:3608},{level:2,title:"Closeable resources",slug:"closeable-resources",normalizedTitle:"closeable resources",charIndex:5643},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:6816}],headersStr:"Why close? Pitfalls Solution Closeable resources Conclusion",content:'We have mentioned that input streams should be closed after they were used. Let\'s discuss what happens when you\'re working with outside resources: how closing can be performed and why it is important.\n\n\n# Why close?\n\nWhen an input stream is created, the JVM notifies the OS about its intention to work with a file. If the JVM process has enough permissions and everything is fine, the OS returns a file descriptor — a special indicator used by a process to access the file. The problem is that the number of file descriptors is limited. This is a reason why it is important to notify the OS that the job is done and the file descriptor that is held can be released for further reusing. In previous examples, we invoked the method close for this purpose. Once it is called, the JVM releases all system resources associated with the stream.\n\n\n# Pitfalls\n\nResource releasing works if the JVM calls the close method, but it is possible that the method will not be called at all.\n\nLook at the example:\n\nReader reader = new FileReader("file.txt");\n// code which may throw an exception\nreader.close();\n\n\n1\n2\n3\n\n\nSuppose something goes wrong before the close invocation and an exception is thrown. It leads to a situation in which the method will never be called and system resources won\'t be released. It is possible to solve the problem by using the try-catch-finally construction:\n\nReader reader = null;\n\ntry {\n    reader = new FileReader("file.txt");\n    // code which may throw an exception\n} finally {\n    reader.close();\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nIn this and the following examples, we assume that file.txt exists and do not check the instance of Reader for null in the finally block. It is done to keep the code snippet as simple as possible, but it is not safe in the case of a real application.\n\nThrown exceptions cannot affect the invocation of the close method now.\n\nUnfortunately, this solution still has some problems. That is, the close method can potentially raise exceptions itself. Suppose, now there are two exceptions: the first was raised inside the try section, and the second was thrown by the finally section. It leads to the loss of the first exception. Let\'s see why this happens:\n\nvoid readFile() throws IOException {\n    Reader reader = null;\n    try {\n        reader = new FileReader("file.txt");\n        throw new RuntimeException("Exception1");\n    } finally {\n        reader.close(); // throws new RuntimeException("Exception2")\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nFirst, the try block throws an exception. As we know, the finally block is invoked anyway. In our example, now the close method throws an exception. When two exceptions occur, which one is thrown outside the method? It will be the last one: Exception2 in our case. It means we will never know that the try block raised an exception at all.\n\nLet\'s try to reason and fix this. Ok, we don\'t want to lose the first exception, so we upgrade the code a little bit and handle Exception2 right after it was thrown:\n\nvoid readFile() throws IOException {\n    Reader reader = null;\n    try {\n        reader = new FileReader("file.txt");\n        throw new RuntimeException("Exception1");\n    } finally {\n        try {\n            reader.close(); // throws new RuntimeException("Exception2")\n        } catch (Exception e) {\n            // handle the Exception2\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\nNow, the piece of code throws Exception1 outside. It may be correct, but we still do not save information on both exceptions, and sometimes we don\'t want to lose it. So now, let\'s see how we can handle this situation nicely.\n\n\n# Solution\n\nA simple and reliable way called try-with-resources was introduced in Java 7.\n\ntry (Reader reader = new FileReader("file.txt")) {\n    // some code\n}\n\n\n1\n2\n3\n\n\nThis construction has two parts enclosed by round and curly brackets. Round brackets contain statements that create an input stream instance. It is possible to create several objects as well. The code below is also fine:\n\ntry (Reader reader1 = new FileReader("file1.txt");\n     Reader reader2 = new FileReader("file2.txt")) {\n    // some code\n}\n\n\n1\n2\n3\n4\n\n\nThe second part just contains some code for dealing with the object that was created in the first part.\n\nAs you see, there are no explicit calls of the close method at all. It is implicitly invoked for all objects declared in the first part. The construction guarantees closing all resources in a proper way.\n\nSince Java 9, you may initialize an input stream outside the construction and then declare it in round brackets:\n\nReader reader = new FileReader("file.txt");\ntry (reader) {\n    // some code\n}\n\n\n1\n2\n3\n4\n\n\nSurely we do our best to write error-free programs. However, it is difficult to foresee all possible problems. The best practice is to wrap any code dealing with system resources by the try-with-resources construction\n\nYou may also use try-with-resources as a part of try-catch-finally like this:\n\ntry (Reader reader = new FileReader("file.txt")) {\n    // some code\n} catch(IOException e) {\n    ...\n} finally {\n    ...\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nNow let\'s go back to our two-exceptions case. If both the try block and close method throw exceptions Exception1 and Exception2:\n\nvoid readFile() throws IOException {\n    try (Reader reader = new FileReader("file.txt")) {\n        throw new RuntimeException("Exception1");\n    }\n}\n\n\n1\n2\n3\n4\n5\n\n\nthe method throws the resulting exception, which comprises information on both exceptions. It looks like this:\n\nException in thread "main" java.lang.RuntimeException: Exception1\n\tat ...\n\tSuppressed: java.lang.RuntimeException: Exception2\n\t\tat ...\n\n\n1\n2\n3\n4\n\n\n\n# Closeable resources\n\nWe have dealt with a file input stream to demonstrate how try-with-resources is used. However, not only resources based on files should be released. Closing is crucial for other outside sources like web or database connections. Classes that handle them have a close method and therefore can be wrapped by the try-with-resources statement.\n\nFor example, let\'s consider java.util.Scanner. Earlier we used Scanner for reading data from the standard input, but it can read data from a file as well. Scanner has a close method for releasing outside sources.\n\nLet\'s consider an example of a program that reads two integers separated by a space from a file and prints them:\n\ntry (Scanner scanner = new Scanner(new File("file.txt"))) {\n    int first = scanner.nextInt();\n    int second = scanner.nextInt();\n    System.out.println("arguments: " + first + " " + second);\n}\n\n\n1\n2\n3\n4\n5\n\n\nSuppose something went wrong and the file content is 123 not_number, where the second argument is a String. It leads to a java.util.InputMismatchException while parsing the second argument. Try-with-resources guarantees that file-related resources are released properly.\n\n\n# Conclusion\n\nInappropriate resource handling may lead to serious problems. Resources associated with files, web, database, or other outside sources should be released after being used. Standard library classes dealing with outside sources have a close method for that purpose. Sometimes releasing resources in a proper way may get complicated. To simplify the process, Java 7 introduced the try-with-resources construction that does all the work for you. Do not forget to use it when you\'re dealing with system resources.',normalizedContent:'we have mentioned that input streams should be closed after they were used. let\'s discuss what happens when you\'re working with outside resources: how closing can be performed and why it is important.\n\n\n# why close?\n\nwhen an input stream is created, the jvm notifies the os about its intention to work with a file. if the jvm process has enough permissions and everything is fine, the os returns a file descriptor — a special indicator used by a process to access the file. the problem is that the number of file descriptors is limited. this is a reason why it is important to notify the os that the job is done and the file descriptor that is held can be released for further reusing. in previous examples, we invoked the method close for this purpose. once it is called, the jvm releases all system resources associated with the stream.\n\n\n# pitfalls\n\nresource releasing works if the jvm calls the close method, but it is possible that the method will not be called at all.\n\nlook at the example:\n\nreader reader = new filereader("file.txt");\n// code which may throw an exception\nreader.close();\n\n\n1\n2\n3\n\n\nsuppose something goes wrong before the close invocation and an exception is thrown. it leads to a situation in which the method will never be called and system resources won\'t be released. it is possible to solve the problem by using the try-catch-finally construction:\n\nreader reader = null;\n\ntry {\n    reader = new filereader("file.txt");\n    // code which may throw an exception\n} finally {\n    reader.close();\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nin this and the following examples, we assume that file.txt exists and do not check the instance of reader for null in the finally block. it is done to keep the code snippet as simple as possible, but it is not safe in the case of a real application.\n\nthrown exceptions cannot affect the invocation of the close method now.\n\nunfortunately, this solution still has some problems. that is, the close method can potentially raise exceptions itself. suppose, now there are two exceptions: the first was raised inside the try section, and the second was thrown by the finally section. it leads to the loss of the first exception. let\'s see why this happens:\n\nvoid readfile() throws ioexception {\n    reader reader = null;\n    try {\n        reader = new filereader("file.txt");\n        throw new runtimeexception("exception1");\n    } finally {\n        reader.close(); // throws new runtimeexception("exception2")\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nfirst, the try block throws an exception. as we know, the finally block is invoked anyway. in our example, now the close method throws an exception. when two exceptions occur, which one is thrown outside the method? it will be the last one: exception2 in our case. it means we will never know that the try block raised an exception at all.\n\nlet\'s try to reason and fix this. ok, we don\'t want to lose the first exception, so we upgrade the code a little bit and handle exception2 right after it was thrown:\n\nvoid readfile() throws ioexception {\n    reader reader = null;\n    try {\n        reader = new filereader("file.txt");\n        throw new runtimeexception("exception1");\n    } finally {\n        try {\n            reader.close(); // throws new runtimeexception("exception2")\n        } catch (exception e) {\n            // handle the exception2\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\nnow, the piece of code throws exception1 outside. it may be correct, but we still do not save information on both exceptions, and sometimes we don\'t want to lose it. so now, let\'s see how we can handle this situation nicely.\n\n\n# solution\n\na simple and reliable way called try-with-resources was introduced in java 7.\n\ntry (reader reader = new filereader("file.txt")) {\n    // some code\n}\n\n\n1\n2\n3\n\n\nthis construction has two parts enclosed by round and curly brackets. round brackets contain statements that create an input stream instance. it is possible to create several objects as well. the code below is also fine:\n\ntry (reader reader1 = new filereader("file1.txt");\n     reader reader2 = new filereader("file2.txt")) {\n    // some code\n}\n\n\n1\n2\n3\n4\n\n\nthe second part just contains some code for dealing with the object that was created in the first part.\n\nas you see, there are no explicit calls of the close method at all. it is implicitly invoked for all objects declared in the first part. the construction guarantees closing all resources in a proper way.\n\nsince java 9, you may initialize an input stream outside the construction and then declare it in round brackets:\n\nreader reader = new filereader("file.txt");\ntry (reader) {\n    // some code\n}\n\n\n1\n2\n3\n4\n\n\nsurely we do our best to write error-free programs. however, it is difficult to foresee all possible problems. the best practice is to wrap any code dealing with system resources by the try-with-resources construction\n\nyou may also use try-with-resources as a part of try-catch-finally like this:\n\ntry (reader reader = new filereader("file.txt")) {\n    // some code\n} catch(ioexception e) {\n    ...\n} finally {\n    ...\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nnow let\'s go back to our two-exceptions case. if both the try block and close method throw exceptions exception1 and exception2:\n\nvoid readfile() throws ioexception {\n    try (reader reader = new filereader("file.txt")) {\n        throw new runtimeexception("exception1");\n    }\n}\n\n\n1\n2\n3\n4\n5\n\n\nthe method throws the resulting exception, which comprises information on both exceptions. it looks like this:\n\nexception in thread "main" java.lang.runtimeexception: exception1\n\tat ...\n\tsuppressed: java.lang.runtimeexception: exception2\n\t\tat ...\n\n\n1\n2\n3\n4\n\n\n\n# closeable resources\n\nwe have dealt with a file input stream to demonstrate how try-with-resources is used. however, not only resources based on files should be released. closing is crucial for other outside sources like web or database connections. classes that handle them have a close method and therefore can be wrapped by the try-with-resources statement.\n\nfor example, let\'s consider java.util.scanner. earlier we used scanner for reading data from the standard input, but it can read data from a file as well. scanner has a close method for releasing outside sources.\n\nlet\'s consider an example of a program that reads two integers separated by a space from a file and prints them:\n\ntry (scanner scanner = new scanner(new file("file.txt"))) {\n    int first = scanner.nextint();\n    int second = scanner.nextint();\n    system.out.println("arguments: " + first + " " + second);\n}\n\n\n1\n2\n3\n4\n5\n\n\nsuppose something went wrong and the file content is 123 not_number, where the second argument is a string. it leads to a java.util.inputmismatchexception while parsing the second argument. try-with-resources guarantees that file-related resources are released properly.\n\n\n# conclusion\n\ninappropriate resource handling may lead to serious problems. resources associated with files, web, database, or other outside sources should be released after being used. standard library classes dealing with outside sources have a close method for that purpose. sometimes releasing resources in a proper way may get complicated. to simplify the process, java 7 introduced the try-with-resources construction that does all the work for you. do not forget to use it when you\'re dealing with system resources.',charsets:{},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：What is an exception",frontmatter:{title:"Theory：What is an exception",date:"2022-05-02T10:56:59.000Z",permalink:"/pages/d2856b/",tags:["Java","Exception"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/06.Error%20&%20Exception/29.Theory%EF%BC%9AWhat%20is%20an%20exception.html",relativePath:"01.Java/01.Hyperskill - Java/06.Error & Exception/29.Theory：What is an exception.md",key:"v-2b671f36",path:"/pages/d2856b/",headers:[{level:2,title:"ArithmeticException",slug:"arithmeticexception",normalizedTitle:"arithmeticexception",charIndex:491},{level:2,title:"NumberFormatException",slug:"numberformatexception",normalizedTitle:"numberformatexception",charIndex:3075},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:5833}],headersStr:"ArithmeticException NumberFormatException Conclusion",content:'Some errors in your code do not prevent the program from running. In this case, the program will only crash while trying to execute a "broken" line: a line with an error called an exception. Thus, exceptions are the errors detected during the program execution (at runtime), whereas syntax errors are those detected during compiling the program into byte-code. An exception interrupts the normal execution of a program.\n\nLet\'s consider several kinds of exceptions and how to avoid them.\n\n\n# ArithmeticException\n\nSuppose you are writing a program that reads two integers from the standard input and then outputs the result of the integer division of the first number by the second one. Look at the code below.\n\nimport java.util.Scanner;\n\npublic class ArithmeticExceptionDemo {\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        int a = scanner.nextInt();\n        int b = scanner.nextInt();\n\n        System.out.println(a / b); // an exception is possible here!\n        System.out.println("finished");\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\nIf the user passes 9 and 3 as the input values, the program outputs 3 as well as the "finished" string. But if the second number is 0, the program throws an exception because of the division by zero.\n\nException in thread "main" java.lang.ArithmeticException: / by zero\n  at ArithmeticExceptionDemo.main(ArithmeticExceptionDemo.java:11)\n\n\n1\n2\n\n\nAs you can see, the program fails with the ArithmeticException and the "finished" string is not printed at all. All the code before the exception is executed properly, and everything after is not.\n\nThe displayed message shows the cause of the exception ("/ by zero"), the file and the line number where it has occurred (ArithmeticExceptionDemo.java:11). The provided information is useful for developers, but it is not very meaningful for the end-users of the program.\n\nTo avoid the exception, we can check the value before the division, and, if the value is zero, print a message. Here is another version of the program. If the second number is zero, the program will print the "Division by zero!" string.\n\nimport java.util.Scanner;\n\npublic class ArithmeticExceptionDemo {\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        int a = scanner.nextInt();\n        int b = scanner.nextInt();\n\n        if (b == 0) {\n            System.out.println("Division by zero!");\n        } else {\n            System.out.println(a / b);\n        }\n        System.out.println("finished");\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\nLook at some input examples. Let\'s start with non-zero integers:\n\n8 4\n\n\n1\n\n\nThe program still works in the same way and the result is:\n\n2\nfinished\n\n\n1\n2\n\n\nNow if we try to input zero as a divider:\n\n3 0\n\n\n1\n\n\nThe result is:\n\nDivision by zero!\nfinished\n\n\n1\n2\n\n\nAs you can see, the new version of the program does not throw an exception and always successfully finishes. Additionally, it prints a user-friendly message instead of the standard message.\n\n\n# NumberFormatException\n\nAnother situation to consider is when you are trying to convert a string into an integer number. If the string has an unsuitable format, the code will throw an exception.\n\nThe following program reads a line from the standard input and then outputs the number that follows it.\n\nimport java.util.Scanner;\n\npublic class NumberFormatExceptionDemo {\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String input = scanner.nextLine();\n\n        int number = Integer.parseInt(input); // an exception is possible here!\n        System.out.println(number + 1);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nIt works pretty well if the input line is a correct integer number. But if the input is not correct (e.g. "121a"), the program will fail:\n\nException in thread "main" java.lang.NumberFormatException: For input string: "121a"\n  at java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)\n  at java.base/java.lang.Integer.parseInt(Integer.java:652)\n  at java.base/java.lang.Integer.parseInt(Integer.java:770)\n  at NumberFormatExceptionDemo.main(NumberFormatExceptionDemo.java:9)\n\n\n1\n2\n3\n4\n5\n\n\nThis message displays the type of exception (NumberFormatException) and the passed input string. The place where the exception occurred is shown in the last line of the message:\n\n * the filename is NumberFormatExceptionDemo.java;\n * the main method;\n * the line 9.\n\nAll the previous lines of the message show the positions inside the parseInt method that is part of the standard library.\n\nTo avoid this exception, it is possible to check the input string by using a regular expression. In case the input is not correct we can output a warning message. The following program does this:\n\nimport java.util.Scanner;\n\npublic class NumberFormatExceptionDemo {\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String input = scanner.nextLine();\n\n        if (input.matches("\\\\d+")) { // it checks if the input line contains only digits\n            int number = Integer.parseInt(input);\n            System.out.println(number + 1);\n        } else {\n            System.out.println("Incorrect number: " + input);\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\nIf the input line is "121a", the program will not stop, and it will print the message:\n\nIncorrect number: 121a\n\n\n1\n\n\n提示\n\nDon\'t worry if you don\'t know regular expressions yet. Just remember this trick.\n\nIf you have trouble understanding what the exception is, you can always copy-paste its name and google it. Moreover, you\'re strongly encouraged to do it, as 99% of troubles that learners encounter have already been solved on professional forums.\n\n\n# Conclusion\n\n * Exceptions do not prevent a program from being compiled and run, but the program crashes as soon as the line with an exception is being executed.\n * There are many types of exceptions.\n * You can use control statements to avoid some kinds of exceptions (like ArithmeticException or NumberFormatException) in your programs.\n * There is a general approach to handle exceptions and even throw them by yourself that you will learn in the next lesson.',normalizedContent:'some errors in your code do not prevent the program from running. in this case, the program will only crash while trying to execute a "broken" line: a line with an error called an exception. thus, exceptions are the errors detected during the program execution (at runtime), whereas syntax errors are those detected during compiling the program into byte-code. an exception interrupts the normal execution of a program.\n\nlet\'s consider several kinds of exceptions and how to avoid them.\n\n\n# arithmeticexception\n\nsuppose you are writing a program that reads two integers from the standard input and then outputs the result of the integer division of the first number by the second one. look at the code below.\n\nimport java.util.scanner;\n\npublic class arithmeticexceptiondemo {\n\n    public static void main(string[] args) {\n        scanner scanner = new scanner(system.in);\n\n        int a = scanner.nextint();\n        int b = scanner.nextint();\n\n        system.out.println(a / b); // an exception is possible here!\n        system.out.println("finished");\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\nif the user passes 9 and 3 as the input values, the program outputs 3 as well as the "finished" string. but if the second number is 0, the program throws an exception because of the division by zero.\n\nexception in thread "main" java.lang.arithmeticexception: / by zero\n  at arithmeticexceptiondemo.main(arithmeticexceptiondemo.java:11)\n\n\n1\n2\n\n\nas you can see, the program fails with the arithmeticexception and the "finished" string is not printed at all. all the code before the exception is executed properly, and everything after is not.\n\nthe displayed message shows the cause of the exception ("/ by zero"), the file and the line number where it has occurred (arithmeticexceptiondemo.java:11). the provided information is useful for developers, but it is not very meaningful for the end-users of the program.\n\nto avoid the exception, we can check the value before the division, and, if the value is zero, print a message. here is another version of the program. if the second number is zero, the program will print the "division by zero!" string.\n\nimport java.util.scanner;\n\npublic class arithmeticexceptiondemo {\n\n    public static void main(string[] args) {\n        scanner scanner = new scanner(system.in);\n\n        int a = scanner.nextint();\n        int b = scanner.nextint();\n\n        if (b == 0) {\n            system.out.println("division by zero!");\n        } else {\n            system.out.println(a / b);\n        }\n        system.out.println("finished");\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\nlook at some input examples. let\'s start with non-zero integers:\n\n8 4\n\n\n1\n\n\nthe program still works in the same way and the result is:\n\n2\nfinished\n\n\n1\n2\n\n\nnow if we try to input zero as a divider:\n\n3 0\n\n\n1\n\n\nthe result is:\n\ndivision by zero!\nfinished\n\n\n1\n2\n\n\nas you can see, the new version of the program does not throw an exception and always successfully finishes. additionally, it prints a user-friendly message instead of the standard message.\n\n\n# numberformatexception\n\nanother situation to consider is when you are trying to convert a string into an integer number. if the string has an unsuitable format, the code will throw an exception.\n\nthe following program reads a line from the standard input and then outputs the number that follows it.\n\nimport java.util.scanner;\n\npublic class numberformatexceptiondemo {\n\n    public static void main(string[] args) {\n        scanner scanner = new scanner(system.in);\n        string input = scanner.nextline();\n\n        int number = integer.parseint(input); // an exception is possible here!\n        system.out.println(number + 1);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nit works pretty well if the input line is a correct integer number. but if the input is not correct (e.g. "121a"), the program will fail:\n\nexception in thread "main" java.lang.numberformatexception: for input string: "121a"\n  at java.base/java.lang.numberformatexception.forinputstring(numberformatexception.java:65)\n  at java.base/java.lang.integer.parseint(integer.java:652)\n  at java.base/java.lang.integer.parseint(integer.java:770)\n  at numberformatexceptiondemo.main(numberformatexceptiondemo.java:9)\n\n\n1\n2\n3\n4\n5\n\n\nthis message displays the type of exception (numberformatexception) and the passed input string. the place where the exception occurred is shown in the last line of the message:\n\n * the filename is numberformatexceptiondemo.java;\n * the main method;\n * the line 9.\n\nall the previous lines of the message show the positions inside the parseint method that is part of the standard library.\n\nto avoid this exception, it is possible to check the input string by using a regular expression. in case the input is not correct we can output a warning message. the following program does this:\n\nimport java.util.scanner;\n\npublic class numberformatexceptiondemo {\n\n    public static void main(string[] args) {\n        scanner scanner = new scanner(system.in);\n        string input = scanner.nextline();\n\n        if (input.matches("\\\\d+")) { // it checks if the input line contains only digits\n            int number = integer.parseint(input);\n            system.out.println(number + 1);\n        } else {\n            system.out.println("incorrect number: " + input);\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\nif the input line is "121a", the program will not stop, and it will print the message:\n\nincorrect number: 121a\n\n\n1\n\n\n提示\n\ndon\'t worry if you don\'t know regular expressions yet. just remember this trick.\n\nif you have trouble understanding what the exception is, you can always copy-paste its name and google it. moreover, you\'re strongly encouraged to do it, as 99% of troubles that learners encounter have already been solved on professional forums.\n\n\n# conclusion\n\n * exceptions do not prevent a program from being compiled and run, but the program crashes as soon as the line with an exception is being executed.\n * there are many types of exceptions.\n * you can use control statements to avoid some kinds of exceptions (like arithmeticexception or numberformatexception) in your programs.\n * there is a general approach to handle exceptions and even throw them by yourself that you will learn in the next lesson.',charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：NPE",frontmatter:{title:"Theory：NPE",date:"2022-05-03T20:56:59.000Z",permalink:"/pages/ea4d00/",tags:["Java","Exception"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/06.Error%20&%20Exception/30.Theory%EF%BC%9ANPE.html",relativePath:"01.Java/01.Hyperskill - Java/06.Error & Exception/30.Theory：NPE.md",key:"v-7e83acb8",path:"/pages/ea4d00/",headers:[{level:2,title:"What is NPE",slug:"what-is-npe",normalizedTitle:"what is npe",charIndex:2},{level:2,title:"NPE when invoking a method",slug:"npe-when-invoking-a-method",normalizedTitle:"npe when invoking a method",charIndex:1412},{level:2,title:"Comparing strings",slug:"comparing-strings",normalizedTitle:"comparing strings",charIndex:2404},{level:2,title:"Rules for avoiding NPE",slug:"rules-for-avoiding-npe",normalizedTitle:"rules for avoiding npe",charIndex:3294},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:3878}],headersStr:"What is NPE NPE when invoking a method Comparing strings Rules for avoiding NPE Conclusion",content:'# What is NPE\n\nJava provides a special type of value called null to indicate that no actual value is assigned to a reference variable. This value may cause one of the most frequent exceptions called NullPointerException (often referred to as NPE for short). It occurs when a program attempts to use a variable with the null value. To avoid an NPE, the programmer must ensure that the objects are initialized before their use.\n\nHere is one interesting fact about the concept of a null reference and errors associated with it. Not only is it not unique for Java, but in 2009, Tony Hoare, a British Computer Scientist who invented the concept of null reference, described it as a "billion-dollar mistake":\n\n提示\n\nI call it my billion-dollar mistake. It was the invention of the null reference in 1965. At that time, I was designing the first comprehensive type system for references in an object-oriented language (ALGOL W). My goal was to ensure that all use of references should be absolutely safe, with checking performed automatically by the compiler. But I couldn\'t resist the temptation to put in a null reference, simply because it was so easy to implement. This has led to innumerable errors, vulnerabilities, and system crashes, which have probably caused a billion dollars of pain and damage in the last forty years.\n\nLet\'s look at some situations where an NPE might occur and find out how to avoid it.\n\n\n# NPE when invoking a method\n\nSince String is a regular reference type, its variables can be null. If we invoke a method or apply an operation to such a variable, the code throws an NPE.\n\nIn the following code, an uninitialized variable of String is created and then the method length() is invoked. The code throws an NPE because the object str is actually null.\n\nString someString = null; // a reference type can be null\n\nint size = someString.length(); // NullPointerException (NPE)\n\n\n1\n2\n3\n\n\nThe same exception will occur if we use uninitialized variables of any other reference type, not only String.\n\nTo avoid the exception we should explicitly check whether a string is null or not and depending on the result perform different code. It\'s similar to the default value.\n\nint size = someString != null ? someString.length() : 0; // if the string is empty, the size is 0\n\n\n1\n\n\nIn the code above, when the given string is null, the size is set as 0. This way we won\'t get any exceptions.\n\n\n# Comparing strings\n\nA very common situation occurs when we try to compare a String variable and a string literal.\n\nString str = null;\n\nif (str.equals("abc")) { // it throws an NPE\n    System.out.println("The same");\n}\n\n\n1\n2\n3\n4\n5\n\n\nTo avoid an NPE here we can use Yoda notation and call the equals method on the literal rather than the object:\n\nString str = null;\n\nif ("abc".equals(str)) { // no NPE here\n    System.out.println("The same");\n}\n\n\n1\n2\n3\n4\n5\n\n\nBut what if we have two variables of the type String? Any of them may happen to be null. In this case, we can use the special auxiliary class java.util.Objects.\n\nString s1 = null;\nString s2 = null;\n        \nif (Objects.equals(s1, s2)) { // no NPE here\n    System.out.println("Strings are the same");\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\nThis approach is recommended in modern Java programming since it is easy for reading and does not throw an NPE.\n\n\n# Rules for avoiding NPE\n\nWe\'ve considered a few cases in which an NPE may occur. Actually, there are more of such situations, and we will consider them in the next topics.\n\nHere are several general rules on how to avoid an NPE in your programs:\n\n * for reference types, use a conditional statement to check whether the given variable is null before using it;\n * try to avoid assigning null to variables whenever possible;\n * use NPE-safe features from the standard library.\n\nThese simple rules will help to reduce the number of places in your code that could throw this exception.\n\n\n# Conclusion\n\nYou may face an NPE if you are trying to invoke a method or apply an operation to a variable with the null value. For example, if you use uninitialized variables of String type or other reference types.\n\nBesides, this exception may occur when we compare a String variable and a string literal. In this case, we should call the equals method on the literal. There is also a special auxiliary class java.util.Objects that we use to compare two variables of the String type.\n\nFollow simple rules: don\'t assign null to a variable or make sure that the given one is not null, use NPE-safe features.',normalizedContent:'# what is npe\n\njava provides a special type of value called null to indicate that no actual value is assigned to a reference variable. this value may cause one of the most frequent exceptions called nullpointerexception (often referred to as npe for short). it occurs when a program attempts to use a variable with the null value. to avoid an npe, the programmer must ensure that the objects are initialized before their use.\n\nhere is one interesting fact about the concept of a null reference and errors associated with it. not only is it not unique for java, but in 2009, tony hoare, a british computer scientist who invented the concept of null reference, described it as a "billion-dollar mistake":\n\n提示\n\ni call it my billion-dollar mistake. it was the invention of the null reference in 1965. at that time, i was designing the first comprehensive type system for references in an object-oriented language (algol w). my goal was to ensure that all use of references should be absolutely safe, with checking performed automatically by the compiler. but i couldn\'t resist the temptation to put in a null reference, simply because it was so easy to implement. this has led to innumerable errors, vulnerabilities, and system crashes, which have probably caused a billion dollars of pain and damage in the last forty years.\n\nlet\'s look at some situations where an npe might occur and find out how to avoid it.\n\n\n# npe when invoking a method\n\nsince string is a regular reference type, its variables can be null. if we invoke a method or apply an operation to such a variable, the code throws an npe.\n\nin the following code, an uninitialized variable of string is created and then the method length() is invoked. the code throws an npe because the object str is actually null.\n\nstring somestring = null; // a reference type can be null\n\nint size = somestring.length(); // nullpointerexception (npe)\n\n\n1\n2\n3\n\n\nthe same exception will occur if we use uninitialized variables of any other reference type, not only string.\n\nto avoid the exception we should explicitly check whether a string is null or not and depending on the result perform different code. it\'s similar to the default value.\n\nint size = somestring != null ? somestring.length() : 0; // if the string is empty, the size is 0\n\n\n1\n\n\nin the code above, when the given string is null, the size is set as 0. this way we won\'t get any exceptions.\n\n\n# comparing strings\n\na very common situation occurs when we try to compare a string variable and a string literal.\n\nstring str = null;\n\nif (str.equals("abc")) { // it throws an npe\n    system.out.println("the same");\n}\n\n\n1\n2\n3\n4\n5\n\n\nto avoid an npe here we can use yoda notation and call the equals method on the literal rather than the object:\n\nstring str = null;\n\nif ("abc".equals(str)) { // no npe here\n    system.out.println("the same");\n}\n\n\n1\n2\n3\n4\n5\n\n\nbut what if we have two variables of the type string? any of them may happen to be null. in this case, we can use the special auxiliary class java.util.objects.\n\nstring s1 = null;\nstring s2 = null;\n        \nif (objects.equals(s1, s2)) { // no npe here\n    system.out.println("strings are the same");\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\nthis approach is recommended in modern java programming since it is easy for reading and does not throw an npe.\n\n\n# rules for avoiding npe\n\nwe\'ve considered a few cases in which an npe may occur. actually, there are more of such situations, and we will consider them in the next topics.\n\nhere are several general rules on how to avoid an npe in your programs:\n\n * for reference types, use a conditional statement to check whether the given variable is null before using it;\n * try to avoid assigning null to variables whenever possible;\n * use npe-safe features from the standard library.\n\nthese simple rules will help to reduce the number of places in your code that could throw this exception.\n\n\n# conclusion\n\nyou may face an npe if you are trying to invoke a method or apply an operation to a variable with the null value. for example, if you use uninitialized variables of string type or other reference types.\n\nbesides, this exception may occur when we compare a string variable and a string literal. in this case, we should call the equals method on the literal. there is also a special auxiliary class java.util.objects that we use to compare two variables of the string type.\n\nfollow simple rules: don\'t assign null to a variable or make sure that the given one is not null, use npe-safe features.',charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：Array exceptions",frontmatter:{title:"Theory：Array exceptions",date:"2022-07-09T16:19:45.000Z",permalink:"/pages/0d673f/",tags:["Java","Array","Exception"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/06.Error%20&%20Exception/61.Theory%EF%BC%9AArray%20exceptions.html",relativePath:"01.Java/01.Hyperskill - Java/06.Error & Exception/61.Theory：Array exceptions.md",key:"v-6ea070cd",path:"/pages/0d673f/",headers:[{level:2,title:"NullPointerException",slug:"nullpointerexception",normalizedTitle:"nullpointerexception",charIndex:288},{level:2,title:"NegativeArraySizeException",slug:"negativearraysizeexception",normalizedTitle:"negativearraysizeexception",charIndex:711},{level:2,title:"ArrayIndexOutOfBoundsException",slug:"arrayindexoutofboundsexception",normalizedTitle:"arrayindexoutofboundsexception",charIndex:1368},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:3432}],headersStr:"NullPointerException NegativeArraySizeException ArrayIndexOutOfBoundsException Conclusion",content:'No wonder that different types of exceptions may occur when your program processes an array. To avoid them, you should be aware of the situations where you are at risk of having one and stick to a set of commonly used practices. Now let\'s learn what exactly we are dealing with here.\n\n\n# NullPointerException\n\nAs you probably know by now, an array is a reference type, which means its variable can be null , and that may lead to NPE.\n\nint[] numbers = null;\nint size = numbers.length; // It throws NPE\n\n\n1\n2\n\n\nWe will not dwell on this since we suppose that you are already familiar with NPE and how to avoid it by using additional checks in your code:\n\nint size = numbers == null ? 0 : numbers.length;\n\n\n1\n\n\n\n# NegativeArraySizeException\n\nIf you try to create an array with a negative size, your code will compile successfully, but this line will throw NegativeArraySizeException while executing.\n\nint negSize = -1;\nint[] numbers = new int[negSize]; // an exception here\n\n\n1\n2\n\n\nIt\'s not very likely that you\'ll face this exception as a developer, but it makes sense to keep it in mind. To avoid it, simply do not use variables that can have a negative size when setting the size of an array.\n\nAn array may have a size greater than or equal to zero. If this is the case, the code will compile successfully and will not throw NegativeArraySizeException at runtime.\n\n\n# ArrayIndexOutOfBoundsException\n\nThis is a fairly common exception that occurs while working with arrays. It is caused by attempting to access a non-existent element of the array.\n\nint[] array = { 1, 2, 3 }; // an array of ints\n\nint n1 = array[2]; // n1 is 3\nint n2 = array[3]; // Exception\n\n\n1\n2\n3\n4\n\n\nIn this code, the last line produces ArrayIndexOutOfBoundsException since the last index of the array in question is 2.\n\nThe code will throw the same exception if we try to access an element with a negative index:\n\narray[0];  // OK\narray[-1]; // Exception\n\n\n1\n2\n\n\nSince a string can be considered as a sequence of characters, a similar exception may occur when accessing a non-existing element of a string. It is called StringIndexOutOfBoundsException.\n\nTo avoid the ArrayIndexOutOfBoundsException, we may check if the given index belongs to the interval [0, length – 1].\n\nFor example, let\'s take a look at a program, displaying an element of the array by the index, provided in the input. If the index is out of bounds, the program prints a message instead of throwing an exception.\n\npublic class NoIndexOutOfBoundsExceptions {\n\n    public static void main(String[] args) {\n        int[] hardCodedArray = { 3, 2, 4, 5, 1 };\n\n        Scanner scanner = new Scanner(System.in);\n\n        int index = scanner.nextInt();\n\n        if (index < 0 || index > hardCodedArray.length - 1) {\n            System.out.println("The index is out of bounds.");\n        } else {\n            System.out.println(hardCodedArray[index]);\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\nHere are some possible inputs and the corresponding outputs of the program:\n\n * the index is 0, the program outputs "3";\n * the index is 1, the program outputs "2";\n * the index is 4, the program outputs "1";\n * the index is -1, the program outputs "The index is out of bounds.";\n * the index is 5, the program also outputs "The index is out of bounds.".\n\nThat is how we can avoid ArrayIndexOutOfBoundsExceptions by using a conditional statement and the length property of an array.\n\n\n# Conclusion\n\nWe have considered three types of array exceptions:\n\n * NullPointerException;\n * NegativeArraySizeException which you may face when you are creating an array with a negative size;\n * ArrayIndexOutOfBoundsException which occurs when you try to access a non-existent element.\n\nAs a developer, you need to keep in mind what exceptions you may face and, of course, basic ways to avoid them.',normalizedContent:'no wonder that different types of exceptions may occur when your program processes an array. to avoid them, you should be aware of the situations where you are at risk of having one and stick to a set of commonly used practices. now let\'s learn what exactly we are dealing with here.\n\n\n# nullpointerexception\n\nas you probably know by now, an array is a reference type, which means its variable can be null , and that may lead to npe.\n\nint[] numbers = null;\nint size = numbers.length; // it throws npe\n\n\n1\n2\n\n\nwe will not dwell on this since we suppose that you are already familiar with npe and how to avoid it by using additional checks in your code:\n\nint size = numbers == null ? 0 : numbers.length;\n\n\n1\n\n\n\n# negativearraysizeexception\n\nif you try to create an array with a negative size, your code will compile successfully, but this line will throw negativearraysizeexception while executing.\n\nint negsize = -1;\nint[] numbers = new int[negsize]; // an exception here\n\n\n1\n2\n\n\nit\'s not very likely that you\'ll face this exception as a developer, but it makes sense to keep it in mind. to avoid it, simply do not use variables that can have a negative size when setting the size of an array.\n\nan array may have a size greater than or equal to zero. if this is the case, the code will compile successfully and will not throw negativearraysizeexception at runtime.\n\n\n# arrayindexoutofboundsexception\n\nthis is a fairly common exception that occurs while working with arrays. it is caused by attempting to access a non-existent element of the array.\n\nint[] array = { 1, 2, 3 }; // an array of ints\n\nint n1 = array[2]; // n1 is 3\nint n2 = array[3]; // exception\n\n\n1\n2\n3\n4\n\n\nin this code, the last line produces arrayindexoutofboundsexception since the last index of the array in question is 2.\n\nthe code will throw the same exception if we try to access an element with a negative index:\n\narray[0];  // ok\narray[-1]; // exception\n\n\n1\n2\n\n\nsince a string can be considered as a sequence of characters, a similar exception may occur when accessing a non-existing element of a string. it is called stringindexoutofboundsexception.\n\nto avoid the arrayindexoutofboundsexception, we may check if the given index belongs to the interval [0, length – 1].\n\nfor example, let\'s take a look at a program, displaying an element of the array by the index, provided in the input. if the index is out of bounds, the program prints a message instead of throwing an exception.\n\npublic class noindexoutofboundsexceptions {\n\n    public static void main(string[] args) {\n        int[] hardcodedarray = { 3, 2, 4, 5, 1 };\n\n        scanner scanner = new scanner(system.in);\n\n        int index = scanner.nextint();\n\n        if (index < 0 || index > hardcodedarray.length - 1) {\n            system.out.println("the index is out of bounds.");\n        } else {\n            system.out.println(hardcodedarray[index]);\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\nhere are some possible inputs and the corresponding outputs of the program:\n\n * the index is 0, the program outputs "3";\n * the index is 1, the program outputs "2";\n * the index is 4, the program outputs "1";\n * the index is -1, the program outputs "the index is out of bounds.";\n * the index is 5, the program also outputs "the index is out of bounds.".\n\nthat is how we can avoid arrayindexoutofboundsexceptions by using a conditional statement and the length property of an array.\n\n\n# conclusion\n\nwe have considered three types of array exceptions:\n\n * nullpointerexception;\n * negativearraysizeexception which you may face when you are creating an array with a negative size;\n * arrayindexoutofboundsexception which occurs when you try to access a non-existent element.\n\nas a developer, you need to keep in mind what exceptions you may face and, of course, basic ways to avoid them.',charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：Hierarchy of exceptions",frontmatter:{title:"Theory：Hierarchy of exceptions",date:"2022-08-04T12:26:09.000Z",permalink:"/pages/417817/",tags:["Java","Exception"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/06.Error%20&%20Exception/86.Theory%EF%BC%9AHierarchy%20of%20exceptions.html",relativePath:"01.Java/01.Hyperskill - Java/06.Error & Exception/86.Theory：Hierarchy of exceptions.md",key:"v-563ba650",path:"/pages/417817/",headers:[{level:2,title:"Hierarchy of exceptions",slug:"hierarchy-of-exceptions",normalizedTitle:"hierarchy of exceptions",charIndex:260},{level:2,title:"Checked and unchecked exceptions",slug:"checked-and-unchecked-exceptions",normalizedTitle:"checked and unchecked exceptions",charIndex:1766},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:3903}],headersStr:"Hierarchy of exceptions Checked and unchecked exceptions Conclusion",content:"Java is primarily an object-oriented language. In such a paradigm, all exceptions are considered objects of special classes organized into a class hierarchy. Understanding this hierarchy is essential both for job interviews and daily programming practice.\n\n\n# Hierarchy of exceptions\n\nThe following picture illustrates the simplified hierarchy of exceptions:\n\n\n\nThe base class for all exceptions is java.lang.Throwable. This class provides a set of common methods for all exceptions:\n\n * String getMessage() returns the detailed string message of this exception object;\n * Throwable getCause() returns the cause of this exception or null if the cause is nonexistent or unknown;\n * printStackTrace() prints the stack trace on the standard error stream.\n\nWe will return to the methods and constructors of this class in the following topics.\n\nThe Throwable class has two direct subclasses: java.lang.Error and java.lang.Exception.\n\n * subclasses of the Error class represent low-level exceptions in the JVM, for example: OutOfMemoryError, StackOverflowError;\n * subclasses of the Exception class deal with exceptional events inside applications, such as: RuntimeException, IOException;\n * the RuntimeException class is a rather special subclass of Exception. It represents so-called unchecked exceptions, including: ArithmeticException, NumberFormatException, NullPointerException.\n\nWhile developing an application, you normally will process objects of the Exception class and its subclasses. We won't discuss Error and its subclasses here.\n\n提示\n\nThe four basic classes of exceptions (Throwable, Exception, RuntimeException and Error) are located in the java.lang package. They do not need to be imported. Yet their subclasses might be placed in different packages.\n\n\n# Checked and unchecked exceptions\n\nAll exceptions can be divided into two groups: checked and unchecked. They are functionally equivalent but there is a difference from the compiler's point of view.\n\n1. Checked exceptions are represented by the Exception class, excluding the RuntimeException subclass. The compiler checks whether the programmer expects the occurrence of such exceptions in a program or not.\n\nIf a method throws a checked exception, this must be marked in the declaration using the special throws keyword. Otherwise, the program will not compile.\n\nLet's take a look at the example. We use the Scanner class, which you are already familiar with, as a means to read from standard input, to read from a file:\n\npublic static String readLineFromFile() throws FileNotFoundException {\n    Scanner scanner = new Scanner(new File(\"file.txt\")); // java.io.FileNotFoundException\n    return scanner.nextLine();\n}\n\n\n1\n2\n3\n4\n\n\nHere, FileNotFoundException is a standard checked exception. This constructor of Scanner declares a FileNotFoundException exception, because we assume that the specified file may not exist. Most importantly, there is a single line in the method that may throw an exception, so we put the throws keyword in the method declaration.\n\n2. Unchecked exceptions are represented by the RuntimeException class and all its subclasses. The compiler does not check whether the programmer expects the occurrence of such exceptions in a program.\n\nHere is a method that throws NumberFormatException when the input string has an invalid format (e.g., \"abc\").\n\npublic static Long convertStringToLong(String str) {\n    return Long.parseLong(str); // It may throw a NumberFormatException\n}\n\n\n1\n2\n3\n\n\nThis code always successfully compiles without the throws keyword in the declaration.\n\n提示\n\nRuntime exceptions may occur anywhere in a program. The compiler doesn't require that you specify runtime exceptions in declarations. Adding them to each method's declaration would reduce the clarity of a program.\n\nThe Error class and its subclasses are also considered as unchecked exceptions. However, they form a separate class.\n\n\n# Conclusion\n\nAll exceptions are represented by the Throwable class, which has two subclasses: Exception and Error. There are also two types of exceptions: checked and unchecked.\n\nUnchecked exceptions are expected by the compiler, so you don't have to handle them. They are represented by the RuntimeException subclass of the Exception class. Errors from the Error class are also considered unchecked.\n\nChecked exceptions have to be handled and indicated explicitly. They are located in all the other subclasses of Exception.",normalizedContent:"java is primarily an object-oriented language. in such a paradigm, all exceptions are considered objects of special classes organized into a class hierarchy. understanding this hierarchy is essential both for job interviews and daily programming practice.\n\n\n# hierarchy of exceptions\n\nthe following picture illustrates the simplified hierarchy of exceptions:\n\n\n\nthe base class for all exceptions is java.lang.throwable. this class provides a set of common methods for all exceptions:\n\n * string getmessage() returns the detailed string message of this exception object;\n * throwable getcause() returns the cause of this exception or null if the cause is nonexistent or unknown;\n * printstacktrace() prints the stack trace on the standard error stream.\n\nwe will return to the methods and constructors of this class in the following topics.\n\nthe throwable class has two direct subclasses: java.lang.error and java.lang.exception.\n\n * subclasses of the error class represent low-level exceptions in the jvm, for example: outofmemoryerror, stackoverflowerror;\n * subclasses of the exception class deal with exceptional events inside applications, such as: runtimeexception, ioexception;\n * the runtimeexception class is a rather special subclass of exception. it represents so-called unchecked exceptions, including: arithmeticexception, numberformatexception, nullpointerexception.\n\nwhile developing an application, you normally will process objects of the exception class and its subclasses. we won't discuss error and its subclasses here.\n\n提示\n\nthe four basic classes of exceptions (throwable, exception, runtimeexception and error) are located in the java.lang package. they do not need to be imported. yet their subclasses might be placed in different packages.\n\n\n# checked and unchecked exceptions\n\nall exceptions can be divided into two groups: checked and unchecked. they are functionally equivalent but there is a difference from the compiler's point of view.\n\n1. checked exceptions are represented by the exception class, excluding the runtimeexception subclass. the compiler checks whether the programmer expects the occurrence of such exceptions in a program or not.\n\nif a method throws a checked exception, this must be marked in the declaration using the special throws keyword. otherwise, the program will not compile.\n\nlet's take a look at the example. we use the scanner class, which you are already familiar with, as a means to read from standard input, to read from a file:\n\npublic static string readlinefromfile() throws filenotfoundexception {\n    scanner scanner = new scanner(new file(\"file.txt\")); // java.io.filenotfoundexception\n    return scanner.nextline();\n}\n\n\n1\n2\n3\n4\n\n\nhere, filenotfoundexception is a standard checked exception. this constructor of scanner declares a filenotfoundexception exception, because we assume that the specified file may not exist. most importantly, there is a single line in the method that may throw an exception, so we put the throws keyword in the method declaration.\n\n2. unchecked exceptions are represented by the runtimeexception class and all its subclasses. the compiler does not check whether the programmer expects the occurrence of such exceptions in a program.\n\nhere is a method that throws numberformatexception when the input string has an invalid format (e.g., \"abc\").\n\npublic static long convertstringtolong(string str) {\n    return long.parselong(str); // it may throw a numberformatexception\n}\n\n\n1\n2\n3\n\n\nthis code always successfully compiles without the throws keyword in the declaration.\n\n提示\n\nruntime exceptions may occur anywhere in a program. the compiler doesn't require that you specify runtime exceptions in declarations. adding them to each method's declaration would reduce the clarity of a program.\n\nthe error class and its subclasses are also considered as unchecked exceptions. however, they form a separate class.\n\n\n# conclusion\n\nall exceptions are represented by the throwable class, which has two subclasses: exception and error. there are also two types of exceptions: checked and unchecked.\n\nunchecked exceptions are expected by the compiler, so you don't have to handle them. they are represented by the runtimeexception subclass of the exception class. errors from the error class are also considered unchecked.\n\nchecked exceptions have to be handled and indicated explicitly. they are located in all the other subclasses of exception.",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：Throwing exceptions",frontmatter:{title:"Theory：Throwing exceptions",date:"2022-08-06T18:43:31.000Z",permalink:"/pages/199a13/",tags:["Java","Exception"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/06.Error%20&%20Exception/88.Theory%EF%BC%9AThrowing%20exceptions.html",relativePath:"01.Java/01.Hyperskill - Java/06.Error & Exception/88.Theory：Throwing exceptions.md",key:"v-a3c26e56",path:"/pages/199a13/",headers:[{level:2,title:"The throw keyword",slug:"the-throw-keyword",normalizedTitle:"the throw keyword",charIndex:184},{level:2,title:"Throwing checked exceptions",slug:"throwing-checked-exceptions",normalizedTitle:"throwing checked exceptions",charIndex:1637},{level:2,title:"Throwing unchecked exceptions",slug:"throwing-unchecked-exceptions",normalizedTitle:"throwing unchecked exceptions",charIndex:2842},{level:2,title:"When to throw an exception?",slug:"when-to-throw-an-exception",normalizedTitle:"when to throw an exception?",charIndex:3926},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:5326}],headersStr:"The throw keyword Throwing checked exceptions Throwing unchecked exceptions When to throw an exception? Conclusion",content:'You\'ve now learned what exceptions are and in what situations they occur. Now it\'s time to explore them further by understanding when and how you should throw exceptions yourself.\n\n\n# The throw keyword\n\nAny object of the Throwable class and all its subclasses can be thrown using the throw statement. The general form of the statement consists of the throw keyword and an object to be thrown.\n\nIn the following example, we create and throw an object of the RuntimeException class that extends Throwable.\n\npublic class Main {\n    public static void main(String args[]) {\n        RuntimeException exception = new RuntimeException("Something\'s bad.");\n        throw exception;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\nLet\'s consider the code snippet above. First, we create an object with the specified message as the constructor argument. Then, we throw this exception using the throw keyword. Just creating an object is not enough to throw an exception.\n\nThe program stops and prints the error with the message we provided:\n\nException in thread "main" java.lang.RuntimeException: Something\'s bad.\n    at Main.main(Main.java:3)\n\n\n1\n2\n\n\nThe common practice is to create and throw an exception in a single line:\n\n * throwing an instance of Throwable\n\nthrow new Throwable("Something\'s bad.");\n\n\n1\n\n * throwing an instance of Exception\n\nthrow new Exception("An exception occurs");\n\n\n1\n\n * throwing an instance of NullPointerException\n\nthrow new NullPointerException("The field is null");\n\n\n1\n\n\n提示\n\nIt is only possible to throw an object of the Throwable class or a class that extends Throwable. For example, the line throw new Long(10L); does not compile.\n\n\n# Throwing checked exceptions\n\nFor example, let\'s take a look at the following method that reads text from a file. In case the file is not found, the method throws an IOException:\n\npublic static String readTextFromFile(String path) throws IOException {\n    // find a file by the specified path    \n\n    if (!found) {\n        throw new IOException("The file " + path + " is not found");\n    }\n\n    // read and return text from the file\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nHere we can only see a part of the method. The throws keyword following the method parameters is required since an IOException is a checked exception.\n\n注意\n\nIf a method throws a checked exception, the type of exception must be specified in the method declaration after the throws keyword. Otherwise, the code won\'t compile.\n\nIf a method throws two or more checked exceptions, they must be separated by a comma (,) in the declaration:\n\npublic static void method() throws ExceptionType1, ExceptionType2, ExceptionType3\n\n\n1\n\n\nIf a method is declared as throwing an exception (i.e. BaseExceptionType), it can also throw any subclass of the specified exception (i.e. SubClassExceptionType):\n\npublic static void method() throws BaseExceptionType\n\n\n1\n\n\n\n# Throwing unchecked exceptions\n\nLet\'s see how unchecked exceptions are thrown in a more real-life example. The Account class contains the method called deposit, that adds the specified amount to the current balance. If the amount is not positive or exceeds the limit, the method throws an IllegalArgumentException.\n\nclass Account {\n\n    private long balance = 0;\n    \n    public void deposit(long amount) {\n        if (amount <= 0) {\n            throw new IllegalArgumentException("Incorrect sum " + amount);\n        }\n        \n        if (amount >= 100_000_000L) {\n            throw new IllegalArgumentException("Too large amount");\n        }\n        \n        balance += amount;\n    }\n    \n    public long getBalance() {\n        return balance;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\nThe deposit method is not declared as throwing an IllegalArgumentException. The same is true for all other unchecked exceptions.\n\n注意\n\nIf a method throws an unchecked exception, the keyword throws is not required in the method declaration (but you still have to usethrow!)\n\n\n# When to throw an exception?\n\nAs you can see, technically, throwing an exception is a rather straightforward task. But the question is, when do you need to do this? The answer is that it is not always obvious.\n\nThe common practice is to throw an exception when and only when the method preconditions are broken, that is when it cannot be performed under the current conditions.\n\nThere are different cases where you would want to throw an exception. Imagine a method that parses the input string in the dd-MM-yyyy format to get a month. Here, if the string is invalid, the method throws an InvalidArgumentException. Another example is reading a non-existing file that will lead to a FileNotFoundException.\n\nAfter some time of practice, identifying situations where you need an exception will become an easier task for you. It is recommended to throw exceptions that are most relevant (specific) to the problem: it is better to throw an object of InvalidArgumentException than the base Exception class.\n\nAnother question is how to choose between checked and unchecked exceptions? There is a short guideline. If a client can reasonably be expected to recover from an exception, make it a checked exception. If a client cannot do anything to recover, make it an unchecked exception.\n\nIn the next lessons, you will learn how to create your own classes of exceptions and use them inside an application.\n\n\n# Conclusion\n\nIn this topic, you\'ve learned how and when to throw exceptions. You can throw any object of the Throwable class and all its subclasses using the throw statement that consists of the throw keyword and an object to be thrown. An exception is usually thrown when and only when the method preconditions are broken, and it cannot be performed under the current conditions.\n\nYou\'ve also learned the specifics of throwing checked and unchecked exceptions, and how to distinguish between them. In the next topics, you will learn how to create your own classes of exceptions and use them inside your app.',normalizedContent:'you\'ve now learned what exceptions are and in what situations they occur. now it\'s time to explore them further by understanding when and how you should throw exceptions yourself.\n\n\n# the throw keyword\n\nany object of the throwable class and all its subclasses can be thrown using the throw statement. the general form of the statement consists of the throw keyword and an object to be thrown.\n\nin the following example, we create and throw an object of the runtimeexception class that extends throwable.\n\npublic class main {\n    public static void main(string args[]) {\n        runtimeexception exception = new runtimeexception("something\'s bad.");\n        throw exception;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\nlet\'s consider the code snippet above. first, we create an object with the specified message as the constructor argument. then, we throw this exception using the throw keyword. just creating an object is not enough to throw an exception.\n\nthe program stops and prints the error with the message we provided:\n\nexception in thread "main" java.lang.runtimeexception: something\'s bad.\n    at main.main(main.java:3)\n\n\n1\n2\n\n\nthe common practice is to create and throw an exception in a single line:\n\n * throwing an instance of throwable\n\nthrow new throwable("something\'s bad.");\n\n\n1\n\n * throwing an instance of exception\n\nthrow new exception("an exception occurs");\n\n\n1\n\n * throwing an instance of nullpointerexception\n\nthrow new nullpointerexception("the field is null");\n\n\n1\n\n\n提示\n\nit is only possible to throw an object of the throwable class or a class that extends throwable. for example, the line throw new long(10l); does not compile.\n\n\n# throwing checked exceptions\n\nfor example, let\'s take a look at the following method that reads text from a file. in case the file is not found, the method throws an ioexception:\n\npublic static string readtextfromfile(string path) throws ioexception {\n    // find a file by the specified path    \n\n    if (!found) {\n        throw new ioexception("the file " + path + " is not found");\n    }\n\n    // read and return text from the file\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nhere we can only see a part of the method. the throws keyword following the method parameters is required since an ioexception is a checked exception.\n\n注意\n\nif a method throws a checked exception, the type of exception must be specified in the method declaration after the throws keyword. otherwise, the code won\'t compile.\n\nif a method throws two or more checked exceptions, they must be separated by a comma (,) in the declaration:\n\npublic static void method() throws exceptiontype1, exceptiontype2, exceptiontype3\n\n\n1\n\n\nif a method is declared as throwing an exception (i.e. baseexceptiontype), it can also throw any subclass of the specified exception (i.e. subclassexceptiontype):\n\npublic static void method() throws baseexceptiontype\n\n\n1\n\n\n\n# throwing unchecked exceptions\n\nlet\'s see how unchecked exceptions are thrown in a more real-life example. the account class contains the method called deposit, that adds the specified amount to the current balance. if the amount is not positive or exceeds the limit, the method throws an illegalargumentexception.\n\nclass account {\n\n    private long balance = 0;\n    \n    public void deposit(long amount) {\n        if (amount <= 0) {\n            throw new illegalargumentexception("incorrect sum " + amount);\n        }\n        \n        if (amount >= 100_000_000l) {\n            throw new illegalargumentexception("too large amount");\n        }\n        \n        balance += amount;\n    }\n    \n    public long getbalance() {\n        return balance;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\nthe deposit method is not declared as throwing an illegalargumentexception. the same is true for all other unchecked exceptions.\n\n注意\n\nif a method throws an unchecked exception, the keyword throws is not required in the method declaration (but you still have to usethrow!)\n\n\n# when to throw an exception?\n\nas you can see, technically, throwing an exception is a rather straightforward task. but the question is, when do you need to do this? the answer is that it is not always obvious.\n\nthe common practice is to throw an exception when and only when the method preconditions are broken, that is when it cannot be performed under the current conditions.\n\nthere are different cases where you would want to throw an exception. imagine a method that parses the input string in the dd-mm-yyyy format to get a month. here, if the string is invalid, the method throws an invalidargumentexception. another example is reading a non-existing file that will lead to a filenotfoundexception.\n\nafter some time of practice, identifying situations where you need an exception will become an easier task for you. it is recommended to throw exceptions that are most relevant (specific) to the problem: it is better to throw an object of invalidargumentexception than the base exception class.\n\nanother question is how to choose between checked and unchecked exceptions? there is a short guideline. if a client can reasonably be expected to recover from an exception, make it a checked exception. if a client cannot do anything to recover, make it an unchecked exception.\n\nin the next lessons, you will learn how to create your own classes of exceptions and use them inside an application.\n\n\n# conclusion\n\nin this topic, you\'ve learned how and when to throw exceptions. you can throw any object of the throwable class and all its subclasses using the throw statement that consists of the throw keyword and an object to be thrown. an exception is usually thrown when and only when the method preconditions are broken, and it cannot be performed under the current conditions.\n\nyou\'ve also learned the specifics of throwing checked and unchecked exceptions, and how to distinguish between them. in the next topics, you will learn how to create your own classes of exceptions and use them inside your app.',charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：Exception Handling",frontmatter:{title:"Theory：Exception Handling",date:"2022-08-04T12:28:40.000Z",permalink:"/pages/49c884/",tags:["Java","Exception"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/06.Error%20&%20Exception/87.Theory%EF%BC%9AException%20Handling.html",relativePath:"01.Java/01.Hyperskill - Java/06.Error & Exception/87.Theory：Exception Handling.md",key:"v-acb0fba2",path:"/pages/49c884/",headers:[{level:2,title:"How to handle an exception",slug:"how-to-handle-an-exception",normalizedTitle:"how to handle an exception",charIndex:352},{level:2,title:"The try-catch statement",slug:"the-try-catch-statement",normalizedTitle:"the try-catch statement",charIndex:1051},{level:2,title:"Getting info about an exception",slug:"getting-info-about-an-exception",normalizedTitle:"getting info about an exception",charIndex:3420},{level:2,title:"Catching multiple exceptions",slug:"catching-multiple-exceptions",normalizedTitle:"catching multiple exceptions",charIndex:3714},{level:2,title:"The finally block",slug:"the-finally-block",normalizedTitle:"the finally block",charIndex:5471},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:6948}],headersStr:"How to handle an exception The try-catch statement Getting info about an exception Catching multiple exceptions The finally block Conclusion",content:'As you already know, an exception interrupts the normal execution of a program. Normally this is not what we want to happen. Luckily, it is possible to write some code that will handle the exception without stopping the whole program. To do that, Java provides an exception handling mechanism that works with both checked and unchecked exceptions.\n\n\n# How to handle an exception\n\nAfter a line of code throws an exception, the Java runtime system attempts to find a suitable handler for it. Such a handler can be located in the same method where the exception occurred or in the calling method. As soon as a suitable handler is found and executed, the exception is considered as handled and the program runs normally.\n\nTechnically, an exception can be handled in the method where it occurs or in the calling method. The best approach to handle an exception is to do it in a method that has sufficient information to make the correct decision based on this exception.\n\nLet\'s now learn three keywords for handling exceptions: try, catch and finally.\n\n\n# The try-catch statement\n\nHere is a simple try-catch template for handling exceptions:\n\ntry {\n    // code that may throw an exception\n} catch (Exception e) {\n    // code for handling the exception\n}\n\n\n1\n2\n3\n4\n5\n\n\nThe try block is used to wrap the code that may throw an exception. This block can include all lines of code, including method calls.\n\nThe catch block is a handler for the specified type of exception and all of its subclasses. This block is executed when an exception of the corresponding type occurs in the try block.\n\n注意\n\nNote that the specified type in a catch block must extend the Throwable class.\n\nIn the presented template, the catch block can handle exceptions of the Exception class and all classes derived from it.\n\nThe following example demonstrates the execution flow with try and catch.\n\nSystem.out.println("before the try-catch block"); // it will be printed\n\ntry {\n    System.out.println("inside the try block before an exception"); // it will be printed\n\n    System.out.println(2 / 0); // it throws ArithmeticException\n\n    System.out.println("inside the try block after the exception"); // it won\'t be printed\n} catch (Exception e) {\n    System.out.println("Division by zero!"); // it will be printed\n}\n\nSystem.out.println("after the try-catch block"); // it will be printed\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\nThe output:\n\nbefore the try-catch block\ninside the try block before an exception\nDivision by zero!\nafter the try-catch block\n\n\n1\n2\n3\n4\n\n\nThe program does not print "inside the try block after the exception" since the ArithmeticException aborted the normal flow of the execution. Instead, it executes the print statement in the catch block. After completion of the catch block, the program executes the next statement (printing "after the try-catch block") without returning to the try block again.\n\nReplacing Exception with ArithmeticException or RuntimeException in the catch statement does not change the execution flow of the program. But replacing it with NumberFormatException will make the handler unsuitable for the exception and the program will fail.\n\n提示\n\nAs we noted earlier, the try-catch statement can handle both checked and unchecked exceptions. But there is a difference: checked exceptions must be wrapped with a try-catch block or declared to be thrown in the method, while unchecked exceptions don\'t have to.\n\n\n# Getting info about an exception\n\nWhen an exception is caught by a catch block, it is possible to get some information on it:\n\ntry {\n    double d = 2 / 0;\n} catch (Exception e) {\n    System.out.println(e.getMessage());\n}\n\n\n1\n2\n3\n4\n5\n\n\nThis code prints:\n\nAn exception occured: / by zero\n\n\n1\n\n\n\n# Catching multiple exceptions\n\nIt is always possible to use a single handler for all types of exceptions:\n\ntry {\n    // code that may throw exceptions\n} catch (Exception e) {\n    System.out.println("Something goes wrong");\n}\n\n\n1\n2\n3\n4\n5\n\n\nObviously, this approach does not allow us to perform different actions depending on the type of exception that has occurred. Fortunately, Java supports the use of several handlers inside the same try block.\n\ntry {\n    // code that throws exceptions\n} catch (IOException e) {\n    // handling the IOException and its subclasses    \n} catch (Exception e) {\n    // handling the Exception and its subclasses\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nWhen an exception occurs in the try block, the runtime system determines the first suitable catch block according to the type of the exception. Matching goes from top to bottom.\n\n注意\n\nImportant, the catch block with the base class has to be written below all blocks with subclasses. In other words, the more specialized handlers (like IOException) must be written before the more general ones (like Exception). Otherwise, the code won\'t compile.\n\nSince Java 7, you can use a multi-catch syntax to have several exceptions handled in the same way:\n\ntry {\n    // code that may throw exceptions\n} catch (SQLException | IOException e) {\n    // handling SQLException, IOException and their subclasses\n    System.out.println(e.getMessage());\n} catch (Exception e) {\n    // handling any other exceptions\n    System.out.println("Something goes wrong");\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nIn the code above SQLException and IOException (alternatives) are separated by the | character. They will be handled in the same way.\n\n注意\n\nNote that alternatives in a multi-catch statement cannot be each other\'s subclasses.\n\n\n# The finally block\n\nThere is another possible block called finally. All statements present in this block will always execute regardless of whether an exception occurs in the try block or not.\n\ntry {\n    // code that may throw an exception\n} catch (Exception e) {\n    // exception handler\n} finally {\n    // code always be executed\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nThe following example illustrates the order of execution of the try-catch-finally statement.\n\ntry {\n    System.out.println("inside the try block");\n    Integer.parseInt("101abc"); // throws NumberFormatException\n} catch (Exception e) {\n    System.out.println("inside the catch block");\n} finally {\n    System.out.println("inside the finally block");\n}\n\nSystem.out.println("after the try-catch-finally block");\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nThe output:\n\ninside the try block\ninside the catch block\ninside the finally block\nafter the try-catch-finally block\n\n\n1\n2\n3\n4\n\n\nIf we remove the line that throws NumberFormatException, the finally block is still executed after the try block.\n\ninside the try block\ninside the finally block\nafter the try-catch-finally block\n\n\n1\n2\n3\n\n\n提示\n\nInteresting: the finally block is executed even if an exception occurs in the catch block.\n\nIt is also possible to write try and finally without a catch block at all.\n\ntry {\n    // code that may throw an exception\n} finally {   \n    // code always be executed\n}\n\n\n1\n2\n3\n4\n5\n\n\nIn this template, the finally block is executed right after the try block.\n\n\n# Conclusion\n\nThe try-catch statement allows us to handle both checked and unchecked exceptions .\n\nThe try block wraps the code that may throw an exception while the catch block handles this exception in case it occurs, also allowing us to get some information about it. It is possible to use several handlers to provide different scenarios for different types of exceptions.\n\nFinally, there\'s an optional finally block that is always executed. Its main feature is that it executes even if we fail to handle an exception at all.',normalizedContent:'as you already know, an exception interrupts the normal execution of a program. normally this is not what we want to happen. luckily, it is possible to write some code that will handle the exception without stopping the whole program. to do that, java provides an exception handling mechanism that works with both checked and unchecked exceptions.\n\n\n# how to handle an exception\n\nafter a line of code throws an exception, the java runtime system attempts to find a suitable handler for it. such a handler can be located in the same method where the exception occurred or in the calling method. as soon as a suitable handler is found and executed, the exception is considered as handled and the program runs normally.\n\ntechnically, an exception can be handled in the method where it occurs or in the calling method. the best approach to handle an exception is to do it in a method that has sufficient information to make the correct decision based on this exception.\n\nlet\'s now learn three keywords for handling exceptions: try, catch and finally.\n\n\n# the try-catch statement\n\nhere is a simple try-catch template for handling exceptions:\n\ntry {\n    // code that may throw an exception\n} catch (exception e) {\n    // code for handling the exception\n}\n\n\n1\n2\n3\n4\n5\n\n\nthe try block is used to wrap the code that may throw an exception. this block can include all lines of code, including method calls.\n\nthe catch block is a handler for the specified type of exception and all of its subclasses. this block is executed when an exception of the corresponding type occurs in the try block.\n\n注意\n\nnote that the specified type in a catch block must extend the throwable class.\n\nin the presented template, the catch block can handle exceptions of the exception class and all classes derived from it.\n\nthe following example demonstrates the execution flow with try and catch.\n\nsystem.out.println("before the try-catch block"); // it will be printed\n\ntry {\n    system.out.println("inside the try block before an exception"); // it will be printed\n\n    system.out.println(2 / 0); // it throws arithmeticexception\n\n    system.out.println("inside the try block after the exception"); // it won\'t be printed\n} catch (exception e) {\n    system.out.println("division by zero!"); // it will be printed\n}\n\nsystem.out.println("after the try-catch block"); // it will be printed\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\nthe output:\n\nbefore the try-catch block\ninside the try block before an exception\ndivision by zero!\nafter the try-catch block\n\n\n1\n2\n3\n4\n\n\nthe program does not print "inside the try block after the exception" since the arithmeticexception aborted the normal flow of the execution. instead, it executes the print statement in the catch block. after completion of the catch block, the program executes the next statement (printing "after the try-catch block") without returning to the try block again.\n\nreplacing exception with arithmeticexception or runtimeexception in the catch statement does not change the execution flow of the program. but replacing it with numberformatexception will make the handler unsuitable for the exception and the program will fail.\n\n提示\n\nas we noted earlier, the try-catch statement can handle both checked and unchecked exceptions. but there is a difference: checked exceptions must be wrapped with a try-catch block or declared to be thrown in the method, while unchecked exceptions don\'t have to.\n\n\n# getting info about an exception\n\nwhen an exception is caught by a catch block, it is possible to get some information on it:\n\ntry {\n    double d = 2 / 0;\n} catch (exception e) {\n    system.out.println(e.getmessage());\n}\n\n\n1\n2\n3\n4\n5\n\n\nthis code prints:\n\nan exception occured: / by zero\n\n\n1\n\n\n\n# catching multiple exceptions\n\nit is always possible to use a single handler for all types of exceptions:\n\ntry {\n    // code that may throw exceptions\n} catch (exception e) {\n    system.out.println("something goes wrong");\n}\n\n\n1\n2\n3\n4\n5\n\n\nobviously, this approach does not allow us to perform different actions depending on the type of exception that has occurred. fortunately, java supports the use of several handlers inside the same try block.\n\ntry {\n    // code that throws exceptions\n} catch (ioexception e) {\n    // handling the ioexception and its subclasses    \n} catch (exception e) {\n    // handling the exception and its subclasses\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nwhen an exception occurs in the try block, the runtime system determines the first suitable catch block according to the type of the exception. matching goes from top to bottom.\n\n注意\n\nimportant, the catch block with the base class has to be written below all blocks with subclasses. in other words, the more specialized handlers (like ioexception) must be written before the more general ones (like exception). otherwise, the code won\'t compile.\n\nsince java 7, you can use a multi-catch syntax to have several exceptions handled in the same way:\n\ntry {\n    // code that may throw exceptions\n} catch (sqlexception | ioexception e) {\n    // handling sqlexception, ioexception and their subclasses\n    system.out.println(e.getmessage());\n} catch (exception e) {\n    // handling any other exceptions\n    system.out.println("something goes wrong");\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nin the code above sqlexception and ioexception (alternatives) are separated by the | character. they will be handled in the same way.\n\n注意\n\nnote that alternatives in a multi-catch statement cannot be each other\'s subclasses.\n\n\n# the finally block\n\nthere is another possible block called finally. all statements present in this block will always execute regardless of whether an exception occurs in the try block or not.\n\ntry {\n    // code that may throw an exception\n} catch (exception e) {\n    // exception handler\n} finally {\n    // code always be executed\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nthe following example illustrates the order of execution of the try-catch-finally statement.\n\ntry {\n    system.out.println("inside the try block");\n    integer.parseint("101abc"); // throws numberformatexception\n} catch (exception e) {\n    system.out.println("inside the catch block");\n} finally {\n    system.out.println("inside the finally block");\n}\n\nsystem.out.println("after the try-catch-finally block");\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nthe output:\n\ninside the try block\ninside the catch block\ninside the finally block\nafter the try-catch-finally block\n\n\n1\n2\n3\n4\n\n\nif we remove the line that throws numberformatexception, the finally block is still executed after the try block.\n\ninside the try block\ninside the finally block\nafter the try-catch-finally block\n\n\n1\n2\n3\n\n\n提示\n\ninteresting: the finally block is executed even if an exception occurs in the catch block.\n\nit is also possible to write try and finally without a catch block at all.\n\ntry {\n    // code that may throw an exception\n} finally {   \n    // code always be executed\n}\n\n\n1\n2\n3\n4\n5\n\n\nin this template, the finally block is executed right after the try block.\n\n\n# conclusion\n\nthe try-catch statement allows us to handle both checked and unchecked exceptions .\n\nthe try block wraps the code that may throw an exception while the catch block handles this exception in case it occurs, also allowing us to get some information about it. it is possible to use several handlers to provide different scenarios for different types of exceptions.\n\nfinally, there\'s an optional finally block that is always executed. its main feature is that it executes even if we fail to handle an exception at all.',charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：Cutom exceptions",frontmatter:{title:"Theory：Cutom exceptions",date:"2022-08-06T18:45:26.000Z",permalink:"/pages/034c61/",tags:["Java","Exception"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/06.Error%20&%20Exception/89.Theory%EF%BC%9ACutom%20exceptions.html",relativePath:"01.Java/01.Hyperskill - Java/06.Error & Exception/89.Theory：Cutom exceptions.md",key:"v-9f0c4862",path:"/pages/034c61/",headers:[{level:2,title:"How to create and throw a custom exception",slug:"how-to-create-and-throw-a-custom-exception",normalizedTitle:"how to create and throw a custom exception",charIndex:796},{level:2,title:"Best practices for custom exceptions",slug:"best-practices-for-custom-exceptions",normalizedTitle:"best practices for custom exceptions",charIndex:1759},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:3065}],headersStr:"How to create and throw a custom exception Best practices for custom exceptions Conclusion",content:"Java exceptions cover a lot of standard exceptions we have to deal with in programming. However, sometimes we might need to create them ourselves. One of the main reasons why is to handle logical exceptions which are specific to your program. Imagine you are implementing a client-server application. The server processes user information and validates its correctness, or throws an exception. An essential condition for the server to work properly is that it should validate all the fields with user data and not stop at the first incorrect one. If some fields turn out to be incorrect, we want to receive a detailed report about what went wrong. In this case, a standard exception like IllegalArgumentException will not be enough for us, which means it's time to create a custom exception.\n\n\n# How to create and throw a custom exception\n\nTo create a custom exception you need to extend the Exception (checked) or RuntimeException (unchecked) classes.\n\nHere is an example:\n\npublic class MyAppException extends Exception {\n\n    public MyAppException(String msg) {\n        super(msg);\n    }\n\n    public MyAppException(Exception cause) {\n        super(cause);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nIn the example above, a new class of exceptions is declared. It is a checked exception because it extends the Exception class. The declared class has two constructors for creating instances, and they call the corresponding constructor of the base class.\n\nNow, we can throw an instance of the class:\n\npublic static void someMethod() throws MyAppException {\n    throw new MyAppException(\"Something bad\");\n}\n\n\n1\n2\n3\n\n\nFor more information about throwing exceptions, please refer to our topic on the subject.\n\nNow let's learn some rules of creating custom exceptions.\n\n\n# Best practices for custom exceptions\n\nFirst things first, make sure that your application will benefit from creating a custom exception. Otherwise, use standard Java exceptions.\n\nSecondly, follow the naming convention — end the class name with “Exception”, for example MyAppException.\n\nAlso, provide the constructor that sets a cause in case your program catches a standard exception before throwing a custom one.\n\nFor example, let's look at the code snippet below. Here we capture the root cause of the exception with the Throwable argument, which is passed to the parent class constructor.\n\npublic class CustomException extends Exception {\n\n   public CustomException(String message, Throwable cause) {\n\n       super(message, cause);\n\n   }\n\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nIs creating a custom exception always a good idea? Although the custom exception feature greatly enhances the error handling mechanism, its use is not always justified. We advise you to use standard exceptions whenever possible for a number of reasons, such as:\n\n * Standard exceptions are widely known by other programmers. One can understand the type of problem just by looking at the name of the exception.\n * By opting for standard exceptions, you follow the reusability principle. It makes your code clearer and more professional.\n\n\n# Conclusion\n\nCustom exceptions are a great tool for handling inconsistencies in your program. In this topic, we learned how to create and throw them, along with some best practices to follow. However, we highly recommend creating a custom exception only when it is justified. Standard Java exceptions are often a safer and no less efficient choice.",normalizedContent:"java exceptions cover a lot of standard exceptions we have to deal with in programming. however, sometimes we might need to create them ourselves. one of the main reasons why is to handle logical exceptions which are specific to your program. imagine you are implementing a client-server application. the server processes user information and validates its correctness, or throws an exception. an essential condition for the server to work properly is that it should validate all the fields with user data and not stop at the first incorrect one. if some fields turn out to be incorrect, we want to receive a detailed report about what went wrong. in this case, a standard exception like illegalargumentexception will not be enough for us, which means it's time to create a custom exception.\n\n\n# how to create and throw a custom exception\n\nto create a custom exception you need to extend the exception (checked) or runtimeexception (unchecked) classes.\n\nhere is an example:\n\npublic class myappexception extends exception {\n\n    public myappexception(string msg) {\n        super(msg);\n    }\n\n    public myappexception(exception cause) {\n        super(cause);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nin the example above, a new class of exceptions is declared. it is a checked exception because it extends the exception class. the declared class has two constructors for creating instances, and they call the corresponding constructor of the base class.\n\nnow, we can throw an instance of the class:\n\npublic static void somemethod() throws myappexception {\n    throw new myappexception(\"something bad\");\n}\n\n\n1\n2\n3\n\n\nfor more information about throwing exceptions, please refer to our topic on the subject.\n\nnow let's learn some rules of creating custom exceptions.\n\n\n# best practices for custom exceptions\n\nfirst things first, make sure that your application will benefit from creating a custom exception. otherwise, use standard java exceptions.\n\nsecondly, follow the naming convention — end the class name with “exception”, for example myappexception.\n\nalso, provide the constructor that sets a cause in case your program catches a standard exception before throwing a custom one.\n\nfor example, let's look at the code snippet below. here we capture the root cause of the exception with the throwable argument, which is passed to the parent class constructor.\n\npublic class customexception extends exception {\n\n   public customexception(string message, throwable cause) {\n\n       super(message, cause);\n\n   }\n\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nis creating a custom exception always a good idea? although the custom exception feature greatly enhances the error handling mechanism, its use is not always justified. we advise you to use standard exceptions whenever possible for a number of reasons, such as:\n\n * standard exceptions are widely known by other programmers. one can understand the type of problem just by looking at the name of the exception.\n * by opting for standard exceptions, you follow the reusability principle. it makes your code clearer and more professional.\n\n\n# conclusion\n\ncustom exceptions are a great tool for handling inconsistencies in your program. in this topic, we learned how to create and throw them, along with some best practices to follow. however, we highly recommend creating a custom exception only when it is justified. standard java exceptions are often a safer and no less efficient choice.",charsets:{},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：What is a bug",frontmatter:{title:"Theory：What is a bug",date:"2022-12-13T17:26:00.000Z",permalink:"/pages/abd837/",tags:["Debugging"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/06.Error%20&%20Exception/90.Theory%EF%BC%9AWhat%20is%20a%20bug.html",relativePath:"01.Java/01.Hyperskill - Java/06.Error & Exception/90.Theory：What is a bug.md",key:"v-39d535ca",path:"/pages/abd837/",headers:[{level:2,title:"Bug etymology",slug:"bug-etymology",normalizedTitle:"bug etymology",charIndex:593},{level:2,title:"Why do programs have bugs?",slug:"why-do-programs-have-bugs",normalizedTitle:"why do programs have bugs?",charIndex:1427},{level:2,title:"Avoiding bugs",slug:"avoiding-bugs",normalizedTitle:"avoiding bugs",charIndex:1995},{level:2,title:"Debugging",slug:"debugging",normalizedTitle:"debugging",charIndex:3236},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:3820}],headersStr:"Bug etymology Why do programs have bugs? Avoiding bugs Debugging Conclusion",content:"A software bug is a problem that causes a program to crash or produce invalid output. There are many reasons for software bugs; the most common of them are human mistakes in software design, coding, or understanding of the requirements.\n\nA program is usually called stable if it doesn't have a lot of obvious bugs. If the program has a large number of bugs that affect the functionality and cause incorrect results, it is considered buggy or unstable. The user cannot successfully interact with such software. It is important to find bugs before users start interacting with your program.\n\n\n# Bug etymology\n\nYou've probably already heard the term \"bug\" and can imagine what it means. Here is a little story about this.\n\nThe first computer bug was discovered by Grace Murray at Harvard University in 1947, while she was working on the Mark II computer. During the investigation of an issue, an actual moth was found between the contact of the relays. The moth was removed and added to the logbook, which now is located at the Smithsonian Institution's National Museum of American History in Washington, D.C.\n\nSo, computer errors are often called bugs. This term is used to describe any incorrect program behavior until the specific nature of the error is determined.\n\n\n\nSome Internet sources give a different story of this term. You can google it if you are interested. Let us know if you find a story most credible to you.\n\n\n# Why do programs have bugs?\n\nDevelopers often say that a program without bugs doesn't exist. There are some common reasons for bugs in software:\n\n * communication issues in the team;\n * misunderstanding of the requirements;\n * software complexity;\n * programming errors (programmers, like anyone else, can make mistakes);\n * time pressure;\n * use of unfamiliar technologies;\n * an error in a third-party library (yes, that happens too).\n\nDuring this course, you will mainly encounter bugs caused by misunderstanding of the given requirements or programming errors.\n\n\n# Avoiding bugs\n\nIt is almost impossible to avoid all bugs in a large program, but it is possible to reduce their number. Here we give you five steps that can help to do that in both educational courses and industrial programming.\n\n 1. Make sure you know what to do. As a programmer, you need to understand the requirements of a program that you are going to work on. If you have doubts, you can always find some help on the Internet or among fellow developers.\n 2. Decompose a program into small units that are easy to look through and understand. A good architecture reduces software complexity, and, as a consequence, the number of errors.\n 3. Write easy-to-read-code and follow all the standards of the language. It will also allow you to make fewer errors.\n 4. Run the program with boundary input values. Do not forget to consider different cases: 0 or a huge number as an input value, 0 or 1 element as an input sequence. Such cases often reveal bugs.\n 5. Write automated tests that will check the program at the build time.\n\nWe will not discuss automated tests in this topic, but we will return to that later. At this moment, you can simply create a set of input values and run the program manually (as it was described in step 4).\n\n\n# Debugging\n\nSuppose you know that your program does not work correctly for some input values. To fix this bug, you need to find it in the code and then make some changes.\n\nTo locate a buggy place, you can:\n\n * read the code and try to understand what it does for the input values;\n * start the debugger and see the current values of variables and the control flow of the program;\n * print the current state of the program in critical parts of the code (logging) and then analyze it.\n\nThe combination of the approaches above will allow you to find most of the bugs in your program.\n\n\n# Conclusion\n\nLet's sum this topic up. A bug is the incorrect behavior of a program. However, there are ways to reduce the number of bugs. For example, understanding the requirements of the program, following the standards of the language, building a clear-cut architecture of the program, checking the program with boundary values, and using automated tests.\n\nIf you still happen to have a bug, first of all, you need to locate it in the code. For that, you can use a debugger or logging, or try to understand what the code does with input values by reading it. Use these tips, and, most likely, you will avoid writing buggy programs and spending time debugging them.",normalizedContent:"a software bug is a problem that causes a program to crash or produce invalid output. there are many reasons for software bugs; the most common of them are human mistakes in software design, coding, or understanding of the requirements.\n\na program is usually called stable if it doesn't have a lot of obvious bugs. if the program has a large number of bugs that affect the functionality and cause incorrect results, it is considered buggy or unstable. the user cannot successfully interact with such software. it is important to find bugs before users start interacting with your program.\n\n\n# bug etymology\n\nyou've probably already heard the term \"bug\" and can imagine what it means. here is a little story about this.\n\nthe first computer bug was discovered by grace murray at harvard university in 1947, while she was working on the mark ii computer. during the investigation of an issue, an actual moth was found between the contact of the relays. the moth was removed and added to the logbook, which now is located at the smithsonian institution's national museum of american history in washington, d.c.\n\nso, computer errors are often called bugs. this term is used to describe any incorrect program behavior until the specific nature of the error is determined.\n\n\n\nsome internet sources give a different story of this term. you can google it if you are interested. let us know if you find a story most credible to you.\n\n\n# why do programs have bugs?\n\ndevelopers often say that a program without bugs doesn't exist. there are some common reasons for bugs in software:\n\n * communication issues in the team;\n * misunderstanding of the requirements;\n * software complexity;\n * programming errors (programmers, like anyone else, can make mistakes);\n * time pressure;\n * use of unfamiliar technologies;\n * an error in a third-party library (yes, that happens too).\n\nduring this course, you will mainly encounter bugs caused by misunderstanding of the given requirements or programming errors.\n\n\n# avoiding bugs\n\nit is almost impossible to avoid all bugs in a large program, but it is possible to reduce their number. here we give you five steps that can help to do that in both educational courses and industrial programming.\n\n 1. make sure you know what to do. as a programmer, you need to understand the requirements of a program that you are going to work on. if you have doubts, you can always find some help on the internet or among fellow developers.\n 2. decompose a program into small units that are easy to look through and understand. a good architecture reduces software complexity, and, as a consequence, the number of errors.\n 3. write easy-to-read-code and follow all the standards of the language. it will also allow you to make fewer errors.\n 4. run the program with boundary input values. do not forget to consider different cases: 0 or a huge number as an input value, 0 or 1 element as an input sequence. such cases often reveal bugs.\n 5. write automated tests that will check the program at the build time.\n\nwe will not discuss automated tests in this topic, but we will return to that later. at this moment, you can simply create a set of input values and run the program manually (as it was described in step 4).\n\n\n# debugging\n\nsuppose you know that your program does not work correctly for some input values. to fix this bug, you need to find it in the code and then make some changes.\n\nto locate a buggy place, you can:\n\n * read the code and try to understand what it does for the input values;\n * start the debugger and see the current values of variables and the control flow of the program;\n * print the current state of the program in critical parts of the code (logging) and then analyze it.\n\nthe combination of the approaches above will allow you to find most of the bugs in your program.\n\n\n# conclusion\n\nlet's sum this topic up. a bug is the incorrect behavior of a program. however, there are ways to reduce the number of bugs. for example, understanding the requirements of the program, following the standards of the language, building a clear-cut architecture of the program, checking the program with boundary values, and using automated tests.\n\nif you still happen to have a bug, first of all, you need to locate it in the code. for that, you can use a debugger or logging, or try to understand what the code does with input values by reading it. use these tips, and, most likely, you will avoid writing buggy programs and spending time debugging them.",charsets:{},lastUpdated:"2022/12/30, 13:28:45",lastUpdatedTimestamp:1672378125e3},{title:"Theory：Introduction to logging",frontmatter:{title:"Theory：Introduction to logging",date:"2022-12-28T13:35:06.000Z",permalink:"/pages/de4d8b/",tags:["Debugging"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/06.Error%20&%20Exception/91.Theory%EF%BC%9AIntroduction%20to%20logging.html",relativePath:"01.Java/01.Hyperskill - Java/06.Error & Exception/91.Theory：Introduction to logging.md",key:"v-52a40118",path:"/pages/de4d8b/",headers:[{level:2,title:"Introduction",slug:"introduction",normalizedTitle:"introduction",charIndex:2},{level:2,title:"Log",slug:"log",normalizedTitle:"log",charIndex:660},{level:2,title:"When, What, and How",slug:"when-what-and-how",normalizedTitle:"when, what, and how",charIndex:1936},{level:2,title:"Log levels",slug:"log-levels",normalizedTitle:"log levels",charIndex:3033},{level:2,title:"Log Format",slug:"log-format",normalizedTitle:"log format",charIndex:5159},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:6468}],headersStr:"Introduction Log When, What, and How Log levels Log Format Conclusion",content:"# Introduction\n\nImagine you are investigating a robbery and are trying to figure out what happened. You have witnesses whose testimonies are very vague, but there is no evidence. It will be very difficult to unravel such a mess. If only there were recordings from surveillance cameras to restore the chronology of the events...\n\nSo now, let's say you are investigating a bug, but what 'surveillance cameras' do you have in that case? Obviously, we need records of everything that happened with the program before the incident. Also, it would be nice to know during which operation it happened. All such records are usually kept in a log. So what is a log?\n\n\n# Log\n\nLogging refers to the act of recording during the execution of an application. Logs are records that give us information about the events in a software application. This record could be a message that is enough to understand the event that happened, it may include a timestamp, a description, and a severity level. These events could be user-generated or system-generated. We use either a log file or, sometimes, the standard output to make these records.\n\nWe need logging for several reasons. Firstly, it will save a lot of time when we are troubleshooting our application at a late stage. If the program, for example, broke or something went wrong in it, then we can find the exact moment at which the error occurred in the log. This makes the debugging process a lot easier. Secondly, it is also possible to trace who used the program with the log. If it is, say, a site, one can find out who sent the requests. Also, logs help to monitor the operation of a particular system, which makes verification and reporting a whole lot easier. This way, we are always aware of how our programs work and how well they perform.\n\nThere are several things to consider when logging: when do we log? what do we log? how do we log? Let’s find out the answers to these questions.\n\n\n# When, What, and How\n\nAs we've mentioned above, there are several common reasons to generate logs:\n\n * troubleshooting\n * auditing\n * profiling\n * statistics\n\nWhat we log usually depends on the application. In any case, we should be able to understand the execution path of a program through the logs. It is important to avoid excessive logging as it is costly. For example, there's no need to log the start and the end of every method, their arguments, since they are easy to track. Logs are meant to cover server issues, database issues, networking issues, errors from unanticipated user inputs, states of dynamically created objects, configuration values.\n\nProviding contextual information in your log messages is very important as well. Often, the success or the failure of a program depends on the user inputs. So, you need to put them in your log messages if necessary. For example, when authenticating a user, log the username that is inputted. Context is also important when your program runs in a concurrent environment. In such a case the thread name can be added to the log message.\n\n\n# Log levels\n\nWe said earlier that a lot of important information can be added to the log file. But what kind of information is it? There are different types that correspond to the accepted logging levels: Debug, Info, Warn, Error, Fatal (from the least critical level to the most critical one).\n\nLet’s see what those log levels are for.\n\nDebug logs are used to diagnose applications. Debugging messages inform us about what the program is doing at a certain step and what it gets as a result of these actions. For example, a message can contain information about the output of some function, so that we can see if it should be fixed.\n\nInfo is used to log important information about an application. It is used to log service start, service stop, configurations, assumptions. For example, the information about the user who has just registered on the website.\n\nWarn logs are considered to be the first level of application failure. They are usually applied to log repeated attempts to access a resource, missing secondary data, or switching from a primary server to a back-up server. For instance, there can be a message about a possible disconnection with the server. However, it does not affect the user at this point.\n\nError log level is used for more critical problems. These kinds of issues usually affect the result of the operation but do not terminate the program. Errors are considered to be the second level of application failures. For example, there can be a message that a user could not log in because the database was temporarily unavailable.\n\nFatal is the third level of application failures. It is used to indicate a much more serious error that causes the termination of the program. Such a message may say that the program totally failed and depending on the time and conditions of this failure the developers can find out how to fix the problem.\n\nGreat, now we know what bugs are usually written into the log file. Now we need to display the log. But what should be displayed? In order to make the log readable and understandable, there is a special recording format. Let's find out more about it below.\n\n\n# Log Format\n\nTo investigate a bug, we need to know when it happened, how serious it was, and who came across it. Thus, the log format generally looks like this:\n\n[date time][log level][message]\n\n\n1\n\n\nSo, it starts with the date and time of when the error occurred. Then comes the log level, and the last thing is the message with the explanation of what exactly happened. More specifically, if we, for example, want to monitor who registers on our site, we need the corresponding logs with Info log level. Then every time a user sends data to the site, we will log a message about this event. For example, on February 2, 2021, a user with the nickname 'demo' registered on the site at 3 pm. Then the log will look like this:\n\n[2021-02-02 15:00:00] [INFO] User 'demo' has registered\n\n\n1\n\n\nAnd if some user named 'alex98' cannot log in because of some technical issues, we will receive an Error message:\n\n[2021-02-02 01:00:10] [ERROR] User 'alex98' cannot log in because the database is temporarily unavailable\n\n\n1\n\n\nThus, we will know that user 'alex98' failed to log in due to our database being temporarily unavailable. We have localized the problem and know exactly what we need to do: check the database and fix it.\n\n提示\n\nThere is also a more complex version of this format called The Common Log Format.\n\n\n# Conclusion\n\nSo, we've figured out what logs are and what they are for. We've also learned what types of logs there are and how we can issue a log message. Now you can start using logs to monitor the operation of your system at any given time.",normalizedContent:"# introduction\n\nimagine you are investigating a robbery and are trying to figure out what happened. you have witnesses whose testimonies are very vague, but there is no evidence. it will be very difficult to unravel such a mess. if only there were recordings from surveillance cameras to restore the chronology of the events...\n\nso now, let's say you are investigating a bug, but what 'surveillance cameras' do you have in that case? obviously, we need records of everything that happened with the program before the incident. also, it would be nice to know during which operation it happened. all such records are usually kept in a log. so what is a log?\n\n\n# log\n\nlogging refers to the act of recording during the execution of an application. logs are records that give us information about the events in a software application. this record could be a message that is enough to understand the event that happened, it may include a timestamp, a description, and a severity level. these events could be user-generated or system-generated. we use either a log file or, sometimes, the standard output to make these records.\n\nwe need logging for several reasons. firstly, it will save a lot of time when we are troubleshooting our application at a late stage. if the program, for example, broke or something went wrong in it, then we can find the exact moment at which the error occurred in the log. this makes the debugging process a lot easier. secondly, it is also possible to trace who used the program with the log. if it is, say, a site, one can find out who sent the requests. also, logs help to monitor the operation of a particular system, which makes verification and reporting a whole lot easier. this way, we are always aware of how our programs work and how well they perform.\n\nthere are several things to consider when logging: when do we log? what do we log? how do we log? let’s find out the answers to these questions.\n\n\n# when, what, and how\n\nas we've mentioned above, there are several common reasons to generate logs:\n\n * troubleshooting\n * auditing\n * profiling\n * statistics\n\nwhat we log usually depends on the application. in any case, we should be able to understand the execution path of a program through the logs. it is important to avoid excessive logging as it is costly. for example, there's no need to log the start and the end of every method, their arguments, since they are easy to track. logs are meant to cover server issues, database issues, networking issues, errors from unanticipated user inputs, states of dynamically created objects, configuration values.\n\nproviding contextual information in your log messages is very important as well. often, the success or the failure of a program depends on the user inputs. so, you need to put them in your log messages if necessary. for example, when authenticating a user, log the username that is inputted. context is also important when your program runs in a concurrent environment. in such a case the thread name can be added to the log message.\n\n\n# log levels\n\nwe said earlier that a lot of important information can be added to the log file. but what kind of information is it? there are different types that correspond to the accepted logging levels: debug, info, warn, error, fatal (from the least critical level to the most critical one).\n\nlet’s see what those log levels are for.\n\ndebug logs are used to diagnose applications. debugging messages inform us about what the program is doing at a certain step and what it gets as a result of these actions. for example, a message can contain information about the output of some function, so that we can see if it should be fixed.\n\ninfo is used to log important information about an application. it is used to log service start, service stop, configurations, assumptions. for example, the information about the user who has just registered on the website.\n\nwarn logs are considered to be the first level of application failure. they are usually applied to log repeated attempts to access a resource, missing secondary data, or switching from a primary server to a back-up server. for instance, there can be a message about a possible disconnection with the server. however, it does not affect the user at this point.\n\nerror log level is used for more critical problems. these kinds of issues usually affect the result of the operation but do not terminate the program. errors are considered to be the second level of application failures. for example, there can be a message that a user could not log in because the database was temporarily unavailable.\n\nfatal is the third level of application failures. it is used to indicate a much more serious error that causes the termination of the program. such a message may say that the program totally failed and depending on the time and conditions of this failure the developers can find out how to fix the problem.\n\ngreat, now we know what bugs are usually written into the log file. now we need to display the log. but what should be displayed? in order to make the log readable and understandable, there is a special recording format. let's find out more about it below.\n\n\n# log format\n\nto investigate a bug, we need to know when it happened, how serious it was, and who came across it. thus, the log format generally looks like this:\n\n[date time][log level][message]\n\n\n1\n\n\nso, it starts with the date and time of when the error occurred. then comes the log level, and the last thing is the message with the explanation of what exactly happened. more specifically, if we, for example, want to monitor who registers on our site, we need the corresponding logs with info log level. then every time a user sends data to the site, we will log a message about this event. for example, on february 2, 2021, a user with the nickname 'demo' registered on the site at 3 pm. then the log will look like this:\n\n[2021-02-02 15:00:00] [info] user 'demo' has registered\n\n\n1\n\n\nand if some user named 'alex98' cannot log in because of some technical issues, we will receive an error message:\n\n[2021-02-02 01:00:10] [error] user 'alex98' cannot log in because the database is temporarily unavailable\n\n\n1\n\n\nthus, we will know that user 'alex98' failed to log in due to our database being temporarily unavailable. we have localized the problem and know exactly what we need to do: check the database and fix it.\n\n提示\n\nthere is also a more complex version of this format called the common log format.\n\n\n# conclusion\n\nso, we've figured out what logs are and what they are for. we've also learned what types of logs there are and how we can issue a log message. now you can start using logs to monitor the operation of your system at any given time.",charsets:{cjk:!0},lastUpdated:"2022/12/30, 13:28:45",lastUpdatedTimestamp:1672378125e3},{title:"Theory：Debugging techniques",frontmatter:{title:"Theory：Debugging techniques",date:"2022-12-30T12:04:11.000Z",permalink:"/pages/205b2f/",tags:["Debugging"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/06.Error%20&%20Exception/92.Theory%EF%BC%9ADebugging%20techniques.html",relativePath:"01.Java/01.Hyperskill - Java/06.Error & Exception/92.Theory：Debugging techniques.md",key:"v-56e1cd7d",path:"/pages/205b2f/",headers:[{level:2,title:"Logging/'printf' debugging",slug:"logging-printf-debugging",normalizedTitle:"logging/'printf' debugging",charIndex:443},{level:2,title:"Assertions",slug:"assertions",normalizedTitle:"assertions",charIndex:404},{level:2,title:"Attaching a debugger",slug:"attaching-a-debugger",normalizedTitle:"attaching a debugger",charIndex:418},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:6564}],headersStr:"Logging/'printf' debugging Assertions Attaching a debugger Conclusion",content:'Debugging is the process of finding and fixing bugs in a program. Some bugs, like those that prevent the program from compiling, can be fixed easily since the compiler or an IDE can tell you what\'s wrong. Other bugs are trickier and may require you to put a lot of effort into detecting them.\n\nIn this topic, we will consider the most popular ways that programmers use to debug a program:\n\n * Logging\n * Assertions\n * Attaching a debugger\n\n\n# Logging/\'printf\' debugging\n\nOne way to track the changes in the program state is to insert additional print statements in the code. When executed, they will inform you about what\'s happening under the hood at runtime.\n\nFor example, you can insert a line just before a method returns that will print the return value to the console. This way, in addition to seeing the final result, you will also be able to understand what happens at a certain stage of data processing.\n\nLet\'s look at the following code snippet, which hangs indefinitely when run:\n\nclass UnexpectedResults {\n    public static void main(String[] args) {\n        count(1, 10);\n    }\n\n    public static void count(int start, int to) {\n        while (start < to); {\n            System.out.println(start);\n            start++;\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nWhile the error is not hard to catch, we can still add some print statements that would clearly indicate where the hanging happens:\n\nclass UnexpectedResults {\n    public static void main(String[] args) {\n        System.out.println("main() started");\n        count(1, 10);\n        System.out.println("main() complete");\n    }\n\n    public static void count(int start, int to) {\n        System.out.println("count() started");\n        while (start < to); {\n            System.out.println(start);\n            start++;\n        }\n        System.out.println("count() complete");\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\nNow, instead of just hanging, the program will output:\n\nmain() started\ncount() started\n\n\n1\n2\n\n\nThis output shows us that the program reaches the start of the count() method, but never reaches its end, which means that the problem is in the while loop. After we take a closer look at the construct, we see that there is an extra semicolon.\n\nInserting print statements is the most basic way to debug your code, however, we provide it just so you know this technique. You should not use this method in real projects because modern debuggers can do the same in a much more convenient way and because you would not be able to do that everywhere. For example, if you want to get information from some library code, this would be a problem because you cannot modify compiled code.\n\nBe patient, we will cover the nice way shortly.\n\n\n# Assertions\n\nIn order to detect bugs in the program at earlier development stages, you can use assertions. The assertion is a mechanism that monitors the program state, but unlike additional print statements, it terminates the program in a fail-fast manner when things go wrong.\n\nFail-fast is an approach when errors that could otherwise be non-fatal are forced to cause an immediate failure, thus making them visible.\n\nYou may wonder why one would want to crash the production code, and the answer is: one wouldn\'t. Assertions are meant for testing/debugging and should never be used in production code.\n\nLet’s take a look at the following program:\n\nclass BrokenInvariants {\n    public static void main(String[] args) {\n        Cat casper = new Cat("Casper", -1);\n    }\n}\n\nclass Cat {\n    String name;\n    int age;\n    public Cat(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\nThis code creates a Cat object. This would be fine if it wasn\'t for the negative age value that makes no sense. Naturally, in a more complex program, this may lead to various bugs. Such an object may be passed around for a long time before we see a problem, and when a problem arises, it is not always obvious what was the cause.\n\nTo prevent that from happening, we can use an assertion right in the Cat constructor:\n\npublic Cat(String name, int age) {\n    assert (age >= 0) : "Invalid age";\n    this.name = name;\n    this.age = age;\n}\n\n\n1\n2\n3\n4\n5\n\n\nThe part before the colon specifies the boolean expression that should be checked, and when it evaluates to false, an error is thrown. The part after it specifies the message that describes the error.\n\nNow, if we run the code with the -ea flag (java -ea BrokenInvariants), the program will throw an error and terminate right in the Cat constructor:\n\nException in thread "main" java.lang.AssertionError: Invalid age\nat Cat.<init>(scratch_1.java:11)\nat BrokenInvariants.main(scratch_1.java:3)\n\n\n1\n2\n3\n\n\nYou may have noticed that we used the word invariants and are curious what it means. Invariants are constraints that must be met for a program to function properly. In the code above, positive age is an example of an invariant. Using a negative age is asking for a problem. Enforcing invariants is exactly why we need assertions.\n\nWe can also use assertions to check method preconditions and postconditions, that is conditions that must be met before or after a method is invoked.\n\nThe only and very important limitation that should be observed when using assertions is that they should never produce side effects and change the way a program operates. In other words, the assertion should not affect a program in any way other than throwing an error.\n\nBelow is an example of an assertion that violates this rule:\n\nassert (age++ >= 0) : "Invalid age";\nthis.name = name;\nthis.age = age;\n\n\n1\n2\n3\n\n\nBesides checking the condition, the assertion also increments the age value, which means that when assertions are disabled, the program will operate differently, invalidating the results of testing and probably introducing new bugs. Clearly, you want to avoid such situations in production.\n\n\n# Attaching a debugger\n\nA debugger is a tool that interferes with the normal program execution allowing you to get runtime information and test different scenarios to diagnose bugs. This is the most popular use of debuggers. However, when you grow more experienced with them, you\'ll see that they can be helpful in various situations, not necessarily related to bugs.\n\nModern debuggers provide a vast variety of tools that can be used to diagnose the most intricate failure conditions, so they definitely warrant a section of their own. In the next topics, we will get started with IntelliJ IDEA debugger and learn how to debug simple code.\n\n\n# Conclusion\n\nIn this topic, you have learned about different debugging techniques you can use to ensure that your code is error-free. The most basic method is inserting print statements to keep track of the values and the execution order of your program. Also, you may add assertions using the assert keyword to make potential hidden errors visible at an early stage of development. Such assertions may be enabled and disabled by adding or removing the -ea JVM flag. Finally, you may attach a debugger to the program to examine its internal state at runtime. These techniques will help you to detect and fix bugs in your code efficiently.',normalizedContent:'debugging is the process of finding and fixing bugs in a program. some bugs, like those that prevent the program from compiling, can be fixed easily since the compiler or an ide can tell you what\'s wrong. other bugs are trickier and may require you to put a lot of effort into detecting them.\n\nin this topic, we will consider the most popular ways that programmers use to debug a program:\n\n * logging\n * assertions\n * attaching a debugger\n\n\n# logging/\'printf\' debugging\n\none way to track the changes in the program state is to insert additional print statements in the code. when executed, they will inform you about what\'s happening under the hood at runtime.\n\nfor example, you can insert a line just before a method returns that will print the return value to the console. this way, in addition to seeing the final result, you will also be able to understand what happens at a certain stage of data processing.\n\nlet\'s look at the following code snippet, which hangs indefinitely when run:\n\nclass unexpectedresults {\n    public static void main(string[] args) {\n        count(1, 10);\n    }\n\n    public static void count(int start, int to) {\n        while (start < to); {\n            system.out.println(start);\n            start++;\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nwhile the error is not hard to catch, we can still add some print statements that would clearly indicate where the hanging happens:\n\nclass unexpectedresults {\n    public static void main(string[] args) {\n        system.out.println("main() started");\n        count(1, 10);\n        system.out.println("main() complete");\n    }\n\n    public static void count(int start, int to) {\n        system.out.println("count() started");\n        while (start < to); {\n            system.out.println(start);\n            start++;\n        }\n        system.out.println("count() complete");\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\nnow, instead of just hanging, the program will output:\n\nmain() started\ncount() started\n\n\n1\n2\n\n\nthis output shows us that the program reaches the start of the count() method, but never reaches its end, which means that the problem is in the while loop. after we take a closer look at the construct, we see that there is an extra semicolon.\n\ninserting print statements is the most basic way to debug your code, however, we provide it just so you know this technique. you should not use this method in real projects because modern debuggers can do the same in a much more convenient way and because you would not be able to do that everywhere. for example, if you want to get information from some library code, this would be a problem because you cannot modify compiled code.\n\nbe patient, we will cover the nice way shortly.\n\n\n# assertions\n\nin order to detect bugs in the program at earlier development stages, you can use assertions. the assertion is a mechanism that monitors the program state, but unlike additional print statements, it terminates the program in a fail-fast manner when things go wrong.\n\nfail-fast is an approach when errors that could otherwise be non-fatal are forced to cause an immediate failure, thus making them visible.\n\nyou may wonder why one would want to crash the production code, and the answer is: one wouldn\'t. assertions are meant for testing/debugging and should never be used in production code.\n\nlet’s take a look at the following program:\n\nclass brokeninvariants {\n    public static void main(string[] args) {\n        cat casper = new cat("casper", -1);\n    }\n}\n\nclass cat {\n    string name;\n    int age;\n    public cat(string name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\nthis code creates a cat object. this would be fine if it wasn\'t for the negative age value that makes no sense. naturally, in a more complex program, this may lead to various bugs. such an object may be passed around for a long time before we see a problem, and when a problem arises, it is not always obvious what was the cause.\n\nto prevent that from happening, we can use an assertion right in the cat constructor:\n\npublic cat(string name, int age) {\n    assert (age >= 0) : "invalid age";\n    this.name = name;\n    this.age = age;\n}\n\n\n1\n2\n3\n4\n5\n\n\nthe part before the colon specifies the boolean expression that should be checked, and when it evaluates to false, an error is thrown. the part after it specifies the message that describes the error.\n\nnow, if we run the code with the -ea flag (java -ea brokeninvariants), the program will throw an error and terminate right in the cat constructor:\n\nexception in thread "main" java.lang.assertionerror: invalid age\nat cat.<init>(scratch_1.java:11)\nat brokeninvariants.main(scratch_1.java:3)\n\n\n1\n2\n3\n\n\nyou may have noticed that we used the word invariants and are curious what it means. invariants are constraints that must be met for a program to function properly. in the code above, positive age is an example of an invariant. using a negative age is asking for a problem. enforcing invariants is exactly why we need assertions.\n\nwe can also use assertions to check method preconditions and postconditions, that is conditions that must be met before or after a method is invoked.\n\nthe only and very important limitation that should be observed when using assertions is that they should never produce side effects and change the way a program operates. in other words, the assertion should not affect a program in any way other than throwing an error.\n\nbelow is an example of an assertion that violates this rule:\n\nassert (age++ >= 0) : "invalid age";\nthis.name = name;\nthis.age = age;\n\n\n1\n2\n3\n\n\nbesides checking the condition, the assertion also increments the age value, which means that when assertions are disabled, the program will operate differently, invalidating the results of testing and probably introducing new bugs. clearly, you want to avoid such situations in production.\n\n\n# attaching a debugger\n\na debugger is a tool that interferes with the normal program execution allowing you to get runtime information and test different scenarios to diagnose bugs. this is the most popular use of debuggers. however, when you grow more experienced with them, you\'ll see that they can be helpful in various situations, not necessarily related to bugs.\n\nmodern debuggers provide a vast variety of tools that can be used to diagnose the most intricate failure conditions, so they definitely warrant a section of their own. in the next topics, we will get started with intellij idea debugger and learn how to debug simple code.\n\n\n# conclusion\n\nin this topic, you have learned about different debugging techniques you can use to ensure that your code is error-free. the most basic method is inserting print statements to keep track of the values and the execution order of your program. also, you may add assertions using the assert keyword to make potential hidden errors visible at an early stage of development. such assertions may be enabled and disabled by adding or removing the -ea jvm flag. finally, you may attach a debugger to the program to examine its internal state at runtime. these techniques will help you to detect and fix bugs in your code efficiently.',charsets:{},lastUpdated:"2022/12/30, 13:28:45",lastUpdatedTimestamp:1672378125e3},{title:"Theory：Pseudocode",frontmatter:{title:"Theory：Pseudocode",date:"2022-09-18T12:29:36.000Z",permalink:"/pages/b7e18f/",tags:["Algorithm"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/07.Algorithm%20&%20Data%20structure/02.Theory%EF%BC%9APseudocode.html",relativePath:"01.Java/01.Hyperskill - Java/07.Algorithm & Data structure/02.Theory：Pseudocode.md",key:"v-3ac19be9",path:"/pages/b7e18f/",headers:[{level:2,title:"What is pseudocode?",slug:"what-is-pseudocode",normalizedTitle:"what is pseudocode?",charIndex:436},{level:2,title:"Why do we need pseudocode?",slug:"why-do-we-need-pseudocode",normalizedTitle:"why do we need pseudocode?",charIndex:1294},{level:2,title:"Pseudocode example",slug:"pseudocode-example",normalizedTitle:"pseudocode example",charIndex:2199},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:4070}],headersStr:"What is pseudocode? Why do we need pseudocode? Pseudocode example Conclusion",content:"Different people use different programming languages, and that often becomes a problem. If you implement an algorithm you've written in one particular language, developers who don't know that language would hardly be able to understand it. To solve this problem, you can use a pseudocode, a special artificial language that stands somewhere in between \"human\" language and code. Let's find out what it is and why we need it at all.\n\n\n# What is pseudocode?\n\nDespite the variety of programming languages, they all share some common features. These include variables, loops, if-else blocks, and so on. In fact, if we remove all language-specific features from a program, we are left with its \"logical core\", which is the essence of any algorithm. By isolating this core, we are inevitably forced to resort to high-level constructs like \"Do A until B happens\", where both A and B can be quite complex operations. So, this essence of an algorithm may be called a pseudocode**.**\n\nIf we decide to use pseudocode, we lose the opportunity to \"explain\" our instructions to a computer, which requires a significantly lower-level input. On the other hand, we gain a lot in the brevity of our solution and its comprehensibility to people, which is exactly what we strive for when we create pseudocode.\n\n\n# Why do we need pseudocode?\n\nBut why should we use an abstract language, not an existing one? Of course, we can use a popular and simple language like Python, and many programmers can understand this code. The main problem here is that in real code you need to work with memory, include libraries, solve some problems with visibility, variable types, and so on. Why do we need to think about this stuff if we want to understand the algorithm? An abstract language better describes the idea of an algorithm without complications.\n\nAnother obvious solution to the problem of universal description of an algorithm is to simply describe it in human language. Alas, this is also a bad idea. In this case, you have to read a lot of text and take some time to figure out what the code will look like. With pseudocode, you don't need to clarify the description, and it's easy to see the structure of the code.\n\n\n# Pseudocode example\n\nLet's solve a standard task and find the maximum value in an array of positive numbers. The array is just an ordered bunch of numbers if you're not already familiar with the term.\n\nFirst, let's look at a pseudocode function:\n\nfunction max(array):            // you receive an array somehow\n    if len(array) == 0 then     // compare the size of array with 0\n        return -1               // empty array, no maximum\n\n    max = 0                     // assume that maximum is the 0\n    \n    for i in [1, len(array)]:    // iterate over the array, array indices start at 1\n        if array[i] > max then  // if we find something greater, we change the maximum\n            max = array[i]\n    \n    return max                 // our result\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\nIt looks pretty straightforward and gives a sense of the algorithm's internal logic.\n\nNow let's look at the Python code that does basically the same:\n\nn = int(input())                # the size of array \narray = []                      # empty array\nfor i in range(n):              # do something n times\n    array.append(int(input()))  # add element to the array\n\nif n == 0:                      # empty array\n    print(-1)\n\nelse:\n    max = 0                     # current maximum\n\n    for i in array:             # iterate over the array\n        if i > max:         \n            max = i             # update the maximum\n\n    print(max)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\nAs you can see, we can omit reading and storing values. With pseudocode, we can describe only the algorithm's logic.\n\nThe pseudocode has a lot of variations and dialects. In this course, we will use a specific version of pseudocode. We will talk more about our dialect in the following topics. For now, it's important that you know how to read and understand pseudocode, not how to write it correctly.\n\n\n# Conclusion\n\nPseudocode is a way of expressing an algorithm without following fixed syntax rules*.* It is widely used to communicate the essence of an algorithm to others while ignoring the details of its implementation. With pseudocode, you can easily communicate ideas and concepts to other developers, no matter what language they write in. Pseudocode has many dialects, but in this course we will use a specific version that we'll discuss later.",normalizedContent:"different people use different programming languages, and that often becomes a problem. if you implement an algorithm you've written in one particular language, developers who don't know that language would hardly be able to understand it. to solve this problem, you can use a pseudocode, a special artificial language that stands somewhere in between \"human\" language and code. let's find out what it is and why we need it at all.\n\n\n# what is pseudocode?\n\ndespite the variety of programming languages, they all share some common features. these include variables, loops, if-else blocks, and so on. in fact, if we remove all language-specific features from a program, we are left with its \"logical core\", which is the essence of any algorithm. by isolating this core, we are inevitably forced to resort to high-level constructs like \"do a until b happens\", where both a and b can be quite complex operations. so, this essence of an algorithm may be called a pseudocode**.**\n\nif we decide to use pseudocode, we lose the opportunity to \"explain\" our instructions to a computer, which requires a significantly lower-level input. on the other hand, we gain a lot in the brevity of our solution and its comprehensibility to people, which is exactly what we strive for when we create pseudocode.\n\n\n# why do we need pseudocode?\n\nbut why should we use an abstract language, not an existing one? of course, we can use a popular and simple language like python, and many programmers can understand this code. the main problem here is that in real code you need to work with memory, include libraries, solve some problems with visibility, variable types, and so on. why do we need to think about this stuff if we want to understand the algorithm? an abstract language better describes the idea of an algorithm without complications.\n\nanother obvious solution to the problem of universal description of an algorithm is to simply describe it in human language. alas, this is also a bad idea. in this case, you have to read a lot of text and take some time to figure out what the code will look like. with pseudocode, you don't need to clarify the description, and it's easy to see the structure of the code.\n\n\n# pseudocode example\n\nlet's solve a standard task and find the maximum value in an array of positive numbers. the array is just an ordered bunch of numbers if you're not already familiar with the term.\n\nfirst, let's look at a pseudocode function:\n\nfunction max(array):            // you receive an array somehow\n    if len(array) == 0 then     // compare the size of array with 0\n        return -1               // empty array, no maximum\n\n    max = 0                     // assume that maximum is the 0\n    \n    for i in [1, len(array)]:    // iterate over the array, array indices start at 1\n        if array[i] > max then  // if we find something greater, we change the maximum\n            max = array[i]\n    \n    return max                 // our result\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\nit looks pretty straightforward and gives a sense of the algorithm's internal logic.\n\nnow let's look at the python code that does basically the same:\n\nn = int(input())                # the size of array \narray = []                      # empty array\nfor i in range(n):              # do something n times\n    array.append(int(input()))  # add element to the array\n\nif n == 0:                      # empty array\n    print(-1)\n\nelse:\n    max = 0                     # current maximum\n\n    for i in array:             # iterate over the array\n        if i > max:         \n            max = i             # update the maximum\n\n    print(max)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\nas you can see, we can omit reading and storing values. with pseudocode, we can describe only the algorithm's logic.\n\nthe pseudocode has a lot of variations and dialects. in this course, we will use a specific version of pseudocode. we will talk more about our dialect in the following topics. for now, it's important that you know how to read and understand pseudocode, not how to write it correctly.\n\n\n# conclusion\n\npseudocode is a way of expressing an algorithm without following fixed syntax rules*.* it is widely used to communicate the essence of an algorithm to others while ignoring the details of its implementation. with pseudocode, you can easily communicate ideas and concepts to other developers, no matter what language they write in. pseudocode has many dialects, but in this course we will use a specific version that we'll discuss later.",charsets:{},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：Computer algorithms",frontmatter:{title:"Theory：Computer algorithms",date:"2022-09-15T21:46:54.000Z",permalink:"/pages/5276ce/",tags:["Algorithm"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/07.Algorithm%20&%20Data%20structure/01.Theory%EF%BC%9AComputer%20algorithms.html",relativePath:"01.Java/01.Hyperskill - Java/07.Algorithm & Data structure/01.Theory：Computer algorithms.md",key:"v-9816d7c8",path:"/pages/5276ce/",headers:[{level:2,title:"Computer algorithms",slug:"computer-algorithms",normalizedTitle:"computer algorithms",charIndex:592},{level:2,title:"Programs and algorithms",slug:"programs-and-algorithms",normalizedTitle:"programs and algorithms",charIndex:1811},{level:2,title:"Summary",slug:"summary",normalizedTitle:"summary",charIndex:3964}],headersStr:"Computer algorithms Programs and algorithms Summary",content:"You have probably heard something about algorithms in real life. Simply put, an algorithm is a step-by-step sequence of actions you need to perform to achieve the desired result. It can be an algorithm for cooking a sandwich described by a recipe or an algorithm for getting dressed according to today's weather and your mood.\n\n\n\nAmong all algorithms, there is one special group called computer algorithms. They are usually created for and utilized by computers. In this topic, we will discuss in detail what computer algorithms are, as well as explain why it is important to learn them.\n\n\n# Computer algorithms\n\nComputer algorithms are everywhere around us. Your smartphone is able to guide you through a city from one point to another using a certain algorithm. Other algorithms can control the behavior of your enemies in a computer game. Services like Google or Yahoo apply sophisticated algorithms to provide you with the most relevant results when you use them to search for information on the Web. Algorithms are also used to calculate the trajectory of rockets. And they even help doctors to determine diagnoses correctly!\n\n\n\nAn important difference between real-life and computer algorithms is that a computer cannot guess what we intend to do. If something goes wrong or an algorithm is not clear, a human can adjust the algorithm based on their experience. Computers cannot do the same. Let's get back to our sandwich algorithm. If we realize that we are out of bread, a human would think of going to the store and buying some more. On the other hand, a computer would report the absence of such an ingredient or proceed with its work without even noticing that, which would result in incorrect output. Thus, it is our responsibility to describe a computer algorithm precisely and unambiguously.\n\n\n# Programs and algorithms\n\nAs you may know, a program is a sequence of instructions to perform some tasks on a computer. The difference between programs and algorithms is that programs are written using a specific programming language while algorithms are usually described at a higher level than programming language statements. In other words, an algorithm is like an abstract schema, and a program can be its implementation.\n\nAll this also means that algorithms are language-agnostic: you can implement one algorithm using different programming languages. For example, you may use Java, Python, Kotlin, or other languages to implement the same algorithm.\n\nProgramming languages usually contain implementations of some basic algorithms for solving typical problems. These algorithms are provided in standard libraries, and software developers can reuse them instead of implementing a new one each time. However, to be able to use such algorithms correctly and efficiently and to understand how other developers use them, it is essential to learn these basic algorithms and get familiar with how they work under the hood. Moreover, the methods and tricks used in these approaches may come in handy while building your own algorithms as well. It is similar to solving exercises at school: these here are the examples you solve with your teacher during the class, and at home you have to solve other tasks using the methods discussed during the lesson.\n\n\n\nAlgorithms from standard libraries cannot cover all possible problems developers can encounter, so you will usually have to construct and implement your own algorithms for your problems. Classic algorithms serve as nice examples for learning the basic principles of algorithm construction.\n\nFurthermore, there are so many well-known problems and their efficient solutions that standard libraries typically implement only the most prominent ones. Thus, sometimes you will need to implement a classic solution for a problem yourself, from scratch. This is yet another reason why it is essential to learn algorithms: you need to know which one and when to apply and how to implement it efficiently.\n\n\n# Summary\n\nAn algorithm is a sequence of actions you need to perform to achieve a certain result. An important group of algorithms is computer algorithms: the ones created for computers and utilized by them. There are several reasons why it is essential to learn computer algorithms:\n\n * Software developers often encounter tasks of the same type while working on different projects. For such typical tasks, programming languages provide ready-to-use algorithms in standard libraries. To utilize these algorithms efficiently, you need to understand how they work under the hood;\n * There are numerous well-known algorithms that cannot be found as ready-to-use functions from libraries. Sometimes you may even encounter problems that are impossible to solve using only well-known algorithms. In both cases, you need to implement a suitable algorithm yourself. To be able to do that, you need to know basic algorithmic approaches, their pros and cons, and which one to apply in a particular case;\n * Often you need not only to write the code yourself, but also to read the code written by other developers. If you want to understand the algorithms they might use, you need to know basic algorithms and algorithmic approaches as well;\n * Implementing algorithms will help you improve your programming skills.\n\nWe believe that there are other reasons why learning algorithms is worth it. If you have some ideas, don't hesitate to write them in the comments.\n\nGood luck with learning algorithms!",normalizedContent:"you have probably heard something about algorithms in real life. simply put, an algorithm is a step-by-step sequence of actions you need to perform to achieve the desired result. it can be an algorithm for cooking a sandwich described by a recipe or an algorithm for getting dressed according to today's weather and your mood.\n\n\n\namong all algorithms, there is one special group called computer algorithms. they are usually created for and utilized by computers. in this topic, we will discuss in detail what computer algorithms are, as well as explain why it is important to learn them.\n\n\n# computer algorithms\n\ncomputer algorithms are everywhere around us. your smartphone is able to guide you through a city from one point to another using a certain algorithm. other algorithms can control the behavior of your enemies in a computer game. services like google or yahoo apply sophisticated algorithms to provide you with the most relevant results when you use them to search for information on the web. algorithms are also used to calculate the trajectory of rockets. and they even help doctors to determine diagnoses correctly!\n\n\n\nan important difference between real-life and computer algorithms is that a computer cannot guess what we intend to do. if something goes wrong or an algorithm is not clear, a human can adjust the algorithm based on their experience. computers cannot do the same. let's get back to our sandwich algorithm. if we realize that we are out of bread, a human would think of going to the store and buying some more. on the other hand, a computer would report the absence of such an ingredient or proceed with its work without even noticing that, which would result in incorrect output. thus, it is our responsibility to describe a computer algorithm precisely and unambiguously.\n\n\n# programs and algorithms\n\nas you may know, a program is a sequence of instructions to perform some tasks on a computer. the difference between programs and algorithms is that programs are written using a specific programming language while algorithms are usually described at a higher level than programming language statements. in other words, an algorithm is like an abstract schema, and a program can be its implementation.\n\nall this also means that algorithms are language-agnostic: you can implement one algorithm using different programming languages. for example, you may use java, python, kotlin, or other languages to implement the same algorithm.\n\nprogramming languages usually contain implementations of some basic algorithms for solving typical problems. these algorithms are provided in standard libraries, and software developers can reuse them instead of implementing a new one each time. however, to be able to use such algorithms correctly and efficiently and to understand how other developers use them, it is essential to learn these basic algorithms and get familiar with how they work under the hood. moreover, the methods and tricks used in these approaches may come in handy while building your own algorithms as well. it is similar to solving exercises at school: these here are the examples you solve with your teacher during the class, and at home you have to solve other tasks using the methods discussed during the lesson.\n\n\n\nalgorithms from standard libraries cannot cover all possible problems developers can encounter, so you will usually have to construct and implement your own algorithms for your problems. classic algorithms serve as nice examples for learning the basic principles of algorithm construction.\n\nfurthermore, there are so many well-known problems and their efficient solutions that standard libraries typically implement only the most prominent ones. thus, sometimes you will need to implement a classic solution for a problem yourself, from scratch. this is yet another reason why it is essential to learn algorithms: you need to know which one and when to apply and how to implement it efficiently.\n\n\n# summary\n\nan algorithm is a sequence of actions you need to perform to achieve a certain result. an important group of algorithms is computer algorithms: the ones created for computers and utilized by them. there are several reasons why it is essential to learn computer algorithms:\n\n * software developers often encounter tasks of the same type while working on different projects. for such typical tasks, programming languages provide ready-to-use algorithms in standard libraries. to utilize these algorithms efficiently, you need to understand how they work under the hood;\n * there are numerous well-known algorithms that cannot be found as ready-to-use functions from libraries. sometimes you may even encounter problems that are impossible to solve using only well-known algorithms. in both cases, you need to implement a suitable algorithm yourself. to be able to do that, you need to know basic algorithmic approaches, their pros and cons, and which one to apply in a particular case;\n * often you need not only to write the code yourself, but also to read the code written by other developers. if you want to understand the algorithms they might use, you need to know basic algorithms and algorithmic approaches as well;\n * implementing algorithms will help you improve your programming skills.\n\nwe believe that there are other reasons why learning algorithms is worth it. if you have some ideas, don't hesitate to write them in the comments.\n\ngood luck with learning algorithms!",charsets:{},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：Pseudocode basics",frontmatter:{title:"Theory：Pseudocode basics",date:"2022-09-18T12:30:42.000Z",permalink:"/pages/6ddab4/",tags:["Algorithm"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/07.Algorithm%20&%20Data%20structure/03.Theory%EF%BC%9APseudocode%20basics.html",relativePath:"01.Java/01.Hyperskill - Java/07.Algorithm & Data structure/03.Theory：Pseudocode basics.md",key:"v-4b411184",path:"/pages/6ddab4/",headers:[{level:2,title:"Variables and assigning",slug:"variables-and-assigning",normalizedTitle:"variables and assigning",charIndex:554},{level:2,title:"Input and output data",slug:"input-and-output-data",normalizedTitle:"input and output data",charIndex:2035},{level:2,title:"Comments",slug:"comments",normalizedTitle:"comments",charIndex:2851},{level:2,title:"Arithmetic operations",slug:"arithmetic-operations",normalizedTitle:"arithmetic operations",charIndex:3238},{level:2,title:"Relational and logical operators",slug:"relational-and-logical-operators",normalizedTitle:"relational and logical operators",charIndex:4082},{level:2,title:"Conditional operators",slug:"conditional-operators",normalizedTitle:"conditional operators",charIndex:4897},{level:2,title:"Summary",slug:"summary",normalizedTitle:"summary",charIndex:6638}],headersStr:"Variables and assigning Input and output data Comments Arithmetic operations Relational and logical operators Conditional operators Summary",content:'As you already know, pseudocode is the way to show the structure of the algorithm without any pictures or explanations. Now, it is important to find out how our custom pseudocode looks like.\n\nIn this topic, we will agree upon several rules: how to assign a variable, how to print the output, how to create a simple "if-else" branch. We hope that you already know some programming languages, so it should be easy for you to learn how to read our custom pseudocode. And remember: the more you look at the pseudocode, the easier it is to understand it!\n\n\n# Variables and assigning\n\nNote that every line in our algorithm is one action. Actions are performed sequentially.\n\nLet\'s start learning our language with basic constructions such as variables and assigning. Look at the example below:\n\na = 93\n\n\n1\n\n\nHere, we create a variable named a and assign an integer number 93 to it. The syntax is pretty simple: the name of the variable is on the left, the value is on the right, the assignment operator is in between. Let\'s look at some other examples:\n\nb = 3.14\ns = "Hello"\n\n\n1\n2\n\n\nHere, we assign a floating-point number 3.14 to the variable b and the string Hello to the variable s. For simplicity, we don\'t use types: we don\'t declare that the variable s is a string or the variable b is a floating-point number.\n\nSometimes, there is a need to initialize several variables together. To do that, we will use the following syntax:\n\na = 3\nb = "text"\nc = 5.5\n\n\n1\n2\n3\n\n\nHere, the variable a is equal to 3, the variable b is the string text, and the variable c is 5.5.\n\nIf you need to change the value of a variable, you can assign a different value to it:\n\na = 3\na = 5\n\n\n1\n2\n\n\nFirst, you assign 3 to the variable a. The next action assigns 5 to a. Hence, after this snippet a is equal to 5.\n\nAlso, you can assign a value of one variable to another variable:\n\na = 1.5\nb = a\n\n\n1\n2\n\n\nFirst, you assign 1.5 to the variable a. The next action assigns the value of a to the variable b. After this snippet, a is equal to 1.5, and b is also 1.5.\n\n\n# Input and output data\n\nIn our algorithms, we will typically avoid input and output. When you describe how an algorithm works, it is irrelevant how you get the data and what happens next. However, if we need some external data, we will use this:\n\na = input() // a is a number\nb = input() // b is a string\n\n\n1\n2\n\n\nNote that we don\'t care about the input format. Besides, a and b can be not only numbers or strings. You can also read a table or a sequence of values. However, make sure to add a comment for the reader.\n\nSome algorithms require sending data to the screen. We will use the following syntax for this task:\n\ns = "Hello"\nprint(s)\n\n\n1\n2\n\n\nHere, we assign a string Hello to the variable s. Then, in order to print it, we use the print keyword with the variable s in parentheses. Quite simple and natural.\n\n\n# Comments\n\nAnother important thing is how to write comments. A comment is not a part of a program, it\'s just a text you leave for yourself or other readers. We indicate comments with the //. For example:\n\n// this is a comment\na = 10  // assigning 10 to the variable a\nb = 42  // another assignment\n\n\n1\n2\n3\n\n\nYou can write comments either on a separate line or right after statements.\n\n\n# Arithmetic operations\n\nAlmost any program requires processing numerical data. For that, we use arithmetic operations. In our pseudocode, they look like this:\n\na = 7\nb = 2\n\nsum = a + b   // addition, sum is equal to 9\ndif = a - b   // subtraction, dif is equal to 5\n \nprod = a * b  // multiplication, prod is equal to 14\nquot = a / b  // division, quot is equal to 3.5\nrem = a mod b   // modulo division, rem is equal to 1\nquot_int = a div b // integer division, quot_int is equal to 3\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nTo perform an arithmetic operation with two numbers, we write the first one on the left, the second one on the right, and the operator in between. If we want to assign the result to one of the variables, we use the following syntax:\n\na = 3\nb = 5\n\na = a + b\na = a - b  \n\n\n1\n2\n3\n4\n5\n\n\nThe same goes for multiplication and division.\n\n\n# Relational and logical operators\n\nYou can also use these relational operators in your pseudocode:\n\na == b // a equal to b\na != b // a is not equal to b\na < b  // a is less than b\na <= b // a is less or equal to b\na > b  // a is more than b\na >= b // a is more or equal to b\n\n\n1\n2\n3\n4\n5\n6\n\n\nAll these operations return true or false.\n\nIn case of a complex condition, you can use logical operators. The and returns true only if both conditions are true. The or returns false only if both conditions are false. The not just reverses a value. It works this way:\n\ntrue and true == true\ntrue and false == false\nfalse and true == false\nfalse and false == false\n\ntrue or true == true\ntrue or false == true\nfalse or true == true\nfalse or false == false\n\nnot true == false\nnot false == true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# Conditional operators\n\nAnother commonly used type of construction is conditional operators. Let\'s have a look at an example:\n\na = 3\n\nif a < 5 then\n    print(a)\n\n\n1\n2\n3\n4\n\n\nHere, we create a variable a and initialize it with a number 3. Then, we check if a is less than 5 and if it is true, we print it to the screen. The syntax is clear: the if keyword is followed by a condition, and the next line gets executed only if the condition is true. If you need to combine several conditions, you can use and, or, and not operators:\n\na = 10 \nb = 20\n\nif (a == 10 and b == 20) or not (a == 20 and b == 10) then\n    print(a)\n    print(b) \n\n\n1\n2\n3\n4\n5\n6\n\n\nTo avoid ambiguity, we may need to wrap the conditions into parentheses, like in the example above.\n\nNow, you can put an else branch after the if condition. This branch gets executed if the condition is false. Below you can see an example with the if-else construction:\n\na = -3\n\nif a > 0 then\n    print("positive")\nelse:\n    print("negative or zero") // prints this\n\n\n1\n2\n3\n4\n5\n6\n\n\nBesides, you can use an elif branch. The operator elif is just an abbreviation for else if. The program checks this condition if the first one is false:\n\na = -5\n\nif a > 0 then            // false\n    print("positive")\nelif a == 0 then        // checks this \n    print("zero")\nelse:\n    print("negative")  // output\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nHere, we check whether a is more than 0, then we check whether it equals 0 using the elif branch, and finally we execute the last else branch. Below you can see the same code without the elif branch:\n\na = -5\n\nif a > 0 then              \n    print("positive")\nelse:\n    if a == 0 then          \n        print("zero")\n    else:\n        print("negative") \n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# Summary\n\nIn this topic, we started introducing one possible version of pseudocode. We considered such constructions as variables, assigning, arithmetic operations, and others. These basics are already enough to express some algorithmic ideas. However, they don\'t cover all the necessary concepts that some sophisticated algorithms might require. We will have a closer look at the rest of such constructions in the following topic.\n\nAnd now, let\'s have some practice!',normalizedContent:'as you already know, pseudocode is the way to show the structure of the algorithm without any pictures or explanations. now, it is important to find out how our custom pseudocode looks like.\n\nin this topic, we will agree upon several rules: how to assign a variable, how to print the output, how to create a simple "if-else" branch. we hope that you already know some programming languages, so it should be easy for you to learn how to read our custom pseudocode. and remember: the more you look at the pseudocode, the easier it is to understand it!\n\n\n# variables and assigning\n\nnote that every line in our algorithm is one action. actions are performed sequentially.\n\nlet\'s start learning our language with basic constructions such as variables and assigning. look at the example below:\n\na = 93\n\n\n1\n\n\nhere, we create a variable named a and assign an integer number 93 to it. the syntax is pretty simple: the name of the variable is on the left, the value is on the right, the assignment operator is in between. let\'s look at some other examples:\n\nb = 3.14\ns = "hello"\n\n\n1\n2\n\n\nhere, we assign a floating-point number 3.14 to the variable b and the string hello to the variable s. for simplicity, we don\'t use types: we don\'t declare that the variable s is a string or the variable b is a floating-point number.\n\nsometimes, there is a need to initialize several variables together. to do that, we will use the following syntax:\n\na = 3\nb = "text"\nc = 5.5\n\n\n1\n2\n3\n\n\nhere, the variable a is equal to 3, the variable b is the string text, and the variable c is 5.5.\n\nif you need to change the value of a variable, you can assign a different value to it:\n\na = 3\na = 5\n\n\n1\n2\n\n\nfirst, you assign 3 to the variable a. the next action assigns 5 to a. hence, after this snippet a is equal to 5.\n\nalso, you can assign a value of one variable to another variable:\n\na = 1.5\nb = a\n\n\n1\n2\n\n\nfirst, you assign 1.5 to the variable a. the next action assigns the value of a to the variable b. after this snippet, a is equal to 1.5, and b is also 1.5.\n\n\n# input and output data\n\nin our algorithms, we will typically avoid input and output. when you describe how an algorithm works, it is irrelevant how you get the data and what happens next. however, if we need some external data, we will use this:\n\na = input() // a is a number\nb = input() // b is a string\n\n\n1\n2\n\n\nnote that we don\'t care about the input format. besides, a and b can be not only numbers or strings. you can also read a table or a sequence of values. however, make sure to add a comment for the reader.\n\nsome algorithms require sending data to the screen. we will use the following syntax for this task:\n\ns = "hello"\nprint(s)\n\n\n1\n2\n\n\nhere, we assign a string hello to the variable s. then, in order to print it, we use the print keyword with the variable s in parentheses. quite simple and natural.\n\n\n# comments\n\nanother important thing is how to write comments. a comment is not a part of a program, it\'s just a text you leave for yourself or other readers. we indicate comments with the //. for example:\n\n// this is a comment\na = 10  // assigning 10 to the variable a\nb = 42  // another assignment\n\n\n1\n2\n3\n\n\nyou can write comments either on a separate line or right after statements.\n\n\n# arithmetic operations\n\nalmost any program requires processing numerical data. for that, we use arithmetic operations. in our pseudocode, they look like this:\n\na = 7\nb = 2\n\nsum = a + b   // addition, sum is equal to 9\ndif = a - b   // subtraction, dif is equal to 5\n \nprod = a * b  // multiplication, prod is equal to 14\nquot = a / b  // division, quot is equal to 3.5\nrem = a mod b   // modulo division, rem is equal to 1\nquot_int = a div b // integer division, quot_int is equal to 3\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nto perform an arithmetic operation with two numbers, we write the first one on the left, the second one on the right, and the operator in between. if we want to assign the result to one of the variables, we use the following syntax:\n\na = 3\nb = 5\n\na = a + b\na = a - b  \n\n\n1\n2\n3\n4\n5\n\n\nthe same goes for multiplication and division.\n\n\n# relational and logical operators\n\nyou can also use these relational operators in your pseudocode:\n\na == b // a equal to b\na != b // a is not equal to b\na < b  // a is less than b\na <= b // a is less or equal to b\na > b  // a is more than b\na >= b // a is more or equal to b\n\n\n1\n2\n3\n4\n5\n6\n\n\nall these operations return true or false.\n\nin case of a complex condition, you can use logical operators. the and returns true only if both conditions are true. the or returns false only if both conditions are false. the not just reverses a value. it works this way:\n\ntrue and true == true\ntrue and false == false\nfalse and true == false\nfalse and false == false\n\ntrue or true == true\ntrue or false == true\nfalse or true == true\nfalse or false == false\n\nnot true == false\nnot false == true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# conditional operators\n\nanother commonly used type of construction is conditional operators. let\'s have a look at an example:\n\na = 3\n\nif a < 5 then\n    print(a)\n\n\n1\n2\n3\n4\n\n\nhere, we create a variable a and initialize it with a number 3. then, we check if a is less than 5 and if it is true, we print it to the screen. the syntax is clear: the if keyword is followed by a condition, and the next line gets executed only if the condition is true. if you need to combine several conditions, you can use and, or, and not operators:\n\na = 10 \nb = 20\n\nif (a == 10 and b == 20) or not (a == 20 and b == 10) then\n    print(a)\n    print(b) \n\n\n1\n2\n3\n4\n5\n6\n\n\nto avoid ambiguity, we may need to wrap the conditions into parentheses, like in the example above.\n\nnow, you can put an else branch after the if condition. this branch gets executed if the condition is false. below you can see an example with the if-else construction:\n\na = -3\n\nif a > 0 then\n    print("positive")\nelse:\n    print("negative or zero") // prints this\n\n\n1\n2\n3\n4\n5\n6\n\n\nbesides, you can use an elif branch. the operator elif is just an abbreviation for else if. the program checks this condition if the first one is false:\n\na = -5\n\nif a > 0 then            // false\n    print("positive")\nelif a == 0 then        // checks this \n    print("zero")\nelse:\n    print("negative")  // output\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nhere, we check whether a is more than 0, then we check whether it equals 0 using the elif branch, and finally we execute the last else branch. below you can see the same code without the elif branch:\n\na = -5\n\nif a > 0 then              \n    print("positive")\nelse:\n    if a == 0 then          \n        print("zero")\n    else:\n        print("negative") \n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# summary\n\nin this topic, we started introducing one possible version of pseudocode. we considered such constructions as variables, assigning, arithmetic operations, and others. these basics are already enough to express some algorithmic ideas. however, they don\'t cover all the necessary concepts that some sophisticated algorithms might require. we will have a closer look at the rest of such constructions in the following topic.\n\nand now, let\'s have some practice!',charsets:{},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：The big O notation",frontmatter:{title:"Theory：The big O notation",date:"2022-09-18T12:33:32.000Z",permalink:"/pages/4a7ac8/",tags:["Algorithm"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/07.Algorithm%20&%20Data%20structure/05.Theory%EF%BC%9AThe%20big%20O%20notation.html",relativePath:"01.Java/01.Hyperskill - Java/07.Algorithm & Data structure/05.Theory：The big O notation.md",key:"v-33982f80",path:"/pages/4a7ac8/",headers:[{level:2,title:"Input size",slug:"input-size",normalizedTitle:"input size",charIndex:512},{level:2,title:"Big O notation",slug:"big-o-notation",normalizedTitle:"big o notation",charIndex:2263},{level:2,title:"Common growth rates",slug:"common-growth-rates",normalizedTitle:"common growth rates",charIndex:4814},{level:2,title:"Calculating complexity",slug:"calculating-complexity",normalizedTitle:"calculating complexity",charIndex:7936},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:10626}],headersStr:"Input size Big O notation Common growth rates Calculating complexity Conclusion",content:"Suppose you need to choose one of several algorithms to solve a problem. How can you pick the best one? To do it, you need to measure the algorithm efficiency somehow.\n\nOne of the options might be to measure the time your program needs to process its input. However, different computers may take different time to process the same data. Furthermore, the processing time may depend on the data itself. We obviously need something more universal. So, let's try to estimate the efficiency using big O notation.\n\n\n# Input size\n\nWhat does an algorithm usually do? It makes some calculations. Let's call operations the basic actions, such as addition, multiplication, comparison, variable assignment, etc. Of course, the calculation time depends on the machine, but it doesn't matter now because we want to compare algorithms, not machines. Now let's try to estimate the number of operations in an algorithm!\n\nBuses aren't always punctual, are they? One day it may happen that they are there on time, while the other day they will take a lifetime to arrive. You can't blame solely the driver for that: the time of the trip depends directly on the number of passengers on the bus. The more passengers, the more stops, the longer the time to arrive. Likewise, the running time of an algorithm depends on the input data. Naturally, the program will take a different time to proceed with 10 or 1 000 000 numbers. We will use the term input size as a proxy measure of the size of input data. If you need to work with m numbers, then m is the input size. The input size isn’t always the amount of the input data itself. If you need to find the first ****n*n******* prime numbers, then searching for 10 first primes or 10 000 first primes will also take a different time, however, you only enter a single number n as input. In such cases, that number’s value is typically considered the input size.\n\nIf we can estimate how the number of operations depends on the input size, we will have a machine-independent measure of algorithm complexity. This is exactly what we need! Also, if we want to find a good algorithm, we are mostly interested in its behavior with big data. For this, we can compare the behavior of the algorithm’s running time with some standard functions.\n\n\n# Big O notation\n\nAs we already mentioned, we will use the big O notation to measure the efficiency of algorithms. As a matter of fact, we have borrowed this symbol from mathematics; however, we shall not worry about the mathematical meaning or definition of the big O. Less formally, we can say that an algorithm has the time complexity O(f(n))O(f(n)) if its number of operations grows bigger similar to (or slower than) the function f(n)f(n) when the input size nn is a large number. In order to avoid unnecessary abstractness, let's consider the following task: given a n\\times nn×n table with integers in its cells. Find the number kk in the given table.\n\n\n\nAlice and Bob have come up with their own algorithms to solve the problem. Bob's algorithm consists in scanning every cell of the table and checking if the corresponding value is equal to kk. Well, this implies a maximum of n^2n2 comparisons, which means that the time complexity of Bob's algorithm is O(n^2)O(n2). On the other hand, Alice somehow knows earlier in which column the number kk will be located, hence, she only needs to scan the elements of that column. A column consists of nn cells, meaning that Alice's algorithm will take O(n)O(n) time.\n\nBasically, on a table 2\\times 22×2, Bob will have to perform a maximum of 44 operations; meanwhile, Alice will perform no more than 22. Not a big difference really, is it? What if we have a table n\\times nn×n for a large nn? In this case, n^2n2 will be considerably bigger than nn, as shown below. This is exactly what determines the efficiency of an algorithm – the way it behaves with large input sizes. Hence, we conclude that Alice's algorithm is faster than Bob's, as the big O notation suggests.\n\nHowever, a simple question arises: why can't we write simply n^2n2 or nn for the complexities? Why do we need to add this beautiful round letter in front of these functions? Well, imagine that the element kk is placed in the first cell of the table. Bob will find it immediately and terminate his algorithm. How many steps does he perform: n^2n2? No, just one.\n\n\n\nThat is why we use the big O: roughly speaking, it describes the upper bound for the function's growth rate. This is one of the big O notation's essential advantages. It means that you can calculate how much time to allocate for processing a certain amount of input data and be sure that the algorithm will process it all in due time. In practice, an algorithm might sometimes work even better than what the big O notation shows for its complexity, but not worse.\n\n\n# Common growth rates\n\nBelow are, from best to worse, some common values of the big O function for the time complexity, also known as complexity classes.\n\n * O(1)O(1) (constant time). The algorithm performs a constant number of operations. Maybe one, two, twenty-six, or two hundred – it doesn't matter. What is important is that it doesn't depend on the input size. Typical algorithms of this class include calculating the answer using a direct formula, printing a couple of values, all letters of the English alphabet, etc.\n * O(\\log n)O(logn) (logarithmic time). Perhaps a quick reminder on logarithms is necessary. We usually refer to logarithms of base 2; however, the base does not affect the class. By definition, \\log_2nlog2n equals the number of times nn must be divided by 22 to get 11. That being said, it should not be difficult to guess that such algorithms divide the input size into halves at each step. They are relatively fast: if the size of the input is huge, say, 2^{31}231 (programmers should know the importance of this number), the algorithm will perform approximately \\log_2(2^{31}) = 31log2(231)=31 operations, which is pretty effective.\n * O(n)O(n) (linear time). The time is proportional to the input size, i.e., the time grows linearly as the input size increases. Often, such algorithms are iterated only once. They occur quite frequently, because it is usually necessary to go through every input element before calculating the final answer. This makes the O(n)O(n) class one of the most effective classes in practice.\n * O(n^2)O(n2) (quadratic time). Normally, such algorithms go through all pairs of input elements. Why? Well, mathematics is generous, it constantly provides us with important results: in this case, basic maths confirms that the number of unordered pairs in a set of nn elements is equal to \\frac{n(n-1)}{2}2n(n−1), which, as we will learn later in this topic, is O(n^2)O(n2). If you find it scary or difficult to understand, it is completely normal, it happens to the best of us. On the other hand, for those who are familiar with programming terms, the following sentence might come in handy: quadratic time algorithms usually contain two nested loops.\n * O(2^n)O(2n) (exponential time). Just in case, let's mention that 2^n2n is the same as multiplying 22 by itself nn times. Again, maths states that the number of subsets of a set of nn elements is equal to 2^n2n, therefore, it is reasonable to expect that such algorithms scan all the subsets of the input elements. It is worth noting that this class is extremely inefficient in practice; even for small input sizes, the time taken by the algorithm will be remarkably high.\n\nThere are also other less common complexity classes, which you will come across in some following topics:\n\n * O(\\sqrt n)O(n) (square root time);\n * O(n \\log n)O(nlogn) (log-linear time);\n * O(n^k)O(n**k) (polynomial time);\n * O(n!)O(n!) (factorial time).\n\nNow let's gather all the classes together and sort them from the best to the worst, so that you remember which ones are the most effective, and which ones you should stay away from.\n\n\n\n\n# Calculating complexity\n\nLet's look at a simple example. You want to find the maximum of nn numbers. You will probably decide to go through them and compare every new element with the maximum so far. You will make nn comparisons, so the time complexity is O(n)O(n).\n\nHowever, algorithms are usually quite complex and consist of several steps, whose time complexity may belong to different time complexity classes from the list above. Therefore, to be able to calculate complexities by yourself, it is essential for you to get familiar with the basic properties of the Big O:\n\n * Ignore the constants. As we discussed above, while calculating complexities, we focus solely on the behavior of our algorithm with large input sizes. Therefore, repeating some steps a constant number of times does not affect the complexity. For example, if you traverse nn elements 55 times, we say that the algorithm's time complexity is O(n)O(n), and not O(5n)O(5n). Indeed, there is no significant difference between 1 000 000 000 and 5 000 000 000 operations performed by the algorithm. In either case, we conclude that it is relatively slow. Formally, we write c\\cdot O(n) = O(n)c⋅O(n)=O(n). It is similar for the rest of the complexity classes.\n * Applying a procedure *n*n** times. What if you need to go over nn elements nn times? It is not a constant anymore, as it depends on the input size. In this case, the time complexity becomes O(n^2)O(n2). It's simple: you do nn times an action proportional to nn, which means the result is proportional to n^2n2. In big O notation, we write it as n\\cdot O(n) = O(n^2)n⋅O(n)=O(n2).\n * Smaller terms do not matter. Another common case is when after doing some actions, you need to do something else. For instance, you traverse nn elements nn times and then traverse nn elements again. In this case, the complexity is still O(n^2)O(n2). Additional nn actions do not affect your complexity, which is proportional to n^2n2. In big O notation, it looks like this: O(n)+O(n^2) = O(n^2)O(n)+O(n2)=O(n2). All in all, always keep the largest term in Big O and forget about all others. It is rather easy to understand which terms are larger based on the order provided in the previous section. Naturally, a question arises: why is it correct to ignore the smaller terms? Let's illustrate the example above:\n\n\n\nThe images show that when the input size nn is large, the graphs of n^2n2 and n^2+nn2+n almost coincide (their growth rate is similar). As for n^2n2, for large nn this value is considerably greater than nn, therefore adding nn to it does not affect the value of the function much. This is why we can rightfully write O(n^2)O(n2) instead of O(n^2+n)O(n2+n).\n\n\n# Conclusion\n\nBig O notation is an essential instrument for algorithm performance evaluation. We can use it to assess both the time and the memory complexity. The greatest advantage of big O notation is that it classifies an algorithm rather than gives you a real running time in seconds or required memory in megabytes.\n\nWe should note that it is completely normal if you still find the concept of Big O a bit confusing. It is similar to reading the rules of a board game for the first time without actually having the board in front of you. As soon as you start playing, you will better realize the meaning of those rules. Analogously, in the following topics on algorithms, we will describe in detail how to calculate algorithm complexity. That will definitely lead to a better understanding of this topic as well. In a nutshell, we hope this topic hasn't demotivated you, on the contrary, you should be motivated and hungrier for more.",normalizedContent:"suppose you need to choose one of several algorithms to solve a problem. how can you pick the best one? to do it, you need to measure the algorithm efficiency somehow.\n\none of the options might be to measure the time your program needs to process its input. however, different computers may take different time to process the same data. furthermore, the processing time may depend on the data itself. we obviously need something more universal. so, let's try to estimate the efficiency using big o notation.\n\n\n# input size\n\nwhat does an algorithm usually do? it makes some calculations. let's call operations the basic actions, such as addition, multiplication, comparison, variable assignment, etc. of course, the calculation time depends on the machine, but it doesn't matter now because we want to compare algorithms, not machines. now let's try to estimate the number of operations in an algorithm!\n\nbuses aren't always punctual, are they? one day it may happen that they are there on time, while the other day they will take a lifetime to arrive. you can't blame solely the driver for that: the time of the trip depends directly on the number of passengers on the bus. the more passengers, the more stops, the longer the time to arrive. likewise, the running time of an algorithm depends on the input data. naturally, the program will take a different time to proceed with 10 or 1 000 000 numbers. we will use the term input size as a proxy measure of the size of input data. if you need to work with m numbers, then m is the input size. the input size isn’t always the amount of the input data itself. if you need to find the first ****n*n******* prime numbers, then searching for 10 first primes or 10 000 first primes will also take a different time, however, you only enter a single number n as input. in such cases, that number’s value is typically considered the input size.\n\nif we can estimate how the number of operations depends on the input size, we will have a machine-independent measure of algorithm complexity. this is exactly what we need! also, if we want to find a good algorithm, we are mostly interested in its behavior with big data. for this, we can compare the behavior of the algorithm’s running time with some standard functions.\n\n\n# big o notation\n\nas we already mentioned, we will use the big o notation to measure the efficiency of algorithms. as a matter of fact, we have borrowed this symbol from mathematics; however, we shall not worry about the mathematical meaning or definition of the big o. less formally, we can say that an algorithm has the time complexity o(f(n))o(f(n)) if its number of operations grows bigger similar to (or slower than) the function f(n)f(n) when the input size nn is a large number. in order to avoid unnecessary abstractness, let's consider the following task: given a n\\times nn×n table with integers in its cells. find the number kk in the given table.\n\n\n\nalice and bob have come up with their own algorithms to solve the problem. bob's algorithm consists in scanning every cell of the table and checking if the corresponding value is equal to kk. well, this implies a maximum of n^2n2 comparisons, which means that the time complexity of bob's algorithm is o(n^2)o(n2). on the other hand, alice somehow knows earlier in which column the number kk will be located, hence, she only needs to scan the elements of that column. a column consists of nn cells, meaning that alice's algorithm will take o(n)o(n) time.\n\nbasically, on a table 2\\times 22×2, bob will have to perform a maximum of 44 operations; meanwhile, alice will perform no more than 22. not a big difference really, is it? what if we have a table n\\times nn×n for a large nn? in this case, n^2n2 will be considerably bigger than nn, as shown below. this is exactly what determines the efficiency of an algorithm – the way it behaves with large input sizes. hence, we conclude that alice's algorithm is faster than bob's, as the big o notation suggests.\n\nhowever, a simple question arises: why can't we write simply n^2n2 or nn for the complexities? why do we need to add this beautiful round letter in front of these functions? well, imagine that the element kk is placed in the first cell of the table. bob will find it immediately and terminate his algorithm. how many steps does he perform: n^2n2? no, just one.\n\n\n\nthat is why we use the big o: roughly speaking, it describes the upper bound for the function's growth rate. this is one of the big o notation's essential advantages. it means that you can calculate how much time to allocate for processing a certain amount of input data and be sure that the algorithm will process it all in due time. in practice, an algorithm might sometimes work even better than what the big o notation shows for its complexity, but not worse.\n\n\n# common growth rates\n\nbelow are, from best to worse, some common values of the big o function for the time complexity, also known as complexity classes.\n\n * o(1)o(1) (constant time). the algorithm performs a constant number of operations. maybe one, two, twenty-six, or two hundred – it doesn't matter. what is important is that it doesn't depend on the input size. typical algorithms of this class include calculating the answer using a direct formula, printing a couple of values, all letters of the english alphabet, etc.\n * o(\\log n)o(logn) (logarithmic time). perhaps a quick reminder on logarithms is necessary. we usually refer to logarithms of base 2; however, the base does not affect the class. by definition, \\log_2nlog2n equals the number of times nn must be divided by 22 to get 11. that being said, it should not be difficult to guess that such algorithms divide the input size into halves at each step. they are relatively fast: if the size of the input is huge, say, 2^{31}231 (programmers should know the importance of this number), the algorithm will perform approximately \\log_2(2^{31}) = 31log2(231)=31 operations, which is pretty effective.\n * o(n)o(n) (linear time). the time is proportional to the input size, i.e., the time grows linearly as the input size increases. often, such algorithms are iterated only once. they occur quite frequently, because it is usually necessary to go through every input element before calculating the final answer. this makes the o(n)o(n) class one of the most effective classes in practice.\n * o(n^2)o(n2) (quadratic time). normally, such algorithms go through all pairs of input elements. why? well, mathematics is generous, it constantly provides us with important results: in this case, basic maths confirms that the number of unordered pairs in a set of nn elements is equal to \\frac{n(n-1)}{2}2n(n−1), which, as we will learn later in this topic, is o(n^2)o(n2). if you find it scary or difficult to understand, it is completely normal, it happens to the best of us. on the other hand, for those who are familiar with programming terms, the following sentence might come in handy: quadratic time algorithms usually contain two nested loops.\n * o(2^n)o(2n) (exponential time). just in case, let's mention that 2^n2n is the same as multiplying 22 by itself nn times. again, maths states that the number of subsets of a set of nn elements is equal to 2^n2n, therefore, it is reasonable to expect that such algorithms scan all the subsets of the input elements. it is worth noting that this class is extremely inefficient in practice; even for small input sizes, the time taken by the algorithm will be remarkably high.\n\nthere are also other less common complexity classes, which you will come across in some following topics:\n\n * o(\\sqrt n)o(n) (square root time);\n * o(n \\log n)o(nlogn) (log-linear time);\n * o(n^k)o(n**k) (polynomial time);\n * o(n!)o(n!) (factorial time).\n\nnow let's gather all the classes together and sort them from the best to the worst, so that you remember which ones are the most effective, and which ones you should stay away from.\n\n\n\n\n# calculating complexity\n\nlet's look at a simple example. you want to find the maximum of nn numbers. you will probably decide to go through them and compare every new element with the maximum so far. you will make nn comparisons, so the time complexity is o(n)o(n).\n\nhowever, algorithms are usually quite complex and consist of several steps, whose time complexity may belong to different time complexity classes from the list above. therefore, to be able to calculate complexities by yourself, it is essential for you to get familiar with the basic properties of the big o:\n\n * ignore the constants. as we discussed above, while calculating complexities, we focus solely on the behavior of our algorithm with large input sizes. therefore, repeating some steps a constant number of times does not affect the complexity. for example, if you traverse nn elements 55 times, we say that the algorithm's time complexity is o(n)o(n), and not o(5n)o(5n). indeed, there is no significant difference between 1 000 000 000 and 5 000 000 000 operations performed by the algorithm. in either case, we conclude that it is relatively slow. formally, we write c\\cdot o(n) = o(n)c⋅o(n)=o(n). it is similar for the rest of the complexity classes.\n * applying a procedure *n*n** times. what if you need to go over nn elements nn times? it is not a constant anymore, as it depends on the input size. in this case, the time complexity becomes o(n^2)o(n2). it's simple: you do nn times an action proportional to nn, which means the result is proportional to n^2n2. in big o notation, we write it as n\\cdot o(n) = o(n^2)n⋅o(n)=o(n2).\n * smaller terms do not matter. another common case is when after doing some actions, you need to do something else. for instance, you traverse nn elements nn times and then traverse nn elements again. in this case, the complexity is still o(n^2)o(n2). additional nn actions do not affect your complexity, which is proportional to n^2n2. in big o notation, it looks like this: o(n)+o(n^2) = o(n^2)o(n)+o(n2)=o(n2). all in all, always keep the largest term in big o and forget about all others. it is rather easy to understand which terms are larger based on the order provided in the previous section. naturally, a question arises: why is it correct to ignore the smaller terms? let's illustrate the example above:\n\n\n\nthe images show that when the input size nn is large, the graphs of n^2n2 and n^2+nn2+n almost coincide (their growth rate is similar). as for n^2n2, for large nn this value is considerably greater than nn, therefore adding nn to it does not affect the value of the function much. this is why we can rightfully write o(n^2)o(n2) instead of o(n^2+n)o(n2+n).\n\n\n# conclusion\n\nbig o notation is an essential instrument for algorithm performance evaluation. we can use it to assess both the time and the memory complexity. the greatest advantage of big o notation is that it classifies an algorithm rather than gives you a real running time in seconds or required memory in megabytes.\n\nwe should note that it is completely normal if you still find the concept of big o a bit confusing. it is similar to reading the rules of a board game for the first time without actually having the board in front of you. as soon as you start playing, you will better realize the meaning of those rules. analogously, in the following topics on algorithms, we will describe in detail how to calculate algorithm complexity. that will definitely lead to a better understanding of this topic as well. in a nutshell, we hope this topic hasn't demotivated you, on the contrary, you should be motivated and hungrier for more.",charsets:{},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：Complex constructions in pseudocode",frontmatter:{title:"Theory：Complex constructions in pseudocode",date:"2022-09-18T12:31:29.000Z",permalink:"/pages/0e4b76/",tags:["Algorithm"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/07.Algorithm%20&%20Data%20structure/04.Theory%EF%BC%9AComplex%20constructions%20in%20pseudocode.html",relativePath:"01.Java/01.Hyperskill - Java/07.Algorithm & Data structure/04.Theory：Complex constructions in pseudocode.md",key:"v-77e3674a",path:"/pages/0e4b76/",headers:[{level:2,title:"Loops",slug:"loops",normalizedTitle:"loops",charIndex:492},{level:2,title:"Arrays",slug:"arrays",normalizedTitle:"arrays",charIndex:1345},{level:2,title:"Functions",slug:"functions",normalizedTitle:"functions",charIndex:2568},{level:2,title:"Implementing simple algorithms in pseudocode",slug:"implementing-simple-algorithms-in-pseudocode",normalizedTitle:"implementing simple algorithms in pseudocode",charIndex:3223},{level:2,title:"Summary",slug:"summary",normalizedTitle:"summary",charIndex:5492}],headersStr:"Loops Arrays Functions Implementing simple algorithms in pseudocode Summary",content:"On the previous steps, we started discussing pseudocode and covered some basic concepts, such as variables, arithmetic operations, conditional statements, and some others. However, it might not be enough: to describe some algorithms, we will need more complex constructions. In this topic, we will learn more advanced concepts used in pseudocode, such as loops, arrays, and functions. Knowing them will allow you to express sophisticated algorithmic ideas in a simple and concise manner.\n\n\n# Loops\n\nLoops serve to perform repeated calculations. We will use two kinds of loops: the while and the for loops. A while loop looks like this:\n\ni = 0\nwhile i < 5:\n    print(i)\n    i = i + 1\n\n\n1\n2\n3\n4\n\n\nThe syntax is the following: the while keyword followed by a condition, colon, and a loop body. This code means \"execute a body while the condition is true\". In this case, the snippet prints numbers from 0 to 4.\n\nHere is what the for loop looks like:\n\nsum = 0\n\nfor i in [1, 9]:\n    sum = sum + i\n\nprint(sum) // 45, sum of numbers from 1 to 9\n\n\n1\n2\n3\n4\n5\n6\n\n\nThe [1, 9] construction denotes a range of numbers from 1 to 9. The last number is included in the range: we use a closed interval that includes all its limit points. In general, the for i in [a, b] means that the variable i is sequentially assigned to all numbers from the range [a, b].\n\n\n# Arrays\n\nArrays serve to store a collection of objects of the same type. If we need an array and want to initialize its elements later, we will write the following construction :\n\narray[1, 10] // 10-element array with indices from 1 to 10\n\n\n1\n\n\nHere, the variable array denotes an array of 10 elements. We can also initialize an array with some data explicitly:\n\nfib = [0, 1, 1, 2, 3, 5, 8] // array with the name fib\n\n\n1\n\n\nThe two most commonly-used operations for arrays are learning the length and accessing elements. Enumeration of elements starts with 1. As you may know, array indices in programming often start with 0, but we will use a common pseudocode approach. Let's have a look at how it works:\n\nx = fib[4] // x is 2\nlength = len(fib) // length is 7\n\nfor i in [1, len(fib)]:\n    print(fib[i])\n\n\n1\n2\n3\n4\n5\n\n\nThe last for loop iterates through the numbers in the fib array and prints all of them to the screen.\n\nAnother useful operation is getting a subarray of an array. It functions as follows:\n\narray = [0, 3, 2, 4, 1]\nsubarray = array[2, 4]\nprint(subarray) # 3, 2, 4\n\n\n1\n2\n3\n\n\nTo get a subarray, we just specify the desired range in square brackets. Remember that the last number is included in the range.\n\n\n# Functions\n\nWe will often work with functions, since they suit well our goal of ignoring the input format and cutting down on the code size. Now, let's learn how to write a function using pseudocode. Below is a function that calculates the mean value of numbers in an array:\n\nfunction calc_mean(array):\n    mean = 0\n\n    for i in [1, len(array)]:\n        mean = mean + array[i]\n    \n    return mean / len(array)\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nFirst, we put a function's name, then arguments in round brackets separated by spaces, after that an indent and a body. If we need to return something from a function, we use the return keyword, like in the example above.\n\n\n# Implementing simple algorithms in pseudocode\n\nLet's see how we can implement some simple algorithms using the described pseudocode. The first example is a function that takes an array of numbers as input and returns either zero (if the array is empty) or the maximum number in the array:\n\nfunction find_max(array):\n    if len(array) == 0 then\n        return 0\n\n    max = array[1]\n    \n    for i in [2, len(array)]:\n        if array[i] > max then\n            max = array[i]\n    \n    return max\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\nAnother example is a function that merges two arrays. It takes two sorted arrays as input and returns one sorted array containing the numbers from both input arrays:\n\nfunction merge(left, right):\n    merged[1, len(left) + len(right)] // new array \n    \n    i = 1      // \n    j = 1      // indices for loop\n    k = 1      // \n    \n    // iterate over two arrays while we cannot use all elements from any array\n    while i <= len(left) and j <= len(right):\n        if left[i] < right[j] then    // put element from left array to merged array\n            merged[k] = left[i]\n            i = i + 1   // move to next element in left array\n        else:\n            merged[k] = right[j] // put element from right array to merged array\n            j = j + 1   // move to next element in right array\n        k = k + 1   // move to next element in merged array\n                \n    while i <= len(left):    // move remaining element in left array to merged array\n        merged[k] = left[i]\n        i = i + 1\n        k = k + 1\n\n    while j <= len(right):   // move remaining element in right array to merged array\n        merged[k] = right[j]\n        j = j + 1\n        k = k + 1\n\n    return merged\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\nNote that we don't care about passing arguments by value, by reference, and so on. If you change any variable inside the function, those changes are saved outside the function. Thus, if you need to keep an argument immutable, just make a copy of it to operate with. Consider this example of the swap function that swaps two numbers:\n\nfunction swap(a, b):\n    temp = a\n    a = b\n    b = temp\n\nc = 3\nd = 5\n\nswap(c, d)\n\nprint(c) // 5\nprint(d) // 3\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# Summary\n\nIn this topic, we've learned some advanced concepts that we use in pseudocode: loops, arrays, and functions. Along with the ideas covered in the introductory part, they are enough to express both simple and complex algorithmic ideas in a clear manner. Further, we will use the introduced syntax to describe and learn algorithms. Remember: in our dialect, arrays starts with 1, and we use closed ranges!",normalizedContent:"on the previous steps, we started discussing pseudocode and covered some basic concepts, such as variables, arithmetic operations, conditional statements, and some others. however, it might not be enough: to describe some algorithms, we will need more complex constructions. in this topic, we will learn more advanced concepts used in pseudocode, such as loops, arrays, and functions. knowing them will allow you to express sophisticated algorithmic ideas in a simple and concise manner.\n\n\n# loops\n\nloops serve to perform repeated calculations. we will use two kinds of loops: the while and the for loops. a while loop looks like this:\n\ni = 0\nwhile i < 5:\n    print(i)\n    i = i + 1\n\n\n1\n2\n3\n4\n\n\nthe syntax is the following: the while keyword followed by a condition, colon, and a loop body. this code means \"execute a body while the condition is true\". in this case, the snippet prints numbers from 0 to 4.\n\nhere is what the for loop looks like:\n\nsum = 0\n\nfor i in [1, 9]:\n    sum = sum + i\n\nprint(sum) // 45, sum of numbers from 1 to 9\n\n\n1\n2\n3\n4\n5\n6\n\n\nthe [1, 9] construction denotes a range of numbers from 1 to 9. the last number is included in the range: we use a closed interval that includes all its limit points. in general, the for i in [a, b] means that the variable i is sequentially assigned to all numbers from the range [a, b].\n\n\n# arrays\n\narrays serve to store a collection of objects of the same type. if we need an array and want to initialize its elements later, we will write the following construction :\n\narray[1, 10] // 10-element array with indices from 1 to 10\n\n\n1\n\n\nhere, the variable array denotes an array of 10 elements. we can also initialize an array with some data explicitly:\n\nfib = [0, 1, 1, 2, 3, 5, 8] // array with the name fib\n\n\n1\n\n\nthe two most commonly-used operations for arrays are learning the length and accessing elements. enumeration of elements starts with 1. as you may know, array indices in programming often start with 0, but we will use a common pseudocode approach. let's have a look at how it works:\n\nx = fib[4] // x is 2\nlength = len(fib) // length is 7\n\nfor i in [1, len(fib)]:\n    print(fib[i])\n\n\n1\n2\n3\n4\n5\n\n\nthe last for loop iterates through the numbers in the fib array and prints all of them to the screen.\n\nanother useful operation is getting a subarray of an array. it functions as follows:\n\narray = [0, 3, 2, 4, 1]\nsubarray = array[2, 4]\nprint(subarray) # 3, 2, 4\n\n\n1\n2\n3\n\n\nto get a subarray, we just specify the desired range in square brackets. remember that the last number is included in the range.\n\n\n# functions\n\nwe will often work with functions, since they suit well our goal of ignoring the input format and cutting down on the code size. now, let's learn how to write a function using pseudocode. below is a function that calculates the mean value of numbers in an array:\n\nfunction calc_mean(array):\n    mean = 0\n\n    for i in [1, len(array)]:\n        mean = mean + array[i]\n    \n    return mean / len(array)\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nfirst, we put a function's name, then arguments in round brackets separated by spaces, after that an indent and a body. if we need to return something from a function, we use the return keyword, like in the example above.\n\n\n# implementing simple algorithms in pseudocode\n\nlet's see how we can implement some simple algorithms using the described pseudocode. the first example is a function that takes an array of numbers as input and returns either zero (if the array is empty) or the maximum number in the array:\n\nfunction find_max(array):\n    if len(array) == 0 then\n        return 0\n\n    max = array[1]\n    \n    for i in [2, len(array)]:\n        if array[i] > max then\n            max = array[i]\n    \n    return max\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\nanother example is a function that merges two arrays. it takes two sorted arrays as input and returns one sorted array containing the numbers from both input arrays:\n\nfunction merge(left, right):\n    merged[1, len(left) + len(right)] // new array \n    \n    i = 1      // \n    j = 1      // indices for loop\n    k = 1      // \n    \n    // iterate over two arrays while we cannot use all elements from any array\n    while i <= len(left) and j <= len(right):\n        if left[i] < right[j] then    // put element from left array to merged array\n            merged[k] = left[i]\n            i = i + 1   // move to next element in left array\n        else:\n            merged[k] = right[j] // put element from right array to merged array\n            j = j + 1   // move to next element in right array\n        k = k + 1   // move to next element in merged array\n                \n    while i <= len(left):    // move remaining element in left array to merged array\n        merged[k] = left[i]\n        i = i + 1\n        k = k + 1\n\n    while j <= len(right):   // move remaining element in right array to merged array\n        merged[k] = right[j]\n        j = j + 1\n        k = k + 1\n\n    return merged\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\nnote that we don't care about passing arguments by value, by reference, and so on. if you change any variable inside the function, those changes are saved outside the function. thus, if you need to keep an argument immutable, just make a copy of it to operate with. consider this example of the swap function that swaps two numbers:\n\nfunction swap(a, b):\n    temp = a\n    a = b\n    b = temp\n\nc = 3\nd = 5\n\nswap(c, d)\n\nprint(c) // 5\nprint(d) // 3\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# summary\n\nin this topic, we've learned some advanced concepts that we use in pseudocode: loops, arrays, and functions. along with the ideas covered in the introductory part, they are enough to express both simple and complex algorithmic ideas in a clear manner. further, we will use the introduced syntax to describe and learn algorithms. remember: in our dialect, arrays starts with 1, and we use closed ranges!",charsets:{},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：Best, Average and cases",frontmatter:{title:"Theory：Best, Average and cases",date:"2022-09-20T23:34:11.000Z",permalink:"/pages/df5f3e/",tags:["Algorithm"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/07.Algorithm%20&%20Data%20structure/06.Theory%EF%BC%9ABest,%20Average%20and%20cases.html",relativePath:"01.Java/01.Hyperskill - Java/07.Algorithm & Data structure/06.Theory：Best, Average and cases.md",key:"v-618c27e6",path:"/pages/df5f3e/",headers:[{level:2,title:"Definition",slug:"definition",normalizedTitle:"definition",charIndex:607},{level:2,title:"Bias of best cases",slug:"bias-of-best-cases",normalizedTitle:"bias of best cases",charIndex:2169},{level:2,title:"Worst case is best for analysis",slug:"worst-case-is-best-for-analysis",normalizedTitle:"worst case is best for analysis",charIndex:3033},{level:2,title:"Complexity of studying average cases",slug:"complexity-of-studying-average-cases",normalizedTitle:"complexity of studying average cases",charIndex:3936},{level:2,title:"Applications",slug:"applications",normalizedTitle:"applications",charIndex:4779},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:7427}],headersStr:"Definition Bias of best cases Worst case is best for analysis Complexity of studying average cases Applications Conclusion",content:"When the chief analyst of a huge corporation ponders a complex decision that will affect the entire company, they have to consider all possible consequences of the future solution. It works the same for computer science: before choosing an algorithm, we should contemplate a few of them, not with a help of financial advisors, but with big O notaion. However, in many cases you will have diverse sets of data that don't allow you to identify a particular method as the best for your problem. That's why it is obligatory to overview the best, the average, and the worst cases for a more accurate choice.\n\n\n# Definition\n\nAn algorithm has the best case performance under optimal conditions. It is the fastest time for an algoritm to finish. For example, the best case for searching for an element in a list from left to right happens when the desired element is the first one.\n\n\n\nWhen we analyze the best-case scenario, we calculate the lower bound of the execution time of an algorithm. The worst case, in turn, shows the upper bound of the time required for an algorithm to finish. The longest time with the worst possible input. While looking for the element 1 in the example below, we will have to perform 6 operations until finding the right one.\n\n\n\nThe average case is a little more complex concept. It is the amount of time used by the algorithm, averaged over all possible inputs. For an explanation of how to define the average case, let's look into an example. Say we have an abstract array with length nn:\n\n\n\nThe number of operations needed to find each element correlates with the element's position. Thus, for the first element only one check is required, while to find the second one you'll have to check the first and the second elements, and so on.\n\n\n\nOverall, we can see that there are from 1 to nn operations required for all possible cases. Now we can use just a little math to calculate the average:\n\n\\frac{1+2+...+n}{n} = \\frac{n+1}{2}n1+2+...+n=2n+1In terms of big O notation, it equals to O(n)O(n) while we don't consider the constants. Thus, we have calculated that the average time complexity for searching an element in an array is O(n)O(n).\n\n\n# Bias of best cases\n\nImagine that you have an automated mechanism on a factory that works with data of a certain format. In order to achieve the best performance, mechanism's program should be maximally adjusted to the data. For example, if you only need to work with every third column in the data, then there is no need to check any others. A program built perfectly for a certain data will show the best performance. However, if you want to sell your program to another factory, this factory's mechanism will not be able to use it. Such a program is very data-bound, so it becomes hard to transfer to another data.\n\nHence, development in general and the choice of algorithms in particular is rarely based on the best-case performance. Developers never design an algorithm based on the best-case scenario in order for the algoritm to be diverse and flexible.\n\n\n# Worst case is best for analysis\n\nStudying the worst cases is convenient for efficiency analysis, since the efficiency of algorithms is usually compared based on the worst cases. Speaking of runtime, the worst-case time complexity corresponds to the longest running time needed for an algorithm to finish, given any input of size . It guarantees that the algorithm execution will not exceed the indicated period of time. The order of growth (e.g. quadratic, logarithmic) of the worst-case complexity is commonly used to compare the efficiency of two algorithms.\n\nFor instance, we can notice that the worst case of quick sort is much \"worse\" than the worst case of merge sort, because it grows more rapidly.\n\n\n\nWhen it comes to time complexity of an algorithm, it means exactly the worst case. Thus, when you hear: \"Bubblesort complexity is O(n^2)O(n2)\", it is about the worst case of this algorithm.\n\n\n# Complexity of studying average cases\n\nAt first, it may seem pointless to study average cases if you can consider the worst. Firstly, working with the worst cases, we can take the execution time with a margin. Secondly, an assessment based on the worst case will definitely be stable and error-free. Hence, if computer scientists study average cases, does it mean that everyone needs it?\n\nYes, it does! There are three primary motivations for studying average-case complexity:\n\n 1. The inputs that lead to the worst case appear rarely in practice, so the worst case may not be indicative;\n 2. The analysis of average cases helps to develop new optimal algorithms in many areas;\n 3. Even if the worst cases of two algorithms are equivalent, their average cases may differ, so the comparison of the average cases will be more representative.\n\n\n# Applications\n\nDifferent complexity estimates are used in choosing optimal algorithms for different problems and tasks:\n\n * The average cases for sorting algorithms have been studied in detail. Thus, basing on the specifics of your data, you can choose the algorithm depending on the prevalence of \"bad\" or \"good\" data.\n * For most problems, it makes sense to undertake average-case complexity analysis for a problem that is considered difficult in the worst case. In cryptographic applications, however, the opposite holds true: the worst-case complexity is irrelevant. Instead, we want a guarantee that the average-case complexity of every algorithm that \"breaks\" the cryptographic scheme is inefficient.\n * Hash tables have very poor worst-case behaviors, but a well-written hash table of sufficient size will never give the worst case, statistically. The average number of operations performed follows an exponential function, and so the runtime of an operation is restricted.\n\nWell, we already know who, what, when, where, why, but we are yet to fully understand the \"how\". In other words, we need a better understanding of how to choose between algorithms knowing their best, average, and worst cases. Let's take a closer look at an example, where you need to choose a sorting algorithm. Let's say we want to sort a few first digits of \\pi = 3,1415926535897932384626433832795...π=3,1415926535897932384626433832795...\n\nIf we consider \\piπ as an array [3,1,4,1,5,9,2,6,5,3,5,8,9][3,1,4,1,5,9,2,6,5,3,5,8,9], then almost every sorting algorithm will be suitable, because the array of \\piπ digits is not too big. However, what if we consider more digits? Below are listed the algorithms and their calculated complexity cases:\n\n\n\nConsidering even a small but unsorted array, we can't define it as the best case of a dataset. Hence, we can't consider the \"Best case\" column at all. Let's now look at the usual sequence of the first digits of \\piπ. It would make sense to focus on the average cases of the presented sorting algorithms. Their time complexity is O(n \\cdot log:n)O(n⋅log**n), O(n^2)O(n2), and O(n \\cdot n!)O(n⋅n!). Since the last two are worse than O(n \\cdot log :n)O(n⋅log**n), we can choose quick sort or merge sort with confidence.\n\nBut how to make the final decision? For this, we also need to examine the worst case. What if we need to sort the first 10,000 digits of \\piπ? This is still not the worst case, because there are more than 10,000 digits in \\piπ, but such an array will be very large, and we need to take it into account. Thus, we can conclude that the merge sort algorithm will be the best option for our problem.\n\n\n# Conclusion\n\nDefining the best, the average and the worst cases for an algorithm you consider is obligatory because the result will directly influence the efficiency of your program. Usually, there is no need to think about the best case, since the algorithm you decide to implement won't always have as input the same set of data. However, understanding the upper bound of the algorithm is essential, because then you won't have doubts about fitting the algorithm's execution in a known limited time.\n\nStudying average cases is not useless either, even if we know the worst-case time complexity. When knowing the average cases, comparison between two algorithms becomes more accurate, since there few situations in practice when the worst cases occur. Considering the average cases, thus, is more suited to the real life and the statistics.\n\nReviewing complexity cases is relevant for a lot of tasks, such as cryptography, sorting problems, data structures, and optimization. It is an essential core of studying algorithms, and in future topics related to specific algorithms you will always find their complexity analysis.",normalizedContent:"when the chief analyst of a huge corporation ponders a complex decision that will affect the entire company, they have to consider all possible consequences of the future solution. it works the same for computer science: before choosing an algorithm, we should contemplate a few of them, not with a help of financial advisors, but with big o notaion. however, in many cases you will have diverse sets of data that don't allow you to identify a particular method as the best for your problem. that's why it is obligatory to overview the best, the average, and the worst cases for a more accurate choice.\n\n\n# definition\n\nan algorithm has the best case performance under optimal conditions. it is the fastest time for an algoritm to finish. for example, the best case for searching for an element in a list from left to right happens when the desired element is the first one.\n\n\n\nwhen we analyze the best-case scenario, we calculate the lower bound of the execution time of an algorithm. the worst case, in turn, shows the upper bound of the time required for an algorithm to finish. the longest time with the worst possible input. while looking for the element 1 in the example below, we will have to perform 6 operations until finding the right one.\n\n\n\nthe average case is a little more complex concept. it is the amount of time used by the algorithm, averaged over all possible inputs. for an explanation of how to define the average case, let's look into an example. say we have an abstract array with length nn:\n\n\n\nthe number of operations needed to find each element correlates with the element's position. thus, for the first element only one check is required, while to find the second one you'll have to check the first and the second elements, and so on.\n\n\n\noverall, we can see that there are from 1 to nn operations required for all possible cases. now we can use just a little math to calculate the average:\n\n\\frac{1+2+...+n}{n} = \\frac{n+1}{2}n1+2+...+n=2n+1in terms of big o notation, it equals to o(n)o(n) while we don't consider the constants. thus, we have calculated that the average time complexity for searching an element in an array is o(n)o(n).\n\n\n# bias of best cases\n\nimagine that you have an automated mechanism on a factory that works with data of a certain format. in order to achieve the best performance, mechanism's program should be maximally adjusted to the data. for example, if you only need to work with every third column in the data, then there is no need to check any others. a program built perfectly for a certain data will show the best performance. however, if you want to sell your program to another factory, this factory's mechanism will not be able to use it. such a program is very data-bound, so it becomes hard to transfer to another data.\n\nhence, development in general and the choice of algorithms in particular is rarely based on the best-case performance. developers never design an algorithm based on the best-case scenario in order for the algoritm to be diverse and flexible.\n\n\n# worst case is best for analysis\n\nstudying the worst cases is convenient for efficiency analysis, since the efficiency of algorithms is usually compared based on the worst cases. speaking of runtime, the worst-case time complexity corresponds to the longest running time needed for an algorithm to finish, given any input of size . it guarantees that the algorithm execution will not exceed the indicated period of time. the order of growth (e.g. quadratic, logarithmic) of the worst-case complexity is commonly used to compare the efficiency of two algorithms.\n\nfor instance, we can notice that the worst case of quick sort is much \"worse\" than the worst case of merge sort, because it grows more rapidly.\n\n\n\nwhen it comes to time complexity of an algorithm, it means exactly the worst case. thus, when you hear: \"bubblesort complexity is o(n^2)o(n2)\", it is about the worst case of this algorithm.\n\n\n# complexity of studying average cases\n\nat first, it may seem pointless to study average cases if you can consider the worst. firstly, working with the worst cases, we can take the execution time with a margin. secondly, an assessment based on the worst case will definitely be stable and error-free. hence, if computer scientists study average cases, does it mean that everyone needs it?\n\nyes, it does! there are three primary motivations for studying average-case complexity:\n\n 1. the inputs that lead to the worst case appear rarely in practice, so the worst case may not be indicative;\n 2. the analysis of average cases helps to develop new optimal algorithms in many areas;\n 3. even if the worst cases of two algorithms are equivalent, their average cases may differ, so the comparison of the average cases will be more representative.\n\n\n# applications\n\ndifferent complexity estimates are used in choosing optimal algorithms for different problems and tasks:\n\n * the average cases for sorting algorithms have been studied in detail. thus, basing on the specifics of your data, you can choose the algorithm depending on the prevalence of \"bad\" or \"good\" data.\n * for most problems, it makes sense to undertake average-case complexity analysis for a problem that is considered difficult in the worst case. in cryptographic applications, however, the opposite holds true: the worst-case complexity is irrelevant. instead, we want a guarantee that the average-case complexity of every algorithm that \"breaks\" the cryptographic scheme is inefficient.\n * hash tables have very poor worst-case behaviors, but a well-written hash table of sufficient size will never give the worst case, statistically. the average number of operations performed follows an exponential function, and so the runtime of an operation is restricted.\n\nwell, we already know who, what, when, where, why, but we are yet to fully understand the \"how\". in other words, we need a better understanding of how to choose between algorithms knowing their best, average, and worst cases. let's take a closer look at an example, where you need to choose a sorting algorithm. let's say we want to sort a few first digits of \\pi = 3,1415926535897932384626433832795...π=3,1415926535897932384626433832795...\n\nif we consider \\piπ as an array [3,1,4,1,5,9,2,6,5,3,5,8,9][3,1,4,1,5,9,2,6,5,3,5,8,9], then almost every sorting algorithm will be suitable, because the array of \\piπ digits is not too big. however, what if we consider more digits? below are listed the algorithms and their calculated complexity cases:\n\n\n\nconsidering even a small but unsorted array, we can't define it as the best case of a dataset. hence, we can't consider the \"best case\" column at all. let's now look at the usual sequence of the first digits of \\piπ. it would make sense to focus on the average cases of the presented sorting algorithms. their time complexity is o(n \\cdot log:n)o(n⋅log**n), o(n^2)o(n2), and o(n \\cdot n!)o(n⋅n!). since the last two are worse than o(n \\cdot log :n)o(n⋅log**n), we can choose quick sort or merge sort with confidence.\n\nbut how to make the final decision? for this, we also need to examine the worst case. what if we need to sort the first 10,000 digits of \\piπ? this is still not the worst case, because there are more than 10,000 digits in \\piπ, but such an array will be very large, and we need to take it into account. thus, we can conclude that the merge sort algorithm will be the best option for our problem.\n\n\n# conclusion\n\ndefining the best, the average and the worst cases for an algorithm you consider is obligatory because the result will directly influence the efficiency of your program. usually, there is no need to think about the best case, since the algorithm you decide to implement won't always have as input the same set of data. however, understanding the upper bound of the algorithm is essential, because then you won't have doubts about fitting the algorithm's execution in a known limited time.\n\nstudying average cases is not useless either, even if we know the worst-case time complexity. when knowing the average cases, comparison between two algorithms becomes more accurate, since there few situations in practice when the worst cases occur. considering the average cases, thus, is more suited to the real life and the statistics.\n\nreviewing complexity cases is relevant for a lot of tasks, such as cryptography, sorting problems, data structures, and optimization. it is an essential core of studying algorithms, and in future topics related to specific algorithms you will always find their complexity analysis.",charsets:{},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：Data structures",frontmatter:{title:"Theory：Data structures",date:"2022-09-20T23:37:13.000Z",permalink:"/pages/12da49/",tags:["Data structure"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/07.Algorithm%20&%20Data%20structure/07.Theory%EF%BC%9AData%20structures.html",relativePath:"01.Java/01.Hyperskill - Java/07.Algorithm & Data structure/07.Theory：Data structures.md",key:"v-13a7ac0e",path:"/pages/12da49/",headers:[{level:2,title:"What data structures are",slug:"what-data-structures-are",normalizedTitle:"what data structures are",charIndex:377},{level:2,title:"The role of data structures",slug:"the-role-of-data-structures",normalizedTitle:"the role of data structures",charIndex:1762},{level:2,title:"Abstract data type",slug:"abstract-data-type",normalizedTitle:"abstract data type",charIndex:3300},{level:2,title:"Comparison",slug:"comparison",normalizedTitle:"comparison",charIndex:5210},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:6977}],headersStr:"What data structures are The role of data structures Abstract data type Comparison Conclusion",content:"Let's face it: you can't ignore algorithms if you're hoping to write an innovative and efficient program. However, algorithms are not the only thing you need: besides the question of processing, there's also the question of data storage, including how much space your program takes. Here data structures come in handy, so let's learn some essential information about them.\n\n\n# What data structures are\n\nData structures are a way of organizing data and providing convenient access to it. Rather abstract? Okay, let's look at a more specific example.\n\n\n\nImagine that we have a variety of soda cans and bottles that we would like to organize. We could put them all in a random bag or build a can tower, but this way, it won't be easy to fish out a specific type of soda or even count the items. After a bit of pondering, we decide to put them in a vending machine. This vending machine will be a structure of beverages: it has a specific order, and you can easily observe the tins and bottles, count them, access one or another, as well as understand the capacity of the machine and perform many other operations.\n\nNow let's return to the formal definition and try again: the term data structure refers to a collection of elements containing data, as well as relationships between them, and data operations. As a rule, data structures have two types of operations: internal, supporting data organization, and external, available to users for storing, retrieving, or modifying data. There are several common data structures: an array, a linked list, a hash table, and a whole variety of trees (binary search tree, heap, red-black tree, B-tree, etc.). You can read about all of them in detail on our platform, but don't hurry: let's get to know the basics first.\n\n\n# The role of data structures\n\nNow, why is it so important to have all these kinds of data structures? We've mentioned that organizing soda cans in a vending machine instead of a can tower is much more efficient, as it is far easier for us to perform any actions on these cans. What does this mean formally? We are already familiar with big O and the time complexity. In a nutshell, different data structures have different time complexities for performing the same external operations in a set of data. This is why it is essential to consider all the possible structures and choose the most efficient amongst them. Let's illustrate what we've said above in an example.\n\nLater on, you will learn about an important shortest path algorithm: Dijkstra's algorithm. It has two main implementations: using an array or a heap as a data structure. In the first case, Dijkstra's algorithm time complexity will be O(n^2+m)O(n2+m), whereas if we use the second type of data structure, our algorithm will work on O((n+m)\\log n)O((n+m)logn). Just for now, we suggest ignoring the names and the unfamiliar terms — the idea is to simply illustrate how using different data structures can lead to different time complexities of the same algorithm. There is a famous book entitled Algorithms + Data Structures = Programs, written by the Swiss scientist Niklaus Wirth in 1976. This book covers some of the fundamental topics of computer programming; its title shows quite clearly just how important it is for a programmer to understand data structures.\n\n\n# Abstract data type\n\nThere is another term: abstract data type (ADT), which is sometimes used as a synonym for data structures, though this is not entirely correct. Let's try to figure out what ADT is by considering yet another example.\n\n\n\nWe hope you don't doubt that this above is a vending machine. The thing is that you can't see what exactly it contains on the inside. Now, you probably know how to interact with vending machines: you insert a coin and get your drink. If you are just thirsty, this information is more than enough. It doesn't matter to you how the machine works from the inside, how it organizes the payment, the beverages, or how many beverages there are; you only need to know how to get your soda. Hence, this is an abstract vending machine for you. For those who would like a formal explanation of this concept, we should say that in programming such techniques of \"covering vending machines\" are known as:\n\n * Abstraction — a concept in object-oriented programming; it \"shows\" only essential attributes and \"hides\" unnecessary information, a.k.a. abstract classes or interfaces;\n * Encapsulation — a method of making a complex system easier to handle for end users. The user needn't worry about the internal details and complexities of the system. Encapsulation is the process of wrapping the data and the code that operates on that data into a single entity.\n\nIn general, an Abstract Data Type is a mathematical concept, a simpler and more abstract way to view the data structure as a whole. It is a data type that is defined by a set of values and a set of possible external operations (behavior) from the user's point of view*.* There are some common ADTs that every trained programmer should know: stack, queue*,* and so on*.* As a rule, modern programming languages like Java, Python, and C++ provide these ADTs in standard libraries so that we can use them in our programs.\n\n\n# Comparison\n\nLet's get back to our vending machine parable once again to realize the difference between data structures (sometimes referred to as CDTs – concrete data types) and ADTs.\n\nThere are different ways to create a simple vending machine that performs a single function of exchanging a coin for a drink. We can keep the soda in a huge bottle; we can put it in different bottles in a heap inside the storage; we can organize the bottles and tins in one big row or ten different rows. All these arrangements can be called the implementations of a simple abstract vending machine. If you want to create a more complicated mechanism with several functions, for example, \"choose a type of soda, then insert a coin\" or \"choose a drink or an ice cream\", some of the previous implementations won't work.\n\n\n\nData structures are exact representations of data, but ADTs are different. They reflect the point of view of an implementer, not a user. A data structure is an implementation of an ADT's functions, a way to look more closely at some specific operations and components of the structure. A good example of an abstract data type is an integer. We know what values integers can have and what operations they support (addition, subtraction, multiplication, and so on). At the machine level, they can be represented by a sequence of zeros and ones, but we usually don't care. It is enough for us to know that what we have is an integer, and not, say, a floating-point number. For those who are familiar with OOP, java.util.Map, for example, plays the role of an ADT, whereas HashMap or LinkedHashMap can be interpreted as data structures.\n\nIn some sense, an ADT defines the logical form of the data type, while a data structure implements the physical form of it.\n\n\n# Conclusion\n\nAll in all, data structures are a way of organizing data and providing convenient access to it. They have two types of operations: internal and external. There are many types of data structures, each with its own time complexities, features, and limitations. Another closely related concept to keep in mind is an abstract data type. In short, an ADT is a way to view the data structure, seeing its functions and general behavior, whereas the data structure itself is the implementation of these functions.\n\nNow it's time to conclude this topic. We realize that abstract stuff like this may often be pretty difficult to process. For now, you need to understand the main idea behind data structures and the important role they play in computer science. It is OK if you don't understand yet the formal definition of an ADT or a CDT in every detail, you will get a chance to get back to it later. So, are you hungry for more? Dozens of topics on specific data structures are waiting for you on our platform.",normalizedContent:"let's face it: you can't ignore algorithms if you're hoping to write an innovative and efficient program. however, algorithms are not the only thing you need: besides the question of processing, there's also the question of data storage, including how much space your program takes. here data structures come in handy, so let's learn some essential information about them.\n\n\n# what data structures are\n\ndata structures are a way of organizing data and providing convenient access to it. rather abstract? okay, let's look at a more specific example.\n\n\n\nimagine that we have a variety of soda cans and bottles that we would like to organize. we could put them all in a random bag or build a can tower, but this way, it won't be easy to fish out a specific type of soda or even count the items. after a bit of pondering, we decide to put them in a vending machine. this vending machine will be a structure of beverages: it has a specific order, and you can easily observe the tins and bottles, count them, access one or another, as well as understand the capacity of the machine and perform many other operations.\n\nnow let's return to the formal definition and try again: the term data structure refers to a collection of elements containing data, as well as relationships between them, and data operations. as a rule, data structures have two types of operations: internal, supporting data organization, and external, available to users for storing, retrieving, or modifying data. there are several common data structures: an array, a linked list, a hash table, and a whole variety of trees (binary search tree, heap, red-black tree, b-tree, etc.). you can read about all of them in detail on our platform, but don't hurry: let's get to know the basics first.\n\n\n# the role of data structures\n\nnow, why is it so important to have all these kinds of data structures? we've mentioned that organizing soda cans in a vending machine instead of a can tower is much more efficient, as it is far easier for us to perform any actions on these cans. what does this mean formally? we are already familiar with big o and the time complexity. in a nutshell, different data structures have different time complexities for performing the same external operations in a set of data. this is why it is essential to consider all the possible structures and choose the most efficient amongst them. let's illustrate what we've said above in an example.\n\nlater on, you will learn about an important shortest path algorithm: dijkstra's algorithm. it has two main implementations: using an array or a heap as a data structure. in the first case, dijkstra's algorithm time complexity will be o(n^2+m)o(n2+m), whereas if we use the second type of data structure, our algorithm will work on o((n+m)\\log n)o((n+m)logn). just for now, we suggest ignoring the names and the unfamiliar terms — the idea is to simply illustrate how using different data structures can lead to different time complexities of the same algorithm. there is a famous book entitled algorithms + data structures = programs, written by the swiss scientist niklaus wirth in 1976. this book covers some of the fundamental topics of computer programming; its title shows quite clearly just how important it is for a programmer to understand data structures.\n\n\n# abstract data type\n\nthere is another term: abstract data type (adt), which is sometimes used as a synonym for data structures, though this is not entirely correct. let's try to figure out what adt is by considering yet another example.\n\n\n\nwe hope you don't doubt that this above is a vending machine. the thing is that you can't see what exactly it contains on the inside. now, you probably know how to interact with vending machines: you insert a coin and get your drink. if you are just thirsty, this information is more than enough. it doesn't matter to you how the machine works from the inside, how it organizes the payment, the beverages, or how many beverages there are; you only need to know how to get your soda. hence, this is an abstract vending machine for you. for those who would like a formal explanation of this concept, we should say that in programming such techniques of \"covering vending machines\" are known as:\n\n * abstraction — a concept in object-oriented programming; it \"shows\" only essential attributes and \"hides\" unnecessary information, a.k.a. abstract classes or interfaces;\n * encapsulation — a method of making a complex system easier to handle for end users. the user needn't worry about the internal details and complexities of the system. encapsulation is the process of wrapping the data and the code that operates on that data into a single entity.\n\nin general, an abstract data type is a mathematical concept, a simpler and more abstract way to view the data structure as a whole. it is a data type that is defined by a set of values and a set of possible external operations (behavior) from the user's point of view*.* there are some common adts that every trained programmer should know: stack, queue*,* and so on*.* as a rule, modern programming languages like java, python, and c++ provide these adts in standard libraries so that we can use them in our programs.\n\n\n# comparison\n\nlet's get back to our vending machine parable once again to realize the difference between data structures (sometimes referred to as cdts – concrete data types) and adts.\n\nthere are different ways to create a simple vending machine that performs a single function of exchanging a coin for a drink. we can keep the soda in a huge bottle; we can put it in different bottles in a heap inside the storage; we can organize the bottles and tins in one big row or ten different rows. all these arrangements can be called the implementations of a simple abstract vending machine. if you want to create a more complicated mechanism with several functions, for example, \"choose a type of soda, then insert a coin\" or \"choose a drink or an ice cream\", some of the previous implementations won't work.\n\n\n\ndata structures are exact representations of data, but adts are different. they reflect the point of view of an implementer, not a user. a data structure is an implementation of an adt's functions, a way to look more closely at some specific operations and components of the structure. a good example of an abstract data type is an integer. we know what values integers can have and what operations they support (addition, subtraction, multiplication, and so on). at the machine level, they can be represented by a sequence of zeros and ones, but we usually don't care. it is enough for us to know that what we have is an integer, and not, say, a floating-point number. for those who are familiar with oop, java.util.map, for example, plays the role of an adt, whereas hashmap or linkedhashmap can be interpreted as data structures.\n\nin some sense, an adt defines the logical form of the data type, while a data structure implements the physical form of it.\n\n\n# conclusion\n\nall in all, data structures are a way of organizing data and providing convenient access to it. they have two types of operations: internal and external. there are many types of data structures, each with its own time complexities, features, and limitations. another closely related concept to keep in mind is an abstract data type. in short, an adt is a way to view the data structure, seeing its functions and general behavior, whereas the data structure itself is the implementation of these functions.\n\nnow it's time to conclude this topic. we realize that abstract stuff like this may often be pretty difficult to process. for now, you need to understand the main idea behind data structures and the important role they play in computer science. it is ok if you don't understand yet the formal definition of an adt or a cdt in every detail, you will get a chance to get back to it later. so, are you hungry for more? dozens of topics on specific data structures are waiting for you on our platform.",charsets:{},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：Fixed-size array",frontmatter:{title:"Theory：Fixed-size array",date:"2022-09-23T22:52:59.000Z",permalink:"/pages/fb5342/",tags:["Data structure"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/07.Algorithm%20&%20Data%20structure/08.Theory%EF%BC%9AFixed-size%20array.html",relativePath:"01.Java/01.Hyperskill - Java/07.Algorithm & Data structure/08.Theory：Fixed-size array.md",key:"v-731d5ca8",path:"/pages/fb5342/",headers:[{level:2,title:"Fixed-size array",slug:"fixed-size-array",normalizedTitle:"fixed-size array",charIndex:916},{level:2,title:"Accessing elements",slug:"accessing-elements",normalizedTitle:"accessing elements",charIndex:2414},{level:2,title:"Inserting and deleting elements",slug:"inserting-and-deleting-elements",normalizedTitle:"inserting and deleting elements",charIndex:3136},{level:2,title:"Example",slug:"example",normalizedTitle:"example",charIndex:4880},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:6012}],headersStr:"Fixed-size array Accessing elements Inserting and deleting elements Example Conclusion",content:"In programs, data is represented in the form of numbers, characters, strings, or other more complex objects. Often, some of these objects can be naturally grouped together. For example, assume that you conducted an experiment and got some measurements. They might correspond to temperature, distance, time, or something else. In such a case, it would be convenient not to store each measurement as a separate variable, but to process all of them together as a single unit. This will neatly organize our experimental observations, allowing us to analyze them quickly.\n\nTo efficiently deal with such cases, most programming languages provide a structure called a fixed-size array. The structure allows us to sequentially store a collection of elements of the same type and process them as a single unit. In this topic, we will look at this structure in more detail and learn some basic operations used for arrays.\n\n\n# Fixed-size array\n\nA fixed-size array is a structure for storing a collection of elements of the same type. As you can guess from its name, the size of such an array is a constant: once an array is created, you can't change its size. While creating a fixed-size array, we declare its size. The computer then reserves necessary memory resources for the array. After that, the elements of a fixed-size array are stored sequentially into those memory addresses. Given below is an example of a fixed-size array that stores five floating-point numbers:\n\n\n\nAn array isn't limited to storing numeric values only. We can also store a list of strings in it. Like this one containing some flower names:\n\n\n\nArrays have some of technical characteristics. To begin with, the size of an array indicates how many elements the array contains. It is also referred to as the length of an array. The length of both of our previous arrays is 5.\n\nThe index of an element is a number that tells us where the element resides within the array. For most programming languages, the counting starts at 00. The first element of the first array is 10.810.8 and its index is 00, the second one is 14.314.3 with the index of 11. The last element is 9.79.7 with the index of 44. The same rule applies to the second array as well.\n\nUsing pseudocode, we can represent the first array as follows:\n\nmeasurements = [10.8, 14.3, 13.5, 12.1, 9.7]\n\n\n1\n\n\nA variable named measurementsmeasurements combines the numbers in a single unit.\n\n\n# Accessing elements\n\nProgramming languages provide a set of standard methods for array processing. There is one of them used most frequently. It is a method for accessing an element by its index. Let's try and access the third element of the measurementmeasuremen**t array and store it in a new variable valuevalue.\n\n\n\nThe valuevalue now contains 13.513.5.\n\nTake notice that we can not only read, but also modify elements of an array:\n\nmeasurements[2] = 3.7\n\n\n1\n\n\nNow, the array looks like this:\n\n\n\nBoth reading and modifying operations require O(1)O(1) time complexity. It's so efficient, because by knowing the index number, the computer can jump directly to the required memory address and fetch or modify the data.\n\n\n# Inserting and deleting elements\n\nIn short, inserting an element into a fixed-size array or deleting an element from the array is not possible. This is mainly because those operations would change the length of the array and it would no longer be a fixed-size array.\n\nStill, you may want to add one more flower named DaisyDaisy to the array of flowers mentioned earlier. There's a way to do so! After inserting, the length of our new array will be 66. Thus, you need to create another array with the length 66, and copy all the five elements from the first array to the new array. There will be a spot left in your new array. Fill it up with the new flower name. You can do the same trick for deleting an element as well.\n\n\n\nThis operation requires O(n)O(n) time complexity, where nn is the number of elements of the array, since we have to copy all nn elements to our new array. In sense of performance, inserting and deleting are very slow operations for a fixed-size array. To overcome this limitation, programmers have introduced dynamic arrays that you will learn about later.\n\nOn the flip side, the inability to modify the size is a strong characteristic of a fixed-size array. Nothing can affect our array's length. In the example above, we've added a new flower name to the array, but still, our old array remains as it is. Thus, it is wise to use a fixed-size array when changing the array length may negatively affect your program.\n\nAlong with these operations, there are some other more sophisticated methods for array processing, such as sorting, reversing, searching elements, and others. When you use a particular programming language, check the documentation of the standard library to see what methods the language provides.\n\n\n# Example\n\nLet's consider a simple example of how to process arrays. Given an array of numbers, our task will be to calculate the mean value of the elements in the array. The mean of the array elements is the sum of all array elements divided by their number. We will consider how it can be done for our array of measurements:\n\nmeasurements = [10.8, 14.3, 13.5, 12.1, 9.7]\n\n\n1\n\n\nThe procedure is the following:\n\nWe initialize the variable sumsum with the value 00. Then, we sequentially read the elements of the measurementmeasuremen**t array using the index numbers from zero up to the array length minus one, which is the index of the last element, and add them to the sumsum variable. After that, we divide the obtained sum by the length of the array and thus get the mean value for the elements. The length of the array of measurements is known in advance.\n\nHere is the pseudocode of the process:\n\nsum = 0\n\nfor i from 0 to (len(measurements)- 1):\n    sum = sum + measurements[i]\n\nmean = sum / len(measurements) # 12.08\n\n\n1\n2\n3\n4\n5\n6\n\n\nHere, len(measurements)len(measurements) will return the length of the measurements array.\n\n\n# Conclusion\n\nLet's now summarize the main points considered in this topic.\n\nThe array data structure is widely used in programming. A fixed-size array allows us to store a collection of elements of the same type. The most frequently used method of array processing is accessing an element by its index. Not all array methods are efficient for a fixed-size array, but still, we can use them to our advantage. Since an array is a collection of data of the same type, processing it is easy and intuitive. Without this data structure, we would have to declare a new variable for every value in a list, which would result in a complex program and require much more storage.\n\nTo get information about other array methods, check the standard library of a programming language you use. Use a fixed-size array if you need to process a collection of data of a similar type and you know the number of values in advance.",normalizedContent:"in programs, data is represented in the form of numbers, characters, strings, or other more complex objects. often, some of these objects can be naturally grouped together. for example, assume that you conducted an experiment and got some measurements. they might correspond to temperature, distance, time, or something else. in such a case, it would be convenient not to store each measurement as a separate variable, but to process all of them together as a single unit. this will neatly organize our experimental observations, allowing us to analyze them quickly.\n\nto efficiently deal with such cases, most programming languages provide a structure called a fixed-size array. the structure allows us to sequentially store a collection of elements of the same type and process them as a single unit. in this topic, we will look at this structure in more detail and learn some basic operations used for arrays.\n\n\n# fixed-size array\n\na fixed-size array is a structure for storing a collection of elements of the same type. as you can guess from its name, the size of such an array is a constant: once an array is created, you can't change its size. while creating a fixed-size array, we declare its size. the computer then reserves necessary memory resources for the array. after that, the elements of a fixed-size array are stored sequentially into those memory addresses. given below is an example of a fixed-size array that stores five floating-point numbers:\n\n\n\nan array isn't limited to storing numeric values only. we can also store a list of strings in it. like this one containing some flower names:\n\n\n\narrays have some of technical characteristics. to begin with, the size of an array indicates how many elements the array contains. it is also referred to as the length of an array. the length of both of our previous arrays is 5.\n\nthe index of an element is a number that tells us where the element resides within the array. for most programming languages, the counting starts at 00. the first element of the first array is 10.810.8 and its index is 00, the second one is 14.314.3 with the index of 11. the last element is 9.79.7 with the index of 44. the same rule applies to the second array as well.\n\nusing pseudocode, we can represent the first array as follows:\n\nmeasurements = [10.8, 14.3, 13.5, 12.1, 9.7]\n\n\n1\n\n\na variable named measurementsmeasurements combines the numbers in a single unit.\n\n\n# accessing elements\n\nprogramming languages provide a set of standard methods for array processing. there is one of them used most frequently. it is a method for accessing an element by its index. let's try and access the third element of the measurementmeasuremen**t array and store it in a new variable valuevalue.\n\n\n\nthe valuevalue now contains 13.513.5.\n\ntake notice that we can not only read, but also modify elements of an array:\n\nmeasurements[2] = 3.7\n\n\n1\n\n\nnow, the array looks like this:\n\n\n\nboth reading and modifying operations require o(1)o(1) time complexity. it's so efficient, because by knowing the index number, the computer can jump directly to the required memory address and fetch or modify the data.\n\n\n# inserting and deleting elements\n\nin short, inserting an element into a fixed-size array or deleting an element from the array is not possible. this is mainly because those operations would change the length of the array and it would no longer be a fixed-size array.\n\nstill, you may want to add one more flower named daisydaisy to the array of flowers mentioned earlier. there's a way to do so! after inserting, the length of our new array will be 66. thus, you need to create another array with the length 66, and copy all the five elements from the first array to the new array. there will be a spot left in your new array. fill it up with the new flower name. you can do the same trick for deleting an element as well.\n\n\n\nthis operation requires o(n)o(n) time complexity, where nn is the number of elements of the array, since we have to copy all nn elements to our new array. in sense of performance, inserting and deleting are very slow operations for a fixed-size array. to overcome this limitation, programmers have introduced dynamic arrays that you will learn about later.\n\non the flip side, the inability to modify the size is a strong characteristic of a fixed-size array. nothing can affect our array's length. in the example above, we've added a new flower name to the array, but still, our old array remains as it is. thus, it is wise to use a fixed-size array when changing the array length may negatively affect your program.\n\nalong with these operations, there are some other more sophisticated methods for array processing, such as sorting, reversing, searching elements, and others. when you use a particular programming language, check the documentation of the standard library to see what methods the language provides.\n\n\n# example\n\nlet's consider a simple example of how to process arrays. given an array of numbers, our task will be to calculate the mean value of the elements in the array. the mean of the array elements is the sum of all array elements divided by their number. we will consider how it can be done for our array of measurements:\n\nmeasurements = [10.8, 14.3, 13.5, 12.1, 9.7]\n\n\n1\n\n\nthe procedure is the following:\n\nwe initialize the variable sumsum with the value 00. then, we sequentially read the elements of the measurementmeasuremen**t array using the index numbers from zero up to the array length minus one, which is the index of the last element, and add them to the sumsum variable. after that, we divide the obtained sum by the length of the array and thus get the mean value for the elements. the length of the array of measurements is known in advance.\n\nhere is the pseudocode of the process:\n\nsum = 0\n\nfor i from 0 to (len(measurements)- 1):\n    sum = sum + measurements[i]\n\nmean = sum / len(measurements) # 12.08\n\n\n1\n2\n3\n4\n5\n6\n\n\nhere, len(measurements)len(measurements) will return the length of the measurements array.\n\n\n# conclusion\n\nlet's now summarize the main points considered in this topic.\n\nthe array data structure is widely used in programming. a fixed-size array allows us to store a collection of elements of the same type. the most frequently used method of array processing is accessing an element by its index. not all array methods are efficient for a fixed-size array, but still, we can use them to our advantage. since an array is a collection of data of the same type, processing it is easy and intuitive. without this data structure, we would have to declare a new variable for every value in a list, which would result in a complex program and require much more storage.\n\nto get information about other array methods, check the standard library of a programming language you use. use a fixed-size array if you need to process a collection of data of a similar type and you know the number of values in advance.",charsets:{},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：The concept of patterns",frontmatter:{title:"Theory：The concept of patterns",date:"2022-10-12T15:01:15.000Z",permalink:"/pages/aa23cc/",tags:["Pattern"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/08.Design%20pattern/111.Theory%EF%BC%9AThe%20concept%20of%20patterns.html",relativePath:"01.Java/01.Hyperskill - Java/08.Design pattern/111.Theory：The concept of patterns.md",key:"v-87c78268",path:"/pages/aa23cc/",headers:[{level:2,title:"Code design",slug:"code-design",normalizedTitle:"code design",charIndex:2},{level:2,title:"Design patterns",slug:"design-patterns",normalizedTitle:"design patterns",charIndex:885},{level:2,title:"Software design patterns and related concepts",slug:"software-design-patterns-and-related-concepts",normalizedTitle:"software design patterns and related concepts",charIndex:2443},{level:2,title:"Why should I know design patterns?",slug:"why-should-i-know-design-patterns",normalizedTitle:"why should i know design patterns?",charIndex:3587},{level:2,title:"Caveats",slug:"caveats",normalizedTitle:"caveats",charIndex:4372},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:5057}],headersStr:"Code design Design patterns Software design patterns and related concepts Why should I know design patterns? Caveats Conclusion",content:"# Code design\n\nIf you are reading this, you must be really interested in programming. It doesn't matter whether you are an experienced developer, just starting your career, or still working on the basics; what really matters is that you are curious, so welcome.\n\nTo begin with, let's talk about code design*.* In general, the design of your code is about expressing your ideas clearly to your teammates, colleagues, and clients. We can compare code to text: if you put the lines in the right order and make the structure clear, it will be much easier to explain and understand the text later. From an engineering point of view, your code is well-designed if you can agree with the following statements:\n\n\\1) When you make a small change, it does not produce a ripple effect elsewhere in the code. \\2) Your code is easy to reuse. \\3) It is easy to maintain your code after release.\n\n\n# Design patterns\n\nIn application development, the design of code has to match the problem and be general enough in order to fit all the requirements that may arise in the future. Everyone tries to find more elegant, suitable and flexible solutions that can also be reused. Here is where design patterns come into play: these are repeatable solutions to common problems that developers face. Design patterns even have names! For example, if you want to confine yourself to just one instance of a class, Singleton pattern is going to be the best choice; if you see family relations between objects and you want to encapsulate creational processes, you should use AbstractFactory, etc.\n\nAs a rule, examples of well-structured object-oriented architecture make use of patterns a lot. When a suitable pattern is used, it tells us that the developer has really paid attention to typical interactions between elements in the system. As a result, the architecture of an application becomes easier to understand.\n\nBeing so useful, design patterns have made it onto many programmers' bookshelves: one of the most famous examples is the book Design Patterns: Elements of Reusable Object-Oriented Software. You probably heard about its authors, \"Gang of Four\", which is frequently abbreviated as \"GoF\". Today it is considered one of the classic books on software design and programming. You may check it out to deepen your understanding or proceed directly to practical learning here.\n\nNote that in this topic we will only consider object-oriented design patterns.\n\n\n\n\n# Software design patterns and related concepts\n\nA great thing about patterns is that they help you not to waste your time reinventing the wheel so you can spend it on developing cool features instead. The structure of design patterns is strict: describe the problem, the solution, when to apply the solution, and its consequences. Theoretically, you can combine a few patterns and create your own monster pattern that contains, for example, Builder, Abstract Factory and Decorator simultaneously. However, as you will see from the following topics, it's better to avoid such monsters because patterns have already been well-grouped for you. In other words, don't get too excited, it's really better to use them one at a time.\n\nUsing patterns does not require any specific programming language skills or striking imagination. Patterns are also language-independent: even though they can be implemented differently in different languages, the general idea of each pattern is common for all of them. That means that it's possible for you to speak the language of architecture with your colleagues even if they work with different technologies.\n\n\n# Why should I know design patterns?\n\nHere is a list of quite convincing reasons to get familiar with design patterns:\n\n * Patterns provide tested and commonly used solution templates for design problems; you don't have to invent anything!\n * Patterns improve flexibility and maintainability of object-oriented systems, which makes it easier to react to changing requirements.\n * Patterns can speed up the development process.\n * Patterns are a universal vocabulary that allows developers to describe a program design using a set of well-known identifiable concepts.\n * Patterns are often used in standard libraries and frameworks.\n * You can find patterns in the source codes of many applications and quickly understand how they work, instead of reading thousands of lines of code.\n\n\n# Caveats\n\nIn order to achieve flexibility, design patterns usually introduce additional levels of indirectness, which in some cases may complicate the resulting designs and hurt application performance. In other words, even though patterns are supposed to make things easier for you, they may also become an unnecessary complication if applied unwisely. Beginner developers may try to apply patterns everywhere, even in situations where a simpler code would do just fine. Look how design patterns can complicate even the simplest \"Hello, World\" program.\n\nTo avoid misusing the patterns, you should apply them wisely and be able to correctly adapt them to your problem and language.\n\n\n# Conclusion\n\nWhen you master the principles of working with patterns so that after successfully applying them you scream \"Eureka!\" without any doubt in your thoughts, your perception of object-oriented programming will probably change once and for all. In the following topics, you will learn about Creational, Structural and Behavioral design patterns. Be concentrated and attentive: these matters are quite advanced. Happy coding!",normalizedContent:"# code design\n\nif you are reading this, you must be really interested in programming. it doesn't matter whether you are an experienced developer, just starting your career, or still working on the basics; what really matters is that you are curious, so welcome.\n\nto begin with, let's talk about code design*.* in general, the design of your code is about expressing your ideas clearly to your teammates, colleagues, and clients. we can compare code to text: if you put the lines in the right order and make the structure clear, it will be much easier to explain and understand the text later. from an engineering point of view, your code is well-designed if you can agree with the following statements:\n\n\\1) when you make a small change, it does not produce a ripple effect elsewhere in the code. \\2) your code is easy to reuse. \\3) it is easy to maintain your code after release.\n\n\n# design patterns\n\nin application development, the design of code has to match the problem and be general enough in order to fit all the requirements that may arise in the future. everyone tries to find more elegant, suitable and flexible solutions that can also be reused. here is where design patterns come into play: these are repeatable solutions to common problems that developers face. design patterns even have names! for example, if you want to confine yourself to just one instance of a class, singleton pattern is going to be the best choice; if you see family relations between objects and you want to encapsulate creational processes, you should use abstractfactory, etc.\n\nas a rule, examples of well-structured object-oriented architecture make use of patterns a lot. when a suitable pattern is used, it tells us that the developer has really paid attention to typical interactions between elements in the system. as a result, the architecture of an application becomes easier to understand.\n\nbeing so useful, design patterns have made it onto many programmers' bookshelves: one of the most famous examples is the book design patterns: elements of reusable object-oriented software. you probably heard about its authors, \"gang of four\", which is frequently abbreviated as \"gof\". today it is considered one of the classic books on software design and programming. you may check it out to deepen your understanding or proceed directly to practical learning here.\n\nnote that in this topic we will only consider object-oriented design patterns.\n\n\n\n\n# software design patterns and related concepts\n\na great thing about patterns is that they help you not to waste your time reinventing the wheel so you can spend it on developing cool features instead. the structure of design patterns is strict: describe the problem, the solution, when to apply the solution, and its consequences. theoretically, you can combine a few patterns and create your own monster pattern that contains, for example, builder, abstract factory and decorator simultaneously. however, as you will see from the following topics, it's better to avoid such monsters because patterns have already been well-grouped for you. in other words, don't get too excited, it's really better to use them one at a time.\n\nusing patterns does not require any specific programming language skills or striking imagination. patterns are also language-independent: even though they can be implemented differently in different languages, the general idea of each pattern is common for all of them. that means that it's possible for you to speak the language of architecture with your colleagues even if they work with different technologies.\n\n\n# why should i know design patterns?\n\nhere is a list of quite convincing reasons to get familiar with design patterns:\n\n * patterns provide tested and commonly used solution templates for design problems; you don't have to invent anything!\n * patterns improve flexibility and maintainability of object-oriented systems, which makes it easier to react to changing requirements.\n * patterns can speed up the development process.\n * patterns are a universal vocabulary that allows developers to describe a program design using a set of well-known identifiable concepts.\n * patterns are often used in standard libraries and frameworks.\n * you can find patterns in the source codes of many applications and quickly understand how they work, instead of reading thousands of lines of code.\n\n\n# caveats\n\nin order to achieve flexibility, design patterns usually introduce additional levels of indirectness, which in some cases may complicate the resulting designs and hurt application performance. in other words, even though patterns are supposed to make things easier for you, they may also become an unnecessary complication if applied unwisely. beginner developers may try to apply patterns everywhere, even in situations where a simpler code would do just fine. look how design patterns can complicate even the simplest \"hello, world\" program.\n\nto avoid misusing the patterns, you should apply them wisely and be able to correctly adapt them to your problem and language.\n\n\n# conclusion\n\nwhen you master the principles of working with patterns so that after successfully applying them you scream \"eureka!\" without any doubt in your thoughts, your perception of object-oriented programming will probably change once and for all. in the following topics, you will learn about creational, structural and behavioral design patterns. be concentrated and attentive: these matters are quite advanced. happy coding!",charsets:{},lastUpdated:"2022/10/12, 17:01:25",lastUpdatedTimestamp:1665565285e3},{title:"Theory：Dynamic array",frontmatter:{title:"Theory：Dynamic array",date:"2022-09-23T22:53:41.000Z",permalink:"/pages/0de0a4/",tags:["Data structure"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/07.Algorithm%20&%20Data%20structure/09.Theory%EF%BC%9ADynamic%20array.html",relativePath:"01.Java/01.Hyperskill - Java/07.Algorithm & Data structure/09.Theory：Dynamic array.md",key:"v-4dbe4cb4",path:"/pages/0de0a4/",headers:[{level:2,title:"Introduction",slug:"introduction",normalizedTitle:"introduction",charIndex:2},{level:2,title:"Essentials",slug:"essentials",normalizedTitle:"essentials",charIndex:519},{level:2,title:"Scaling factor",slug:"scaling-factor",normalizedTitle:"scaling factor",charIndex:1495},{level:2,title:"Common operations",slug:"common-operations",normalizedTitle:"common operations",charIndex:2581},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:4846}],headersStr:"Introduction Essentials Scaling factor Common operations Conclusion",content:"# Introduction\n\nMany programs need to store and process sequences of elements of the same type like numbers, strings, or even more complex objects. An array is a widely used structure to represent such data sequences since an element can be accessed in constant time by index. However, regular arrays suffer from a significant drawback – they have a fixed size. This does not allow one to create an array if the number of elements is unknown in advance. In such cases, using a dynamic array is a possible solution.\n\n\n# Essentials\n\nA dynamic array is a linear data structure that is able to increase and, in some implementations, shrink when its size changes. As a rule, it has an internal regular array that actually stores data under the hood and provides some additional operations on top of it.\n\nA dynamic array has two important properties:\n\n * size – the number of elements already stored in it;\n * capacity – a possible number of elements to be stored that corresponds to the size of the internal regular array.\n\nUsually, there are two paths: either to specify a capacity for a new dynamic array or to set a constant default value (e.g. 10). In contrast to basic arrays, dynamic arrays have operations for adding/removing elements to or from any position. This way, we can add and remove elements one by one after a dynamic array has been created.\n\nThe picture below demonstrates a dynamic array to which we added four numbers. The actual size is 4 and the capacity is 10 (initial):\n\n\n\n\n# Scaling factor\n\nIf the number of elements exceeds the capacity, all elements will be copied to a new internal array of a bigger size. There are a number of different scaling strategies for the size of it. The most common ones are the multiplication of the initial capacity by 1.5 (Java) or 2 (C++, the GCC STL implementation). There are also more unique cases like the Golang dynamic array (\"slice\"), which doubles the size until 1024 elements (after that the ratio is 5/4).\n\nIt is a trade-off between time and space complexities. With a bigger growth factor, we have more insertions before we would have to extend an array, thus decreasing time complexity.\n\nBut what is the best scaling factor? That is, what value will have both time and space complexities? It turns out, that the value must be equal to the golden ratio, 1.618031.61803. As you may notice, 1.51.5 is as close to it as it can get. If you're curious to know more, you can read it up there.\n\nIt may also be necessary to support the shrinking of the internal array when removing elements to reduce the required size.\n\n\n# Common operations\n\nAdd an element to the end of the array. As discussed above, in the base case scenario where we just add an element to an array without specifying the index, we'll have these complexities:\n\n * O(1)O(1) – in average cases, since we just insert an element to already allocated memory (less than capacity);\n * O(n)O(n) – in the worst case, where we ran out of space and need to allocate a new array and copy every element into it.\n\nThe average estimate for adding an element to the end of the array is called amortized. Since it is rather difficult to tell from the first glance that it is O(1)O(1), we have to use a special analysis for that. If anyone is interested they can read about it here.\n\nAdd an element at the specified index. This operation is used when we want to add an element between some already placed elements. Its complexities ( both average and worst) would be O(n)O(n) since on each insertion we must move an element at the index we want and then move every element one index to the right.\n\n\n\nUpdate value at the specified index. This operation replaces the element at the specified index with the element. All this is done in constant time since it is just like the assignment in the basic array, so the complexities are both O(1)O(1).\n\nRemove an element by value/index. These methods either remove the first occurrence of an element specified or an element at the index specified. Both are similar to adding an element at the specified index in the sense that we would have to move some (or all) of the remaining elements one index to the left; therefore their complexities would also be O(n)O(n).\n\n\n\nClear. Here we just want to remove every element from the array. Since insertion is done via computation on the current array size, we can just reset the size to zero and override the old elements during the following inserts. That would leave the elements hanging out in memory (so the garbage collector won't be able to collect them) until they are overridden. The simplest form would have complexities of O(1)O(1), but the right one would have O(n)O(n).\n\nGet element by index. Since a dynamic array is basically just a normal array, we can access elements by their index in constant time, so complexities are O(1)O(1).\n\n\n# Conclusion\n\nA dynamic array is just like a regular array, but the number of stored elements can be changed. If adding operations run out of space to store elements, a new bigger array is allocated, and every element of the old array is copied to the new one. The scaling factor is a trade-off between time (speed) and space. With a bigger factor we have fewer allocations and less copying, but higher chances of running out of memory. The most common factors are 1.5 and 2. In some implementations, a dynamic array can support shrinking to reduce the used memory after removing elements.",normalizedContent:"# introduction\n\nmany programs need to store and process sequences of elements of the same type like numbers, strings, or even more complex objects. an array is a widely used structure to represent such data sequences since an element can be accessed in constant time by index. however, regular arrays suffer from a significant drawback – they have a fixed size. this does not allow one to create an array if the number of elements is unknown in advance. in such cases, using a dynamic array is a possible solution.\n\n\n# essentials\n\na dynamic array is a linear data structure that is able to increase and, in some implementations, shrink when its size changes. as a rule, it has an internal regular array that actually stores data under the hood and provides some additional operations on top of it.\n\na dynamic array has two important properties:\n\n * size – the number of elements already stored in it;\n * capacity – a possible number of elements to be stored that corresponds to the size of the internal regular array.\n\nusually, there are two paths: either to specify a capacity for a new dynamic array or to set a constant default value (e.g. 10). in contrast to basic arrays, dynamic arrays have operations for adding/removing elements to or from any position. this way, we can add and remove elements one by one after a dynamic array has been created.\n\nthe picture below demonstrates a dynamic array to which we added four numbers. the actual size is 4 and the capacity is 10 (initial):\n\n\n\n\n# scaling factor\n\nif the number of elements exceeds the capacity, all elements will be copied to a new internal array of a bigger size. there are a number of different scaling strategies for the size of it. the most common ones are the multiplication of the initial capacity by 1.5 (java) or 2 (c++, the gcc stl implementation). there are also more unique cases like the golang dynamic array (\"slice\"), which doubles the size until 1024 elements (after that the ratio is 5/4).\n\nit is a trade-off between time and space complexities. with a bigger growth factor, we have more insertions before we would have to extend an array, thus decreasing time complexity.\n\nbut what is the best scaling factor? that is, what value will have both time and space complexities? it turns out, that the value must be equal to the golden ratio, 1.618031.61803. as you may notice, 1.51.5 is as close to it as it can get. if you're curious to know more, you can read it up there.\n\nit may also be necessary to support the shrinking of the internal array when removing elements to reduce the required size.\n\n\n# common operations\n\nadd an element to the end of the array. as discussed above, in the base case scenario where we just add an element to an array without specifying the index, we'll have these complexities:\n\n * o(1)o(1) – in average cases, since we just insert an element to already allocated memory (less than capacity);\n * o(n)o(n) – in the worst case, where we ran out of space and need to allocate a new array and copy every element into it.\n\nthe average estimate for adding an element to the end of the array is called amortized. since it is rather difficult to tell from the first glance that it is o(1)o(1), we have to use a special analysis for that. if anyone is interested they can read about it here.\n\nadd an element at the specified index. this operation is used when we want to add an element between some already placed elements. its complexities ( both average and worst) would be o(n)o(n) since on each insertion we must move an element at the index we want and then move every element one index to the right.\n\n\n\nupdate value at the specified index. this operation replaces the element at the specified index with the element. all this is done in constant time since it is just like the assignment in the basic array, so the complexities are both o(1)o(1).\n\nremove an element by value/index. these methods either remove the first occurrence of an element specified or an element at the index specified. both are similar to adding an element at the specified index in the sense that we would have to move some (or all) of the remaining elements one index to the left; therefore their complexities would also be o(n)o(n).\n\n\n\nclear. here we just want to remove every element from the array. since insertion is done via computation on the current array size, we can just reset the size to zero and override the old elements during the following inserts. that would leave the elements hanging out in memory (so the garbage collector won't be able to collect them) until they are overridden. the simplest form would have complexities of o(1)o(1), but the right one would have o(n)o(n).\n\nget element by index. since a dynamic array is basically just a normal array, we can access elements by their index in constant time, so complexities are o(1)o(1).\n\n\n# conclusion\n\na dynamic array is just like a regular array, but the number of stored elements can be changed. if adding operations run out of space to store elements, a new bigger array is allocated, and every element of the old array is copied to the new one. the scaling factor is a trade-off between time (speed) and space. with a bigger factor we have fewer allocations and less copying, but higher chances of running out of memory. the most common factors are 1.5 and 2. in some implementations, a dynamic array can support shrinking to reduce the used memory after removing elements.",charsets:{},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Theory：Structural of design patterns",frontmatter:{title:"Theory：Structural of design patterns",date:"2022-10-12T15:02:32.000Z",permalink:"/pages/dd6ea7/",tags:["Pattern"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/08.Design%20pattern/112.Theory%EF%BC%9AStructural%20of%20design%20patterns.html",relativePath:"01.Java/01.Hyperskill - Java/08.Design pattern/112.Theory：Structural of design patterns.md",key:"v-62ef8b86",path:"/pages/dd6ea7/",headers:[{level:2,title:"What are structural design patterns?",slug:"what-are-structural-design-patterns",normalizedTitle:"what are structural design patterns?",charIndex:365},{level:2,title:"Types of structural patterns",slug:"types-of-structural-patterns",normalizedTitle:"types of structural patterns",charIndex:983},{level:2,title:"When to use structural patterns?",slug:"when-to-use-structural-patterns",normalizedTitle:"when to use structural patterns?",charIndex:2083},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:2994}],headersStr:"What are structural design patterns? Types of structural patterns When to use structural patterns? Conclusion",content:"While working with a large application, you will usually encounter problems related to the complexity of a code. This may disorient and complicate your work. So, to minimize these problems, you should define the proper class structure and their connections to each other. One useful way to maintain a good object structure is using a structural design pattern.\n\n\n# What are structural design patterns?\n\nStructural design patterns describe relations between the system's components. Like any other design pattern, structural patterns solve the most common design problems. Through them, you can ease the application design process, by introducing solutions for recurring problems of component structuring.\n\nSimply put, structural patterns simplify the structure by defining the relationships between objects. Using these patterns, you will have a better understanding of whether we need to inherit, compose, or make and maintain any other relationships between system components.\n\n\n# Types of structural patterns\n\nThere are 7 types of structural design patterns:\n\n\n\n * Adapter - as the name suggests, this pattern focuses on connecting objects with incompatible interfaces.\n * Bridge - this pattern separates abstraction and implementation of a class, allowing for their independent development.\n * Composite - a pattern that structures objects in a hierarchical fashion so that a client could work with each one of them.\n * Decorator - this pattern uses special wrapper objects for enhancement of object behavior without original object modification.\n * Facade - a pattern that provides an interface for a complex set of objects.\n * Flyweight - a pattern that increases the number of objects you can fit into memory by sharing and reusing their common parts.\n * Proxy - this pattern provides a substitute or placeholder for another complex object.\n\nA variety of these design patterns allow for the formation of a larger structure. They define how each component should be structured so as to have very flexible interconnecting modules which can work together in a larger system.\n\n\n# When to use structural patterns?\n\nHere's the most basic description of these patterns applicability:\n\n * Adapter: use this when you want to use some existing class with an incompatible interface.\n * Bridge: use this pattern when you want to split larger classes and form structures that have several variants of some functionality.\n * Composite: apply this pattern when you want your client to work with different elements of a structure uniformly.\n * Decorator: use this pattern to add modifications to objects' behavior without interference to their code.\n * Facade: use this pattern to provide a simple and straightforward interface to a complex system.\n * Flyweight: apply this pattern to a project with a large number of objects to fit them all into your memory.\n * Proxy: this pattern has various implementation variants, from controlling user access to maintaining heavy resources in the background.\n\n\n# Conclusion\n\nAs you can see, structural design patterns are a complex concept that contains quite a few solutions to common problems. Most of them are fairly easy to understand and implement. Nevertheless, design patterns tend to increase your code complexity. So you should keep in mind their limitations and goals to avoid overdoing it.",normalizedContent:"while working with a large application, you will usually encounter problems related to the complexity of a code. this may disorient and complicate your work. so, to minimize these problems, you should define the proper class structure and their connections to each other. one useful way to maintain a good object structure is using a structural design pattern.\n\n\n# what are structural design patterns?\n\nstructural design patterns describe relations between the system's components. like any other design pattern, structural patterns solve the most common design problems. through them, you can ease the application design process, by introducing solutions for recurring problems of component structuring.\n\nsimply put, structural patterns simplify the structure by defining the relationships between objects. using these patterns, you will have a better understanding of whether we need to inherit, compose, or make and maintain any other relationships between system components.\n\n\n# types of structural patterns\n\nthere are 7 types of structural design patterns:\n\n\n\n * adapter - as the name suggests, this pattern focuses on connecting objects with incompatible interfaces.\n * bridge - this pattern separates abstraction and implementation of a class, allowing for their independent development.\n * composite - a pattern that structures objects in a hierarchical fashion so that a client could work with each one of them.\n * decorator - this pattern uses special wrapper objects for enhancement of object behavior without original object modification.\n * facade - a pattern that provides an interface for a complex set of objects.\n * flyweight - a pattern that increases the number of objects you can fit into memory by sharing and reusing their common parts.\n * proxy - this pattern provides a substitute or placeholder for another complex object.\n\na variety of these design patterns allow for the formation of a larger structure. they define how each component should be structured so as to have very flexible interconnecting modules which can work together in a larger system.\n\n\n# when to use structural patterns?\n\nhere's the most basic description of these patterns applicability:\n\n * adapter: use this when you want to use some existing class with an incompatible interface.\n * bridge: use this pattern when you want to split larger classes and form structures that have several variants of some functionality.\n * composite: apply this pattern when you want your client to work with different elements of a structure uniformly.\n * decorator: use this pattern to add modifications to objects' behavior without interference to their code.\n * facade: use this pattern to provide a simple and straightforward interface to a complex system.\n * flyweight: apply this pattern to a project with a large number of objects to fit them all into your memory.\n * proxy: this pattern has various implementation variants, from controlling user access to maintaining heavy resources in the background.\n\n\n# conclusion\n\nas you can see, structural design patterns are a complex concept that contains quite a few solutions to common problems. most of them are fairly easy to understand and implement. nevertheless, design patterns tend to increase your code complexity. so you should keep in mind their limitations and goals to avoid overdoing it.",charsets:{},lastUpdated:"2022/10/25, 17:57:56",lastUpdatedTimestamp:1666691876e3},{title:"Theory：Decorator pattern",frontmatter:{title:"Theory：Decorator pattern",date:"2022-10-17T11:09:02.000Z",permalink:"/pages/3f60b7/",tags:["Pattern"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/08.Design%20pattern/113.Theory%EF%BC%9ADecorator%20pattern.html",relativePath:"01.Java/01.Hyperskill - Java/08.Design pattern/113.Theory：Decorator pattern.md",key:"v-05a8a9ec",path:"/pages/3f60b7/",headers:[{level:2,title:"Decorator design pattern",slug:"decorator-design-pattern",normalizedTitle:"decorator design pattern",charIndex:430},{level:2,title:"Decorator implementation",slug:"decorator-implementation",normalizedTitle:"decorator implementation",charIndex:1636},{level:2,title:"Decorator in pseudocode",slug:"decorator-in-pseudocode",normalizedTitle:"decorator in pseudocode",charIndex:2612},{level:2,title:"Example of using decorator pattern",slug:"example-of-using-decorator-pattern",normalizedTitle:"example of using decorator pattern",charIndex:3807},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:4674}],headersStr:"Decorator design pattern Decorator implementation Decorator in pseudocode Example of using decorator pattern Conclusion",content:'Many structural design patterns are needed to avoid unnecessary work and rewriting of code many times over. Usually, these patterns are made in such a way that you can avoid interfering with classes that were previously defined. The pattern that we will discuss in this topic is no different. This design pattern allows you to add new functions to objects, excluding changes to them. It\'s called the decorator design pattern.\n\n\n# Decorator design pattern\n\nA decorator is a structural design pattern that allows using special wrappers for objects, giving them new functionality while avoiding changes to their structure. This approach simplifies the coding process by delegating the implementation of new functions to other classes, instead of rewriting new object classes. So you can say that the main idea of this pattern is focused around wrapper objects. But what is a wrapper?\n\nA wrapper (or decorator) is an object that works with your initial object in a way that alters its behavior. Wrapper shares the same interface and functions with that object. But, in case the user needs to call the initial object, the wrapper will pass the user\'s request through itself. In this process, there can be alteration on a result.\n\nThis approach is useful when you can\'t just modify your class and it will be hard to extend it with some child objects. Using a decorator, you can add new behaviors and even use multiple level wrappers, without touching any part of the existing class. But this can be a little tricky to implement, considering that you may end up being unable to remove some of the wrappers without ruining all of the code.\n\n\n# Decorator implementation\n\nLet\'s use the pizza-making process as an example. Cooks make pizza. They have abundant options for toppings and types of pizza. But in the end, a pizza is just some dough with something on top of it. So, if we try to depict the pizza-making process as code, we can create a new class for each pizza type. And if we want to create combinations of pizza toppings, we\'ll end up with a large number of classes which will complicate your work.\n\nSo, to avoid this unnecessary expansion of code, you can use the decorator pattern:\n\n\n\nUsing this pattern, we need to introduce these elements:\n\n * an interface that represents methods for basic pizza making;\n * a class that creates our pizza;\n * one base wrapper which will store our pizza object to combine it with our topping wrappers;\n * for this particular example, we\'ll have two wrappers for pizza toppings.\n\nIf we look at the resulting structure as a class diagram, it will look similar to this:\n\n\n\n\n# Decorator in pseudocode\n\nNow let\'s try to depict this pattern in pseudocode. First of all, we need to describe our Pizza interface:\n\ninterface Pizza is\n  method MakePizza()\n\n\n1\n2\n\n\nHere, we described all common methods for both our pizza maker and pizza wrapper. Next, we\'ll describe them as PlainPizza class and ToppingWrapper:\n\nclass PlainPizza implements Pizza is\n  method cook() is\n    return "Pizza"\n\n\nclass ToppingWrapper implements Pizza is\n  field pizza: Pizza\n\n  constructor pizzaWrapper(Pizza pizza)\n    this.pizza = pizza\n\n  method cook() is\n    pizza.cook()\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\nBoth these classes will implement the Pizza interface. Our PlainPizza will return an object that represents a simple pizza that will be referenced within the ToppingWrapper class and then combined with our other wrappers.\n\nNext, we\'ll define our Pepperoni and HotPepper wrappers:\n\nclass Pepperoni extends ToppingWrapper is\n  method cook() is\n    return pizza.cook() + "Pepperoni "\n\nclass HotPepper extends ToppingWrapper is\n  method cook() is\n    return pizza.cook() + "HotPepper "\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nAs you can see, these wrappers will add some additional parts to our existing objects.\n\n\n# Example of using decorator pattern\n\nWhen we have all of our classes ready, we can call our topping wrappers in a client code, in order to add some new parts to our initial object:\n\n//Client code:\n\nPizza pepperoni = new Pepperoni(new PlainPizza()) //decorate plain pizza\nprint("Description: " + pepperoni.cook())\n\n//Output:\n//Description: Pizza Pepperoni\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nIf we call our PlainPizza constructor inside of the Pepperoni wrapper, we will have a modified object with additional parts. We can also put one wrapper inside of another. The result will look like this:\n\n//Client code:\n\nPizza pepperoni = new Pepperoni(new PlainPizza()) //decorate plain pizza\nPizza hotPepperoni = new HotPepper(pepperoni) //decorate already decorated pizza\nprint("Description: " + hotPepperoni.cook())\n\n//Output:\n//Description: Pizza Pepperoni HotPepper\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# Conclusion\n\nUsing the decorator design pattern, you can add new functions to existing code, while reducing the possibility of ruining it. By delegating all new functions and responsibilities to new wrapper objects, our code will be able to contain more variations of your objects. This could potentially simplify your coding process.',normalizedContent:'many structural design patterns are needed to avoid unnecessary work and rewriting of code many times over. usually, these patterns are made in such a way that you can avoid interfering with classes that were previously defined. the pattern that we will discuss in this topic is no different. this design pattern allows you to add new functions to objects, excluding changes to them. it\'s called the decorator design pattern.\n\n\n# decorator design pattern\n\na decorator is a structural design pattern that allows using special wrappers for objects, giving them new functionality while avoiding changes to their structure. this approach simplifies the coding process by delegating the implementation of new functions to other classes, instead of rewriting new object classes. so you can say that the main idea of this pattern is focused around wrapper objects. but what is a wrapper?\n\na wrapper (or decorator) is an object that works with your initial object in a way that alters its behavior. wrapper shares the same interface and functions with that object. but, in case the user needs to call the initial object, the wrapper will pass the user\'s request through itself. in this process, there can be alteration on a result.\n\nthis approach is useful when you can\'t just modify your class and it will be hard to extend it with some child objects. using a decorator, you can add new behaviors and even use multiple level wrappers, without touching any part of the existing class. but this can be a little tricky to implement, considering that you may end up being unable to remove some of the wrappers without ruining all of the code.\n\n\n# decorator implementation\n\nlet\'s use the pizza-making process as an example. cooks make pizza. they have abundant options for toppings and types of pizza. but in the end, a pizza is just some dough with something on top of it. so, if we try to depict the pizza-making process as code, we can create a new class for each pizza type. and if we want to create combinations of pizza toppings, we\'ll end up with a large number of classes which will complicate your work.\n\nso, to avoid this unnecessary expansion of code, you can use the decorator pattern:\n\n\n\nusing this pattern, we need to introduce these elements:\n\n * an interface that represents methods for basic pizza making;\n * a class that creates our pizza;\n * one base wrapper which will store our pizza object to combine it with our topping wrappers;\n * for this particular example, we\'ll have two wrappers for pizza toppings.\n\nif we look at the resulting structure as a class diagram, it will look similar to this:\n\n\n\n\n# decorator in pseudocode\n\nnow let\'s try to depict this pattern in pseudocode. first of all, we need to describe our pizza interface:\n\ninterface pizza is\n  method makepizza()\n\n\n1\n2\n\n\nhere, we described all common methods for both our pizza maker and pizza wrapper. next, we\'ll describe them as plainpizza class and toppingwrapper:\n\nclass plainpizza implements pizza is\n  method cook() is\n    return "pizza"\n\n\nclass toppingwrapper implements pizza is\n  field pizza: pizza\n\n  constructor pizzawrapper(pizza pizza)\n    this.pizza = pizza\n\n  method cook() is\n    pizza.cook()\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\nboth these classes will implement the pizza interface. our plainpizza will return an object that represents a simple pizza that will be referenced within the toppingwrapper class and then combined with our other wrappers.\n\nnext, we\'ll define our pepperoni and hotpepper wrappers:\n\nclass pepperoni extends toppingwrapper is\n  method cook() is\n    return pizza.cook() + "pepperoni "\n\nclass hotpepper extends toppingwrapper is\n  method cook() is\n    return pizza.cook() + "hotpepper "\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nas you can see, these wrappers will add some additional parts to our existing objects.\n\n\n# example of using decorator pattern\n\nwhen we have all of our classes ready, we can call our topping wrappers in a client code, in order to add some new parts to our initial object:\n\n//client code:\n\npizza pepperoni = new pepperoni(new plainpizza()) //decorate plain pizza\nprint("description: " + pepperoni.cook())\n\n//output:\n//description: pizza pepperoni\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nif we call our plainpizza constructor inside of the pepperoni wrapper, we will have a modified object with additional parts. we can also put one wrapper inside of another. the result will look like this:\n\n//client code:\n\npizza pepperoni = new pepperoni(new plainpizza()) //decorate plain pizza\npizza hotpepperoni = new hotpepper(pepperoni) //decorate already decorated pizza\nprint("description: " + hotpepperoni.cook())\n\n//output:\n//description: pizza pepperoni hotpepper\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# conclusion\n\nusing the decorator design pattern, you can add new functions to existing code, while reducing the possibility of ruining it. by delegating all new functions and responsibilities to new wrapper objects, our code will be able to contain more variations of your objects. this could potentially simplify your coding process.',charsets:{},lastUpdated:"2022/10/25, 17:57:56",lastUpdatedTimestamp:1666691876e3},{title:"Theory：Decorator",frontmatter:{title:"Theory：Decorator",date:"2022-10-17T20:41:05.000Z",permalink:"/pages/c37d64/",tags:["Pattern"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/08.Design%20pattern/114.Theory%EF%BC%9ADecorator.html",relativePath:"01.Java/01.Hyperskill - Java/08.Design pattern/114.Theory：Decorator.md",key:"v-6f71bd09",path:"/pages/c37d64/",headers:[{level:2,title:"Decorator",slug:"decorator",normalizedTitle:"decorator",charIndex:424},{level:2,title:"Practical example",slug:"practical-example",normalizedTitle:"practical example",charIndex:1639},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:3811}],headersStr:"Decorator Practical example Conclusion",content:'Sometimes it is necessary to impose additional responsibilities on a separate object rather than the whole class. A library for building graphics in the user interface should be able to add a new property, say, frames or new behavior (for example, the ability to scroll to any element). Adding new responsibilities is permissible through inheritance. However, this solution is static, and therefore not flexible enough.\n\n\n# Decorator\n\nA more flexible approach is to put the component in another object called the decorator. The Decorator is a structural pattern used to add new responsibilities to an object dynamically without extending functionality. That lets you dynamically change the behavior of an object at runtime by wrapping it in an object of a decorator class.\n\nDecorators are used for adding some behavior that is not part of the core functionality to all interface methods. Decorator pattern perfectly suits the following tasks:\n\n * caching the work results;\n * measuring the execution time of methods;\n * user access control.\n\nThe decorator pattern has the following components:\n\n * Component is the interface for the objects that will get new responsibilities from the decorators;\n * Concrete Component defines objects which implement the Component interface and will get new responsibilities from the concrete decorators;\n * Decorator has reference to the Component and overridden component methods;\n * Concrete Decorator extends Decorator class and adds new functions, properties or state without creating new classes;\n\n\n\nThe decorator pattern in JDK:\n\n * Streams: java.io package;\n * Collections: java.util package.\n\n\n# Practical example\n\nLet’s consider a more specific example. Our components are software developers that have to make some job, that’s why we create the Developer interface:\n\npublic interface Developer {\n\n    public String makeJob();\n}\n\n\n1\n2\n3\n4\n\n\nNext, we create a concrete developer:\n\npublic class JavaDeveloper implements Developer {\n\n    public String makeJob() {\n        return "Write Java Code.";\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\nNow, describe the developer decorator to add functionality to our developers dynamically:\n\npublic class DeveloperDecorator implements Developer {\n    private Developer developer;\n\n    public DeveloperDecorator(Developer developer) {\n        this.developer = developer;\n    }\n\n    public String makeJob() {\n        return developer.makeJob();\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\nThe concrete decorator is the senior java developer who has an important additional responsibility: code review.\n\npublic class SeniorJavaDeveloper extends DeveloperDecorator {\n\n    public SeniorJavaDeveloper(Developer developer) {\n        super(developer);\n    }\n\n \n    public String makeCodeReview() {\n        return "Make code review.";\n    }\n\n    public String makeJob() {\n        return super.makeJob() + " " + makeCodeReview();\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\nThe second decorator is the team leader: being also a developer, the leader additionally has to communicate with customers and send weekly reports:\n\npublic class JavaTeamLead extends DeveloperDecorator {\n\n    public JavaTeamLead(Developer developer) {\n        super(developer);\n    }\n\n    public String sendWeekReport() {\n        return "Send week report to customers.";\n    }\n\n    public String makeJob() {\n        return super.makeJob() + " " + sendWeekReport();\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\nHere is the final demo of the Decorator pattern:\n\npublic class Task {\n\n    public static void main(String[] args) {\n        Developer developer = new JavaTeamLead(\n                                  new SeniorJavaDeveloper(\n                                      new JavaDeveloper()));\n        \n        System.out.println(developer.makeJob());\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# Conclusion\n\nThe decorator pattern is applicable in the following cases:\n\n * When you want to add new properties and functions to the object dynamically;\n * When the extension of classes is superfluous.',normalizedContent:'sometimes it is necessary to impose additional responsibilities on a separate object rather than the whole class. a library for building graphics in the user interface should be able to add a new property, say, frames or new behavior (for example, the ability to scroll to any element). adding new responsibilities is permissible through inheritance. however, this solution is static, and therefore not flexible enough.\n\n\n# decorator\n\na more flexible approach is to put the component in another object called the decorator. the decorator is a structural pattern used to add new responsibilities to an object dynamically without extending functionality. that lets you dynamically change the behavior of an object at runtime by wrapping it in an object of a decorator class.\n\ndecorators are used for adding some behavior that is not part of the core functionality to all interface methods. decorator pattern perfectly suits the following tasks:\n\n * caching the work results;\n * measuring the execution time of methods;\n * user access control.\n\nthe decorator pattern has the following components:\n\n * component is the interface for the objects that will get new responsibilities from the decorators;\n * concrete component defines objects which implement the component interface and will get new responsibilities from the concrete decorators;\n * decorator has reference to the component and overridden component methods;\n * concrete decorator extends decorator class and adds new functions, properties or state without creating new classes;\n\n\n\nthe decorator pattern in jdk:\n\n * streams: java.io package;\n * collections: java.util package.\n\n\n# practical example\n\nlet’s consider a more specific example. our components are software developers that have to make some job, that’s why we create the developer interface:\n\npublic interface developer {\n\n    public string makejob();\n}\n\n\n1\n2\n3\n4\n\n\nnext, we create a concrete developer:\n\npublic class javadeveloper implements developer {\n\n    public string makejob() {\n        return "write java code.";\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\nnow, describe the developer decorator to add functionality to our developers dynamically:\n\npublic class developerdecorator implements developer {\n    private developer developer;\n\n    public developerdecorator(developer developer) {\n        this.developer = developer;\n    }\n\n    public string makejob() {\n        return developer.makejob();\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\nthe concrete decorator is the senior java developer who has an important additional responsibility: code review.\n\npublic class seniorjavadeveloper extends developerdecorator {\n\n    public seniorjavadeveloper(developer developer) {\n        super(developer);\n    }\n\n \n    public string makecodereview() {\n        return "make code review.";\n    }\n\n    public string makejob() {\n        return super.makejob() + " " + makecodereview();\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\nthe second decorator is the team leader: being also a developer, the leader additionally has to communicate with customers and send weekly reports:\n\npublic class javateamlead extends developerdecorator {\n\n    public javateamlead(developer developer) {\n        super(developer);\n    }\n\n    public string sendweekreport() {\n        return "send week report to customers.";\n    }\n\n    public string makejob() {\n        return super.makejob() + " " + sendweekreport();\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\nhere is the final demo of the decorator pattern:\n\npublic class task {\n\n    public static void main(string[] args) {\n        developer developer = new javateamlead(\n                                  new seniorjavadeveloper(\n                                      new javadeveloper()));\n        \n        system.out.println(developer.makejob());\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# conclusion\n\nthe decorator pattern is applicable in the following cases:\n\n * when you want to add new properties and functions to the object dynamically;\n * when the extension of classes is superfluous.',charsets:{},lastUpdated:"2022/10/25, 17:57:56",lastUpdatedTimestamp:1666691876e3},{title:"Theory：HTTP",frontmatter:{title:"Theory：HTTP",date:"2022-07-04T19:05:50.000Z",permalink:"/pages/9453ab/",tags:["Web","HTTP"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/09.Web/59.Theory%EF%BC%9AHTTP.html",relativePath:"01.Java/01.Hyperskill - Java/09.Web/59.Theory：HTTP.md",key:"v-01eae3de",path:"/pages/9453ab/",headers:[{level:2,title:"What is HTTP",slug:"what-is-http",normalizedTitle:"what is http",charIndex:2},{level:2,title:"Short HTTP History",slug:"short-http-history",normalizedTitle:"short http history",charIndex:1039},{level:2,title:"What is HTTPS",slug:"what-is-https",normalizedTitle:"what is https",charIndex:2137},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:3268}],headersStr:"What is HTTP Short HTTP History What is HTTPS Conclusion",content:"# What is HTTP\n\nWhenever you decide to check out your friends' pictures on social networks or leave them a message, watch a funny video with kittens, or find the meaning of an unknown term in the search engine, the device (client) from which you surf the Internet sends a request to the server and receives a response from it.\n\nA client is a customer of a service, and a server is a computer that serves users or other computers. It can be located remotely, tens of thousands of kilometers away from you. The technology when the network load is distributed between servers and service customers is called Client-Server Architecture.\n\n\n\nData exchange between the client and the server takes place due to the HTTP. HTTP stands for HyperText Transfer Protocol. A protocol is a set of rules and conventions that defines a uniform way to exchange data between different programs and handle errors. Like a waiter in a restaurant, it accepts your requests, takes them to the server for processing, and then comes back to you with a response.\n\n\n# Short HTTP History\n\nHTTP was developed by a scientist and CERN employee Tim Berners-Lee, the ideologist of the World Wide Web.\n\nWork on the protocol continued for two years, and in March 1991, HTTP was used as a technology to help access documents on the Internet and facilitate hypertext navigation. This was Protocol version 0.9. It was designed to optimize communication between the client and the server on the network. After the appearance of the HTTP/0.9 standard, a separation of functions between the client and the server appeared during their interaction.\n\nCurrently, the most recent version of the Protocol is HTTP/3.0, but it is still preparing for publication. So, for now, the most common version is HTTP/2.0, released in 2015. Prior to that, HTTP/1.1 (released in 1999) was used for as long as sixteen years. This standard satisfied everyone for many years because of its innovations: with the advent of HTTP/1.1, the transfer of requests from client to server was greatly accelerated.\n\nNot all sites have switched to HTTP/2 yet, but browsers support both new and old standards.\n\n\n# What is HTTPS\n\nDespite the great functionality and popularity of HTTP, there is one drawback: data is transmitted in an unsecured form. This flaw can be critical when it comes to paying for purchases over the Internet or sending passport data: no user wants their confidential information to be leaked.\n\nTo make the Internet space safer, the programmers decided to develop an add-on over HTTP, which helps to avoid data interception by encryption. The HTTP extension is called HTTPS and stands for HyperText Transfer Protocol Secure.\n\nHTTPS provides a secure connection between the user's browser and the web server. Often, the browser window displays a green address bar or lock indicating encrypted data transfer. You can also check the address bar of your web browser to see if you have a secure connection. It should start with \"https://\".\n\n\n\nAll modern browsers support HTTPS. Internet users do not need to configure this extension separately: it is automatically enabled if necessary.\n\nAt the current moment, the most popular browsers such as Chrome, Firefox, Safari, and Edge mark all connections over HTTP as insecure.\n\n\n# Conclusion\n\nIn summary, HyperText Transfer Protocol is a collection of regulations that makes possible the data exchange between the client and the server on the network. The latest version of the protocol is HTTP/2.0, yet the older version, HTTP/1.1, is still in use. An extension of the protocol HTTPS added encryption to data transfer and increased the security of transmissions.",normalizedContent:"# what is http\n\nwhenever you decide to check out your friends' pictures on social networks or leave them a message, watch a funny video with kittens, or find the meaning of an unknown term in the search engine, the device (client) from which you surf the internet sends a request to the server and receives a response from it.\n\na client is a customer of a service, and a server is a computer that serves users or other computers. it can be located remotely, tens of thousands of kilometers away from you. the technology when the network load is distributed between servers and service customers is called client-server architecture.\n\n\n\ndata exchange between the client and the server takes place due to the http. http stands for hypertext transfer protocol. a protocol is a set of rules and conventions that defines a uniform way to exchange data between different programs and handle errors. like a waiter in a restaurant, it accepts your requests, takes them to the server for processing, and then comes back to you with a response.\n\n\n# short http history\n\nhttp was developed by a scientist and cern employee tim berners-lee, the ideologist of the world wide web.\n\nwork on the protocol continued for two years, and in march 1991, http was used as a technology to help access documents on the internet and facilitate hypertext navigation. this was protocol version 0.9. it was designed to optimize communication between the client and the server on the network. after the appearance of the http/0.9 standard, a separation of functions between the client and the server appeared during their interaction.\n\ncurrently, the most recent version of the protocol is http/3.0, but it is still preparing for publication. so, for now, the most common version is http/2.0, released in 2015. prior to that, http/1.1 (released in 1999) was used for as long as sixteen years. this standard satisfied everyone for many years because of its innovations: with the advent of http/1.1, the transfer of requests from client to server was greatly accelerated.\n\nnot all sites have switched to http/2 yet, but browsers support both new and old standards.\n\n\n# what is https\n\ndespite the great functionality and popularity of http, there is one drawback: data is transmitted in an unsecured form. this flaw can be critical when it comes to paying for purchases over the internet or sending passport data: no user wants their confidential information to be leaked.\n\nto make the internet space safer, the programmers decided to develop an add-on over http, which helps to avoid data interception by encryption. the http extension is called https and stands for hypertext transfer protocol secure.\n\nhttps provides a secure connection between the user's browser and the web server. often, the browser window displays a green address bar or lock indicating encrypted data transfer. you can also check the address bar of your web browser to see if you have a secure connection. it should start with \"https://\".\n\n\n\nall modern browsers support https. internet users do not need to configure this extension separately: it is automatically enabled if necessary.\n\nat the current moment, the most popular browsers such as chrome, firefox, safari, and edge mark all connections over http as insecure.\n\n\n# conclusion\n\nin summary, hypertext transfer protocol is a collection of regulations that makes possible the data exchange between the client and the server on the network. the latest version of the protocol is http/2.0, yet the older version, http/1.1, is still in use. an extension of the protocol https added encryption to data transfer and increased the security of transmissions.",charsets:{},lastUpdated:"2022/10/12, 17:01:25",lastUpdatedTimestamp:1665565285e3},{title:"Theory：World Wide Web",frontmatter:{title:"Theory：World Wide Web",date:"2022-07-04T11:30:31.000Z",permalink:"/pages/4b9292/",tags:["Web"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/09.Web/58.Theory%EF%BC%9AWorld%20Wide%20Web.html",relativePath:"01.Java/01.Hyperskill - Java/09.Web/58.Theory：World Wide Web.md",key:"v-3d39fce6",path:"/pages/4b9292/",headers:[{level:2,title:"What is the Web?",slug:"what-is-the-web",normalizedTitle:"what is the web?",charIndex:2},{level:2,title:"The history of the Web",slug:"the-history-of-the-web",normalizedTitle:"the history of the web",charIndex:1603},{level:2,title:"Internet vs WWW",slug:"internet-vs-www",normalizedTitle:"internet vs www",charIndex:2901},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:3318}],headersStr:"What is the Web? The history of the Web Internet vs WWW Conclusion",content:'# What is the Web?\n\nHave you ever wondered what images will appear in the heads of future generations when it comes to the era in which we live now? It is likely that the 21st century will spark associations with the advent of the Internet and the World Wide Web. Their creation caused major changes not only in the military and science structures but also in the lives of ordinary people, giving us opportunities that previously could only be imagined.\n\nYou so often hear phrases like "The World Wide Web has engulfed our planet", that the definition of the Web is naturally pre-assumed and taken for granted. But really, what is this Web and why is it so global?\n\nThe World Wide Web is a collection of information resources scattered around the world and linked together by reference. Sometimes this term is shortened to WWW, W3 or simply Web.\n\n\n\nThe Web is also sometimes ironically called Wild Wild Web by analogy with the movie title Wild Wild West: come to think of it, the resemblance is undeniable.\n\nA unit of hypertext data on the W3 is called a web page. A web page may contain text, media files, graphics and links to other pages.\n\n\n\nA group of Web pages that share a common content theme, design and links to each other is called a website. Special programs — browsers — are used to download and browse these websites. Most popular browsers: Firefox, Chrome, Opera, Safari.\n\nOften when you visit sites, you can see "www" in the address bar of the browser:\n\n\n\nThis prefix indicates that the address of the website belongs to the Internet space of the World Wide Web and is not mandatory.\n\n\n# The history of the Web\n\nThe World Wide Web was created at the European Organization for Nuclear Energy (CERN). The development of the internal computer network was carried out by the scientist Tim Berners-Lee. In 1989, he was the first to suggest the idea of an information management system that used links to consolidate documents across the network. He and his colleagues created a prototype project and released it for presentation. The first few years of the web pages were purely text-based until the first NCSA Mosaic graphics browser was introduced in 1993. The event allowed the World Wide Web to transform itself from scientific research into a media outlet.\n\nInitially, the Internet only allowed users to search and read information. This period of time is conditionally referred to as Web 1.0 (1990-2000) to provide a general presentation of the ever-changing Internet environment.\n\nSoon people were able to interact with each other and share their content. This period is unofficially called Web 2.0 (2000-2010).\n\nThe development of the World Wide Web continues to this day and we will be able to see what changes Web 3.0 (2010- ...) will bring. Currently, Web 3.0 aims to improve content analysis and provide faster and more relevant search results using artificial intelligence.\n\n\n# Internet vs WWW\n\nMost people use the terms "Internet" and "WWW" interchangeably, but in fact, these are two separate notions. The Internet is a global computer network, i.e., a technical infrastructure that connects millions of computers around the world. While W3 is used to distribute data that contains links to other data, the Internet connects computers to each other to provide access to the information.\n\n\n\n\n# Conclusion\n\nSimply put, the World Wide Web is a way of obtaining information over the Internet, yet the Internet is also used to access information that is not a part of the Web. Hypertext documents - web pages are the units of the WWW. They may include different content and are usually joined by a shared topic and links into websites. Specific programs called browsers can download websites, so we can explore them. Now you understand that the World Wide Web and the Internet actually mean different things. More importantly, now you can demonstrate your knowledge and explain this difference to your friends.',normalizedContent:'# what is the web?\n\nhave you ever wondered what images will appear in the heads of future generations when it comes to the era in which we live now? it is likely that the 21st century will spark associations with the advent of the internet and the world wide web. their creation caused major changes not only in the military and science structures but also in the lives of ordinary people, giving us opportunities that previously could only be imagined.\n\nyou so often hear phrases like "the world wide web has engulfed our planet", that the definition of the web is naturally pre-assumed and taken for granted. but really, what is this web and why is it so global?\n\nthe world wide web is a collection of information resources scattered around the world and linked together by reference. sometimes this term is shortened to www, w3 or simply web.\n\n\n\nthe web is also sometimes ironically called wild wild web by analogy with the movie title wild wild west: come to think of it, the resemblance is undeniable.\n\na unit of hypertext data on the w3 is called a web page. a web page may contain text, media files, graphics and links to other pages.\n\n\n\na group of web pages that share a common content theme, design and links to each other is called a website. special programs — browsers — are used to download and browse these websites. most popular browsers: firefox, chrome, opera, safari.\n\noften when you visit sites, you can see "www" in the address bar of the browser:\n\n\n\nthis prefix indicates that the address of the website belongs to the internet space of the world wide web and is not mandatory.\n\n\n# the history of the web\n\nthe world wide web was created at the european organization for nuclear energy (cern). the development of the internal computer network was carried out by the scientist tim berners-lee. in 1989, he was the first to suggest the idea of an information management system that used links to consolidate documents across the network. he and his colleagues created a prototype project and released it for presentation. the first few years of the web pages were purely text-based until the first ncsa mosaic graphics browser was introduced in 1993. the event allowed the world wide web to transform itself from scientific research into a media outlet.\n\ninitially, the internet only allowed users to search and read information. this period of time is conditionally referred to as web 1.0 (1990-2000) to provide a general presentation of the ever-changing internet environment.\n\nsoon people were able to interact with each other and share their content. this period is unofficially called web 2.0 (2000-2010).\n\nthe development of the world wide web continues to this day and we will be able to see what changes web 3.0 (2010- ...) will bring. currently, web 3.0 aims to improve content analysis and provide faster and more relevant search results using artificial intelligence.\n\n\n# internet vs www\n\nmost people use the terms "internet" and "www" interchangeably, but in fact, these are two separate notions. the internet is a global computer network, i.e., a technical infrastructure that connects millions of computers around the world. while w3 is used to distribute data that contains links to other data, the internet connects computers to each other to provide access to the information.\n\n\n\n\n# conclusion\n\nsimply put, the world wide web is a way of obtaining information over the internet, yet the internet is also used to access information that is not a part of the web. hypertext documents - web pages are the units of the www. they may include different content and are usually joined by a shared topic and links into websites. specific programs called browsers can download websites, so we can explore them. now you understand that the world wide web and the internet actually mean different things. more importantly, now you can demonstrate your knowledge and explain this difference to your friends.',charsets:{},lastUpdated:"2022/10/12, 17:01:25",lastUpdatedTimestamp:1665565285e3},{title:"Theory：HTTP URL",frontmatter:{title:"Theory：HTTP URL",date:"2022-07-10T15:41:19.000Z",permalink:"/pages/e0c5ed/",tags:["Web","HTTP"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/09.Web/63.Theory%EF%BC%9AHTTP%20URL.html",relativePath:"01.Java/01.Hyperskill - Java/09.Web/63.Theory：HTTP URL.md",key:"v-33c35951",path:"/pages/e0c5ed/",headers:[{level:2,title:"What is URL?",slug:"what-is-url",normalizedTitle:"what is url?",charIndex:2},{level:2,title:"Basic URL Structure",slug:"basic-url-structure",normalizedTitle:"basic url structure",charIndex:1490},{level:2,title:"Absolute and relative URLs",slug:"absolute-and-relative-urls",normalizedTitle:"absolute and relative urls",charIndex:3312},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:4681}],headersStr:"What is URL? Basic URL Structure Absolute and relative URLs Conclusion",content:"# What is URL?\n\nImagine all files on the Internet are located in a megalopolis, each of them lucky to be living in their own home. Given the scale of the Internet, in the resulting settlement, there will be an unimaginable number of blocks and streets. For example, an interesting article, which you want to share with your friend, lives in one of the houses. How do you explain where exactly to find the article? That's right, you need to come up with a single standard by which you could name all the addresses in the city, and then give your friend the street name and house number, just like in a real city!\n\nAll documents on the Internet have a personal address. For example, the URL of the JetBrains website looks like this:\n\nhttps://www.jetbrains.com/\n\n\n1\n\n\nWeb pages, images, videos, and other documents that can be stored on your computer also have addresses. To make them look the same on the Internet, in 1990 the creators of the World Wide Web developed a special standard that defines what addresses should look like. That standard is called a URL, which stands for Uniform Resource Locator. It represents the standardized way of recording file addresses on the Internet.\n\nThe standard has one specific feature: not all characters can be used in URLs. The list of allowed characters includes:\n\n * Latin alphabet (or English alphabet symbols);\n * Cyrillic alphabet;\n * Numbers;\n * Reserved characters with special meaning !#$&'()*+,/:;=?@[];\n * Unreserved characters: -_.~.\n\n\n# Basic URL Structure\n\nHere is an example of a URL address:\n\n\n\nURL address has a certain structure based on the following template:\n\n<protocol>://<login>:<password>@<host>:<port>/<path>?<request parameters>#<anchor>\n\n\n1\n\n\nNow let's look at this template in more detail:\n\n * <protocol> is a way of exchanging data with a resource. You are probably most familiar with HTTP and HTTPS protocols, but there are others;\n * <login> and <password> are prefixes that transmit authentication data for some protocols, if necessary;\n * <host> is the domain name or IP address where the site is located. Domain is the name of the site, IP is its address in a network;\n * <port> is required for connection within the specified host. The official port for HTTP connections is 80, and the alternative is 8080, but it is possible to use any other ports too. The default setting for HTTPS is 443;\n * <path> indicates the exact address of a particular file or page within a domain;\n * <request parameters> are parameters transmitted to the server. Depending on request parameters, the site may slightly change its display. For example, it is possible to sort the items of a list in a different order;\n * <anchor> allows you to connect to a specific part of a web page or document.\n\nThis is the general structure of any URL. Most often, when accessing web pages and documents located on a web server, most of the parameters are not mandatory and are set automatically.\n\nWhen you just want to see a particular page on the Internet with your browser, the URL template looks a lot easier:\n\n<protocol>://<host>\n\n\n1\n\n\nFor example, it can be recorded in a form:\n\nhttps://www.google.com\n\n\n1\n\n\nThis simplification was created to make life easier for ordinary Internet users, but most programmers need to know the complete template, and now you do.\n\n\n# Absolute and relative URLs\n\nAs we know, a URL consists of several parts, and when you're browsing through the same site, some elements of it stay the same. Whichever IDE you want to read about on JetBrains, the protocol and host parts of a URL always match https://www.jetbrains.com. For example, let's look at these links:\n\n * https://www.jetbrains.com/pycharm/ about PyCharm\n * https://www.jetbrains.com/go/ about GoLang\n * https://www.jetbrains.com/idea/ about IntelliJ IDEA\n\nThe new information in each link is its <path>. There exists another way to locate resources on the same site by only <path>?<request parameters>#<anchor>. The full URL is known as absolute, and we call relative its shorter counterpart.\n\nYou should remember that it would work only on the same site, while you cannot refer to another site by a relative path. Every time you follow the link with a relative URL, it will expand to absolute, where all parts including everything from protocol to port will match the resource you are using this time.\n\nWe know that by absolute URLs we can easily find the resource through the Internet, but why do we need relative paths at all since they will be transformed to absolute anyway? Here are the main reasons for that:\n\n * They are short.\n * We can easily move the site to another host.\n * They are a little bit faster to retrieve by a browser.\n\n\n# Conclusion\n\nLet's sum up what you have learned about URLs in this topic:\n\n * We can locate any resources on the Internet through a URL.\n * Each URL consists of several parts, but some of them are optional.\n * We can retrieve resources by an absolute URL and then browse them through relative paths.",normalizedContent:"# what is url?\n\nimagine all files on the internet are located in a megalopolis, each of them lucky to be living in their own home. given the scale of the internet, in the resulting settlement, there will be an unimaginable number of blocks and streets. for example, an interesting article, which you want to share with your friend, lives in one of the houses. how do you explain where exactly to find the article? that's right, you need to come up with a single standard by which you could name all the addresses in the city, and then give your friend the street name and house number, just like in a real city!\n\nall documents on the internet have a personal address. for example, the url of the jetbrains website looks like this:\n\nhttps://www.jetbrains.com/\n\n\n1\n\n\nweb pages, images, videos, and other documents that can be stored on your computer also have addresses. to make them look the same on the internet, in 1990 the creators of the world wide web developed a special standard that defines what addresses should look like. that standard is called a url, which stands for uniform resource locator. it represents the standardized way of recording file addresses on the internet.\n\nthe standard has one specific feature: not all characters can be used in urls. the list of allowed characters includes:\n\n * latin alphabet (or english alphabet symbols);\n * cyrillic alphabet;\n * numbers;\n * reserved characters with special meaning !#$&'()*+,/:;=?@[];\n * unreserved characters: -_.~.\n\n\n# basic url structure\n\nhere is an example of a url address:\n\n\n\nurl address has a certain structure based on the following template:\n\n<protocol>://<login>:<password>@<host>:<port>/<path>?<request parameters>#<anchor>\n\n\n1\n\n\nnow let's look at this template in more detail:\n\n * <protocol> is a way of exchanging data with a resource. you are probably most familiar with http and https protocols, but there are others;\n * <login> and <password> are prefixes that transmit authentication data for some protocols, if necessary;\n * <host> is the domain name or ip address where the site is located. domain is the name of the site, ip is its address in a network;\n * <port> is required for connection within the specified host. the official port for http connections is 80, and the alternative is 8080, but it is possible to use any other ports too. the default setting for https is 443;\n * <path> indicates the exact address of a particular file or page within a domain;\n * <request parameters> are parameters transmitted to the server. depending on request parameters, the site may slightly change its display. for example, it is possible to sort the items of a list in a different order;\n * <anchor> allows you to connect to a specific part of a web page or document.\n\nthis is the general structure of any url. most often, when accessing web pages and documents located on a web server, most of the parameters are not mandatory and are set automatically.\n\nwhen you just want to see a particular page on the internet with your browser, the url template looks a lot easier:\n\n<protocol>://<host>\n\n\n1\n\n\nfor example, it can be recorded in a form:\n\nhttps://www.google.com\n\n\n1\n\n\nthis simplification was created to make life easier for ordinary internet users, but most programmers need to know the complete template, and now you do.\n\n\n# absolute and relative urls\n\nas we know, a url consists of several parts, and when you're browsing through the same site, some elements of it stay the same. whichever ide you want to read about on jetbrains, the protocol and host parts of a url always match https://www.jetbrains.com. for example, let's look at these links:\n\n * https://www.jetbrains.com/pycharm/ about pycharm\n * https://www.jetbrains.com/go/ about golang\n * https://www.jetbrains.com/idea/ about intellij idea\n\nthe new information in each link is its <path>. there exists another way to locate resources on the same site by only <path>?<request parameters>#<anchor>. the full url is known as absolute, and we call relative its shorter counterpart.\n\nyou should remember that it would work only on the same site, while you cannot refer to another site by a relative path. every time you follow the link with a relative url, it will expand to absolute, where all parts including everything from protocol to port will match the resource you are using this time.\n\nwe know that by absolute urls we can easily find the resource through the internet, but why do we need relative paths at all since they will be transformed to absolute anyway? here are the main reasons for that:\n\n * they are short.\n * we can easily move the site to another host.\n * they are a little bit faster to retrieve by a browser.\n\n\n# conclusion\n\nlet's sum up what you have learned about urls in this topic:\n\n * we can locate any resources on the internet through a url.\n * each url consists of several parts, but some of them are optional.\n * we can retrieve resources by an absolute url and then browse them through relative paths.",charsets:{},lastUpdated:"2022/10/12, 17:01:25",lastUpdatedTimestamp:1665565285e3},{title:"Theory：HTTP messages",frontmatter:{title:"Theory：HTTP messages",date:"2022-07-19T17:48:05.000Z",permalink:"/pages/ec1dbf/",tags:["Web","HTTP"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/09.Web/73.Theory%EF%BC%9AHTTP%20messages.html",relativePath:"01.Java/01.Hyperskill - Java/09.Web/73.Theory：HTTP messages.md",key:"v-266ed7cf",path:"/pages/ec1dbf/",headers:[{level:2,title:"The format of messages",slug:"the-format-of-messages",normalizedTitle:"the format of messages",charIndex:524},{level:2,title:"The simplified HTTP interaction",slug:"the-simplified-http-interaction",normalizedTitle:"the simplified http interaction",charIndex:1291},{level:2,title:"Methods",slug:"methods",normalizedTitle:"methods",charIndex:1740},{level:2,title:"Status codes",slug:"status-codes",normalizedTitle:"status codes",charIndex:2536},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:4429}],headersStr:"The format of messages The simplified HTTP interaction Methods Status codes Conclusion",content:"The HTTP protocol relies on the \"client-server\" architecture that is built on the basis of messaging. HTTP messages are a way to exchange data between clients and servers in the Web. There are two types of messages: requests and responses.\n\nA request is an operation that a client wants to perform on the server, and a response is an answer from the server to an incoming request. Usually, programmers do not need to worry about creating HTTP messages since they are produced by browsers, applications, and web servers.\n\n\n# The format of messages\n\nIn the HTTP protocol, all messages consist of text strings. Both requests and responses have roughly the same standardized format:\n\n 1. Start line\n    \n    which may vary:\n    \n    * for requests, it indicates the type of request (method) and the URL where to send it (target);\n    * for responses, it contains a status code to determine the success of the operation.\n\n 2. Headers which describe the message and convey various parameters.\n\n 3. Body in which the message data is located.\n\nThe start line and the header are required attributes, so the other parts may be empty.\n\nThe full format can be quite complicated for beginners, so we have considered only its part which is the most important for understanding the general principles.\n\n\n# The simplified HTTP interaction\n\nHere is a simplified HTTP interaction between a browser client and a server. The client and the server interact through requests and responses which follow the studied format:\n\n\n\nNote that there are other possible types of client programs, not just a browser. You can even write your own HTTP client and interact with servers. The only requirement is that such a program should always follow the message format.\n\n\n# Methods\n\nHTTP defines a set of request methods that specify what the desired action will be for a given resource. Despite the fact that their names can be nouns, these query methods are sometimes referred to as HTTP verbs.\n\nLet's look at the most commonly used query methods:\n\n * GET method is only used to retrieve data from the server;\n * POST method is used to send data to the server;\n * HEAD requests data from the server in the same way as the GET method, but without a response body.\n\nEvery time you click on a link, you basically communicate to your browser that you want to GET this page. When you want to log in to your favorite site, you POST your login and password to receive access to it.\n\nThere are more available verbs to learn. You don't need to memorize them all right now.\n\n\n# Status codes\n\nFor normal operation of computer programs and web pages that work via HTTP, except for the content of the page, the server returns a three-digit code, which specifies the response request. With the help of this code, it is possible to redirect the client to another site or to indicate the change of the page, as well as to detect an error in data processing.\n\nCurrently, the standards define five classes of status codes:\n\n1XX: INFORMATIONAL   CODES BEGINNING WITH \"1\" ARE CALLED INFORMATION CODES. THEY\n                     REPORT ON HOW CLIENT REQUESTS ARE PROCESSED.\n2xx: Success         Messages of this class inform that the action requested by\n                     the client has been successfully accepted for processing.\n3xx: Redirection     It means further action must be taken in order to complete\n                     the request.\n4xx: Client Error    It reports errors on the client's side.\n5xx: Server Error    The code indicates that the operation was unsuccessful due\n                     to the fault of the server.\n\nAs an example, if you have successfully loaded a website, the response you received has code 200. You can check this by opening the developer tools of your browser, and clicking on the Networking tab. Then try reloading the web page and you will see the status codes. The combination of keys to open the developer tools can vary. To give you an example, this might be Ctrl + Shift + I or F12 on Windows and Linux, or Cmd + Opt + I on macOS.\n\nYou have also probably been in a situation where your browser displays the \"404 Not Found\" message when you input the address of a page that does not exist. This is how these failure messages usually look:\n\n\n\nBrowsers display error messages so that users can understand that something has gone wrong, rather than continuing to look at the blank page while waiting for the content to be downloaded.\n\n\n# Conclusion\n\nLet's highlight the main points we've just discussed here:\n\n * HTTP messages can be of two types: requests and responses.\n * They are composed of the start line, headers, and body. The start line in requests includes method and target, while in responses it includes status code.\n * The commonly used methods in request messages are GET, POST, and HEAD.\n * Status code indicates the response from the server as a three-digit number. It can be one of 5 classes: Informational, Success, Redirection, Client Error, and Server Error.\n\nNow, when you've finished reading the topic, you can visit various sites in a browser and try to guess what your actions look like from a technical point of view.",normalizedContent:"the http protocol relies on the \"client-server\" architecture that is built on the basis of messaging. http messages are a way to exchange data between clients and servers in the web. there are two types of messages: requests and responses.\n\na request is an operation that a client wants to perform on the server, and a response is an answer from the server to an incoming request. usually, programmers do not need to worry about creating http messages since they are produced by browsers, applications, and web servers.\n\n\n# the format of messages\n\nin the http protocol, all messages consist of text strings. both requests and responses have roughly the same standardized format:\n\n 1. start line\n    \n    which may vary:\n    \n    * for requests, it indicates the type of request (method) and the url where to send it (target);\n    * for responses, it contains a status code to determine the success of the operation.\n\n 2. headers which describe the message and convey various parameters.\n\n 3. body in which the message data is located.\n\nthe start line and the header are required attributes, so the other parts may be empty.\n\nthe full format can be quite complicated for beginners, so we have considered only its part which is the most important for understanding the general principles.\n\n\n# the simplified http interaction\n\nhere is a simplified http interaction between a browser client and a server. the client and the server interact through requests and responses which follow the studied format:\n\n\n\nnote that there are other possible types of client programs, not just a browser. you can even write your own http client and interact with servers. the only requirement is that such a program should always follow the message format.\n\n\n# methods\n\nhttp defines a set of request methods that specify what the desired action will be for a given resource. despite the fact that their names can be nouns, these query methods are sometimes referred to as http verbs.\n\nlet's look at the most commonly used query methods:\n\n * get method is only used to retrieve data from the server;\n * post method is used to send data to the server;\n * head requests data from the server in the same way as the get method, but without a response body.\n\nevery time you click on a link, you basically communicate to your browser that you want to get this page. when you want to log in to your favorite site, you post your login and password to receive access to it.\n\nthere are more available verbs to learn. you don't need to memorize them all right now.\n\n\n# status codes\n\nfor normal operation of computer programs and web pages that work via http, except for the content of the page, the server returns a three-digit code, which specifies the response request. with the help of this code, it is possible to redirect the client to another site or to indicate the change of the page, as well as to detect an error in data processing.\n\ncurrently, the standards define five classes of status codes:\n\n1xx: informational   codes beginning with \"1\" are called information codes. they\n                     report on how client requests are processed.\n2xx: success         messages of this class inform that the action requested by\n                     the client has been successfully accepted for processing.\n3xx: redirection     it means further action must be taken in order to complete\n                     the request.\n4xx: client error    it reports errors on the client's side.\n5xx: server error    the code indicates that the operation was unsuccessful due\n                     to the fault of the server.\n\nas an example, if you have successfully loaded a website, the response you received has code 200. you can check this by opening the developer tools of your browser, and clicking on the networking tab. then try reloading the web page and you will see the status codes. the combination of keys to open the developer tools can vary. to give you an example, this might be ctrl + shift + i or f12 on windows and linux, or cmd + opt + i on macos.\n\nyou have also probably been in a situation where your browser displays the \"404 not found\" message when you input the address of a page that does not exist. this is how these failure messages usually look:\n\n\n\nbrowsers display error messages so that users can understand that something has gone wrong, rather than continuing to look at the blank page while waiting for the content to be downloaded.\n\n\n# conclusion\n\nlet's highlight the main points we've just discussed here:\n\n * http messages can be of two types: requests and responses.\n * they are composed of the start line, headers, and body. the start line in requests includes method and target, while in responses it includes status code.\n * the commonly used methods in request messages are get, post, and head.\n * status code indicates the response from the server as a three-digit number. it can be one of 5 classes: informational, success, redirection, client error, and server error.\n\nnow, when you've finished reading the topic, you can visit various sites in a browser and try to guess what your actions look like from a technical point of view.",charsets:{},lastUpdated:"2022/10/12, 17:01:25",lastUpdatedTimestamp:1665565285e3},{title:"Theory：MVC",frontmatter:{title:"Theory：MVC",date:"2022-07-20T11:39:56.000Z",permalink:"/pages/26ab34/",tags:["Framework","MVC","Web"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/09.Web/75.Theory%EF%BC%9AMVC.html",relativePath:"01.Java/01.Hyperskill - Java/09.Web/75.Theory：MVC.md",key:"v-5991209c",path:"/pages/26ab34/",headers:[{level:2,title:"What are MVC and MVC components",slug:"what-are-mvc-and-mvc-components",normalizedTitle:"what are mvc and mvc components",charIndex:554},{level:2,title:"Advantages and disadvantages of MVC",slug:"advantages-and-disadvantages-of-mvc",normalizedTitle:"advantages and disadvantages of mvc",charIndex:1588},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:2687}],headersStr:"What are MVC and MVC components Advantages and disadvantages of MVC Conclusion",content:"When developing web or mobile applications, programmers use different patterns to make their code simpler and easier to work with. MVC is one such pattern. It describes how to separate the user interface from the business logic and data access logic. That way the user interface can be modified independently, so there is low coupling between the different parts of the application.\n\nAfter reading this topic, you will learn about the components of the MVC pattern, as well as its advantages, and also consider when it is not a good idea to use MVC.\n\n\n# What are MVC and MVC components\n\nMVC (Model-View-Controller) is an architectural pattern separating an application into three logical components:\n\n * Model is responsible for all data and its related logic;\n * View is responsible for presenting data to users or handling user interaction;\n * Controller informs the Model of the need for changes.\n\nIn order to understand how to work with these components, consider the example below.\n\n\n\nWhen the user clicks on interface elements, they interact with the Controller. The Controller accepts user input and interacts with the Model. The Model represents the state of an application. It can be data in a database, a file, an in-memory data, or something else. After modification, the Model updates the View, and its user sees this.\n\n提示\n\nThis describes the most basic version of the MVC architecture. There is also a common variant where there is a connection between View and Controller. The Controller in such cases provides the interconnection between the Model and View components.\n\n\n# Advantages and disadvantages of MVC\n\nMVC has become a sought-after pattern and has been widely used because of its benefits:\n\n * By separating into components, the flexibility, maintainability, and scalability of the application are increased.\n * You can test components separately from each other.\n * The components can be reused.\n * Models can have multiple views.\n * MVC allows you to configure different levels of security for different components.\n\nAnd these are the disadvantages of the MVC pattern:\n\n * One should keep in mind that it is not suitable for small applications. It makes simple applications more complex.\n * MVC is also not suitable for high-performance applications. Sometimes it's more efficient to go through several layers of architecture.\n\n提示\n\nMVC is not the only architectural pattern. This is worth bearing in mind if, for some reason, it is not suitable for the development of your application. There are several other patterns for similar needs: MVP(Model-View-Presenter), MVVM(Model-View-ViewModel). The MVC, MVP, and MVVM patterns are often called the MV* family.\n\n\n# Conclusion\n\nMVC is an architectural pattern that separates the user interface from business logic and business logic from data access logic. It has its pros and cons, and many implementations and interpretations. It's interesting to know that this pattern was originally used for desktop graphical user interfaces. Currently, MVC is used in the development of web applications and mobile applications. Therefore, its knowledge will be handy for you in the future.",normalizedContent:"when developing web or mobile applications, programmers use different patterns to make their code simpler and easier to work with. mvc is one such pattern. it describes how to separate the user interface from the business logic and data access logic. that way the user interface can be modified independently, so there is low coupling between the different parts of the application.\n\nafter reading this topic, you will learn about the components of the mvc pattern, as well as its advantages, and also consider when it is not a good idea to use mvc.\n\n\n# what are mvc and mvc components\n\nmvc (model-view-controller) is an architectural pattern separating an application into three logical components:\n\n * model is responsible for all data and its related logic;\n * view is responsible for presenting data to users or handling user interaction;\n * controller informs the model of the need for changes.\n\nin order to understand how to work with these components, consider the example below.\n\n\n\nwhen the user clicks on interface elements, they interact with the controller. the controller accepts user input and interacts with the model. the model represents the state of an application. it can be data in a database, a file, an in-memory data, or something else. after modification, the model updates the view, and its user sees this.\n\n提示\n\nthis describes the most basic version of the mvc architecture. there is also a common variant where there is a connection between view and controller. the controller in such cases provides the interconnection between the model and view components.\n\n\n# advantages and disadvantages of mvc\n\nmvc has become a sought-after pattern and has been widely used because of its benefits:\n\n * by separating into components, the flexibility, maintainability, and scalability of the application are increased.\n * you can test components separately from each other.\n * the components can be reused.\n * models can have multiple views.\n * mvc allows you to configure different levels of security for different components.\n\nand these are the disadvantages of the mvc pattern:\n\n * one should keep in mind that it is not suitable for small applications. it makes simple applications more complex.\n * mvc is also not suitable for high-performance applications. sometimes it's more efficient to go through several layers of architecture.\n\n提示\n\nmvc is not the only architectural pattern. this is worth bearing in mind if, for some reason, it is not suitable for the development of your application. there are several other patterns for similar needs: mvp(model-view-presenter), mvvm(model-view-viewmodel). the mvc, mvp, and mvvm patterns are often called the mv* family.\n\n\n# conclusion\n\nmvc is an architectural pattern that separates the user interface from business logic and business logic from data access logic. it has its pros and cons, and many implementations and interpretations. it's interesting to know that this pattern was originally used for desktop graphical user interfaces. currently, mvc is used in the development of web applications and mobile applications. therefore, its knowledge will be handy for you in the future.",charsets:{cjk:!0},lastUpdated:"2022/10/12, 17:01:25",lastUpdatedTimestamp:1665565285e3},{title:"Theory：REST",frontmatter:{title:"Theory：REST",date:"2022-07-21T15:17:45.000Z",permalink:"/pages/1ce665/",tags:["Web","Code style","REST"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/09.Web/77.Theory%EF%BC%9AREST.html",relativePath:"01.Java/01.Hyperskill - Java/09.Web/77.Theory：REST.md",key:"v-dd2b4e64",path:"/pages/1ce665/",headers:[{level:2,title:"Short history",slug:"short-history",normalizedTitle:"short history",charIndex:551},{level:2,title:"Six REST principles",slug:"six-rest-principles",normalizedTitle:"six rest principles",charIndex:946},{level:2,title:"HTTP methods for RESTful services",slug:"http-methods-for-restful-services",normalizedTitle:"http methods for restful services",charIndex:2193},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:3997}],headersStr:"Short history Six REST principles HTTP methods for RESTful services Conclusion",content:'REST (Representational State Transfer) is a fairly common way of interaction between client applications and services on the Internet. It is a set of restrictions considered when creating applications and web services. This architectural style was developed to help easily build convenient web services. A service written with regard to REST rules is called RESTful.\n\n注意\n\nREST is NOT a protocol or a standard. REST works on top of HTTP and is one of the possible ways to use HTTP. It is not a standard, but rather a set of useful recommendations.\n\n\n# Short history\n\nIn 2000, Roy Fielding publishes his doctoral thesis on "Architectural Styles and Network Architecture Design". In this paper, he proposes the idea that if a system meets certain six conditions, it becomes more convenient to use. He called this concept REST.\n\nWith this idea, Roy became a revolutionary for his time. Let\'s look at these conditions and see what they are about.\n\n\n# Six REST principles\n\nAbiding by the following six important principles guarantees that you write a RESTful service:\n\n 1. Client-server interaction model. By separating the user interface from the data warehouse, we improve and simplify application operation.\n 2. Stateless. Each request from a client to a server must contain all necessary information and cannot rely on any state stored on the server side. According to REST, the service does not store the results of the previous operation. Simply put, it works according to the "Asked, answered, forgotten" concept.\n 3. Cacheable. A request-response pair can be marked as cached and stored on the user side. It is possible to draw an analogy to web page caching: if a page was downloaded once, it can be accessed without addressing the server again.\n 4. Uniform interface. REST architecture specifies that any REST service must be understandable without its developer.\n 5. Layered system. A client cannot just tell whether it is connected directly to the end server or an intermediary along the way.\n 6. Code on demand [Optional]. On request, the service must give executable code in the form of an applet or script to be executed on the client\'s side. In practice, it is very seldom used.\n\n\n# HTTP methods for RESTful services\n\nIn the REST concept, interaction with resources is performed by calling the URL of the resource and four basic HTTP methods: GET, POST, PUT, DELETE. Let\'s consider in detail in which situations they are used.\n\n * POST is used to create new resources. If the resource is successfully created, the HTTP code 201 (Created) is returned, and also the address of the created resource is passed in the header Location.\n * GET is used to retrieve or read the resource. If the GET method is successful and does not contain address errors, it returns an XML or JSON representation of the resource in combination with an HTTP 200 (OK) status code. In case of errors, the code 404 (NOT FOUND) or 400 (BAD REQUEST) is usually returned.\n * PUT method either creates a resource by the specified ID or updates an existing one. If the update is successful, the code is 200 (OK); 204 (No Content) is returned if no content in the response body has been transmitted.\n * DELETE method is used to remove a resource identified by a specific URI (ID). If the deletion is successful, 200 (OK) HTTP code is returned, together with the response body containing the data of the remote resource. It is also possible to use HTTP code 204 (NO CONTENT) without the response body.\n\nSuppose we have a hypothetical book web service that uses the described methods to manage books as a resource. Each book stored in the service has its own numeric identifier. Then:\n\n * POST https://example.com/books/ adds a new book\n * GET https://example.com/books/1 gets an existing book\n * PUT https://example.com/books/1 creates or updates a book by the given ID\n * DELETE https://example.com/books/1 deletes an existing book by the given ID\n\nThis is what working with a typical RESTful web service looks like.\n\n\n# Conclusion\n\nREST is a rich yet easy concept. It is one of the most common ways of organizing client/server connections. Using its six basic principles could make your work easier and will help you avoid common problems of web service building. If you want more information and clarification, check out some external resources that may help you.',normalizedContent:'rest (representational state transfer) is a fairly common way of interaction between client applications and services on the internet. it is a set of restrictions considered when creating applications and web services. this architectural style was developed to help easily build convenient web services. a service written with regard to rest rules is called restful.\n\n注意\n\nrest is not a protocol or a standard. rest works on top of http and is one of the possible ways to use http. it is not a standard, but rather a set of useful recommendations.\n\n\n# short history\n\nin 2000, roy fielding publishes his doctoral thesis on "architectural styles and network architecture design". in this paper, he proposes the idea that if a system meets certain six conditions, it becomes more convenient to use. he called this concept rest.\n\nwith this idea, roy became a revolutionary for his time. let\'s look at these conditions and see what they are about.\n\n\n# six rest principles\n\nabiding by the following six important principles guarantees that you write a restful service:\n\n 1. client-server interaction model. by separating the user interface from the data warehouse, we improve and simplify application operation.\n 2. stateless. each request from a client to a server must contain all necessary information and cannot rely on any state stored on the server side. according to rest, the service does not store the results of the previous operation. simply put, it works according to the "asked, answered, forgotten" concept.\n 3. cacheable. a request-response pair can be marked as cached and stored on the user side. it is possible to draw an analogy to web page caching: if a page was downloaded once, it can be accessed without addressing the server again.\n 4. uniform interface. rest architecture specifies that any rest service must be understandable without its developer.\n 5. layered system. a client cannot just tell whether it is connected directly to the end server or an intermediary along the way.\n 6. code on demand [optional]. on request, the service must give executable code in the form of an applet or script to be executed on the client\'s side. in practice, it is very seldom used.\n\n\n# http methods for restful services\n\nin the rest concept, interaction with resources is performed by calling the url of the resource and four basic http methods: get, post, put, delete. let\'s consider in detail in which situations they are used.\n\n * post is used to create new resources. if the resource is successfully created, the http code 201 (created) is returned, and also the address of the created resource is passed in the header location.\n * get is used to retrieve or read the resource. if the get method is successful and does not contain address errors, it returns an xml or json representation of the resource in combination with an http 200 (ok) status code. in case of errors, the code 404 (not found) or 400 (bad request) is usually returned.\n * put method either creates a resource by the specified id or updates an existing one. if the update is successful, the code is 200 (ok); 204 (no content) is returned if no content in the response body has been transmitted.\n * delete method is used to remove a resource identified by a specific uri (id). if the deletion is successful, 200 (ok) http code is returned, together with the response body containing the data of the remote resource. it is also possible to use http code 204 (no content) without the response body.\n\nsuppose we have a hypothetical book web service that uses the described methods to manage books as a resource. each book stored in the service has its own numeric identifier. then:\n\n * post https://example.com/books/ adds a new book\n * get https://example.com/books/1 gets an existing book\n * put https://example.com/books/1 creates or updates a book by the given id\n * delete https://example.com/books/1 deletes an existing book by the given id\n\nthis is what working with a typical restful web service looks like.\n\n\n# conclusion\n\nrest is a rich yet easy concept. it is one of the most common ways of organizing client/server connections. using its six basic principles could make your work easier and will help you avoid common problems of web service building. if you want more information and clarification, check out some external resources that may help you.',charsets:{cjk:!0},lastUpdated:"2022/10/12, 17:01:25",lastUpdatedTimestamp:1665565285e3},{title:"Theory：Introduction to Spring Web MVC",frontmatter:{title:"Theory：Introduction to Spring Web MVC",date:"2022-07-21T14:37:48.000Z",permalink:"/pages/3dd5e6/",tags:["Framework","MVC","Web","Spring boot"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/09.Web/76.Theory%EF%BC%9AIntroduction%20to%20Spring%20Web%20MVC.html",relativePath:"01.Java/01.Hyperskill - Java/09.Web/76.Theory：Introduction to Spring Web MVC.md",key:"v-72a7516a",path:"/pages/3dd5e6/",headers:[{level:2,title:"Dependency",slug:"dependency",normalizedTitle:"dependency",charIndex:1757},{level:2,title:"Web server",slug:"web-server",normalizedTitle:"web server",charIndex:2593},{level:2,title:"Log",slug:"log",normalizedTitle:"log",charIndex:3516},{level:2,title:"Web page",slug:"web-page",normalizedTitle:"web page",charIndex:5546},{level:2,title:"Configuration",slug:"configuration",normalizedTitle:"configuration",charIndex:7147},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:8144}],headersStr:"Dependency Web server Log Web page Configuration Conclusion",content:"Spring Web MVC, commonly known as Spring MVC, is one of the modules of the core Spring framework. Spring MVC is used to create websites and RESTful services. It provides ready components that simplify and speed up the development process.\n\nAs the name suggests, the Spring MVC framework follows the MVC (Model, View, Controller) pattern which helps to organize code by separating different parts of an application: input logic, UI logic, and business logic.\n\nApplications commonly created with Spring MVC can be described by the type of data they return:\n\n * HTML: application creates web pages that can be viewed via a web browser (client). This type of app fully uses the underlying MVC pattern. The model stores the application data. The view is responsible for rendering model data and generating HTML output. The controller processes user requests, builds an appropriate model, and passes it to the view for rendering.\n * JSON/XML: the application provides RESTful services that generate JSON or XML data. Various kinds of clients, including other services, can use this kind of data. The structure of this type of program is similar to the first type, but View is absent and Spring MVC is no longer responsible for it. Instead, JSON/XML data is returned and some other program (client) is responsible for rendering and visualizing the returned model data.\n\nThere are more types and formats that this framework can handle.\n\nIn this topic, you'll learn about the Spring Web MVC framework and we'll create a very simple web application that returns a \"Welcome!\" page. We'll start with the basics and won't be showing yet how MVC is implemented in Spring MVC. You'll learn that and other interesting features of this framework in the upcoming topics.\n\n\n# Dependency\n\nTo develop and run a Spring MVC web application in Spring Boot we need to include the following dependency in Spring Boot project.\n\nFor Gradle-based Spring Boot projects:\n\ndependencies {\n   // ...\n   implementation 'org.springframework.boot:spring-boot-starter-web'\n   // ...\n}\n\n\n1\n2\n3\n4\n5\n\n\nFor Maven-based Spring Boot projects:\n\n<dependency>\n    <groupId>org.springframework.bootgroupId>\n    <artifactId>spring-boot-starter-webartifactId>\ndependency>\n\n\n1\n2\n3\n4\n\n\nThis starter dependency is a combination of dependencies that are required to start writing web apps. It also provides auto-configuration, which means that after we've added the dependency we can start writing the application code. We can also override auto-configuration if we need to.\n\nOne of the included dependencies is an embedded server dependency.\n\n\n# Web server\n\nAs you probably know, the difference between a web application and a usual app is that a web app requires a web server — a special program that is used to run it.\n\nA server is called embedded when it is a part of an application and we don't need to install it separately. This is convenient because it allows us to package the whole application in one executable .jar file that we can move and run like a regular application.\n\n提示\n\nWe can also package an application in a .war file that doesn't contain a web server. Such an app should be deployed on an external server. In our projects, we'll only use the .jar format.\n\nThe default embedded server is Apache Tomcat — free, open-source, lightweight, and one of the most popular servers. It remains actively developed and kept up to date.\n\nNow that we know how to add Spring MVC to a project and what an embedded server means, let's create and run a web app.\n\n\n# Log\n\nLet's assume that we started a new Spring Boot project and just added a web dependency without any code.\n\n提示\n\nDon't forget that we can generate a basic Spring Boot project using Spring Initializr or special IDE. Here is a link describing how to generate project using IntelliJ IDEA. In this topic we use jar packaging.\n\nIf we run such an app it will start the built-in Tomcat server and we'll see some new log information related to Spring MVC in the console:\n\n\n\nLet's examine some of the log entries. The first line related to Spring MVC contains the following information:\n\n... Tomcat initialized with port(s): 8080 (http)\n\n\n1\n\n\nThe line shows that embedded Tomcat is starting on port 8080. This is the default port provided by auto-configuration. We will use this port in the upcoming steps and topics unless otherwise specified. It is followed by some additional initialization, and we see a line that contains the Apache Tomcat version:\n\n... Starting Servlet engine: [Apache Tomcat/9.0.45]\n\n\n1\n\n\nIn our case, the version is 9.0.45. This information is useful in some cases. After this, more initialization follows, and the last line related to Spring MVC contains the following information:\n\n... Tomcat started on port(s): 8080 (http) with context path ''\n\n\n1\n\n\nThe line indicates that the initialization was completed successfully and the Tomcat server is running. It also shows the default context path.\n\nThe context path is the prefix of a URL path at which we can access the application. It is also known as sub-path or sub-directory. As we can see, the default context path is empty. It means that the web app can be accessed from http://localhost:8080/ URL. Apps are often hosted somewhere other than the default context path. For example, a context path like blog means that the app can be accessed via a URL like http://localhost:8080/blog. A context path can also be nested: blog/v1.\n\nYou'll learn how to change the default port and context path in the upcoming sections — but first let's complete our app.\n\n\n# Web page\n\nTo complete the app, we'll create a simple HTML file in a folder responsible for static content, and then open it via a web browser. The location of the folder is /resources/static.\n\n提示\n\nNote If there is no static folder in the resources folder, we need to create it manually.\n\nThis is the folder in which we can place any static content (images, stylesheets, JavaScript, and so forth) that we want to serve to the browser. Initially, it's empty. If we place an HTML file there with the name index.html it will be available at the root URL.\n\nLet's create an index.html file with the following content:\n\nDOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Main</title>\n</head>\n<body>\n    <h1>Welcome!</h1>\n</body>\n</html>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nNow, if we run the application again and point our web browser to http://localhost:8080/, we'll see the following web page:\n\n\n\nAlso, we can access the file by its name: http://localhost:8080/index.html.\n\nWe can have multiple HTML files and access them by name as in the example above. Feel free to experiment with this. The page can look much more complex with CSS and JS.\n\n提示\n\nThis approach can be used to create simple web apps that return hardcoded pages. More complex programs require us to add at least some amount of code. For example, we may need to include some data from a database in a web page. To do that, we will need to write the code that fetches the data from a database and adds it to the page.\n\nAs mentioned earlier, we can change the default port and context path. Now, let's learn how to do that.\n\n\n# Configuration\n\nUsually, it's a good idea to prefer auto-configuration, but there are cases when we may want to have a custom context path or port, as well as change some other properties of the app. We can do that in the application.properties file.\n\nThis is how we can change the port:\n\nserver.port=9090\n\n\n1\n\n\n注意\n\nWhile writing a project, you may come across a situation when your program can't start and the log shows that the port is already in use. It means that some other program is already using the port on which you are trying to run your app. Changing the port should solve the problem.\n\nAnd here is how you can change the context path in Spring Boot 2.x:\n\nserver.servlet.context-path=/myapp\n\n\n1\n\n\nIf we change the port and context path and run the application again we'll see that the log in the console includes these changes:\n\n... Tomcat started on port(s): 9090 (http) with context path '/myapp'\n\n\n1\n\n\nFrom now on, a web app can be accessed from http://localhost:9090/myapp URL.\n\n\n# Conclusion\n\nHere's what we've learned in this topic:\n\n * Spring MVC is a framework used to create web apps. You can add it to a project by using the starter dependency we discussed.\n * An embedded server is an embedded component of a web app required to run it. The default server for Spring MVC is Apache Tomcat.\n * That default port is 8080 and the context path is empty.\n * You can change the default port and context path in the application.properties file.\n * If we place an index.html file in the /resources/static folder, it will be available at the root URL.\n * We can place multiple HTML files in /resources/static folder and access them by name.\n\nIn the upcoming topics, you'll learn more about Spring Web MVC, but before you continue learning new features of this framework, let's practice what we've just learned by solving some tasks!",normalizedContent:"spring web mvc, commonly known as spring mvc, is one of the modules of the core spring framework. spring mvc is used to create websites and restful services. it provides ready components that simplify and speed up the development process.\n\nas the name suggests, the spring mvc framework follows the mvc (model, view, controller) pattern which helps to organize code by separating different parts of an application: input logic, ui logic, and business logic.\n\napplications commonly created with spring mvc can be described by the type of data they return:\n\n * html: application creates web pages that can be viewed via a web browser (client). this type of app fully uses the underlying mvc pattern. the model stores the application data. the view is responsible for rendering model data and generating html output. the controller processes user requests, builds an appropriate model, and passes it to the view for rendering.\n * json/xml: the application provides restful services that generate json or xml data. various kinds of clients, including other services, can use this kind of data. the structure of this type of program is similar to the first type, but view is absent and spring mvc is no longer responsible for it. instead, json/xml data is returned and some other program (client) is responsible for rendering and visualizing the returned model data.\n\nthere are more types and formats that this framework can handle.\n\nin this topic, you'll learn about the spring web mvc framework and we'll create a very simple web application that returns a \"welcome!\" page. we'll start with the basics and won't be showing yet how mvc is implemented in spring mvc. you'll learn that and other interesting features of this framework in the upcoming topics.\n\n\n# dependency\n\nto develop and run a spring mvc web application in spring boot we need to include the following dependency in spring boot project.\n\nfor gradle-based spring boot projects:\n\ndependencies {\n   // ...\n   implementation 'org.springframework.boot:spring-boot-starter-web'\n   // ...\n}\n\n\n1\n2\n3\n4\n5\n\n\nfor maven-based spring boot projects:\n\n<dependency>\n    <groupid>org.springframework.bootgroupid>\n    <artifactid>spring-boot-starter-webartifactid>\ndependency>\n\n\n1\n2\n3\n4\n\n\nthis starter dependency is a combination of dependencies that are required to start writing web apps. it also provides auto-configuration, which means that after we've added the dependency we can start writing the application code. we can also override auto-configuration if we need to.\n\none of the included dependencies is an embedded server dependency.\n\n\n# web server\n\nas you probably know, the difference between a web application and a usual app is that a web app requires a web server — a special program that is used to run it.\n\na server is called embedded when it is a part of an application and we don't need to install it separately. this is convenient because it allows us to package the whole application in one executable .jar file that we can move and run like a regular application.\n\n提示\n\nwe can also package an application in a .war file that doesn't contain a web server. such an app should be deployed on an external server. in our projects, we'll only use the .jar format.\n\nthe default embedded server is apache tomcat — free, open-source, lightweight, and one of the most popular servers. it remains actively developed and kept up to date.\n\nnow that we know how to add spring mvc to a project and what an embedded server means, let's create and run a web app.\n\n\n# log\n\nlet's assume that we started a new spring boot project and just added a web dependency without any code.\n\n提示\n\ndon't forget that we can generate a basic spring boot project using spring initializr or special ide. here is a link describing how to generate project using intellij idea. in this topic we use jar packaging.\n\nif we run such an app it will start the built-in tomcat server and we'll see some new log information related to spring mvc in the console:\n\n\n\nlet's examine some of the log entries. the first line related to spring mvc contains the following information:\n\n... tomcat initialized with port(s): 8080 (http)\n\n\n1\n\n\nthe line shows that embedded tomcat is starting on port 8080. this is the default port provided by auto-configuration. we will use this port in the upcoming steps and topics unless otherwise specified. it is followed by some additional initialization, and we see a line that contains the apache tomcat version:\n\n... starting servlet engine: [apache tomcat/9.0.45]\n\n\n1\n\n\nin our case, the version is 9.0.45. this information is useful in some cases. after this, more initialization follows, and the last line related to spring mvc contains the following information:\n\n... tomcat started on port(s): 8080 (http) with context path ''\n\n\n1\n\n\nthe line indicates that the initialization was completed successfully and the tomcat server is running. it also shows the default context path.\n\nthe context path is the prefix of a url path at which we can access the application. it is also known as sub-path or sub-directory. as we can see, the default context path is empty. it means that the web app can be accessed from http://localhost:8080/ url. apps are often hosted somewhere other than the default context path. for example, a context path like blog means that the app can be accessed via a url like http://localhost:8080/blog. a context path can also be nested: blog/v1.\n\nyou'll learn how to change the default port and context path in the upcoming sections — but first let's complete our app.\n\n\n# web page\n\nto complete the app, we'll create a simple html file in a folder responsible for static content, and then open it via a web browser. the location of the folder is /resources/static.\n\n提示\n\nnote if there is no static folder in the resources folder, we need to create it manually.\n\nthis is the folder in which we can place any static content (images, stylesheets, javascript, and so forth) that we want to serve to the browser. initially, it's empty. if we place an html file there with the name index.html it will be available at the root url.\n\nlet's create an index.html file with the following content:\n\ndoctype html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"utf-8\">\n    <title>main</title>\n</head>\n<body>\n    <h1>welcome!</h1>\n</body>\n</html>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nnow, if we run the application again and point our web browser to http://localhost:8080/, we'll see the following web page:\n\n\n\nalso, we can access the file by its name: http://localhost:8080/index.html.\n\nwe can have multiple html files and access them by name as in the example above. feel free to experiment with this. the page can look much more complex with css and js.\n\n提示\n\nthis approach can be used to create simple web apps that return hardcoded pages. more complex programs require us to add at least some amount of code. for example, we may need to include some data from a database in a web page. to do that, we will need to write the code that fetches the data from a database and adds it to the page.\n\nas mentioned earlier, we can change the default port and context path. now, let's learn how to do that.\n\n\n# configuration\n\nusually, it's a good idea to prefer auto-configuration, but there are cases when we may want to have a custom context path or port, as well as change some other properties of the app. we can do that in the application.properties file.\n\nthis is how we can change the port:\n\nserver.port=9090\n\n\n1\n\n\n注意\n\nwhile writing a project, you may come across a situation when your program can't start and the log shows that the port is already in use. it means that some other program is already using the port on which you are trying to run your app. changing the port should solve the problem.\n\nand here is how you can change the context path in spring boot 2.x:\n\nserver.servlet.context-path=/myapp\n\n\n1\n\n\nif we change the port and context path and run the application again we'll see that the log in the console includes these changes:\n\n... tomcat started on port(s): 9090 (http) with context path '/myapp'\n\n\n1\n\n\nfrom now on, a web app can be accessed from http://localhost:9090/myapp url.\n\n\n# conclusion\n\nhere's what we've learned in this topic:\n\n * spring mvc is a framework used to create web apps. you can add it to a project by using the starter dependency we discussed.\n * an embedded server is an embedded component of a web app required to run it. the default server for spring mvc is apache tomcat.\n * that default port is 8080 and the context path is empty.\n * you can change the default port and context path in the application.properties file.\n * if we place an index.html file in the /resources/static folder, it will be available at the root url.\n * we can place multiple html files in /resources/static folder and access them by name.\n\nin the upcoming topics, you'll learn more about spring web mvc, but before you continue learning new features of this framework, let's practice what we've just learned by solving some tasks!",charsets:{cjk:!0},lastUpdated:"2022/10/12, 17:01:25",lastUpdatedTimestamp:1665565285e3},{title:"Theory：Postman",frontmatter:{title:"Theory：Postman",date:"2022-07-22T19:53:52.000Z",permalink:"/pages/eca1b0/",tags:["Tool Guide","REST","HTTP"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/09.Web/78.Theory%EF%BC%9APostman.html",relativePath:"01.Java/01.Hyperskill - Java/09.Web/78.Theory：Postman.md",key:"v-12969a92",path:"/pages/eca1b0/",headers:[{level:2,title:"Installation",slug:"installation",normalizedTitle:"installation",charIndex:490},{level:2,title:"GET requests",slug:"get-requests",normalizedTitle:"get requests",charIndex:1315},{level:2,title:"POST requests",slug:"post-requests",normalizedTitle:"post requests",charIndex:2333},{level:2,title:"Other requests",slug:"other-requests",normalizedTitle:"other requests",charIndex:3852},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:4316}],headersStr:"Installation GET requests POST requests Other requests Conclusion",content:"If you already know something about REST services but haven't quite used them yet, it's time to try! REST requests are simple HTTP requests, but it's not convenient to make them through a browser as you'd usually do with most of the web content. You need a client to create requests, and Postman is a good one to try out.\n\n提示\n\nWe will use endpoints of the free API server Reqres to make our example requests. It has the implementation of all basic HTTP methods: GET, POST, PUT, DELETE.\n\n\n# Installation\n\nPostman is a collaboration platform for API development. It has more functions than a simple API client, but all we need now is its ability to create requests to API endpoints.\n\nYou can get the application on Postman's official website. Once you download the executable file for Windows or an archive for Linux, unpack it if needed and run the app. You should see a page like this:\n\n\n\nUsing Postman is free, so you can use your email or Google account to sign in. This will help you share your workspace on several devices. The registration is not obligatory, so you can close this window for now and start using Postman anonymously.\n\n提示\n\nWe use Postman 7.15.0 for our illustrations here. The UI interface of your version may look slightly different, but the behavior of the application should be the same.\n\n\n# GET requests\n\nWe are almost ready to make the first request. For this example, we will use a free test API server. Reqres API has several endpoints; you can get their descriptions on the official site.\n\nPostman is similar to a browser: you have tabs for your requests. Let's open the first one. Just hit the plus tab, and Postman will show the full panel.\n\n\n\nTo create a simple GET request without query parameters, add the address of an endpoint of the service. In the image you can see that we use https://reqres.in/api/users/2 for this purpose. Then press the Send button*,* and you will see a nicely formatted response.\n\n\n\nIf you want to use any query parameters, you can add them as key-value pairs. Notice that we used endpoint https://reqres.in/api/users this time.\n\n\n\nQuery parameters and key-value pairs are interchangeable in the application, so you can use any method you want. Postman will fill the other one automatically.\n\nWe know how to get data from the server, but sometimes we need to send data with POST requests, so let's see how you can do it with Postman.\n\n\n# POST requests\n\nA useful feature of POST requests is that we can fill the body of it with sensitive data. If we send our login and password through query parameters, it's easy to read them for someone who sees the traffic from your computer, for example, your internet service provider. We will try our best with registration and authentication to the server through API requests, but do not use real data for it though.\n\nTo create a POST request, open a new tab as you did earlier. Reqres allows you to use only defined emails that you receive in the previous example at the endpoint https://reqres.in/api/register. Let's choose \"tracey.ramos@reqres.in\" as the user's login for the registration. Change the request type to POST, add key-value pairs with email and password (any password you want) in the body of the request, and press Send:\n\n\n\nWe receive a response with a token. Tokens are identifiers that you can use for authorization. We almost repeated our previous requests, but this time choosing different parameters.\n\nSometimes it's preferable to use JSON to send data to the server, for example, when we have nested fields. Though we don't need to make a nested structure to send a login request, we try to make a JSON to show out how it works.\n\nChoose a raw format for a body and JSON type for the data type. Then paste JSON with email and password to the editor and send the request to the server:\n\n\n\nAnd again we succeed and get a token.\n\n\n# Other requests\n\nPostman allows you to create HTTP requests with other methods: DELETE, PUT, PATCH... You should select the one you want as the request type:\n\n\n\nYou know enough to fill the fields by yourself and practice DELETE, PUT, PATCH with the Reqres API server.\n\n提示\n\nBefore using any API, do not forget to read the documentation first, or you can make some inappropriate changes on the server.\n\nNow you are ready to send a request to any server you want!\n\n\n# Conclusion\n\nPostman is a simple and useful tool for making API requests. It includes all basic requests like POST, GET, PUT, DELETE, etc. You can use it as an API testing tool to reliably check HTTP requests.",normalizedContent:"if you already know something about rest services but haven't quite used them yet, it's time to try! rest requests are simple http requests, but it's not convenient to make them through a browser as you'd usually do with most of the web content. you need a client to create requests, and postman is a good one to try out.\n\n提示\n\nwe will use endpoints of the free api server reqres to make our example requests. it has the implementation of all basic http methods: get, post, put, delete.\n\n\n# installation\n\npostman is a collaboration platform for api development. it has more functions than a simple api client, but all we need now is its ability to create requests to api endpoints.\n\nyou can get the application on postman's official website. once you download the executable file for windows or an archive for linux, unpack it if needed and run the app. you should see a page like this:\n\n\n\nusing postman is free, so you can use your email or google account to sign in. this will help you share your workspace on several devices. the registration is not obligatory, so you can close this window for now and start using postman anonymously.\n\n提示\n\nwe use postman 7.15.0 for our illustrations here. the ui interface of your version may look slightly different, but the behavior of the application should be the same.\n\n\n# get requests\n\nwe are almost ready to make the first request. for this example, we will use a free test api server. reqres api has several endpoints; you can get their descriptions on the official site.\n\npostman is similar to a browser: you have tabs for your requests. let's open the first one. just hit the plus tab, and postman will show the full panel.\n\n\n\nto create a simple get request without query parameters, add the address of an endpoint of the service. in the image you can see that we use https://reqres.in/api/users/2 for this purpose. then press the send button*,* and you will see a nicely formatted response.\n\n\n\nif you want to use any query parameters, you can add them as key-value pairs. notice that we used endpoint https://reqres.in/api/users this time.\n\n\n\nquery parameters and key-value pairs are interchangeable in the application, so you can use any method you want. postman will fill the other one automatically.\n\nwe know how to get data from the server, but sometimes we need to send data with post requests, so let's see how you can do it with postman.\n\n\n# post requests\n\na useful feature of post requests is that we can fill the body of it with sensitive data. if we send our login and password through query parameters, it's easy to read them for someone who sees the traffic from your computer, for example, your internet service provider. we will try our best with registration and authentication to the server through api requests, but do not use real data for it though.\n\nto create a post request, open a new tab as you did earlier. reqres allows you to use only defined emails that you receive in the previous example at the endpoint https://reqres.in/api/register. let's choose \"tracey.ramos@reqres.in\" as the user's login for the registration. change the request type to post, add key-value pairs with email and password (any password you want) in the body of the request, and press send:\n\n\n\nwe receive a response with a token. tokens are identifiers that you can use for authorization. we almost repeated our previous requests, but this time choosing different parameters.\n\nsometimes it's preferable to use json to send data to the server, for example, when we have nested fields. though we don't need to make a nested structure to send a login request, we try to make a json to show out how it works.\n\nchoose a raw format for a body and json type for the data type. then paste json with email and password to the editor and send the request to the server:\n\n\n\nand again we succeed and get a token.\n\n\n# other requests\n\npostman allows you to create http requests with other methods: delete, put, patch... you should select the one you want as the request type:\n\n\n\nyou know enough to fill the fields by yourself and practice delete, put, patch with the reqres api server.\n\n提示\n\nbefore using any api, do not forget to read the documentation first, or you can make some inappropriate changes on the server.\n\nnow you are ready to send a request to any server you want!\n\n\n# conclusion\n\npostman is a simple and useful tool for making api requests. it includes all basic requests like post, get, put, delete, etc. you can use it as an api testing tool to reliably check http requests.",charsets:{cjk:!0},lastUpdated:"2022/10/12, 17:01:25",lastUpdatedTimestamp:1665565285e3},{title:"Theory：Getting data from REST",frontmatter:{title:"Theory：Getting data from REST",date:"2022-08-01T09:30:55.000Z",permalink:"/pages/8b4d60/",tags:["REST","Spring boot"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/09.Web/79.Theory%EF%BC%9AGetting%20data%20from%20REST.html",relativePath:"01.Java/01.Hyperskill - Java/09.Web/79.Theory：Getting data from REST.md",key:"v-50c3ea8f",path:"/pages/8b4d60/",headers:[{level:2,title:"Rest Controller",slug:"rest-controller",normalizedTitle:"rest controller",charIndex:478},{level:2,title:"GET with Collections",slug:"get-with-collections",normalizedTitle:"get with collections",charIndex:2620},{level:2,title:"@PathVariable",slug:"pathvariable",normalizedTitle:"@pathvariable",charIndex:5390},{level:2,title:"Customizing the status code",slug:"customizing-the-status-code",normalizedTitle:"customizing the status code",charIndex:6659},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:7410}],headersStr:"Rest Controller GET with Collections @PathVariable Customizing the status code Conclusion",content:'Web-based applications communicate with a server via API — various methods that can be processed through HTTP (HyperText Transfer Protocol) requests. A controller is a part of the application that handles these API methods.\n\nIn this topic, we will take a look at how you can implement a basic REST-based controller for retrieving data through GET requests. The diagram below outlines the typical flow of a REST API when a GET request is sent to the server through Spring.\n\n\n\n\n# Rest Controller\n\nThe @RestController annotation usually sits on top of the class. It makes a class provide exact endpoints (a requested URL) to access the REST methods. The class along with class methods can tell which requests suit your case. All appropriate requests will be sent to the specific method of this class.\n\nSuppose that we want to create an API. When a user accesses a specific URL, they receive 1. To make it possible with Spring, we will implement two annotations. The first annotation is @RestController that is used to handle any REST requests sent by a user to the application. To create a @RestController, we should create a class and annotate it with @RestController:\n\nimport org.springframework.web.bind.annotation.*;\n\n@RestController\npublic class TaskController {\n\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\nThe @RestController annotation is a wrapper of two different annotations:\n\n 1. @Controller contains handler methods for various requests. Since we opt for @RestController, the methods are related to REST requests.\n 2. @ResponseBody contains an object of each handler method. They will be represented in JSON format. When we send a request, the response we receive is in JSON format. This will become clear when we start working with objects in our GET requests.\n\nWe can implement methods to handle various REST requests in @RestController. To implement a GET request, we can use a @GetMapping annotation. It indicates what URL path should be associated with a GET request. After that, we can implement a method that is executed when the GET request is received at that path. For example, we can create a GET request that returns 1 when http://localhost:8080/test is accessed:\n\n@RestController\npublic class TaskController {\n\n    @GetMapping("/test")\n    public int returnOne() {\n        return 1;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nWhen you send a request to http://localhost:8080/test, you will receive 1 in return.\n\n\n\nIn addition to Postman, it is also possible to send a GETrequest to the server through a browser. To do so, simply open the browser, and navigate to the same URL as Postman (in this example, http://localhost:8080/test).\n\n\n# GET with Collections\n\nA list is a good way to store data. Sometimes, we want to return a full list or a specific list index when a GET request is received. We can adjust our @GetMapping annotation to do so.\n\nWe need to create a simple object to store in our list. Call it Task. It will implement a basic constructor as well as getters and setters for each of the object properties:\n\npublic class Task {\n\n    private int id;\n    private String name;\n    private String description;\n    private boolean completed;\n\n    public Task() {}\n\n    public Task(int id, String name, String description, boolean completed) {\n        this.id = id;\n        this.name = name;\n        this.description = description;\n        this.completed = completed;\n    }\n\n    // getters and setters\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n注意\n\nIt is very important to implement getters and setters. If they are not implemented, Spring will not be able to display object contents correctly. Spring will try to return all data from our controller in JSON format or similar. To construct a representation of our object that can be read properly, Spring needs getters and setters to access the object properties.\n\nAfter that, we can implement a collection to store our tasks. We are going to use a list. When we work with Spring, we can end up facing a lot of GET requests at the same time. In this case, it would be a good idea to use an immutable collection to eliminate any thread-based issues. We also need to make sure that our collection can be used by our application:\n\n@RestController\npublic class TaskController {\n    private final List<Task> taskList = List.of(\n            new Task(1, "task1", "A first test task", false),\n            new Task(2, "task2", "A second test task", true)\n    );\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nIn the snippet above, we have created the Task list and populated it with sample tasks. You can start working with the object from a database query right away. After that, we need to create a @GetMapping function that can be used to retrieve data from the tasks collection.\n\n@RestController\npublic class TaskController {\n    private final List<Task> taskList = List.of(\n            new Task(1, "task1", "A first test task", false),\n            new Task(2, "task2", "A second test task", true)\n    );\n\n    @GetMapping("/tasks")\n    public List<Task> getTasks() {\n        return taskList;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nNow, when we make a request to http://localhost:8080/tasks/, we will see all tasks that have been added earlier:\n\n\n\n提示\n\nIn addition to a List, it is also possible to return other types of collections from a RestController. As in case of a list, a Set is converted to a JSON array. However, a Map is converted to a JSON key-value structure.\n\n\n# @PathVariable\n\nWe may want to modify the code above so that users could enter an ID to specify which task they would like to retrieve. To do this, we will need to add a @PathVariable annotation to @GetMapping. The code below shows how we can add an ID to our getTask function:\n\n@RestController\npublic class TaskController {\n    private final List<Task> taskList = List.of(\n        new Task(1, "task1", "A first test task", false),\n        new Task(2, "task2", "A second test task", true)\n    );\n\n    @GetMapping("/tasks/{id}")\n    public Task getTask(@PathVariable int id) {\n        return taskList.get(id - 1); // list indices start from 0\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nWe added {id} to the @GetMapping annotation to tell Spring that we expect the id parameter. We can place the id variable as @PathVariable in the arguments of our getTask method. It indicates to Spring how to map the parameter provided in @GetMapping to the function. After that, the function will return only one element rather than the whole collection. A request to http://localhost:8080/tasks/1 gives us the first task in the list:\n\n\n\nHowever, if we provide an invalid id, the get method will throw an exception and we will receive a 500 error, similar to what is pictured below:\n\n\n\n\n# Customizing the status code\n\nBy default, a method annotated with @GetMapping returns the status code 200 OK in the response if a request has been processed successfully and the status code 500 if there is an uncaught exception. However, we can change this default status code by returning an object of the ResponseEntity<T> class as the result.\n\nThere is an example below when we return 202 ACCEPTED instead of 200 OK.\n\n@GetMapping("/tasks/{id}")\npublic ResponseEntity<Task> getTasks(@PathVariable int id) {\n    return new ResponseEntity<>(taskList.get(id - 1), HttpStatus.ACCEPTED);\n}\n\n\n1\n2\n3\n4\n\n\nActually, the status code 202 ACCEPTED is not the best example for this case, but it clearly demonstrates the possibility to change the status code.\n\n\n# Conclusion\n\nA controller is the first component that meets and greets a web request. In this topic, we have covered how to define a GET method in a @RestController annotated class to receive data from a web application. This request type is common in APIs and is often required to return sets or single elements.\n\nOn the one hand, web-app developers need to keep the handlers short and clear as it helps to find the right handler and create a correct request quickly. On the other hand, web apps are clients for other web apps. It means that they can call controllers of other applications. That\'s why you also need to know foreign handlers to figure out what requests they can handle.',normalizedContent:'web-based applications communicate with a server via api — various methods that can be processed through http (hypertext transfer protocol) requests. a controller is a part of the application that handles these api methods.\n\nin this topic, we will take a look at how you can implement a basic rest-based controller for retrieving data through get requests. the diagram below outlines the typical flow of a rest api when a get request is sent to the server through spring.\n\n\n\n\n# rest controller\n\nthe @restcontroller annotation usually sits on top of the class. it makes a class provide exact endpoints (a requested url) to access the rest methods. the class along with class methods can tell which requests suit your case. all appropriate requests will be sent to the specific method of this class.\n\nsuppose that we want to create an api. when a user accesses a specific url, they receive 1. to make it possible with spring, we will implement two annotations. the first annotation is @restcontroller that is used to handle any rest requests sent by a user to the application. to create a @restcontroller, we should create a class and annotate it with @restcontroller:\n\nimport org.springframework.web.bind.annotation.*;\n\n@restcontroller\npublic class taskcontroller {\n\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\nthe @restcontroller annotation is a wrapper of two different annotations:\n\n 1. @controller contains handler methods for various requests. since we opt for @restcontroller, the methods are related to rest requests.\n 2. @responsebody contains an object of each handler method. they will be represented in json format. when we send a request, the response we receive is in json format. this will become clear when we start working with objects in our get requests.\n\nwe can implement methods to handle various rest requests in @restcontroller. to implement a get request, we can use a @getmapping annotation. it indicates what url path should be associated with a get request. after that, we can implement a method that is executed when the get request is received at that path. for example, we can create a get request that returns 1 when http://localhost:8080/test is accessed:\n\n@restcontroller\npublic class taskcontroller {\n\n    @getmapping("/test")\n    public int returnone() {\n        return 1;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nwhen you send a request to http://localhost:8080/test, you will receive 1 in return.\n\n\n\nin addition to postman, it is also possible to send a getrequest to the server through a browser. to do so, simply open the browser, and navigate to the same url as postman (in this example, http://localhost:8080/test).\n\n\n# get with collections\n\na list is a good way to store data. sometimes, we want to return a full list or a specific list index when a get request is received. we can adjust our @getmapping annotation to do so.\n\nwe need to create a simple object to store in our list. call it task. it will implement a basic constructor as well as getters and setters for each of the object properties:\n\npublic class task {\n\n    private int id;\n    private string name;\n    private string description;\n    private boolean completed;\n\n    public task() {}\n\n    public task(int id, string name, string description, boolean completed) {\n        this.id = id;\n        this.name = name;\n        this.description = description;\n        this.completed = completed;\n    }\n\n    // getters and setters\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n注意\n\nit is very important to implement getters and setters. if they are not implemented, spring will not be able to display object contents correctly. spring will try to return all data from our controller in json format or similar. to construct a representation of our object that can be read properly, spring needs getters and setters to access the object properties.\n\nafter that, we can implement a collection to store our tasks. we are going to use a list. when we work with spring, we can end up facing a lot of get requests at the same time. in this case, it would be a good idea to use an immutable collection to eliminate any thread-based issues. we also need to make sure that our collection can be used by our application:\n\n@restcontroller\npublic class taskcontroller {\n    private final list<task> tasklist = list.of(\n            new task(1, "task1", "a first test task", false),\n            new task(2, "task2", "a second test task", true)\n    );\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nin the snippet above, we have created the task list and populated it with sample tasks. you can start working with the object from a database query right away. after that, we need to create a @getmapping function that can be used to retrieve data from the tasks collection.\n\n@restcontroller\npublic class taskcontroller {\n    private final list<task> tasklist = list.of(\n            new task(1, "task1", "a first test task", false),\n            new task(2, "task2", "a second test task", true)\n    );\n\n    @getmapping("/tasks")\n    public list<task> gettasks() {\n        return tasklist;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nnow, when we make a request to http://localhost:8080/tasks/, we will see all tasks that have been added earlier:\n\n\n\n提示\n\nin addition to a list, it is also possible to return other types of collections from a restcontroller. as in case of a list, a set is converted to a json array. however, a map is converted to a json key-value structure.\n\n\n# @pathvariable\n\nwe may want to modify the code above so that users could enter an id to specify which task they would like to retrieve. to do this, we will need to add a @pathvariable annotation to @getmapping. the code below shows how we can add an id to our gettask function:\n\n@restcontroller\npublic class taskcontroller {\n    private final list<task> tasklist = list.of(\n        new task(1, "task1", "a first test task", false),\n        new task(2, "task2", "a second test task", true)\n    );\n\n    @getmapping("/tasks/{id}")\n    public task gettask(@pathvariable int id) {\n        return tasklist.get(id - 1); // list indices start from 0\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nwe added {id} to the @getmapping annotation to tell spring that we expect the id parameter. we can place the id variable as @pathvariable in the arguments of our gettask method. it indicates to spring how to map the parameter provided in @getmapping to the function. after that, the function will return only one element rather than the whole collection. a request to http://localhost:8080/tasks/1 gives us the first task in the list:\n\n\n\nhowever, if we provide an invalid id, the get method will throw an exception and we will receive a 500 error, similar to what is pictured below:\n\n\n\n\n# customizing the status code\n\nby default, a method annotated with @getmapping returns the status code 200 ok in the response if a request has been processed successfully and the status code 500 if there is an uncaught exception. however, we can change this default status code by returning an object of the responseentity<t> class as the result.\n\nthere is an example below when we return 202 accepted instead of 200 ok.\n\n@getmapping("/tasks/{id}")\npublic responseentity<task> gettasks(@pathvariable int id) {\n    return new responseentity<>(tasklist.get(id - 1), httpstatus.accepted);\n}\n\n\n1\n2\n3\n4\n\n\nactually, the status code 202 accepted is not the best example for this case, but it clearly demonstrates the possibility to change the status code.\n\n\n# conclusion\n\na controller is the first component that meets and greets a web request. in this topic, we have covered how to define a get method in a @restcontroller annotated class to receive data from a web application. this request type is common in apis and is often required to return sets or single elements.\n\non the one hand, web-app developers need to keep the handlers short and clear as it helps to find the right handler and create a correct request quickly. on the other hand, web apps are clients for other web apps. it means that they can call controllers of other applications. that\'s why you also need to know foreign handlers to figure out what requests they can handle.',charsets:{cjk:!0},lastUpdated:"2022/10/12, 17:01:25",lastUpdatedTimestamp:1665565285e3},{title:"Theory：Posting and deleting data via REST",frontmatter:{title:"Theory：Posting and deleting data via REST",date:"2022-08-01T09:44:21.000Z",permalink:"/pages/3e165c/",tags:["REST","Spring boot"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/09.Web/80.Theory%EF%BC%9APosting%20and%20deleting%20data%20via%20REST.html",relativePath:"01.Java/01.Hyperskill - Java/09.Web/80.Theory：Posting and deleting data via REST.md",key:"v-1a3113b2",path:"/pages/3e165c/",headers:[{level:2,title:"@PostMapping",slug:"postmapping",normalizedTitle:"@postmapping",charIndex:674},{level:2,title:"@DeleteMapping",slug:"deletemapping",normalizedTitle:"@deletemapping",charIndex:4463},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:7315}],headersStr:"@PostMapping @DeleteMapping Conclusion",content:'When users receive data from web applications, they may want to add new or delete the existing data. With POST requests users can add new information by sending values they want to upload. A DELETE request allows users to remove the existing data from an application. When users send POST or DELETE requests, they are processed by the @RestController. The controller takes the appropriate actions depending on the method. In this topic, we will learn how to implement POST and DELETE methods via Spring.\n\nWe will use the REST Resource Naming Guide throughout this topic; it governs standard naming conventions. Use this site if you want to learn more about API namings.\n\n\n# @PostMapping\n\nSuppose you want to create an application where users can add names and addresses of the people they know. To add a person to the address book, a user needs to send the data to the server, while the server needs to store it somewhere. To make it possible, implement @PostMapping in the @RestController.\n\n提示\n\nWe advise you to use a thread-safe object to work with data in @RestController. The controller can get multiple requests at the same time, and the requests are processed by different threads. If the object is not thread-safe, multiple requests can lead to data loss and other unexpected errors when data is processed with POST or DELETE requests\n\nIn our example, we want to store mappings from people to addresses, so use a Map object. We can use ConcurrentHashMap to implement a thread-safe Map in our application:\n\n@RestController\npublic class AddressController {\n    private ConcurrentMap<String, String> addressBook = new ConcurrentHashMap<>();\n}\n\n\n1\n2\n3\n4\n\n\nWith ConcurrentHashMap we can set up a @PostMapping that takes a person\'s name and address and adds them to the Map. Since the user wants to send data with a POST request, we need to use a @RequestParam to send the data with a POST request.\n\n@RequestParam is a variable provided by a user in the query parameters. It is used during handling of POST requests. @RequestParam can be provided in two ways:\n\n 1. In the query parameters section of a REST request. In Postman, it can be found in the Params section, labeled as Query Params;\n 2. In the URL path, in the following format: localhost:<port>/<ApiPath>?<Param>=<value>&<Param>=<value>.\n\nIn the examples below, the Spring port is set to 8080, so all POST and DELETE requests are made at localhost:8080.\n\nWhen we provide a parameter through the query parameters, we need to set a name and a value. The name of the parameter should match the name of the @RequestParam, and the value should be the same type as the @RequestParam variable. The following code is an example of how @RequestParam can be used with @PostMapping to add the data to the address book:\n\n@RestController\npublic class AddressController {\n    private ConcurrentMap<String, String> addressBook = new ConcurrentHashMap<>();\n    \n    @PostMapping("/addresses")\n    public void postAddress(@RequestParam String name, @RequestParam String address) {\n        addressBook.put(name, address);\n    }       \n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nIn this @PostMapping, we expect two @RequestParam with a request. The first is the name of the String type. The second is the address, also of the String type. When users send a POST request to the /addresses path, they provide two parameters in the request body. When the request is sent, the name and address are added to ConcurrentHashMap.\n\n\n\nTo test whether the POST was a success, you can implement a GET request that returns a requested address based on the provided name:\n\n@RestController\npublic class AddressController {\n    private ConcurrentMap<String, String> addressBook = new ConcurrentHashMap<>();\n    \n    @PostMapping("/addresses")\n    public void postAddress(@RequestParam String name, @RequestParam String address) {\n        addressBook.put(name, address);\n    }       \n    \n    @GetMapping("/addresses/{name}")\n    public String getAddress(@PathVariable String name) {\n        return addressBook.get(name);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\nIn the previous POST request, we have added Bob that is mapped to 123 Younge Street. Now, if we send a request to /addresses/Bob, we expect to get 123 Younge Street as shown below:\n\n\n\nBut what happens when a parameter is either missing or invalid? A user will receive 400 Bad Request as shown below:\n\n\n\nIf this error occurs, reexamine the parameters to make sure that they are correct.\n\n\n# @DeleteMapping\n\nApart from adding new data, sometimes users need to delete some data too. In our address book, we may want to delete a name if it is no longer required. In this situation, we can use @DeleteMapping to send a request to delete some portion of our data.\n\nUsing @RequestParam we can pass a parameter to the @DeleteMapping handler. The parameter that needs to be passed in our example is the name of the person we want to delete. Once the name has been provided, we can remove the value from the Map and return a message to indicate that it has been successfully deleted:\n\n@RestController\npublic class AddressController {\n    private ConcurrentMap<String, String> addressBook = new ConcurrentHashMap<>();\n\n    @DeleteMapping("/addresses")\n    public String removeAddress(@RequestParam String name) {\n        addressBook.remove(name);\n        return name + " removed from address book!";\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nTo verify that the mapping has been removed, we can send a GET to return the contents of the addressBook variable. Take a look at the snippet below. It shows the whole controller:\n\n@RestController\npublic class AddressController {\n    private ConcurrentMap<String, String> addressBook = new ConcurrentHashMap<>();\n    \n    @PostMapping("/addresses")\n    public void postAddress(@RequestParam String name, @RequestParam String address) {\n        addressBook.put(name, address);\n    }       \n    \n    @GetMapping("/addresses")\n    public ConcurrentMap<String, String> getAddressBook() {\n        return addressBook;\n    }\n    \n    @DeleteMapping("/addresses")\n    public String removeAddress(@RequestParam String name) {\n        addressBook.remove(name);\n        return name + " removed from address book!";\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\nOnce @DeleteMapping has been established, we only need to send a DELETE request to the /addresses URL with the address we want to delete in the query parameters. To test this, let\'s first populate our Map with data. To do this, we can send a few POST requests to the web application. Consider the following two POST requests:\n\n * localhost:8080/addresses?name=Bob&address=123 Younge Street\n * localhost:8080/addresses?name=Alice&address=200 Rideau Street\n\nThis will add two entries to the Map, the first is Bob living on 123 Younge Street. The second is Alice living on 200 Rideau Street. We can verify whether the entries were added with a GET request to /addresses.\n\nNow, suppose that we want to delete the entry associated with Bob. We need to send a DELETE request to the /addresses mapping, passing the name parameter with the Bob value.\n\n\n\nOnce the data has been removed, we can verify that the request has been completed successfully by sending another GET request for the whole Map. As a result, the value for Bob is removed from the Map:\n\n\n\n\n# Conclusion\n\nIn this topic, we have discussed how we can add and remove data with POST and DELETE requests. With @RequestParam annotation, it is possible to send data through the query parameters, rather than through the path as with @PathVariable. When we work with the stored data in a @RestController, it is important to remember that the application can process multiple requests at once. So, it is essential to implement thread-safe objects. They ensure that no thread-related data errors occur. When you work with @RequestParam, remember that the 400 Bad Request error will occur if parameters are missing or incorrect. Review the parameters if you happen to see this error. Make sure that none of them are incorrect or missing. This will help you with building complex but steady REST APIs that can handle user input.',normalizedContent:'when users receive data from web applications, they may want to add new or delete the existing data. with post requests users can add new information by sending values they want to upload. a delete request allows users to remove the existing data from an application. when users send post or delete requests, they are processed by the @restcontroller. the controller takes the appropriate actions depending on the method. in this topic, we will learn how to implement post and delete methods via spring.\n\nwe will use the rest resource naming guide throughout this topic; it governs standard naming conventions. use this site if you want to learn more about api namings.\n\n\n# @postmapping\n\nsuppose you want to create an application where users can add names and addresses of the people they know. to add a person to the address book, a user needs to send the data to the server, while the server needs to store it somewhere. to make it possible, implement @postmapping in the @restcontroller.\n\n提示\n\nwe advise you to use a thread-safe object to work with data in @restcontroller. the controller can get multiple requests at the same time, and the requests are processed by different threads. if the object is not thread-safe, multiple requests can lead to data loss and other unexpected errors when data is processed with post or delete requests\n\nin our example, we want to store mappings from people to addresses, so use a map object. we can use concurrenthashmap to implement a thread-safe map in our application:\n\n@restcontroller\npublic class addresscontroller {\n    private concurrentmap<string, string> addressbook = new concurrenthashmap<>();\n}\n\n\n1\n2\n3\n4\n\n\nwith concurrenthashmap we can set up a @postmapping that takes a person\'s name and address and adds them to the map. since the user wants to send data with a post request, we need to use a @requestparam to send the data with a post request.\n\n@requestparam is a variable provided by a user in the query parameters. it is used during handling of post requests. @requestparam can be provided in two ways:\n\n 1. in the query parameters section of a rest request. in postman, it can be found in the params section, labeled as query params;\n 2. in the url path, in the following format: localhost:<port>/<apipath>?<param>=<value>&<param>=<value>.\n\nin the examples below, the spring port is set to 8080, so all post and delete requests are made at localhost:8080.\n\nwhen we provide a parameter through the query parameters, we need to set a name and a value. the name of the parameter should match the name of the @requestparam, and the value should be the same type as the @requestparam variable. the following code is an example of how @requestparam can be used with @postmapping to add the data to the address book:\n\n@restcontroller\npublic class addresscontroller {\n    private concurrentmap<string, string> addressbook = new concurrenthashmap<>();\n    \n    @postmapping("/addresses")\n    public void postaddress(@requestparam string name, @requestparam string address) {\n        addressbook.put(name, address);\n    }       \n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nin this @postmapping, we expect two @requestparam with a request. the first is the name of the string type. the second is the address, also of the string type. when users send a post request to the /addresses path, they provide two parameters in the request body. when the request is sent, the name and address are added to concurrenthashmap.\n\n\n\nto test whether the post was a success, you can implement a get request that returns a requested address based on the provided name:\n\n@restcontroller\npublic class addresscontroller {\n    private concurrentmap<string, string> addressbook = new concurrenthashmap<>();\n    \n    @postmapping("/addresses")\n    public void postaddress(@requestparam string name, @requestparam string address) {\n        addressbook.put(name, address);\n    }       \n    \n    @getmapping("/addresses/{name}")\n    public string getaddress(@pathvariable string name) {\n        return addressbook.get(name);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\nin the previous post request, we have added bob that is mapped to 123 younge street. now, if we send a request to /addresses/bob, we expect to get 123 younge street as shown below:\n\n\n\nbut what happens when a parameter is either missing or invalid? a user will receive 400 bad request as shown below:\n\n\n\nif this error occurs, reexamine the parameters to make sure that they are correct.\n\n\n# @deletemapping\n\napart from adding new data, sometimes users need to delete some data too. in our address book, we may want to delete a name if it is no longer required. in this situation, we can use @deletemapping to send a request to delete some portion of our data.\n\nusing @requestparam we can pass a parameter to the @deletemapping handler. the parameter that needs to be passed in our example is the name of the person we want to delete. once the name has been provided, we can remove the value from the map and return a message to indicate that it has been successfully deleted:\n\n@restcontroller\npublic class addresscontroller {\n    private concurrentmap<string, string> addressbook = new concurrenthashmap<>();\n\n    @deletemapping("/addresses")\n    public string removeaddress(@requestparam string name) {\n        addressbook.remove(name);\n        return name + " removed from address book!";\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nto verify that the mapping has been removed, we can send a get to return the contents of the addressbook variable. take a look at the snippet below. it shows the whole controller:\n\n@restcontroller\npublic class addresscontroller {\n    private concurrentmap<string, string> addressbook = new concurrenthashmap<>();\n    \n    @postmapping("/addresses")\n    public void postaddress(@requestparam string name, @requestparam string address) {\n        addressbook.put(name, address);\n    }       \n    \n    @getmapping("/addresses")\n    public concurrentmap<string, string> getaddressbook() {\n        return addressbook;\n    }\n    \n    @deletemapping("/addresses")\n    public string removeaddress(@requestparam string name) {\n        addressbook.remove(name);\n        return name + " removed from address book!";\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\nonce @deletemapping has been established, we only need to send a delete request to the /addresses url with the address we want to delete in the query parameters. to test this, let\'s first populate our map with data. to do this, we can send a few post requests to the web application. consider the following two post requests:\n\n * localhost:8080/addresses?name=bob&address=123 younge street\n * localhost:8080/addresses?name=alice&address=200 rideau street\n\nthis will add two entries to the map, the first is bob living on 123 younge street. the second is alice living on 200 rideau street. we can verify whether the entries were added with a get request to /addresses.\n\nnow, suppose that we want to delete the entry associated with bob. we need to send a delete request to the /addresses mapping, passing the name parameter with the bob value.\n\n\n\nonce the data has been removed, we can verify that the request has been completed successfully by sending another get request for the whole map. as a result, the value for bob is removed from the map:\n\n\n\n\n# conclusion\n\nin this topic, we have discussed how we can add and remove data with post and delete requests. with @requestparam annotation, it is possible to send data through the query parameters, rather than through the path as with @pathvariable. when we work with the stored data in a @restcontroller, it is important to remember that the application can process multiple requests at once. so, it is essential to implement thread-safe objects. they ensure that no thread-related data errors occur. when you work with @requestparam, remember that the 400 bad request error will occur if parameters are missing or incorrect. review the parameters if you happen to see this error. make sure that none of them are incorrect or missing. this will help you with building complex but steady rest apis that can handle user input.',charsets:{cjk:!0},lastUpdated:"2022/10/12, 17:01:25",lastUpdatedTimestamp:1665565285e3},{title:"Theory：Domains",frontmatter:{title:"Theory：Domains",date:"2022-08-01T10:20:12.000Z",permalink:"/pages/b3fe3b/",tags:["Web"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/09.Web/83.Theory%EF%BC%9ADomains.html",relativePath:"01.Java/01.Hyperskill - Java/09.Web/83.Theory：Domains.md",key:"v-794c889c",path:"/pages/b3fe3b/",headers:[{level:2,title:"Domain name structure",slug:"domain-name-structure",normalizedTitle:"domain name structure",charIndex:1052},{level:2,title:"Root domain",slug:"root-domain",normalizedTitle:"root domain",charIndex:1398},{level:2,title:"Top-level domain",slug:"top-level-domain",normalizedTitle:"top-level domain",charIndex:1641},{level:2,title:"Second-level domain",slug:"second-level-domain",normalizedTitle:"second-level domain",charIndex:2616},{level:2,title:"Third-level domain",slug:"third-level-domain",normalizedTitle:"third-level domain",charIndex:3078},{level:2,title:"Localhost",slug:"localhost",normalizedTitle:"localhost",charIndex:3725},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:4927}],headersStr:"Domain name structure Root domain Top-level domain Second-level domain Third-level domain Localhost Conclusion",content:"Imagine how inconvenient it would be to communicate if people addressed each other not by name but by a numerical value corresponding to their birthday or phone number. If there were no names, people would definitely try to come up with them.\n\nWhen a computer connects to the Internet, it is assigned a unique number called IP Address. Each web resource also has one. For example, let's look at the address 74.125.131.113. If you write it in the address bar, the browser will open the site of the search engine Google. Unless you have a phenomenal memory, it is way too difficult to remember long numeric values to visit several sites, which is why domain names were invented. It's much easier to write google.com instead of a long set of numbers. The domain name acts as a unique name on the Internet and is a more straightforward and more human-friendly way of recording IP addresses.\n\nAll information about domain names is stored in a distributed database of DNS (Domain Name System), which is a network of computers scattered around the world.\n\n\n# Domain name structure\n\nDomains are arranged hierarchically: they consist of levels. The hierarchical structure allows the browser to quickly find and open the site. By default, each domain consists of two levels, but there can be more levels (three, four, etc).\n\n\n\nLet's take a closer look at domains placed from the root to the third level.\n\n\n# Root domain\n\nThe root domain, or the top (zero) level domain, is marked with a dot. In common use, the dot is not displayed as part of the domain name.\n\n\n\nYou can skip the root domain because it does not interfere with access to the site.\n\n\n# Top-level domain\n\nThe top-level domains are divided into national domain names and public domains.\n\nThe first group defines the region of the site and its geographical location: .us for the United States and .eu for the European Union.\n\nThe second group does not reflect the geographical characteristics of the resource, but rather its affiliation to a particular field. For example, an information site will have an .info endpoint, a commercial site will have .com, and a non-profit site will have .org.\n\n\n\nThere are some more specific domains. The domain .net (from the network) was originally intended for network technology organizations. For example, Internet service providers. The domain .edu is used by the US-affiliated institutions of higher education.\n\n提示\n\nToday the domains .com, .org and .net are used with almost no restrictions. You can find any type of organization registered under these domain names. But the .edu domain remains very restricted in use.\n\n\n# Second-level domain\n\nThe second-level domain is a unique website address that people remember and use for surfing the Internet like google, facebook, uber, and others.\n\n\n\nThis domain name can be taken when registering with registrars on the Internet. It is worth remembering that you can use this resource only for a certain period of time, which is usually about a year. To use this part of the name, you have to annually renew the application for hosting.\n\n\n# Third-level domain\n\nThird-level names are available to register resources with second-level domain name companies. The owner of a third-level domain has the ability to create multiple resources at once on the site with a common domain name. For example, if the site is called google.com, the news blog will be news.google.com .\n\n\n\n提示\n\nNot all organizations use third-level domains since it's not the only way to organize the resources.\n\nWe will not consider deeper domain levels (4th, 5th, etc), but they can also exist on the Internet. We hope the presented information is enough for practice and the successful completion of the interviews.\n\n\n# Localhost\n\nYou may have the last question, how you can refer to your own computer in the network by name? The common alias for this purpose is the localhost. Localhost is the hostname that refers to the computer you're working on. Localhost is also a reserved top-level domain for DNS, but its only purpose is to access the current machine only.\n\n提示\n\nBesides localhost, you can set other aliases to access the current computer or even sites like Hyperskill in host files: on Unix at /etc/hosts and on Windows at C:\\Windows\\System32\\driver\\etc\\hosts. Beware, this information can be used by malware because it allows redirecting you from goodsite.com to evilsite.com by modifying your host files.\n\nAddresses from 127.0.0.0 to 127.255.255.255 are reserved for localhosts. In a network that consists of a single PC; meaning on your machine, localhost is located at the address 127.0.0.1. When you enter this address or a localhost into your browser's address bar, you will be automatically rerouted to your machine. The most common usage of this process is to run and test web services in a local environment. This allows developers to simulate an internet connection, maintaining security and speed.\n\n\n# Conclusion\n\nIn summary, domain names are kind of labels associated with a specific IP address and saved in distributed databases of DNS. Domain names consist of hierarchical levels, at least two. That way it is easier for a browser to find a specific website. Those two basic levels are a top-level domain like .eu or .com, and a second-level domain - an exclusive website name like google or uber. Also, don't forget that localhost in the network refers to the computer you're working on.",normalizedContent:"imagine how inconvenient it would be to communicate if people addressed each other not by name but by a numerical value corresponding to their birthday or phone number. if there were no names, people would definitely try to come up with them.\n\nwhen a computer connects to the internet, it is assigned a unique number called ip address. each web resource also has one. for example, let's look at the address 74.125.131.113. if you write it in the address bar, the browser will open the site of the search engine google. unless you have a phenomenal memory, it is way too difficult to remember long numeric values to visit several sites, which is why domain names were invented. it's much easier to write google.com instead of a long set of numbers. the domain name acts as a unique name on the internet and is a more straightforward and more human-friendly way of recording ip addresses.\n\nall information about domain names is stored in a distributed database of dns (domain name system), which is a network of computers scattered around the world.\n\n\n# domain name structure\n\ndomains are arranged hierarchically: they consist of levels. the hierarchical structure allows the browser to quickly find and open the site. by default, each domain consists of two levels, but there can be more levels (three, four, etc).\n\n\n\nlet's take a closer look at domains placed from the root to the third level.\n\n\n# root domain\n\nthe root domain, or the top (zero) level domain, is marked with a dot. in common use, the dot is not displayed as part of the domain name.\n\n\n\nyou can skip the root domain because it does not interfere with access to the site.\n\n\n# top-level domain\n\nthe top-level domains are divided into national domain names and public domains.\n\nthe first group defines the region of the site and its geographical location: .us for the united states and .eu for the european union.\n\nthe second group does not reflect the geographical characteristics of the resource, but rather its affiliation to a particular field. for example, an information site will have an .info endpoint, a commercial site will have .com, and a non-profit site will have .org.\n\n\n\nthere are some more specific domains. the domain .net (from the network) was originally intended for network technology organizations. for example, internet service providers. the domain .edu is used by the us-affiliated institutions of higher education.\n\n提示\n\ntoday the domains .com, .org and .net are used with almost no restrictions. you can find any type of organization registered under these domain names. but the .edu domain remains very restricted in use.\n\n\n# second-level domain\n\nthe second-level domain is a unique website address that people remember and use for surfing the internet like google, facebook, uber, and others.\n\n\n\nthis domain name can be taken when registering with registrars on the internet. it is worth remembering that you can use this resource only for a certain period of time, which is usually about a year. to use this part of the name, you have to annually renew the application for hosting.\n\n\n# third-level domain\n\nthird-level names are available to register resources with second-level domain name companies. the owner of a third-level domain has the ability to create multiple resources at once on the site with a common domain name. for example, if the site is called google.com, the news blog will be news.google.com .\n\n\n\n提示\n\nnot all organizations use third-level domains since it's not the only way to organize the resources.\n\nwe will not consider deeper domain levels (4th, 5th, etc), but they can also exist on the internet. we hope the presented information is enough for practice and the successful completion of the interviews.\n\n\n# localhost\n\nyou may have the last question, how you can refer to your own computer in the network by name? the common alias for this purpose is the localhost. localhost is the hostname that refers to the computer you're working on. localhost is also a reserved top-level domain for dns, but its only purpose is to access the current machine only.\n\n提示\n\nbesides localhost, you can set other aliases to access the current computer or even sites like hyperskill in host files: on unix at /etc/hosts and on windows at c:\\windows\\system32\\driver\\etc\\hosts. beware, this information can be used by malware because it allows redirecting you from goodsite.com to evilsite.com by modifying your host files.\n\naddresses from 127.0.0.0 to 127.255.255.255 are reserved for localhosts. in a network that consists of a single pc; meaning on your machine, localhost is located at the address 127.0.0.1. when you enter this address or a localhost into your browser's address bar, you will be automatically rerouted to your machine. the most common usage of this process is to run and test web services in a local environment. this allows developers to simulate an internet connection, maintaining security and speed.\n\n\n# conclusion\n\nin summary, domain names are kind of labels associated with a specific ip address and saved in distributed databases of dns. domain names consist of hierarchical levels, at least two. that way it is easier for a browser to find a specific website. those two basic levels are a top-level domain like .eu or .com, and a second-level domain - an exclusive website name like google or uber. also, don't forget that localhost in the network refers to the computer you're working on.",charsets:{cjk:!0},lastUpdated:"2022/10/12, 17:01:25",lastUpdatedTimestamp:1665565285e3},{title:"Theory：HTTP Basic Auth",frontmatter:{title:"Theory：HTTP Basic Auth",date:"2022-08-01T13:01:30.000Z",permalink:"/pages/b2c958/",tags:["Web"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/09.Web/84.Theory%EF%BC%9AHTTP%20Basic%20Auth.html",relativePath:"01.Java/01.Hyperskill - Java/09.Web/84.Theory：HTTP Basic Auth.md",key:"v-2f3f3a2c",path:"/pages/b2c958/",headers:[{level:2,title:"Benefits of authorization",slug:"benefits-of-authorization",normalizedTitle:"benefits of authorization",charIndex:409},{level:2,title:"Basic authorization in HTTP",slug:"basic-authorization-in-http",normalizedTitle:"basic authorization in http",charIndex:1159},{level:2,title:"Creating an HTTP header",slug:"creating-an-http-header",normalizedTitle:"creating an http header",charIndex:2892},{level:2,title:"Security and basic auth",slug:"security-and-basic-auth",normalizedTitle:"security and basic auth",charIndex:3989},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:4546}],headersStr:"Benefits of authorization Basic authorization in HTTP Creating an HTTP header Security and basic auth Conclusion",content:"Websites often require login and password to sign in. We've all had to enter this data, whether it is mail, some social network or a forum. After successfully entering login and password, a number of additional features become available, for example, full access to content, ability to correspond and leave comments.\n\nThe process of issuing rights to perform certain actions is called user authorization.\n\n\n# Benefits of authorization\n\nYes, authorization allows you to identify a visitor of your web page; however, at the same time it limits access rights for unauthorized users. Hence you might have some doubts: why put restrictions at all, isn't it easier to open full functionality of the site to all visitors? After all, it's a fact that people don't like unnecessary time-consuming procedures, even if registration and authorization take only a couple of minutes.\n\nWell, authorization actually has many benefits. It lets you flexibly manage your personal data, allows commercial websites to offer additional services for a fee and better protects your confidential information. Increased security is perhaps the greatest advantage of authorization.\n\n\n# Basic authorization in HTTP\n\nHTTP has a built-in mechanism for authorization. The easiest HTTP authorization scheme is \"Basic\". It relies on login and password. Let's see how it works.\n\n 1. When a user enters a URL in the browser's address bar, they send a request to access the desired resource.\n 2. If the resource is protected, the server requires authorization from the user. It responds to the client with the HTTP status code 401 (Unauthorized) and the header WWW-Authenticate. When the browser receives this code, it shows a pop-up window where the user must enter their login and password.\n 3. The user enters them, and the browser repeats the request to the same resource. Transmitting authorization data to the server is performed using the Authorization header, in which the encoded login and password are written.\n 4. After the web server receives the request with the specified header, it checks that login and password are correct. If both are entered correctly, the web server grants access to the resource. The response code is 200 (OK). If the data is incorrect, the response code is 403 (Forbidden), and the user will be informed about an error in the entry and that access to the desired information is denied.\n\nThe following picture shows the sequence of the authorization algorithm:\n\n\n\n提示\n\nThe Basic Auth usually implies two actions on the server. The first action is the authentication of a user. During authentication, we check the credentials to identify the user. The second step is authorization, after which the user receives access to some resources on the site. In this topic, we won't go into details on how to provide different forms of access but will instead take a look at authorization itself.\n\n\n# Creating an HTTP header\n\nUsually, adding a header with login and password to the request is done by the browser, but if you need to create your own library to work with HTTP for software compatibility with web services, you need to understand how this works under the hood.\n\nThe header syntax for basic authorization looks as follows:\n\nAuthorization: <type> <credentials>\n\n\n1\n\n\n<type> denotes the type of authorization. In this case, we are looking at the Basic type.\n\nIf the Basic authentication scheme is used, the <credentials> are constructed like this:\n\n * the username and the password are combined with a colon (student:ilovetostudy);\n * the resulting string is base64 encoded (c3R1ZGVudDppbG92ZXRvc3R1ZHk=).\n\nHere is a valid example of an authorization header:\n\nAuthorization: Basic c3R1ZGVudDppbG92ZXRvc3R1ZHk=\n\n\n1\n\n\nThe base64 encoding is not a secure representation of credentials since it does not mean encryption or hashing. An encoded string can be easily decoded into the original form.\n\nThere are sites that can help you generate the Authorization header for your credentials.\n\n\n# Security and basic auth\n\nIn the Basic auth scheme, a client must send login and password every time they try to access a protected resource. Sending a non-encrypted password can be too dangerous (base64 is not an encryption), so it is better to use secure HTTP (HTTPS) with it.\n\nThere are more convenient and secure authorization methods which help to avoid the frequent sending of login and password. Understanding the principles of HTTP authorization will help you quickly understand the essence of working with more complex schemes of authorization.\n\n\n# Conclusion\n\nBasic Auth scheme is a fundamental and fairly simple need for most current web services. And it is just the tip of the iceberg. There are other advanced and secure ways for user authorization. But, in order to understand them, you should first understand Basic HTTP authorization principles.",normalizedContent:"websites often require login and password to sign in. we've all had to enter this data, whether it is mail, some social network or a forum. after successfully entering login and password, a number of additional features become available, for example, full access to content, ability to correspond and leave comments.\n\nthe process of issuing rights to perform certain actions is called user authorization.\n\n\n# benefits of authorization\n\nyes, authorization allows you to identify a visitor of your web page; however, at the same time it limits access rights for unauthorized users. hence you might have some doubts: why put restrictions at all, isn't it easier to open full functionality of the site to all visitors? after all, it's a fact that people don't like unnecessary time-consuming procedures, even if registration and authorization take only a couple of minutes.\n\nwell, authorization actually has many benefits. it lets you flexibly manage your personal data, allows commercial websites to offer additional services for a fee and better protects your confidential information. increased security is perhaps the greatest advantage of authorization.\n\n\n# basic authorization in http\n\nhttp has a built-in mechanism for authorization. the easiest http authorization scheme is \"basic\". it relies on login and password. let's see how it works.\n\n 1. when a user enters a url in the browser's address bar, they send a request to access the desired resource.\n 2. if the resource is protected, the server requires authorization from the user. it responds to the client with the http status code 401 (unauthorized) and the header www-authenticate. when the browser receives this code, it shows a pop-up window where the user must enter their login and password.\n 3. the user enters them, and the browser repeats the request to the same resource. transmitting authorization data to the server is performed using the authorization header, in which the encoded login and password are written.\n 4. after the web server receives the request with the specified header, it checks that login and password are correct. if both are entered correctly, the web server grants access to the resource. the response code is 200 (ok). if the data is incorrect, the response code is 403 (forbidden), and the user will be informed about an error in the entry and that access to the desired information is denied.\n\nthe following picture shows the sequence of the authorization algorithm:\n\n\n\n提示\n\nthe basic auth usually implies two actions on the server. the first action is the authentication of a user. during authentication, we check the credentials to identify the user. the second step is authorization, after which the user receives access to some resources on the site. in this topic, we won't go into details on how to provide different forms of access but will instead take a look at authorization itself.\n\n\n# creating an http header\n\nusually, adding a header with login and password to the request is done by the browser, but if you need to create your own library to work with http for software compatibility with web services, you need to understand how this works under the hood.\n\nthe header syntax for basic authorization looks as follows:\n\nauthorization: <type> <credentials>\n\n\n1\n\n\n<type> denotes the type of authorization. in this case, we are looking at the basic type.\n\nif the basic authentication scheme is used, the <credentials> are constructed like this:\n\n * the username and the password are combined with a colon (student:ilovetostudy);\n * the resulting string is base64 encoded (c3r1zgvuddppbg92zxrvc3r1zhk=).\n\nhere is a valid example of an authorization header:\n\nauthorization: basic c3r1zgvuddppbg92zxrvc3r1zhk=\n\n\n1\n\n\nthe base64 encoding is not a secure representation of credentials since it does not mean encryption or hashing. an encoded string can be easily decoded into the original form.\n\nthere are sites that can help you generate the authorization header for your credentials.\n\n\n# security and basic auth\n\nin the basic auth scheme, a client must send login and password every time they try to access a protected resource. sending a non-encrypted password can be too dangerous (base64 is not an encryption), so it is better to use secure http (https) with it.\n\nthere are more convenient and secure authorization methods which help to avoid the frequent sending of login and password. understanding the principles of http authorization will help you quickly understand the essence of working with more complex schemes of authorization.\n\n\n# conclusion\n\nbasic auth scheme is a fundamental and fairly simple need for most current web services. and it is just the tip of the iceberg. there are other advanced and secure ways for user authorization. but, in order to understand them, you should first understand basic http authorization principles.",charsets:{cjk:!0},lastUpdated:"2022/10/12, 17:01:25",lastUpdatedTimestamp:1665565285e3},{title:"Theory：Handling requests with bodies",frontmatter:{title:"Theory：Handling requests with bodies",date:"2022-08-01T10:14:39.000Z",permalink:"/pages/84fe51/",tags:["REST","Spring boot"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/09.Web/82.Theory%EF%BC%9AHandling%20requests%20with%20bodies.html",relativePath:"01.Java/01.Hyperskill - Java/09.Web/82.Theory：Handling requests with bodies.md",key:"v-b729a7e2",path:"/pages/84fe51/",headers:[{level:2,title:"Sending an object to the server",slug:"sending-an-object-to-the-server",normalizedTitle:"sending an object to the server",charIndex:671},{level:2,title:"Sending multiple objects",slug:"sending-multiple-objects",normalizedTitle:"sending multiple objects",charIndex:3009},{level:2,title:"Additional data formats",slug:"additional-data-formats",normalizedTitle:"additional data formats",charIndex:3993},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:5100}],headersStr:"Sending an object to the server Sending multiple objects Additional data formats Conclusion",content:'When we want to pass information to a web application server, we usually opt for POST methods. We can actually send information of any type, even an unformatted raw string. But we tend to work with JSON, as it is one of the easiest formats to work with. JSON data can be easily converted to objects with Spring, so we can work with more complex data.\n\nWe will use an annotation called @RequestBody to accept JSON data via @RestController. This annotation can send data of a specific format, including JSON, in a request\'s body.\n\nWe will use the basic project. If you don\'t have this application, visit the Spring Initializr site and generate it with Gradle and Java.\n\n\n# Sending an object to the server\n\nThe @RequestBody annotation is used in @RestController to send data to a path through the body of the request. A request body can be used to send data in a variety of formats. By default, Spring expects data in JSON format, so we will start by looking at how JSON data can be sent using a @RequestBody annotation.\n\nFirst, we will create an object to represent the JSON data that will be sent to the application. In this example, we will create an application that works with user data, including the name, id, phone number, and status of the user\'s account. Our object can be set up as shown below:\n\npublic class UserInfo {\n\n    private int id;\n    private String name;\n    private String phone;\n    private boolean enabled;\n\n    // getters and setters\n\n    UserInfo() {}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\nNow, let\'s create a simple POST request that accepts a JSON representation of the UserInfo object. The POST request will return the user\'s account name and the status of the account:\n\n@RestController\npublic class UserInfoController {\n\n    @PostMapping("/user")\n    public String userStatus(@RequestBody UserInfo user) {\n        if (user.isEnabled()) {\n            return String.format("Hello! %s. Your account is enabled.", user.getName());\n\n        } else {\n            return String.format(\n                "Hello! Nice to see you, %s! Your account is disabled",\n                user.getName()\n            );\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\nWhen we generate our POST request to the /user path, we need to provide a query body that defines a valid UserInfo object. This data is provided so that each object property is defined as an entry to the JSON object. This means that the request should contain an id, name, phone, and status:\n\n\n\nWhen adding a body in Postman, you can choose the JSON format by setting the raw option and navigating to JSON in the dropdown menu. It sends the provided JSON data in the request body to the user object in our code. Spring can construct a UserInfo object with JSON properties and initialize it with getters and setters implemented in the code.\n\nWe can send more complex data to our application with @RequestBody. There are a few other formats we can utilize in the@RequestBody annotation. We will explore them in the next section.\n\n\n# Sending multiple objects\n\nIt is possible to send multiple JSON objects in a single request using a list of objects in our @RequestBody.To implement a list-based @RequestBody , we need to change the type from a single object to a list of objects:\n\n@RestController\npublic class UserInfoController {\n    \n    @PostMapping("/user")\n    public String userStatus(@RequestBody List<UserInfo> userList) {\n        return String.format("Added %d users", userList.size());\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nIn this example, our @RequestBody now accepts a list of UserInfo type. So the JSON we send to the server should now be a list of JSON objects. Use rectangular brackets [] to create a list of JSON objects. A list contains a sequence of one or more JSON objects, as shown below:\n\n\n\nAfter the request has been sent, the JSON array can be iterated, and each object is placed in the UserInfo list. In our example above, we output the number of objects that have been passed through the request.\n\n\n# Additional data formats\n\nIn addition to JSON arrays, it is also possible to use a different format. For example, we can use XML to pass objects through our @RequestBody annotation. To do this, we need to add consumes = MediaType.APPLICATION_XML_VALUE to the @PostMapping annotation:\n\n@RestController\npublic class UserInfoController {\n    \n    @PostMapping(value = "/user", consumes = MediaType.APPLICATION_XML_VALUE)\n    public String userStatus(@RequestBody UserInfo user) {\n        return String.format("Added User %s", user);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nUsing the consumes argument, it is possible to customize the data that is sent to the POST request. When the consumes argument is added to the mapping, we also need to label the path argument with value. This allows Spring to distinguish between the arguments. If a consumes argument is not provided, it will be JSON by default. There are many other MediaType values. For example, TEXT_PLAIN can be used for plain text, and TEXT_HTML can be used for HTML formats.\n\n提示\n\nA full list of available formats can be found in the official documentation.\n\n\n# Conclusion\n\nIn this topic, we have discussed a few ways to make @RestController handle requests with bodies:\n\n 1. Add a @RequestBody annotation to the parameter of the mapping;\n 2. Create a class to map a body to an object with getters and setters;\n 3. If we want to include a consumable that isn\'t JSON, add the consumes argument to mapping.\n\nAfter these steps, your method will be able to read a passed request body in any required format.',normalizedContent:'when we want to pass information to a web application server, we usually opt for post methods. we can actually send information of any type, even an unformatted raw string. but we tend to work with json, as it is one of the easiest formats to work with. json data can be easily converted to objects with spring, so we can work with more complex data.\n\nwe will use an annotation called @requestbody to accept json data via @restcontroller. this annotation can send data of a specific format, including json, in a request\'s body.\n\nwe will use the basic project. if you don\'t have this application, visit the spring initializr site and generate it with gradle and java.\n\n\n# sending an object to the server\n\nthe @requestbody annotation is used in @restcontroller to send data to a path through the body of the request. a request body can be used to send data in a variety of formats. by default, spring expects data in json format, so we will start by looking at how json data can be sent using a @requestbody annotation.\n\nfirst, we will create an object to represent the json data that will be sent to the application. in this example, we will create an application that works with user data, including the name, id, phone number, and status of the user\'s account. our object can be set up as shown below:\n\npublic class userinfo {\n\n    private int id;\n    private string name;\n    private string phone;\n    private boolean enabled;\n\n    // getters and setters\n\n    userinfo() {}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\nnow, let\'s create a simple post request that accepts a json representation of the userinfo object. the post request will return the user\'s account name and the status of the account:\n\n@restcontroller\npublic class userinfocontroller {\n\n    @postmapping("/user")\n    public string userstatus(@requestbody userinfo user) {\n        if (user.isenabled()) {\n            return string.format("hello! %s. your account is enabled.", user.getname());\n\n        } else {\n            return string.format(\n                "hello! nice to see you, %s! your account is disabled",\n                user.getname()\n            );\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\nwhen we generate our post request to the /user path, we need to provide a query body that defines a valid userinfo object. this data is provided so that each object property is defined as an entry to the json object. this means that the request should contain an id, name, phone, and status:\n\n\n\nwhen adding a body in postman, you can choose the json format by setting the raw option and navigating to json in the dropdown menu. it sends the provided json data in the request body to the user object in our code. spring can construct a userinfo object with json properties and initialize it with getters and setters implemented in the code.\n\nwe can send more complex data to our application with @requestbody. there are a few other formats we can utilize in the@requestbody annotation. we will explore them in the next section.\n\n\n# sending multiple objects\n\nit is possible to send multiple json objects in a single request using a list of objects in our @requestbody.to implement a list-based @requestbody , we need to change the type from a single object to a list of objects:\n\n@restcontroller\npublic class userinfocontroller {\n    \n    @postmapping("/user")\n    public string userstatus(@requestbody list<userinfo> userlist) {\n        return string.format("added %d users", userlist.size());\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nin this example, our @requestbody now accepts a list of userinfo type. so the json we send to the server should now be a list of json objects. use rectangular brackets [] to create a list of json objects. a list contains a sequence of one or more json objects, as shown below:\n\n\n\nafter the request has been sent, the json array can be iterated, and each object is placed in the userinfo list. in our example above, we output the number of objects that have been passed through the request.\n\n\n# additional data formats\n\nin addition to json arrays, it is also possible to use a different format. for example, we can use xml to pass objects through our @requestbody annotation. to do this, we need to add consumes = mediatype.application_xml_value to the @postmapping annotation:\n\n@restcontroller\npublic class userinfocontroller {\n    \n    @postmapping(value = "/user", consumes = mediatype.application_xml_value)\n    public string userstatus(@requestbody userinfo user) {\n        return string.format("added user %s", user);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nusing the consumes argument, it is possible to customize the data that is sent to the post request. when the consumes argument is added to the mapping, we also need to label the path argument with value. this allows spring to distinguish between the arguments. if a consumes argument is not provided, it will be json by default. there are many other mediatype values. for example, text_plain can be used for plain text, and text_html can be used for html formats.\n\n提示\n\na full list of available formats can be found in the official documentation.\n\n\n# conclusion\n\nin this topic, we have discussed a few ways to make @restcontroller handle requests with bodies:\n\n 1. add a @requestbody annotation to the parameter of the mapping;\n 2. create a class to map a body to an object with getters and setters;\n 3. if we want to include a consumable that isn\'t json, add the consumes argument to mapping.\n\nafter these steps, your method will be able to read a passed request body in any required format.',charsets:{cjk:!0},lastUpdated:"2022/10/12, 17:01:25",lastUpdatedTimestamp:1665565285e3},{title:"Theory：IP",frontmatter:{title:"Theory：IP",date:"2022-08-03T11:08:09.000Z",permalink:"/pages/74e198/",tags:["Web"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/09.Web/85.Theory%EF%BC%9AIP.html",relativePath:"01.Java/01.Hyperskill - Java/09.Web/85.Theory：IP.md",key:"v-6513cf24",path:"/pages/74e198/",headers:[{level:2,title:"IP and IP addresses",slug:"ip-and-ip-addresses",normalizedTitle:"ip and ip addresses",charIndex:516},{level:2,title:"IPv4",slug:"ipv4",normalizedTitle:"ipv4",charIndex:1744},{level:2,title:"IPv6",slug:"ipv6",normalizedTitle:"ipv6",charIndex:1753},{level:2,title:"Loopback addresses",slug:"loopback-addresses",normalizedTitle:"loopback addresses",charIndex:4237},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:5408}],headersStr:"IP and IP addresses IPv4 IPv6 Loopback addresses Conclusion",content:"You can connect to the Internet from any device: computer, laptop, tablet, smartphone, etc. This is possible because their software executes network protocols, i.e. sets of rules that dictate how devices exchange data across networks. One of these important protocols is IP.\n\nThis topic will give you an understanding of what this protocol is and why it is needed. You will also learn about IP versions, IP addresses, and what helps programmers check the speed of devices and test programs and web applications.\n\n\n# IP and IP addresses\n\nIt can be said that the Internet as we know it exists thanks to the IP, because it became the link between different computer networks around the world. IP (Internet Protocol) defines the addressing of information as it is transmitted over the network and ensures the organization of the transport of this information to specific destinations. It specifies the way, time, and place of its forwarding.\n\nIn order to correctly determine to which address deliver the information on the Internet, there is an IP address. When a computer connects to the Internet, it is assigned a unique number called an IP address.\n\nIt's not just computers that have IP addresses. Every site on the Internet has its own IP address. It is equivalent to the IP address of the server hosting the site. Knowing the IP addresses of the sites you are interested in, you can visit them by typing IP addresses into the address bar. True, it's quite inconvenient. People find it difficult to remember IP addresses because of their specific format, and even more difficult to associate these addresses with sites. That's why IP addresses of sites are assigned domain names like hyperskill.org.\n\nThere are two versions of the IP protocol: IPv4 and IPv6. An IP address on the Internet can be represented in one of the two formats depending on which of these two versions of the IP protocol is used.\n\n\n# IPv4\n\nWe will start with IPv4, as this is the most common version of the protocol on the Internet at the moment. Any address following this format consists of four numbers from 0 to 255 separated by dots. Here is an example of an IP address:\n\n132.245.4.216\n\n\n1\n\n\nThis is a human-readable version of an IP address. In computers, such an address is represented with 44 sequences of 88 bits that equal to 3232 bits in total. One sequence of 88 bits of information is usually called an octet. Here is the same example of an Internet address written in the binary format:\n\n\n\nIP addresses at IPv4 are short and relatively easy to remember, but there is one inconvenience with them. The number of IP addresses is very limited, and many of them are reserved for technical needs. As the IPv4 uses a 32-bit value for its Internet addresses, it means that the protocol can provide support for 2^{32}232 IP addresses in total that is equal to around 4.294.29 billion various addresses. Despite being quite large, even this value isn't enough to provide addresses for all the possible users in the near future.\n\n\n# IPv6\n\nFor all its simplicity and convenience, there is a major problem that prevents the continued use of IPv4 — the depletion of the address range. IPv6 was developed to solve this problem.\n\nThis version of the IP protocol uses 128128 bits to represent an address that allows for 2^{128}2128 different addresses. In this version, an address consists of eight groups of four hexadecimal digits separated by colons.\n\nHere is an example of an IPv6 address:\n\n0de2:041a:7d43:65ab:9a63:a63e:aa78:34c2\n\n\n1\n\n\nTo shorten an IPv6 address we can omit leading zeros. For example, the address 0000:0000:0000:0000:0000:0000:0000:0001 can be simplified to 0:0:0:0:0:0:0:1. After this procedure you can shorten the address again. To do this, select the longest row of consecutive hexadecimal zeros and replace it with two colons (::). Thus, 0:0:0:0:0:0:0:1 converts to ::1.\n\nDespite the fact that this new format allows storing an immense number of addresses, it has one significant drawback: this version isn't backward compatible with IPv4. It is still possible to start using IPv6 though, so if you decide to use this protocol within a network, you need to upgrade your infrastructure and all your devices to support this IPv6 version.\n\n\n# Loopback addresses\n\nThere are special IP addresses that point to the local computer, that is, the computer you are using right now. They are called loopback addresses. They are useful when you want to connect to a server on your computer.\n\nLoopback addresses are commonly used for testing purposes. They may be used for speed testing of devices, or to reduce the load on network resources. You can use loopback addresses to test your programs and web applications, to make sure that everything works as it should before you publish them on the Internet.\n\nThe most commonly used IP addresses to connect to a server on your local computer are 127.0.0.1 for IPv4 and ::1 for IPv6.\n\n提示\n\nInterestingly, no website on the Internet can have an IP address that starts with 127. That's because the first part of the address, 127, is reserved only for when you want to connect to your own computer.\n\n提示\n\nIn addition to loopback addresses, there are other reserved addresses that are useful to know. For example, addresses starting with 192.168 are reserved for local networks. Usually, the IP address of your router is 192.168.1.1. It is used to control the router's settings.\n\n\n# Conclusion\n\nSo, as you know now, IP is a protocol that defines the address of the information as it is transmitted over a network. It also arranges the transport of this information to its destinations. In this topic, you've learned about the two versions of this protocol, depending on the format of the IP address representation. You've also learned about loopback addresses which are used to connect to a server on your own computer. Now let's put this knowledge into practice.",normalizedContent:"you can connect to the internet from any device: computer, laptop, tablet, smartphone, etc. this is possible because their software executes network protocols, i.e. sets of rules that dictate how devices exchange data across networks. one of these important protocols is ip.\n\nthis topic will give you an understanding of what this protocol is and why it is needed. you will also learn about ip versions, ip addresses, and what helps programmers check the speed of devices and test programs and web applications.\n\n\n# ip and ip addresses\n\nit can be said that the internet as we know it exists thanks to the ip, because it became the link between different computer networks around the world. ip (internet protocol) defines the addressing of information as it is transmitted over the network and ensures the organization of the transport of this information to specific destinations. it specifies the way, time, and place of its forwarding.\n\nin order to correctly determine to which address deliver the information on the internet, there is an ip address. when a computer connects to the internet, it is assigned a unique number called an ip address.\n\nit's not just computers that have ip addresses. every site on the internet has its own ip address. it is equivalent to the ip address of the server hosting the site. knowing the ip addresses of the sites you are interested in, you can visit them by typing ip addresses into the address bar. true, it's quite inconvenient. people find it difficult to remember ip addresses because of their specific format, and even more difficult to associate these addresses with sites. that's why ip addresses of sites are assigned domain names like hyperskill.org.\n\nthere are two versions of the ip protocol: ipv4 and ipv6. an ip address on the internet can be represented in one of the two formats depending on which of these two versions of the ip protocol is used.\n\n\n# ipv4\n\nwe will start with ipv4, as this is the most common version of the protocol on the internet at the moment. any address following this format consists of four numbers from 0 to 255 separated by dots. here is an example of an ip address:\n\n132.245.4.216\n\n\n1\n\n\nthis is a human-readable version of an ip address. in computers, such an address is represented with 44 sequences of 88 bits that equal to 3232 bits in total. one sequence of 88 bits of information is usually called an octet. here is the same example of an internet address written in the binary format:\n\n\n\nip addresses at ipv4 are short and relatively easy to remember, but there is one inconvenience with them. the number of ip addresses is very limited, and many of them are reserved for technical needs. as the ipv4 uses a 32-bit value for its internet addresses, it means that the protocol can provide support for 2^{32}232 ip addresses in total that is equal to around 4.294.29 billion various addresses. despite being quite large, even this value isn't enough to provide addresses for all the possible users in the near future.\n\n\n# ipv6\n\nfor all its simplicity and convenience, there is a major problem that prevents the continued use of ipv4 — the depletion of the address range. ipv6 was developed to solve this problem.\n\nthis version of the ip protocol uses 128128 bits to represent an address that allows for 2^{128}2128 different addresses. in this version, an address consists of eight groups of four hexadecimal digits separated by colons.\n\nhere is an example of an ipv6 address:\n\n0de2:041a:7d43:65ab:9a63:a63e:aa78:34c2\n\n\n1\n\n\nto shorten an ipv6 address we can omit leading zeros. for example, the address 0000:0000:0000:0000:0000:0000:0000:0001 can be simplified to 0:0:0:0:0:0:0:1. after this procedure you can shorten the address again. to do this, select the longest row of consecutive hexadecimal zeros and replace it with two colons (::). thus, 0:0:0:0:0:0:0:1 converts to ::1.\n\ndespite the fact that this new format allows storing an immense number of addresses, it has one significant drawback: this version isn't backward compatible with ipv4. it is still possible to start using ipv6 though, so if you decide to use this protocol within a network, you need to upgrade your infrastructure and all your devices to support this ipv6 version.\n\n\n# loopback addresses\n\nthere are special ip addresses that point to the local computer, that is, the computer you are using right now. they are called loopback addresses. they are useful when you want to connect to a server on your computer.\n\nloopback addresses are commonly used for testing purposes. they may be used for speed testing of devices, or to reduce the load on network resources. you can use loopback addresses to test your programs and web applications, to make sure that everything works as it should before you publish them on the internet.\n\nthe most commonly used ip addresses to connect to a server on your local computer are 127.0.0.1 for ipv4 and ::1 for ipv6.\n\n提示\n\ninterestingly, no website on the internet can have an ip address that starts with 127. that's because the first part of the address, 127, is reserved only for when you want to connect to your own computer.\n\n提示\n\nin addition to loopback addresses, there are other reserved addresses that are useful to know. for example, addresses starting with 192.168 are reserved for local networks. usually, the ip address of your router is 192.168.1.1. it is used to control the router's settings.\n\n\n# conclusion\n\nso, as you know now, ip is a protocol that defines the address of the information as it is transmitted over a network. it also arranges the transport of this information to its destinations. in this topic, you've learned about the two versions of this protocol, depending on the format of the ip address representation. you've also learned about loopback addresses which are used to connect to a server on your own computer. now let's put this knowledge into practice.",charsets:{cjk:!0},lastUpdated:"2022/10/12, 17:01:25",lastUpdatedTimestamp:1665565285e3},{title:"Theory：OAuth",frontmatter:{title:"Theory：OAuth",date:"2022-10-20T14:20:08.000Z",permalink:"/pages/697cc8/",tags:[null]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/09.Web/87.Theory%EF%BC%9AOAuth.html",relativePath:"01.Java/01.Hyperskill - Java/09.Web/87.Theory：OAuth.md",key:"v-7fb24832",path:"/pages/697cc8/",headers:[{level:2,title:"OAuth roles",slug:"oauth-roles",normalizedTitle:"oauth roles",charIndex:842},{level:2,title:"Client types",slug:"client-types",normalizedTitle:"client types",charIndex:1985},{level:2,title:"Implementation schemes",slug:"implementation-schemes",normalizedTitle:"implementation schemes",charIndex:2686},{level:2,title:"Working with OAuth",slug:"working-with-oauth",normalizedTitle:"working with oauth",charIndex:4119},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:5594}],headersStr:"OAuth roles Client types Implementation schemes Working with OAuth Conclusion",content:"Imagine that you are a developer, you have a new application or a website, that will be used by other people. They will have to somehow go to your site or your application to do it. Besides, future users already have a whole bunch of accounts, passwords, and logins. It makes no sense to come up with another one for you. It will be much more convenient if users are able to access your application through the account they already have, like Google, Twitter, Facebook, or other services. All these services use the Open Authorization protocol OAuth to provide user information to third-party applications.\n\nIn this topic, we are going to take a closer look at this protocol. We will find out how it works, describe the roles it defines, and look at its implementation schemes that exist in the current version of the OAuth 2.0 protocol.\n\n\n# OAuth roles\n\n\n\nIn OAuth 2.0, the following four parties are involved:\n\n * The resource owner (the user) gives access to some portion of their account. In general, this may be any resource that has access restrictions. More specifically, this may be data like photos, documents, contacts, or services like posting a blog entry or transferring funds.\n * The resource server (the API) contains the user's information being accessed by the third-party application. It is to accept and validate access tokens and grant the access request in case the user allows it.\n * The authorization server (can be the same server as the API) issues a token to the client to access the protected resource after successful authorization by the resource owner.\n * The client (the application) is attempting to act on the user's behalf or access the user's resources. To do so, the client needs to obtain permission. There are two ways to do it; either by directing the user to the authorization server or by asserting permission directly.\n\nAmong the four parties involved, the client is of two different types and we will talk about them in the next section.\n\n\n# Client types\n\n\n\nThere are two types of clients: public and confidential. The former cannot maintain the secrecy of the client's secret while the latter can.\n\nAn example of a confidential client could be a web app, where no one but the administrator can get access to the server, and see the client's password.\n\nAs for the public client, it is usually a mobile phone application or a desktop application that has the client password embedded inside it. Such an application could get cracked, and this could reveal the password. The same is true for a JavaScript application running in the user's browser.\n\nOkay, now we know about roles. The next step is to talk about OAuth implementation schemes.\n\n\n# Implementation schemes\n\nThere are four types of implementation schemes:\n\n * Application flow means that the application uses its client's secret to obtain an access token. The user does not have to provide authorization at any stage. This type requires the client's secret security.\n * Implicit flow scheme means the application requests an access token from the gateway server. If the user grants permission, then an access token is provided. Then the user passes the access token to the application. This scheme type is only for public clients.\n * Password flow means the user provides the app with a username and password to access the user's data. After that, the client directly contacts the provider's API to request an access token. In this case, the application must be trusted not to store the username and password.\n * Access code flow means the user is authorized through a special form. In case of successful authorization, its code is provided to the client. The client sends the code to the provider's API and receives an access token in return.\n\nThe application flow is only for confidential clients and the implicit one is only for public clients. Password flow and access code flow can be implemented for both public and confidential clients. The only difference is that the client's secret will not be applied to the public client, but to the confidential client.\n\nLet's start working with the OAuth algorithm.\n\n\n# Working with OAuth\n\nLet's find out how OAuth is used. When you want to register, for instance, your application on a website, you, first of all, will need to receive permission for your app. This is done by using access_token which is the main entity of OAuth.\n\nThe access token works as the secret code that should be sent with an HTTP request to the API so that the service is sure that you have enough rights to get information from the API.\n\nBefore an application can receive an access_token, the user should confirm access to that application.\n\nLet’s see how it works:\n\n\n\n 1. A developer of an application wants to use an API, so they must go to the site of the corresponding API and register the application there to get a client_id and a client_secret.\n 2. After they have registered the application and received the client_id and client_secret, they must create an authorization link which will contain, in query parameters; the client_id, redirect_uri (where the user will be sent after confirmation; redirect_uri itself must be allowed in the settings of the application), response_type (what should be returned in case of success), and scopes (what rights the user must provide to their account; in our case, we won’t use scopes).\n 3. The user follows this link and authorizes access (clicks the “allow” button), and is redirected back to the developer’s specified redirect_uri with the response here.\n 4. The developer uses this response to get access_token.\n\n\n# Conclusion\n\nTo sum up\n\n * OAuth is the Open Authorization protocol that helps protect users' information.\n * There are four OAuth roles; resource owner, resource server, authorization server, and client.\n * There are two types of clients: confidential and public, depending on whether the application can maintain the secrecy of the client's secret or not.\n * There are four types of implementation schemes: application flow, password flow, access code flow, implicit flow.\n\nWe encourage you to do some independent research to get more information about OAuth!",normalizedContent:"imagine that you are a developer, you have a new application or a website, that will be used by other people. they will have to somehow go to your site or your application to do it. besides, future users already have a whole bunch of accounts, passwords, and logins. it makes no sense to come up with another one for you. it will be much more convenient if users are able to access your application through the account they already have, like google, twitter, facebook, or other services. all these services use the open authorization protocol oauth to provide user information to third-party applications.\n\nin this topic, we are going to take a closer look at this protocol. we will find out how it works, describe the roles it defines, and look at its implementation schemes that exist in the current version of the oauth 2.0 protocol.\n\n\n# oauth roles\n\n\n\nin oauth 2.0, the following four parties are involved:\n\n * the resource owner (the user) gives access to some portion of their account. in general, this may be any resource that has access restrictions. more specifically, this may be data like photos, documents, contacts, or services like posting a blog entry or transferring funds.\n * the resource server (the api) contains the user's information being accessed by the third-party application. it is to accept and validate access tokens and grant the access request in case the user allows it.\n * the authorization server (can be the same server as the api) issues a token to the client to access the protected resource after successful authorization by the resource owner.\n * the client (the application) is attempting to act on the user's behalf or access the user's resources. to do so, the client needs to obtain permission. there are two ways to do it; either by directing the user to the authorization server or by asserting permission directly.\n\namong the four parties involved, the client is of two different types and we will talk about them in the next section.\n\n\n# client types\n\n\n\nthere are two types of clients: public and confidential. the former cannot maintain the secrecy of the client's secret while the latter can.\n\nan example of a confidential client could be a web app, where no one but the administrator can get access to the server, and see the client's password.\n\nas for the public client, it is usually a mobile phone application or a desktop application that has the client password embedded inside it. such an application could get cracked, and this could reveal the password. the same is true for a javascript application running in the user's browser.\n\nokay, now we know about roles. the next step is to talk about oauth implementation schemes.\n\n\n# implementation schemes\n\nthere are four types of implementation schemes:\n\n * application flow means that the application uses its client's secret to obtain an access token. the user does not have to provide authorization at any stage. this type requires the client's secret security.\n * implicit flow scheme means the application requests an access token from the gateway server. if the user grants permission, then an access token is provided. then the user passes the access token to the application. this scheme type is only for public clients.\n * password flow means the user provides the app with a username and password to access the user's data. after that, the client directly contacts the provider's api to request an access token. in this case, the application must be trusted not to store the username and password.\n * access code flow means the user is authorized through a special form. in case of successful authorization, its code is provided to the client. the client sends the code to the provider's api and receives an access token in return.\n\nthe application flow is only for confidential clients and the implicit one is only for public clients. password flow and access code flow can be implemented for both public and confidential clients. the only difference is that the client's secret will not be applied to the public client, but to the confidential client.\n\nlet's start working with the oauth algorithm.\n\n\n# working with oauth\n\nlet's find out how oauth is used. when you want to register, for instance, your application on a website, you, first of all, will need to receive permission for your app. this is done by using access_token which is the main entity of oauth.\n\nthe access token works as the secret code that should be sent with an http request to the api so that the service is sure that you have enough rights to get information from the api.\n\nbefore an application can receive an access_token, the user should confirm access to that application.\n\nlet’s see how it works:\n\n\n\n 1. a developer of an application wants to use an api, so they must go to the site of the corresponding api and register the application there to get a client_id and a client_secret.\n 2. after they have registered the application and received the client_id and client_secret, they must create an authorization link which will contain, in query parameters; the client_id, redirect_uri (where the user will be sent after confirmation; redirect_uri itself must be allowed in the settings of the application), response_type (what should be returned in case of success), and scopes (what rights the user must provide to their account; in our case, we won’t use scopes).\n 3. the user follows this link and authorizes access (clicks the “allow” button), and is redirected back to the developer’s specified redirect_uri with the response here.\n 4. the developer uses this response to get access_token.\n\n\n# conclusion\n\nto sum up\n\n * oauth is the open authorization protocol that helps protect users' information.\n * there are four oauth roles; resource owner, resource server, authorization server, and client.\n * there are two types of clients: confidential and public, depending on whether the application can maintain the secrecy of the client's secret or not.\n * there are four types of implementation schemes: application flow, password flow, access code flow, implicit flow.\n\nwe encourage you to do some independent research to get more information about oauth!",charsets:{},lastUpdated:"2022/10/25, 17:57:56",lastUpdatedTimestamp:1666691876e3},{title:"Theory：Authentication and Authorization",frontmatter:{title:"Theory：Authentication and Authorization",date:"2022-10-19T13:20:39.000Z",permalink:"/pages/69864a/",tags:[null]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/09.Web/86.Theory%EF%BC%9AAuthentication%20and%20Authorization.html",relativePath:"01.Java/01.Hyperskill - Java/09.Web/86.Theory：Authentication and Authorization.md",key:"v-1c33fda0",path:"/pages/69864a/",headers:[{level:2,title:"What is authentication?",slug:"what-is-authentication",normalizedTitle:"what is authentication?",charIndex:281},{level:2,title:"What is authorization?",slug:"what-is-authorization",normalizedTitle:"what is authorization?",charIndex:2037},{level:2,title:"Authentication vs. authorization",slug:"authentication-vs-authorization",normalizedTitle:"authentication vs. authorization",charIndex:2933},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:4413}],headersStr:"What is authentication? What is authorization? Authentication vs. authorization Conclusion",content:"When working with data, it is important to think about protecting it to guard your privacy and avoid unauthorized access by intruders. The main tools that you can use for this are authorization and authentication. Let's take a closer look at what they are and how they work.\n\n\n\n\n# What is authentication?\n\nAuthentication is the first step in any security process. It stands for the act of validating that users are who they claim to be. Thus, the system will \"know\" who is going to work with it now. The main types of authentication are as follows:\n\n * First of all, it is a password. If a person enters the correct username and password, the system grants them access.\n * Secondly, there are one-time pins that grant access for only one session. If your bank account has a regular password that you never change, then to protect, for example, your account data, the bank may offer you one-time pins. This level of protection is more reliable than the first, but there is a chance that someone may intercept your one-time pin.\n * The third type is an authentication app. They work as follows: first, the system fills in a password and username and then generates a long one-time access code that changes every 30 seconds making it difficult to intercept.\n * The last one is biometrics. A user presents a fingerprint or eye scan to gain access to the system. The advantage of biometric identification systems is that the characteristics used in these systems are an integral part of the personality so that it is impossible to lose, transfer, or forget them.\n\nAuthentication is always visible to the user so that they can pass it. Moreover, they can partially change it by replacing a password or their username, for example.\n\nOften all the data during the authentication moves through an ID token, which is a formatted character string that contains information such as ID, username, account login time, ID Token expiration date.\n\nNow you know what authentication is and what types of it exist. Let's move to the authorization then.\n\n\n# What is authorization?\n\nAuthorization often goes after authentication, when the system successfully \"recognized\" you. Authorization checks if you have the right to access the content or resources to which you have requested access. For example, the permission to download a particular file on a server or to provide individual users with administrative access to an application.\n\nOften all the data here moves through special access tokens, not ID ones as during authentication.\n\nAlso, unlike authentication, authorization is not visible to the user and there is no option to change it. That is because only the data owner can provide the permissions. For example, one can not view and change a document until the document owner sends a certain invitation that permits editing it.\n\nHaving figured out what authentication and authorization are, let's talk about their fundamental differences.\n\n\n# Authentication vs. authorization\n\nLet's use an analogy to outline their differences. Imagine someone asked their friend to pick up a parcel from the post office and take it to this person's house. The friend will need:\n\n * a key (authentication). The lock on the door will grant them access to the house, it is like a password.\n * permissions (authorization). Once inside, the friend has permission to access the living room and put the parcel on the table. But the friend may not have permission to go into the kitchen to take some food from the fridge.\n\nAuthentication and authorization work together in this example. The friend has the right to enter the house (authentication), and once there, there he gets access to certain areas of the house (authorization).\n\nLet's put all the differences we have described into one table:\n\n                                AUTHENTICATION                                          AUTHORIZATION\nWhat does it do?                Verifies credentials                                    Grants or denies permission\nHow does it work?               Through passwords, biometrics, one-time pins, or apps   Through settings maintained by security teams\nIs it visible to the user?      Yes                                                     No\nIs it changeable by the user?   Partially                                               No\nHow does data move?             Through ID tokens                                       Through access tokens\n\n\n# Conclusion\n\nTo sum up,\n\n * Authentication is the act of validating that users are who they claim to be;\n * The authentication types are password, one-time pins, authentication apps, and biometrics;\n * Authorization is the process of giving the user permission to access a specific resource or function.",normalizedContent:"when working with data, it is important to think about protecting it to guard your privacy and avoid unauthorized access by intruders. the main tools that you can use for this are authorization and authentication. let's take a closer look at what they are and how they work.\n\n\n\n\n# what is authentication?\n\nauthentication is the first step in any security process. it stands for the act of validating that users are who they claim to be. thus, the system will \"know\" who is going to work with it now. the main types of authentication are as follows:\n\n * first of all, it is a password. if a person enters the correct username and password, the system grants them access.\n * secondly, there are one-time pins that grant access for only one session. if your bank account has a regular password that you never change, then to protect, for example, your account data, the bank may offer you one-time pins. this level of protection is more reliable than the first, but there is a chance that someone may intercept your one-time pin.\n * the third type is an authentication app. they work as follows: first, the system fills in a password and username and then generates a long one-time access code that changes every 30 seconds making it difficult to intercept.\n * the last one is biometrics. a user presents a fingerprint or eye scan to gain access to the system. the advantage of biometric identification systems is that the characteristics used in these systems are an integral part of the personality so that it is impossible to lose, transfer, or forget them.\n\nauthentication is always visible to the user so that they can pass it. moreover, they can partially change it by replacing a password or their username, for example.\n\noften all the data during the authentication moves through an id token, which is a formatted character string that contains information such as id, username, account login time, id token expiration date.\n\nnow you know what authentication is and what types of it exist. let's move to the authorization then.\n\n\n# what is authorization?\n\nauthorization often goes after authentication, when the system successfully \"recognized\" you. authorization checks if you have the right to access the content or resources to which you have requested access. for example, the permission to download a particular file on a server or to provide individual users with administrative access to an application.\n\noften all the data here moves through special access tokens, not id ones as during authentication.\n\nalso, unlike authentication, authorization is not visible to the user and there is no option to change it. that is because only the data owner can provide the permissions. for example, one can not view and change a document until the document owner sends a certain invitation that permits editing it.\n\nhaving figured out what authentication and authorization are, let's talk about their fundamental differences.\n\n\n# authentication vs. authorization\n\nlet's use an analogy to outline their differences. imagine someone asked their friend to pick up a parcel from the post office and take it to this person's house. the friend will need:\n\n * a key (authentication). the lock on the door will grant them access to the house, it is like a password.\n * permissions (authorization). once inside, the friend has permission to access the living room and put the parcel on the table. but the friend may not have permission to go into the kitchen to take some food from the fridge.\n\nauthentication and authorization work together in this example. the friend has the right to enter the house (authentication), and once there, there he gets access to certain areas of the house (authorization).\n\nlet's put all the differences we have described into one table:\n\n                                authentication                                          authorization\nwhat does it do?                verifies credentials                                    grants or denies permission\nhow does it work?               through passwords, biometrics, one-time pins, or apps   through settings maintained by security teams\nis it visible to the user?      yes                                                     no\nis it changeable by the user?   partially                                               no\nhow does data move?             through id tokens                                       through access tokens\n\n\n# conclusion\n\nto sum up,\n\n * authentication is the act of validating that users are who they claim to be;\n * the authentication types are password, one-time pins, authentication apps, and biometrics;\n * authorization is the process of giving the user permission to access a specific resource or function.",charsets:{},lastUpdated:"2022/10/25, 17:57:56",lastUpdatedTimestamp:1666691876e3},{title:"Theory：Java 11 HTTP client",frontmatter:{title:"Theory：Java 11 HTTP client",date:"2022-10-30T12:26:31.000Z",permalink:"/pages/5b7839/",tags:["Web","HTTP"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/09.Web/88.Theory%EF%BC%9AJava%2011%20HTTP%20client.html",relativePath:"01.Java/01.Hyperskill - Java/09.Web/88.Theory：Java 11 HTTP client.md",key:"v-79ebf50f",path:"/pages/5b7839/",headers:[{level:2,title:"HTTP clients for Java",slug:"http-clients-for-java",normalizedTitle:"http clients for java",charIndex:491},{level:2,title:"Java 11 HTTP client",slug:"java-11-http-client",normalizedTitle:"java 11 http client",charIndex:1495},{level:2,title:"Tips for interacting over HTTP",slug:"tips-for-interacting-over-http",normalizedTitle:"tips for interacting over http",charIndex:6572},{level:2,title:"Features and configuration options",slug:"features-and-configuration-options",normalizedTitle:"features and configuration options",charIndex:8645},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:9676}],headersStr:"HTTP clients for Java Java 11 HTTP client Tips for interacting over HTTP Features and configuration options Conclusion",content:'It is difficult to imagine modern applications working in complete isolation from the Internet. An application may need to load some pictures from external websites, store data, or send some statistics to different online services. Many of these interactions are done over the HTTP protocol which is a part of WWW. Java provides several well-defined and handy ways to interact with external resources over this protocol. In this topic, you will explore one up-to-date way of doing this.\n\n\n# HTTP clients for Java\n\nThere are special types of libraries to interact over HTTP. They are called HTTP clients. They can look quite different but their purpose is always the same: to prepare and send HTTP requests to an external resource and to handle the response. These are some commonly used HTTP clients in Java:\n\n * HttpURLConnection is the oldest of the clients and a part of the standard Java library. The client is pretty easy to use but it doesn\'t provide enough configuration options to be used in modern applications; its design is also a bit outdated, however, you can still use it for small applications.\n * Apache HttpClient is an external open-source library and one of the most commonly used clients outside of the Java standard library. The client provides a rich set of features and configuration options, unlike HttpURLConnection, but it needs an additional external dependency for your project, as it is intended to be used in large applications and it can be overly complicated.\n * Java 11 HTTP client is a new client for interacting over HTTP and, unlike Apache HttpClient, it is a part of Java Standard Library. The client became generally available in Java 11 and now it is a good alternative to all other HTTP clients: it is easy to start using the client and it provides plenty of configuration options. If you have Java 11+, we recommend that you use this client in your applications.\n\nNow it\'s time to see how to use the new HTTP client in your applications.\n\n\n# Java 11 HTTP client\n\nThe client is located in the java.net.http package (the HttpClient class) among some other related classes such as HttpRequest and HttpResponse. The purpose of most classes in this package is clear from their name, which makes programming easier and your code better.\n\nTo start using the client we need to follow these steps:\n\n 1. Create an object of the HttpClient class to use it for further interactions; the same object can be used for multiple interactions.\n 2. Create a URI object that represents the address of the resource we would like to request.\n 3. Create an object of the HttpRequest class based on the URI object and some configuration parameters.\n 4. Send the request by invoking the special methods of the HttpClient.\n 5. Get an object of HttpResponse as a result and process it.\n\nLet\'s see how it works in practice. As an example, we are going to get the HTML representing the source of the first website.\n\nHttpClient httpClient = HttpClient.newHttpClient();\n\nURI firstWebSiteAddress = URI.create("http://info.cern.ch/hypertext/WWW/TheProject.html");\n\nHttpRequest request = HttpRequest.newBuilder()\n        .uri(firstWebSiteAddress)\n        .GET() // we can skip it, because the builder creates GET query by default\n        .build();\n\ntry {\n    HttpResponse<String> response = httpClient.send(\n            request, HttpResponse.BodyHandlers.ofString());\n    \n    System.out.println(response.statusCode()); // 200 if everything is OK\n    System.out.println(response.body());       // a long HTML text\n} catch (Exception e) {\n    System.out.println("We cannot access the site. Please, try later.");\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\nThis code goes through exactly the same steps we\'ve mentioned above, but with the following additions:\n\n * HttpResponse.BodyHandlers.ofString() that is used to convert the result to a string (there are other types of converters but we aren\'t going to consider them now);\n * printing the status code and the response body as a string.\n\nThe code above receives the source HTML of the specified page and prints it together with the status code. Here is the shortened version of the output:\n\n200\n<HEADER>\n<TITLE>The World Wide Web project</TITLE>\n<NEXTID N="55">\n</HEADER>\n<BODY>\n<H1>World Wide Web</H1>The WorldWideWeb (W3) is a wide-area<A\nNAME=0 HREF="WhatIs.html">\nhypermedia</A> information retrieval\ninitiative aiming to give universal\naccess to a large universe of documents.<P>\nEverything there is online about\nW3 is linked directly or indirectly\nto this document, including an <A\nNAME=24 HREF="Summary.html">executive\nsummary</A> of the project, <A\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\nYou are not restricted to sending only GET requests when using this client. You can also specify POST, PUT and DELETE as your request type. To demonstrate it, let\'s send a POST request containing some data about a book as JSON to a special web service that accepts any data and returns some fake results.\n\nHttpClient httpClient = HttpClient.newHttpClient();\n\nURI fakePostService = URI.create("https://jsonplaceholder.typicode.com/posts");\nString bookData = "{\\"title\\":\\"The Invisible Man\\", \\"author\\":\\"H. G. Wells\\"}";\n\nHttpRequest request = HttpRequest.newBuilder()\n        .uri(fakePostService)\n        .header("Content-Type", "application/json") // we specify that we send a JSON\n        .POST(HttpRequest.BodyPublishers.ofString(bookData))\n        .build();\n\ntry {\n    var response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());\n    System.out.println(response.statusCode()); // 201 if everything is OK\n    System.out.println(response.body());       // a JSON response with ID\n} catch (Exception e) {\n    System.out.println("We cannot send data. Please, try later.");\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\nIn this example, we invoke HttpRequest.BodyPublishers.ofString(bookData) to represent the data to be sent as a string. After receiving a response, we print its status code (201 if everything is OK) and the body containing an additional field called id.\n\n201\n{\n  "title": "The Invisible Man",\n  "author": "H. G. Wells",\n  "id": 101\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\nYou can try sending different requests or access other websites to be sure that you fully get the idea of how to use the client.\n\nIt is recommended that you use the same client object to handle multiple requests rather than create a new client for each HTTP request. At the same time, it is not forbidden to have several clients across an application, although each of them should process multiple requests.\n\n\n# Tips for interacting over HTTP\n\nInteracting with a remote server over the Internet can be quite error-prone: the Internet connection can be lost, the server can be unavailable, the request can take too long to be processed, or the server can be just down. When developing applications, you need to handle various issues so that your application won\'t crash, users won\'t suffer from the errors or lose their data.\n\nHere are some tips on what you can do:\n\n * Handle exceptions to perform some fallback actions if we cannot reach the site because of connection issues. It is good practice to handle such exceptions because network errors are quite common and your application shouldn\'t crash due to them.\n * Check statusCode before processing the body of a response because the result of the request could be different depending on the code: 2XX — success, 4XX — the request isn\'t correct, 5XX — an error on the server occurred. Most likely, if you get 4XX, you need to modify your code that sends HTTP requests; however, if you get 5XX, you need to wait and repeat your request later.\n * Set the timeout for any request, so that, if the server takes too long to process the request, the application will not wait for the response forever; it can be done when you\'re building your request using the dot syntax, e.g.: .timeout(Duration.ofMillis(10000L)).\n\nYou may wonder why we need both handling exceptions and checking status codes, but there is actually a big difference. An exception occurs when a request cannot be sent to the server or the response cannot reach your client, but the error status code indicates that although the interaction was OK, the server wasn\'t able to process the request.\n\nIf you need to repeat your request later, there are two options: you may ask users to repeat their actions later or you can just write an automatic loop mechanism for repetition. What to do depends on your app and its scenario. If you are writing an automatic mechanism, do not forget to specify the maximum number of repetitions, so as not to stay in the loop forever.\n\n\n# Features and configuration options\n\nAs you can see, the client allows you to send any requests easily, but what it also does is provide a huge number of features and configuration options for adjusting your interaction to external services. Here is an incomplete list of them:\n\n * you can send passwords and other authentication information via the client;\n * the client supports different versions of protocols: HTTP/1.1, HTTP/2, WebSockets;\n * it can be used to send asynchronous requests in order not to wait for the response and start processing it only when it is received;\n * it is possible to access HTTP headers of the response;\n * the client supports using cookies.\n\nHaving so many diverse features and configuration options makes it challenging to learn this library all at once, but the good news is that you don\'t have to memorize everything. If you need to find a feature or an option, just visit the official documentation and you will find out how to take advantage of this vast library in your particular case.\n\n\n# Conclusion\n\nHistorically, Java has had several clients for working over the HTTP protocol. Some of them are part of the standard library while others are external tools. A new HTTP client Java 11 made generally available is a good alternative to all other clients. It combines the ease of use and a rich set of configuration options and features that are usually inherent in external libraries. Using the client, you can send any types of HTTP requests, process the responses, use several different protocols, and so much more. If you have Java 11+ and would like to write a new application, we strongly recommend that you try this new client!',normalizedContent:'it is difficult to imagine modern applications working in complete isolation from the internet. an application may need to load some pictures from external websites, store data, or send some statistics to different online services. many of these interactions are done over the http protocol which is a part of www. java provides several well-defined and handy ways to interact with external resources over this protocol. in this topic, you will explore one up-to-date way of doing this.\n\n\n# http clients for java\n\nthere are special types of libraries to interact over http. they are called http clients. they can look quite different but their purpose is always the same: to prepare and send http requests to an external resource and to handle the response. these are some commonly used http clients in java:\n\n * httpurlconnection is the oldest of the clients and a part of the standard java library. the client is pretty easy to use but it doesn\'t provide enough configuration options to be used in modern applications; its design is also a bit outdated, however, you can still use it for small applications.\n * apache httpclient is an external open-source library and one of the most commonly used clients outside of the java standard library. the client provides a rich set of features and configuration options, unlike httpurlconnection, but it needs an additional external dependency for your project, as it is intended to be used in large applications and it can be overly complicated.\n * java 11 http client is a new client for interacting over http and, unlike apache httpclient, it is a part of java standard library. the client became generally available in java 11 and now it is a good alternative to all other http clients: it is easy to start using the client and it provides plenty of configuration options. if you have java 11+, we recommend that you use this client in your applications.\n\nnow it\'s time to see how to use the new http client in your applications.\n\n\n# java 11 http client\n\nthe client is located in the java.net.http package (the httpclient class) among some other related classes such as httprequest and httpresponse. the purpose of most classes in this package is clear from their name, which makes programming easier and your code better.\n\nto start using the client we need to follow these steps:\n\n 1. create an object of the httpclient class to use it for further interactions; the same object can be used for multiple interactions.\n 2. create a uri object that represents the address of the resource we would like to request.\n 3. create an object of the httprequest class based on the uri object and some configuration parameters.\n 4. send the request by invoking the special methods of the httpclient.\n 5. get an object of httpresponse as a result and process it.\n\nlet\'s see how it works in practice. as an example, we are going to get the html representing the source of the first website.\n\nhttpclient httpclient = httpclient.newhttpclient();\n\nuri firstwebsiteaddress = uri.create("http://info.cern.ch/hypertext/www/theproject.html");\n\nhttprequest request = httprequest.newbuilder()\n        .uri(firstwebsiteaddress)\n        .get() // we can skip it, because the builder creates get query by default\n        .build();\n\ntry {\n    httpresponse<string> response = httpclient.send(\n            request, httpresponse.bodyhandlers.ofstring());\n    \n    system.out.println(response.statuscode()); // 200 if everything is ok\n    system.out.println(response.body());       // a long html text\n} catch (exception e) {\n    system.out.println("we cannot access the site. please, try later.");\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\nthis code goes through exactly the same steps we\'ve mentioned above, but with the following additions:\n\n * httpresponse.bodyhandlers.ofstring() that is used to convert the result to a string (there are other types of converters but we aren\'t going to consider them now);\n * printing the status code and the response body as a string.\n\nthe code above receives the source html of the specified page and prints it together with the status code. here is the shortened version of the output:\n\n200\n<header>\n<title>the world wide web project</title>\n<nextid n="55">\n</header>\n<body>\n<h1>world wide web</h1>the worldwideweb (w3) is a wide-area<a\nname=0 href="whatis.html">\nhypermedia</a> information retrieval\ninitiative aiming to give universal\naccess to a large universe of documents.<p>\neverything there is online about\nw3 is linked directly or indirectly\nto this document, including an <a\nname=24 href="summary.html">executive\nsummary</a> of the project, <a\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\nyou are not restricted to sending only get requests when using this client. you can also specify post, put and delete as your request type. to demonstrate it, let\'s send a post request containing some data about a book as json to a special web service that accepts any data and returns some fake results.\n\nhttpclient httpclient = httpclient.newhttpclient();\n\nuri fakepostservice = uri.create("https://jsonplaceholder.typicode.com/posts");\nstring bookdata = "{\\"title\\":\\"the invisible man\\", \\"author\\":\\"h. g. wells\\"}";\n\nhttprequest request = httprequest.newbuilder()\n        .uri(fakepostservice)\n        .header("content-type", "application/json") // we specify that we send a json\n        .post(httprequest.bodypublishers.ofstring(bookdata))\n        .build();\n\ntry {\n    var response = httpclient.send(request, httpresponse.bodyhandlers.ofstring());\n    system.out.println(response.statuscode()); // 201 if everything is ok\n    system.out.println(response.body());       // a json response with id\n} catch (exception e) {\n    system.out.println("we cannot send data. please, try later.");\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\nin this example, we invoke httprequest.bodypublishers.ofstring(bookdata) to represent the data to be sent as a string. after receiving a response, we print its status code (201 if everything is ok) and the body containing an additional field called id.\n\n201\n{\n  "title": "the invisible man",\n  "author": "h. g. wells",\n  "id": 101\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\nyou can try sending different requests or access other websites to be sure that you fully get the idea of how to use the client.\n\nit is recommended that you use the same client object to handle multiple requests rather than create a new client for each http request. at the same time, it is not forbidden to have several clients across an application, although each of them should process multiple requests.\n\n\n# tips for interacting over http\n\ninteracting with a remote server over the internet can be quite error-prone: the internet connection can be lost, the server can be unavailable, the request can take too long to be processed, or the server can be just down. when developing applications, you need to handle various issues so that your application won\'t crash, users won\'t suffer from the errors or lose their data.\n\nhere are some tips on what you can do:\n\n * handle exceptions to perform some fallback actions if we cannot reach the site because of connection issues. it is good practice to handle such exceptions because network errors are quite common and your application shouldn\'t crash due to them.\n * check statuscode before processing the body of a response because the result of the request could be different depending on the code: 2xx — success, 4xx — the request isn\'t correct, 5xx — an error on the server occurred. most likely, if you get 4xx, you need to modify your code that sends http requests; however, if you get 5xx, you need to wait and repeat your request later.\n * set the timeout for any request, so that, if the server takes too long to process the request, the application will not wait for the response forever; it can be done when you\'re building your request using the dot syntax, e.g.: .timeout(duration.ofmillis(10000l)).\n\nyou may wonder why we need both handling exceptions and checking status codes, but there is actually a big difference. an exception occurs when a request cannot be sent to the server or the response cannot reach your client, but the error status code indicates that although the interaction was ok, the server wasn\'t able to process the request.\n\nif you need to repeat your request later, there are two options: you may ask users to repeat their actions later or you can just write an automatic loop mechanism for repetition. what to do depends on your app and its scenario. if you are writing an automatic mechanism, do not forget to specify the maximum number of repetitions, so as not to stay in the loop forever.\n\n\n# features and configuration options\n\nas you can see, the client allows you to send any requests easily, but what it also does is provide a huge number of features and configuration options for adjusting your interaction to external services. here is an incomplete list of them:\n\n * you can send passwords and other authentication information via the client;\n * the client supports different versions of protocols: http/1.1, http/2, websockets;\n * it can be used to send asynchronous requests in order not to wait for the response and start processing it only when it is received;\n * it is possible to access http headers of the response;\n * the client supports using cookies.\n\nhaving so many diverse features and configuration options makes it challenging to learn this library all at once, but the good news is that you don\'t have to memorize everything. if you need to find a feature or an option, just visit the official documentation and you will find out how to take advantage of this vast library in your particular case.\n\n\n# conclusion\n\nhistorically, java has had several clients for working over the http protocol. some of them are part of the standard library while others are external tools. a new http client java 11 made generally available is a good alternative to all other clients. it combines the ease of use and a rich set of configuration options and features that are usually inherent in external libraries. using the client, you can send any types of http requests, process the responses, use several different protocols, and so much more. if you have java 11+ and would like to write a new application, we strongly recommend that you try this new client!',charsets:{},lastUpdated:"2022/12/03, 17:31:39",lastUpdatedTimestamp:1670059899e3},{title:"Theory：REST Exception handling",frontmatter:{title:"Theory：REST Exception handling",date:"2022-08-01T09:51:32.000Z",permalink:"/pages/af1212/",tags:["REST","Exception","Spring boot"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/09.Web/81.Theory%EF%BC%9AREST%20Exception%20handling.html",relativePath:"01.Java/01.Hyperskill - Java/09.Web/81.Theory：REST Exception handling.md",key:"v-c59b78e8",path:"/pages/af1212/",headers:[{level:2,title:"Controller preparation",slug:"controller-preparation",normalizedTitle:"controller preparation",charIndex:707},{level:2,title:"ResponseStatusException",slug:"responsestatusexception",normalizedTitle:"responsestatusexception",charIndex:550},{level:2,title:"Custom exceptions",slug:"custom-exceptions",normalizedTitle:"custom exceptions",charIndex:5572},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:6769}],headersStr:"Controller preparation ResponseStatusException Custom exceptions Conclusion",content:'Returning errors to a user is crucial during web application development. When users send an incorrect request that cannot be processed or want to get information on a non-existing object, your web application should let them know what is wrong. There are different general HTTP status codes, for example, 400 for Bad Request or 404 for Not Found. Handling errors is very important, as it allows users to understand what is wrong right away.\n\nHere you will find two ways to return an error message in Spring Boot applications. You can either use the ResponseStatusException Spring class or create your own exception using the @ResponseStatus annotation. Let\'s write a simple code and show how it works.\n\n\n# Controller preparation\n\nImagine a web app that returns information about a flight by its number. It would look like this in JSON:\n\n{\n  "id" : 3,\n  "from": "Berlin Tegel",\n  "to": "Stuttgart",\n  "gate": "D80"\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\nIn the example below, we create a simple FlightInfo class with information about the airport, city, and gate. We do not provide the flight date and time for the sake of brevity:\n\npublic class FlightInfo {\n\n    private int id;\n    private String from;\n    private String to;\n    private String gate;\n \n    // constructor\n \n    // getters and setters\n \n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nNow we can implement a simple FlightController controller with a list of flights. We will also use a method that returns a FlightInfo object from the flightInfoList list to get information about the specific flight:\n\n@RestController\npublic class FlightController {\n\n    private final List<FlightInfo> flightInfoList = new ArrayList<>();\n\n    public FlightController() {\n        flightInfoList.add(\n                new FlightInfo(1, "Delhi Indira Gandhi", "Stuttgart", "D80"));\n        flightInfoList.add(\n                new FlightInfo(2, "Tokyo Haneda", "Frankfurt", "110"));\n        flightInfoList.add(\n                new FlightInfo(3, "Berlin Schönefeld", "Tenerife", "15"));\n        flightInfoList.add(\n                new FlightInfo(4, "Kilimanjaro Arusha", "Boston", "15"));\n    }\n\n    @GetMapping("flights/{id}")\n    public FlightInfo getFlightInfo(@PathVariable int id) {\n        for (FlightInfo flightInfo : flightInfoList) {\n            if (flightInfo.getId() == id) {\n                return flightInfo;\n            }\n        }\n        throw new RuntimeException();\n    }\n\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\nFinally, we are ready to focus on handling exceptions!\n\n\n# ResponseStatusException\n\nThe first way to return an error is to use the ResponseStatusException class introduced in Spring 5 for basic error handling as part of org.springframework.web.server package. It\'s RuntimeException and that\'s why we don\'t need to add it to a method signature.\n\nThere are three constructors in Spring to generate ResponseStatusException:\n\nResponseStatusException(HttpStatus status)\nResponseStatusException(HttpStatus status, java.lang.String reason)\nResponseStatusException(\n        HttpStatus status, \n        java.lang.String reason, \n        java.lang.Throwable cause\n)\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nWe have created an instance providing HttpStatus and, optionally, the reason and cause. The reason is a simple message that explains the exception. The cause is a nested exception.\n\nSo, what HttpStatus types are there? The most common are 200 OK, 404 NOT_FOUND, 400 BAD_REQUEST, 403 FORBIDDEN, and 500 INTERNAL_SERVER_ERROR.\n\nLet\'s change our getFlightInfo method and write a code that generates an instance of ResponseStatusException. Let\'s say users are looking for some information about a flight from the Berlin Schönefeld airport, but the airport is closed for maintenance. In this situation, we should return ResponseStatusException with BAD_REQUEST status and reason message:\n\n@GetMapping("flights/{id}")\npublic static FlightInfo getFlightInfo(@PathVariable int id) {\n    for (FlightInfo flightInfo : flightInfoList) {\n        if (flightInfo.getId() == id) {\n            if (Objects.equals(flightInfo.getFrom(), "Berlin Schönefeld")) {\n                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, \n                        "Berlin Schönefeld is closed for service today");\n            } else {\n                return flightInfo;\n            }\n        }\n    }\n\n    throw new RuntimeException();\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\nIf we try to test it, we will see the standard error info format as a response:\n\n\n\nThis JSON instance provides more information about the situation than a specified message — the timestamp, error name, status code, and the REST path of the request.\n\n注意\n\nBy default, Spring Boot doesn\'t include the message field in a response. To enable it, add this line in the application.properties file: server.error.include-message=always\n\nLet\'s talk about the pros and cons of ResponseStatusException.\n\nIt has many benefits, allowing us to:\n\n * process exceptions of the same type separately;\n * set different status codes for the response;\n * avoid creating any additional exception classes;\n * throw an exception at any place;\n\nThe disadvantage is the code duplication since we have to write the same code in several controllers.\n\n注意\n\nIf your application throws an uncaught exception like RuntimeException or any other that doesn\'t have explicit details on the HTTP code, it will be converted to 500 Internal Server Error. This status code indicates that something is bad with your server, and it should be fixed because the user requests cannot be processed properly.\n\n\n# Custom exceptions\n\nIt is also possible to set the response code and status for the custom exception. We can write a class that extends RuntimeException and add the @ResponseStatus annotation to the exception like this:\n\n@ResponseStatus(code = HttpStatus.BAD_REQUEST)\nclass FlightNotFoundException extends RuntimeException {\n    \n    public FlightNotFoundException(String cause) {\n        super(cause);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nNow, we can throw this exception in the same way as ResponseStatusException. The status will be set automatically.\n\nFor example, in the flight controller:\n\n@GetMapping("flights/{id}")\npublic FlightInfo getFlightInfo(@PathVariable int id) {\n    for (FlightInfo flightInfo : flightInfoList) {\n        if (flightInfo.getId() == id) {\n            return flightInfo;\n        }\n    }\n\n    throw new FlightNotFoundException("Flight not found for id =" + id);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nIf we test this exception with a nonexistent id=1111, we get a response with the new status code 400.\n\n\n\nThe main advantage is that we can create our own specific exceptions and keep our code more readable.\n\nOn the other hand, custom exceptions require implementing additional classes.\n\n\n# Conclusion\n\nRemember that bad exception processing may result in bugs and low readability. We have considered two ways of handling exceptions in Spring. Now you can:\n\n * throw ResponseStatusException\n * create custom exceptions using the @ResponseStatus annotation and throw them like ResponseStatusException\n\nEach way has its advantages and disadvantages. Use the second option for specific exceptions or the first one to avoid additional exception classes.',normalizedContent:'returning errors to a user is crucial during web application development. when users send an incorrect request that cannot be processed or want to get information on a non-existing object, your web application should let them know what is wrong. there are different general http status codes, for example, 400 for bad request or 404 for not found. handling errors is very important, as it allows users to understand what is wrong right away.\n\nhere you will find two ways to return an error message in spring boot applications. you can either use the responsestatusexception spring class or create your own exception using the @responsestatus annotation. let\'s write a simple code and show how it works.\n\n\n# controller preparation\n\nimagine a web app that returns information about a flight by its number. it would look like this in json:\n\n{\n  "id" : 3,\n  "from": "berlin tegel",\n  "to": "stuttgart",\n  "gate": "d80"\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\nin the example below, we create a simple flightinfo class with information about the airport, city, and gate. we do not provide the flight date and time for the sake of brevity:\n\npublic class flightinfo {\n\n    private int id;\n    private string from;\n    private string to;\n    private string gate;\n \n    // constructor\n \n    // getters and setters\n \n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nnow we can implement a simple flightcontroller controller with a list of flights. we will also use a method that returns a flightinfo object from the flightinfolist list to get information about the specific flight:\n\n@restcontroller\npublic class flightcontroller {\n\n    private final list<flightinfo> flightinfolist = new arraylist<>();\n\n    public flightcontroller() {\n        flightinfolist.add(\n                new flightinfo(1, "delhi indira gandhi", "stuttgart", "d80"));\n        flightinfolist.add(\n                new flightinfo(2, "tokyo haneda", "frankfurt", "110"));\n        flightinfolist.add(\n                new flightinfo(3, "berlin schonefeld", "tenerife", "15"));\n        flightinfolist.add(\n                new flightinfo(4, "kilimanjaro arusha", "boston", "15"));\n    }\n\n    @getmapping("flights/{id}")\n    public flightinfo getflightinfo(@pathvariable int id) {\n        for (flightinfo flightinfo : flightinfolist) {\n            if (flightinfo.getid() == id) {\n                return flightinfo;\n            }\n        }\n        throw new runtimeexception();\n    }\n\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\nfinally, we are ready to focus on handling exceptions!\n\n\n# responsestatusexception\n\nthe first way to return an error is to use the responsestatusexception class introduced in spring 5 for basic error handling as part of org.springframework.web.server package. it\'s runtimeexception and that\'s why we don\'t need to add it to a method signature.\n\nthere are three constructors in spring to generate responsestatusexception:\n\nresponsestatusexception(httpstatus status)\nresponsestatusexception(httpstatus status, java.lang.string reason)\nresponsestatusexception(\n        httpstatus status, \n        java.lang.string reason, \n        java.lang.throwable cause\n)\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nwe have created an instance providing httpstatus and, optionally, the reason and cause. the reason is a simple message that explains the exception. the cause is a nested exception.\n\nso, what httpstatus types are there? the most common are 200 ok, 404 not_found, 400 bad_request, 403 forbidden, and 500 internal_server_error.\n\nlet\'s change our getflightinfo method and write a code that generates an instance of responsestatusexception. let\'s say users are looking for some information about a flight from the berlin schonefeld airport, but the airport is closed for maintenance. in this situation, we should return responsestatusexception with bad_request status and reason message:\n\n@getmapping("flights/{id}")\npublic static flightinfo getflightinfo(@pathvariable int id) {\n    for (flightinfo flightinfo : flightinfolist) {\n        if (flightinfo.getid() == id) {\n            if (objects.equals(flightinfo.getfrom(), "berlin schonefeld")) {\n                throw new responsestatusexception(httpstatus.bad_request, \n                        "berlin schonefeld is closed for service today");\n            } else {\n                return flightinfo;\n            }\n        }\n    }\n\n    throw new runtimeexception();\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\nif we try to test it, we will see the standard error info format as a response:\n\n\n\nthis json instance provides more information about the situation than a specified message — the timestamp, error name, status code, and the rest path of the request.\n\n注意\n\nby default, spring boot doesn\'t include the message field in a response. to enable it, add this line in the application.properties file: server.error.include-message=always\n\nlet\'s talk about the pros and cons of responsestatusexception.\n\nit has many benefits, allowing us to:\n\n * process exceptions of the same type separately;\n * set different status codes for the response;\n * avoid creating any additional exception classes;\n * throw an exception at any place;\n\nthe disadvantage is the code duplication since we have to write the same code in several controllers.\n\n注意\n\nif your application throws an uncaught exception like runtimeexception or any other that doesn\'t have explicit details on the http code, it will be converted to 500 internal server error. this status code indicates that something is bad with your server, and it should be fixed because the user requests cannot be processed properly.\n\n\n# custom exceptions\n\nit is also possible to set the response code and status for the custom exception. we can write a class that extends runtimeexception and add the @responsestatus annotation to the exception like this:\n\n@responsestatus(code = httpstatus.bad_request)\nclass flightnotfoundexception extends runtimeexception {\n    \n    public flightnotfoundexception(string cause) {\n        super(cause);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nnow, we can throw this exception in the same way as responsestatusexception. the status will be set automatically.\n\nfor example, in the flight controller:\n\n@getmapping("flights/{id}")\npublic flightinfo getflightinfo(@pathvariable int id) {\n    for (flightinfo flightinfo : flightinfolist) {\n        if (flightinfo.getid() == id) {\n            return flightinfo;\n        }\n    }\n\n    throw new flightnotfoundexception("flight not found for id =" + id);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nif we test this exception with a nonexistent id=1111, we get a response with the new status code 400.\n\n\n\nthe main advantage is that we can create our own specific exceptions and keep our code more readable.\n\non the other hand, custom exceptions require implementing additional classes.\n\n\n# conclusion\n\nremember that bad exception processing may result in bugs and low readability. we have considered two ways of handling exceptions in spring. now you can:\n\n * throw responsestatusexception\n * create custom exceptions using the @responsestatus annotation and throw them like responsestatusexception\n\neach way has its advantages and disadvantages. use the second option for specific exceptions or the first one to avoid additional exception classes.',charsets:{cjk:!0},lastUpdated:"2022/10/12, 17:01:25",lastUpdatedTimestamp:1665565285e3},{title:"Theory：Introduction to Spring boot",frontmatter:{title:"Theory：Introduction to Spring boot",date:"2022-07-14T11:02:21.000Z",permalink:"/pages/310689/",tags:["Framework","Spring boot"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/10.Spring%20boot/66.Theory%EF%BC%9AIntroduction%20to%20Spring%20boot.html",relativePath:"01.Java/01.Hyperskill - Java/10.Spring boot/66.Theory：Introduction to Spring boot.md",key:"v-4b88402c",path:"/pages/310689/",headers:[{level:2,title:"The Spring Framework",slug:"the-spring-framework",normalizedTitle:"the spring framework",charIndex:2},{level:2,title:"What is Spring Boot?",slug:"what-is-spring-boot",normalizedTitle:"what is spring boot?",charIndex:1627}],headersStr:"The Spring Framework What is Spring Boot?",content:"# The Spring Framework\n\nSpring is one of the most popular application development frameworks for the Java Platform. First of all, we use it to develop web applications, but we can also apply it to the desktop and even to the command-line applications. In a way, Spring is a framework of frameworks that work together providing standard functionality to applications. That's why we sometimes call Spring a platform meaning it's more than just a framework.\n\n\n\nSpring's logo\n\nSpring is huge, and it can do a lot of useful things. Here is just a small list of some parts of Spring providing services necessary to most of the real-world applications:\n\n * component container for managing the life cycle of objects inside the application;\n * data access framework for working with different types of databases;\n * web framework for building web applications with a web server;\n * security framework for supporting user authentication and authorization processes;\n * testing framework for writing tests for all parts of the application.\n\nDespite its popularity and all its features, Spring is not a perfect framework, and its creators understand it. One of the main issues is that the configuration of the Spring-based applications is very complex. This slows down the development process and creates extra complexity for the beginners.\n\nFortunately, Spring developers realized that it was possible to automate much of this work, so they developed a new framework called Spring Boot. This framework solves many configuration problems and makes Spring one of the most successful and convenient web development platforms among all.\n\n\n# What is Spring Boot?\n\nSpring Boot is a part of Spring platform that allows the developers to create stand-alone production-grade Spring-based applications that you can \"just run\".\n\nThis framework has greatly simplified the configuration of applications by applying the convention over configuration approach. This means a programmer does not need to configure everything; instead, the framework defines some default components, behaviors, and automatic configurations for each of the major use cases in Spring. At the same time, when using it, you still have access to all the features of the Spring Framework together with the acquired ease of development.\n\n\n\nSpring Boot's logo\n\nSpring Boot also provides a few additional cool features, here are some of them:\n\n * command-line interface;\n * monitoring the status of your running applications (health/metrics);\n * embedded application server for running your application.\n\nWe hope that you find this interesting and soon will see all the simplicity and fun when developing an application with the Spring Boot! We tried not to bore you with history in this topic. If you would like to read some history and philosophy of the Spring framework and Spring Boot, you can visit the official documentation and then come back to their application.",normalizedContent:"# the spring framework\n\nspring is one of the most popular application development frameworks for the java platform. first of all, we use it to develop web applications, but we can also apply it to the desktop and even to the command-line applications. in a way, spring is a framework of frameworks that work together providing standard functionality to applications. that's why we sometimes call spring a platform meaning it's more than just a framework.\n\n\n\nspring's logo\n\nspring is huge, and it can do a lot of useful things. here is just a small list of some parts of spring providing services necessary to most of the real-world applications:\n\n * component container for managing the life cycle of objects inside the application;\n * data access framework for working with different types of databases;\n * web framework for building web applications with a web server;\n * security framework for supporting user authentication and authorization processes;\n * testing framework for writing tests for all parts of the application.\n\ndespite its popularity and all its features, spring is not a perfect framework, and its creators understand it. one of the main issues is that the configuration of the spring-based applications is very complex. this slows down the development process and creates extra complexity for the beginners.\n\nfortunately, spring developers realized that it was possible to automate much of this work, so they developed a new framework called spring boot. this framework solves many configuration problems and makes spring one of the most successful and convenient web development platforms among all.\n\n\n# what is spring boot?\n\nspring boot is a part of spring platform that allows the developers to create stand-alone production-grade spring-based applications that you can \"just run\".\n\nthis framework has greatly simplified the configuration of applications by applying the convention over configuration approach. this means a programmer does not need to configure everything; instead, the framework defines some default components, behaviors, and automatic configurations for each of the major use cases in spring. at the same time, when using it, you still have access to all the features of the spring framework together with the acquired ease of development.\n\n\n\nspring boot's logo\n\nspring boot also provides a few additional cool features, here are some of them:\n\n * command-line interface;\n * monitoring the status of your running applications (health/metrics);\n * embedded application server for running your application.\n\nwe hope that you find this interesting and soon will see all the simplicity and fun when developing an application with the spring boot! we tried not to bore you with history in this topic. if you would like to read some history and philosophy of the spring framework and spring boot, you can visit the official documentation and then come back to their application.",charsets:{},lastUpdated:"2022/10/12, 17:01:25",lastUpdatedTimestamp:1665565285e3},{title:"Theory：Basic project structure",frontmatter:{title:"Theory：Basic project structure",date:"2022-07-14T11:04:47.000Z",permalink:"/pages/1862e3/",tags:["Framework","Spring boot"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/10.Spring%20boot/68.Theory%EF%BC%9ABasic%20project%20structure.html",relativePath:"01.Java/01.Hyperskill - Java/10.Spring boot/68.Theory：Basic project structure.md",key:"v-de63b316",path:"/pages/1862e3/",headers:[{level:2,title:"Gradle as a skeleton",slug:"gradle-as-a-skeleton",normalizedTitle:"gradle as a skeleton",charIndex:214},{level:2,title:"The application properties",slug:"the-application-properties",normalizedTitle:"the application properties",charIndex:3482},{level:2,title:"The Application class",slug:"the-application-class",normalizedTitle:"the application class",charIndex:4141},{level:2,title:"Changing the default logo",slug:"changing-the-default-logo",normalizedTitle:"changing the default logo",charIndex:5737}],headersStr:"Gradle as a skeleton The application properties The Application class Changing the default logo",content:"In this topic, you will consider the basic structure of any Spring Boot application. If you don't have such an application, just visit the Spring Initializr site and generate it with Gradle and Java or Kotlin.\n\n\n# Gradle as a skeleton\n\nThe basic structure of a Spring Boot application depends on a build tool that we use for the project. Since we use Gradle, our project has the build.gradle file that describes how to build and manage the dependencies of the project.\n\n * Java\n   \n   .\n   ├── build.gradle\n   ├── gradle\n   │   └── ...\n   ├── gradlew\n   ├── gradlew.bat\n   ├── HELP.md\n   ├── settings.gradle\n   └── src\n       ├── main\n       │   ├── java\n       │   │   └── org\n       │   │       └── hyperskill\n       │   │           └── demo\n       │   │               └── DemoApplication.java\n       │   └── resources\n       │       └── application.properties\n       └── test\n           └── java\n               └── org\n                   └── hyperskill\n                       └── demo\n                           └── DemoApplicationTests.java\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   16\n   17\n   18\n   19\n   20\n   21\n   22\n   23\n   \n\n * Kotlin\n   \n   .\n   ├── build.gradle\n   ├── gradle\n   │   └── ...\n   ├── gradlew\n   ├── gradlew.bat\n   ├── HELP.md\n   ├── settings.gradle\n   └── src\n       ├── main\n       │   ├── kotlin\n       │   │   └── org\n       │   │       └── hyperskill\n       │   │           └── demo\n       │   │               └── DemoApplication.kt\n       │   └── resources\n       │       └── application.properties\n       └── test\n           └── kotlin\n               └── org\n                   └── hyperskill\n                       └── demo\n                           └── DemoApplicationTests.kt\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   16\n   17\n   18\n   19\n   20\n   21\n   22\n   23\n   \n\nThere are also other Gradle-related files that you probably already know.\n\nThe initially generated Spring Boot application has several dependencies specified in the build.gradle file.\n\ndependencies {\n    implementation 'org.springframework.boot:spring-boot-starter'\n    testImplementation 'org.springframework.boot:spring-boot-starter-test'\n}\n\n\n1\n2\n3\n4\n\n\nThe first dependency adds the Spring Boot framework to this project, and the second one brings test libraries integrated with Spring Boot. It is enough for the simplest Spring Boot application. As you can see, no boring configurations or excessive amount of dependencies!\n\n提示\n\nThese dependencies are called starters and there are more of them. Each such starter dependency is a group of related dependencies. Instead of specifying a lot of related dependencies and their versions (Spring approach), we can add a Spring Boot starter that contains a group of tested-for-compatibility dependencies. All the starters follow a similar naming pattern: spring-boot-starter**-\\***, where ***** denotes a particular type of application. For example, if we want to use Spring Web for creating web apps, we can include the spring-boot-starter**-web** dependency that contains web-related dependencies, or if we want to secure our app we can add spring-boot-starter**-security** instead of a bunch of security-related dependencies. This approach greatly simplifies dependency management, is less error-prone, and speeds up the development process.\n\nThe source code is placed in the src directory in main and test subdirectories.\n\n\n# The application properties\n\nSpring Boot uses Convention Over Configuration approach. It means that a developer only needs to specify unconventional aspects of the application, while all other aspects work by default.\n\nTo configure some aspects of a Spring Boot application, there is an application.properties file located in src/main/resources. In a newly generated project, this file is empty, but the application still works thanks to default implicit configurations.\n\nWe will modify the properties in the next topics.\n\nThe properties can also be stored in the YAML format within the application.yml file. We intend to add their examples in the future.\n\n\n# The Application class\n\nThe entry point of our application is DemoApplication class located in org.hyperskill.demo package. This class contains the main method that is commonly-known among developers.\n\n * Java\n   \n   @SpringBootApplication\n   public class DemoApplication {\n   \n       public static void main(String[] args) {\n           SpringApplication.run(DemoApplication.class, args);\n       }\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   \n\n * Kotlin\n   \n   @SpringBootApplication\n   class DemoSpringApplication\n   \n   fun main(args: Array<String>) {\n       runApplication<DemoSpringApplication>(*args)\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   \n\nThe presented program looks very simple, almost like a typical hello-world program. Inside main, the SpringApplication.run() or runApplication() method is invoked to launch the application with given arguments.\n\nThere is also an important annotation @SpringBootApplication that does all the Spring Boot magic! It makes your application work with incredible abilities: autoconfiguration, managing lifecycle of application components and a lot of other useful things that we will consider later. This annotation shows the convenient approach in Spring Boot: annotating classes and their members to get all features provided by Spring Boot.\n\n提示\n\n@SpringBootApplicantion encapsulates @Configuration, @EnableAutoConfiguration, @ComponentScan.\n\nThat is all about the basic structure of Spring Boot applications. In the next topics, you will create new classes and set up configurations to develop an application that behaves as you like.\n\n\n# Changing the default logo\n\nAs you know, when starting a Spring Boot application, you can see the default Spring logo. Let's take a look at one simple but amazing feature as a bonus: you can change the logo to any other, e.g. the logo of your company or the project. To change the logo, first, you need to create a file named banner.txt that contains your custom logo and then put it in the /src/main/resources directory (next to the application.properties file).\n\nHere is our result after running an application with a custom logo:\n\n __    __   __          __    __       _______. __  \n|  |  |  | |  |        |  |  |  |     /       ||  | \n|  |__|  | |  |        |  |__|  |    |   (----`|  | \n|   __   | |  |        |   __   |     \\   \\    |  | \n|  |  |  | |  |  __    |  |  |  | .----)   |   |__| \n|__|  |__| |__| (_ )   |__|  |__| |_______/    (__) \n                 |/                                 \n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nTo create a stunning logo, you can use this Spring Boot Banner Generator. We hope this small bonus will help you have more fun and remember the structure of a Spring Boot project!",normalizedContent:"in this topic, you will consider the basic structure of any spring boot application. if you don't have such an application, just visit the spring initializr site and generate it with gradle and java or kotlin.\n\n\n# gradle as a skeleton\n\nthe basic structure of a spring boot application depends on a build tool that we use for the project. since we use gradle, our project has the build.gradle file that describes how to build and manage the dependencies of the project.\n\n * java\n   \n   .\n   ├── build.gradle\n   ├── gradle\n   │   └── ...\n   ├── gradlew\n   ├── gradlew.bat\n   ├── help.md\n   ├── settings.gradle\n   └── src\n       ├── main\n       │   ├── java\n       │   │   └── org\n       │   │       └── hyperskill\n       │   │           └── demo\n       │   │               └── demoapplication.java\n       │   └── resources\n       │       └── application.properties\n       └── test\n           └── java\n               └── org\n                   └── hyperskill\n                       └── demo\n                           └── demoapplicationtests.java\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   16\n   17\n   18\n   19\n   20\n   21\n   22\n   23\n   \n\n * kotlin\n   \n   .\n   ├── build.gradle\n   ├── gradle\n   │   └── ...\n   ├── gradlew\n   ├── gradlew.bat\n   ├── help.md\n   ├── settings.gradle\n   └── src\n       ├── main\n       │   ├── kotlin\n       │   │   └── org\n       │   │       └── hyperskill\n       │   │           └── demo\n       │   │               └── demoapplication.kt\n       │   └── resources\n       │       └── application.properties\n       └── test\n           └── kotlin\n               └── org\n                   └── hyperskill\n                       └── demo\n                           └── demoapplicationtests.kt\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   16\n   17\n   18\n   19\n   20\n   21\n   22\n   23\n   \n\nthere are also other gradle-related files that you probably already know.\n\nthe initially generated spring boot application has several dependencies specified in the build.gradle file.\n\ndependencies {\n    implementation 'org.springframework.boot:spring-boot-starter'\n    testimplementation 'org.springframework.boot:spring-boot-starter-test'\n}\n\n\n1\n2\n3\n4\n\n\nthe first dependency adds the spring boot framework to this project, and the second one brings test libraries integrated with spring boot. it is enough for the simplest spring boot application. as you can see, no boring configurations or excessive amount of dependencies!\n\n提示\n\nthese dependencies are called starters and there are more of them. each such starter dependency is a group of related dependencies. instead of specifying a lot of related dependencies and their versions (spring approach), we can add a spring boot starter that contains a group of tested-for-compatibility dependencies. all the starters follow a similar naming pattern: spring-boot-starter**-\\***, where ***** denotes a particular type of application. for example, if we want to use spring web for creating web apps, we can include the spring-boot-starter**-web** dependency that contains web-related dependencies, or if we want to secure our app we can add spring-boot-starter**-security** instead of a bunch of security-related dependencies. this approach greatly simplifies dependency management, is less error-prone, and speeds up the development process.\n\nthe source code is placed in the src directory in main and test subdirectories.\n\n\n# the application properties\n\nspring boot uses convention over configuration approach. it means that a developer only needs to specify unconventional aspects of the application, while all other aspects work by default.\n\nto configure some aspects of a spring boot application, there is an application.properties file located in src/main/resources. in a newly generated project, this file is empty, but the application still works thanks to default implicit configurations.\n\nwe will modify the properties in the next topics.\n\nthe properties can also be stored in the yaml format within the application.yml file. we intend to add their examples in the future.\n\n\n# the application class\n\nthe entry point of our application is demoapplication class located in org.hyperskill.demo package. this class contains the main method that is commonly-known among developers.\n\n * java\n   \n   @springbootapplication\n   public class demoapplication {\n   \n       public static void main(string[] args) {\n           springapplication.run(demoapplication.class, args);\n       }\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   \n\n * kotlin\n   \n   @springbootapplication\n   class demospringapplication\n   \n   fun main(args: array<string>) {\n       runapplication<demospringapplication>(*args)\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   \n\nthe presented program looks very simple, almost like a typical hello-world program. inside main, the springapplication.run() or runapplication() method is invoked to launch the application with given arguments.\n\nthere is also an important annotation @springbootapplication that does all the spring boot magic! it makes your application work with incredible abilities: autoconfiguration, managing lifecycle of application components and a lot of other useful things that we will consider later. this annotation shows the convenient approach in spring boot: annotating classes and their members to get all features provided by spring boot.\n\n提示\n\n@springbootapplicantion encapsulates @configuration, @enableautoconfiguration, @componentscan.\n\nthat is all about the basic structure of spring boot applications. in the next topics, you will create new classes and set up configurations to develop an application that behaves as you like.\n\n\n# changing the default logo\n\nas you know, when starting a spring boot application, you can see the default spring logo. let's take a look at one simple but amazing feature as a bonus: you can change the logo to any other, e.g. the logo of your company or the project. to change the logo, first, you need to create a file named banner.txt that contains your custom logo and then put it in the /src/main/resources directory (next to the application.properties file).\n\nhere is our result after running an application with a custom logo:\n\n __    __   __          __    __       _______. __  \n|  |  |  | |  |        |  |  |  |     /       ||  | \n|  |__|  | |  |        |  |__|  |    |   (----`|  | \n|   __   | |  |        |   __   |     \\   \\    |  | \n|  |  |  | |  |  __    |  |  |  | .----)   |   |__| \n|__|  |__| |__| (_ )   |__|  |__| |_______/    (__) \n                 |/                                 \n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nto create a stunning logo, you can use this spring boot banner generator. we hope this small bonus will help you have more fun and remember the structure of a spring boot project!",charsets:{cjk:!0},lastUpdated:"2022/10/12, 17:01:25",lastUpdatedTimestamp:1665565285e3},{title:"Theory：Getting started with Spring Boot",frontmatter:{title:"Theory：Getting started with Spring Boot",date:"2022-07-14T11:00:49.000Z",permalink:"/pages/42710b/",tags:["Framework","Spring boot"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/10.Spring%20boot/67.Theory%EF%BC%9AGetting%20started%20with%20Spring%20Boot.html",relativePath:"01.Java/01.Hyperskill - Java/10.Spring boot/67.Theory：Getting started with Spring Boot.md",key:"v-6be7a9da",path:"/pages/42710b/",headers:[{level:2,title:"Generating a Spring Boot application",slug:"generating-a-spring-boot-application",normalizedTitle:"generating a spring boot application",charIndex:221},{level:2,title:"Running the application",slug:"running-the-application",normalizedTitle:"running the application",charIndex:2075}],headersStr:"Generating a Spring Boot application Running the application",content:"In this topic, you will learn how to create your first Spring Boot application. This application is quite simple and does nothing useful, but still, it will demonstrate the basic structure of any Spring Boot project.\n\n\n# Generating a Spring Boot application\n\nIt is often hard to start a new project from scratch, especially for a beginner. You need to set up the basic structure, create configurations and manage all external dependencies. Fortunately, there is a special web site called Spring Initializr that can generate the basic Spring Boot project based on your wishes.\n\n\n\nThis site may look slightly different, but the general idea remains the same. There are several important options you need to specify before generating a project:\n\n * the build tool: Maven or Gradle\n * one of the possible JVM-based languages: Java (8, 11 or higher), Kotlin, Groovy\n * a version of Spring Boot framework (e.g, the last released version without SNAPSHOT, M and other suffixes).\n * metadata like group, artifact, description and package name\n * external dependencies (other frameworks and libraries)\n\nIf you are interested in the naming rules for Spring Boot versions and the meaning of the diverse suffixes, you can read this short article.\n\nIn our example, we've chosen Gradle as the build tool and Java 11 as the language. You can choose a more recent version if you'd like. Our application is named demo.\n\nBy default, the packaging type for Spring Boot is Jar. It means that your application should be packed in a .jar file that contains all the required dependencies. This type of file is more simple to use than a .war file, which should be deployed on an external application server.\n\nAfter you've chosen all the necessary settings and dependencies, just click Generate Project to get the project's archive. This archive contains the basic structure of a typical Spring Boot application without application logic; it is just a template, you need to write some logic there.\n\nNote that another way to generate a Spring Boot application is to use an IDE like IntelliJ IDEA.\n\n\n# Running the application\n\nAlthough the generated application is useless at the moment, it is a good template to start with.\n\nLet's run it! First, unpack the application and then visit the project's directory. In our examples, we will use Gradle as it is a common build automation system.\n\nFirst, we should build the application:\n\n./gradlew build\n\n\n1\n\n\nIt creates a .jar file using Gradle Wrapper and puts it in the build/libs/ directory. Gradle automatically downloads all the necessary dependencies while building.\n\nWhen finished, it should print:\n\nBUILD SUCCESSFUL in 1s\n\n\n1\n\n\nNow, it is time to run the program represented as a .jar file.\n\njava -jar build/libs/*.jar\n\n\n1\n\n\nAfter running, this application just prints the Spring logo and several log lines that we skipped.\n\n  .   ____          _            __ _ _\n /\\\\ / ___'_ __ _ _(_)_ __  __ _ \\ \\ \\ \\\n( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\\n \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )\n  '  |____| .__|_| |_|_| |_\\__, | / / / /\n =========|_|==============|___/=/_/_/_/\n :: Spring Boot ::                (v2.4.4)\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nYou may also build and start an application using a single line:\n\n./gradlew build && java -jar build/libs/*.jar\n\n\n1\n\n\nCongratulations! You've just created and started your first application using the Spring Boot framework even without a single line of code, except for a pair of commands.",normalizedContent:"in this topic, you will learn how to create your first spring boot application. this application is quite simple and does nothing useful, but still, it will demonstrate the basic structure of any spring boot project.\n\n\n# generating a spring boot application\n\nit is often hard to start a new project from scratch, especially for a beginner. you need to set up the basic structure, create configurations and manage all external dependencies. fortunately, there is a special web site called spring initializr that can generate the basic spring boot project based on your wishes.\n\n\n\nthis site may look slightly different, but the general idea remains the same. there are several important options you need to specify before generating a project:\n\n * the build tool: maven or gradle\n * one of the possible jvm-based languages: java (8, 11 or higher), kotlin, groovy\n * a version of spring boot framework (e.g, the last released version without snapshot, m and other suffixes).\n * metadata like group, artifact, description and package name\n * external dependencies (other frameworks and libraries)\n\nif you are interested in the naming rules for spring boot versions and the meaning of the diverse suffixes, you can read this short article.\n\nin our example, we've chosen gradle as the build tool and java 11 as the language. you can choose a more recent version if you'd like. our application is named demo.\n\nby default, the packaging type for spring boot is jar. it means that your application should be packed in a .jar file that contains all the required dependencies. this type of file is more simple to use than a .war file, which should be deployed on an external application server.\n\nafter you've chosen all the necessary settings and dependencies, just click generate project to get the project's archive. this archive contains the basic structure of a typical spring boot application without application logic; it is just a template, you need to write some logic there.\n\nnote that another way to generate a spring boot application is to use an ide like intellij idea.\n\n\n# running the application\n\nalthough the generated application is useless at the moment, it is a good template to start with.\n\nlet's run it! first, unpack the application and then visit the project's directory. in our examples, we will use gradle as it is a common build automation system.\n\nfirst, we should build the application:\n\n./gradlew build\n\n\n1\n\n\nit creates a .jar file using gradle wrapper and puts it in the build/libs/ directory. gradle automatically downloads all the necessary dependencies while building.\n\nwhen finished, it should print:\n\nbuild successful in 1s\n\n\n1\n\n\nnow, it is time to run the program represented as a .jar file.\n\njava -jar build/libs/*.jar\n\n\n1\n\n\nafter running, this application just prints the spring logo and several log lines that we skipped.\n\n  .   ____          _            __ _ _\n /\\\\ / ___'_ __ _ _(_)_ __  __ _ \\ \\ \\ \\\n( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\\n \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )\n  '  |____| .__|_| |_|_| |_\\__, | / / / /\n =========|_|==============|___/=/_/_/_/\n :: spring boot ::                (v2.4.4)\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nyou may also build and start an application using a single line:\n\n./gradlew build && java -jar build/libs/*.jar\n\n\n1\n\n\ncongratulations! you've just created and started your first application using the spring boot framework even without a single line of code, except for a pair of commands.",charsets:{cjk:!0},lastUpdated:"2022/10/12, 17:01:25",lastUpdatedTimestamp:1665565285e3},{title:"Theory：IoC container",frontmatter:{title:"Theory：IoC container",date:"2022-07-17T11:28:18.000Z",permalink:"/pages/cbd821/",tags:["Framework","Spring boot"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/10.Spring%20boot/70.Theory%EF%BC%9AIoC%20container.html",relativePath:"01.Java/01.Hyperskill - Java/10.Spring boot/70.Theory：IoC container.md",key:"v-13ca1252",path:"/pages/cbd821/",headers:[{level:2,title:"Spring container",slug:"spring-container",normalizedTitle:"spring container",charIndex:776},{level:2,title:"POJO",slug:"pojo",normalizedTitle:"pojo",charIndex:2048},{level:2,title:"Contexts and bean factory",slug:"contexts-and-bean-factory",normalizedTitle:"contexts and bean factory",charIndex:3876},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:5841}],headersStr:"Spring container POJO Contexts and bean factory Conclusion",content:"IoC, which stands for Inversion of Control, is the mechanism used by Spring to implement dependency injection. When we create applications, we often need different objects to implement various functionalities. Some objects will need to use other objects as their dependencies, which in turn may require other objects, and so on. In order to simplify this long and complex process, Spring uses dependency injection.\n\nUsing the IoC process, objects can define the dependencies they need to run successfully. These dependencies are defined through constructor arguments, factory method arguments, or properties set on the object instance. In this topic, we will overview the components of IoC, and see how they work together to create the dependency injection functionality.\n\n\n# Spring container\n\nWhen we need to have a ready-to-use spring application, we need a few components to help implement the required functionality. The image below shows a typical structure of a Spring application.\n\n\n\nLet's start by looking at the Spring container since it is the core of the Spring framework. The Spring container manages the lifecycle application from start to finish. It manages various components created for the application and handles any required dependency injections. The Spring container can be configured through metadata in a number of ways. There are two types of metadata that are used in Spring: XML and annotations. The XML approach involves defining class-related data in an external XML file, which can then be loaded and used in the Spring application.\n\n提示\n\nIn our topics, we use the annotation-based approach, and it is recommended for all new Spring-based applications.\n\nThe annotation-based approach involves adding annotations to simple classes in order to provide context and functionality for Spring. These annotations will start with the @ character, and provide a specific value that we wish to add to our class. These values will allow us to build objects with the required features and configurations. These objects are known as POJO classes, and in the next section, we will see how they fit into the Spring framework.\n\n\n# POJO\n\nIn the previous diagram, we saw that the Spring container takes in a POJO class. The term POJO stands for Plain Old Java Object. A POJO is the most basic type of an object and it contains no ties to frameworks. This means that POJOs are valid objects for any application. The idea of a POJO is that it is the simplest possible unit of code available for an application. They can implement properties, as well as getters and setters for these properties, but cannot extend or implement framework-specific classes and interfaces classes or contain annotations.\n\nThe simplicity of POJO makes them ideal building blocks for any application component we need to implement. Beside POJOs, Spring can use a special type of POJO called JavaBean. With JavaBeans, we add a few more requirements: for example, classes are required to be serializable. In addition, they require private fields and a no-argument constructor to be available. These classes can also be customized and configured using Spring metadata. To do this, we can add various annotations to the classes we create in Spring. For example, the @Bean annotation can be added to a factory method to define that the class it produces is a Spring Bean which means an object managed by the IoC container. With these annotations, it is possible to add any configurations to preexisting classes without the need for creating additional files. This will allow you to take full advantage of the features provided by Spring.\n\nTo sum it all up: POJO is a simple object which doesn't depend on the framework; Java Bean is a POJO with some additional requirements and restrictions; and Spring Bean is POJO or JavaBean created and managed by an instance of the Spring IoC container.\n\n\n# Contexts and bean factory\n\nWhen we work with the Spring IoC, there are two components we should be aware of. The first one is the BeanFactory, an interface that allows for configuration and management of objects. The BeanFactory can be used to produce container-managed objects known as beans, which can organize the backbone of your application. These beans look like regular Java objects, but they can be created during application startup, registered, and injected into different parts of the application by the container.\n\nThe second component is the ApplicationContext, which is a sub-interface of the BeanFactory. The goal of the ApplicationContext is to facilitate integration with Spring's Aspect Oriented Programming (AOP) functionality. This functionality includes a variety of components, ranging from message resource handling to application layer-specific contexts. There are three main ApplicationContext implementations that we typically see in applications:\n\n * FileSystemXmlApplicationContext\n * ClassPathXmlApplicationContext\n * WebApplicationContext\n\nThe FileSystemXmlApplicationContext will load bean definitions from an XML file that is provided as a full file system path to the constructor. This means that beans are initialized based on the contents of a file from the file system of the application that is being run. For ClassPathXmlApplicationContext, beans are still loaded from an XML file, however, the file is provided as the CLASSPATH property rather than a full system path in the constructor. Finally, WebApplicationContext is generally used to set the configuration of a web application in Spring. When using WebApplicationContext, you will often set the servlet configuration within a web.xml file. Inside this file, you can specify configurations for each servlet that the application uses.\n\nWith our ApplicationContext, we can configure the Spring IoC container, allowing us to create an application that is ready for use.\n\n\n# Conclusion\n\nThe IoC container in Spring enables many important mechanisms required to create applications. With the IoC, we can create ApplicationContext objects, which can provide important configurations for the application setup. In addition, it allows us to create POJO objects such as Java beans, which can be used to create our own entities in the application. These entities can help us bring life to our app, and achieve the required functionality for it to do its job the best way possible. You will learn how to use IoC to create Spring Beans in practice in subsequent topics.",normalizedContent:"ioc, which stands for inversion of control, is the mechanism used by spring to implement dependency injection. when we create applications, we often need different objects to implement various functionalities. some objects will need to use other objects as their dependencies, which in turn may require other objects, and so on. in order to simplify this long and complex process, spring uses dependency injection.\n\nusing the ioc process, objects can define the dependencies they need to run successfully. these dependencies are defined through constructor arguments, factory method arguments, or properties set on the object instance. in this topic, we will overview the components of ioc, and see how they work together to create the dependency injection functionality.\n\n\n# spring container\n\nwhen we need to have a ready-to-use spring application, we need a few components to help implement the required functionality. the image below shows a typical structure of a spring application.\n\n\n\nlet's start by looking at the spring container since it is the core of the spring framework. the spring container manages the lifecycle application from start to finish. it manages various components created for the application and handles any required dependency injections. the spring container can be configured through metadata in a number of ways. there are two types of metadata that are used in spring: xml and annotations. the xml approach involves defining class-related data in an external xml file, which can then be loaded and used in the spring application.\n\n提示\n\nin our topics, we use the annotation-based approach, and it is recommended for all new spring-based applications.\n\nthe annotation-based approach involves adding annotations to simple classes in order to provide context and functionality for spring. these annotations will start with the @ character, and provide a specific value that we wish to add to our class. these values will allow us to build objects with the required features and configurations. these objects are known as pojo classes, and in the next section, we will see how they fit into the spring framework.\n\n\n# pojo\n\nin the previous diagram, we saw that the spring container takes in a pojo class. the term pojo stands for plain old java object. a pojo is the most basic type of an object and it contains no ties to frameworks. this means that pojos are valid objects for any application. the idea of a pojo is that it is the simplest possible unit of code available for an application. they can implement properties, as well as getters and setters for these properties, but cannot extend or implement framework-specific classes and interfaces classes or contain annotations.\n\nthe simplicity of pojo makes them ideal building blocks for any application component we need to implement. beside pojos, spring can use a special type of pojo called javabean. with javabeans, we add a few more requirements: for example, classes are required to be serializable. in addition, they require private fields and a no-argument constructor to be available. these classes can also be customized and configured using spring metadata. to do this, we can add various annotations to the classes we create in spring. for example, the @bean annotation can be added to a factory method to define that the class it produces is a spring bean which means an object managed by the ioc container. with these annotations, it is possible to add any configurations to preexisting classes without the need for creating additional files. this will allow you to take full advantage of the features provided by spring.\n\nto sum it all up: pojo is a simple object which doesn't depend on the framework; java bean is a pojo with some additional requirements and restrictions; and spring bean is pojo or javabean created and managed by an instance of the spring ioc container.\n\n\n# contexts and bean factory\n\nwhen we work with the spring ioc, there are two components we should be aware of. the first one is the beanfactory, an interface that allows for configuration and management of objects. the beanfactory can be used to produce container-managed objects known as beans, which can organize the backbone of your application. these beans look like regular java objects, but they can be created during application startup, registered, and injected into different parts of the application by the container.\n\nthe second component is the applicationcontext, which is a sub-interface of the beanfactory. the goal of the applicationcontext is to facilitate integration with spring's aspect oriented programming (aop) functionality. this functionality includes a variety of components, ranging from message resource handling to application layer-specific contexts. there are three main applicationcontext implementations that we typically see in applications:\n\n * filesystemxmlapplicationcontext\n * classpathxmlapplicationcontext\n * webapplicationcontext\n\nthe filesystemxmlapplicationcontext will load bean definitions from an xml file that is provided as a full file system path to the constructor. this means that beans are initialized based on the contents of a file from the file system of the application that is being run. for classpathxmlapplicationcontext, beans are still loaded from an xml file, however, the file is provided as the classpath property rather than a full system path in the constructor. finally, webapplicationcontext is generally used to set the configuration of a web application in spring. when using webapplicationcontext, you will often set the servlet configuration within a web.xml file. inside this file, you can specify configurations for each servlet that the application uses.\n\nwith our applicationcontext, we can configure the spring ioc container, allowing us to create an application that is ready for use.\n\n\n# conclusion\n\nthe ioc container in spring enables many important mechanisms required to create applications. with the ioc, we can create applicationcontext objects, which can provide important configurations for the application setup. in addition, it allows us to create pojo objects such as java beans, which can be used to create our own entities in the application. these entities can help us bring life to our app, and achieve the required functionality for it to do its job the best way possible. you will learn how to use ioc to create spring beans in practice in subsequent topics.",charsets:{cjk:!0},lastUpdated:"2022/10/12, 17:01:25",lastUpdatedTimestamp:1665565285e3},{title:"Theory：Spring beans",frontmatter:{title:"Theory：Spring beans",date:"2022-07-18T15:06:52.000Z",permalink:"/pages/b04d58/",tags:["Framework","Spring boot"]},regularPath:"/01.Java/01.Hyperskill%20-%20Java/10.Spring%20boot/71.Theory%EF%BC%9ASpring%20beans.html",relativePath:"01.Java/01.Hyperskill - Java/10.Spring boot/71.Theory：Spring beans.md",key:"v-5bd35776",path:"/pages/b04d58/",headers:[{level:2,title:"Initial preparations",slug:"initial-preparations",normalizedTitle:"initial preparations",charIndex:1300},{level:2,title:"Declaring beans",slug:"declaring-beans",normalizedTitle:"declaring beans",charIndex:1898},{level:2,title:"Autowiring beans",slug:"autowiring-beans",normalizedTitle:"autowiring beans",charIndex:3367},{level:2,title:"Distinguishing beans of the same type",slug:"distinguishing-beans-of-the-same-type",normalizedTitle:"distinguishing beans of the same type",charIndex:6929},{level:2,title:"Beans vs standard objects",slug:"beans-vs-standard-objects",normalizedTitle:"beans vs standard objects",charIndex:8553},{level:2,title:"Conclusion",slug:"conclusion",normalizedTitle:"conclusion",charIndex:9437}],headersStr:"Initial preparations Declaring beans Autowiring beans Distinguishing beans of the same type Beans vs standard objects Conclusion",content:"We often need to create different objects in an application to use their functionalities. Some of them need other objects as their dependencies, which in turn require other objects and so on. Spring offers a great way to simplify this huge and complicated chain of creating objects. It can create all the necessary objects during the application startup and put them all in a container. Then each class can retrieve any objects it needs from this container, no more creation and initialization constructions are needed!\n\nThese container-managed objects are known as beans and they organize the backbone of your application. They look exactly like standard Java or Kotlin objects but can be created during the application startup, registered, and then injected into different parts of an application by the container.\n\nIn this topic, we will look at how the Spring IoC container helps us initialize and use beans. We are going to start with the simplest possible example to grasp the basic idea and then gradually make it more complicated. Understanding how DI (Dependency Injection) works is crucial for all further topics in our materials. If you are already familiar with Spring or Spring Boot, the information in this topic may seem quite basic, but we hope you'll learn something new anyway!\n\n\n# Initial preparations\n\nBefore you start using beans, make sure that you have the basic Spring Boot application.\n\n@SpringBootApplication\npublic class DemoSpringApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(DemoSpringApplication.class, args);\n    }\n\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nIf you don't have it, you can generate it in your IDE or using this website and then follow the explanation here.\n\nSo, to start using beans, we are going to modify this piece of code and the dependency injection mechanism that is the core part of the entire Spring Boot framework.\n\n\n# Declaring beans\n\nBeans are usually declared in the classes that have the @Configuration annotation, but it is also possible to declare them in the class containing the @SpringBootApplication annotation. In this lesson, we'll learn how to do it in both of these ways.\n\nTo declare a bean, you need to have a method containing the @Bean annotation. The result of executing this method will be a bean that is managed by the IoC container.\n\nHere is an example of a simple bean declared in a configuration class:\n\n@Configuration\npublic class Addresses {\n\n    @Bean\n    public String address() {\n        return \"Green Street, 102\";\n    }\n\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nThis means that when you start the application, there will be a manageable string bean named address that contains the value \"Green Street, 102\". Spring automatically invokes the method with the @Bean annotation during the startup in order to initialize all the declared beans.\n\n提示\n\nBy default, beans are singletons. It means that there is only one object for the whole application. But this default behavior can be changed. You will learn more about it in the following topics.\n\nBy default, the name of a bean is the same as the name of the method that produces it. However, the @Bean annotation allows you to rename it not to depend on the name of the method. All you need to do is specify the new name in the annotation, for example @Bean(\"greenStreet\"). In this case, the name of the bean is greenStreet.\n\n\n# Autowiring beans\n\nNow that you have declared a bean, you can use it to create other beans that depend on it.\n\nThe Spring IoC container provides the dependency injection (DI) mechanism that allows us to do that. A bean that has a suitable type can be automatically injected into a method annotated with @Bean. There is also the @Autowired annotation that marks a constructor, a field, or a method as to be injected by Spring's DI.\n\nIn this next example, let's introduce an additional class that represents customers.\n\nclass Customer {\n    private final String name;\n    private final String address;\n\n    Customer(String name, String address) {\n        this.name = name;\n        this.address = address;\n    }\n\n    // getters\n\n    @Override\n    public String toString() {\n        return \"Customer{\" +\n                \"name='\" + name + '\\'' +\n                \", address='\" + address + '\\'' +\n                '}';\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\nThis class includes the address field which we are going to get from our previous bean to create a new Customer object.\n\n注意\n\nConsidering that this is only the first topic about beans, for simplicity, all the following methods will be declared in the class annotated with @SpringBootApplication. However, in real-world applications, you will often see bean-annotated methods declared in @Configuration classes.\n\nHere is a method that returns an object of this class as a bean. The @Autowired annotation marks the method parameter to be automatically injected.\n\n@SpringBootApplication\npublic class DemoSpringApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(DemoSpringApplication.class, args);\n    }\n\n    @Bean\n    public Customer customer(@Autowired String address) {\n        return new Customer(\"Clara Foster\", address);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nSpring DI injects the address bean into this method and this bean can be used to construct a new object of the Customer class. The injection works because the type of the bean we need is the same as the type of the bean produced earlier, and Spring Container can inject that bean. Even if the argument had another name (e.g. addr), this code would work as expected.\n\n提示\n\nThe @Autowired annotation is not always required to inject a bean. Spring will inject an appropriate bean anyway if a method has the @Bean annotation (or some others). We are always going to explicitly use this annotation in our examples to make the explanation easier for beginners. When you get more experience with Spring, you can decide whether to avoid this annotation.\n\nYou may wonder how we can be sure that both of the methods are invoked and the beans are successfully created. There is no need to introduce any new concepts — we can just create the third temporary bean depending on Customer and print the autowired bean. Add it in the same class where you've put the previous bean.\n\n@Bean\npublic Customer temporary(@Autowired Customer customer) {\n    System.out.println(customer);\n    return customer;\n}\n\n\n1\n2\n3\n4\n5\n\n\nNow if you run the application, you will see the information about the customer in the log.\n\nCustomer{name='Clara Foster', address='Green Street, 102'}\n\n\n1\n\n\nKeep in mind that Spring prints a lot of log messages, and this info will be among them because beans are initializated during the application startup.\n\nIt means that Spring IoC correctly created all our beans and the beans are injected successfully.\n\nThere are no restrictions on the number of bean injection points in the code.\n\n\n# Distinguishing beans of the same type\n\nAs we mentioned before, the location of an injection point is determined by the type of bean. But what if we have several beans of the same type and want to use a particular one? Fortunately, there is the @Qualifier annotation that allows us to specify the name of the bean we need to use.\n\n@Bean\npublic String address1() {\n    return \"Green Street, 102\";\n}\n\n@Bean\npublic String address2() {\n    return \"Apple Street, 15\";\n}\n\n@Bean\npublic Customer customer(@Qualifier(\"address2\") String address) {\n    return new Customer(\"Clara Foster\", address);\n}\n\n@Bean\npublic Customer temporary(@Autowired Customer customer) {\n    // Customer{name='Clara Foster', address='Apple Street, 15'}\n    System.out.println(customer); \n    return customer;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\nIn this example, we specify the name of the bean we need to use to build the customer. The last bean named temporary is created only to print the information during the startup of the application.\n\nIf we deleted the @Qualifier from the customer method, the application wouldn't start and we'd get an error that there are several beans that can be injected:\n\nParameter 0 of method customer in org.hyperskill.beans.DemoSpringApplication \nrequired a single bean, but 2 were found:\n  - address1: defined by method 'address1' in org.hyperskill.beans.DemoSpringApplication\n  - address2: defined by method 'address2' in org.hyperskill.beans.DemoSpringApplication\n\n\n1\n2\n3\n4\n\n\nSo, if this error occurs, you just need to determine which bean you want to use and apply the @Qualifier annotation.\n\n\n# Beans vs standard objects\n\nNow you have a general idea of what Spring beans are and how to use them. But should you always use only beans in Spring and forget about standard objects? The answer is no. You can still use standard objects by creating them manually following the object-oriented programming approach:\n\nString address = \"Green Street, 102\";\nCustomer customer = new Customer(\"Clara Foster\", address);\n\n\n1\n2\n\n\nIn real applications, beans are usually used to form a backbone of your app and separate it by layers and configuration files, but most domain objects (like students, accounts, courses, etc.) are standard objects. In this topic, we deliberately used rather synthetic examples to show the logic behind beans without additional complexity. In the following topics, you will encounter a lot of examples where beans are much more convenient than standard objects.\n\n\n# Conclusion\n\nIn this topic, you've learned about the capability of the Spring IoC container to create and inject beans on startup. Usually, beans are declared in classes annotated with the @Configuration annotation, but they can also be declared in the class annotated with the @SpringBootApplication. To declare a bean, you should create a method that has the @Bean annotation, and the result of this method will be a managed bean. The @Autowired annotation is used to mark that there is a bean injection expected and the @Qualifier annotation can help us specify the name of the bean to be injected in case of ambiguous situations.",normalizedContent:"we often need to create different objects in an application to use their functionalities. some of them need other objects as their dependencies, which in turn require other objects and so on. spring offers a great way to simplify this huge and complicated chain of creating objects. it can create all the necessary objects during the application startup and put them all in a container. then each class can retrieve any objects it needs from this container, no more creation and initialization constructions are needed!\n\nthese container-managed objects are known as beans and they organize the backbone of your application. they look exactly like standard java or kotlin objects but can be created during the application startup, registered, and then injected into different parts of an application by the container.\n\nin this topic, we will look at how the spring ioc container helps us initialize and use beans. we are going to start with the simplest possible example to grasp the basic idea and then gradually make it more complicated. understanding how di (dependency injection) works is crucial for all further topics in our materials. if you are already familiar with spring or spring boot, the information in this topic may seem quite basic, but we hope you'll learn something new anyway!\n\n\n# initial preparations\n\nbefore you start using beans, make sure that you have the basic spring boot application.\n\n@springbootapplication\npublic class demospringapplication {\n\n    public static void main(string[] args) {\n        springapplication.run(demospringapplication.class, args);\n    }\n\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nif you don't have it, you can generate it in your ide or using this website and then follow the explanation here.\n\nso, to start using beans, we are going to modify this piece of code and the dependency injection mechanism that is the core part of the entire spring boot framework.\n\n\n# declaring beans\n\nbeans are usually declared in the classes that have the @configuration annotation, but it is also possible to declare them in the class containing the @springbootapplication annotation. in this lesson, we'll learn how to do it in both of these ways.\n\nto declare a bean, you need to have a method containing the @bean annotation. the result of executing this method will be a bean that is managed by the ioc container.\n\nhere is an example of a simple bean declared in a configuration class:\n\n@configuration\npublic class addresses {\n\n    @bean\n    public string address() {\n        return \"green street, 102\";\n    }\n\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nthis means that when you start the application, there will be a manageable string bean named address that contains the value \"green street, 102\". spring automatically invokes the method with the @bean annotation during the startup in order to initialize all the declared beans.\n\n提示\n\nby default, beans are singletons. it means that there is only one object for the whole application. but this default behavior can be changed. you will learn more about it in the following topics.\n\nby default, the name of a bean is the same as the name of the method that produces it. however, the @bean annotation allows you to rename it not to depend on the name of the method. all you need to do is specify the new name in the annotation, for example @bean(\"greenstreet\"). in this case, the name of the bean is greenstreet.\n\n\n# autowiring beans\n\nnow that you have declared a bean, you can use it to create other beans that depend on it.\n\nthe spring ioc container provides the dependency injection (di) mechanism that allows us to do that. a bean that has a suitable type can be automatically injected into a method annotated with @bean. there is also the @autowired annotation that marks a constructor, a field, or a method as to be injected by spring's di.\n\nin this next example, let's introduce an additional class that represents customers.\n\nclass customer {\n    private final string name;\n    private final string address;\n\n    customer(string name, string address) {\n        this.name = name;\n        this.address = address;\n    }\n\n    // getters\n\n    @override\n    public string tostring() {\n        return \"customer{\" +\n                \"name='\" + name + '\\'' +\n                \", address='\" + address + '\\'' +\n                '}';\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\nthis class includes the address field which we are going to get from our previous bean to create a new customer object.\n\n注意\n\nconsidering that this is only the first topic about beans, for simplicity, all the following methods will be declared in the class annotated with @springbootapplication. however, in real-world applications, you will often see bean-annotated methods declared in @configuration classes.\n\nhere is a method that returns an object of this class as a bean. the @autowired annotation marks the method parameter to be automatically injected.\n\n@springbootapplication\npublic class demospringapplication {\n\n    public static void main(string[] args) {\n        springapplication.run(demospringapplication.class, args);\n    }\n\n    @bean\n    public customer customer(@autowired string address) {\n        return new customer(\"clara foster\", address);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nspring di injects the address bean into this method and this bean can be used to construct a new object of the customer class. the injection works because the type of the bean we need is the same as the type of the bean produced earlier, and spring container can inject that bean. even if the argument had another name (e.g. addr), this code would work as expected.\n\n提示\n\nthe @autowired annotation is not always required to inject a bean. spring will inject an appropriate bean anyway if a method has the @bean annotation (or some others). we are always going to explicitly use this annotation in our examples to make the explanation easier for beginners. when you get more experience with spring, you can decide whether to avoid this annotation.\n\nyou may wonder how we can be sure that both of the methods are invoked and the beans are successfully created. there is no need to introduce any new concepts — we can just create the third temporary bean depending on customer and print the autowired bean. add it in the same class where you've put the previous bean.\n\n@bean\npublic customer temporary(@autowired customer customer) {\n    system.out.println(customer);\n    return customer;\n}\n\n\n1\n2\n3\n4\n5\n\n\nnow if you run the application, you will see the information about the customer in the log.\n\ncustomer{name='clara foster', address='green street, 102'}\n\n\n1\n\n\nkeep in mind that spring prints a lot of log messages, and this info will be among them because beans are initializated during the application startup.\n\nit means that spring ioc correctly created all our beans and the beans are injected successfully.\n\nthere are no restrictions on the number of bean injection points in the code.\n\n\n# distinguishing beans of the same type\n\nas we mentioned before, the location of an injection point is determined by the type of bean. but what if we have several beans of the same type and want to use a particular one? fortunately, there is the @qualifier annotation that allows us to specify the name of the bean we need to use.\n\n@bean\npublic string address1() {\n    return \"green street, 102\";\n}\n\n@bean\npublic string address2() {\n    return \"apple street, 15\";\n}\n\n@bean\npublic customer customer(@qualifier(\"address2\") string address) {\n    return new customer(\"clara foster\", address);\n}\n\n@bean\npublic customer temporary(@autowired customer customer) {\n    // customer{name='clara foster', address='apple street, 15'}\n    system.out.println(customer); \n    return customer;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\nin this example, we specify the name of the bean we need to use to build the customer. the last bean named temporary is created only to print the information during the startup of the application.\n\nif we deleted the @qualifier from the customer method, the application wouldn't start and we'd get an error that there are several beans that can be injected:\n\nparameter 0 of method customer in org.hyperskill.beans.demospringapplication \nrequired a single bean, but 2 were found:\n  - address1: defined by method 'address1' in org.hyperskill.beans.demospringapplication\n  - address2: defined by method 'address2' in org.hyperskill.beans.demospringapplication\n\n\n1\n2\n3\n4\n\n\nso, if this error occurs, you just need to determine which bean you want to use and apply the @qualifier annotation.\n\n\n# beans vs standard objects\n\nnow you have a general idea of what spring beans are and how to use them. but should you always use only beans in spring and forget about standard objects? the answer is no. you can still use standard objects by creating them manually following the object-oriented programming approach:\n\nstring address = \"green street, 102\";\ncustomer customer = new customer(\"clara foster\", address);\n\n\n1\n2\n\n\nin real applications, beans are usually used to form a backbone of your app and separate it by layers and configuration files, but most domain objects (like students, accounts, courses, etc.) are standard objects. in this topic, we deliberately used rather synthetic examples to show the logic behind beans without additional complexity. in the following topics, you will encounter a lot of examples where beans are much more convenient than standard objects.\n\n\n# conclusion\n\nin this topic, you've learned about the capability of the spring ioc container to create and inject beans on startup. usually, beans are declared in classes annotated with the @configuration annotation, but they can also be declared in the class annotated with the @springbootapplication. to declare a bean, you should create a method that has the @bean annotation, and the result of this method will be a managed bean. the @autowired annotation is used to mark that there is a bean injection expected and the @qualifier annotation can help us specify the name of the bean to be injected in case of ambiguous situations.",charsets:{cjk:!0},lastUpdated:"2022/10/12, 17:01:25",lastUpdatedTimestamp:1665565285e3},{title:"What does the method print",frontmatter:{title:"What does the method print",date:"2022-05-01T15:49:25.000Z",permalink:"/pages/dcd812/",tags:["Java","Array","Problem"]},regularPath:"/01.Java/03.%E7%BB%83%E4%B9%A0%E9%A2%98/01.%E9%80%89%E6%8B%A9%E9%A2%98%20&%20%E5%A1%AB%E7%A9%BA%E9%A2%98/03.What%20does%20the%20method%20print.html",relativePath:"01.Java/03.练习题/01.选择题 & 填空题/03.What does the method print.md",key:"v-2487e57e",path:"/pages/dcd812/",headers:[{level:2,title:"Topic",slug:"topic",normalizedTitle:"topic",charIndex:2},{level:2,title:"Problem",slug:"problem",normalizedTitle:"problem",charIndex:34},{level:2,title:"Hint & Explain",slug:"hint-explain",normalizedTitle:"hint &amp; explain",charIndex:null}],headersStr:"Topic Problem Hint & Explain",content:"# Topic\n\nArrays as parameters\n\n\n# Problem\n\nWhat does the method print\n\nHere is a method that takes an array:\n\npublic static void method(int[] array) {\n    array = new int[] { 1, 2, 3 };\n}\n\n\n1\n2\n3\n\n\nWe invoke this method inside another one:\n\nint[] numbers = { 4, 5, 6 };\n\n\nmethod(numbers);\n\n\nSystem.out.println(Arrays.toString(numbers));\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nWhat does this code print to the standard output?\n\nSelect one option from the list\n\n[x] [4, 5, 6]\n[ ] The code can't be compiled.\n[ ] [ ]\n[ ] [1, 2, 3, 4, 5, 6]\n[ ] It throws an exception.\n[ ] [1, 2, 3]\n\n\n1\n2\n3\n4\n5\n6\n\n\nCorrect.\n\nThe correct answer is [4, 5, 6] .\n\nPractice makes perfect. Good for you for not giving up easily!\n\n\n# Hint & Explain\n\n> We pass the reference of 'numbers' to the method. Let's say it's XYZ999. The variable 'array' within the method get's a copy of it. So before any statement within the method is executed, we have 'numbers' with reference XYZ999 and 'array' (in scope of the method) with reference XYZ999. XYZ999 points to the place, where the actual values (4, 5, 6) are saved.\n> \n> Then we instance 'array' with \"array = new int[] { 1, 2, 3 }\". With that, 'array' get's a new reference because we do instance it. Let's say ABC888. We have now 'array' with reference ABC888 which point to the place, where the actual values (1, 2, 3) are saved.\n> \n> AND we still have 'numbers' with reference XYZ999 which points to (4, 5, 6). That's why printing 'numbers' print .....",normalizedContent:"# topic\n\narrays as parameters\n\n\n# problem\n\nwhat does the method print\n\nhere is a method that takes an array:\n\npublic static void method(int[] array) {\n    array = new int[] { 1, 2, 3 };\n}\n\n\n1\n2\n3\n\n\nwe invoke this method inside another one:\n\nint[] numbers = { 4, 5, 6 };\n\n\nmethod(numbers);\n\n\nsystem.out.println(arrays.tostring(numbers));\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nwhat does this code print to the standard output?\n\nselect one option from the list\n\n[x] [4, 5, 6]\n[ ] the code can't be compiled.\n[ ] [ ]\n[ ] [1, 2, 3, 4, 5, 6]\n[ ] it throws an exception.\n[ ] [1, 2, 3]\n\n\n1\n2\n3\n4\n5\n6\n\n\ncorrect.\n\nthe correct answer is [4, 5, 6] .\n\npractice makes perfect. good for you for not giving up easily!\n\n\n# hint & explain\n\n> we pass the reference of 'numbers' to the method. let's say it's xyz999. the variable 'array' within the method get's a copy of it. so before any statement within the method is executed, we have 'numbers' with reference xyz999 and 'array' (in scope of the method) with reference xyz999. xyz999 points to the place, where the actual values (4, 5, 6) are saved.\n> \n> then we instance 'array' with \"array = new int[] { 1, 2, 3 }\". with that, 'array' get's a new reference because we do instance it. let's say abc888. we have now 'array' with reference abc888 which point to the place, where the actual values (1, 2, 3) are saved.\n> \n> and we still have 'numbers' with reference xyz999 which points to (4, 5, 6). that's why printing 'numbers' print .....",charsets:{},lastUpdated:"2022/09/25, 10:41:23",lastUpdatedTimestamp:1664073683e3},{title:"Varargs method invocation",frontmatter:{title:"Varargs method invocation",date:"2022-05-06T20:13:13.000Z",permalink:"/pages/f5b04f/",tags:["Java","Problem"]},regularPath:"/01.Java/03.%E7%BB%83%E4%B9%A0%E9%A2%98/01.%E9%80%89%E6%8B%A9%E9%A2%98%20&%20%E5%A1%AB%E7%A9%BA%E9%A2%98/05.Varargs%20method%20invocation.html",relativePath:"01.Java/03.练习题/01.选择题 & 填空题/05.Varargs method invocation.md",key:"v-b5868b80",path:"/pages/f5b04f/",headers:[{level:2,title:"Topic",slug:"topic",normalizedTitle:"topic",charIndex:2},{level:2,title:"Problem",slug:"problem",normalizedTitle:"problem",charIndex:34},{level:2,title:"Hint & Explain",slug:"hint-explain",normalizedTitle:"hint &amp; explain",charIndex:null}],headersStr:"Topic Problem Hint & Explain",content:"# Topic\n\nArrays as parameters\n\n\n# Problem\n\nVarargs method invocation\n\nYou are given a method with the following declaration:\n\npublic static int method(int[] array, int... vararg) { return 1; }\n\n\n1\n\n\nSelect all correct ways to invoke this method.\n\n[x] method(new int[] { 1, 2, 3 }, new int[] { 4, 5, 6 });\n[ ] method(1, 2, 3);\n[x] method(new int[] { 1, 2, 3 });\n[x] method(new int[] { 1, 2, 3 }, 4, 5);\n[ ] method();\n\n\n1\n2\n3\n4\n5\n\n\nCorrect.\n\n\n# Hint & Explain\n\n> U can pass also nothing to the vararg argument\n\n> Vararg accepts both a sequence of integers and an array of integers.",normalizedContent:"# topic\n\narrays as parameters\n\n\n# problem\n\nvarargs method invocation\n\nyou are given a method with the following declaration:\n\npublic static int method(int[] array, int... vararg) { return 1; }\n\n\n1\n\n\nselect all correct ways to invoke this method.\n\n[x] method(new int[] { 1, 2, 3 }, new int[] { 4, 5, 6 });\n[ ] method(1, 2, 3);\n[x] method(new int[] { 1, 2, 3 });\n[x] method(new int[] { 1, 2, 3 }, 4, 5);\n[ ] method();\n\n\n1\n2\n3\n4\n5\n\n\ncorrect.\n\n\n# hint & explain\n\n> u can pass also nothing to the vararg argument\n\n> vararg accepts both a sequence of integers and an array of integers.",charsets:{},lastUpdated:"2022/09/25, 10:41:23",lastUpdatedTimestamp:1664073683e3},{title:"Appending strings and ints",frontmatter:{title:"Appending strings and ints",date:"2022-05-04T17:34:05.000Z",permalink:"/pages/a23fa8/",tags:["Java","Problem"]},regularPath:"/01.Java/03.%E7%BB%83%E4%B9%A0%E9%A2%98/01.%E9%80%89%E6%8B%A9%E9%A2%98%20&%20%E5%A1%AB%E7%A9%BA%E9%A2%98/04.Appending%20strings%20and%20ints.html",relativePath:"01.Java/03.练习题/01.选择题 & 填空题/04.Appending strings and ints.md",key:"v-72ce9c15",path:"/pages/a23fa8/",headers:[{level:2,title:"Topic",slug:"topic",normalizedTitle:"topic",charIndex:2},{level:2,title:"Problem",slug:"problem",normalizedTitle:"problem",charIndex:20},{level:2,title:"Hint & Explain",slug:"hint-explain",normalizedTitle:"hint &amp; explain",charIndex:null}],headersStr:"Topic Problem Hint & Explain",content:'# Topic\n\nString\n\n\n# Problem\n\nAppending strings and ints\n\nSelect all lines that print 222.\n\nSystem.out.println(1 + 1 + "2" + 2);\nSystem.out.println(2 + 2 + "2");\nSystem.out.println("2" + 2 + 2);\nSystem.out.println("2" + 2 + 1 + 1);\n\n\n1\n2\n3\n4\n\n\nSelect one or more options from the list\n\n[x] 1\n[ ] 2\n[x] 3\n[ ] 4\n\n\n1\n2\n3\n4\n\n\nCorrect.\n\n\n# Hint & Explain\n\n> In this question,I learnt that integers act as integers,that is, they get added when they are in front of any character or string,but if they are present after any character,they act like strings and concatenate....😃',normalizedContent:'# topic\n\nstring\n\n\n# problem\n\nappending strings and ints\n\nselect all lines that print 222.\n\nsystem.out.println(1 + 1 + "2" + 2);\nsystem.out.println(2 + 2 + "2");\nsystem.out.println("2" + 2 + 2);\nsystem.out.println("2" + 2 + 1 + 1);\n\n\n1\n2\n3\n4\n\n\nselect one or more options from the list\n\n[x] 1\n[ ] 2\n[x] 3\n[ ] 4\n\n\n1\n2\n3\n4\n\n\ncorrect.\n\n\n# hint & explain\n\n> in this question,i learnt that integers act as integers,that is, they get added when they are in front of any character or string,but if they are present after any character,they act like strings and concatenate....😃',charsets:{},lastUpdated:"2022/09/25, 10:41:23",lastUpdatedTimestamp:1664073683e3},{title:"Good reasons to use Java modules",frontmatter:{title:"Good reasons to use Java modules",date:"2022-07-21T16:39:50.000Z",permalink:"/pages/4b0b03/",tags:["Problem"]},regularPath:"/01.Java/03.%E7%BB%83%E4%B9%A0%E9%A2%98/01.%E9%80%89%E6%8B%A9%E9%A2%98%20&%20%E5%A1%AB%E7%A9%BA%E9%A2%98/10.Good%20reasons%20to%20use%20Java%20modules.html",relativePath:"01.Java/03.练习题/01.选择题 & 填空题/10.Good reasons to use Java modules.md",key:"v-79a39361",path:"/pages/4b0b03/",headers:[{level:2,title:"Topic",slug:"topic",normalizedTitle:"topic",charIndex:2},{level:2,title:"Problem",slug:"problem",normalizedTitle:"problem",charIndex:21},{level:2,title:"Hint & Explain",slug:"hint-explain",normalizedTitle:"hint &amp; explain",charIndex:null}],headersStr:"Topic Problem Hint & Explain",content:"# Topic\n\nModules\n\n\n# Problem\n\n# Good reasons to use Java modules\n\nWhy would you want to use Java modules in your application?\n\nSelect one or more options from the list\n\n[] You want to be able to post your code to GitHub\n\n[] You want the JVM to check for dependencies during runtime as it needs them\n\n[x] You want your private classes, methods, and fields to be truly private\n\n[] You want other developers to be able to access all of your code via reflection\n\n[x] You want your program to run even if the user doesn't have the JRE installed\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nCorrect.\n\n\n# Hint & Explain\n\nthink of independent program & encapsulation",normalizedContent:"# topic\n\nmodules\n\n\n# problem\n\n# good reasons to use java modules\n\nwhy would you want to use java modules in your application?\n\nselect one or more options from the list\n\n[] you want to be able to post your code to github\n\n[] you want the jvm to check for dependencies during runtime as it needs them\n\n[x] you want your private classes, methods, and fields to be truly private\n\n[] you want other developers to be able to access all of your code via reflection\n\n[x] you want your program to run even if the user doesn't have the jre installed\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\ncorrect.\n\n\n# hint & explain\n\nthink of independent program & encapsulation",charsets:{},lastUpdated:"2022/09/25, 10:41:23",lastUpdatedTimestamp:1664073683e3},{title:"Number generators",frontmatter:{title:"Number generators",date:"2022-07-22T14:26:55.000Z",permalink:"/pages/d963c7/",tags:["Problem"]},regularPath:"/01.Java/03.%E7%BB%83%E4%B9%A0%E9%A2%98/01.%E9%80%89%E6%8B%A9%E9%A2%98%20&%20%E5%A1%AB%E7%A9%BA%E9%A2%98/11.Number%20generators.html",relativePath:"01.Java/03.练习题/01.选择题 & 填空题/11.Number generators.md",key:"v-ff940602",path:"/pages/d963c7/",headers:[{level:2,title:"Topic",slug:"topic",normalizedTitle:"topic",charIndex:2},{level:2,title:"Problem",slug:"problem",normalizedTitle:"problem",charIndex:26},{level:2,title:"Hint & Explain",slug:"hint-explain",normalizedTitle:"hint &amp; explain",charIndex:null}],headersStr:"Topic Problem Hint & Explain",content:"# Topic\n\nPolymorphism\n\n\n# Problem\n\n# Number generators\n\nHere's a class hierarchy of magic number generators.\n\nclass BaseNumberGenerator {\n    \n    protected int base;\n    \n    public BaseNumberGenerator(int base) {\n        this.base = base;\n    }\n    \n    public int generate() {\n        return base + 11;\n    }\n}\n\nclass NumberGenerator extends BaseNumberGenerator {\n    \n    \n    public NumberGenerator(int base) {\n        super(base);\n    }\n    \n    @Override\n    public int generate() {\n        \n        return super.generate() + getNumber();\n    }\n    \n    \n    protected int getNumber() {\n        return this.base - 7;\n    }\n}\n\nclass MagicNumberGenerator extends NumberGenerator {\n    \n    \n    public MagicNumberGenerator(int base) {\n        super(base);\n    }\n    \n    @Override\n    protected int getNumber() {\n        return this.base + 7;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n\n\nYou have an instance:\n\nBaseNumberGenerator generator = new MagicNumberGenerator(10);\n\n\n1\n\n\nEnter the result of invoking generator.generate().\n\nEnter a number:\n\n38\n\n\n1\n\n\nCorrect.\n\n\n# Hint & Explain\n\n> If the subclass has a method which is called, then the program will use it.",normalizedContent:"# topic\n\npolymorphism\n\n\n# problem\n\n# number generators\n\nhere's a class hierarchy of magic number generators.\n\nclass basenumbergenerator {\n    \n    protected int base;\n    \n    public basenumbergenerator(int base) {\n        this.base = base;\n    }\n    \n    public int generate() {\n        return base + 11;\n    }\n}\n\nclass numbergenerator extends basenumbergenerator {\n    \n    \n    public numbergenerator(int base) {\n        super(base);\n    }\n    \n    @override\n    public int generate() {\n        \n        return super.generate() + getnumber();\n    }\n    \n    \n    protected int getnumber() {\n        return this.base - 7;\n    }\n}\n\nclass magicnumbergenerator extends numbergenerator {\n    \n    \n    public magicnumbergenerator(int base) {\n        super(base);\n    }\n    \n    @override\n    protected int getnumber() {\n        return this.base + 7;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n\n\nyou have an instance:\n\nbasenumbergenerator generator = new magicnumbergenerator(10);\n\n\n1\n\n\nenter the result of invoking generator.generate().\n\nenter a number:\n\n38\n\n\n1\n\n\ncorrect.\n\n\n# hint & explain\n\n> if the subclass has a method which is called, then the program will use it.",charsets:{},lastUpdated:"2022/09/25, 10:41:23",lastUpdatedTimestamp:1664073683e3},{title:"When the keyword cannot be used",frontmatter:{title:"When the keyword cannot be used",date:"2022-09-09T22:38:14.000Z",permalink:"/pages/ae9539/",tags:["Java","Problem"]},regularPath:"/01.Java/03.%E7%BB%83%E4%B9%A0%E9%A2%98/01.%E9%80%89%E6%8B%A9%E9%A2%98%20&%20%E5%A1%AB%E7%A9%BA%E9%A2%98/15.When%20the%20keyword%20cannot%20be%20used.html",relativePath:"01.Java/03.练习题/01.选择题 & 填空题/15.When the keyword cannot be used.md",key:"v-7e5142ed",path:"/pages/ae9539/",headers:[{level:2,title:"Topic",slug:"topic",normalizedTitle:"topic",charIndex:2},{level:2,title:"Problem",slug:"problem",normalizedTitle:"problem",charIndex:31},{level:2,title:"Hint & Explain",slug:"hint-explain",normalizedTitle:"hint &amp; explain",charIndex:null}],headersStr:"Topic Problem Hint & Explain",content:"# Topic\n\nThe keyword super\n\n\n# Problem\n\nWhen the keyword cannot be used\n\nGiven the following class hierarchy, select all illegal usages of the keyword super:\n\nclass A {\n\n    protected int a;\n}\n\nclass B extends A {\n\n    protected int b;\n    \n    public B(int a, int b) {\n        super();     // 1\n        super.a = a; // 2\n        super.b = b; // 3\n    }\n}\n\nclass C extends B {\n\n    protected int c;\n\n    public C(int a, int b) {\n        super(a); // 4\n    }\n    \n    public C(int a) {\n        super(a, 10); // 5\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\nSelect one or more options from the list\n\n[] 1\n[] 2\n[x] 3\n[x] 4\n[] 5\n\n\n1\n2\n3\n4\n5\n\n\nCorrect.\n\n\n# Hint & Explain\n\n> Check whether the parent has the same type/number of parameterized constructors or not.",normalizedContent:"# topic\n\nthe keyword super\n\n\n# problem\n\nwhen the keyword cannot be used\n\ngiven the following class hierarchy, select all illegal usages of the keyword super:\n\nclass a {\n\n    protected int a;\n}\n\nclass b extends a {\n\n    protected int b;\n    \n    public b(int a, int b) {\n        super();     // 1\n        super.a = a; // 2\n        super.b = b; // 3\n    }\n}\n\nclass c extends b {\n\n    protected int c;\n\n    public c(int a, int b) {\n        super(a); // 4\n    }\n    \n    public c(int a) {\n        super(a, 10); // 5\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\nselect one or more options from the list\n\n[] 1\n[] 2\n[x] 3\n[x] 4\n[] 5\n\n\n1\n2\n3\n4\n5\n\n\ncorrect.\n\n\n# hint & explain\n\n> check whether the parent has the same type/number of parameterized constructors or not.",charsets:{},lastUpdated:"2022/09/25, 10:41:23",lastUpdatedTimestamp:1664073683e3},{title:"Size and capacity",frontmatter:{title:"Size and capacity",date:"2022-09-24T23:33:57.000Z",permalink:"/pages/c46e82/",tags:["Problem","Data structure"]},regularPath:"/01.Java/03.%E7%BB%83%E4%B9%A0%E9%A2%98/01.%E9%80%89%E6%8B%A9%E9%A2%98%20&%20%E5%A1%AB%E7%A9%BA%E9%A2%98/16.Size%20and%20capacity.html",relativePath:"01.Java/03.练习题/01.选择题 & 填空题/16.Size and capacity.md",key:"v-37d4487c",path:"/pages/c46e82/",headers:[{level:2,title:"Topic",slug:"topic",normalizedTitle:"topic",charIndex:2},{level:2,title:"Problem",slug:"problem",normalizedTitle:"problem",charIndex:27},{level:2,title:"Hint & Explain",slug:"hint-explain",normalizedTitle:"hint &amp; explain",charIndex:null}],headersStr:"Topic Problem Hint & Explain",content:'# Topic\n\nDynamic array\n\n\n# Problem\n\nSize and capacity\n\nAssume that for a dynamic array of size 22 and capacity 44 we perform the following sequence of operations:\n\nadd 7\nadd 1\nadd 3\ninsert 4 3\nadd 6\nadd 7\nadd 8\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nHere "add x" means "add an element x to the end of the array" and "insert x i" means "add an element x at the specified index i".\n\nOnce all operations are performed, what will be the difference between the capacity of the new array (new_capacity) and its size (new_size)? Print this number in the field below.\n\nAssume that the scaling factor for the array is 22. Also note that every time you increase the array\'s capacity, it becomes twice as big as the capacity of the array at the previous step, rather than the initial array\'s capacity.\n\nEnter a number:\n\n7\n\nCorrect.\n\n\n# Hint & Explain\n\n> // The task only confuses, but does not help !\n> \n>     add(7); // size == 3; capacity == 4\n>     add(1); // size == 4; capacity == 4\n>     add(3); // size == 5; capacity == 8\n>             \n>     insert (3, 4); // size == 6; capacity == 8 !!! Insert !! not set. The array is being shifted\n>             \n>     add(6); // size == 7; capacity == 8\n>     add(7); // size == 8; capacity == 8\n>     add(8); // size == 9; capacity == 16\n>             \n>     // size == 9; capacity == 16\n>    // 16 - 9 = ?',normalizedContent:'# topic\n\ndynamic array\n\n\n# problem\n\nsize and capacity\n\nassume that for a dynamic array of size 22 and capacity 44 we perform the following sequence of operations:\n\nadd 7\nadd 1\nadd 3\ninsert 4 3\nadd 6\nadd 7\nadd 8\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nhere "add x" means "add an element x to the end of the array" and "insert x i" means "add an element x at the specified index i".\n\nonce all operations are performed, what will be the difference between the capacity of the new array (new_capacity) and its size (new_size)? print this number in the field below.\n\nassume that the scaling factor for the array is 22. also note that every time you increase the array\'s capacity, it becomes twice as big as the capacity of the array at the previous step, rather than the initial array\'s capacity.\n\nenter a number:\n\n7\n\ncorrect.\n\n\n# hint & explain\n\n> // the task only confuses, but does not help !\n> \n>     add(7); // size == 3; capacity == 4\n>     add(1); // size == 4; capacity == 4\n>     add(3); // size == 5; capacity == 8\n>             \n>     insert (3, 4); // size == 6; capacity == 8 !!! insert !! not set. the array is being shifted\n>             \n>     add(6); // size == 7; capacity == 8\n>     add(7); // size == 8; capacity == 8\n>     add(8); // size == 9; capacity == 16\n>             \n>     // size == 9; capacity == 16\n>    // 16 - 9 = ?',charsets:{},lastUpdated:"2022/09/25, 10:41:23",lastUpdatedTimestamp:1664073683e3},{title:"The number of copies",frontmatter:{title:"The number of copies",date:"2022-09-24T23:38:42.000Z",permalink:"/pages/bdd44c/",tags:["Problem","Data structure"]},regularPath:"/01.Java/03.%E7%BB%83%E4%B9%A0%E9%A2%98/01.%E9%80%89%E6%8B%A9%E9%A2%98%20&%20%E5%A1%AB%E7%A9%BA%E9%A2%98/17.The%20number%20of%20copies.html",relativePath:"01.Java/03.练习题/01.选择题 & 填空题/17.The number of copies.md",key:"v-252d851b",path:"/pages/bdd44c/",headers:[{level:2,title:"Topic",slug:"topic",normalizedTitle:"topic",charIndex:2},{level:2,title:"Problem",slug:"problem",normalizedTitle:"problem",charIndex:27},{level:2,title:"Hint & Explain",slug:"hint-explain",normalizedTitle:"hint &amp; explain",charIndex:null},{level:2,title:"Diagrammatize",slug:"diagrammatize",normalizedTitle:"diagrammatize",charIndex:1703}],headersStr:"Topic Problem Hint & Explain Diagrammatize",content:"# Topic\n\nDynamic array\n\n\n# Problem\n\nAssume that for a dynamic array of size 22 and capacity 44 we perform the following sequence of operations:\n\nadd 5\nadd 7\nadd 9\ninsert 3 1\ninsert 6 2\n\n\n1\n2\n3\n4\n5\n\n\n提示\n\nHere, add x*x* means that we append an element to the array, insert x*x* ii means that we insert xx to the array at the ii-th index (assuming zero-based indexing).\n\nHow many copy operations of an individual array element will we perform when doing the required operations with the array?\n\nNote that elements are copied in the following cases:\n\n * When the array capacity increases, all elements from the old array are copied.\n * When we insert an element into the middle of the array. In this case, all elements from the right half of the array are copied after the inserted element, starting at the index of the inserted element.\n\nWrite down the total number of times any individual element will be copied assuming that the scaling factor is 2.\n\nEnter a number:\n\n12\n\nCorrect.\n\n\n# Hint & Explain\n\n> Saying our dynamic array is initially: | * | * | | |\n> \n>  * adding 5 and 7: | * | * | add(5) | add(7) |\n>  * a resize while adding 9, will copy 4 elements | copy () | copy () | copy (5) | copy (7) | add(9) | | | |\n>  * the first insertion moves all elements that will follow 3 after inserting it at index 1 ( that means 4 copies starting from the old index 1 before insertion) | * | insert (3) | copy (*) | copy (5) | copy (7) | copy (9) | | |\n>  * then the same with the second insertion, moves all elements that will follow 6 after inserting it at index 2 (that means 4 copies starting from the old index 2 before insertion) | * | 3 | insert (6) | copy (*) | copy (5) | copy (7) | copy (9) | |\n\n\n# Diagrammatize\n\n",normalizedContent:"# topic\n\ndynamic array\n\n\n# problem\n\nassume that for a dynamic array of size 22 and capacity 44 we perform the following sequence of operations:\n\nadd 5\nadd 7\nadd 9\ninsert 3 1\ninsert 6 2\n\n\n1\n2\n3\n4\n5\n\n\n提示\n\nhere, add x*x* means that we append an element to the array, insert x*x* ii means that we insert xx to the array at the ii-th index (assuming zero-based indexing).\n\nhow many copy operations of an individual array element will we perform when doing the required operations with the array?\n\nnote that elements are copied in the following cases:\n\n * when the array capacity increases, all elements from the old array are copied.\n * when we insert an element into the middle of the array. in this case, all elements from the right half of the array are copied after the inserted element, starting at the index of the inserted element.\n\nwrite down the total number of times any individual element will be copied assuming that the scaling factor is 2.\n\nenter a number:\n\n12\n\ncorrect.\n\n\n# hint & explain\n\n> saying our dynamic array is initially: | * | * | | |\n> \n>  * adding 5 and 7: | * | * | add(5) | add(7) |\n>  * a resize while adding 9, will copy 4 elements | copy () | copy () | copy (5) | copy (7) | add(9) | | | |\n>  * the first insertion moves all elements that will follow 3 after inserting it at index 1 ( that means 4 copies starting from the old index 1 before insertion) | * | insert (3) | copy (*) | copy (5) | copy (7) | copy (9) | | |\n>  * then the same with the second insertion, moves all elements that will follow 6 after inserting it at index 2 (that means 4 copies starting from the old index 2 before insertion) | * | 3 | insert (6) | copy (*) | copy (5) | copy (7) | copy (9) | |\n\n\n# diagrammatize\n\n",charsets:{cjk:!0},lastUpdated:"2022/09/25, 10:41:23",lastUpdatedTimestamp:1664073683e3},{title:"The number of insertions",frontmatter:{title:"The number of insertions",date:"2022-09-24T23:53:52.000Z",permalink:"/pages/dbb4dd/",tags:["Problem","Data structure"]},regularPath:"/01.Java/03.%E7%BB%83%E4%B9%A0%E9%A2%98/01.%E9%80%89%E6%8B%A9%E9%A2%98%20&%20%E5%A1%AB%E7%A9%BA%E9%A2%98/18.The%20number%20of%20insertions.html",relativePath:"01.Java/03.练习题/01.选择题 & 填空题/18.The number of insertions.md",key:"v-99cb094a",path:"/pages/dbb4dd/",headers:[{level:2,title:"Topic",slug:"topic",normalizedTitle:"topic",charIndex:2},{level:2,title:"Problem",slug:"problem",normalizedTitle:"problem",charIndex:27},{level:2,title:"Hint & Explain",slug:"hint-explain",normalizedTitle:"hint &amp; explain",charIndex:null},{level:2,title:"Diagrammatize",slug:"diagrammatize",normalizedTitle:"diagrammatize",charIndex:530}],headersStr:"Topic Problem Hint & Explain Diagrammatize",content:"# Topic\n\nDynamic array\n\n\n# Problem\n\nThe number of insertions\n\nAssume that the size and capacity of a dynamic array are equal to 2 and 4 respectively, and the scaling factor is 2. After you perform nn insertions, the capacity of the array will become 1024. What is the minimum possible value of n?\n\nEnter a number:\n\n511\n\nCorrect.\n\n\n# Hint & Explain\n\n>  1. What was the previous capacity, before it became 1024?\n>  2. This previous capacity should be exceeded.\n>  3. The array has 2 elements at the beginning, they don't count.\n\n\n# Diagrammatize",normalizedContent:"# topic\n\ndynamic array\n\n\n# problem\n\nthe number of insertions\n\nassume that the size and capacity of a dynamic array are equal to 2 and 4 respectively, and the scaling factor is 2. after you perform nn insertions, the capacity of the array will become 1024. what is the minimum possible value of n?\n\nenter a number:\n\n511\n\ncorrect.\n\n\n# hint & explain\n\n>  1. what was the previous capacity, before it became 1024?\n>  2. this previous capacity should be exceeded.\n>  3. the array has 2 elements at the beginning, they don't count.\n\n\n# diagrammatize",charsets:{},lastUpdated:"2022/09/25, 10:41:23",lastUpdatedTimestamp:1664073683e3},{title:"Boxes",frontmatter:{title:"Boxes",date:"2022-04-29T18:53:40.000Z",permalink:"/pages/5a0fd5/",tags:["Java","Array","Problem"]},regularPath:"/01.Java/03.%E7%BB%83%E4%B9%A0%E9%A2%98/02.%E4%BB%A3%E7%A0%81%E9%A2%98/01.Boxes.html",relativePath:"01.Java/03.练习题/02.代码题/01.Boxes.md",key:"v-88aaa1ee",path:"/pages/5a0fd5/",headers:[{level:2,title:"Topic",slug:"topic",normalizedTitle:"topic",charIndex:2},{level:2,title:"Problem",slug:"problem",normalizedTitle:"problem",charIndex:35},{level:2,title:"Solutions",slug:"solutions",normalizedTitle:"solutions",charIndex:1074},{level:3,title:"Other solution 1",slug:"other-solution-1",normalizedTitle:"other solution 1",charIndex:1088},{level:3,title:"Other solution 2",slug:"other-solution-2",normalizedTitle:"other solution 2",charIndex:2177}],headersStr:"Topic Problem Solutions Other solution 1 Other solution 2",content:'# Topic\n\nIterating over arrays\n\n\n# Problem\n\nBoxes\n\nThere are two boxes on the table. The first box has a size of X1 x Y1 x Z1, and the second box has a size of X2 x Y2 x Z2. You need to determine whether one of the boxes can be put inside the other. It should go in without sticking out. You can rotate both boxes as you want.\n\nImportant: two equally sized boxes cannot be placed inside one another. See the third test case as an example of how the borderline case should be treated.\n\nInput consists of two lines:\n\n * the first line contains numbers X1, Y1, Z1;\n * the second line contains numbers X2, Y2, Z2.\n\nAll numbers are integers and greater than 0.\n\nOutput:\n\n * "Box 1 < Box 2", if the first box can be put inside the second box ;\n * "Box 1 > Box 2", if the second box can be put inside the first box;\n * otherwise, output "Incompatible".\n\nSample Input 1:\n\n1 2 3\n5 6 4\n\n\n1\n2\n\n\nSample Output 1:\n\nBox 1 < Box 2\n\n\n1\n\n\nSample Input 2:\n\n2 9 4\n3 8 1\n\n\n1\n2\n\n\nSample Output 2:\n\nBox 1 > Box 2\n\n\n1\n\n\nSample Input 3:\n\n1 3 7\n2 8 3\n\n\n1\n2\n\n\nSample Output 3:\n\nIncompatible\n\n\n1\n\n\n\n# Solutions\n\n\n# Other solution 1\n\nimport java.util.Scanner;\nimport java.util.Arrays;\n\nclass Main {\n\n    public static void main(String[] args) {\n\n        Scanner scanner = new Scanner(System.in);\n        int[] box1 = new int[3];\n        int[] box2 = new int[3];\n        int countA = 0;\n        int countB = 0;\n\n        for (int i = 0; i < 3; i++) {\n            box1[i] = scanner.nextInt();\n        }\n\n        for (int i = 0; i < 3; i++) {\n            box2[i] = scanner.nextInt();\n        }\n\n        Arrays.sort(box1);\n        Arrays.sort(box2);\n\n        for (int i = 0; i < 3; i++) {\n            if (box1[i] < box2[i]) {\n                countA++;\n            } else if (box1[i] > box2[i]) {\n                countB++;\n            }\n        }\n\n        if (countA == 3) {\n            System.out.println("Box 1 < Box 2");\n        } else if (countB == 3) {\n            System.out.println("Box 1 > Box 2");\n        } else {\n            System.out.println("Incompatible");\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n\n\n\n# Other solution 2\n\nimport java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        List<Integer> box1 = new ArrayList<>();\n        box1.add(scanner.nextInt());\n        box1.add(scanner.nextInt());\n        box1.add(scanner.nextInt());\n\n        List<Integer> box2 = new ArrayList<>();\n        box2.add(scanner.nextInt());\n        box2.add(scanner.nextInt());\n        box2.add(scanner.nextInt());\n\n        Collections.sort(box1);\n        Collections.sort(box2);\n\n        boolean box1Huge = box1.get(0) > box2.get(0) && box1.get(1) > box2.get(1) && box1.get(2) > box2.get(2);\n        boolean box2Huge = box1.get(0) < box2.get(0) && box1.get(1) < box2.get(1) && box1.get(2) < box2.get(2);\n\n        System.out.println(box1Huge ? "Box 1 > Box 2" :\n                           box2Huge ? "Box 1 < Box 2" : "Incompatible");\n\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n',normalizedContent:'# topic\n\niterating over arrays\n\n\n# problem\n\nboxes\n\nthere are two boxes on the table. the first box has a size of x1 x y1 x z1, and the second box has a size of x2 x y2 x z2. you need to determine whether one of the boxes can be put inside the other. it should go in without sticking out. you can rotate both boxes as you want.\n\nimportant: two equally sized boxes cannot be placed inside one another. see the third test case as an example of how the borderline case should be treated.\n\ninput consists of two lines:\n\n * the first line contains numbers x1, y1, z1;\n * the second line contains numbers x2, y2, z2.\n\nall numbers are integers and greater than 0.\n\noutput:\n\n * "box 1 < box 2", if the first box can be put inside the second box ;\n * "box 1 > box 2", if the second box can be put inside the first box;\n * otherwise, output "incompatible".\n\nsample input 1:\n\n1 2 3\n5 6 4\n\n\n1\n2\n\n\nsample output 1:\n\nbox 1 < box 2\n\n\n1\n\n\nsample input 2:\n\n2 9 4\n3 8 1\n\n\n1\n2\n\n\nsample output 2:\n\nbox 1 > box 2\n\n\n1\n\n\nsample input 3:\n\n1 3 7\n2 8 3\n\n\n1\n2\n\n\nsample output 3:\n\nincompatible\n\n\n1\n\n\n\n# solutions\n\n\n# other solution 1\n\nimport java.util.scanner;\nimport java.util.arrays;\n\nclass main {\n\n    public static void main(string[] args) {\n\n        scanner scanner = new scanner(system.in);\n        int[] box1 = new int[3];\n        int[] box2 = new int[3];\n        int counta = 0;\n        int countb = 0;\n\n        for (int i = 0; i < 3; i++) {\n            box1[i] = scanner.nextint();\n        }\n\n        for (int i = 0; i < 3; i++) {\n            box2[i] = scanner.nextint();\n        }\n\n        arrays.sort(box1);\n        arrays.sort(box2);\n\n        for (int i = 0; i < 3; i++) {\n            if (box1[i] < box2[i]) {\n                counta++;\n            } else if (box1[i] > box2[i]) {\n                countb++;\n            }\n        }\n\n        if (counta == 3) {\n            system.out.println("box 1 < box 2");\n        } else if (countb == 3) {\n            system.out.println("box 1 > box 2");\n        } else {\n            system.out.println("incompatible");\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n\n\n\n# other solution 2\n\nimport java.util.*;\n\npublic class main {\n    public static void main(string[] args) {\n        scanner scanner = new scanner(system.in);\n\n        list<integer> box1 = new arraylist<>();\n        box1.add(scanner.nextint());\n        box1.add(scanner.nextint());\n        box1.add(scanner.nextint());\n\n        list<integer> box2 = new arraylist<>();\n        box2.add(scanner.nextint());\n        box2.add(scanner.nextint());\n        box2.add(scanner.nextint());\n\n        collections.sort(box1);\n        collections.sort(box2);\n\n        boolean box1huge = box1.get(0) > box2.get(0) && box1.get(1) > box2.get(1) && box1.get(2) > box2.get(2);\n        boolean box2huge = box1.get(0) < box2.get(0) && box1.get(1) < box2.get(1) && box1.get(2) < box2.get(2);\n\n        system.out.println(box1huge ? "box 1 > box 2" :\n                           box2huge ? "box 1 < box 2" : "incompatible");\n\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n',charsets:{},lastUpdated:"2022/09/25, 10:41:23",lastUpdatedTimestamp:1664073683e3},{title:"The longest ascending sequence",frontmatter:{title:"The longest ascending sequence",date:"2022-04-29T22:03:41.000Z",permalink:"/pages/1cb5d4/",tags:["Java","Array","Problem"]},regularPath:"/01.Java/03.%E7%BB%83%E4%B9%A0%E9%A2%98/02.%E4%BB%A3%E7%A0%81%E9%A2%98/02.The%20longest%20ascending%20sequence.html",relativePath:"01.Java/03.练习题/02.代码题/02.The longest ascending sequence.md",key:"v-4a4457d0",path:"/pages/1cb5d4/",headers:[{level:2,title:"Topic",slug:"topic",normalizedTitle:"topic",charIndex:2},{level:2,title:"Problem",slug:"problem",normalizedTitle:"problem",charIndex:35},{level:2,title:"Solutions",slug:"solutions",normalizedTitle:"solutions",charIndex:631},{level:3,title:"My solution",slug:"my-solution",normalizedTitle:"my solution",charIndex:645},{level:3,title:"Other solution",slug:"other-solution",normalizedTitle:"other solution",charIndex:1532}],headersStr:"Topic Problem Solutions My solution Other solution",content:"# Topic\n\nIterating over arrays\n\n\n# Problem\n\nThe longest ascending sequence\n\nWrite a program that reads an array of ints and outputs the length of the longest sequence in strictly ascending order. Elements of the sequence must go one after another. A single number is assumed to be an ordered sequence with the length = 1.\n\nInput data format\n\nThe first line contains the size of an array. The second line contains elements of the array separated by spaces.\n\nExample\n\nThe input array is 1 2 4 1 2 3 5 7 4 3. In this case, the length of the longest sequence in ascending order is 5. It includes the following elements: 1 2 3 5 7.\n\n\n# Solutions\n\n\n# My solution\n\nimport java.util.Scanner;\n\nclass Main {\n    public static void main(String[] args) {\n        \n        Scanner scanner = new Scanner(System.in);\n        int[] array = new int[scanner.nextInt()];\n        int counter = 1;\n        int maxLength = 1;\n\n        for (int i = 0; i < array.length; i++) {\n            array[i] = scanner.nextInt();\n        }\n\n        for (int i = 0; i < array.length; i++) {\n            if (i + 1 < array.length) {\n                if (array[i] < array[i + 1]) {\n                    counter++;\n                    if (maxLength < counter) {\n                        maxLength = counter;\n                    }\n                } else {\n                    counter = 1;\n                }\n            }\n        }\n        \n        System.out.println(maxLength);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n\n\n\n# Other solution\n\nimport java.util.Scanner; \n\nclass Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        int size = scanner.nextInt();\n        int[] array = new int[size];\n\n        for (int i = 0; i < size; i++) {\n            array[i] = scanner.nextInt();\n        }\n\n        int max = 0;\n        int count = 0;\n\n        int before = array[0];\n\n        for (int a : array) {\n            if (before > a) {\n                if (count > max) {\n                    max = count;\n                }\n                count = 0;\n            }\n\n            before = a;\n            count++;\n        }\n\n        if (count > max) {\n            max = count;\n        }\n\n        System.out.println(max);\n    }\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n",normalizedContent:"# topic\n\niterating over arrays\n\n\n# problem\n\nthe longest ascending sequence\n\nwrite a program that reads an array of ints and outputs the length of the longest sequence in strictly ascending order. elements of the sequence must go one after another. a single number is assumed to be an ordered sequence with the length = 1.\n\ninput data format\n\nthe first line contains the size of an array. the second line contains elements of the array separated by spaces.\n\nexample\n\nthe input array is 1 2 4 1 2 3 5 7 4 3. in this case, the length of the longest sequence in ascending order is 5. it includes the following elements: 1 2 3 5 7.\n\n\n# solutions\n\n\n# my solution\n\nimport java.util.scanner;\n\nclass main {\n    public static void main(string[] args) {\n        \n        scanner scanner = new scanner(system.in);\n        int[] array = new int[scanner.nextint()];\n        int counter = 1;\n        int maxlength = 1;\n\n        for (int i = 0; i < array.length; i++) {\n            array[i] = scanner.nextint();\n        }\n\n        for (int i = 0; i < array.length; i++) {\n            if (i + 1 < array.length) {\n                if (array[i] < array[i + 1]) {\n                    counter++;\n                    if (maxlength < counter) {\n                        maxlength = counter;\n                    }\n                } else {\n                    counter = 1;\n                }\n            }\n        }\n        \n        system.out.println(maxlength);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n\n\n\n# other solution\n\nimport java.util.scanner; \n\nclass main {\n    public static void main(string[] args) {\n        scanner scanner = new scanner(system.in);\n\n        int size = scanner.nextint();\n        int[] array = new int[size];\n\n        for (int i = 0; i < size; i++) {\n            array[i] = scanner.nextint();\n        }\n\n        int max = 0;\n        int count = 0;\n\n        int before = array[0];\n\n        for (int a : array) {\n            if (before > a) {\n                if (count > max) {\n                    max = count;\n                }\n                count = 0;\n            }\n\n            before = a;\n            count++;\n        }\n\n        if (count > max) {\n            max = count;\n        }\n\n        system.out.println(max);\n    }\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n",charsets:{},lastUpdated:"2022/09/25, 10:41:23",lastUpdatedTimestamp:1664073683e3},{title:"Right Rotation",frontmatter:{title:"Right Rotation",date:"2022-05-07T11:39:54.000Z",permalink:"/pages/2eb85f/",tags:["Java","Problem"]},regularPath:"/01.Java/03.%E7%BB%83%E4%B9%A0%E9%A2%98/02.%E4%BB%A3%E7%A0%81%E9%A2%98/06.Right%20Rotation.html",relativePath:"01.Java/03.练习题/02.代码题/06.Right Rotation.md",key:"v-a9927fd4",path:"/pages/2eb85f/",headers:[{level:2,title:"Topic",slug:"topic",normalizedTitle:"topic",charIndex:2},{level:2,title:"Problem",slug:"problem",normalizedTitle:"problem",charIndex:35},{level:2,title:"Hint & Explain",slug:"hint-explain",normalizedTitle:"hint &amp; explain",charIndex:null},{level:2,title:"Solution",slug:"solution",normalizedTitle:"solution",charIndex:1226},{level:3,title:"My solution",slug:"my-solution",normalizedTitle:"my solution",charIndex:1239},{level:3,title:"Other solution 1",slug:"other-solution-1",normalizedTitle:"other solution 1",charIndex:2115},{level:3,title:"Other solution 2",slug:"other-solution-2",normalizedTitle:"other solution 2",charIndex:2758},{level:3,title:"Other solution 3",slug:"other-solution-3",normalizedTitle:"other solution 3",charIndex:3436}],headersStr:"Topic Problem Hint & Explain Solution My solution Other solution 1 Other solution 2 Other solution 3",content:'# Topic\n\nIterating over arrays\n\n\n# Problem\n\nRight Rotation\n\nA right rotation is an operation that shifts each element of an array to the right. For example, if an array is {1,2,3,4,5} and we right rotate it by 1, the new array will be {5,1,2,3,4}. If we rotate it by 2, the new array will be {4,5,1,2,3}. It goes like this: {1,2,3,4,5} -> {5,1,2,3,4} -> {4,5,1,2,3}.\n\nWrite a program that performs a right rotation on an array by a given number.\n\nNote that If your solution gets the code quality warning "System.arraycopy is more efficient", please simply ignore it in respect of this code challenge.\n\nInput format: The first line is an array of numbers. The second line is the number of rotations.\n\nOutput format: Resulting array\n\nSample Input 1:\n\n1 2 3 4 5\n1\n\n\n1\n2\n\n\nSample Output 1:\n\n5 1 2 3 4\n\n\n1\n\n\nSample Input 2:\n\n1 2 3 4 5\n2\n\n\n1\n2\n\n\nSample Output 2:\n\n4 5 1 2 3\n\n\n1\n\n\nSample Input 3:\n\n1 2 3 4 5\n8\n\n\n1\n2\n\n\nSample Output 3:\n\n3 4 5 1 2\n\n\n1\n\n\nSample Input 4:\n\n11 21 1 41 51 78 90\n4\n\n\n1\n2\n\n\nSample Output 4:\n\n41 51 78 90 11 21 1\n\n\n1\n\n\n\n# Hint & Explain\n\n> You can create array of Strings in this way: String[] entrance = scanner.nextLine().split(" "); Spaces will be to divide each element of array.\n\n> Leetcode题解 - 旋转数组\n\n\n# Solution\n\n\n# My solution\n\nimport java.util.Scanner;\n\nclass Main {\n    public static void main(String[] args) {\n        // put your code here\n        Scanner scanner = new Scanner(System.in);\n        String[] array = scanner.nextLine().split(" ");\n        int times = scanner.nextInt();\n        String before;\n        String after = array[0];\n\n        for (int j = 1; j <= times; j++) {\n            array[0] = array[array.length - 1];\n            for (int i = 0; i < array.length; i++) {\n                if (i + 1 < array.length) {\n                    before = after;\n                    after = array[i + 1];\n                    array[i + 1] = before;\n                }\n            }\n        }\n\n        for (String item :\n                array) {\n            System.out.print(item + " ");\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\n\n# Other solution 1\n\nimport java.util.Scanner;\n\nclass Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String[] array = scanner.nextLine().split(" ");\n        int arrayShift = scanner.nextInt() % array.length;\n        String[] newArray = new String[array.length];\n\n        for (int i = 0; i < newArray.length; i++) {\n            int index = (arrayShift + i) % array.length;\n            newArray[index] = array[i];\n        }\n\n        for (String element : newArray) {\n            System.out.print(element + " ");\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n# Other solution 2\n\nimport java.util.Scanner;\n\nclass Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String s = scanner.nextLine();\n        int step = scanner.nextInt();\n        String[] row = s.split(" ");\n        int len = row.length;\n        int remember = step % len;\n\n        String temp;\n\n        for (int j = 0; j < remember; j++) {\n            temp = row[len - 1];\n            System.arraycopy(row, 0, row, 1, len - 2 + 1);\n            row[0] = temp;\n        }\n        String str = String.join(" ", row);\n        System.out.println(str);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n\n# Other solution 3\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Scanner;\n\nclass Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        ArrayList<Integer> list = new ArrayList<>();\n\n        String[] array = scanner.nextLine().split(" ");\n        int value = scanner.nextInt();\n\n        for (String string : array) {\n            int num = Integer.parseInt(string);\n            list.add(num);\n        }\n\n        Collections.rotate(list, value);\n\n        for (Integer num : list) {\n            System.out.print(num + " ");\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n',normalizedContent:'# topic\n\niterating over arrays\n\n\n# problem\n\nright rotation\n\na right rotation is an operation that shifts each element of an array to the right. for example, if an array is {1,2,3,4,5} and we right rotate it by 1, the new array will be {5,1,2,3,4}. if we rotate it by 2, the new array will be {4,5,1,2,3}. it goes like this: {1,2,3,4,5} -> {5,1,2,3,4} -> {4,5,1,2,3}.\n\nwrite a program that performs a right rotation on an array by a given number.\n\nnote that if your solution gets the code quality warning "system.arraycopy is more efficient", please simply ignore it in respect of this code challenge.\n\ninput format: the first line is an array of numbers. the second line is the number of rotations.\n\noutput format: resulting array\n\nsample input 1:\n\n1 2 3 4 5\n1\n\n\n1\n2\n\n\nsample output 1:\n\n5 1 2 3 4\n\n\n1\n\n\nsample input 2:\n\n1 2 3 4 5\n2\n\n\n1\n2\n\n\nsample output 2:\n\n4 5 1 2 3\n\n\n1\n\n\nsample input 3:\n\n1 2 3 4 5\n8\n\n\n1\n2\n\n\nsample output 3:\n\n3 4 5 1 2\n\n\n1\n\n\nsample input 4:\n\n11 21 1 41 51 78 90\n4\n\n\n1\n2\n\n\nsample output 4:\n\n41 51 78 90 11 21 1\n\n\n1\n\n\n\n# hint & explain\n\n> you can create array of strings in this way: string[] entrance = scanner.nextline().split(" "); spaces will be to divide each element of array.\n\n> leetcode题解 - 旋转数组\n\n\n# solution\n\n\n# my solution\n\nimport java.util.scanner;\n\nclass main {\n    public static void main(string[] args) {\n        // put your code here\n        scanner scanner = new scanner(system.in);\n        string[] array = scanner.nextline().split(" ");\n        int times = scanner.nextint();\n        string before;\n        string after = array[0];\n\n        for (int j = 1; j <= times; j++) {\n            array[0] = array[array.length - 1];\n            for (int i = 0; i < array.length; i++) {\n                if (i + 1 < array.length) {\n                    before = after;\n                    after = array[i + 1];\n                    array[i + 1] = before;\n                }\n            }\n        }\n\n        for (string item :\n                array) {\n            system.out.print(item + " ");\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\n\n# other solution 1\n\nimport java.util.scanner;\n\nclass main {\n    public static void main(string[] args) {\n        scanner scanner = new scanner(system.in);\n        string[] array = scanner.nextline().split(" ");\n        int arrayshift = scanner.nextint() % array.length;\n        string[] newarray = new string[array.length];\n\n        for (int i = 0; i < newarray.length; i++) {\n            int index = (arrayshift + i) % array.length;\n            newarray[index] = array[i];\n        }\n\n        for (string element : newarray) {\n            system.out.print(element + " ");\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n# other solution 2\n\nimport java.util.scanner;\n\nclass main {\n    public static void main(string[] args) {\n        scanner scanner = new scanner(system.in);\n        string s = scanner.nextline();\n        int step = scanner.nextint();\n        string[] row = s.split(" ");\n        int len = row.length;\n        int remember = step % len;\n\n        string temp;\n\n        for (int j = 0; j < remember; j++) {\n            temp = row[len - 1];\n            system.arraycopy(row, 0, row, 1, len - 2 + 1);\n            row[0] = temp;\n        }\n        string str = string.join(" ", row);\n        system.out.println(str);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n\n# other solution 3\n\nimport java.util.arraylist;\nimport java.util.collections;\nimport java.util.scanner;\n\nclass main {\n    public static void main(string[] args) {\n        scanner scanner = new scanner(system.in);\n        arraylist<integer> list = new arraylist<>();\n\n        string[] array = scanner.nextline().split(" ");\n        int value = scanner.nextint();\n\n        for (string string : array) {\n            int num = integer.parseint(string);\n            list.add(num);\n        }\n\n        collections.rotate(list, value);\n\n        for (integer num : list) {\n            system.out.print(num + " ");\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n',charsets:{cjk:!0},lastUpdated:"2022/09/25, 10:41:23",lastUpdatedTimestamp:1664073683e3},{title:"Book",frontmatter:{title:"Book",date:"2022-05-07T17:45:19.000Z",permalink:"/pages/8f9095/",tags:["Java","Problem"]},regularPath:"/01.Java/03.%E7%BB%83%E4%B9%A0%E9%A2%98/02.%E4%BB%A3%E7%A0%81%E9%A2%98/07.Book.html",relativePath:"01.Java/03.练习题/02.代码题/07.Book.md",key:"v-3edf2079",path:"/pages/8f9095/",headers:[{level:2,title:"Topic",slug:"topic",normalizedTitle:"topic",charIndex:2},{level:2,title:"Problem",slug:"problem",normalizedTitle:"problem",charIndex:25},{level:2,title:"Hint & Explain",slug:"hint-explain",normalizedTitle:"hint &amp; explain",charIndex:null},{level:2,title:"Solution",slug:"solution",normalizedTitle:"solution",charIndex:876},{level:3,title:"Other solution 1",slug:"other-solution-1",normalizedTitle:"other solution 1",charIndex:889},{level:3,title:"Other solution 2",slug:"other-solution-2",normalizedTitle:"other solution 2",charIndex:1216}],headersStr:"Topic Problem Hint & Explain Solution Other solution 1 Other solution 2",content:"# Topic\n\nConstructor\n\n\n# Problem\n\nBook\n\nWrite a class named Book. It must have three fields: a string field title, an int field yearOfPublishing, an array of strings authors and a constructor to initialize these fields. The order of parameters in the constructor must be the same as presented above.\n\n\n# Hint & Explain\n\n> https://stackoverflow.com/questions/14149733/clone-method-for-java-arrays this article helped me with understanding (a little anyway) on reference and value in arrays and their clones.\n\n> If you're running into \"The user-supplied array 'authors' is stored directly\", you need to make a copy within the object when it gets passed instead of storing it directly. Import java.utils.Arrays, then use Arrays.copyOf(authors, authors.length)\n\n> avoid to store array directly http://geeksforgeekss.blogspot.com/2016/05/sonar-violation-security-array-is.html\n\n\n# Solution\n\n\n# Other solution 1\n\nclass Book {\n    String title;\n    int yearOfPublishing;\n    String[] authors;\n\n    public Book(String title, int yearOfPublishing, String[] authors) {\n        this.title = title;\n        this.yearOfPublishing = yearOfPublishing;\n        this.authors = authors.clone();\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# Other solution 2\n\nimport java.util.Arrays;\n\nclass Book {\n    String title;\n    int yearOfPublishing;\n    String[] authors;\n\n    public Book(String title, int yearOfPublishing, String[] authors) {\n        this.title = title;\n        this.yearOfPublishing = yearOfPublishing;\n        if (authors == null) {\n            this.authors = new String[0];\n        } else {\n            this.authors = Arrays.copyOf(authors, authors.length);\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n",normalizedContent:"# topic\n\nconstructor\n\n\n# problem\n\nbook\n\nwrite a class named book. it must have three fields: a string field title, an int field yearofpublishing, an array of strings authors and a constructor to initialize these fields. the order of parameters in the constructor must be the same as presented above.\n\n\n# hint & explain\n\n> https://stackoverflow.com/questions/14149733/clone-method-for-java-arrays this article helped me with understanding (a little anyway) on reference and value in arrays and their clones.\n\n> if you're running into \"the user-supplied array 'authors' is stored directly\", you need to make a copy within the object when it gets passed instead of storing it directly. import java.utils.arrays, then use arrays.copyof(authors, authors.length)\n\n> avoid to store array directly http://geeksforgeekss.blogspot.com/2016/05/sonar-violation-security-array-is.html\n\n\n# solution\n\n\n# other solution 1\n\nclass book {\n    string title;\n    int yearofpublishing;\n    string[] authors;\n\n    public book(string title, int yearofpublishing, string[] authors) {\n        this.title = title;\n        this.yearofpublishing = yearofpublishing;\n        this.authors = authors.clone();\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# other solution 2\n\nimport java.util.arrays;\n\nclass book {\n    string title;\n    int yearofpublishing;\n    string[] authors;\n\n    public book(string title, int yearofpublishing, string[] authors) {\n        this.title = title;\n        this.yearofpublishing = yearofpublishing;\n        if (authors == null) {\n            this.authors = new string[0];\n        } else {\n            this.authors = arrays.copyof(authors, authors.length);\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n",charsets:{},lastUpdated:"2022/09/25, 10:41:23",lastUpdatedTimestamp:1664073683e3},{title:"Compact strings with AsciiCharSequence",frontmatter:{title:"Compact strings with AsciiCharSequence",date:"2022-06-28T11:17:32.000Z",permalink:"/pages/a386cc/",tags:["Java","Problem","OOP","Abstraction"]},regularPath:"/01.Java/03.%E7%BB%83%E4%B9%A0%E9%A2%98/02.%E4%BB%A3%E7%A0%81%E9%A2%98/08.Compact%20strings%20with%20AsciiCharSequence.html",relativePath:"01.Java/03.练习题/02.代码题/08.Compact strings with AsciiCharSequence.md",key:"v-05aa3cd4",path:"/pages/a386cc/",headers:[{level:2,title:"Problem",slug:"problem",normalizedTitle:"problem",charIndex:14},{level:2,title:"Hint & Explain",slug:"hint-explain",normalizedTitle:"hint &amp; explain",charIndex:null},{level:2,title:"Solution",slug:"solution",normalizedTitle:"solution",charIndex:1688},{level:3,title:"Other solution 1",slug:"other-solution-1",normalizedTitle:"other solution 1",charIndex:1701},{level:3,title:"Other solution 2",slug:"other-solution-2",normalizedTitle:"other solution 2",charIndex:2631}],headersStr:"Problem Hint & Explain Solution Other solution 1 Other solution 2",content:"Interface\n\n\n# Problem\n\nCompact strings with AsciiCharSequence\n\nhttps://hyperskill.org/learn/step/3082\n\n注意\n\nWow! This problem is kind of tricky. If you're ready to put your thinking cap on, brace yourself and good luck! Otherwise, you can skip it for now and return any time later\n\nStrings in Java implement java.lang.CharSequence interface. Since Java internally uses UTF-16, 2 bytes are required to store each char. At the same time, ASCII encoding allows storing character codes in one byte and includes all Latin letters, digits, and standard special characters. Compared to the standard String class, ASCII-character sequences require half the memory.\n\nWrite a class named AsciiCharSequence for storing ASCII-character sequences, that should:\n\n * implement the interface java.lang.CharSequence;\n * have a constructor that takes a byte array;\n * have methods int length(), char charAt(int idx), CharSequence subSequence(int from, int to), and String toString().\n\nYou can find the declaration of methods and their behavior in the description of java.lang.CharSequence (JavaDoc or sources).\n\nCarefully check signatures of abstract methods of java.lang.CharSequence interface, especially subSequence method. It accepts 2 integers: start index (inclusive) and end index (exclusive). The method returns an object of a class that implements java.lang.CharSequence interface. In this example it will be an instance of AsciiCharSequence class.\n\nNote: the testing system will always pass correct input parameters to overridden methods.\n\nP.S. This feature is supported since Java 9 in standard strings. For details, see this article on compact strings in Java 9.\n\n\n# Hint & Explain\n\n// 输入提示\n\n\n# Solution\n\n\n# Other solution 1\n\nimport java.util.*;\n\nclass AsciiCharSequence implements CharSequence {\n    \n    private final byte[] bytes;\n    \n    public AsciiCharSequence(byte[] bytes) {\n        this.bytes = bytes.clone();\n    }\n    \n    @Override\n    public int length() {\n        return this.bytes.length;\n    }\n    \n    @Override\n    public char charAt(int idx) {\n        return (char) this.bytes[idx];\n    }\n    \n    @Override\n    public CharSequence subSequence(int from, int to) {\n        byte[] sequence = new byte[to - from];\n        \n        for (int i = from; i < to; i++) {\n            sequence[i - from] = this.bytes[i];\n        }\n        \n        return new AsciiCharSequence(sequence);\n    }\n    \n    @Override\n    public String toString() {\n        return new String(this.bytes, StandardCharsets.UTF_8);\n    }\n    \n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n\n\n\n# Other solution 2\n\nimport java.util.*;\n\nclass AsciiCharSequence implements CharSequence {\n    private final byte[] charSequence;\n\n    public AsciiCharSequence(byte[] charSequence) {\n        this.charSequence = charSequence.clone();\n    }\n\n    @Override\n    public int length() {\n        return charSequence.length;\n    }\n\n    @Override\n    public char charAt(int index) {\n        return (char) charSequence[index];\n    }\n\n    @Override\n    public CharSequence subSequence(int start, int end) {\n        return new AsciiCharSequence(Arrays.copyOfRange(charSequence, start, end));\n    }\n\n    @Override\n    public String toString() {\n        return new String(charSequence);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n",normalizedContent:"interface\n\n\n# problem\n\ncompact strings with asciicharsequence\n\nhttps://hyperskill.org/learn/step/3082\n\n注意\n\nwow! this problem is kind of tricky. if you're ready to put your thinking cap on, brace yourself and good luck! otherwise, you can skip it for now and return any time later\n\nstrings in java implement java.lang.charsequence interface. since java internally uses utf-16, 2 bytes are required to store each char. at the same time, ascii encoding allows storing character codes in one byte and includes all latin letters, digits, and standard special characters. compared to the standard string class, ascii-character sequences require half the memory.\n\nwrite a class named asciicharsequence for storing ascii-character sequences, that should:\n\n * implement the interface java.lang.charsequence;\n * have a constructor that takes a byte array;\n * have methods int length(), char charat(int idx), charsequence subsequence(int from, int to), and string tostring().\n\nyou can find the declaration of methods and their behavior in the description of java.lang.charsequence (javadoc or sources).\n\ncarefully check signatures of abstract methods of java.lang.charsequence interface, especially subsequence method. it accepts 2 integers: start index (inclusive) and end index (exclusive). the method returns an object of a class that implements java.lang.charsequence interface. in this example it will be an instance of asciicharsequence class.\n\nnote: the testing system will always pass correct input parameters to overridden methods.\n\np.s. this feature is supported since java 9 in standard strings. for details, see this article on compact strings in java 9.\n\n\n# hint & explain\n\n// 输入提示\n\n\n# solution\n\n\n# other solution 1\n\nimport java.util.*;\n\nclass asciicharsequence implements charsequence {\n    \n    private final byte[] bytes;\n    \n    public asciicharsequence(byte[] bytes) {\n        this.bytes = bytes.clone();\n    }\n    \n    @override\n    public int length() {\n        return this.bytes.length;\n    }\n    \n    @override\n    public char charat(int idx) {\n        return (char) this.bytes[idx];\n    }\n    \n    @override\n    public charsequence subsequence(int from, int to) {\n        byte[] sequence = new byte[to - from];\n        \n        for (int i = from; i < to; i++) {\n            sequence[i - from] = this.bytes[i];\n        }\n        \n        return new asciicharsequence(sequence);\n    }\n    \n    @override\n    public string tostring() {\n        return new string(this.bytes, standardcharsets.utf_8);\n    }\n    \n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n\n\n\n# other solution 2\n\nimport java.util.*;\n\nclass asciicharsequence implements charsequence {\n    private final byte[] charsequence;\n\n    public asciicharsequence(byte[] charsequence) {\n        this.charsequence = charsequence.clone();\n    }\n\n    @override\n    public int length() {\n        return charsequence.length;\n    }\n\n    @override\n    public char charat(int index) {\n        return (char) charsequence[index];\n    }\n\n    @override\n    public charsequence subsequence(int start, int end) {\n        return new asciicharsequence(arrays.copyofrange(charsequence, start, end));\n    }\n\n    @override\n    public string tostring() {\n        return new string(charsequence);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n",charsets:{cjk:!0},lastUpdated:"2022/10/25, 17:57:56",lastUpdatedTimestamp:1666691876e3},{title:"Cinema",frontmatter:{title:"Cinema",date:"2022-07-06T22:17:33.000Z",permalink:"/pages/640e4b/",tags:["Java","Array","Problem"]},regularPath:"/01.Java/03.%E7%BB%83%E4%B9%A0%E9%A2%98/02.%E4%BB%A3%E7%A0%81%E9%A2%98/09.Cinema.html",relativePath:"01.Java/03.练习题/02.代码题/09.Cinema.md",key:"v-9ce1dd8e",path:"/pages/640e4b/",headers:[{level:2,title:"Topic",slug:"topic",normalizedTitle:"topic",charIndex:2},{level:2,title:"Problem",slug:"problem",normalizedTitle:"problem",charIndex:36},{level:2,title:"Hint & Explain",slug:"hint-explain",normalizedTitle:"hint &amp; explain",charIndex:null},{level:2,title:"Solution",slug:"solution",normalizedTitle:"solution",charIndex:1244},{level:3,title:"My solution",slug:"my-solution",normalizedTitle:"my solution",charIndex:1257},{level:3,title:"Other solution 1 (Pretty code!!!)",slug:"other-solution-1-pretty-code",normalizedTitle:"other solution 1 (pretty code!!!)",charIndex:2726},{level:3,title:"Other solution 2",slug:"other-solution-2",normalizedTitle:"other solution 2",charIndex:4037},{level:3,title:"Other solution 3",slug:"other-solution-3",normalizedTitle:"other solution 3",charIndex:5173}],headersStr:"Topic Problem Hint & Explain Solution My solution Other solution 1 (Pretty code!!!) Other solution 2 Other solution 3",content:'# Topic\n\nMultidimensional array\n\n\n# Problem\n\nCinema\n\nhttps://hyperskill.org/learn/step/1930\n\nThe cinema has n rows, each row consists of m seats (n and m do not exceed 20). A two-dimensional matrix stores the information on the sold tickets: the number 1 means that the ticket for this place is already sold, and the number 0 means that the place is available. You want to buy k tickets to neighboring seats in the same row. Find whether it can be done.\n\nInput data format\n\nOn the input, the program gets the number of n rows and m seats. Then, there are n lines, each containing m numbers (0 or 1) separated by spaces. The last line contains the number k.\n\nOutput data format\n\nThe program should output the number of the row with k consecutive available seats. If there are several rows with k available seats, output the first row with these seats. If there is no such a row, output the number 0.\n\nSample Input 1:\n\n3 4\n0 1 0 1\n1 1 0 1\n1 0 0 1\n2\n\n\n1\n2\n3\n4\n5\n\n\nSample Output 1:\n\n3\n\n\n1\n\n\nSample Input 2:\n\n3 3\n0 1 0\n1 0 0\n1 1 1\n3\n\n\n1\n2\n3\n4\n5\n\n\nSample Output 2:\n\n0\n\n\n1\n\n\nSample Input 3:\n\n2 4\n1 1 0 0\n0 0 1 1\n4\n\n\n1\n2\n3\n4\n\n\nSample Output 3:\n\n0\n\n\n1\n\n\n\n# Hint & Explain\n\nIf you\'re using a counter, remember to reset it when going from row to row.\n\n\n# Solution\n\n\n# My solution\n\nimport java.util.Scanner;\n\nclass Main {\n    public static void main(String[] args) {\n        // put your code here\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();  // rows\n        int m = scanner.nextInt();  // seats\n\n        int[][] matrixOfSeats = new int[n][m]; // matrix\n\n        for (int i = 0; i < matrixOfSeats.length; i++) {\n            for (int j = 0; j < matrixOfSeats[i].length; j++) {\n                matrixOfSeats[i][j] = scanner.nextInt();\n            }\n        }\n\n        int k = scanner.nextInt(); // target\n        int counter;\n        int temp = 0;\n        int targetOfRow = 0;\n        boolean stop = false;\n\n        for (int i = 0; i < matrixOfSeats.length; i++) {\n            counter = 0;\n            for (int j = 0; j < matrixOfSeats[i].length; j++) {\n                if (matrixOfSeats[i][j] == 0) {\n                    counter++;\n                    temp = counter;\n\n                    if (temp >= k) {\n                        targetOfRow = i + 1;\n                        stop = true;\n                        break;\n                    }\n\n                } else {\n                    counter = 0;\n                }\n            }\n            if (stop) {\n                break;\n            }\n        }\n\n        System.out.println(targetOfRow);\n\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n\n\n\n# Other solution 1 (Pretty code!!!)\n\nimport java.util.Scanner;\n\nclass Main {\n\n    public static void main(String[] args) {\n\n        Scanner scanner = new Scanner(System.in);\n\n        int n = scanner.nextInt();\n        int m = scanner.nextInt();\n\n        int[][] table = new int[n][m];\n\n        int number;\n\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                number = scanner.nextInt();\n                table[i][j] = number;\n            }\n        }\n\n        int k = scanner.nextInt();\n\n        int counter;\n\n        int i = 0;\n\n        boolean available = false;\n\n        LOOP:\n        for (; i < n; i++) {\n            counter = 0;\n            for (int j = 0; j < m; j++) {\n                if (table[i][j] == 0) {\n                    counter++;\n                } else {\n                    counter = 0;\n                }\n                if (counter == k) {\n                    available = true;\n                    break LOOP;\n                }\n            }\n        }\n\n        if (available) {\n            System.out.println(i + 1);\n        } else {\n            System.out.println(0);\n        }\n\n    }\n\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n\n\n\n# Other solution 2\n\nimport java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int row = sc.nextInt();\n        int col = sc.nextInt();\n        int[][] seats = new int[row][col];\n\n        for (int i = 0; i < row; i++) {\n            for (int j = 0; j < col; j++) {\n                seats[i][j] = sc.nextInt();\n            }\n        }\n\n        int k = sc.nextInt();\n        int count = 0;\n        int maxCount = 0;\n\n        for (int i = 0; i < row; i++) {\n            count = 0;\n            for (int j = 0; j < col; j++) {\n                if (seats[i][j] == 0) {\n                    count++;\n                } else {\n                    count = 0;\n                }\n\n                if (count > maxCount) {\n                    maxCount = count;\n                }\n            }\n            if (maxCount >= k) {\n                System.out.println(i + 1);\n                return;\n            }\n        }\n\n        System.out.println(0);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n\n\n\n# Other solution 3\n\nimport java.util.Scanner;\n\nclass Main {\n\n    public static String[] seats;\n    public static int requiredTickets = 0;\n\n    public static void main(String[] args) {\n        // put your code here\n        readInput();\n        for (int i = 0; i < seats.length; i++) {\n            if (seats[i].contains("0".repeat(requiredTickets))) {\n                System.out.println(i + 1);\n                return;\n            }\n        }\n        System.out.println(0);\n    }\n\n    public static void readInput() {\n        Scanner scanner = new Scanner(System.in);\n        String buf = scanner.nextLine();\n        String[] bufSplitted = buf.split(" ");\n        int rows = Integer.parseInt(bufSplitted[0]);\n        seats = new String[rows];\n        for (int i = 0; i < rows; i++) {\n            seats[i] = scanner.nextLine().replace(" ", "");\n        }\n        requiredTickets = scanner.nextInt();\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n',normalizedContent:'# topic\n\nmultidimensional array\n\n\n# problem\n\ncinema\n\nhttps://hyperskill.org/learn/step/1930\n\nthe cinema has n rows, each row consists of m seats (n and m do not exceed 20). a two-dimensional matrix stores the information on the sold tickets: the number 1 means that the ticket for this place is already sold, and the number 0 means that the place is available. you want to buy k tickets to neighboring seats in the same row. find whether it can be done.\n\ninput data format\n\non the input, the program gets the number of n rows and m seats. then, there are n lines, each containing m numbers (0 or 1) separated by spaces. the last line contains the number k.\n\noutput data format\n\nthe program should output the number of the row with k consecutive available seats. if there are several rows with k available seats, output the first row with these seats. if there is no such a row, output the number 0.\n\nsample input 1:\n\n3 4\n0 1 0 1\n1 1 0 1\n1 0 0 1\n2\n\n\n1\n2\n3\n4\n5\n\n\nsample output 1:\n\n3\n\n\n1\n\n\nsample input 2:\n\n3 3\n0 1 0\n1 0 0\n1 1 1\n3\n\n\n1\n2\n3\n4\n5\n\n\nsample output 2:\n\n0\n\n\n1\n\n\nsample input 3:\n\n2 4\n1 1 0 0\n0 0 1 1\n4\n\n\n1\n2\n3\n4\n\n\nsample output 3:\n\n0\n\n\n1\n\n\n\n# hint & explain\n\nif you\'re using a counter, remember to reset it when going from row to row.\n\n\n# solution\n\n\n# my solution\n\nimport java.util.scanner;\n\nclass main {\n    public static void main(string[] args) {\n        // put your code here\n        scanner scanner = new scanner(system.in);\n        int n = scanner.nextint();  // rows\n        int m = scanner.nextint();  // seats\n\n        int[][] matrixofseats = new int[n][m]; // matrix\n\n        for (int i = 0; i < matrixofseats.length; i++) {\n            for (int j = 0; j < matrixofseats[i].length; j++) {\n                matrixofseats[i][j] = scanner.nextint();\n            }\n        }\n\n        int k = scanner.nextint(); // target\n        int counter;\n        int temp = 0;\n        int targetofrow = 0;\n        boolean stop = false;\n\n        for (int i = 0; i < matrixofseats.length; i++) {\n            counter = 0;\n            for (int j = 0; j < matrixofseats[i].length; j++) {\n                if (matrixofseats[i][j] == 0) {\n                    counter++;\n                    temp = counter;\n\n                    if (temp >= k) {\n                        targetofrow = i + 1;\n                        stop = true;\n                        break;\n                    }\n\n                } else {\n                    counter = 0;\n                }\n            }\n            if (stop) {\n                break;\n            }\n        }\n\n        system.out.println(targetofrow);\n\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n\n\n\n# other solution 1 (pretty code!!!)\n\nimport java.util.scanner;\n\nclass main {\n\n    public static void main(string[] args) {\n\n        scanner scanner = new scanner(system.in);\n\n        int n = scanner.nextint();\n        int m = scanner.nextint();\n\n        int[][] table = new int[n][m];\n\n        int number;\n\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                number = scanner.nextint();\n                table[i][j] = number;\n            }\n        }\n\n        int k = scanner.nextint();\n\n        int counter;\n\n        int i = 0;\n\n        boolean available = false;\n\n        loop:\n        for (; i < n; i++) {\n            counter = 0;\n            for (int j = 0; j < m; j++) {\n                if (table[i][j] == 0) {\n                    counter++;\n                } else {\n                    counter = 0;\n                }\n                if (counter == k) {\n                    available = true;\n                    break loop;\n                }\n            }\n        }\n\n        if (available) {\n            system.out.println(i + 1);\n        } else {\n            system.out.println(0);\n        }\n\n    }\n\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n\n\n\n# other solution 2\n\nimport java.util.*;\n\npublic class main {\n    public static void main(string[] args) {\n        scanner sc = new scanner(system.in);\n        int row = sc.nextint();\n        int col = sc.nextint();\n        int[][] seats = new int[row][col];\n\n        for (int i = 0; i < row; i++) {\n            for (int j = 0; j < col; j++) {\n                seats[i][j] = sc.nextint();\n            }\n        }\n\n        int k = sc.nextint();\n        int count = 0;\n        int maxcount = 0;\n\n        for (int i = 0; i < row; i++) {\n            count = 0;\n            for (int j = 0; j < col; j++) {\n                if (seats[i][j] == 0) {\n                    count++;\n                } else {\n                    count = 0;\n                }\n\n                if (count > maxcount) {\n                    maxcount = count;\n                }\n            }\n            if (maxcount >= k) {\n                system.out.println(i + 1);\n                return;\n            }\n        }\n\n        system.out.println(0);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n\n\n\n# other solution 3\n\nimport java.util.scanner;\n\nclass main {\n\n    public static string[] seats;\n    public static int requiredtickets = 0;\n\n    public static void main(string[] args) {\n        // put your code here\n        readinput();\n        for (int i = 0; i < seats.length; i++) {\n            if (seats[i].contains("0".repeat(requiredtickets))) {\n                system.out.println(i + 1);\n                return;\n            }\n        }\n        system.out.println(0);\n    }\n\n    public static void readinput() {\n        scanner scanner = new scanner(system.in);\n        string buf = scanner.nextline();\n        string[] bufsplitted = buf.split(" ");\n        int rows = integer.parseint(bufsplitted[0]);\n        seats = new string[rows];\n        for (int i = 0; i < rows; i++) {\n            seats[i] = scanner.nextline().replace(" ", "");\n        }\n        requiredtickets = scanner.nextint();\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n',charsets:{},lastUpdated:"2022/09/25, 10:41:23",lastUpdatedTimestamp:1664073683e3},{title:"Count words",frontmatter:{title:"Count words",date:"2022-08-15T19:56:36.000Z",permalink:"/pages/b4753d/",tags:["Java","Stream","Problem"]},regularPath:"/01.Java/03.%E7%BB%83%E4%B9%A0%E9%A2%98/02.%E4%BB%A3%E7%A0%81%E9%A2%98/13.Count%20words.html",relativePath:"01.Java/03.练习题/02.代码题/13.Count words.md",key:"v-30bbbfe8",path:"/pages/b4753d/",headers:[{level:2,title:"Topic",slug:"topic",normalizedTitle:"topic",charIndex:2},{level:2,title:"Problem",slug:"problem",normalizedTitle:"problem",charIndex:26},{level:2,title:"Hint & Explain",slug:"hint-explain",normalizedTitle:"hint &amp; explain",charIndex:null},{level:2,title:"Solution",slug:"solution",normalizedTitle:"solution",charIndex:588},{level:3,title:"Other solution 1",slug:"other-solution-1",normalizedTitle:"other solution 1",charIndex:601},{level:3,title:"Other solution 2",slug:"other-solution-2",normalizedTitle:"other solution 2",charIndex:1202}],headersStr:"Topic Problem Hint & Explain Solution Other solution 1 Other solution 2",content:'# Topic\n\nInput stream\n\n\n# Problem\n\nCount words\n\nRead an input text from the console and print the number of words. By word we mean a sequence of characters separated by one or several spaces.\n\nIf the input is empty or there are no characters except spaces, print 0.\n\n\n# Hint & Explain\n\n> Make sure to follow this order: 1- use reader.readLine() to read the input 2 - use trim() on the input 3- CLOSE THE READER with reader.close() 4- use if statement: 5- if string.isEmpty() then ... 6- else, split("\\s+") string into an array => String[] string = input.split("\\s+") then print count\n\n\n# Solution\n\n\n# Other solution 1\n\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\n\nclass Main {\n    public static void main(String[] args) throws Exception {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        // start coding here\n        String input = reader.readLine().trim();\n\n        reader.close();\n\n        if (input.isEmpty()) {\n            System.out.println(0);\n        } else {\n            String[] array = input.split("\\\\s+");\n            System.out.println(array.length);\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n# Other solution 2\n\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\n\nclass Main {\n    public static void main(String[] args) throws Exception {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        // start coding here\n        int inputAsInt = reader.read();\n        int count = 0;\n        final int intSpace = 32;\n        final int intDec = 10;\n        boolean flag = false;\n        while (inputAsInt != -1) {\n            if (inputAsInt != intSpace && !flag) {\n                count++;\n                flag = true;\n            } else if (inputAsInt == intSpace) {\n                flag = false;\n            }\n            inputAsInt = reader.read();\n            if (inputAsInt == intDec) {\n                break;\n            }\n        }\n        System.out.println(count);\n        reader.close();\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n',normalizedContent:'# topic\n\ninput stream\n\n\n# problem\n\ncount words\n\nread an input text from the console and print the number of words. by word we mean a sequence of characters separated by one or several spaces.\n\nif the input is empty or there are no characters except spaces, print 0.\n\n\n# hint & explain\n\n> make sure to follow this order: 1- use reader.readline() to read the input 2 - use trim() on the input 3- close the reader with reader.close() 4- use if statement: 5- if string.isempty() then ... 6- else, split("\\s+") string into an array => string[] string = input.split("\\s+") then print count\n\n\n# solution\n\n\n# other solution 1\n\nimport java.io.bufferedreader;\nimport java.io.inputstreamreader;\n\nclass main {\n    public static void main(string[] args) throws exception {\n        bufferedreader reader = new bufferedreader(new inputstreamreader(system.in));\n        // start coding here\n        string input = reader.readline().trim();\n\n        reader.close();\n\n        if (input.isempty()) {\n            system.out.println(0);\n        } else {\n            string[] array = input.split("\\\\s+");\n            system.out.println(array.length);\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n# other solution 2\n\nimport java.io.bufferedreader;\nimport java.io.inputstreamreader;\n\nclass main {\n    public static void main(string[] args) throws exception {\n        bufferedreader reader = new bufferedreader(new inputstreamreader(system.in));\n        // start coding here\n        int inputasint = reader.read();\n        int count = 0;\n        final int intspace = 32;\n        final int intdec = 10;\n        boolean flag = false;\n        while (inputasint != -1) {\n            if (inputasint != intspace && !flag) {\n                count++;\n                flag = true;\n            } else if (inputasint == intspace) {\n                flag = false;\n            }\n            inputasint = reader.read();\n            if (inputasint == intdec) {\n                break;\n            }\n        }\n        system.out.println(count);\n        reader.close();\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n',charsets:{},lastUpdated:"2022/09/25, 10:41:23",lastUpdatedTimestamp:1664073683e3},{title:"Calculate square",frontmatter:{title:"Calculate square",date:"2022-08-06T22:35:03.000Z",permalink:"/pages/b260fe/",tags:["Java","Array","Problem"]},regularPath:"/01.Java/03.%E7%BB%83%E4%B9%A0%E9%A2%98/02.%E4%BB%A3%E7%A0%81%E9%A2%98/12.Calculate%20square.html",relativePath:"01.Java/03.练习题/02.代码题/12.Calculate square.md",key:"v-7c79e454",path:"/pages/b260fe/",headers:[{level:2,title:"Topic",slug:"topic",normalizedTitle:"topic",charIndex:2},{level:2,title:"Problem",slug:"problem",normalizedTitle:"problem",charIndex:30},{level:2,title:"Hint & Explain",slug:"hint-explain",normalizedTitle:"hint &amp; explain",charIndex:null},{level:2,title:"Solution",slug:"solution",normalizedTitle:"solution",charIndex:492},{level:3,title:"Other solution 1",slug:"other-solution-1",normalizedTitle:"other solution 1",charIndex:505},{level:3,title:"Other solution 2",slug:"other-solution-2",normalizedTitle:"other solution 2",charIndex:1154},{level:3,title:"Other solution 3",slug:"other-solution-3",normalizedTitle:"other solution 3",charIndex:1412},{level:3,title:"Error solution 1",slug:"error-solution-1",normalizedTitle:"error solution 1",charIndex:1759},{level:3,title:"Error solution 2",slug:"error-solution-2",normalizedTitle:"error solution 2",charIndex:2193}],headersStr:"Topic Problem Hint & Explain Solution Other solution 1 Other solution 2 Other solution 3 Error solution 1 Error solution 2",content:'# Topic\n\nArray exceptions\n\n\n# Problem\n\nCalculate Square\n\nYou need to implement the calculateSquare method.\n\nIt should output the square of the element by the provided index of an array. In the case when the exception might happen, your program output should be: Exception!\n\n\n# Hint & Explain\n\n> if checking with conditions check if array == null first\n> \n> Order of conditions in if statement matters!\n> \n> first check if array is null, then his length, not inversely, or you get error:)\n\n\n# Solution\n\n\n# Other solution 1\n\nclass FixingExceptions {\n\n    public static void calculateSquare(int[] array, int index) {\n        // write your code here\n        String result;\n        \n        /* Important! If "array.length" were before "array==null", it wouldn\'t work!\n        You may want to read more about evaluating OR-expressions and AND-expressions */\n        if (array == null || index < 0 || index >= array.length) { \n            result = "Exception!";\n        } else {\n            result = String.valueOf(array[index] * array[index]);\n        }\n        \n        System.out.println(result);\n\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# Other solution 2\n\nclass FixingExceptions {\n    public static void calculateSquare(int[] a, int i) {\n        boolean exception = a == null || i < 0 || i >= a.length;\n        System.out.print(exception ? "Exception!" : a[i] * a[i]);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# Other solution 3\n\nclass FixingExceptions {\n\n    public static void calculateSquare(int[] array, int index) {\n        // write your code here\n        try {\n            System.out.println((int) Math.pow(array[index], 2));\n        } catch (Exception e) {\n            System.out.println("Exception!");\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# Error solution 1\n\nclass FixingExceptions {\n\n    public static void calculateSquare(int[] array, int index) {\n        // write your code here\n        \n        // it would be error!!!\n        if (index >= 0 || index <= array.length - 1 |  array != null) { \n            System.out.println(array[index] * array[index]);\n        } else {\n            System.out.println("Exception!");\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# Error solution 2\n\nclass FixingExceptions {\n\n    public static void calculateSquare(int[] array, int index) {\n        // write your code here\n        \n        // it would be error too!!!\n        if (array != null || index >= 0 || index <= array.length - 1) { \n            System.out.println(array[index] * array[index]);\n        } else {\n            System.out.println("Exception!");\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n',normalizedContent:'# topic\n\narray exceptions\n\n\n# problem\n\ncalculate square\n\nyou need to implement the calculatesquare method.\n\nit should output the square of the element by the provided index of an array. in the case when the exception might happen, your program output should be: exception!\n\n\n# hint & explain\n\n> if checking with conditions check if array == null first\n> \n> order of conditions in if statement matters!\n> \n> first check if array is null, then his length, not inversely, or you get error:)\n\n\n# solution\n\n\n# other solution 1\n\nclass fixingexceptions {\n\n    public static void calculatesquare(int[] array, int index) {\n        // write your code here\n        string result;\n        \n        /* important! if "array.length" were before "array==null", it wouldn\'t work!\n        you may want to read more about evaluating or-expressions and and-expressions */\n        if (array == null || index < 0 || index >= array.length) { \n            result = "exception!";\n        } else {\n            result = string.valueof(array[index] * array[index]);\n        }\n        \n        system.out.println(result);\n\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# other solution 2\n\nclass fixingexceptions {\n    public static void calculatesquare(int[] a, int i) {\n        boolean exception = a == null || i < 0 || i >= a.length;\n        system.out.print(exception ? "exception!" : a[i] * a[i]);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# other solution 3\n\nclass fixingexceptions {\n\n    public static void calculatesquare(int[] array, int index) {\n        // write your code here\n        try {\n            system.out.println((int) math.pow(array[index], 2));\n        } catch (exception e) {\n            system.out.println("exception!");\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# error solution 1\n\nclass fixingexceptions {\n\n    public static void calculatesquare(int[] array, int index) {\n        // write your code here\n        \n        // it would be error!!!\n        if (index >= 0 || index <= array.length - 1 |  array != null) { \n            system.out.println(array[index] * array[index]);\n        } else {\n            system.out.println("exception!");\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# error solution 2\n\nclass fixingexceptions {\n\n    public static void calculatesquare(int[] array, int index) {\n        // write your code here\n        \n        // it would be error too!!!\n        if (array != null || index >= 0 || index <= array.length - 1) { \n            system.out.println(array[index] * array[index]);\n        } else {\n            system.out.println("exception!");\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n',charsets:{cjk:!0},lastUpdated:"2022/09/25, 10:41:23",lastUpdatedTimestamp:1664073683e3},{title:"Robot control",frontmatter:{title:"Robot control",date:"2022-09-03T11:51:54.000Z",permalink:"/pages/7faafd/",tags:["Enum","Java","Problem"]},regularPath:"/01.Java/03.%E7%BB%83%E4%B9%A0%E9%A2%98/02.%E4%BB%A3%E7%A0%81%E9%A2%98/14.Robot%20control.html",relativePath:"01.Java/03.练习题/02.代码题/14.Robot control.md",key:"v-36d8e52c",path:"/pages/7faafd/",headers:[{level:2,title:"Topic",slug:"topic",normalizedTitle:"topic",charIndex:2},{level:2,title:"Problem",slug:"problem",normalizedTitle:"problem",charIndex:40},{level:2,title:"Hint & Explain",slug:"hint-explain",normalizedTitle:"hint &amp; explain",charIndex:null},{level:2,title:"Solution",slug:"solution",normalizedTitle:"solution",charIndex:2536},{level:3,title:"Other person solution",slug:"other-person-solution",normalizedTitle:"other person solution",charIndex:2549}],headersStr:"Topic Problem Hint & Explain Solution Other person solution",content:"# Topic\n\nFields and methods in enum\n\n\n# Problem\n\nRobot control\n\n注意\n\nWow! This problem is kind of tricky. If you're ready to put your thinking cap on, brace yourself and good luck! Otherwise, you can skip it for now and return any time later\n\nThere is a robot in the game field. The position of the robot in this field is described by two integer coordinates: X and Y. The X axis is oriented from left to right, the Y axis — from bottom to top.\n\nAt the initial moment, the robot is located at some coordinate on the field. It's also known where the robot looks: up, down, to the right or to the left. The initial position of the robot and its direction can have any values. You need to bring the robot to the destination point of the game field.\n\nA robot is described by the Robot class. You can use the following methods of this class (with unknown implementation):\n\npublic class Robot {\n\n    public Direction getDirection() {\n        // current direction\n    }\n\n    public int getX() {\n        // current X coordinate\n    }\n\n    public int getY() {\n        // current Y coordinate\n    }\n\n    public void turnLeft() {\n        // rotate the robot 90 degrees counterclockwise\n    }\n\n    public void turnRight() {\n        // rotate the robot 90 degrees clockwise\n    }\n\n    public void stepForward() {\n        // take one step in the current direction\n        // x or y coordinate will be changed by 1\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\nThe direction of the robot is an enumeration:\n\npublic enum Direction {\n    UP,\n    DOWN,\n    LEFT,\n    RIGHT\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\nIt looks like the picture below:\n\n\n\nExample\n\n * The following values are passed to the method: toX == 3, toY == 0.\n * The initial state of this robot: robot.getX() == 0, robot.getY() == 0, robot.getDirection() == Direction.UP.\n\nTo bring the robot to the destination point (3, 0), the method should call the following methods:\n\nrobot.turnRight();\nrobot.stepForward();\nrobot.stepForward();\nrobot.stepForward();\n\n\n1\n2\n3\n4\n\n\nAnother Example\n\n * The following target values are passed to the method: toX == 0, toY == -1.\n * The initial state of this robot: robot.getX() == 1, robot.getY() == 1, robot.getDirection() == Direction.RIGHT.\n\nTo bring the robot to the destination point (0, -1), the method should call the following methods:\n\nrobot.turnRight();\nrobot.turnRight();\nrobot.stepForward();\nrobot.turnLeft();\nrobot.stepForward();\nrobot.stepForward();\n\n\n1\n2\n3\n4\n5\n6\n\n\nTry to crack this problem!\n\n\n# Hint & Explain\n\n// 输入提示\n\n\n# Solution\n\n\n# Other person solution\n\nclass Move {\n    public static void moveRobot(Robot robot, int toX, int toY) {\n        // get x positive or negative(right or left)\n        // make robot go left or right\n        if (toX > robot.getX()) {\n            // set to facing right\n            while (robot.getDirection() != Direction.RIGHT) {\n                System.out.println(robot.getDirection());\n                robot.turnRight();\n            }\n\n        } else {\n            // set to facing left\n            while (robot.getDirection() != Direction.LEFT) {\n                robot.turnRight();\n            }\n        }\n\n        // iterate over difference between toX and current X\n        while (robot.getX() != toX) {\n            robot.stepForward();\n        }\n\n        // get y positive or negative(Up or down)\n        // make robot go up or down\n        if (toY > robot.getY()) {\n            // set to facing up\n            while (robot.getDirection() != Direction.UP) {\n                robot.turnRight();\n            }\n\n        } else {\n            // set to facing down\n            while (robot.getDirection() != Direction.DOWN) {\n                robot.turnRight();\n            }\n        }\n\n        // iterate over difference between toY and current Y\n        while (robot.getY() != toY) {\n            robot.stepForward();\n        }\n    }\n}\n\n//Don't change code below\n\nenum Direction {\n    UP(0, 1),\n    DOWN(0, -1),\n    LEFT(-1, 0),\n    RIGHT(1, 0);\n\n    private final int dx;\n    private final int dy;\n\n    Direction(int dx, int dy) {\n        this.dx = dx;\n        this.dy = dy;\n    }\n\n    public Direction turnLeft() {\n        switch (this) {\n            case UP:\n                return LEFT;\n            case DOWN:\n                return RIGHT;\n            case LEFT:\n                return DOWN;\n            case RIGHT:\n                return UP;\n            default:\n                throw new IllegalStateException();\n        }\n    }\n\n    public Direction turnRight() {\n        switch (this) {\n            case UP:\n                return RIGHT;\n            case DOWN:\n                return LEFT;\n            case LEFT:\n                return UP;\n            case RIGHT:\n                return DOWN;\n            default:\n                throw new IllegalStateException();\n        }\n    }\n\n    public int dx() {\n        return dx;\n    }\n\n    public int dy() {\n        return dy;\n    }\n}\n\nclass Robot {\n    private int x;\n    private int y;\n    private Direction direction;\n\n    public Robot(int x, int y, Direction direction) {\n        this.x = x;\n        this.y = y;\n        this.direction = direction;\n    }\n\n    public void turnLeft() {\n        direction = direction.turnLeft();\n    }\n\n    public void turnRight() {\n        direction = direction.turnRight();\n    }\n\n    public void stepForward() {\n        x += direction.dx();\n        y += direction.dy();\n    }\n\n    public Direction getDirection() {\n        return direction;\n    }\n\n    public int getX() {\n        return x;\n    }\n\n    public int getY() {\n        return y;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n",normalizedContent:"# topic\n\nfields and methods in enum\n\n\n# problem\n\nrobot control\n\n注意\n\nwow! this problem is kind of tricky. if you're ready to put your thinking cap on, brace yourself and good luck! otherwise, you can skip it for now and return any time later\n\nthere is a robot in the game field. the position of the robot in this field is described by two integer coordinates: x and y. the x axis is oriented from left to right, the y axis — from bottom to top.\n\nat the initial moment, the robot is located at some coordinate on the field. it's also known where the robot looks: up, down, to the right or to the left. the initial position of the robot and its direction can have any values. you need to bring the robot to the destination point of the game field.\n\na robot is described by the robot class. you can use the following methods of this class (with unknown implementation):\n\npublic class robot {\n\n    public direction getdirection() {\n        // current direction\n    }\n\n    public int getx() {\n        // current x coordinate\n    }\n\n    public int gety() {\n        // current y coordinate\n    }\n\n    public void turnleft() {\n        // rotate the robot 90 degrees counterclockwise\n    }\n\n    public void turnright() {\n        // rotate the robot 90 degrees clockwise\n    }\n\n    public void stepforward() {\n        // take one step in the current direction\n        // x or y coordinate will be changed by 1\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\nthe direction of the robot is an enumeration:\n\npublic enum direction {\n    up,\n    down,\n    left,\n    right\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\nit looks like the picture below:\n\n\n\nexample\n\n * the following values are passed to the method: tox == 3, toy == 0.\n * the initial state of this robot: robot.getx() == 0, robot.gety() == 0, robot.getdirection() == direction.up.\n\nto bring the robot to the destination point (3, 0), the method should call the following methods:\n\nrobot.turnright();\nrobot.stepforward();\nrobot.stepforward();\nrobot.stepforward();\n\n\n1\n2\n3\n4\n\n\nanother example\n\n * the following target values are passed to the method: tox == 0, toy == -1.\n * the initial state of this robot: robot.getx() == 1, robot.gety() == 1, robot.getdirection() == direction.right.\n\nto bring the robot to the destination point (0, -1), the method should call the following methods:\n\nrobot.turnright();\nrobot.turnright();\nrobot.stepforward();\nrobot.turnleft();\nrobot.stepforward();\nrobot.stepforward();\n\n\n1\n2\n3\n4\n5\n6\n\n\ntry to crack this problem!\n\n\n# hint & explain\n\n// 输入提示\n\n\n# solution\n\n\n# other person solution\n\nclass move {\n    public static void moverobot(robot robot, int tox, int toy) {\n        // get x positive or negative(right or left)\n        // make robot go left or right\n        if (tox > robot.getx()) {\n            // set to facing right\n            while (robot.getdirection() != direction.right) {\n                system.out.println(robot.getdirection());\n                robot.turnright();\n            }\n\n        } else {\n            // set to facing left\n            while (robot.getdirection() != direction.left) {\n                robot.turnright();\n            }\n        }\n\n        // iterate over difference between tox and current x\n        while (robot.getx() != tox) {\n            robot.stepforward();\n        }\n\n        // get y positive or negative(up or down)\n        // make robot go up or down\n        if (toy > robot.gety()) {\n            // set to facing up\n            while (robot.getdirection() != direction.up) {\n                robot.turnright();\n            }\n\n        } else {\n            // set to facing down\n            while (robot.getdirection() != direction.down) {\n                robot.turnright();\n            }\n        }\n\n        // iterate over difference between toy and current y\n        while (robot.gety() != toy) {\n            robot.stepforward();\n        }\n    }\n}\n\n//don't change code below\n\nenum direction {\n    up(0, 1),\n    down(0, -1),\n    left(-1, 0),\n    right(1, 0);\n\n    private final int dx;\n    private final int dy;\n\n    direction(int dx, int dy) {\n        this.dx = dx;\n        this.dy = dy;\n    }\n\n    public direction turnleft() {\n        switch (this) {\n            case up:\n                return left;\n            case down:\n                return right;\n            case left:\n                return down;\n            case right:\n                return up;\n            default:\n                throw new illegalstateexception();\n        }\n    }\n\n    public direction turnright() {\n        switch (this) {\n            case up:\n                return right;\n            case down:\n                return left;\n            case left:\n                return up;\n            case right:\n                return down;\n            default:\n                throw new illegalstateexception();\n        }\n    }\n\n    public int dx() {\n        return dx;\n    }\n\n    public int dy() {\n        return dy;\n    }\n}\n\nclass robot {\n    private int x;\n    private int y;\n    private direction direction;\n\n    public robot(int x, int y, direction direction) {\n        this.x = x;\n        this.y = y;\n        this.direction = direction;\n    }\n\n    public void turnleft() {\n        direction = direction.turnleft();\n    }\n\n    public void turnright() {\n        direction = direction.turnright();\n    }\n\n    public void stepforward() {\n        x += direction.dx();\n        y += direction.dy();\n    }\n\n    public direction getdirection() {\n        return direction;\n    }\n\n    public int getx() {\n        return x;\n    }\n\n    public int gety() {\n        return y;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n",charsets:{cjk:!0},lastUpdated:"2022/09/25, 10:41:23",lastUpdatedTimestamp:1664073683e3},{title:"Leaderboard",frontmatter:{title:"Leaderboard",date:"2022-10-06T21:08:44.000Z",permalink:"/pages/212d51/",tags:[null]},regularPath:"/01.Java/03.%E7%BB%83%E4%B9%A0%E9%A2%98/02.%E4%BB%A3%E7%A0%81%E9%A2%98/18.Leaderboard.html",relativePath:"01.Java/03.练习题/02.代码题/18.Leaderboard.md",key:"v-51cbdc35",path:"/pages/212d51/",headers:[{level:2,title:"Topic",slug:"topic",normalizedTitle:"topic",charIndex:2},{level:2,title:"Problem",slug:"problem",normalizedTitle:"problem",charIndex:24},{level:3,title:"Code of problem",slug:"code-of-problem",normalizedTitle:"code of problem",charIndex:573},{level:2,title:"Hint & Explain",slug:"hint-explain",normalizedTitle:"hint &amp; explain",charIndex:null},{level:2,title:"Solution",slug:"solution",normalizedTitle:"solution",charIndex:1826},{level:3,title:"My solution",slug:"my-solution",normalizedTitle:"my solution",charIndex:1839},{level:3,title:"Other solution 1",slug:"other-solution-1",normalizedTitle:"other solution 1",charIndex:2075},{level:3,title:"Other solution 2",slug:"other-solution-2",normalizedTitle:"other solution 2",charIndex:2246}],headersStr:"Topic Problem Code of problem Hint & Explain Solution My solution Other solution 1 Other solution 2",content:"# Topic\n\nComparable\n\n\n# Problem\n\nLeaderboard\n\nThere is an application to create leaderboards of e-sports competitions. It uses the Score class to represent a score of each player. This class has two fields: player for the player's name and totalScore for that player's total score. To build a leaderboard, the Score objects need to be compared. A Score object is considered bigger than another Score if it's totalScore value is bigger. If totalScore values of two Score objects are the same, such objects must be compared by their player values. See the example below.\n\n\n# Code of problem\n\nimport java.util.*;\n\nclass Score implements Comparable<Score> {\n    private final String player;\n    private final int totalScore;\n\n    public Score(String player, int totalScore) {\n        this.player = player;\n        this.totalScore = totalScore;\n    }\n\n    public String getPlayer() {\n        return player;\n    }\n\n    public int getTotalScore() {\n        return totalScore;\n    }\n\n    @Override\n    public String toString() {\n        return player + '=' + totalScore;\n    }\n\n    @Override\n    public int compareTo(Score score) {\n        // your code here\n    }\n}\n\n// do not change the code below\nclass Main {\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        List<Score> scores = new ArrayList<>();\n        while (sc.hasNextLine()) {\n            String[] input = sc.nextLine().split(\" \");\n            Score score = new Score(input[0], Integer.parseInt(input[1]));\n            scores.add(score);\n        }\n\n        Collections.sort(scores);\n        System.out.println(scores);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n\n\n\n# Hint & Explain\n\n> compare both fields (score then player)\n\n\n# Solution\n\n\n# My solution\n\n// your code here\nif (getTotalScore() > score.getTotalScore()) return 1;\nelse if (getTotalScore() < score.getTotalScore()) return -1;\nelse {\n    return getPlayer().compareTo(score.getPlayer());\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n> BAD!\n\n\n# Other solution 1\n\n// your code here\nint result = Integer.compare(totalScore, score.totalScore);\nreturn result == 0 ? player.compareTo(score.player) : result;\n\n\n1\n2\n3\n\n\n\n# Other solution 2\n\n// your code here\nif (totalScore == score.totalScore) {\n    return player.compareTo(score.player);\n} else {\n    return Integer.compare(totalScore, score.totalScore);\n}\n\n\n1\n2\n3\n4\n5\n6\n",normalizedContent:"# topic\n\ncomparable\n\n\n# problem\n\nleaderboard\n\nthere is an application to create leaderboards of e-sports competitions. it uses the score class to represent a score of each player. this class has two fields: player for the player's name and totalscore for that player's total score. to build a leaderboard, the score objects need to be compared. a score object is considered bigger than another score if it's totalscore value is bigger. if totalscore values of two score objects are the same, such objects must be compared by their player values. see the example below.\n\n\n# code of problem\n\nimport java.util.*;\n\nclass score implements comparable<score> {\n    private final string player;\n    private final int totalscore;\n\n    public score(string player, int totalscore) {\n        this.player = player;\n        this.totalscore = totalscore;\n    }\n\n    public string getplayer() {\n        return player;\n    }\n\n    public int gettotalscore() {\n        return totalscore;\n    }\n\n    @override\n    public string tostring() {\n        return player + '=' + totalscore;\n    }\n\n    @override\n    public int compareto(score score) {\n        // your code here\n    }\n}\n\n// do not change the code below\nclass main {\n\n    public static void main(string[] args) {\n        scanner sc = new scanner(system.in);\n        list<score> scores = new arraylist<>();\n        while (sc.hasnextline()) {\n            string[] input = sc.nextline().split(\" \");\n            score score = new score(input[0], integer.parseint(input[1]));\n            scores.add(score);\n        }\n\n        collections.sort(scores);\n        system.out.println(scores);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n\n\n\n# hint & explain\n\n> compare both fields (score then player)\n\n\n# solution\n\n\n# my solution\n\n// your code here\nif (gettotalscore() > score.gettotalscore()) return 1;\nelse if (gettotalscore() < score.gettotalscore()) return -1;\nelse {\n    return getplayer().compareto(score.getplayer());\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n> bad!\n\n\n# other solution 1\n\n// your code here\nint result = integer.compare(totalscore, score.totalscore);\nreturn result == 0 ? player.compareto(score.player) : result;\n\n\n1\n2\n3\n\n\n\n# other solution 2\n\n// your code here\nif (totalscore == score.totalscore) {\n    return player.compareto(score.player);\n} else {\n    return integer.compare(totalscore, score.totalscore);\n}\n\n\n1\n2\n3\n4\n5\n6\n",charsets:{},lastUpdated:"2022/10/12, 17:01:25",lastUpdatedTimestamp:1665565285e3},{title:"Find the nearest number",frontmatter:{title:"Find the nearest number",date:"2022-10-04T17:04:07.000Z",permalink:"/pages/a9b4c5/",tags:null},regularPath:"/01.Java/03.%E7%BB%83%E4%B9%A0%E9%A2%98/02.%E4%BB%A3%E7%A0%81%E9%A2%98/17.Find%20the%20nearest%20number.html",relativePath:"01.Java/03.练习题/02.代码题/17.Find the nearest number.md",key:"v-3a20ea46",path:"/pages/a9b4c5/",headers:[{level:2,title:"Topic",slug:"topic",normalizedTitle:"topic",charIndex:2},{level:2,title:"Problem",slug:"problem",normalizedTitle:"problem",charIndex:23},{level:2,title:"Hint & Explain",slug:"hint-explain",normalizedTitle:"hint &amp; explain",charIndex:null},{level:2,title:"Solution",slug:"solution",normalizedTitle:"solution",charIndex:2960},{level:3,title:"My solution",slug:"my-solution",normalizedTitle:"my solution",charIndex:2973},{level:3,title:"Other solution 1",slug:"other-solution-1",normalizedTitle:"other solution 1",charIndex:3051},{level:3,title:"Other solution 2",slug:"other-solution-2",normalizedTitle:"other solution 2",charIndex:4058},{level:3,title:"Other solution 3",slug:"other-solution-3",normalizedTitle:"other solution 3",charIndex:4941},{level:3,title:"Other solution 4",slug:"other-solution-4",normalizedTitle:"other solution 4",charIndex:5869}],headersStr:"Topic Problem Hint & Explain Solution My solution Other solution 1 Other solution 2 Other solution 3 Other solution 4",content:'# Topic\n\nArrayList\n\n\n# Problem\n\nFind the nearest number\n\nWrite a program that finds the elements in an array of integers that are closest to a given integer. If you find several integers with the same distance to the N, you should output all of them in the ascending order. If there are several equal numbers, output them all.\n\nInput: a set of integers and a number N.\n\nOutput: some number(s) from the given array.\n\nSample Input 1:\n\n1 2 4 5\n3\n\n\n1\n2\n\n\nSample Output 1:\n\n2 4\n\n\n1\n\n\nSample Input 2:\n\n1 2 3 4\n6\n\n\n1\n2\n\n\nSample Output 2:\n\n4\n\n\n1\n\n\nSample Input 3:\n\n5 1 3 3 1 5\n4\n\n\n1\n2\n\n\nSample Output 3:\n\n3 3 5 5\n\n\n1\n\n\n\n# Hint & Explain\n\n> You need to use methods we haven\'t been taught (in my opinion, this makes this a bad problem), you should use Collections.sort() which sorts a collection, and also Math.abs(a) which returns absolute value of a (if it is positive, it is the same, if it is negative it becomes the positive equivalent).\n> \n> We were also not taught how to approach a complicated problem like this, it is not good to just throw us into this with only the advanced users already understanding what they need to do, lastly there was some poor wording in the question, especially with the word "distance". I would recommend either avoiding problems like this or teaching us everything we need to understand before giving it to us, it took me a long time to figure out a lot of this because I had to learn on my own, go scrambling around the internet to understand the necessary information when it could have been taught in a topic.\n\n> That is relatively complex task, not trivial at least. Good thing is however you can split it to several trivial task and implement them one after another.\n> \n>  * input data: you\'ve got a line of integers and yet another one in a separate line. Get the first line as a string, split it by spaces to array, get from each sub-string an integer and put it in int[] array or ArrayList or any storage of your preference. Just get the number N on the next line.\n>  * distance: means you need to find a minimal distance between N and numbers in array. It could be 0 or anything. Trick here if you just get the difference between number in array and N it could be positive or negative, depends from what side number is closer to N. Somehow you need to get rid off the sign, the absolute value you are interested in.\n>  * find all nearest numbers: you have your distance, find all numbers in array with exactly this distance from N and store them some were, ArrayList wouldn\'t be overkill here.\n>  * sort and output: task requires output in ascending order, just sort and print your favorite way\n> \n> Neither of this sub task requires you to know what you haven\'t taught yet till that point. If you lazy enough to write your own abs() function here, use Math.abs() instead - it is proven to work since Java\'s childhood )\n\n> Useful link: https://stackoverflow.com/questions/1187352/find-closest-value-in-an-ordered-list\n\n\n# Solution\n\n\n# My solution\n\n// I don\'t even have the capacity to solve this problem\n\n\n1\n\n\n\n# Other solution 1\n\nimport java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        String[] items = scanner.nextLine().split("\\\\s+");\n        List<Integer> numbers = new ArrayList<>();\n\n        for (String item : items) {\n            numbers.add(Integer.parseInt(item));\n        }\n\n        int n = scanner.nextInt();\n        ArrayList<Integer> result = new ArrayList<>();\n\n        int delta = Integer.MAX_VALUE;\n        for (int i : numbers) {\n            if (Math.abs(i - n) < delta) {\n                delta = Math.abs(i - n);\n                result.clear();\n                result.add(i);\n            } else if (Math.abs(i - n) == delta) {\n                result.add(i);\n            }\n        }\n\n        Collections.sort(result);\n\n        for (int item : result) {\n            System.out.print(item + " ");\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n\n\n\n# Other solution 2\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        var list = new ArrayList<Integer>();\n        while (scanner.hasNextInt()) {\n            list.add(scanner.nextInt());\n        }\n        var n = list.remove(list.size() - 1);\n        Collections.sort(list);\n        var closest = Integer.MAX_VALUE;\n        for (Integer element : list) {\n            if (Math.abs(n - element) < closest) {\n                closest = Math.abs(n - element);\n            }\n        }\n        for (Integer element : list) {\n            if (Math.abs(n - element) == closest) {\n                System.out.print(element + " ");\n            }\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n\n# Other solution 3\n\nimport java.util.*;\nimport java.util.stream.Collectors;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String line = scanner.nextLine();\n        String[] numbers = line.split("\\\\s+");\n        List<Integer> nums = Arrays.stream(numbers).map(Integer::parseInt).sorted().collect(Collectors.toList());\n        int minimumDistance = Integer.MAX_VALUE;\n        int reference = scanner.nextInt();\n        for (int num: nums) {\n            int distance = Math.abs(num - reference);\n            if (distance < minimumDistance) {\n                minimumDistance = distance;\n            }\n        }\n        for (int num: nums) {\n            if (Math.abs(num - reference) == minimumDistance) {\n                System.out.print(num + " ");\n            }\n        }\n\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\n\n# Other solution 4\n\nimport java.util.*;\nimport java.util.stream.Collectors;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        List<Integer> arrayNumber = Arrays.stream(scanner.nextLine().split(" "))\n                .map(Integer::parseInt)\n                .sorted()\n                .collect(Collectors.toList());\n\n        int n = scanner.nextInt();\n        int minDistance = arrayNumber.stream().mapToInt(e -> Math.abs(n - e)).min().orElseThrow();\n\n        arrayNumber.stream()\n            .filter(e -> Math.abs(n - e) == minDistance)\n            .forEach(e -> System.out.printf("%d ", e));\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n',normalizedContent:'# topic\n\narraylist\n\n\n# problem\n\nfind the nearest number\n\nwrite a program that finds the elements in an array of integers that are closest to a given integer. if you find several integers with the same distance to the n, you should output all of them in the ascending order. if there are several equal numbers, output them all.\n\ninput: a set of integers and a number n.\n\noutput: some number(s) from the given array.\n\nsample input 1:\n\n1 2 4 5\n3\n\n\n1\n2\n\n\nsample output 1:\n\n2 4\n\n\n1\n\n\nsample input 2:\n\n1 2 3 4\n6\n\n\n1\n2\n\n\nsample output 2:\n\n4\n\n\n1\n\n\nsample input 3:\n\n5 1 3 3 1 5\n4\n\n\n1\n2\n\n\nsample output 3:\n\n3 3 5 5\n\n\n1\n\n\n\n# hint & explain\n\n> you need to use methods we haven\'t been taught (in my opinion, this makes this a bad problem), you should use collections.sort() which sorts a collection, and also math.abs(a) which returns absolute value of a (if it is positive, it is the same, if it is negative it becomes the positive equivalent).\n> \n> we were also not taught how to approach a complicated problem like this, it is not good to just throw us into this with only the advanced users already understanding what they need to do, lastly there was some poor wording in the question, especially with the word "distance". i would recommend either avoiding problems like this or teaching us everything we need to understand before giving it to us, it took me a long time to figure out a lot of this because i had to learn on my own, go scrambling around the internet to understand the necessary information when it could have been taught in a topic.\n\n> that is relatively complex task, not trivial at least. good thing is however you can split it to several trivial task and implement them one after another.\n> \n>  * input data: you\'ve got a line of integers and yet another one in a separate line. get the first line as a string, split it by spaces to array, get from each sub-string an integer and put it in int[] array or arraylist or any storage of your preference. just get the number n on the next line.\n>  * distance: means you need to find a minimal distance between n and numbers in array. it could be 0 or anything. trick here if you just get the difference between number in array and n it could be positive or negative, depends from what side number is closer to n. somehow you need to get rid off the sign, the absolute value you are interested in.\n>  * find all nearest numbers: you have your distance, find all numbers in array with exactly this distance from n and store them some were, arraylist wouldn\'t be overkill here.\n>  * sort and output: task requires output in ascending order, just sort and print your favorite way\n> \n> neither of this sub task requires you to know what you haven\'t taught yet till that point. if you lazy enough to write your own abs() function here, use math.abs() instead - it is proven to work since java\'s childhood )\n\n> useful link: https://stackoverflow.com/questions/1187352/find-closest-value-in-an-ordered-list\n\n\n# solution\n\n\n# my solution\n\n// i don\'t even have the capacity to solve this problem\n\n\n1\n\n\n\n# other solution 1\n\nimport java.util.*;\n\npublic class main {\n    public static void main(string[] args) {\n        scanner scanner = new scanner(system.in);\n\n        string[] items = scanner.nextline().split("\\\\s+");\n        list<integer> numbers = new arraylist<>();\n\n        for (string item : items) {\n            numbers.add(integer.parseint(item));\n        }\n\n        int n = scanner.nextint();\n        arraylist<integer> result = new arraylist<>();\n\n        int delta = integer.max_value;\n        for (int i : numbers) {\n            if (math.abs(i - n) < delta) {\n                delta = math.abs(i - n);\n                result.clear();\n                result.add(i);\n            } else if (math.abs(i - n) == delta) {\n                result.add(i);\n            }\n        }\n\n        collections.sort(result);\n\n        for (int item : result) {\n            system.out.print(item + " ");\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n\n\n\n# other solution 2\n\nimport java.util.arraylist;\nimport java.util.collections;\nimport java.util.scanner;\n\npublic class main {\n    public static void main(string[] args) {\n        scanner scanner = new scanner(system.in);\n        var list = new arraylist<integer>();\n        while (scanner.hasnextint()) {\n            list.add(scanner.nextint());\n        }\n        var n = list.remove(list.size() - 1);\n        collections.sort(list);\n        var closest = integer.max_value;\n        for (integer element : list) {\n            if (math.abs(n - element) < closest) {\n                closest = math.abs(n - element);\n            }\n        }\n        for (integer element : list) {\n            if (math.abs(n - element) == closest) {\n                system.out.print(element + " ");\n            }\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n\n# other solution 3\n\nimport java.util.*;\nimport java.util.stream.collectors;\n\npublic class main {\n    public static void main(string[] args) {\n        scanner scanner = new scanner(system.in);\n        string line = scanner.nextline();\n        string[] numbers = line.split("\\\\s+");\n        list<integer> nums = arrays.stream(numbers).map(integer::parseint).sorted().collect(collectors.tolist());\n        int minimumdistance = integer.max_value;\n        int reference = scanner.nextint();\n        for (int num: nums) {\n            int distance = math.abs(num - reference);\n            if (distance < minimumdistance) {\n                minimumdistance = distance;\n            }\n        }\n        for (int num: nums) {\n            if (math.abs(num - reference) == minimumdistance) {\n                system.out.print(num + " ");\n            }\n        }\n\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\n\n# other solution 4\n\nimport java.util.*;\nimport java.util.stream.collectors;\n\npublic class main {\n    public static void main(string[] args) {\n        scanner scanner = new scanner(system.in);\n        list<integer> arraynumber = arrays.stream(scanner.nextline().split(" "))\n                .map(integer::parseint)\n                .sorted()\n                .collect(collectors.tolist());\n\n        int n = scanner.nextint();\n        int mindistance = arraynumber.stream().maptoint(e -> math.abs(n - e)).min().orelsethrow();\n\n        arraynumber.stream()\n            .filter(e -> math.abs(n - e) == mindistance)\n            .foreach(e -> system.out.printf("%d ", e));\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n',charsets:{},lastUpdated:"2022/10/04, 21:45:45",lastUpdatedTimestamp:1664891145e3},{title:"Split a list into sublists",frontmatter:{title:"Split a list into sublists",date:"2022-11-09T20:56:41.000Z",permalink:"/pages/178437/",tags:[null]},regularPath:"/01.Java/03.%E7%BB%83%E4%B9%A0%E9%A2%98/02.%E4%BB%A3%E7%A0%81%E9%A2%98/19.Split%20a%20list%20into%20sublists.html",relativePath:"01.Java/03.练习题/02.代码题/19.Split a list into sublists.md",key:"v-bd172ada",path:"/pages/178437/",headers:[{level:2,title:"Topic",slug:"topic",normalizedTitle:"topic",charIndex:2},{level:2,title:"Problem",slug:"problem",normalizedTitle:"problem",charIndex:32},{level:2,title:"Solution",slug:"solution",normalizedTitle:"solution",charIndex:907},{level:3,title:"My solution",slug:"my-solution",normalizedTitle:"my solution",charIndex:920},{level:3,title:"Other solution 1",slug:"other-solution-1",normalizedTitle:"other solution 1",charIndex:2680}],headersStr:"Topic Problem Solution My solution Other solution 1",content:'# Topic\n\nThe List interface\n\n\n# Problem\n\nSplit a list into sublists\n\nImplement a method for splitting (partitioning) a generic list into sublists. The method takes two arguments: a generic list and a size of sublists. The specified size of sublists can be greater than the size of the given list.\n\nEach sublist except the last one must have the specified size. The last sublist can have a smaller number of elements.\n\nExample 1\n\n * the input list: [1, 2, 3, 4, 5, 6, 7]\n * the specified size of sublists: 4\n * the expected result: [[1, 2, 3, 4], [5, 6, 7]]\n\nExample 2\n\n * the input list: [7, 4, 3, 2, 8, 1]\n * the specified size of sublists: 8\n * the expected result: [[7, 4, 3, 2, 8, 1]]\n\nExample 3\n\n * the input list: [10, 12, 12, 13, 13, 45, 12, 19, 34, 12, 588, 12, 34, 12]\n * the specified size of sublists: 5\n * the expected result: [[10, 12, 12, 13, 13], [45, 12, 19, 34, 12], [588, 12, 34, 12]]\n\n\n# Solution\n\n\n# My solution\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Scanner;\nimport java.util.stream.Collectors;\n\nclass ListUtils {\n\n    /**\n     * It splits the passed list into a sequence of sublists with a predefined size\n     */\n    public static <T> List<List<T>> splitListIntoSubLists(List<T> list, int subListSize) {\n        List<List<T>> sublists = new ArrayList<>();\n\n        // write your code here\n        int fromIndex;\n        int toIndex = 0;\n        for (int i = 0; i < list.size() / subListSize + 1; i++) {\n            fromIndex = toIndex;\n            toIndex += subListSize;\n            if (toIndex > list.size()) {\n                toIndex = list.size();\n            }\n            sublists.add(list.subList(fromIndex, toIndex));\n        }\n\n        return sublists;\n    }\n}\n\n/* Please, do not modify code in this class */\npublic class Main {\n    public static void main(String[] args) {\n        final Scanner scanner = new Scanner(System.in);\n\n        final String[] values = scanner.nextLine().split("\\\\s+");\n\n        final List<Integer> list = Arrays.asList(values).stream()\n                .map(Integer::parseInt)\n                .collect(Collectors.toList());\n\n        final int subListSize = Integer.parseInt(scanner.nextLine());\n\n        final List<List<Integer>> subLists = ListUtils.splitListIntoSubLists(list, subListSize);\n\n        subLists.forEach(subList -> {\n            final String representation = subList.stream().map(Object::toString).collect(Collectors.joining(" "));\n            System.out.println(representation);\n        });\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n\n\n\n# Other solution 1\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Scanner;\nimport java.util.stream.Collectors;\n\nclass ListUtils {\n\n    /**\n     * It splits the passed list into a sequence of sublists with a predefined size\n     */\n    public static <T> List<List<T>> splitListIntoSubLists(List<T> list, int subListSize) {\n        List<List<T>> sublists = new ArrayList<>();\n\n        for (int i = 0; i < list.size(); i += subListSize) {\n            sublists.add(\n                list.subList(\n                    i, Math.min(i + subListSize, list.size())\n                )\n            );\n        }\n\n        return sublists;\n    }\n}\n\n/* Please, do not modify code in this class */\npublic class Main {\n    public static void main(String[] args) {\n        final Scanner scanner = new Scanner(System.in);\n\n        final String[] values = scanner.nextLine().split("\\\\s+");\n\n        final List<Integer> list = Arrays.asList(values).stream()\n                .map(Integer::parseInt)\n                .collect(Collectors.toList());\n\n        final int subListSize = Integer.parseInt(scanner.nextLine());\n\n        final List<List<Integer>> subLists = ListUtils.splitListIntoSubLists(list, subListSize);\n\n        subLists.forEach(subList -> {\n            final String representation = subList.stream().map(Object::toString).collect(Collectors.joining(" "));\n            System.out.println(representation);\n        });\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n',normalizedContent:'# topic\n\nthe list interface\n\n\n# problem\n\nsplit a list into sublists\n\nimplement a method for splitting (partitioning) a generic list into sublists. the method takes two arguments: a generic list and a size of sublists. the specified size of sublists can be greater than the size of the given list.\n\neach sublist except the last one must have the specified size. the last sublist can have a smaller number of elements.\n\nexample 1\n\n * the input list: [1, 2, 3, 4, 5, 6, 7]\n * the specified size of sublists: 4\n * the expected result: [[1, 2, 3, 4], [5, 6, 7]]\n\nexample 2\n\n * the input list: [7, 4, 3, 2, 8, 1]\n * the specified size of sublists: 8\n * the expected result: [[7, 4, 3, 2, 8, 1]]\n\nexample 3\n\n * the input list: [10, 12, 12, 13, 13, 45, 12, 19, 34, 12, 588, 12, 34, 12]\n * the specified size of sublists: 5\n * the expected result: [[10, 12, 12, 13, 13], [45, 12, 19, 34, 12], [588, 12, 34, 12]]\n\n\n# solution\n\n\n# my solution\n\nimport java.util.arraylist;\nimport java.util.arrays;\nimport java.util.list;\nimport java.util.scanner;\nimport java.util.stream.collectors;\n\nclass listutils {\n\n    /**\n     * it splits the passed list into a sequence of sublists with a predefined size\n     */\n    public static <t> list<list<t>> splitlistintosublists(list<t> list, int sublistsize) {\n        list<list<t>> sublists = new arraylist<>();\n\n        // write your code here\n        int fromindex;\n        int toindex = 0;\n        for (int i = 0; i < list.size() / sublistsize + 1; i++) {\n            fromindex = toindex;\n            toindex += sublistsize;\n            if (toindex > list.size()) {\n                toindex = list.size();\n            }\n            sublists.add(list.sublist(fromindex, toindex));\n        }\n\n        return sublists;\n    }\n}\n\n/* please, do not modify code in this class */\npublic class main {\n    public static void main(string[] args) {\n        final scanner scanner = new scanner(system.in);\n\n        final string[] values = scanner.nextline().split("\\\\s+");\n\n        final list<integer> list = arrays.aslist(values).stream()\n                .map(integer::parseint)\n                .collect(collectors.tolist());\n\n        final int sublistsize = integer.parseint(scanner.nextline());\n\n        final list<list<integer>> sublists = listutils.splitlistintosublists(list, sublistsize);\n\n        sublists.foreach(sublist -> {\n            final string representation = sublist.stream().map(object::tostring).collect(collectors.joining(" "));\n            system.out.println(representation);\n        });\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n\n\n\n# other solution 1\n\nimport java.util.arraylist;\nimport java.util.arrays;\nimport java.util.list;\nimport java.util.scanner;\nimport java.util.stream.collectors;\n\nclass listutils {\n\n    /**\n     * it splits the passed list into a sequence of sublists with a predefined size\n     */\n    public static <t> list<list<t>> splitlistintosublists(list<t> list, int sublistsize) {\n        list<list<t>> sublists = new arraylist<>();\n\n        for (int i = 0; i < list.size(); i += sublistsize) {\n            sublists.add(\n                list.sublist(\n                    i, math.min(i + sublistsize, list.size())\n                )\n            );\n        }\n\n        return sublists;\n    }\n}\n\n/* please, do not modify code in this class */\npublic class main {\n    public static void main(string[] args) {\n        final scanner scanner = new scanner(system.in);\n\n        final string[] values = scanner.nextline().split("\\\\s+");\n\n        final list<integer> list = arrays.aslist(values).stream()\n                .map(integer::parseint)\n                .collect(collectors.tolist());\n\n        final int sublistsize = integer.parseint(scanner.nextline());\n\n        final list<list<integer>> sublists = listutils.splitlistintosublists(list, sublistsize);\n\n        sublists.foreach(sublist -> {\n            final string representation = sublist.stream().map(object::tostring).collect(collectors.joining(" "));\n            system.out.println(representation);\n        });\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n',charsets:{},lastUpdated:"2022/12/03, 17:31:39",lastUpdatedTimestamp:1670059899e3},{title:"Concat all strings without digits",frontmatter:{title:"Concat all strings without digits",date:"2022-09-15T11:24:53.000Z",permalink:"/pages/08fb22/",tags:["Java","String","Problem"]},regularPath:"/01.Java/03.%E7%BB%83%E4%B9%A0%E9%A2%98/02.%E4%BB%A3%E7%A0%81%E9%A2%98/16.Concat%20all%20strings%20without%20digits.html",relativePath:"01.Java/03.练习题/02.代码题/16.Concat all strings without digits.md",key:"v-5e87be4e",path:"/pages/08fb22/",headers:[{level:2,title:"Topic",slug:"topic",normalizedTitle:"topic",charIndex:2},{level:2,title:"Problem",slug:"problem",normalizedTitle:"problem",charIndex:27},{level:2,title:"Hint & Explain",slug:"hint-explain",normalizedTitle:"hint &amp; explain",charIndex:null},{level:2,title:"Solution",slug:"solution",normalizedTitle:"solution",charIndex:451},{level:3,title:"Other solution 1",slug:"other-solution-1",normalizedTitle:"other solution 1",charIndex:464},{level:3,title:"Other solution 2",slug:"other-solution-2",normalizedTitle:"other solution 2",charIndex:1194}],headersStr:"Topic Problem Hint & Explain Solution Other solution 1 Other solution 2",content:'# Topic\n\nStringBuilder\n\n\n# Problem\n\n# Concat all strings without digits\n\nImplement a method to concatenate all strings from the given array to a single long string. You must skip all digits inside the input strings.\n\nUse StringBuilder to solve the problem, because the input array can contain a huge number of strings.\n\nSample Input 1:\n\nT7est i1nput\n\n\n1\n\n\nSample Output 1:\n\nTestinput\n\n\n1\n\n\n\n# Hint & Explain\n\n> Use ".replaceAll("\\d","");" method!\n\n\n# Solution\n\n\n# Other solution 1\n\nimport java.util.Scanner;\n\nclass ConcatenateStringsProblem {\n\n    public static String concatenateStringsWithoutDigits(String[] strings) {\n        // write your code with StringBuilder here\n        StringBuilder join = new StringBuilder();\n        for (String string : strings) {\n            join.append(string.replaceAll("\\\\d", ""));\n        }\n\n        return join.toString();\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String[] strings = scanner.nextLine().split("\\\\s+");\n        String result = concatenateStringsWithoutDigits(strings);\n        System.out.println(result);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n\n# Other solution 2\n\nimport java.util.Scanner;\n\nclass ConcatenateStringsProblem {\n\n    public static String concatenateStringsWithoutDigits(String[] strings) {\n        StringBuilder word = new StringBuilder();\n        for (String str : strings) {\n            word.append(str);\n        }\n        return String.valueOf(word).replaceAll("\\\\d", "");\n        // write your code with StringBuilder here\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String[] strings = scanner.nextLine().split("\\\\s+");\n        String result = concatenateStringsWithoutDigits(strings);\n        System.out.println(result);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n',normalizedContent:'# topic\n\nstringbuilder\n\n\n# problem\n\n# concat all strings without digits\n\nimplement a method to concatenate all strings from the given array to a single long string. you must skip all digits inside the input strings.\n\nuse stringbuilder to solve the problem, because the input array can contain a huge number of strings.\n\nsample input 1:\n\nt7est i1nput\n\n\n1\n\n\nsample output 1:\n\ntestinput\n\n\n1\n\n\n\n# hint & explain\n\n> use ".replaceall("\\d","");" method!\n\n\n# solution\n\n\n# other solution 1\n\nimport java.util.scanner;\n\nclass concatenatestringsproblem {\n\n    public static string concatenatestringswithoutdigits(string[] strings) {\n        // write your code with stringbuilder here\n        stringbuilder join = new stringbuilder();\n        for (string string : strings) {\n            join.append(string.replaceall("\\\\d", ""));\n        }\n\n        return join.tostring();\n    }\n\n    public static void main(string[] args) {\n        scanner scanner = new scanner(system.in);\n        string[] strings = scanner.nextline().split("\\\\s+");\n        string result = concatenatestringswithoutdigits(strings);\n        system.out.println(result);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n\n# other solution 2\n\nimport java.util.scanner;\n\nclass concatenatestringsproblem {\n\n    public static string concatenatestringswithoutdigits(string[] strings) {\n        stringbuilder word = new stringbuilder();\n        for (string str : strings) {\n            word.append(str);\n        }\n        return string.valueof(word).replaceall("\\\\d", "");\n        // write your code with stringbuilder here\n    }\n\n    public static void main(string[] args) {\n        scanner scanner = new scanner(system.in);\n        string[] strings = scanner.nextline().split("\\\\s+");\n        string result = concatenatestringswithoutdigits(strings);\n        system.out.println(result);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n',charsets:{},lastUpdated:"2022/09/25, 10:41:23",lastUpdatedTimestamp:1664073683e3},{title:"Arithmetic average",frontmatter:{title:"Arithmetic average",date:"2022-12-31T17:04:45.000Z",permalink:"/pages/67369d/",tags:[null]},regularPath:"/01.Java/03.%E7%BB%83%E4%B9%A0%E9%A2%98/02.%E4%BB%A3%E7%A0%81%E9%A2%98/20.Arithmetic%20average.html",relativePath:"01.Java/03.练习题/02.代码题/20.Arithmetic average.md",key:"v-efc958c8",path:"/pages/67369d/",headers:[{level:2,title:"Topic",slug:"topic",normalizedTitle:"topic",charIndex:2},{level:2,title:"Problem",slug:"problem",normalizedTitle:"problem",charIndex:26},{level:2,title:"Hint & Explain",slug:"hint-explain",normalizedTitle:"hint &amp; explain",charIndex:null},{level:2,title:"Solution",slug:"solution",normalizedTitle:"solution",charIndex:766},{level:3,title:"My solution",slug:"my-solution",normalizedTitle:"my solution",charIndex:779},{level:3,title:"Other solution 1",slug:"other-solution-1",normalizedTitle:"other solution 1",charIndex:1361}],headersStr:"Topic Problem Hint & Explain Solution My solution Other solution 1",content:"# Topic\n\nThe for-loop\n\n\n# Problem\n\nArithmetic average\n\nWrite a program that reads two numbers aa and bb from the keyboard and calculates and outputs to the console the arithmetic average of all numbers from the interval [a; b][a;b], which are divisible by 33.\n\nIn the example below, the arithmetic average is calculated for the numbers on the interval [-5; 12][−5;12]. On this interval, there are 66 numbers divisible by 33, namely: -3, 0, 3, 6, 9, 12−3,0,3,6,9,12. Their arithmetic average equals 4.54.5.\n\nThe program input contains intervals, which always contain at least one number, which is divisible by 33.\n\nRemember that the int type cannot contain fractions. Use a double variable to store the precise result of the division.\n\n\n# Hint & Explain\n\n// 输入提示\n\n\n# Solution\n\n\n# My solution\n\nimport java.util.Scanner;\n\nclass Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        // start coding here\n        int numberA = scanner.nextInt();\n        int numberB = scanner.nextInt();\n        int counter = 0;\n        double sum = 0.0;\n\n        for (int i = numberA; i <= numberB; i++) {\n            if (i % 3 == 0) {\n                counter++;\n                sum += i;\n            }\n        }\n\n        System.out.println(sum / counter);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n\n# Other solution 1\n\nimport java.util.Scanner;\nimport java.util.stream.IntStream;\n\nclass Main {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n\n        double result = IntStream.rangeClosed(in.nextInt(), in.nextInt())\n                                 .filter(value -> value % 3 == 0)\n                                 .average()\n                                 .orElse(0);\n\n        System.out.println(result);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n",normalizedContent:"# topic\n\nthe for-loop\n\n\n# problem\n\narithmetic average\n\nwrite a program that reads two numbers aa and bb from the keyboard and calculates and outputs to the console the arithmetic average of all numbers from the interval [a; b][a;b], which are divisible by 33.\n\nin the example below, the arithmetic average is calculated for the numbers on the interval [-5; 12][−5;12]. on this interval, there are 66 numbers divisible by 33, namely: -3, 0, 3, 6, 9, 12−3,0,3,6,9,12. their arithmetic average equals 4.54.5.\n\nthe program input contains intervals, which always contain at least one number, which is divisible by 33.\n\nremember that the int type cannot contain fractions. use a double variable to store the precise result of the division.\n\n\n# hint & explain\n\n// 输入提示\n\n\n# solution\n\n\n# my solution\n\nimport java.util.scanner;\n\nclass main {\n    public static void main(string[] args) {\n        scanner scanner = new scanner(system.in);\n        // start coding here\n        int numbera = scanner.nextint();\n        int numberb = scanner.nextint();\n        int counter = 0;\n        double sum = 0.0;\n\n        for (int i = numbera; i <= numberb; i++) {\n            if (i % 3 == 0) {\n                counter++;\n                sum += i;\n            }\n        }\n\n        system.out.println(sum / counter);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n\n# other solution 1\n\nimport java.util.scanner;\nimport java.util.stream.intstream;\n\nclass main {\n    public static void main(string[] args) {\n        scanner in = new scanner(system.in);\n\n        double result = intstream.rangeclosed(in.nextint(), in.nextint())\n                                 .filter(value -> value % 3 == 0)\n                                 .average()\n                                 .orelse(0);\n\n        system.out.println(result);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n",charsets:{cjk:!0},lastUpdated:"2023/04/14, 12:58:00",lastUpdatedTimestamp:168144828e4},{title:"Processing strings",frontmatter:{title:"Processing strings",date:"2023-02-18T16:31:33.000Z",permalink:"/pages/b7298f/",tags:[null]},regularPath:"/01.Java/03.%E7%BB%83%E4%B9%A0%E9%A2%98/02.%E4%BB%A3%E7%A0%81%E9%A2%98/21.Processing%20strings.html",relativePath:"01.Java/03.练习题/02.代码题/21.Processing strings.md",key:"v-7bd687fc",path:"/pages/b7298f/",headers:[{level:2,title:"Topic",slug:"topic",normalizedTitle:"topic",charIndex:2},{level:2,title:"Problem",slug:"problem",normalizedTitle:"problem",charIndex:20},{level:2,title:"Hint & Explain",slug:"hint-explain",normalizedTitle:"hint &amp; explain",charIndex:null},{level:2,title:"Solution",slug:"solution",normalizedTitle:"solution",charIndex:613},{level:3,title:"My solution",slug:"my-solution",normalizedTitle:"my solution",charIndex:626},{level:3,title:"Other solution 1",slug:"other-solution-1",normalizedTitle:"other solution 1",charIndex:1436},{level:3,title:"Other solution 2",slug:"other-solution-2",normalizedTitle:"other solution 2",charIndex:1826}],headersStr:"Topic Problem Hint & Explain Solution My solution Other solution 1 Other solution 2",content:'# Topic\n\nString\n\n\n# Problem\n\nNumber of occurrences\n\nWrite a program that finds the frequency of occurrences of a substring in a given string. Substrings cannot overlap: for example, the string ababa contains only one substring aba.\n\nInput data format\n\nThe first input line contains a string, the second one contains a substring.\n\nSample Input 1:\n\nababa\naba\n\n\n1\n2\n\n\nSample Output 1:\n\n1\n\n\n1\n\n\nSample Input 2:\n\nhello there\nthe\n\n\n1\n2\n\n\nSample Output 2:\n\n1\n\n\n1\n\n\nSample Input 3:\n\nhello yellow jello\nll\n\n\n1\n2\n\n\nSample Output 3:\n\n3\n\n\n1\n\n\n\n# Hint & Explain\n\n> Check out the indexOf(String str, int formIndex) method.\n\n\n# Solution\n\n\n# My solution\n\nimport java.util.Scanner;\n\nclass Main {\n    public static void main(String[] args) {\n        // put your code here\n        Scanner scanner = new Scanner(System.in);\n        String string = scanner.nextLine();\n        String subString = scanner.nextLine();\n        int fromIndex = 0;\n        int occurIndex;\n        int counter = 0;\n\n        do {\n            if (fromIndex > string.length() - 1) {\n                break;\n            }\n            occurIndex = string.indexOf(subString, fromIndex);\n            if (occurIndex != -1) {\n                counter++;\n                fromIndex = occurIndex + subString.length();\n            }\n        } while (occurIndex != -1);\n\n        System.out.println(counter);\n\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\n\n# Other solution 1\n\nimport java.util.Scanner;\n\nclass Main {\n    public static void main(String[] args) {\n        // put your code here\n        Scanner scanner = new Scanner(System.in);\n        String sentence = " " + scanner.nextLine() + " ";\n        String query = scanner.nextLine().trim();\n        System.out.print(sentence.split(query).length - 1);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# Other solution 2\n\nimport java.util.Scanner;\n\nclass Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String string = scanner.nextLine();\n        String substring = scanner.nextLine();\n        System.out.println((string.length() - string.replace(substring, "").length()) / substring.length());\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n',normalizedContent:'# topic\n\nstring\n\n\n# problem\n\nnumber of occurrences\n\nwrite a program that finds the frequency of occurrences of a substring in a given string. substrings cannot overlap: for example, the string ababa contains only one substring aba.\n\ninput data format\n\nthe first input line contains a string, the second one contains a substring.\n\nsample input 1:\n\nababa\naba\n\n\n1\n2\n\n\nsample output 1:\n\n1\n\n\n1\n\n\nsample input 2:\n\nhello there\nthe\n\n\n1\n2\n\n\nsample output 2:\n\n1\n\n\n1\n\n\nsample input 3:\n\nhello yellow jello\nll\n\n\n1\n2\n\n\nsample output 3:\n\n3\n\n\n1\n\n\n\n# hint & explain\n\n> check out the indexof(string str, int formindex) method.\n\n\n# solution\n\n\n# my solution\n\nimport java.util.scanner;\n\nclass main {\n    public static void main(string[] args) {\n        // put your code here\n        scanner scanner = new scanner(system.in);\n        string string = scanner.nextline();\n        string substring = scanner.nextline();\n        int fromindex = 0;\n        int occurindex;\n        int counter = 0;\n\n        do {\n            if (fromindex > string.length() - 1) {\n                break;\n            }\n            occurindex = string.indexof(substring, fromindex);\n            if (occurindex != -1) {\n                counter++;\n                fromindex = occurindex + substring.length();\n            }\n        } while (occurindex != -1);\n\n        system.out.println(counter);\n\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\n\n# other solution 1\n\nimport java.util.scanner;\n\nclass main {\n    public static void main(string[] args) {\n        // put your code here\n        scanner scanner = new scanner(system.in);\n        string sentence = " " + scanner.nextline() + " ";\n        string query = scanner.nextline().trim();\n        system.out.print(sentence.split(query).length - 1);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# other solution 2\n\nimport java.util.scanner;\n\nclass main {\n    public static void main(string[] args) {\n        scanner scanner = new scanner(system.in);\n        string string = scanner.nextline();\n        string substring = scanner.nextline();\n        system.out.println((string.length() - string.replace(substring, "").length()) / substring.length());\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n',charsets:{},lastUpdated:"2023/04/14, 12:58:00",lastUpdatedTimestamp:168144828e4},{title:"参考资料",frontmatter:{title:"参考资料",date:"2022-04-15T00:29:44.000Z",permalink:"/pages/8bd1db/",tags:[null]},regularPath:"/01.Java/05.Frank%20-%20Java%E4%B8%8E%E7%94%9F%E6%B4%BB/0.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/00.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99.html",relativePath:"01.Java/05.Frank - Java与生活/0.参考资料/00.参考资料.md",key:"v-8f7cf752",path:"/pages/8bd1db/",headers:[{level:2,title:"教程文档",slug:"教程文档",normalizedTitle:"教程文档",charIndex:11},{level:2,title:"规范文档",slug:"规范文档",normalizedTitle:"规范文档",charIndex:57},{level:2,title:"API 文档",slug:"api-文档",normalizedTitle:"api 文档",charIndex:132}],headersStr:"教程文档 规范文档 API 文档",content:"# 参考资料\n\n\n# 教程文档\n\nThe Java™ Tutorials\n\nBaeldung\n\n菜鸟教程\n\n\n# 规范文档\n\nGoogel Java Style Guide\n\nOracle Code Conventions\n\n阿里云Java开发手册嵩山版\n\n\n# API 文档\n\nJava Platform, Standard Edition 8 API Specification\n\nJavadoc 生成API帮组文档详解\n\n> 生成文档的终端命令：javadoc -d doc -encoding UTF-8 -charset UTF-8 *.java\n> \n> ps：文档在同级目录下的 doc 目录下，打开 index.html 文件即可浏览",normalizedContent:"# 参考资料\n\n\n# 教程文档\n\nthe java™ tutorials\n\nbaeldung\n\n菜鸟教程\n\n\n# 规范文档\n\ngoogel java style guide\n\noracle code conventions\n\n阿里云java开发手册嵩山版\n\n\n# api 文档\n\njava platform, standard edition 8 api specification\n\njavadoc 生成api帮组文档详解\n\n> 生成文档的终端命令：javadoc -d doc -encoding utf-8 -charset utf-8 *.java\n> \n> ps：文档在同级目录下的 doc 目录下，打开 index.html 文件即可浏览",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"环境变量 - JDK和JRE",frontmatter:{title:"环境变量 - JDK和JRE",date:"2022-04-26T22:27:51.000Z",permalink:"/pages/3824ca/",tags:[null]},regularPath:"/01.Java/05.Frank%20-%20Java%E4%B8%8E%E7%94%9F%E6%B4%BB/0.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/01.%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%20-%20JDK%E5%92%8CJRE.html",relativePath:"01.Java/05.Frank - Java与生活/0.参考资料/01.环境变量 - JDK和JRE.md",key:"v-56b8210d",path:"/pages/3824ca/",headers:[{level:2,title:"Windows",slug:"windows",normalizedTitle:"windows",charIndex:2},{level:3,title:"1.新建系统变量：JAVA_HOME",slug:"_1-新建系统变量-java-home",normalizedTitle:"1.新建系统变量：java_home",charIndex:14},{level:3,title:"2.在系统变量Path后面追加",slug:"_2-在系统变量path后面追加",normalizedTitle:"2.在系统变量path后面追加",charIndex:62},{level:3,title:"3. 验证",slug:"_3-验证",normalizedTitle:"3. 验证",charIndex:120}],headersStr:"Windows 1.新建系统变量：JAVA_HOME 2.在系统变量Path后面追加 3. 验证",content:"# Windows\n\n\n# 1.新建系统变量：JAVA_HOME\n\n路径取jdk路径\n\nE:\\xxx\\jdk1.8\n\n\n# 2.在系统变量Path后面追加\n\n%JAVA_HOME%\\bin\n\n%JAVA_HOME%\\jre\\bin\n\n\n# 3. 验证\n\nMicrosoft Windows [版本 10.0.18363.592]\n\n(c) 2019 Microsoft Corporation。保留所有权利。\n\nC:\\Users\\Jim>javac -version\n\njavac 1.8.0_241\n\nC:\\Users\\Jim>",normalizedContent:"# windows\n\n\n# 1.新建系统变量：java_home\n\n路径取jdk路径\n\ne:\\xxx\\jdk1.8\n\n\n# 2.在系统变量path后面追加\n\n%java_home%\\bin\n\n%java_home%\\jre\\bin\n\n\n# 3. 验证\n\nmicrosoft windows [版本 10.0.18363.592]\n\n(c) 2019 microsoft corporation。保留所有权利。\n\nc:\\users\\jim>javac -version\n\njavac 1.8.0_241\n\nc:\\users\\jim>",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"IDEA 便捷操作",frontmatter:{title:"IDEA 便捷操作",date:"2022-04-15T00:29:44.000Z",permalink:"/pages/34af60/",tags:[null]},regularPath:"/01.Java/05.Frank%20-%20Java%E4%B8%8E%E7%94%9F%E6%B4%BB/0.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/02.IDEA%20%E4%BE%BF%E6%8D%B7%E6%93%8D%E4%BD%9C.html",relativePath:"01.Java/05.Frank - Java与生活/0.参考资料/02.IDEA 便捷操作.md",key:"v-0c0305d5",path:"/pages/34af60/",headers:[{level:3,title:"IDEA 使用",slug:"idea-使用",normalizedTitle:"idea 使用",charIndex:81},{level:2,title:"代码简写",slug:"代码简写",normalizedTitle:"代码简写",charIndex:202},{level:2,title:"帮助文档",slug:"帮助文档",normalizedTitle:"帮助文档",charIndex:535}],headersStr:"IDEA 使用 代码简写 帮助文档",content:'# IDEA 的便捷操作\n\n不用不知道，一用吓一跳，懒人用了都说好。\n\n----------------------------------------\n\n\n# IDEA 使用\n\n显示 Project 目录：Alt+1\n\n搜索 Project 目录下的文件/目录：Alt+1---\x3e直接输入要查找的文件/目录名\n\n新建文件/目录/包：Alt+1---\x3eAlt+Insert---\x3e输入文件/包名\n\n\n# 代码简写\n\npsvm\n\npublic static void main(String[] args) {}\n\n\n1\n\n\n----------------------------------------\n\nsout\n\nSystem.out.println(str);\n\n\n1\n\n\nsoutv\n\nSystem.out.println("str = " + str);\n\n\n1\n\n\n如果要打印指定变量或表达式，则可在其末尾以 .sout 或 .soutv 的形式快速使用。\n\n----------------------------------------\n\n根据数据类型快速设定方法和表达式的接收变量：\n\nCtrl+Alt+V（光标点中方法）---\x3e设定变量名\n\n\n# 帮助文档\n\n快速文档：Ctrl+Q（光标点中方法）',normalizedContent:'# idea 的便捷操作\n\n不用不知道，一用吓一跳，懒人用了都说好。\n\n----------------------------------------\n\n\n# idea 使用\n\n显示 project 目录：alt+1\n\n搜索 project 目录下的文件/目录：alt+1---\x3e直接输入要查找的文件/目录名\n\n新建文件/目录/包：alt+1---\x3ealt+insert---\x3e输入文件/包名\n\n\n# 代码简写\n\npsvm\n\npublic static void main(string[] args) {}\n\n\n1\n\n\n----------------------------------------\n\nsout\n\nsystem.out.println(str);\n\n\n1\n\n\nsoutv\n\nsystem.out.println("str = " + str);\n\n\n1\n\n\n如果要打印指定变量或表达式，则可在其末尾以 .sout 或 .soutv 的形式快速使用。\n\n----------------------------------------\n\n根据数据类型快速设定方法和表达式的接收变量：\n\nctrl+alt+v（光标点中方法）---\x3e设定变量名\n\n\n# 帮助文档\n\n快速文档：ctrl+q（光标点中方法）',charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"值得注意的是",frontmatter:{title:"值得注意的是",date:"2022-04-15T00:29:44.000Z",permalink:"/pages/94eba9/",tags:[null]},regularPath:"/01.Java/05.Frank%20-%20Java%E4%B8%8E%E7%94%9F%E6%B4%BB/1.Java%E5%9F%BA%E7%A1%80/03.%E5%80%BC%E5%BE%97%E6%B3%A8%E6%84%8F%E7%9A%84%E6%98%AF.html",relativePath:"01.Java/05.Frank - Java与生活/1.Java基础/03.值得注意的是.md",key:"v-46fa5f4a",path:"/pages/94eba9/",headers:[{level:2,title:"Maven 与 Jar包",slug:"maven-与-jar包",normalizedTitle:"maven 与 jar包",charIndex:61},{level:2,title:"正则表达式",slug:"正则表达式",normalizedTitle:"正则表达式",charIndex:78},{level:2,title:"JSON 与 XML",slug:"json-与-xml",normalizedTitle:"json 与 xml",charIndex:88},{level:2,title:"Java IO流",slug:"java-io流",normalizedTitle:"java io流",charIndex:103}],headersStr:"Maven 与 Jar包 正则表达式 JSON 与 XML Java IO流",content:"# 着重练习\n\n老师领进门，修行在个人。\n\n\n# 有很多需要自己去了解的东西\n\n很多东西都要你自己去探索和发现。\n\n\n# Maven 与 Jar包\n\n\n# 正则表达式\n\n\n# JSON 与 XML\n\n\n# Java IO流\n\n实际开发过程中，读写文件并不常用，使用的 Jar包 通常也是第三方的，比如 commons。",normalizedContent:"# 着重练习\n\n老师领进门，修行在个人。\n\n\n# 有很多需要自己去了解的东西\n\n很多东西都要你自己去探索和发现。\n\n\n# maven 与 jar包\n\n\n# 正则表达式\n\n\n# json 与 xml\n\n\n# java io流\n\n实际开发过程中，读写文件并不常用，使用的 jar包 通常也是第三方的，比如 commons。",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"一带而过的东西",frontmatter:{title:"一带而过的东西",date:"2022-04-15T00:29:44.000Z",permalink:"/pages/ea2997/",tags:[null]},regularPath:"/01.Java/05.Frank%20-%20Java%E4%B8%8E%E7%94%9F%E6%B4%BB/1.Java%E5%9F%BA%E7%A1%80/02.%E4%B8%80%E5%B8%A6%E8%80%8C%E8%BF%87%E7%9A%84%E4%B8%9C%E8%A5%BF.html",relativePath:"01.Java/05.Frank - Java与生活/1.Java基础/02.一带而过的东西.md",key:"v-9ee36d88",path:"/pages/ea2997/",headers:[{level:2,title:"基础语法",slug:"基础语法",normalizedTitle:"基础语法",charIndex:34},{level:2,title:"8种基本数据类型",slug:"_8种基本数据类型",normalizedTitle:"8种基本数据类型",charIndex:113},{level:2,title:"运算符",slug:"运算符",normalizedTitle:"运算符",charIndex:181},{level:2,title:"条件语句",slug:"条件语句",normalizedTitle:"条件语句",charIndex:502},{level:2,title:"循环结构",slug:"循环结构",normalizedTitle:"循环结构",charIndex:554},{level:2,title:"开关语句",slug:"开关语句",normalizedTitle:"开关语句",charIndex:623}],headersStr:"基础语法 8种基本数据类型 运算符 条件语句 循环结构 开关语句",content:"# 一带而过的东西\n\n最好要有C语言基础，菜就多看看文档。\n\n\n# 基础语法\n\nhttps://www.runoob.com/java/java-basic-syntax.html\n\n * 声明常量：使用 final\n\n\n# 8种基本数据类型\n\nhttps://www.runoob.com/java/java-basic-datatypes.html\n\n\n# 运算符\n\n * 运算符类型\n   \n   * 算术运算符\n   * 逻辑运算符\n     * ! NOT\n     * && AND\n     * || OR\n     * ^ XOR\n   * 关系运算符\n     * == (equal to)\n     * != (not equal to)\n     * > (greater than)\n     * >= (greater than or equal to)\n     * < (less than)\n     * <= (less than or equal to)\n   * 赋值运算符\n\n * 运算符优先级\n   \n   算术运算符 > 关系运算符 > 逻辑运算符\n\n\n# 条件语句\n\n * if\n * if...else\n * if...else if...else\n\n\n# 循环结构\n\n * while\n * do...while\n * for\n * break 关键字\n * contiune 关键字\n\n\n# 开关语句\n\n * Switch Case",normalizedContent:"# 一带而过的东西\n\n最好要有c语言基础，菜就多看看文档。\n\n\n# 基础语法\n\nhttps://www.runoob.com/java/java-basic-syntax.html\n\n * 声明常量：使用 final\n\n\n# 8种基本数据类型\n\nhttps://www.runoob.com/java/java-basic-datatypes.html\n\n\n# 运算符\n\n * 运算符类型\n   \n   * 算术运算符\n   * 逻辑运算符\n     * ! not\n     * && and\n     * || or\n     * ^ xor\n   * 关系运算符\n     * == (equal to)\n     * != (not equal to)\n     * > (greater than)\n     * >= (greater than or equal to)\n     * < (less than)\n     * <= (less than or equal to)\n   * 赋值运算符\n\n * 运算符优先级\n   \n   算术运算符 > 关系运算符 > 逻辑运算符\n\n\n# 条件语句\n\n * if\n * if...else\n * if...else if...else\n\n\n# 循环结构\n\n * while\n * do...while\n * for\n * break 关键字\n * contiune 关键字\n\n\n# 开关语句\n\n * switch case",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"关于Java语言",frontmatter:{title:"关于Java语言",date:"2022-04-15T00:29:44.000Z",permalink:"/pages/de8815/",tags:[null]},regularPath:"/01.Java/05.Frank%20-%20Java%E4%B8%8E%E7%94%9F%E6%B4%BB/1.Java%E5%9F%BA%E7%A1%80/04.%E5%85%B3%E4%BA%8EJava%E8%AF%AD%E8%A8%80.html",relativePath:"01.Java/05.Frank - Java与生活/1.Java基础/04.关于Java语言.md",key:"v-43ee85a2",path:"/pages/de8815/",headers:[{level:2,title:"Java 是编译型还是解释型语言？",slug:"java-是编译型还是解释型语言",normalizedTitle:"java 是编译型还是解释型语言？",charIndex:2}],headersStr:"Java 是编译型还是解释型语言？",content:"# Java 是编译型还是解释型语言？\n\n其实没有必要区分这一点，知道其执行过程就好了。\n\nJava 的“编译”指的是将代码编译为体系结构中立的字节码，而字节码又靠 Java 平台中的解释器对这些字节码进行解释执行。\n\n\n# Java 程序运行过程\n\n 1. 通过 javac 编译源码，生成类文件（其中为字节码）\n 2. JVM 虚拟机载入类文件\n 3. 解释器将字节码翻译为机器码\n 4. 硬件执行机器码",normalizedContent:"# java 是编译型还是解释型语言？\n\n其实没有必要区分这一点，知道其执行过程就好了。\n\njava 的“编译”指的是将代码编译为体系结构中立的字节码，而字节码又靠 java 平台中的解释器对这些字节码进行解释执行。\n\n\n# java 程序运行过程\n\n 1. 通过 javac 编译源码，生成类文件（其中为字节码）\n 2. jvm 虚拟机载入类文件\n 3. 解释器将字节码翻译为机器码\n 4. 硬件执行机器码",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"String",frontmatter:{title:"String",date:"2022-04-15T00:29:44.000Z",permalink:"/pages/b1af58/",tags:[null]},regularPath:"/01.Java/05.Frank%20-%20Java%E4%B8%8E%E7%94%9F%E6%B4%BB/1.Java%E5%9F%BA%E7%A1%80/05.String.html",relativePath:"01.Java/05.Frank - Java与生活/1.Java基础/05.String.md",key:"v-72c09b1d",path:"/pages/b1af58/",headers:[{level:2,title:"特性",slug:"特性",normalizedTitle:"特性",charIndex:171},{level:2,title:"一些 String 方法",slug:"一些-string-方法",normalizedTitle:"一些 string 方法",charIndex:464},{level:2,title:"与 C 语言相比更为方便的事儿",slug:"与-c-语言相比更为方便的事儿",normalizedTitle:"与 c 语言相比更为方便的事儿",charIndex:747}],headersStr:"特性 一些 String 方法 与 C 语言相比更为方便的事儿",content:'# String\n\nJavadoc link：https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\n\n字符串并不是 Java 中的原始数据类型(Primitive data type)，而是一种参考类型(Reference type)，由多个字符组成的序列。\n\n\n# 特性\n\n * 不可变类型(Immutable type)\n * 非原始类型(non-primitive type)\n * 每个字符都可以通过索引(Index)来访问，第一个从 0 开始，最后一个通常为字符串长度减 1( string.length() - 1)\n * 拥有一些方法(method)来获得单个字符和提取子字符串(substrings)，或者其他有用的操作\n * 多个字符串可通过 + 串联起来，甚至可以和数字类型连接（需要注意运算符执行顺序）\n * 不能使用 == 来比较两个字符串的等效性(equivalen)\n * 格式化字符串使用 printf() 来实现\n\n\n# 一些 String 方法\n\nisEmpty()\t// whether is empty, return ture if empty, otherwise fa\ncharAt(0)   // charAt(str.length() - 1)\nlength()\ntoLowerCase()\ntoUpperCase()\nstartsWith("Hel")\nsubstring(6, 11)\ncontains("Hel")\nreplace(\'J\', \'j\')   // replace(",", "")\ntrim()\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 与 C 语言相比更为方便的事儿\n\nC 语言的字符串是通过数组来实现的，而 Java 有一个专门的 String 参考类型。\n\n假如要对一个字符串进行操作，却不知道字符串的长度，那就可以用 length() 方法：\n\nfor (int i = 0; i < str.length(); i++) {\n    System.out.print(str.charAt(i) + " ");\n}\n\n\n1\n2\n3\n\n\n用 toCharArray() 可将字符串转换为一个新的字符数组：\n\nchar[] chars = string.toCharArray();\n\n\n1\n\n\n没有像C 语言里 \\0 （字符串结束符）这一说，就像给你戴了个套，爽就完事儿了...',normalizedContent:'# string\n\njavadoc link：https://docs.oracle.com/javase/8/docs/api/java/lang/string.html\n\n字符串并不是 java 中的原始数据类型(primitive data type)，而是一种参考类型(reference type)，由多个字符组成的序列。\n\n\n# 特性\n\n * 不可变类型(immutable type)\n * 非原始类型(non-primitive type)\n * 每个字符都可以通过索引(index)来访问，第一个从 0 开始，最后一个通常为字符串长度减 1( string.length() - 1)\n * 拥有一些方法(method)来获得单个字符和提取子字符串(substrings)，或者其他有用的操作\n * 多个字符串可通过 + 串联起来，甚至可以和数字类型连接（需要注意运算符执行顺序）\n * 不能使用 == 来比较两个字符串的等效性(equivalen)\n * 格式化字符串使用 printf() 来实现\n\n\n# 一些 string 方法\n\nisempty()\t// whether is empty, return ture if empty, otherwise fa\ncharat(0)   // charat(str.length() - 1)\nlength()\ntolowercase()\ntouppercase()\nstartswith("hel")\nsubstring(6, 11)\ncontains("hel")\nreplace(\'j\', \'j\')   // replace(",", "")\ntrim()\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 与 c 语言相比更为方便的事儿\n\nc 语言的字符串是通过数组来实现的，而 java 有一个专门的 string 参考类型。\n\n假如要对一个字符串进行操作，却不知道字符串的长度，那就可以用 length() 方法：\n\nfor (int i = 0; i < str.length(); i++) {\n    system.out.print(str.charat(i) + " ");\n}\n\n\n1\n2\n3\n\n\n用 tochararray() 可将字符串转换为一个新的字符数组：\n\nchar[] chars = string.tochararray();\n\n\n1\n\n\n没有像c 语言里 \\0 （字符串结束符）这一说，就像给你戴了个套，爽就完事儿了...',charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"import 导包",frontmatter:{title:"import 导包",date:"2022-04-15T00:29:44.000Z",permalink:"/pages/de256f/",tags:[null]},regularPath:"/01.Java/05.Frank%20-%20Java%E4%B8%8E%E7%94%9F%E6%B4%BB/1.Java%E5%9F%BA%E7%A1%80/07.import%20%E5%AF%BC%E5%8C%85.html",relativePath:"01.Java/05.Frank - Java与生活/1.Java基础/07.import 导包.md",key:"v-16cfba85",path:"/pages/de256f/",headers:[{level:2,title:"如何导入？",slug:"如何导入",normalizedTitle:"如何导入？",charIndex:16},{level:2,title:"区分",slug:"区分",normalizedTitle:"区分",charIndex:84}],headersStr:"如何导入？ 区分",content:"# import 导包\n\n\n# 如何导入？\n\nimport java.util.Scanner;\n\n\n1\n\n\nimport java.util.*;\n\n\n1\n\n\n\n# 区分\n\n在同一目录下的类不用引入便可直接使用。\n\n本目录和别的目录有同名的类时，分清楚“自己家孩子”和“别人家孩子”，导包要导对！\n\nJava 将 java.lang 这个包下面所有的东西当作”自己家的孩子“，所以不用导入。",normalizedContent:"# import 导包\n\n\n# 如何导入？\n\nimport java.util.scanner;\n\n\n1\n\n\nimport java.util.*;\n\n\n1\n\n\n\n# 区分\n\n在同一目录下的类不用引入便可直接使用。\n\n本目录和别的目录有同名的类时，分清楚“自己家孩子”和“别人家孩子”，导包要导对！\n\njava 将 java.lang 这个包下面所有的东西当作”自己家的孩子“，所以不用导入。",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"自动类型转换",frontmatter:{title:"自动类型转换",date:"2022-04-15T00:29:44.000Z",permalink:"/pages/b8bf39/",tags:[null]},regularPath:"/01.Java/05.Frank%20-%20Java%E4%B8%8E%E7%94%9F%E6%B4%BB/1.Java%E5%9F%BA%E7%A1%80/06.%E8%87%AA%E5%8A%A8%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2.html",relativePath:"01.Java/05.Frank - Java与生活/1.Java基础/06.自动类型转换.md",key:"v-5bc87269",path:"/pages/b8bf39/",headers:[{level:2,title:"规则",slug:"规则",normalizedTitle:"规则",charIndex:31},{level:2,title:"自动类型转换（隐式转换）",slug:"自动类型转换-隐式转换",normalizedTitle:"自动类型转换（隐式转换）",charIndex:467},{level:2,title:"强制类型转换（显式转换）",slug:"强制类型转换-显式转换",normalizedTitle:"强制类型转换（显式转换）",charIndex:631},{level:2,title:"隐含强制类型转换",slug:"隐含强制类型转换",normalizedTitle:"隐含强制类型转换",charIndex:811}],headersStr:"规则 自动类型转换（隐式转换） 强制类型转换（显式转换） 隐含强制类型转换",content:"# 自动类型转换\n\n菜鸟教程：Java 自动类型转换\n\n\n# 规则\n\n低 ------------------------------------------\x3e 高 \nbyte,short,char —> int —> long —> float —> double\n\n\n1\n2\n\n\n数据类型转换必须满足如下规则：\n\n 1. 不能对 boolean 类型进行类型转换。\n\n 2. 不能把对象类型转换成不相关类的对象。\n\n 3. 在把容量大的类型转换为容量小的类型时必须使用强制类型转换。\n\n 4. 转换过程中可能导致溢出或损失精度，例如：\n\nint i =128;   \nbyte b = (byte)i;\n\n\n1\n2\n\n\n因为 byte 类型是 8 位，最大值为127，所以当 int 强制转换为 byte 类型时，值 128 时候就会导致溢出。\n\n 5. 浮点数到整数的转换是通过舍弃小数得到，而不是四舍五入，例如：\n\n(int)23.7 == 23;       \n(int)-45.89f == -45\n\n\n1\n2\n\n\n\n# 自动类型转换（隐式转换）\n\nchar word_1 = 'a';\nint numOfWord_1 = word; // numOfWord_1 = 97\n\nchar word_2 = 'A';\nint numOfWord_2 = word_2 + 1; // numOfWord_2 = 66\n\n\n1\n2\n3\n4\n5\n\n\n\n# 强制类型转换（显式转换）\n\n 1. 转换格式要是兼容的。\n 2. 格式：(type)value type 为强制转换后的类型。\n\nint num_1 = 127;\nbyte num_2 = (byte)num_1;\n\ndouble num_3 = 3.1415926;\nfloat num_4 = (float)num_3;\n\n\n1\n2\n3\n4\n5\n\n\n\n# 隐含强制类型转换\n\n 1. 整数的默认类型是 int。\n 2. 浮点数的默认类型是 double，在定义 float 类型时必须在数字后面跟上 F 或者 f。\n\ndouble number_1 = 2.22;\nfloat number_2 = 3.33F;\n\n\n1\n2\n",normalizedContent:"# 自动类型转换\n\n菜鸟教程：java 自动类型转换\n\n\n# 规则\n\n低 ------------------------------------------\x3e 高 \nbyte,short,char —> int —> long —> float —> double\n\n\n1\n2\n\n\n数据类型转换必须满足如下规则：\n\n 1. 不能对 boolean 类型进行类型转换。\n\n 2. 不能把对象类型转换成不相关类的对象。\n\n 3. 在把容量大的类型转换为容量小的类型时必须使用强制类型转换。\n\n 4. 转换过程中可能导致溢出或损失精度，例如：\n\nint i =128;   \nbyte b = (byte)i;\n\n\n1\n2\n\n\n因为 byte 类型是 8 位，最大值为127，所以当 int 强制转换为 byte 类型时，值 128 时候就会导致溢出。\n\n 5. 浮点数到整数的转换是通过舍弃小数得到，而不是四舍五入，例如：\n\n(int)23.7 == 23;       \n(int)-45.89f == -45\n\n\n1\n2\n\n\n\n# 自动类型转换（隐式转换）\n\nchar word_1 = 'a';\nint numofword_1 = word; // numofword_1 = 97\n\nchar word_2 = 'a';\nint numofword_2 = word_2 + 1; // numofword_2 = 66\n\n\n1\n2\n3\n4\n5\n\n\n\n# 强制类型转换（显式转换）\n\n 1. 转换格式要是兼容的。\n 2. 格式：(type)value type 为强制转换后的类型。\n\nint num_1 = 127;\nbyte num_2 = (byte)num_1;\n\ndouble num_3 = 3.1415926;\nfloat num_4 = (float)num_3;\n\n\n1\n2\n3\n4\n5\n\n\n\n# 隐含强制类型转换\n\n 1. 整数的默认类型是 int。\n 2. 浮点数的默认类型是 double，在定义 float 类型时必须在数字后面跟上 f 或者 f。\n\ndouble number_1 = 2.22;\nfloat number_2 = 3.33f;\n\n\n1\n2\n",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"数组",frontmatter:{title:"数组",date:"2022-04-15T00:29:44.000Z",permalink:"/pages/e581fb/",tags:[null]},regularPath:"/01.Java/05.Frank%20-%20Java%E4%B8%8E%E7%94%9F%E6%B4%BB/1.Java%E5%9F%BA%E7%A1%80/08.%E6%95%B0%E7%BB%84.html",relativePath:"01.Java/05.Frank - Java与生活/1.Java基础/08.数组.md",key:"v-ee4eaa34",path:"/pages/e581fb/",headers:[{level:2,title:"静态数组",slug:"静态数组",normalizedTitle:"静态数组",charIndex:16},{level:3,title:"声明方式",slug:"声明方式",normalizedTitle:"声明方式",charIndex:71},{level:3,title:"访问元素",slug:"访问元素",normalizedTitle:"访问元素",charIndex:433},{level:3,title:"数组作为函数的参数",slug:"数组作为函数的参数",normalizedTitle:"数组作为函数的参数",charIndex:772},{level:3,title:"数组作为函数的返回值",slug:"数组作为函数的返回值",normalizedTitle:"数组作为函数的返回值",charIndex:918},{level:3,title:"多维数组",slug:"多维数组",normalizedTitle:"多维数组",charIndex:1502},{level:2,title:"数组操作",slug:"数组操作",normalizedTitle:"数组操作",charIndex:1660}],headersStr:"静态数组 声明方式 访问元素 数组作为函数的参数 数组作为函数的返回值 多维数组 数组操作",content:"# Java 中的数组\n\n\n# 静态数组\n\n静态数组一旦证明就不能改变其长度。\n\n> ”公司里面人不够用了，但是没有更多的工位了。“\n\n\n# 声明方式\n\n“创建一个数组”，实际上是指创建一个指向数组的变量。\n\n * 初始化\n * 分配\n\n// 1.初始化\nint[] array_1 = {1, 2, 3, 4, 5};\n\n// 2.分配\nchar[] array_2 = new char[3];\narray_2[0] = 'a';\narray_2[1] = 'b';\narray_2[2] = 'c';\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n使用 arrayName[] = {...} 这样 C/C++ 风格也可行的，但不是 Java 中的首选方式：\n\n// 首选\nint[] array_3 = {1, 2, 3, 4, 5};\n\n// C/C++ 风格\nint array_4[] = {1, 2, 3, 4, 5};\n\n\n1\n2\n3\n4\n5\n\n\n\n# 访问元素\n\narray_1[0] // 第一个元素\narray_1[1] // 第二个元素\n\n\n1\n2\n\n\n数组长度:\n\n 1. 用 length 这个变量来检查数组长度\n 2. 格式：arrayName.length\n 3. 数组索引从 0 到 arrayName.legth-1\n\nfor-loop：\n\nfor (int i = 0; i < array_1.length; i++) {\n    System.out.println(array_1[i]);\n}\n\n\n1\n2\n3\n\n\nfor-each 可在不使用索引的情况下遍历数组：\n\nfor (char k : array_2) {\n    System.out.println(k);\n}\n\n\n1\n2\n3\n\n\n\n# 数组作为函数的参数\n\n注意形参的数据类型！\n\npublic static void printArray(int[] array) {\n    for (int i : array) {\n        System.out.println(i);\n    }\n\n\n1\n2\n3\n4\n\n\n\n# 数组作为函数的返回值\n\npublic static void main(String[] args) {\n    int[] array_1 = {1, 2, 3, 4, 5};\n    int[] array_2 = reverse(array_1);\n    for (int j :\n         array_2) {\n        System.out.print(j + \" \"); // 5 4 3 2 1\n    }\n}\n\n/**\n * 将一个int类型数组的元素逆序排放。\n *\n * @param list 一个int类型数组\n * @return result 逆序后的数组\n */\npublic static int[] reverse(int[] list) {\n    int[] result = new int[list.length];\n\n    for (int i = 0, j = result.length - 1; i < list.length; i++, j--) {\n        result[j] = list[i];\n    }\n    return result;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# 多维数组\n\n多维数组可以看作是数组中的数组，以二维数组为例，其每一个元素都是一个一维数组。\n\n二维数组：\n\nint[][] twoDimArray_1 = new int[3][4];\n\nint[][] twoDimArray_2 = {{0,1,2},{3,4,5},{6,7,8}};\n\n\n1\n2\n3\n\n\n\n# 数组操作\n\nJava SE 在 Java.util.Arrays 类中提供了一些方法来对数组进行一些常规的操作（如，拷贝数组、存储数组、搜索数组中具体的值等等）",normalizedContent:"# java 中的数组\n\n\n# 静态数组\n\n静态数组一旦证明就不能改变其长度。\n\n> ”公司里面人不够用了，但是没有更多的工位了。“\n\n\n# 声明方式\n\n“创建一个数组”，实际上是指创建一个指向数组的变量。\n\n * 初始化\n * 分配\n\n// 1.初始化\nint[] array_1 = {1, 2, 3, 4, 5};\n\n// 2.分配\nchar[] array_2 = new char[3];\narray_2[0] = 'a';\narray_2[1] = 'b';\narray_2[2] = 'c';\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n使用 arrayname[] = {...} 这样 c/c++ 风格也可行的，但不是 java 中的首选方式：\n\n// 首选\nint[] array_3 = {1, 2, 3, 4, 5};\n\n// c/c++ 风格\nint array_4[] = {1, 2, 3, 4, 5};\n\n\n1\n2\n3\n4\n5\n\n\n\n# 访问元素\n\narray_1[0] // 第一个元素\narray_1[1] // 第二个元素\n\n\n1\n2\n\n\n数组长度:\n\n 1. 用 length 这个变量来检查数组长度\n 2. 格式：arrayname.length\n 3. 数组索引从 0 到 arrayname.legth-1\n\nfor-loop：\n\nfor (int i = 0; i < array_1.length; i++) {\n    system.out.println(array_1[i]);\n}\n\n\n1\n2\n3\n\n\nfor-each 可在不使用索引的情况下遍历数组：\n\nfor (char k : array_2) {\n    system.out.println(k);\n}\n\n\n1\n2\n3\n\n\n\n# 数组作为函数的参数\n\n注意形参的数据类型！\n\npublic static void printarray(int[] array) {\n    for (int i : array) {\n        system.out.println(i);\n    }\n\n\n1\n2\n3\n4\n\n\n\n# 数组作为函数的返回值\n\npublic static void main(string[] args) {\n    int[] array_1 = {1, 2, 3, 4, 5};\n    int[] array_2 = reverse(array_1);\n    for (int j :\n         array_2) {\n        system.out.print(j + \" \"); // 5 4 3 2 1\n    }\n}\n\n/**\n * 将一个int类型数组的元素逆序排放。\n *\n * @param list 一个int类型数组\n * @return result 逆序后的数组\n */\npublic static int[] reverse(int[] list) {\n    int[] result = new int[list.length];\n\n    for (int i = 0, j = result.length - 1; i < list.length; i++, j--) {\n        result[j] = list[i];\n    }\n    return result;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# 多维数组\n\n多维数组可以看作是数组中的数组，以二维数组为例，其每一个元素都是一个一维数组。\n\n二维数组：\n\nint[][] twodimarray_1 = new int[3][4];\n\nint[][] twodimarray_2 = {{0,1,2},{3,4,5},{6,7,8}};\n\n\n1\n2\n3\n\n\n\n# 数组操作\n\njava se 在 java.util.arrays 类中提供了一些方法来对数组进行一些常规的操作（如，拷贝数组、存储数组、搜索数组中具体的值等等）",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"方法的重载",frontmatter:{title:"方法的重载",date:"2022-04-15T00:29:44.000Z",permalink:"/pages/dda86a/",tags:[null]},regularPath:"/01.Java/05.Frank%20-%20Java%E4%B8%8E%E7%94%9F%E6%B4%BB/1.Java%E5%9F%BA%E7%A1%80/09.%E6%96%B9%E6%B3%95%E7%9A%84%E9%87%8D%E8%BD%BD.html",relativePath:"01.Java/05.Frank - Java与生活/1.Java基础/09.方法的重载.md",key:"v-bea1d2d6",path:"/pages/dda86a/",headers:[{level:2,title:"理念",slug:"理念",normalizedTitle:"理念",charIndex:12},{level:2,title:"核心",slug:"核心",normalizedTitle:"核心",charIndex:69}],headersStr:"理念 核心",content:"# 方法的重载\n\n\n# 理念\n\n同一个方法可以传入不同类型不同个数的参数，实现方法名的统一。\n\n> 这并不意味着只用写一个方法。\n\n\n# 核心\n\n * 方法名相同\n * 参数类型或者参数个数不相同\n\n// 两个int类型参数\npublic static int sum(int x, int y) {\n    return x + y;\n}\n\n// 两个double类型参数\npublic static double sum(double x, double y) {\n    return x + y;\n}\n\n// 三个int类型参数\npublic static int sum(int x, int y, int z) {\n    return x + y + z;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n",normalizedContent:"# 方法的重载\n\n\n# 理念\n\n同一个方法可以传入不同类型不同个数的参数，实现方法名的统一。\n\n> 这并不意味着只用写一个方法。\n\n\n# 核心\n\n * 方法名相同\n * 参数类型或者参数个数不相同\n\n// 两个int类型参数\npublic static int sum(int x, int y) {\n    return x + y;\n}\n\n// 两个double类型参数\npublic static double sum(double x, double y) {\n    return x + y;\n}\n\n// 三个int类型参数\npublic static int sum(int x, int y, int z) {\n    return x + y + z;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"规范",frontmatter:{title:"规范",date:"2022-04-15T00:29:44.000Z",permalink:"/pages/a1ff58/",tags:[null]},regularPath:"/01.Java/05.Frank%20-%20Java%E4%B8%8E%E7%94%9F%E6%B4%BB/1.Java%E5%9F%BA%E7%A1%80/10.%E8%A7%84%E8%8C%83.html",relativePath:"01.Java/05.Frank - Java与生活/1.Java基础/10.规范.md",key:"v-50f953dc",path:"/pages/a1ff58/",headersStr:null,content:"# 规范约束\n\n根据：阿里巴巴 Java 开发手册",normalizedContent:"# 规范约束\n\n根据：阿里巴巴 java 开发手册",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"变换思维",frontmatter:{title:"变换思维",date:"2022-04-15T00:29:45.000Z",permalink:"/pages/d161b3/",tags:[null]},regularPath:"/01.Java/05.Frank%20-%20Java%E4%B8%8E%E7%94%9F%E6%B4%BB/2.OOP%E4%B8%8A%E5%8D%8A%E9%83%A8%E5%88%86/01.%E5%8F%98%E6%8D%A2%E6%80%9D%E7%BB%B4.html",relativePath:"01.Java/05.Frank - Java与生活/2.OOP上半部分/01.变换思维.md",key:"v-21a8ad8a",path:"/pages/d161b3/",headers:[{level:2,title:"在这之前",slug:"在这之前",normalizedTitle:"在这之前",charIndex:11},{level:2,title:"两种编程思维方式",slug:"两种编程思维方式",normalizedTitle:"两种编程思维方式",charIndex:104},{level:2,title:"是时候变换思维了",slug:"是时候变换思维了",normalizedTitle:"是时候变换思维了",charIndex:202}],headersStr:"在这之前 两种编程思维方式 是时候变换思维了",content:"# 变换思维\n\n\n# 在这之前\n\n在学习面向对象编程之前，我们的思维往往是一种“面向过程”的，喜欢按顺序来思考问题。\n\n典型的”面向过程”思维方式：打开冰箱 ---\x3e 放入大象 ---\x3e 关上冰箱门\n\n\n# 两种编程思维方式\n\n面向过程编程——POP——Process-oriented programming\n\n面向对象编程——OOP——Object-Oriented Programming\n\n\n# 是时候变换思维了\n\n明确目标，不强调过程。\n\n大众化。\n\n对象是类的实例。\n\n一切皆对象。\n\n类中的变量和方法 ---\x3e 属性（共性、特性）\n\n类中的变量 ---\x3e 成员变量\n\n类中的方法 ---\x3e 行为\n\n操作实例，调用方法\n\n类中以 this 代表对象本身（类似于 Python 中的 self）",normalizedContent:"# 变换思维\n\n\n# 在这之前\n\n在学习面向对象编程之前，我们的思维往往是一种“面向过程”的，喜欢按顺序来思考问题。\n\n典型的”面向过程”思维方式：打开冰箱 ---\x3e 放入大象 ---\x3e 关上冰箱门\n\n\n# 两种编程思维方式\n\n面向过程编程——pop——process-oriented programming\n\n面向对象编程——oop——object-oriented programming\n\n\n# 是时候变换思维了\n\n明确目标，不强调过程。\n\n大众化。\n\n对象是类的实例。\n\n一切皆对象。\n\n类中的变量和方法 ---\x3e 属性（共性、特性）\n\n类中的变量 ---\x3e 成员变量\n\n类中的方法 ---\x3e 行为\n\n操作实例，调用方法\n\n类中以 this 代表对象本身（类似于 python 中的 self）",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"toString",frontmatter:{title:"toString",date:"2022-04-15T00:29:45.000Z",permalink:"/pages/2a21b9/",tags:[null]},regularPath:"/01.Java/05.Frank%20-%20Java%E4%B8%8E%E7%94%9F%E6%B4%BB/2.OOP%E4%B8%8A%E5%8D%8A%E9%83%A8%E5%88%86/04.toString.html",relativePath:"01.Java/05.Frank - Java与生活/2.OOP上半部分/04.toString.md",key:"v-4b230ce4",path:"/pages/2a21b9/",headers:[{level:2,title:'什么是“toString()"?',slug:"什么是-tostring",normalizedTitle:"什么是“tostring()&quot;?",charIndex:null},{level:2,title:"IDEA快捷方式",slug:"idea快捷方式",normalizedTitle:"idea快捷方式",charIndex:220},{level:2,title:"尽管IDEA已经非常便利了",slug:"尽管idea已经非常便利了",normalizedTitle:"尽管idea已经非常便利了",charIndex:276}],headersStr:'什么是“toString()"? IDEA快捷方式 尽管IDEA已经非常便利了',content:'# toString()\n\n\n# 什么是“toString()"?\n\nhttps://jabingp.github.io/javaRewriteToString.html\n\ntoString() 是 Object 类的一个方法。通过重写 toString() 在我们自己的类中使用其功能。\n\n功能：\n\n> 打印对象，为了让大家的输出好看。\n\n就是toString 可能是一个系统性能的忧患，但是~~~\n\n初学者，爽就完事儿了！！！\n\n\n# IDEA快捷方式\n\n * 在类中，Alt+Insert\n * 选择 toString()\n * 完事儿\n\n\n# 尽管IDEA已经非常便利了\n\n但是，还是不够逼格。。。\n\n那怎样才能B格到位呢？\n\nLombok ---\x3e 一行注解 @ToString，完事儿。\n\n如果要同时使用 toString()、equals()、hashCode() 三个，只要一个 @Data 就行了。',normalizedContent:'# tostring()\n\n\n# 什么是“tostring()"?\n\nhttps://jabingp.github.io/javarewritetostring.html\n\ntostring() 是 object 类的一个方法。通过重写 tostring() 在我们自己的类中使用其功能。\n\n功能：\n\n> 打印对象，为了让大家的输出好看。\n\n就是tostring 可能是一个系统性能的忧患，但是~~~\n\n初学者，爽就完事儿了！！！\n\n\n# idea快捷方式\n\n * 在类中，alt+insert\n * 选择 tostring()\n * 完事儿\n\n\n# 尽管idea已经非常便利了\n\n但是，还是不够逼格。。。\n\n那怎样才能b格到位呢？\n\nlombok ---\x3e 一行注解 @tostring，完事儿。\n\n如果要同时使用 tostring()、equals()、hashcode() 三个，只要一个 @data 就行了。',charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"null空指针异常",frontmatter:{title:"null空指针异常",date:"2022-04-15T00:29:45.000Z",permalink:"/pages/1e6984/",tags:[null]},regularPath:"/01.Java/05.Frank%20-%20Java%E4%B8%8E%E7%94%9F%E6%B4%BB/2.OOP%E4%B8%8A%E5%8D%8A%E9%83%A8%E5%88%86/02.null%E7%A9%BA%E6%8C%87%E9%92%88%E5%BC%82%E5%B8%B8.html",relativePath:"01.Java/05.Frank - Java与生活/2.OOP上半部分/02.null空指针异常.md",key:"v-6015b26c",path:"/pages/1e6984/",headers:[{level:2,title:"For instance",slug:"for-instance",normalizedTitle:"for instance",charIndex:33}],headersStr:"For instance",content:"# NullPointerException 空指针异常\n\n\n# For instance\n\n假设有一个对象 obj\n\n令obj = null;\n\n这个对象就相当于一个指针，它本可以指向它的成员变量、方法，但现在它却只能指向一块空的区域。\n\n于是就出现了空指针异常————NullPointerException",normalizedContent:"# nullpointerexception 空指针异常\n\n\n# for instance\n\n假设有一个对象 obj\n\n令obj = null;\n\n这个对象就相当于一个指针，它本可以指向它的成员变量、方法，但现在它却只能指向一块空的区域。\n\n于是就出现了空指针异常————nullpointerexception",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"构造方法",frontmatter:{title:"构造方法",date:"2022-04-15T00:29:45.000Z",permalink:"/pages/70fd79/",tags:[null]},regularPath:"/01.Java/05.Frank%20-%20Java%E4%B8%8E%E7%94%9F%E6%B4%BB/2.OOP%E4%B8%8A%E5%8D%8A%E9%83%A8%E5%88%86/05.%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95.html",relativePath:"01.Java/05.Frank - Java与生活/2.OOP上半部分/05.构造方法.md",key:"v-62e09756",path:"/pages/70fd79/",headers:[{level:2,title:"原理",slug:"原理",normalizedTitle:"原理",charIndex:102},{level:2,title:"构造方法",slug:"构造方法-2",normalizedTitle:"构造方法",charIndex:2},{level:3,title:"无参构造器-Example",slug:"无参构造器-example",normalizedTitle:"无参构造器-example",charIndex:514},{level:3,title:"有参构造器-Example",slug:"有参构造器-example",normalizedTitle:"有参构造器-example",charIndex:560},{level:2,title:"注意！",slug:"注意",normalizedTitle:"注意！",charIndex:718},{level:2,title:"重载构造方法",slug:"重载构造方法",normalizedTitle:"重载构造方法",charIndex:966},{level:2,title:"IDEA快捷方式",slug:"idea快捷方式",normalizedTitle:"idea快捷方式",charIndex:1315}],headersStr:"原理 构造方法 无参构造器-Example 有参构造器-Example 注意！ 重载构造方法 IDEA快捷方式",content:"# 构造方法\n\n参考：\n\nhttps://www.yiibai.com/java/constructor.html\n\nhttps://www.jianshu.com/p/c2300404c331\n\n\n# 原理\n\n如果说“new”一个对象就像用户注册新账户一样：\n\n用户注册时，是不是直接就获取到了手机号或邮箱啊，那注册之后还需要用户再提供一次吗？\n\n所以说，用户注册账户就是一种“定义+初始化”的形式。\n\n以数组的初始化为例：\n\n// 定义+初始化\nint[] array_1 = {1,2,3,4};\n\n// 只定义\nint[] array_2 = new int[4];\n\n\n1\n2\n3\n4\n5\n\n\n\n# 构造方法\n\n构造方法不需要写返回类型，方法名即为类名。\n\n两种类型的构造方法：\n\n * 无参构造方法（默认构造方法）\n * 有参构造方法\n\n在实例化一个类时，都会执行构造方法来初始化一个对象。如果没有写构造方法，Java 编译器就会自动生成一个无参构造方法，为对象初始化一个默认值（根据对象成员变量类型分配默认值，如：int 为0、String 为null）。\n\n构造方法还有一个有逼格的名字————构造器。\n\n\n# 无参构造器-Example\n\npublic Person() {\n}\n\n\n1\n2\n\n\n\n# 有参构造器-Example\n\npublic Person(String name, String age, String gender) {\n    this.name = name;\n    this.age = age;\n    this.gender = gender;\n}\n\n\n1\n2\n3\n4\n5\n\n\n\n# 注意！\n\n如果要写了一个有参构造器，一定要写 无参构造器 + 有参构造器：\n\npublic Person() {\n}\n\npublic Person(String name, String age, String gender) {\n    this.name = name;\n    this.age = age;\n    this.gender = gender;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n如果不写无参构造器，编译器就会认为构造器必须要有参数。没有参数，就会报错。\n\n\n# 重载构造方法\n\n> 重载：函数名相同，参数个数不同。\n\n其实有参构造器就是无参构造器的重载，此外，如果要控制传入参数的个数，可以再次重载构造方法。\n\n还是已注册账户为例：\n\n在注册时，用户可选择性地忽略一些不强制填写的内容。\n\npublic Person() {\n}\n\npublic Person(String name, String age, String gender) {\n    this.name = name;\n    this.age = age;\n    this.gender = gender;\n}\n\npublic Person(String name) {\n    this.name = name;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# IDEA快捷方式\n\n * 在类中，Alt+Insert\n * 选择 Constructor\n * 完事儿",normalizedContent:"# 构造方法\n\n参考：\n\nhttps://www.yiibai.com/java/constructor.html\n\nhttps://www.jianshu.com/p/c2300404c331\n\n\n# 原理\n\n如果说“new”一个对象就像用户注册新账户一样：\n\n用户注册时，是不是直接就获取到了手机号或邮箱啊，那注册之后还需要用户再提供一次吗？\n\n所以说，用户注册账户就是一种“定义+初始化”的形式。\n\n以数组的初始化为例：\n\n// 定义+初始化\nint[] array_1 = {1,2,3,4};\n\n// 只定义\nint[] array_2 = new int[4];\n\n\n1\n2\n3\n4\n5\n\n\n\n# 构造方法\n\n构造方法不需要写返回类型，方法名即为类名。\n\n两种类型的构造方法：\n\n * 无参构造方法（默认构造方法）\n * 有参构造方法\n\n在实例化一个类时，都会执行构造方法来初始化一个对象。如果没有写构造方法，java 编译器就会自动生成一个无参构造方法，为对象初始化一个默认值（根据对象成员变量类型分配默认值，如：int 为0、string 为null）。\n\n构造方法还有一个有逼格的名字————构造器。\n\n\n# 无参构造器-example\n\npublic person() {\n}\n\n\n1\n2\n\n\n\n# 有参构造器-example\n\npublic person(string name, string age, string gender) {\n    this.name = name;\n    this.age = age;\n    this.gender = gender;\n}\n\n\n1\n2\n3\n4\n5\n\n\n\n# 注意！\n\n如果要写了一个有参构造器，一定要写 无参构造器 + 有参构造器：\n\npublic person() {\n}\n\npublic person(string name, string age, string gender) {\n    this.name = name;\n    this.age = age;\n    this.gender = gender;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n如果不写无参构造器，编译器就会认为构造器必须要有参数。没有参数，就会报错。\n\n\n# 重载构造方法\n\n> 重载：函数名相同，参数个数不同。\n\n其实有参构造器就是无参构造器的重载，此外，如果要控制传入参数的个数，可以再次重载构造方法。\n\n还是已注册账户为例：\n\n在注册时，用户可选择性地忽略一些不强制填写的内容。\n\npublic person() {\n}\n\npublic person(string name, string age, string gender) {\n    this.name = name;\n    this.age = age;\n    this.gender = gender;\n}\n\npublic person(string name) {\n    this.name = name;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# idea快捷方式\n\n * 在类中，alt+insert\n * 选择 constructor\n * 完事儿",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"封装",frontmatter:{title:"封装",date:"2022-04-15T00:29:45.000Z",permalink:"/pages/b12e76/",tags:[null]},regularPath:"/01.Java/05.Frank%20-%20Java%E4%B8%8E%E7%94%9F%E6%B4%BB/2.OOP%E4%B8%8A%E5%8D%8A%E9%83%A8%E5%88%86/03.%E5%B0%81%E8%A3%85.html",relativePath:"01.Java/05.Frank - Java与生活/2.OOP上半部分/03.封装.md",key:"v-28d12b06",path:"/pages/b12e76/",headers:[{level:2,title:"访问控制修饰符",slug:"访问控制修饰符",normalizedTitle:"访问控制修饰符",charIndex:9},{level:2,title:"封装",slug:"封装-2",normalizedTitle:"封装",charIndex:2},{level:2,title:"Geter & Seter",slug:"geter-seter",normalizedTitle:"geter &amp; seter",charIndex:null},{level:2,title:"工具带来的便利",slug:"工具带来的便利",normalizedTitle:"工具带来的便利",charIndex:204},{level:3,title:"Lombok",slug:"lombok",normalizedTitle:"lombok",charIndex:303},{level:3,title:"不能忘本",slug:"不能忘本",normalizedTitle:"不能忘本",charIndex:621}],headersStr:"访问控制修饰符 封装 Geter & Seter 工具带来的便利 Lombok 不能忘本",content:"# 封装\n\n\n# 访问控制修饰符\n\n * public\n * private\n\n\n# 封装\n\n将类中属性、方法的访问控制修饰符设置为 private\n\n安全，提防瞎几把乱搞的厚颜无耻又卑鄙之人！\n\n当然，多数时候是防止你自己瞎几把乱搞。。。\n\n\n# Geter & Seter\n\n路不能绝，肯定还得有办法能访问和修改吧~\n\n那就是 get 和 set 方法，他俩就专门掌管私有成员变量的访问和修改。\n\n\n# 工具带来的便利\n\n一个类中可能会有很多的私有成员变量，这时候，每个私有成员变量都要有对应的 GeterSeter，一个一个写也挺麻烦的耶...\n\n学了框架之后肯定不能手写呀，手写多费劲。\n\n于是乎，Lombok 就出现了，它提供了 Geter 和 Seter 的注解捏~\n\n当然，IDEA 也为懒人提供了快捷方式：\n\n * Alt+Insert（Win快捷键）\n * 选择 Geter and Seter\n * 全选后回车，IDEA 会帮我们自动创建类中所有的 GeterSeter\n\n\n# Lombok\n\nLombok 是第三方 Java 工具包，IDEA 可以通过 Maven 或则 jar包 的方式引入。\n\n企业当中一般不使用 Lombok。\n\n如果没学过 Maven，可通过 jar包引入，IDEA 也要安装相应的插件。\n\n碰到问题首先查看官方的文档（如 Github 的 README），还不行就查看 Issue。\n\n\n# 不能忘本\n\n用工具可以，但不能忘本啊。\n\n如果不让你用工具的时候，你会不会写 GeterSeter 这是一个问题。",normalizedContent:"# 封装\n\n\n# 访问控制修饰符\n\n * public\n * private\n\n\n# 封装\n\n将类中属性、方法的访问控制修饰符设置为 private\n\n安全，提防瞎几把乱搞的厚颜无耻又卑鄙之人！\n\n当然，多数时候是防止你自己瞎几把乱搞。。。\n\n\n# geter & seter\n\n路不能绝，肯定还得有办法能访问和修改吧~\n\n那就是 get 和 set 方法，他俩就专门掌管私有成员变量的访问和修改。\n\n\n# 工具带来的便利\n\n一个类中可能会有很多的私有成员变量，这时候，每个私有成员变量都要有对应的 geterseter，一个一个写也挺麻烦的耶...\n\n学了框架之后肯定不能手写呀，手写多费劲。\n\n于是乎，lombok 就出现了，它提供了 geter 和 seter 的注解捏~\n\n当然，idea 也为懒人提供了快捷方式：\n\n * alt+insert（win快捷键）\n * 选择 geter and seter\n * 全选后回车，idea 会帮我们自动创建类中所有的 geterseter\n\n\n# lombok\n\nlombok 是第三方 java 工具包，idea 可以通过 maven 或则 jar包 的方式引入。\n\n企业当中一般不使用 lombok。\n\n如果没学过 maven，可通过 jar包引入，idea 也要安装相应的插件。\n\n碰到问题首先查看官方的文档（如 github 的 readme），还不行就查看 issue。\n\n\n# 不能忘本\n\n用工具可以，但不能忘本啊。\n\n如果不让你用工具的时候，你会不会写 geterseter 这是一个问题。",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"垃圾回收？",frontmatter:{title:"垃圾回收？",date:"2022-04-15T00:29:45.000Z",permalink:"/pages/e44222/",tags:[null]},regularPath:"/01.Java/05.Frank%20-%20Java%E4%B8%8E%E7%94%9F%E6%B4%BB/2.OOP%E4%B8%8A%E5%8D%8A%E9%83%A8%E5%88%86/06.%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%EF%BC%9F.html",relativePath:"01.Java/05.Frank - Java与生活/2.OOP上半部分/06.垃圾回收？.md",key:"v-162046e2",path:"/pages/e44222/",headersStr:null,content:"# 垃圾回收？\n\nTMD Java 有自动垃圾回收机制啊！\n\n所以说，Java 开发者压根儿就不需要关心对象回收的问题。",normalizedContent:"# 垃圾回收？\n\ntmd java 有自动垃圾回收机制啊！\n\n所以说，java 开发者压根儿就不需要关心对象回收的问题。",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"内部类扯淡",frontmatter:{title:"内部类扯淡",date:"2022-04-15T00:29:45.000Z",permalink:"/pages/3d4433/",tags:[null]},regularPath:"/01.Java/05.Frank%20-%20Java%E4%B8%8E%E7%94%9F%E6%B4%BB/2.OOP%E4%B8%8A%E5%8D%8A%E9%83%A8%E5%88%86/09.%E5%86%85%E9%83%A8%E7%B1%BB%E6%89%AF%E6%B7%A1.html",relativePath:"01.Java/05.Frank - Java与生活/2.OOP上半部分/09.内部类扯淡.md",key:"v-014bb200",path:"/pages/3d4433/",headersStr:null,content:'# 内部类扯淡\n\n！：在实际开发过程中，内部类并不常用，因为我们总是会把一个类单独写一个文件。\n\n> 一个文件里只能有一个公共类?\n\npublic class Sun {\n    // 内部类\n    class Earth {\n        // ...\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n不推荐使用"内部类"这种东西，这样写的情况少之又少。\n\n内部类的可维护性并不好。\n\n> 而"匿名内部类"会常用一些。\n\n用案例来讲"内部类"会比较复杂，把书上的原理看懂就行。。。',normalizedContent:'# 内部类扯淡\n\n！：在实际开发过程中，内部类并不常用，因为我们总是会把一个类单独写一个文件。\n\n> 一个文件里只能有一个公共类?\n\npublic class sun {\n    // 内部类\n    class earth {\n        // ...\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n不推荐使用"内部类"这种东西，这样写的情况少之又少。\n\n内部类的可维护性并不好。\n\n> 而"匿名内部类"会常用一些。\n\n用案例来讲"内部类"会比较复杂，把书上的原理看懂就行。。。',charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"静态变量和方法",frontmatter:{title:"静态变量和方法",date:"2022-04-15T00:29:45.000Z",permalink:"/pages/f2a51b/",tags:[null]},regularPath:"/01.Java/05.Frank%20-%20Java%E4%B8%8E%E7%94%9F%E6%B4%BB/2.OOP%E4%B8%8A%E5%8D%8A%E9%83%A8%E5%88%86/07.%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F%E5%92%8C%E6%96%B9%E6%B3%95.html",relativePath:"01.Java/05.Frank - Java与生活/2.OOP上半部分/07.静态变量和方法.md",key:"v-7c1b97f0",path:"/pages/f2a51b/",headers:[{level:2,title:"访问控制修饰符 + static 的尴尬。。。",slug:"访问控制修饰符-static-的尴尬。。。",normalizedTitle:"访问控制修饰符 + static 的尴尬。。。",charIndex:147}],headersStr:"访问控制修饰符 + static 的尴尬。。。",content:'# 静态？\n\nhttps://www.baeldung.com/java-static\n\n在 Java 中，关键字 static 表示特定成员属于类本身，而不是属于该类的实例。\n\n静态变量和方法只能在类中定义，且只能通过类名来调用。\n\n> 静态变量、方法是在类这个层级来定义和使用的。\n\n\n# 访问控制修饰符 + static 的尴尬。。。\n\npublic + static：\n\npublic static String school = "WuZhi";\n\n\n1\n\n\nprivate + static：\n\nprivate static String school = "WuZhi";\n\n\n1\n\n\n当要把 public 更改为 private 时，问题就出现了：\n\n当访问控制修饰符为 public 的时候，外部是可以通过类名访问和更改的。\n\n如果不想让外部更改，访问控制修饰符更改为 private 后，只设置一个 Geter 而不设置 Seter 的方案的确能够防止外部更改，不过即使有 Geter 却也不能访问...\n\n这时，可以写一个这样的方法：\n\npublic static String getSchoolInstance() {\n    return school;\n}\n\n\n1\n2\n3\n\n\n这样外部就可以通过类名调用方法 getSchoolInstance() 来访问该静态变量。\n\n该方法就是————静态方法。',normalizedContent:'# 静态？\n\nhttps://www.baeldung.com/java-static\n\n在 java 中，关键字 static 表示特定成员属于类本身，而不是属于该类的实例。\n\n静态变量和方法只能在类中定义，且只能通过类名来调用。\n\n> 静态变量、方法是在类这个层级来定义和使用的。\n\n\n# 访问控制修饰符 + static 的尴尬。。。\n\npublic + static：\n\npublic static string school = "wuzhi";\n\n\n1\n\n\nprivate + static：\n\nprivate static string school = "wuzhi";\n\n\n1\n\n\n当要把 public 更改为 private 时，问题就出现了：\n\n当访问控制修饰符为 public 的时候，外部是可以通过类名访问和更改的。\n\n如果不想让外部更改，访问控制修饰符更改为 private 后，只设置一个 geter 而不设置 seter 的方案的确能够防止外部更改，不过即使有 geter 却也不能访问...\n\n这时，可以写一个这样的方法：\n\npublic static string getschoolinstance() {\n    return school;\n}\n\n\n1\n2\n3\n\n\n这样外部就可以通过类名调用方法 getschoolinstance() 来访问该静态变量。\n\n该方法就是————静态方法。',charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"static单例设计模式",frontmatter:{title:"static单例设计模式",date:"2022-04-15T00:29:45.000Z",permalink:"/pages/d01143/",tags:[null]},regularPath:"/01.Java/05.Frank%20-%20Java%E4%B8%8E%E7%94%9F%E6%B4%BB/2.OOP%E4%B8%8A%E5%8D%8A%E9%83%A8%E5%88%86/08.static%E5%8D%95%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html",relativePath:"01.Java/05.Frank - Java与生活/2.OOP上半部分/08.static单例设计模式.md",key:"v-619a9c15",path:"/pages/d01143/",headersStr:null,content:'# static 单例设计模式\n\n利用 static 让类只能 "new" 一次?\n\npublic class Earth {\n    private static Earth earthInstance = new Earth();\n\n    private Earth() {\n    }\n\n    public static Earth getEarthInstance() {\n        return earthInstance;\n    }\n\n    public void hello() {\n        System.out.println("Hello");\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\nrun:\n\npublic class Test {\n    public static void main(String[] args) {\n        // Earth earth = new Earth(); ---\x3e（x）\n        Earth earthInstance = Earth.getEarthInstance();\n        earthInstance.hello();\t// Hello\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n',normalizedContent:'# static 单例设计模式\n\n利用 static 让类只能 "new" 一次?\n\npublic class earth {\n    private static earth earthinstance = new earth();\n\n    private earth() {\n    }\n\n    public static earth getearthinstance() {\n        return earthinstance;\n    }\n\n    public void hello() {\n        system.out.println("hello");\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\nrun:\n\npublic class test {\n    public static void main(string[] args) {\n        // earth earth = new earth(); ---\x3e（x）\n        earth earthinstance = earth.getearthinstance();\n        earthinstance.hello();\t// hello\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n',charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"方法的重写",frontmatter:{title:"方法的重写",date:"2022-04-15T00:29:45.000Z",permalink:"/pages/9f2cbb/",tags:[null]},regularPath:"/01.Java/05.Frank%20-%20Java%E4%B8%8E%E7%94%9F%E6%B4%BB/3.OOP%E4%B8%8B%E5%8D%8A%E9%83%A8%E5%88%86/02.%E6%96%B9%E6%B3%95%E7%9A%84%E9%87%8D%E5%86%99.html",relativePath:"01.Java/05.Frank - Java与生活/3.OOP下半部分/02.方法的重写.md",key:"v-584b6c7d",path:"/pages/9f2cbb/",headersStr:null,content:"# 方法的重写\n\n与方法的重载不同，重写是建立在面向对象基础上的。\n\n重写还有一个有趣的名字叫”覆盖“。\n\n注解：@Override\n\n凡是在一个子类中看到一个 @Override 和它下面的方法，说明这是在子类中重写父类中的方法。",normalizedContent:"# 方法的重写\n\n与方法的重载不同，重写是建立在面向对象基础上的。\n\n重写还有一个有趣的名字叫”覆盖“。\n\n注解：@override\n\n凡是在一个子类中看到一个 @override 和它下面的方法，说明这是在子类中重写父类中的方法。",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"继承",frontmatter:{title:"继承",date:"2022-04-15T00:29:45.000Z",permalink:"/pages/a2c72d/",tags:[null]},regularPath:"/01.Java/05.Frank%20-%20Java%E4%B8%8E%E7%94%9F%E6%B4%BB/3.OOP%E4%B8%8B%E5%8D%8A%E9%83%A8%E5%88%86/01.%E7%BB%A7%E6%89%BF.html",relativePath:"01.Java/05.Frank - Java与生活/3.OOP下半部分/01.继承.md",key:"v-2e5e00fc",path:"/pages/a2c72d/",headers:[{level:2,title:"Example: 动物",slug:"example-动物",normalizedTitle:"example: 动物",charIndex:133},{level:2,title:"Example: ABC",slug:"example-abc",normalizedTitle:"example: abc",charIndex:324},{level:2,title:"关于多继承",slug:"关于多继承",normalizedTitle:"关于多继承",charIndex:505}],headersStr:"Example: 动物 Example: ABC 关于多继承",content:"# 继承\n\n类就是创建对象（类）的模板（蓝图）。\n\n“有其父必有其子”，很多类的共同特性和方法可抽象为一个父类，这些特性和方法可由所有子类共享和使用。\n\nhttps://www.w3schools.com/java/java_inheritance.asp\n\n\n# Example: 动物\n\n父类: Animal\n\nclass Animal {\n    // ...\n}\n\n\n1\n2\n3\n\n\n子类：Dog、Cat\n\nclass Dog extends Animal {\n}\n\n\n1\n2\n\n\nclass Cat extends Animal {\n}\n\n\n1\n2\n\n\n\n# 多层继承\n\n孙子，重孙...\n\n> 喜羊羊与灰太狼 - 饿狼传说。。\n\n\n# Example: ABC\n\nclass A {\n    // ...\n}\n\nclass B extends A {\n    // ...\n}\n\nclass C extends B {\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nC 就同时继承了 A 和 B 两个类，但 C 绝对不是“骡子”。（骡子由马和驴杂交而来，多继承就类似于“骡子”。）\n\n\n# 关于多继承\n\nJava 不支持一个类同时继承多个类，但可通过多层继承的方式实现一个类继承多个类。\n\n但是，Java 中的接口支持多继承。",normalizedContent:"# 继承\n\n类就是创建对象（类）的模板（蓝图）。\n\n“有其父必有其子”，很多类的共同特性和方法可抽象为一个父类，这些特性和方法可由所有子类共享和使用。\n\nhttps://www.w3schools.com/java/java_inheritance.asp\n\n\n# example: 动物\n\n父类: animal\n\nclass animal {\n    // ...\n}\n\n\n1\n2\n3\n\n\n子类：dog、cat\n\nclass dog extends animal {\n}\n\n\n1\n2\n\n\nclass cat extends animal {\n}\n\n\n1\n2\n\n\n\n# 多层继承\n\n孙子，重孙...\n\n> 喜羊羊与灰太狼 - 饿狼传说。。\n\n\n# example: abc\n\nclass a {\n    // ...\n}\n\nclass b extends a {\n    // ...\n}\n\nclass c extends b {\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nc 就同时继承了 a 和 b 两个类，但 c 绝对不是“骡子”。（骡子由马和驴杂交而来，多继承就类似于“骡子”。）\n\n\n# 关于多继承\n\njava 不支持一个类同时继承多个类，但可通过多层继承的方式实现一个类继承多个类。\n\n但是，java 中的接口支持多继承。",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"final",frontmatter:{title:"final",date:"2022-04-15T00:29:45.000Z",permalink:"/pages/591580/",tags:[null]},regularPath:"/01.Java/05.Frank%20-%20Java%E4%B8%8E%E7%94%9F%E6%B4%BB/3.OOP%E4%B8%8B%E5%8D%8A%E9%83%A8%E5%88%86/04.final.html",relativePath:"01.Java/05.Frank - Java与生活/3.OOP下半部分/04.final.md",key:"v-61ecd514",path:"/pages/591580/",headers:[{level:2,title:"final 作用",slug:"final-作用",normalizedTitle:"final 作用",charIndex:12}],headersStr:"final 作用",content:"# final\n\n\n# final 作用\n\n * 让一个类断子绝孙，使其不能衍生其它类\n * 禁止子类重写父类的方法\n * 定义常量\n\n如果父类中的方法具有修饰符 final，那么子类是不能重写这个方法的。",normalizedContent:"# final\n\n\n# final 作用\n\n * 让一个类断子绝孙，使其不能衍生其它类\n * 禁止子类重写父类的方法\n * 定义常量\n\n如果父类中的方法具有修饰符 final，那么子类是不能重写这个方法的。",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"super啃老",frontmatter:{title:"super啃老",date:"2022-04-15T00:29:45.000Z",permalink:"/pages/d73c40/",tags:[null]},regularPath:"/01.Java/05.Frank%20-%20Java%E4%B8%8E%E7%94%9F%E6%B4%BB/3.OOP%E4%B8%8B%E5%8D%8A%E9%83%A8%E5%88%86/03.super%E5%95%83%E8%80%81.html",relativePath:"01.Java/05.Frank - Java与生活/3.OOP下半部分/03.super啃老.md",key:"v-c7ac12a6",path:"/pages/d73c40/",headers:[{level:2,title:"super 用处",slug:"super-用处",normalizedTitle:"super 用处",charIndex:57},{level:2,title:"Example",slug:"example",normalizedTitle:"example",charIndex:94}],headersStr:"super 用处 Example",content:"# super 啃老\n\n可在子类中使用 super 来指代父类，类似于在类中使用 this 来指代对象。\n\n\n# super 用处\n\n * 使用父类的方法\n * 获得父类的构造器\n\n\n# Example\n\n假设有一父类如下：\n\npublic class Father {\n    int money;\n\n    public Father() {\n    }\n\n    public Father(int total) {\n        this.money = total;\n    }\n\n    public void work() {\n        System.out.println(\"Working...\");\n    }\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n在子类中利用 super 使用父类的方法：\n\npublic class Son extends Father {\n    @Override\t\t\t\t// super 是重写方法的默认形式\n    public void work() {\n        super.work();\t\t// 'spuer' is here\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n在子类中获得父类构造器：\n\npublic class Son extends Father {\n    public Son() {\n    }\n\n    public Son(int total) {\n        super(total);\t\t// 'spuer' is here\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n",normalizedContent:"# super 啃老\n\n可在子类中使用 super 来指代父类，类似于在类中使用 this 来指代对象。\n\n\n# super 用处\n\n * 使用父类的方法\n * 获得父类的构造器\n\n\n# example\n\n假设有一父类如下：\n\npublic class father {\n    int money;\n\n    public father() {\n    }\n\n    public father(int total) {\n        this.money = total;\n    }\n\n    public void work() {\n        system.out.println(\"working...\");\n    }\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n在子类中利用 super 使用父类的方法：\n\npublic class son extends father {\n    @override\t\t\t\t// super 是重写方法的默认形式\n    public void work() {\n        super.work();\t\t// 'spuer' is here\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n在子类中获得父类构造器：\n\npublic class son extends father {\n    public son() {\n    }\n\n    public son(int total) {\n        super(total);\t\t// 'spuer' is here\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"抽象类和抽象方法",frontmatter:{title:"抽象类和抽象方法",date:"2022-04-15T00:29:45.000Z",permalink:"/pages/27dde8/",tags:[null]},regularPath:"/01.Java/05.Frank%20-%20Java%E4%B8%8E%E7%94%9F%E6%B4%BB/3.OOP%E4%B8%8B%E5%8D%8A%E9%83%A8%E5%88%86/05.%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%92%8C%E6%8A%BD%E8%B1%A1%E6%96%B9%E6%B3%95.html",relativePath:"01.Java/05.Frank - Java与生活/3.OOP下半部分/05.抽象类和抽象方法.md",key:"v-029c498f",path:"/pages/27dde8/",headersStr:null,content:'# What is the "Abstract Class"？\n\n> 在面向对象的概念中，所有的对象都是通过类来描绘的，但是反过来，并不是所有的类都是用来描绘对象的，如果一个类中没有包含足够的信息来描绘一个具体的对象，这样的类就是抽象类。\n> \n> 抽象类除了不能实例化对象之外，类的其它功能依然存在，成员变量、成员方法和构造方法的访问方式和普通类一样。\n> \n> 由于抽象类不能实例化对象，所以抽象类必须被继承，才能被使用。也是因为这个原因，通常在设计阶段决定要不要设计抽象类。\n> \n> 父类包含了子类集合的常见的方法，但是由于父类本身是抽象的，所以不能使用这些方法。\n> \n> 在 Java 中抽象类表示的是一种继承关系，一个类只能继承一个抽象类，而一个类却可以实现多个接口。\n\nJava 语言使用 abstract class 来定义抽象类\n\n\n# What is the "Abstract Method"?\n\n如果要写一个抽象方法，则其归属的类必须为抽象类。\n\n抽象方法没有"body"：\n\npublic abstract void test();\n\n\n1\n\n\n> 当一个类继承一个抽象类时，该子类必须重写父类中所有的抽象方法。\n\n如果子类要重写父类的抽象方法，就不能使用 super 了。',normalizedContent:'# what is the "abstract class"？\n\n> 在面向对象的概念中，所有的对象都是通过类来描绘的，但是反过来，并不是所有的类都是用来描绘对象的，如果一个类中没有包含足够的信息来描绘一个具体的对象，这样的类就是抽象类。\n> \n> 抽象类除了不能实例化对象之外，类的其它功能依然存在，成员变量、成员方法和构造方法的访问方式和普通类一样。\n> \n> 由于抽象类不能实例化对象，所以抽象类必须被继承，才能被使用。也是因为这个原因，通常在设计阶段决定要不要设计抽象类。\n> \n> 父类包含了子类集合的常见的方法，但是由于父类本身是抽象的，所以不能使用这些方法。\n> \n> 在 java 中抽象类表示的是一种继承关系，一个类只能继承一个抽象类，而一个类却可以实现多个接口。\n\njava 语言使用 abstract class 来定义抽象类\n\n\n# what is the "abstract method"?\n\n如果要写一个抽象方法，则其归属的类必须为抽象类。\n\n抽象方法没有"body"：\n\npublic abstract void test();\n\n\n1\n\n\n> 当一个类继承一个抽象类时，该子类必须重写父类中所有的抽象方法。\n\n如果子类要重写父类的抽象方法，就不能使用 super 了。',charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"接口",frontmatter:{title:"接口",date:"2022-04-15T00:29:45.000Z",permalink:"/pages/df5260/",tags:[null]},regularPath:"/01.Java/05.Frank%20-%20Java%E4%B8%8E%E7%94%9F%E6%B4%BB/3.OOP%E4%B8%8B%E5%8D%8A%E9%83%A8%E5%88%86/06.%E6%8E%A5%E5%8F%A3.html",relativePath:"01.Java/05.Frank - Java与生活/3.OOP下半部分/06.接口.md",key:"v-3c56d5e0",path:"/pages/df5260/",headers:[{level:2,title:"Example",slug:"example",normalizedTitle:"example",charIndex:245},{level:3,title:"创建",slug:"创建",normalizedTitle:"创建",charIndex:257},{level:3,title:"实现",slug:"实现",normalizedTitle:"实现",charIndex:153},{level:3,title:"应用",slug:"应用",normalizedTitle:"应用",charIndex:966}],headersStr:"Example 创建 实现 应用",content:'# 接口 Interface\n\nhttps://www.runoob.com/java/java-interfaces.html\n\n吴俊笔记本：Java 接口\n\n接口也是抽象的，是对动作、行为的抽象。\n\n接口并不是类，编写接口的方式和类很相似，但是它们属于不同的概念。类描述对象的属性和方法。接口则包含类要实现的方法。\n\n接口可以实例化，但通常是为其建一个实现类。一个实现接口的类，必须实现接口内所描述的所有方法，否则就必须声明为抽象类。\n\n通常用于 Dao、service 等。\n\n\n# Example\n\n\n# 创建\n\n创建一个接口:\n\npublic interface HumanInterface {\n    public void eat();\n    public void walk();\n    // ...\n}\n\n\n1\n2\n3\n4\n5\n\n\n> 接口中所有的方法都是抽象的，所以就没必要为每个方法加 abstract 字段了。\n\n\n# 实现\n\n接口由类来实现，使用 implements 字段：\n\npublic class Chinese implements HumanInterface {\n    @Overide\n    public void eat(){\n        System.out.println("吃中餐")；\n    }\n    \n    @Overide\n    public void walk(){\n        System.out.println("小步走")；\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\npublic class Westerner implements HumanInterface {\n        @Overide\n    public void eat(){\n        System.out.println("吃西餐")；\n    }\n    \n    @Overide\n    public void walk(){\n        System.out.println("大步走")；\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n> 类必须“实现”（重写）接口的所有方法。\n\n\n# 应用\n\nmain()方法:\n\npublic class Application {\n    public static void main(String[] args) {\n        Chinese chinese = new Chinese();\n        chinese.eat();\n        chinese.walk();\n        \n        Westerner westerner = new Westerner();\n        westerner.eat();\n        westerner.walk();\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n> **接口跟抽象类一样，不能"new"对象。**那么哪个类实现了接口，就"new"哪个类。',normalizedContent:'# 接口 interface\n\nhttps://www.runoob.com/java/java-interfaces.html\n\n吴俊笔记本：java 接口\n\n接口也是抽象的，是对动作、行为的抽象。\n\n接口并不是类，编写接口的方式和类很相似，但是它们属于不同的概念。类描述对象的属性和方法。接口则包含类要实现的方法。\n\n接口可以实例化，但通常是为其建一个实现类。一个实现接口的类，必须实现接口内所描述的所有方法，否则就必须声明为抽象类。\n\n通常用于 dao、service 等。\n\n\n# example\n\n\n# 创建\n\n创建一个接口:\n\npublic interface humaninterface {\n    public void eat();\n    public void walk();\n    // ...\n}\n\n\n1\n2\n3\n4\n5\n\n\n> 接口中所有的方法都是抽象的，所以就没必要为每个方法加 abstract 字段了。\n\n\n# 实现\n\n接口由类来实现，使用 implements 字段：\n\npublic class chinese implements humaninterface {\n    @overide\n    public void eat(){\n        system.out.println("吃中餐")；\n    }\n    \n    @overide\n    public void walk(){\n        system.out.println("小步走")；\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\npublic class westerner implements humaninterface {\n        @overide\n    public void eat(){\n        system.out.println("吃西餐")；\n    }\n    \n    @overide\n    public void walk(){\n        system.out.println("大步走")；\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n> 类必须“实现”（重写）接口的所有方法。\n\n\n# 应用\n\nmain()方法:\n\npublic class application {\n    public static void main(string[] args) {\n        chinese chinese = new chinese();\n        chinese.eat();\n        chinese.walk();\n        \n        westerner westerner = new westerner();\n        westerner.eat();\n        westerner.walk();\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n> **接口跟抽象类一样，不能"new"对象。**那么哪个类实现了接口，就"new"哪个类。',charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"接口与抽象类",frontmatter:{title:"接口与抽象类",date:"2022-04-15T00:29:45.000Z",permalink:"/pages/12e264/",tags:[null]},regularPath:"/01.Java/05.Frank%20-%20Java%E4%B8%8E%E7%94%9F%E6%B4%BB/3.OOP%E4%B8%8B%E5%8D%8A%E9%83%A8%E5%88%86/07.%E6%8E%A5%E5%8F%A3%E4%B8%8E%E6%8A%BD%E8%B1%A1%E7%B1%BB.html",relativePath:"01.Java/05.Frank - Java与生活/3.OOP下半部分/07.接口与抽象类.md",key:"v-149f20b6",path:"/pages/12e264/",headersStr:null,content:"# 接口与抽象类\n\n * 抽象类是对具体事物**进行抽象。\n\n * 接口是对动作、行为进行抽象。\n\n所以，在对抽象类和接口命名的时候要多加注意。",normalizedContent:"# 接口与抽象类\n\n * 抽象类是对具体事物**进行抽象。\n\n * 接口是对动作、行为进行抽象。\n\n所以，在对抽象类和接口命名的时候要多加注意。",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"多态",frontmatter:{title:"多态",date:"2022-04-15T00:29:45.000Z",permalink:"/pages/d29b4b/",tags:[null]},regularPath:"/01.Java/05.Frank%20-%20Java%E4%B8%8E%E7%94%9F%E6%B4%BB/3.OOP%E4%B8%8B%E5%8D%8A%E9%83%A8%E5%88%86/08.%E5%A4%9A%E6%80%81.html",relativePath:"01.Java/05.Frank - Java与生活/3.OOP下半部分/08.多态.md",key:"v-34266b3a",path:"/pages/d29b4b/",headers:[{level:2,title:"Example：父类Father和其子类Son",slug:"example-父类father和其子类son",normalizedTitle:"example：父类father和其子类son",charIndex:9},{level:3,title:"向上转型",slug:"向上转型",normalizedTitle:"向上转型",charIndex:37},{level:3,title:"向下转型",slug:"向下转型",normalizedTitle:"向下转型",charIndex:223}],headersStr:"Example：父类Father和其子类Son 向上转型 向下转型",content:"# 多态\n\n\n# Example：父类Father和其子类Son\n\n\n# 向上转型\n\n“用父类去new子类”：\n\nFather father = new Son();\n\n\n1\n\n\n对象 father 实质上是由 Son 类创建的，却可以使用 Father 类的属性和方法。\n\n隐藏自己，就像吕子乔，每次出去泡妞的时候，都说自己是吕小布，类似的还有花木兰替父军。\n\n有一天，吕子乔遇到自己的心爱的人，花木兰的仗打完了，都要揭露自己的身份怎么办？\n\n向下转型！\n\n\n# 向下转型\n\n强制转换：\n\nSon son = (Son) father;\n\n\n1\n",normalizedContent:"# 多态\n\n\n# example：父类father和其子类son\n\n\n# 向上转型\n\n“用父类去new子类”：\n\nfather father = new son();\n\n\n1\n\n\n对象 father 实质上是由 son 类创建的，却可以使用 father 类的属性和方法。\n\n隐藏自己，就像吕子乔，每次出去泡妞的时候，都说自己是吕小布，类似的还有花木兰替父军。\n\n有一天，吕子乔遇到自己的心爱的人，花木兰的仗打完了，都要揭露自己的身份怎么办？\n\n向下转型！\n\n\n# 向下转型\n\n强制转换：\n\nson son = (son) father;\n\n\n1\n",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"匿名内部类",frontmatter:{title:"匿名内部类",date:"2022-04-15T00:29:45.000Z",permalink:"/pages/9f4e34/",tags:[null]},regularPath:"/01.Java/05.Frank%20-%20Java%E4%B8%8E%E7%94%9F%E6%B4%BB/3.OOP%E4%B8%8B%E5%8D%8A%E9%83%A8%E5%88%86/09.%E5%8C%BF%E5%90%8D%E5%86%85%E9%83%A8%E7%B1%BB.html",relativePath:"01.Java/05.Frank - Java与生活/3.OOP下半部分/09.匿名内部类.md",key:"v-9e70aada",path:"/pages/9f4e34/",headers:[{level:2,title:"Example：接口Human",slug:"example-接口human",normalizedTitle:"example：接口human",charIndex:27},{level:3,title:"定义一个接口 Human",slug:"定义一个接口-human",normalizedTitle:"定义一个接口 human",charIndex:47},{level:3,title:"内部类",slug:"内部类",normalizedTitle:"内部类",charIndex:4},{level:3,title:"匿名内部类",slug:"匿名内部类-2",normalizedTitle:"匿名内部类",charIndex:2}],headersStr:"Example：接口Human 定义一个接口 Human 内部类 匿名内部类",content:'# 匿名内部类\n\n匿名内部类通常用在接口上。\n\n\n# Example：接口Human\n\n\n# 定义一个接口 Human\n\npublic interface HumanInterface {\n    public void eat();\n    public void walk();\n}\n\n\n1\n2\n3\n4\n\n\n\n# 内部类\n\npublic class Application {\n    public static void main(String[] args) {\n        HumanInterface human = new HumanInterface() {\t\t// Look this line!\n            @Overide\n            public void eat() {\n            \tSystem.out.println("中国人吃中国菜");\n            }\n            @Overide\n            public void walk() {\n                System.out.println("中国人小步慢慢走");\n            }\n        };\t\t// 结尾有分号\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# 匿名内部类\n\npublic class Application {\n    public static void main(String[] args) {\n        new HumanInterface() {\t\t// Look this line!\n            @Overide\n            public void eat() {\n            \tSystem.out.println("中国人吃中国菜");\n            }\n            @Overide\n            public void walk() {\n                System.out.println("中国人小步慢慢走");\n            }\n        }.eat();\t\t// 可调用方法\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n',normalizedContent:'# 匿名内部类\n\n匿名内部类通常用在接口上。\n\n\n# example：接口human\n\n\n# 定义一个接口 human\n\npublic interface humaninterface {\n    public void eat();\n    public void walk();\n}\n\n\n1\n2\n3\n4\n\n\n\n# 内部类\n\npublic class application {\n    public static void main(string[] args) {\n        humaninterface human = new humaninterface() {\t\t// look this line!\n            @overide\n            public void eat() {\n            \tsystem.out.println("中国人吃中国菜");\n            }\n            @overide\n            public void walk() {\n                system.out.println("中国人小步慢慢走");\n            }\n        };\t\t// 结尾有分号\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# 匿名内部类\n\npublic class application {\n    public static void main(string[] args) {\n        new humaninterface() {\t\t// look this line!\n            @overide\n            public void eat() {\n            \tsystem.out.println("中国人吃中国菜");\n            }\n            @overide\n            public void walk() {\n                system.out.println("中国人小步慢慢走");\n            }\n        }.eat();\t\t// 可调用方法\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n',charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"权限修饰符",frontmatter:{title:"权限修饰符",date:"2022-04-15T00:29:45.000Z",permalink:"/pages/23f02d/",tags:[null]},regularPath:"/01.Java/05.Frank%20-%20Java%E4%B8%8E%E7%94%9F%E6%B4%BB/3.OOP%E4%B8%8B%E5%8D%8A%E9%83%A8%E5%88%86/10.%E6%9D%83%E9%99%90%E4%BF%AE%E9%A5%B0%E7%AC%A6.html",relativePath:"01.Java/05.Frank - Java与生活/3.OOP下半部分/10.权限修饰符.md",key:"v-32f6ed8a",path:"/pages/23f02d/",headersStr:null,content:"# 权限修饰符\n\nhttps://www.runoob.com/java/java-modifier-types.html\n\n也叫访问控制修饰符，Java 支持 4 种不同的访问权限。\n\n * default (即默认，什么也不写）: 在同一包内可见，不使用任何修饰符。使用对象：类、接口、变量、方法。\n * private : 在同一类内可见。使用对象：变量、方法。 注意：不能修饰类（外部类）\n * public : 对所有类可见。使用对象：类、接口、变量、方法\n * protected : 对同一包内的类和所有子类可见。使用对象：变量、方法。 注意：不能修饰类（外部类）。\n\n修饰符         当前类   同一包内   子孙类(同一包)   子孙类(不同包)   其他包\npublic      Y     Y      Y          Y          Y\nprotected   Y     Y      Y          Y/N（说明）    N\ndefault     Y     Y      Y          N          N\nprivate     Y     N      N          N          N",normalizedContent:"# 权限修饰符\n\nhttps://www.runoob.com/java/java-modifier-types.html\n\n也叫访问控制修饰符，java 支持 4 种不同的访问权限。\n\n * default (即默认，什么也不写）: 在同一包内可见，不使用任何修饰符。使用对象：类、接口、变量、方法。\n * private : 在同一类内可见。使用对象：变量、方法。 注意：不能修饰类（外部类）\n * public : 对所有类可见。使用对象：类、接口、变量、方法\n * protected : 对同一包内的类和所有子类可见。使用对象：变量、方法。 注意：不能修饰类（外部类）。\n\n修饰符         当前类   同一包内   子孙类(同一包)   子孙类(不同包)   其他包\npublic      y     y      y          y          y\nprotected   y     y      y          y/n（说明）    n\ndefault     y     y      y          n          n\nprivate     y     n      n          n          n",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Object类",frontmatter:{title:"Object类",date:"2022-04-15T00:29:45.000Z",permalink:"/pages/6de792/",tags:[null]},regularPath:"/01.Java/05.Frank%20-%20Java%E4%B8%8E%E7%94%9F%E6%B4%BB/3.OOP%E4%B8%8B%E5%8D%8A%E9%83%A8%E5%88%86/11.Object%E7%B1%BB.html",relativePath:"01.Java/05.Frank - Java与生活/3.OOP下半部分/11.Object类.md",key:"v-fec88e32",path:"/pages/6de792/",headersStr:null,content:"# Object类\n\nObject 类是Java中所有类的父类，包括你本人定义的类，它还有一个霸气的名字————超类。\n\n例如经常使用的 toString() 就是 Object 类中的一个方法。\n\n所以 toString() 方法上边都需要加一个 @Overide 注解来重写 Object 类中的 toString() 方法。",normalizedContent:"# object类\n\nobject 类是java中所有类的父类，包括你本人定义的类，它还有一个霸气的名字————超类。\n\n例如经常使用的 tostring() 就是 object 类中的一个方法。\n\n所以 tostring() 方法上边都需要加一个 @overide 注解来重写 object 类中的 tostring() 方法。",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Number & Math",frontmatter:{title:"Number & Math",date:"2022-09-22T17:50:57.000Z",permalink:"/pages/1cc427/",tags:[null]},regularPath:"/01.Java/06.Frank%20-%20Java%20API%E8%BF%9B%E9%98%B6/01.Base%20API/02.Number%20&%20Math.html",relativePath:"01.Java/06.Frank - Java API进阶/01.Base API/02.Number & Math.md",key:"v-8bfbf216",path:"/pages/1cc427/",headers:[{level:2,title:"包装类",slug:"包装类",normalizedTitle:"包装类",charIndex:2},{level:2,title:"java.lang.Number",slug:"java-lang-number",normalizedTitle:"java.lang.number",charIndex:317},{level:2,title:"java.lang.Math",slug:"java-lang-math",normalizedTitle:"java.lang.math",charIndex:447}],headersStr:"包装类 java.lang.Number java.lang.Math",content:"# 包装类\n\n> 在实际开发过程中，我们经常会遇到需要使用对象，而不是内置数据类型的情形。为了解决这个问题，Java 语言为每一个内置数据类型提供了对应的包装类。\n> \n> 包装类（Integer、Long、Byte、Double、Float、Short）都是抽象类 Number 的子类。Boolean、Character 为 Object 的子类。\n> \n> 当内置数据类型被当作对象使用的时候，编译器会把内置类型装箱为包装类。相似的，编译器也可以把一个对象拆箱为内置类型。Number 类属于 java.lang 包。\n> \n> https://www.runoob.com/java/java-number.html\n\n\n# java.lang.Number\n\nint x = 1;\nInteger y = 2;\n\n\n1\n2\n\n\nx为原始数据类型，无方法调用。\n\ny为一个包装类对象，可调用方法。\n\nSystem.out.println(y.hashCode());\n\n\n1\n\n\n\n# java.lang.Math\n\njava.lang.Math类下的方法基本都是 static。不用 new 对象，直接就可以调用方法。\n\n> 打一个比方，Math类就相当于你家里的工具箱，你爸让你把螺丝刀递给他（假如他需要比较两个数找到小的那一个）\n> \n> 你说：“爸，你等一下，我去五金店买一个新的来（我先 new 一个对象）。”\n> \n> 你爸：你傻逼吧，工具箱里不是有吗。\n> \n> 你爸说完就从工具箱（Math）里拿了把螺丝刀（min()）出来（Math.min()）\n\nint minNu = Math.min(number1, number2);\n\n\n1\n\n\n所以 Math 就是一个工具类。\n\n> 如果，点到min()方法下面看它的源码。你会发现人家写的源码，多标准，多简洁。\n\npublic static int min(int a, int b) {\n    return (a <= b) ? a : b;\n}\n\n\n1\n2\n3\n\n\n> 另一个返回double类型的方法 Math.min() 又多了两个严谨（浮点数有关）的 if 判断。看人家这代码~\n\npublic static double min(double a, double b) {\n    if (a != a)\n        return a;   // a is NaN\n    if ((a == 0.0d) &&\n        (b == 0.0d) &&\n        (Double.doubleToRawLongBits(b) == negativeZeroDoubleBits)) {\n        // Raw conversion ok since NaN can't map to -0.0.\n        return b;\n    }\n    return (a <= b) ? a : b;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n> 如果是你来写，你可能会写成下面这样 ... 而人家一行搞定 😃\n\nif (a <= b) {\n    return a;\n} else {\n    return b;\n}\n\n\n1\n2\n3\n4\n5\n",normalizedContent:"# 包装类\n\n> 在实际开发过程中，我们经常会遇到需要使用对象，而不是内置数据类型的情形。为了解决这个问题，java 语言为每一个内置数据类型提供了对应的包装类。\n> \n> 包装类（integer、long、byte、double、float、short）都是抽象类 number 的子类。boolean、character 为 object 的子类。\n> \n> 当内置数据类型被当作对象使用的时候，编译器会把内置类型装箱为包装类。相似的，编译器也可以把一个对象拆箱为内置类型。number 类属于 java.lang 包。\n> \n> https://www.runoob.com/java/java-number.html\n\n\n# java.lang.number\n\nint x = 1;\ninteger y = 2;\n\n\n1\n2\n\n\nx为原始数据类型，无方法调用。\n\ny为一个包装类对象，可调用方法。\n\nsystem.out.println(y.hashcode());\n\n\n1\n\n\n\n# java.lang.math\n\njava.lang.math类下的方法基本都是 static。不用 new 对象，直接就可以调用方法。\n\n> 打一个比方，math类就相当于你家里的工具箱，你爸让你把螺丝刀递给他（假如他需要比较两个数找到小的那一个）\n> \n> 你说：“爸，你等一下，我去五金店买一个新的来（我先 new 一个对象）。”\n> \n> 你爸：你傻逼吧，工具箱里不是有吗。\n> \n> 你爸说完就从工具箱（math）里拿了把螺丝刀（min()）出来（math.min()）\n\nint minnu = math.min(number1, number2);\n\n\n1\n\n\n所以 math 就是一个工具类。\n\n> 如果，点到min()方法下面看它的源码。你会发现人家写的源码，多标准，多简洁。\n\npublic static int min(int a, int b) {\n    return (a <= b) ? a : b;\n}\n\n\n1\n2\n3\n\n\n> 另一个返回double类型的方法 math.min() 又多了两个严谨（浮点数有关）的 if 判断。看人家这代码~\n\npublic static double min(double a, double b) {\n    if (a != a)\n        return a;   // a is nan\n    if ((a == 0.0d) &&\n        (b == 0.0d) &&\n        (double.doubletorawlongbits(b) == negativezerodoublebits)) {\n        // raw conversion ok since nan can't map to -0.0.\n        return b;\n    }\n    return (a <= b) ? a : b;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n> 如果是你来写，你可能会写成下面这样 ... 而人家一行搞定 😃\n\nif (a <= b) {\n    return a;\n} else {\n    return b;\n}\n\n\n1\n2\n3\n4\n5\n",charsets:{cjk:!0},lastUpdated:"2022/10/04, 21:45:45",lastUpdatedTimestamp:1664891145e3},{title:"Java API定义和用处",frontmatter:{title:"Java API定义和用处",date:"2022-09-22T16:44:23.000Z",permalink:"/pages/e6a4f1/",tags:[null]},regularPath:"/01.Java/06.Frank%20-%20Java%20API%E8%BF%9B%E9%98%B6/01.Base%20API/01.Java%20API%E5%AE%9A%E4%B9%89%E5%92%8C%E7%94%A8%E5%A4%84.html",relativePath:"01.Java/06.Frank - Java API进阶/01.Base API/01.Java API定义和用处.md",key:"v-139d165e",path:"/pages/e6a4f1/",headers:[{level:2,title:"API",slug:"api",normalizedTitle:"api",charIndex:2},{level:2,title:"Java API",slug:"java-api",normalizedTitle:"java api",charIndex:648}],headersStr:"API Java API",content:"# API\n\nAPI（Application Programming Interface） 即应用程序接口。\n\nAPI 就是给客户或者开发人员用的。它的目的是方便程序员去开发“更高级的功能”。\n\n只要有 API，就有与之对应的 API 文档。只要把 API 文档搞透彻了，就会发现那些所谓的高级功能也不过是 API。\n\n> 在学习编程的过程中，根据基础的教程或课程入门之后并不代表着我们就是一个初级且合格的程序员了。我们首先就应该成为一个 API 工程师和调包侠。\n> \n> 所谓的 API（Application Programming Interface）就是你所使用的编程语言里都内置了哪些基本的函数、方法；而调包（或库，Library）即调用别人写好的包或库来编程之意。如果你有经常看各种初级的编程书籍或者教程就会发现，当中的大部分内容不是在讲原理和实现，而是在讲如何用这些基本的 API 或者常用库！\n> \n> 因为无论是初级、中级还是高级的工程师或程序员，对于各种基本的 API 和常用的内置库或第三方库的使用都是信手拈来，这些东西就好比是刀具、锅铲和调味料，它是我们构建一个程序的起点。能将这些基本的 API 和库用熟练或操作了，那就说明用来创造的工具已经玩熟了，剩下的就需要我们在实际项目中像乐高积木一样发挥想象力来将它们组合在一块。\n> \n> 节选自少数派文章(https://sspai.com/prime/story/vol03-becoming-a-coder)\n\n\n# Java API\n\nJava API 即给 Java 开发人员用的应用程序接口。\n\n> Frank 看似是带着我们去学 Java API，其实是在传授给我们一套学习的方法：怎么样看文档、看源码，怎么样使用搜索引擎等等。",normalizedContent:"# api\n\napi（application programming interface） 即应用程序接口。\n\napi 就是给客户或者开发人员用的。它的目的是方便程序员去开发“更高级的功能”。\n\n只要有 api，就有与之对应的 api 文档。只要把 api 文档搞透彻了，就会发现那些所谓的高级功能也不过是 api。\n\n> 在学习编程的过程中，根据基础的教程或课程入门之后并不代表着我们就是一个初级且合格的程序员了。我们首先就应该成为一个 api 工程师和调包侠。\n> \n> 所谓的 api（application programming interface）就是你所使用的编程语言里都内置了哪些基本的函数、方法；而调包（或库，library）即调用别人写好的包或库来编程之意。如果你有经常看各种初级的编程书籍或者教程就会发现，当中的大部分内容不是在讲原理和实现，而是在讲如何用这些基本的 api 或者常用库！\n> \n> 因为无论是初级、中级还是高级的工程师或程序员，对于各种基本的 api 和常用的内置库或第三方库的使用都是信手拈来，这些东西就好比是刀具、锅铲和调味料，它是我们构建一个程序的起点。能将这些基本的 api 和库用熟练或操作了，那就说明用来创造的工具已经玩熟了，剩下的就需要我们在实际项目中像乐高积木一样发挥想象力来将它们组合在一块。\n> \n> 节选自少数派文章(https://sspai.com/prime/story/vol03-becoming-a-coder)\n\n\n# java api\n\njava api 即给 java 开发人员用的应用程序接口。\n\n> frank 看似是带着我们去学 java api，其实是在传授给我们一套学习的方法：怎么样看文档、看源码，怎么样使用搜索引擎等等。",charsets:{cjk:!0},lastUpdated:"2022/10/04, 21:45:45",lastUpdatedTimestamp:1664891145e3},{title:"Random",frontmatter:{title:"Random",date:"2022-09-25T15:46:28.000Z",permalink:"/pages/3012e2/",tags:[null]},regularPath:"/01.Java/06.Frank%20-%20Java%20API%E8%BF%9B%E9%98%B6/01.Base%20API/03.Random.html",relativePath:"01.Java/06.Frank - Java API进阶/01.Base API/03.Random.md",key:"v-438b1d09",path:"/pages/3012e2/",headers:[{level:2,title:"种子(seed)？",slug:"种子-seed",normalizedTitle:"种子(seed)？",charIndex:482},{level:2,title:"不便之处（Random类无可指定范围的方法）",slug:"不便之处-random类无可指定范围的方法",normalizedTitle:"不便之处（random类无可指定范围的方法）",charIndex:704},{level:3,title:"Math.random()乘法方式",slug:"math-random-乘法方式",normalizedTitle:"math.random()乘法方式",charIndex:826},{level:3,title:"ThreadLocalRandom 方式",slug:"threadlocalrandom-方式",normalizedTitle:"threadlocalrandom 方式",charIndex:1051}],headersStr:"种子(seed)？ 不便之处（Random类无可指定范围的方法） Math.random()乘法方式 ThreadLocalRandom 方式",content:"java.lang.Object\n\tjava.util.Random\n\t\tjava.security.SecureRandom\n\t\tjava.util.concurrent.ThreadLocalRandom\n\n\n1\n2\n3\n4\n\n\njava.util.Random\n\n> An instance of this class is used to generate a stream of pseudorandom numbers.\n\njava.security.SecureRandom\n\n> This class provides a cryptographically strong random number generator (RNG).\n\njava.util.concurrent.ThreadLocalRandom\n\n> A random number generator isolated to the current thread.\n\nRandom 具有两个构造器：\n\n * Random()\n * Random(long seed)\n\n\n# 种子(seed)？\n\nseed 即生成伪随机数算法的初始值。算法根据这个初始值来生成伪随机数。\n\n> A random seed (or seed state, or just seed) is a number (or vector) used to initialize a pseudorandom number generator.\n> \n> https://en.wikipedia.org/wiki/Random_seed\n\n\n# 不便之处（Random类无可指定范围的方法）\n\n由于 Random 类不具有生成指定范围随机数的方法（除了一个nextInt(int bound)可生成从0到bound范围的随机数），这就有点不太方便了。\n\n> Java中的隨機數生成\n\n\n# Math.random()乘法方式\n\nint max = 100;\nint min = 0;\n\n\n1\n2\n\n\n指定范围的随机浮点数：\n\ndouble randomDouble = (Math.random() * ((max - min) + 1)) + min;\n\n\n1\n\n\n指定范围的随机整数：\n\nint randomInt = (int) (Math.random() * ((max - min) + 1)) + min;\n\n\n1\n\n\n\n# ThreadLocalRandom 方式\n\njava.util.concurrent.ThreadLocalRandom 为 java.util.Random 子类。该类具有可指定范围的生成随机数方法。\n\n>  * nextDouble(double bound) 范围从0到bound\n>  * nextDouble(double origin, double bound)范围从origin到bound\n>  * nextInt(int bound) 范围从0到bound\n>  * nextInt(int origin, double bound) 范围从origin到bound\n>  * ...\n\ndouble randomDouble = ThreadLocalRandom.current().nextDouble(0.9, 1.5);\n\nint randomLong = ThreadLocalRandom.current().nextLong(500000000000, 1000000000000);\n\n\n1\n2\n3\n\n\n注意\n\nThreadLocalRandom 是为线程而生的，所以要使用它的方法也就要遵从它的方式。该类的方法均通过它的一个静态方法current()来调用。\n\n> 有意思的是，在IDE里面点到nextDouble(Double origin, Double bound)的源码会发现算法和上面的Math.random()乘法方式是一样的。所以",normalizedContent:"java.lang.object\n\tjava.util.random\n\t\tjava.security.securerandom\n\t\tjava.util.concurrent.threadlocalrandom\n\n\n1\n2\n3\n4\n\n\njava.util.random\n\n> an instance of this class is used to generate a stream of pseudorandom numbers.\n\njava.security.securerandom\n\n> this class provides a cryptographically strong random number generator (rng).\n\njava.util.concurrent.threadlocalrandom\n\n> a random number generator isolated to the current thread.\n\nrandom 具有两个构造器：\n\n * random()\n * random(long seed)\n\n\n# 种子(seed)？\n\nseed 即生成伪随机数算法的初始值。算法根据这个初始值来生成伪随机数。\n\n> a random seed (or seed state, or just seed) is a number (or vector) used to initialize a pseudorandom number generator.\n> \n> https://en.wikipedia.org/wiki/random_seed\n\n\n# 不便之处（random类无可指定范围的方法）\n\n由于 random 类不具有生成指定范围随机数的方法（除了一个nextint(int bound)可生成从0到bound范围的随机数），这就有点不太方便了。\n\n> java中的隨機數生成\n\n\n# math.random()乘法方式\n\nint max = 100;\nint min = 0;\n\n\n1\n2\n\n\n指定范围的随机浮点数：\n\ndouble randomdouble = (math.random() * ((max - min) + 1)) + min;\n\n\n1\n\n\n指定范围的随机整数：\n\nint randomint = (int) (math.random() * ((max - min) + 1)) + min;\n\n\n1\n\n\n\n# threadlocalrandom 方式\n\njava.util.concurrent.threadlocalrandom 为 java.util.random 子类。该类具有可指定范围的生成随机数方法。\n\n>  * nextdouble(double bound) 范围从0到bound\n>  * nextdouble(double origin, double bound)范围从origin到bound\n>  * nextint(int bound) 范围从0到bound\n>  * nextint(int origin, double bound) 范围从origin到bound\n>  * ...\n\ndouble randomdouble = threadlocalrandom.current().nextdouble(0.9, 1.5);\n\nint randomlong = threadlocalrandom.current().nextlong(500000000000, 1000000000000);\n\n\n1\n2\n3\n\n\n注意\n\nthreadlocalrandom 是为线程而生的，所以要使用它的方法也就要遵从它的方式。该类的方法均通过它的一个静态方法current()来调用。\n\n> 有意思的是，在ide里面点到nextdouble(double origin, double bound)的源码会发现算法和上面的math.random()乘法方式是一样的。所以",charsets:{cjk:!0},lastUpdated:"2022/10/04, 21:45:45",lastUpdatedTimestamp:1664891145e3},{title:"Date & Calendar",frontmatter:{title:"Date & Calendar",date:"2022-09-28T17:49:31.000Z",permalink:"/pages/5d3f0d/",tags:[null]},regularPath:"/01.Java/06.Frank%20-%20Java%20API%E8%BF%9B%E9%98%B6/01.Base%20API/04.Date%20&%20Calendar.html",relativePath:"01.Java/06.Frank - Java API进阶/01.Base API/04.Date & Calendar.md",key:"v-bfe359e2",path:"/pages/5d3f0d/",headers:[{level:2,title:"Timestamp (Unix Time)",slug:"timestamp-unix-time",normalizedTitle:"timestamp (unix time)",charIndex:2},{level:2,title:"Date",slug:"date",normalizedTitle:"date",charIndex:52},{level:2,title:"格式化日期 DateFormat",slug:"格式化日期-dateformat",normalizedTitle:"格式化日期 dateformat",charIndex:649},{level:2,title:"Calendar",slug:"calendar",normalizedTitle:"calendar",charIndex:111}],headersStr:"Timestamp (Unix Time) Date 格式化日期 DateFormat Calendar",content:'# Timestamp (Unix Time)\n\n> 当前 Unix 时间 （time.is）\n\n\n# Date\n\n> Java 11 API - Date\n\nData 这个类里面的构造器、方法基本都过时了。官方推荐使用 Calendar (抽象类)作为替代。\n\nSystem.out.println(new Date());\n\n\n1\n\n\n> 打印结果类似于：“Thu Sep 29 16:38:03 CST 2022”。\n> \n> 当然new java.util.Date()是一个对象，它不可能长这样。这里“打印一个对象”利用的是toString()方法。\n> \n> java.util.Date()自带了一个toString()方法。\n\nSystem.out.println(new Date(1664440683L * 1000));  // Thu Sep 29 16:38:03 CST 2022\n\n\n1\n\n\n提示\n\nDate(long date) 可接受一个指定时间的参数。如果是 date 传的是 Unix 时间，则需要乘以 1000。这是因为 date 参数以毫秒（millisecond）为单位。\n\n使用 System.currentTimeMillis() 获取当前时间：\n\nSystem.out.println(new Date(System.currentTimeMillis()));  // Sat Oct 01 11:40:38 CST 2022\n\n\n1\n\n\n\n# 格式化日期 DateFormat\n\n利用抽象类java.text.DateFormat的子类java.text.SimpleDateFormat来对日期格式化。\n\n> Java 11 API - SimpleDateFormat\n\nDate date = new Date(1664440683L * 1000);\n\nDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");\n\nSystem.out.println(dateFormat.format(date));\n\n\n1\n2\n3\n4\n5\n\n\n2022-09-29 16:38:03\n\n\n1\n\n\n\n# Calendar\n\n> Java 11 API - Calendar\n\nCalendar 抽象类提供很多获取和设置时间的静态的日历字段（calendar field）。并且提供一个类方法（Calendar.getInstance()）来生成一个实例（单例）。\n\nCalendar rightNow = Calendar.getInstance();  // rightNow 对象表示当前时间\n\n\n1\n\n\n> Calendar的 getInstance() 方法返回一个Calendar对象，该对象的Calendar字段已使用当前日期和时间进行初始化。也可以通过\n\nint year = rightNow.get(Calendar.YEAR);            // 年\nint month = rightNow.get(Calendar.MONTH) + 1;       // 月\nint dayOfMonth = rightNow.get(Calendar.DAY_OF_MONTH);    // 日\n\nSystem.out.printf("%d/%d/%d", year, month, dayOfMonth);  // 2022/9/30\n\nint hour = rightNow.get(Calendar.HOUR); // 当前在哪个小时 - 12小时制\nint hourOfDay = rightNow.get(Calendar.HOUR_OF_DAY);  // 当前在哪个小时 - 24小时制\nint date = rightNow.get(Calendar.DATE);  // 当前月的天数\nint dayOfWeek = rightNow.get(Calendar.DAY_OF_WEEK);  // 今天是周几\nint dayOfYear = rightNow.get(Calendar.DAY_OF_YEAR);  // 今天是这一年的哪一天\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n提示\n\n注意 Calendar.MONTH 通常需要 +1。因为它是从 0 起始的，而像 Calendar.YEAR 或 Calendar.DAY_OF_MONTH 则不用 +1。\n\nMONTH 从 0 起始的原因可能是一个古老的问题，详见"你绝对想不到为什么计算月份是从 0 开始计数"\n\nget() 方法返回给定calendar field的值。\n\n使用 set() 方法设定日期：\n\nrightNow.set(1314, 4, 20);  // 月份会给出警告并建议以类似 Calendar.MAY 这样的字段形式表示\n\nint year = rightNow.get(Calendar.YEAR);            // 年\nint month = rightNow.get(Calendar.MONTH) + 1;       // 月（注意是 +1 了的）\nint dayOfMonth = rightNow.get(Calendar.DAY_OF_MONTH);    // 日\n\nSystem.out.printf("%d/%d/%d\\n", year, month, dayOfMonth);  // 2022/9/30\nSystem.out.println(rightNow);\t// toString()\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n注意\n\n再次强调：当可以直接使用 System.out.println() 函数直接打印一个对象的时候，这个对象的类往往是具有 toString() 方法的\n\n1314/5/20\njava.util.GregorianCalendar[time=-20688598039456,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id="Asia/Shanghai",offset=28800000,dstSavings=0,useDaylight=false,transitions=31,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1314,MONTH=4,WEEK_OF_YEAR=21,WEEK_OF_MONTH=4,DAY_OF_MONTH=20,DAY_OF_YEAR=140,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=12,SECOND=40,MILLISECOND=544,ZONE_OFFSET=28800000,DST_OFFSET=0]\n\n\n1\n2\n',normalizedContent:'# timestamp (unix time)\n\n> 当前 unix 时间 （time.is）\n\n\n# date\n\n> java 11 api - date\n\ndata 这个类里面的构造器、方法基本都过时了。官方推荐使用 calendar (抽象类)作为替代。\n\nsystem.out.println(new date());\n\n\n1\n\n\n> 打印结果类似于：“thu sep 29 16:38:03 cst 2022”。\n> \n> 当然new java.util.date()是一个对象，它不可能长这样。这里“打印一个对象”利用的是tostring()方法。\n> \n> java.util.date()自带了一个tostring()方法。\n\nsystem.out.println(new date(1664440683l * 1000));  // thu sep 29 16:38:03 cst 2022\n\n\n1\n\n\n提示\n\ndate(long date) 可接受一个指定时间的参数。如果是 date 传的是 unix 时间，则需要乘以 1000。这是因为 date 参数以毫秒（millisecond）为单位。\n\n使用 system.currenttimemillis() 获取当前时间：\n\nsystem.out.println(new date(system.currenttimemillis()));  // sat oct 01 11:40:38 cst 2022\n\n\n1\n\n\n\n# 格式化日期 dateformat\n\n利用抽象类java.text.dateformat的子类java.text.simpledateformat来对日期格式化。\n\n> java 11 api - simpledateformat\n\ndate date = new date(1664440683l * 1000);\n\ndateformat dateformat = new simpledateformat("yyyy-mm-dd hh:mm:ss");\n\nsystem.out.println(dateformat.format(date));\n\n\n1\n2\n3\n4\n5\n\n\n2022-09-29 16:38:03\n\n\n1\n\n\n\n# calendar\n\n> java 11 api - calendar\n\ncalendar 抽象类提供很多获取和设置时间的静态的日历字段（calendar field）。并且提供一个类方法（calendar.getinstance()）来生成一个实例（单例）。\n\ncalendar rightnow = calendar.getinstance();  // rightnow 对象表示当前时间\n\n\n1\n\n\n> calendar的 getinstance() 方法返回一个calendar对象，该对象的calendar字段已使用当前日期和时间进行初始化。也可以通过\n\nint year = rightnow.get(calendar.year);            // 年\nint month = rightnow.get(calendar.month) + 1;       // 月\nint dayofmonth = rightnow.get(calendar.day_of_month);    // 日\n\nsystem.out.printf("%d/%d/%d", year, month, dayofmonth);  // 2022/9/30\n\nint hour = rightnow.get(calendar.hour); // 当前在哪个小时 - 12小时制\nint hourofday = rightnow.get(calendar.hour_of_day);  // 当前在哪个小时 - 24小时制\nint date = rightnow.get(calendar.date);  // 当前月的天数\nint dayofweek = rightnow.get(calendar.day_of_week);  // 今天是周几\nint dayofyear = rightnow.get(calendar.day_of_year);  // 今天是这一年的哪一天\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n提示\n\n注意 calendar.month 通常需要 +1。因为它是从 0 起始的，而像 calendar.year 或 calendar.day_of_month 则不用 +1。\n\nmonth 从 0 起始的原因可能是一个古老的问题，详见"你绝对想不到为什么计算月份是从 0 开始计数"\n\nget() 方法返回给定calendar field的值。\n\n使用 set() 方法设定日期：\n\nrightnow.set(1314, 4, 20);  // 月份会给出警告并建议以类似 calendar.may 这样的字段形式表示\n\nint year = rightnow.get(calendar.year);            // 年\nint month = rightnow.get(calendar.month) + 1;       // 月（注意是 +1 了的）\nint dayofmonth = rightnow.get(calendar.day_of_month);    // 日\n\nsystem.out.printf("%d/%d/%d\\n", year, month, dayofmonth);  // 2022/9/30\nsystem.out.println(rightnow);\t// tostring()\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n注意\n\n再次强调：当可以直接使用 system.out.println() 函数直接打印一个对象的时候，这个对象的类往往是具有 tostring() 方法的\n\n1314/5/20\njava.util.gregoriancalendar[time=-20688598039456,arefieldsset=true,areallfieldsset=true,lenient=true,zone=sun.util.calendar.zoneinfo[id="asia/shanghai",offset=28800000,dstsavings=0,usedaylight=false,transitions=31,lastrule=null],firstdayofweek=1,minimaldaysinfirstweek=1,era=1,year=1314,month=4,week_of_year=21,week_of_month=4,day_of_month=20,day_of_year=140,day_of_week=2,day_of_week_in_month=3,am_pm=1,hour=11,hour_of_day=23,minute=12,second=40,millisecond=544,zone_offset=28800000,dst_offset=0]\n\n\n1\n2\n',charsets:{cjk:!0},lastUpdated:"2022/10/04, 21:45:45",lastUpdatedTimestamp:1664891145e3},{title:"System",frontmatter:{title:"System",date:"2022-10-01T11:25:28.000Z",permalink:"/pages/e07d0f/",tags:[null]},regularPath:"/01.Java/06.Frank%20-%20Java%20API%E8%BF%9B%E9%98%B6/01.Base%20API/05.System.html",relativePath:"01.Java/06.Frank - Java API进阶/01.Base API/05.System.md",key:"v-19a77e49",path:"/pages/e07d0f/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/10/04, 21:45:45",lastUpdatedTimestamp:1664891145e3},{title:"Junit、单元测试的含义和用途",frontmatter:{title:"Junit、单元测试的含义和用途",date:"2022-10-22T20:34:12.000Z",permalink:"/pages/cdc393/",tags:[null]},regularPath:"/01.Java/06.Frank%20-%20Java%20API%E8%BF%9B%E9%98%B6/02.Unit%20Test%20and%20Main%20function/01.JUnit%E3%80%81%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E7%9A%84%E5%90%AB%E4%B9%89%E5%92%8C%E7%94%A8%E9%80%94.html",relativePath:"01.Java/06.Frank - Java API进阶/02.Unit Test and Main function/01.JUnit、单元测试的含义和用途.md",key:"v-7e063df7",path:"/pages/cdc393/",headers:[{level:2,title:"单元测试",slug:"单元测试",normalizedTitle:"单元测试",charIndex:2},{level:2,title:"JUnit",slug:"junit",normalizedTitle:"junit",charIndex:387}],headersStr:"单元测试 JUnit",content:"# 单元测试\n\n> 在计算机编程中，单元测试（英语：Unit Testing）又称为模块测试，是针对程序模块（软件设计的最小单位）来进行正确性检验的测试工作。\n> \n> 在过程化编程中，一个单元就是单个程序、函数、过程等；对于面向对象编程，最小单元就是方法，包括基类（超类）、抽象类、或者派生类（子类）中的方法。\n> \n> 维基百科：单元测试\n\n根据维基百科上的说法，单元指的就是方法（函数）。可想而知，单元测试就是针对方法（函数）的测试方式。这样的测试方式和以往在 main 方法中测试是截然不同的。\n\n * 可以同时针对多个单元进行测试，也可单独测试一个单元。\n\n * 测试部分独立于被测试部分。\n\n * 单元测试是给程序员用的。\n\n * 单元测试不是必须的，但也不坏。\n\n> 单元测试通常由软件开发人员编写，用于确保他们所写的代码符合软件需求和遵循开发目标。\n\n\n# JUnit\n\n简单来说，JUnit 就是一个Java语言的单元测试框架。\n\n> JUnit 5 简介 - 吴俊笔记本",normalizedContent:"# 单元测试\n\n> 在计算机编程中，单元测试（英语：unit testing）又称为模块测试，是针对程序模块（软件设计的最小单位）来进行正确性检验的测试工作。\n> \n> 在过程化编程中，一个单元就是单个程序、函数、过程等；对于面向对象编程，最小单元就是方法，包括基类（超类）、抽象类、或者派生类（子类）中的方法。\n> \n> 维基百科：单元测试\n\n根据维基百科上的说法，单元指的就是方法（函数）。可想而知，单元测试就是针对方法（函数）的测试方式。这样的测试方式和以往在 main 方法中测试是截然不同的。\n\n * 可以同时针对多个单元进行测试，也可单独测试一个单元。\n\n * 测试部分独立于被测试部分。\n\n * 单元测试是给程序员用的。\n\n * 单元测试不是必须的，但也不坏。\n\n> 单元测试通常由软件开发人员编写，用于确保他们所写的代码符合软件需求和遵循开发目标。\n\n\n# junit\n\n简单来说，junit 就是一个java语言的单元测试框架。\n\n> junit 5 简介 - 吴俊笔记本",charsets:{cjk:!0},lastUpdated:"2022/12/03, 17:31:39",lastUpdatedTimestamp:1670059899e3},{title:"Maven repository 获取 JAR",frontmatter:{title:"Maven repository 获取 JAR",date:"2022-10-23T18:03:02.000Z",permalink:"/pages/b0c959/",tags:[null]},regularPath:"/01.Java/06.Frank%20-%20Java%20API%E8%BF%9B%E9%98%B6/02.Unit%20Test%20and%20Main%20function/02.Maven%20repository%20%E8%8E%B7%E5%8F%96%20Jar.html",relativePath:"01.Java/06.Frank - Java API进阶/02.Unit Test and Main function/02.Maven repository 获取 Jar.md",key:"v-3dc1be9e",path:"/pages/b0c959/",headers:[{level:2,title:"下载 JUnit 4 JAR包",slug:"下载-junit-4-jar包",normalizedTitle:"下载 junit 4 jar包",charIndex:2},{level:2,title:"导入 IDEA Project",slug:"导入-idea-project",normalizedTitle:"导入 idea project",charIndex:79}],headersStr:"下载 JUnit 4 JAR包 导入 IDEA Project",content:"# 下载 JUnit 4 JAR包\n\n * Maven 仓库搜索 JUnit\n * 进入 JUnit 页面，选择最新版本\n * 下载 .jar 文件\n\n\n# 导入 IDEA Project\n\n * 将 .jar 文件拖入 IDEA 的 Project lib 目录下\n * 右键 .jar 文件，选择 As a library\n\n提示\n\n关于寻找 JAR 包：不要去百度什么什么 JAR 包，直接上 Maven Repository 这个网站上搜。\n\n提示\n\n菜鸟儿老老实实下载 Jar 包。要使用 Maven、Gradle 这些 Build 工具还得再上一个 Level。\n\n提示\n\n注意 Maven 仓库的这个 JUnit 页面的红色提示框。说明 JUnit 5 已经转移到了 JUnit Jupiter API 页面下。JUnit 5 另有一套导入方式，本页面的导入方式不适用于 JUnit 5。",normalizedContent:"# 下载 junit 4 jar包\n\n * maven 仓库搜索 junit\n * 进入 junit 页面，选择最新版本\n * 下载 .jar 文件\n\n\n# 导入 idea project\n\n * 将 .jar 文件拖入 idea 的 project lib 目录下\n * 右键 .jar 文件，选择 as a library\n\n提示\n\n关于寻找 jar 包：不要去百度什么什么 jar 包，直接上 maven repository 这个网站上搜。\n\n提示\n\n菜鸟儿老老实实下载 jar 包。要使用 maven、gradle 这些 build 工具还得再上一个 level。\n\n提示\n\n注意 maven 仓库的这个 junit 页面的红色提示框。说明 junit 5 已经转移到了 junit jupiter api 页面下。junit 5 另有一套导入方式，本页面的导入方式不适用于 junit 5。",charsets:{cjk:!0},lastUpdated:"2022/12/03, 17:31:39",lastUpdatedTimestamp:1670059899e3},{title:"抛出企业问题，脱离main测试，模块化概念抛出",frontmatter:{title:"抛出企业问题，脱离main测试，模块化概念抛出",date:"2022-10-22T17:26:45.000Z",permalink:"/pages/0418c9/",tags:[null]},regularPath:"/01.Java/06.Frank%20-%20Java%20API%E8%BF%9B%E9%98%B6/02.Unit%20Test%20and%20Main%20function/00.%E6%8A%9B%E5%87%BA%E4%BC%81%E4%B8%9A%E9%97%AE%E9%A2%98%EF%BC%8C%E8%84%B1%E7%A6%BBmain%E6%B5%8B%E8%AF%95%EF%BC%8C%E6%A8%A1%E5%9D%97%E5%8C%96%E6%A6%82%E5%BF%B5%E6%8A%9B%E5%87%BA.html",relativePath:"01.Java/06.Frank - Java API进阶/02.Unit Test and Main function/00.抛出企业问题，脱离main测试，模块化概念抛出.md",key:"v-5155ca36",path:"/pages/0418c9/",headers:[{level:2,title:"两个以往的问题",slug:"两个以往的问题",normalizedTitle:"两个以往的问题",charIndex:2},{level:2,title:"以往的测试方式",slug:"以往的测试方式",normalizedTitle:"以往的测试方式",charIndex:73},{level:2,title:"main 方法不是处理逻辑的地儿",slug:"main-方法不是处理逻辑的地儿",normalizedTitle:"main 方法不是处理逻辑的地儿",charIndex:262},{level:2,title:"模块化",slug:"模块化",normalizedTitle:"模块化",charIndex:454}],headersStr:"两个以往的问题 以往的测试方式 main 方法不是处理逻辑的地儿 模块化",content:'# 两个以往的问题\n\n 1. 在 main 方法中测试\n 2. 将逻辑代码放在 main 方法中\n\n现在，我们应该摒弃这个两个“习惯”。\n\n\n# 以往的测试方式\n\n在 main 方法中测试\n\n 1. 编写函数（方法）\n 2. 在 main 中调用该函数\n 3. 肉眼查看输出，检查是否符合预期结果\n\n注意，预期结果是由人工计算的。当预期结果不能由人来计算的时候，怎样验证程序结果是正确的？\n\n我想这个问题的答案很容易就能想到。既然人计算不了了，那就交给代码呗。关键还不是这个。关键是不应该在 main() 中测试。\n\n\n# main 方法不是处理逻辑的地儿\n\nmain 方法就是整个程序的入口，而不是处理逻辑（完成功能）的地儿。\n\nmain 方法里面不应该有大量的逻辑性的代码（功能性的代码）。这些逻辑代码应该从 main 中脱离出来变成复用性很强的函数（方法），然后由 main 或其它函数来调用。\n\n你会发现很多nb的框架，main 里边儿就一行代码（比如 runApplication()）。\n\n\n# 模块化\n\npublic class Run {\n    public static void main(String[] args) {\n        run();\n    }\n    \n    public static void sayHello() { System.out.println("Hello!"); }\n    \n    public static void run() {\n    \tsayHello();\n        \n        // ...\n        // ...\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n要将代码模块化很不容易，甚至可能遇到很多问题。\n\n注意\n\n但是，遇到问题肯定是你技术学得不行！记住我说的这句话。——Frank',normalizedContent:'# 两个以往的问题\n\n 1. 在 main 方法中测试\n 2. 将逻辑代码放在 main 方法中\n\n现在，我们应该摒弃这个两个“习惯”。\n\n\n# 以往的测试方式\n\n在 main 方法中测试\n\n 1. 编写函数（方法）\n 2. 在 main 中调用该函数\n 3. 肉眼查看输出，检查是否符合预期结果\n\n注意，预期结果是由人工计算的。当预期结果不能由人来计算的时候，怎样验证程序结果是正确的？\n\n我想这个问题的答案很容易就能想到。既然人计算不了了，那就交给代码呗。关键还不是这个。关键是不应该在 main() 中测试。\n\n\n# main 方法不是处理逻辑的地儿\n\nmain 方法就是整个程序的入口，而不是处理逻辑（完成功能）的地儿。\n\nmain 方法里面不应该有大量的逻辑性的代码（功能性的代码）。这些逻辑代码应该从 main 中脱离出来变成复用性很强的函数（方法），然后由 main 或其它函数来调用。\n\n你会发现很多nb的框架，main 里边儿就一行代码（比如 runapplication()）。\n\n\n# 模块化\n\npublic class run {\n    public static void main(string[] args) {\n        run();\n    }\n    \n    public static void sayhello() { system.out.println("hello!"); }\n    \n    public static void run() {\n    \tsayhello();\n        \n        // ...\n        // ...\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n要将代码模块化很不容易，甚至可能遇到很多问题。\n\n注意\n\n但是，遇到问题肯定是你技术学得不行！记住我说的这句话。——frank',charsets:{cjk:!0},lastUpdated:"2022/12/03, 17:31:39",lastUpdatedTimestamp:1670059899e3},{title:"使用JUnit",frontmatter:{title:"使用JUnit",date:"2022-10-23T17:32:40.000Z",permalink:"/pages/711975/",tags:[null]},regularPath:"/01.Java/06.Frank%20-%20Java%20API%E8%BF%9B%E9%98%B6/02.Unit%20Test%20and%20Main%20function/03.%E4%BD%BF%E7%94%A8JUnit.html",relativePath:"01.Java/06.Frank - Java API进阶/02.Unit Test and Main function/03.使用JUnit.md",key:"v-6a58e8d8",path:"/pages/711975/",headers:[{level:2,title:"Assert.assertEquals() 方法",slug:"assert-assertequals-方法",normalizedTitle:"assert.assertequals() 方法",charIndex:41},{level:2,title:"一个计算器案例",slug:"一个计算器案例",normalizedTitle:"一个计算器案例",charIndex:212},{level:3,title:"编写方法",slug:"编写方法",normalizedTitle:"编写方法",charIndex:224},{level:3,title:"单元测试",slug:"单元测试",normalizedTitle:"单元测试",charIndex:119},{level:3,title:"应用",slug:"应用",normalizedTitle:"应用",charIndex:1270}],headersStr:"Assert.assertEquals() 方法 一个计算器案例 编写方法 单元测试 应用",content:'注意\n\n这儿学的是 JUnit 4 版本框架，不适用于 JUnit 5。\n\n\n# Assert.assertEquals() 方法\n\nAssert 是 org.junit 包下的一个类，Assert.assertEquals() 可用于在单元测试中根据预期值断言测试结果。这个方法有两个参数 expected 和 actual：\n\n * expected 表示预期值\n * actual 表示被测试方法产生的实际值\n\n\n# 一个计算器案例\n\n\n# 编写方法\n\npackage jim.demo.unittesting;\n\npublic class Calculator {\n\n    public static int sum(int numberA, int numberB) {\n        return numberA + numberB;\n    }\n\n    public static int subtract(int numberA, int numberB) {\n        return numberA - numberB;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 单元测试\n\n提示\n\n来自 org.junit 的注解 @Test 表示一个测试用例。 此外，这里利用了伪随机数 ThreadLocalRandom 来测试先前编写的方法。\n\npackage jim.demo.unittesting.test;\n\nimport jim.demo.unittesting.Calculator;\nimport org.junit.Assert;\nimport org.junit.Test;\n\nimport java.util.concurrent.ThreadLocalRandom;\n\npublic class CalculatorTest {\n\n    int numberA = ThreadLocalRandom.current().nextInt(-9999, 9999);\n    int numberB = ThreadLocalRandom.current().nextInt(-9999, 9999);\n\n    @Test\n    public void sum() {\n        Assert.assertEquals(numberA + numberB, Calculator.sum(numberA, numberB));\n    }\n\n    @Test\n    public void subtract() {\n        Assert.assertEquals(numberA - numberB, Calculator.subtract(numberA, numberB));\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# 应用\n\n提示\n\nmain() 中只有一行代码 run()。先前编写的方法在 run() 中调用。这个案例还能再调整和细化，但为了简洁和节省时间就点到为止。\n\npackage jim.demo.unittesting;\n\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        run();\n    }\n\n    private static void run() {\n        System.out.println("-----Welcome!----");\n        System.out.println("Please select mode(sum/subtract):");\n        Scanner scanner = new Scanner(System.in);\n        String mode = scanner.next();\n        System.out.println("Please enter two integer number:");\n        int numberA = scanner.nextInt();\n        int numberB = scanner.nextInt();\n        switch (mode) {\n            case "sum":\n                System.out.println(Calculator.sum(numberA, numberB));\n                break;\n            case "subtract":\n                System.out.println(Calculator.subtract(numberA, numberB));\n                break;\n            default:\n                System.out.println("Something wrong!");\n                break;\n        }\n        System.out.println("-----Goodbye!----");\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n',normalizedContent:'注意\n\n这儿学的是 junit 4 版本框架，不适用于 junit 5。\n\n\n# assert.assertequals() 方法\n\nassert 是 org.junit 包下的一个类，assert.assertequals() 可用于在单元测试中根据预期值断言测试结果。这个方法有两个参数 expected 和 actual：\n\n * expected 表示预期值\n * actual 表示被测试方法产生的实际值\n\n\n# 一个计算器案例\n\n\n# 编写方法\n\npackage jim.demo.unittesting;\n\npublic class calculator {\n\n    public static int sum(int numbera, int numberb) {\n        return numbera + numberb;\n    }\n\n    public static int subtract(int numbera, int numberb) {\n        return numbera - numberb;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 单元测试\n\n提示\n\n来自 org.junit 的注解 @test 表示一个测试用例。 此外，这里利用了伪随机数 threadlocalrandom 来测试先前编写的方法。\n\npackage jim.demo.unittesting.test;\n\nimport jim.demo.unittesting.calculator;\nimport org.junit.assert;\nimport org.junit.test;\n\nimport java.util.concurrent.threadlocalrandom;\n\npublic class calculatortest {\n\n    int numbera = threadlocalrandom.current().nextint(-9999, 9999);\n    int numberb = threadlocalrandom.current().nextint(-9999, 9999);\n\n    @test\n    public void sum() {\n        assert.assertequals(numbera + numberb, calculator.sum(numbera, numberb));\n    }\n\n    @test\n    public void subtract() {\n        assert.assertequals(numbera - numberb, calculator.subtract(numbera, numberb));\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# 应用\n\n提示\n\nmain() 中只有一行代码 run()。先前编写的方法在 run() 中调用。这个案例还能再调整和细化，但为了简洁和节省时间就点到为止。\n\npackage jim.demo.unittesting;\n\nimport java.util.scanner;\n\npublic class main {\n\n    public static void main(string[] args) {\n        run();\n    }\n\n    private static void run() {\n        system.out.println("-----welcome!----");\n        system.out.println("please select mode(sum/subtract):");\n        scanner scanner = new scanner(system.in);\n        string mode = scanner.next();\n        system.out.println("please enter two integer number:");\n        int numbera = scanner.nextint();\n        int numberb = scanner.nextint();\n        switch (mode) {\n            case "sum":\n                system.out.println(calculator.sum(numbera, numberb));\n                break;\n            case "subtract":\n                system.out.println(calculator.subtract(numbera, numberb));\n                break;\n            default:\n                system.out.println("something wrong!");\n                break;\n        }\n        system.out.println("-----goodbye!----");\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n',charsets:{cjk:!0},lastUpdated:"2022/10/25, 17:57:56",lastUpdatedTimestamp:1666691876e3},{title:"异常",frontmatter:{title:"异常",date:"2022-11-24T18:42:43.000Z",permalink:"/pages/2fba29/",tags:[null]},regularPath:"/01.Java/06.Frank%20-%20Java%20API%E8%BF%9B%E9%98%B6/03.Throwable/01.%E5%BC%82%E5%B8%B8.html",relativePath:"01.Java/06.Frank - Java API进阶/03.Throwable/01.异常.md",key:"v-289054fd",path:"/pages/2fba29/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/12/03, 17:31:39",lastUpdatedTimestamp:1670059899e3},{title:"为什么Java里main方法有个static？",frontmatter:{title:"为什么Java里main方法有个static？",date:"2022-12-02T17:20:39.000Z",permalink:"/pages/71cc54/",tags:["Java"]},regularPath:"/01.Java/08.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/01.%E4%B8%BA%E4%BB%80%E4%B9%88Java%E9%87%8Cmain%E6%96%B9%E6%B3%95%E6%9C%89%E4%B8%AAstatic%EF%BC%9F.html",relativePath:"01.Java/08.学习笔记/01.为什么Java里main方法有个static？.md",key:"v-9534e174",path:"/pages/71cc54/",headers:[{level:2,title:"Static members",slug:"static-members",normalizedTitle:"static members",charIndex:408},{level:2,title:"// 未完待续。。。",slug:"未完待续。。。",normalizedTitle:"// 未完待续。。。",charIndex:818}],headersStr:"Static members // 未完待续。。。",content:"在 Java 中，main 方法的声明通常如下：\n\npublic static void main(String[] args) {\n    // do something ...\n}\n\n\n1\n2\n3\n\n\n如果你刚学习 Java，那么肯定会对 main 方法声明里的 static 产生兴趣，它到底意味着什么？\n\n我们都知道 main 方法是程序的 “入口”，但是不管是老师还是各种教程，他们在跟初学者讲解 main 方法的时候，几乎都对 static 这个关键字闭口不提，要么就是一带而过。比如他们可能会这样说：“先别管那么多，反正每次这样敲就行了”。\n\n这也情有可原，因为 static 多少涉及了面向对象的概念。跟初学者讲吧，又很难把它讲清楚，不讲吧，初学者就是觉得别扭。\n\n但是，老师不教我们就不学了吗？如果不去深究一番，那初学者就永远是初学者。\n\n当我们学过面向对象之后再回头来看就不那么别扭了。\n\n\n# Static members\n\n静态成员代表的是类和所有实例 “公有” 的。\n\n静态成员有三种：\n\n 1. 静态变量 Static variables\n 2. 静态常量 Static constants\n 3. 静态方法 Static methods\n\n前两者可合并为静态字段（Static fields）。此时静态成员可分为两种：静态字段、静态方法。\n\n回忆一下，我们每次要在 main 方法中使用其他类的字段或方法时，是不是需要先实例化这个类？或者我们使用一些工具类（Utility class）时，是不是直接用类名调用字段或方法？\n\n这些都跟 static 方法的特性有关。\n\nstatic 方法的特性：\n\n 1. 静态方法内只能访问静态字段，不能访问非静态字段\n 2. 静态方法内不能调用实例方法（Instance method）\n 3. 静态方法内不能使用 this 关键字，静态成员是 “公有” 的\n\n\n# // 未完待续。。。",normalizedContent:"在 java 中，main 方法的声明通常如下：\n\npublic static void main(string[] args) {\n    // do something ...\n}\n\n\n1\n2\n3\n\n\n如果你刚学习 java，那么肯定会对 main 方法声明里的 static 产生兴趣，它到底意味着什么？\n\n我们都知道 main 方法是程序的 “入口”，但是不管是老师还是各种教程，他们在跟初学者讲解 main 方法的时候，几乎都对 static 这个关键字闭口不提，要么就是一带而过。比如他们可能会这样说：“先别管那么多，反正每次这样敲就行了”。\n\n这也情有可原，因为 static 多少涉及了面向对象的概念。跟初学者讲吧，又很难把它讲清楚，不讲吧，初学者就是觉得别扭。\n\n但是，老师不教我们就不学了吗？如果不去深究一番，那初学者就永远是初学者。\n\n当我们学过面向对象之后再回头来看就不那么别扭了。\n\n\n# static members\n\n静态成员代表的是类和所有实例 “公有” 的。\n\n静态成员有三种：\n\n 1. 静态变量 static variables\n 2. 静态常量 static constants\n 3. 静态方法 static methods\n\n前两者可合并为静态字段（static fields）。此时静态成员可分为两种：静态字段、静态方法。\n\n回忆一下，我们每次要在 main 方法中使用其他类的字段或方法时，是不是需要先实例化这个类？或者我们使用一些工具类（utility class）时，是不是直接用类名调用字段或方法？\n\n这些都跟 static 方法的特性有关。\n\nstatic 方法的特性：\n\n 1. 静态方法内只能访问静态字段，不能访问非静态字段\n 2. 静态方法内不能调用实例方法（instance method）\n 3. 静态方法内不能使用 this 关键字，静态成员是 “公有” 的\n\n\n# // 未完待续。。。",charsets:{cjk:!0},lastUpdated:"2022/12/03, 17:31:39",lastUpdatedTimestamp:1670059899e3},{title:"Tables and columns",frontmatter:{title:"Tables and columns",date:"2022-05-19T21:29:26.000Z",permalink:"/pages/848e4f/",tags:[null]},regularPath:"/02.MySQL/02.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/01.%E6%95%B0%E6%8D%AE%E5%BA%93/02.Tables%20and%20columns.html",relativePath:"02.MySQL/02.学习笔记/01.数据库/02.Tables and columns.md",key:"v-5f831136",path:"/pages/848e4f/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/06/19, 16:16:22",lastUpdatedTimestamp:1655626582e3},{title:"初识数据库",frontmatter:{title:"初识数据库",date:"2022-04-12T18:58:51.000Z",permalink:"/pages/9a852e/",categories:["MySQL"],tags:["MySQL"]},regularPath:"/02.MySQL/02.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/01.%E6%95%B0%E6%8D%AE%E5%BA%93/01.%E5%88%9D%E8%AF%86%E6%95%B0%E6%8D%AE%E5%BA%93.html",relativePath:"02.MySQL/02.学习笔记/01.数据库/01.初识数据库.md",key:"v-f57974b4",path:"/pages/9a852e/",headers:[{level:2,title:"参考资料",slug:"参考资料",normalizedTitle:"参考资料",charIndex:12},{level:2,title:"什么是数据库？",slug:"什么是数据库",normalizedTitle:"什么是数据库？",charIndex:42}],headersStr:"参考资料 什么是数据库？",content:"# 初识数据库\n\n\n# 参考资料\n\n数据库基础_思维导图\n\n数据库技术构成\n\n\n# 什么是数据库？\n\n当人们在谈论数据库(Database, DB)的时候到底是在谈论什么？\n\n很多人误把“数据库软件”当作数据库，这是不正确的。数据库是通过 DBMS 创建和操纵的容器。\n\n你并不直接访问数据库。你使用的是DBMS，它替你访问数据库。\n\n> DBMS：数据库管理系统(Database Management System, DBMS)，也就是“数据库软件”，如MySQL、PostgreSQL、Oracle...\n> \n> RDBMS：关系型数据库(Relational Database Management System, RDBMS)",normalizedContent:"# 初识数据库\n\n\n# 参考资料\n\n数据库基础_思维导图\n\n数据库技术构成\n\n\n# 什么是数据库？\n\n当人们在谈论数据库(database, db)的时候到底是在谈论什么？\n\n很多人误把“数据库软件”当作数据库，这是不正确的。数据库是通过 dbms 创建和操纵的容器。\n\n你并不直接访问数据库。你使用的是dbms，它替你访问数据库。\n\n> dbms：数据库管理系统(database management system, dbms)，也就是“数据库软件”，如mysql、postgresql、oracle...\n> \n> rdbms：关系型数据库(relational database management system, rdbms)",charsets:{cjk:!0},lastUpdated:"2022/06/19, 16:16:22",lastUpdatedTimestamp:1655626582e3},{title:"SQL",frontmatter:{title:"SQL",date:"2022-05-19T21:16:46.000Z",permalink:"/pages/698c6e/",tags:[null]},regularPath:"/02.MySQL/02.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/02.SQL/00.SQL.html",relativePath:"02.MySQL/02.学习笔记/02.SQL/00.SQL.md",key:"v-8f33d4a0",path:"/pages/698c6e/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/06/19, 16:16:22",lastUpdatedTimestamp:1655626582e3},{title:"数据库萌芽——开场吹比",frontmatter:{title:"数据库萌芽——开场吹比",date:"2022-04-15T00:29:44.000Z",permalink:"/pages/dec33b/",tags:[null]},regularPath:"/02.MySQL/05.Frank%20-%20MySQL%E5%88%A0%E5%BA%93%E8%B7%91%E8%B7%AF/01.%E5%AE%89%E8%A3%85%E8%BF%9E%E6%8E%A5%E4%BB%A5%E5%8F%8A%E9%85%8D%E7%BD%AE/00.%E6%95%B0%E6%8D%AE%E5%BA%93%E8%90%8C%E8%8A%BD%E2%80%94%E2%80%94%E5%BC%80%E5%9C%BA%E5%90%B9%E6%AF%94.html",relativePath:"02.MySQL/05.Frank - MySQL删库跑路/01.安装连接以及配置/00.数据库萌芽——开场吹比.md",key:"v-1a25ed56",path:"/pages/dec33b/",headers:[{level:2,title:"把数据放到TXT文件???",slug:"把数据放到txt文件",normalizedTitle:"把数据放到txt文件???",charIndex:2},{level:2,title:"数据库萌芽",slug:"数据库萌芽",normalizedTitle:"数据库萌芽",charIndex:49},{level:2,title:"增删改查——CRUD",slug:"增删改查-crud",normalizedTitle:"增删改查——crud",charIndex:150},{level:2,title:"吹比",slug:"吹比",normalizedTitle:"吹比",charIndex:265},{level:2,title:"该学什么数据库？",slug:"该学什么数据库",normalizedTitle:"该学什么数据库？",charIndex:343}],headersStr:"把数据放到TXT文件??? 数据库萌芽 增删改查——CRUD 吹比 该学什么数据库？",content:"# 把数据放到TXT文件???\n\n把内存里的数据放到文件里，由瞬时状态转换为持久性数据。\n\n\n# 数据库萌芽\n\n在最早期没有数据库的时候才会保存在文件里。有数据库之后还用文件去保存用户数据，那绝对是最蠢的方式。\n\n什么数据可以用文件保存？\n\n一些配置，配置文件有专门的语法，比如xml等等。\n\n\n# 增删改查——CRUD\n\n 1. 新增数据(Create)\n 2. 查找数据(Read)——对新手来说最复杂最有难度\n 3. 更新数据(Update)\n 4. 删除数据(Delete)\n\n为了增加你的逼格，请说——CRUD\n\n\n# 吹比\n\n层次模型——有数据不完整的问题\n\n网状模型——只能提取共性\n\n关系型：\n\n1.公有的字段 2.各管各的（主和谁都有关系，但大家都互不影响）\n\n\n# 该学什么数据库？\n\nSQL基本上是通用的，百分之八九十都是一样的。\n\n重要的你的基础，一定不要去使用特殊的东西。",normalizedContent:"# 把数据放到txt文件???\n\n把内存里的数据放到文件里，由瞬时状态转换为持久性数据。\n\n\n# 数据库萌芽\n\n在最早期没有数据库的时候才会保存在文件里。有数据库之后还用文件去保存用户数据，那绝对是最蠢的方式。\n\n什么数据可以用文件保存？\n\n一些配置，配置文件有专门的语法，比如xml等等。\n\n\n# 增删改查——crud\n\n 1. 新增数据(create)\n 2. 查找数据(read)——对新手来说最复杂最有难度\n 3. 更新数据(update)\n 4. 删除数据(delete)\n\n为了增加你的逼格，请说——crud\n\n\n# 吹比\n\n层次模型——有数据不完整的问题\n\n网状模型——只能提取共性\n\n关系型：\n\n1.公有的字段 2.各管各的（主和谁都有关系，但大家都互不影响）\n\n\n# 该学什么数据库？\n\nsql基本上是通用的，百分之八九十都是一样的。\n\n重要的你的基础，一定不要去使用特殊的东西。",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"数据库选择及其安装",frontmatter:{title:"数据库选择及其安装",date:"2022-04-15T00:29:44.000Z",permalink:"/pages/e04e78/",tags:[null]},regularPath:"/02.MySQL/05.Frank%20-%20MySQL%E5%88%A0%E5%BA%93%E8%B7%91%E8%B7%AF/01.%E5%AE%89%E8%A3%85%E8%BF%9E%E6%8E%A5%E4%BB%A5%E5%8F%8A%E9%85%8D%E7%BD%AE/01.%E6%95%B0%E6%8D%AE%E5%BA%93%E9%80%89%E6%8B%A9%E5%8F%8A%E5%85%B6%E5%AE%89%E8%A3%85.html",relativePath:"02.MySQL/05.Frank - MySQL删库跑路/01.安装连接以及配置/01.数据库选择及其安装.md",key:"v-6d56857d",path:"/pages/e04e78/",headersStr:null,content:"# 数据库选择\n\n数据库的选择一定要和之前的业务和公司的项目有关联的。\n\n如果一开始啥都没有，就选最新的稳定版(LTS)，绝对不能选开发版(Beta)，这是历代以来不变的规矩。\n\n\n# MySQL数据库安装\n\n初学者选择 MySQL Community Server 版。\n\n如果是在 Windows 上运行，则建议下载 MSI 安装器。\n\n> 如果是下载的二进制文件的方式，Windows需要进行配置这将会很费劲，二进制文件的方式更适用于Linux.\n\n初学者在安装时，安装类型选择 Server only 就行了，其他的装了也没啥用。\n\n记下端口号 Port 和 MySQL Service 的昵称，还有自己设置的密码。\n\nMySQL Service 会在电脑重启后自动开启。\n\n安装完成后，在终端使用 mysql --version 命令检查是否安装成功。\n\n\n# 终端进入MySQL\n\n终端进入MySQL命令：mysql -u root -p，然后输入密码即可。\n\n * -u：指定要登陆的用户\n * -p：使用密码的方式登陆\n\n显示数据库命令：show databases;（; 号一定不要掉了）",normalizedContent:"# 数据库选择\n\n数据库的选择一定要和之前的业务和公司的项目有关联的。\n\n如果一开始啥都没有，就选最新的稳定版(lts)，绝对不能选开发版(beta)，这是历代以来不变的规矩。\n\n\n# mysql数据库安装\n\n初学者选择 mysql community server 版。\n\n如果是在 windows 上运行，则建议下载 msi 安装器。\n\n> 如果是下载的二进制文件的方式，windows需要进行配置这将会很费劲，二进制文件的方式更适用于linux.\n\n初学者在安装时，安装类型选择 server only 就行了，其他的装了也没啥用。\n\n记下端口号 port 和 mysql service 的昵称，还有自己设置的密码。\n\nmysql service 会在电脑重启后自动开启。\n\n安装完成后，在终端使用 mysql --version 命令检查是否安装成功。\n\n\n# 终端进入mysql\n\n终端进入mysql命令：mysql -u root -p，然后输入密码即可。\n\n * -u：指定要登陆的用户\n * -p：使用密码的方式登陆\n\n显示数据库命令：show databases;（; 号一定不要掉了）",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"服务的启动和停止",frontmatter:{title:"服务的启动和停止",date:"2022-04-15T00:29:44.000Z",permalink:"/pages/962d9d/",tags:[null]},regularPath:"/02.MySQL/05.Frank%20-%20MySQL%E5%88%A0%E5%BA%93%E8%B7%91%E8%B7%AF/01.%E5%AE%89%E8%A3%85%E8%BF%9E%E6%8E%A5%E4%BB%A5%E5%8F%8A%E9%85%8D%E7%BD%AE/02.%E6%9C%8D%E5%8A%A1%E7%9A%84%E5%90%AF%E5%8A%A8%E5%92%8C%E5%81%9C%E6%AD%A2.html",relativePath:"02.MySQL/05.Frank - MySQL删库跑路/01.安装连接以及配置/02.服务的启动和停止.md",key:"v-264d80b8",path:"/pages/962d9d/",headersStr:null,content:"# MySQL的软件架构\n\nMySQL是典型的C/S架构。\n\n我们用来使用MySQL的终端可以称为客户端(Client)，而MySQL本身则为服务端(Server)。\n\n\n# 服务的启动和停止\n\n在Windows上，MySQL服务的启动和停止有两种方式。\n\n 1. 任务管理器-服务\n 2. 命令 net start <mysqlServiceName>、net stop <mysqlServiceName> (需要管理员权限)\n\n把Mysql服务关闭了，就相当于LOL维护了，这时客户端就不能使用MySQL提供的服务了:)\n\nPS C:\\Users\\Jim> mysql -u root -p\nEnter password: ********\nERROR 2003 (HY000): Can't connect to MySQL server on 'localhost:3306' (10061)\nPS C:\\Users\\Jim>\n\n\n1\n2\n3\n4\n\n\n> \"Can't connect to MySQL server!!!\"",normalizedContent:"# mysql的软件架构\n\nmysql是典型的c/s架构。\n\n我们用来使用mysql的终端可以称为客户端(client)，而mysql本身则为服务端(server)。\n\n\n# 服务的启动和停止\n\n在windows上，mysql服务的启动和停止有两种方式。\n\n 1. 任务管理器-服务\n 2. 命令 net start <mysqlservicename>、net stop <mysqlservicename> (需要管理员权限)\n\n把mysql服务关闭了，就相当于lol维护了，这时客户端就不能使用mysql提供的服务了:)\n\nps c:\\users\\jim> mysql -u root -p\nenter password: ********\nerror 2003 (hy000): can't connect to mysql server on 'localhost:3306' (10061)\nps c:\\users\\jim>\n\n\n1\n2\n3\n4\n\n\n> \"can't connect to mysql server!!!\"",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"连接MySQL",frontmatter:{title:"连接MySQL",date:"2022-04-15T00:29:44.000Z",permalink:"/pages/16c2ac/",tags:[null]},regularPath:"/02.MySQL/05.Frank%20-%20MySQL%E5%88%A0%E5%BA%93%E8%B7%91%E8%B7%AF/01.%E5%AE%89%E8%A3%85%E8%BF%9E%E6%8E%A5%E4%BB%A5%E5%8F%8A%E9%85%8D%E7%BD%AE/03.%E8%BF%9E%E6%8E%A5MySQL.html",relativePath:"02.MySQL/05.Frank - MySQL删库跑路/01.安装连接以及配置/03.连接MySQL.md",key:"v-16de008f",path:"/pages/16c2ac/",headersStr:null,content:"# 市面上不同的关系型数据库\n\n市场上常见的，大家能够碰到的关系型数据库：\n\n 1. MySQL（使用SQL语句）\n 2. SQL server（使用T-SQL语句）\n 3. Oracle（一开始使用PL，后改为SQL，该公司后来收购了MySQL）\n\n尽管不同的数据库使用不同的语句，但基础的内容相差不大，都是那一套。\n\n\n# 连接MySQL数据库\n\n数据库中存储的数据通常是需要加密的，要访问它们就得证明你有这个权限。\n\n权限最大的用户为莫过于数据库管理员（root），如果MySQL在自己的电脑上，那自己就是这个数据库管理员。\n\n连接自己电脑上的MySQL数据库，直接使用 mysql -u root -p 命令登陆即可：\n\n-u 指定当前要登陆的用户，root 代表数据库管理员（被 -u 指定的用户），-p 表示该用户以密码的方式登陆。\n\n> 如果是使用二进制文件的方式安装MySQL的，一定要配置环境变量才能在终端使用MySQL命令。",normalizedContent:"# 市面上不同的关系型数据库\n\n市场上常见的，大家能够碰到的关系型数据库：\n\n 1. mysql（使用sql语句）\n 2. sql server（使用t-sql语句）\n 3. oracle（一开始使用pl，后改为sql，该公司后来收购了mysql）\n\n尽管不同的数据库使用不同的语句，但基础的内容相差不大，都是那一套。\n\n\n# 连接mysql数据库\n\n数据库中存储的数据通常是需要加密的，要访问它们就得证明你有这个权限。\n\n权限最大的用户为莫过于数据库管理员（root），如果mysql在自己的电脑上，那自己就是这个数据库管理员。\n\n连接自己电脑上的mysql数据库，直接使用 mysql -u root -p 命令登陆即可：\n\n-u 指定当前要登陆的用户，root 代表数据库管理员（被 -u 指定的用户），-p 表示该用户以密码的方式登陆。\n\n> 如果是使用二进制文件的方式安装mysql的，一定要配置环境变量才能在终端使用mysql命令。",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"创建Data目录",frontmatter:{title:"创建Data目录",date:"2022-04-15T00:29:44.000Z",permalink:"/pages/b0281f/",tags:[null]},regularPath:"/02.MySQL/05.Frank%20-%20MySQL%E5%88%A0%E5%BA%93%E8%B7%91%E8%B7%AF/01.%E5%AE%89%E8%A3%85%E8%BF%9E%E6%8E%A5%E4%BB%A5%E5%8F%8A%E9%85%8D%E7%BD%AE/04.%E5%88%9B%E5%BB%BAData%E7%9B%AE%E5%BD%95.html",relativePath:"02.MySQL/05.Frank - MySQL删库跑路/01.安装连接以及配置/04.创建Data目录.md",key:"v-7474094c",path:"/pages/b0281f/",headersStr:null,content:"# 创建Data目录\n\n如果是用MSI安装的，MySQL根目录在 C:\\Program Files\\MySQL\\ 下。\n\n> 了解MySQL根目录。\n> \n> bin\\目录下为\"命令\"\n\n运行命令创建Data文件夹（数据仓库） 不要手动创建！用命令！ CLI工作目录切换到MySQL根目录！ 运行：\n\nmysqld --initialize-insecure --user=root\n\n\n1\n\n\n'''tip 使用系统终端运行，而不是使用MySQL客户端。 '''\n\n运行命令之后，MySQL根目录会多一个 Data 目录。\n\n> 5.7 之后，MySQL目录下就没有ini文件了。",normalizedContent:"# 创建data目录\n\n如果是用msi安装的，mysql根目录在 c:\\program files\\mysql\\ 下。\n\n> 了解mysql根目录。\n> \n> bin\\目录下为\"命令\"\n\n运行命令创建data文件夹（数据仓库） 不要手动创建！用命令！ cli工作目录切换到mysql根目录！ 运行：\n\nmysqld --initialize-insecure --user=root\n\n\n1\n\n\n'''tip 使用系统终端运行，而不是使用mysql客户端。 '''\n\n运行命令之后，mysql根目录会多一个 data 目录。\n\n> 5.7 之后，mysql目录下就没有ini文件了。",charsets:{cjk:!0},lastUpdated:"2022/12/03, 17:31:39",lastUpdatedTimestamp:1670059899e3},{title:"显示数据库",frontmatter:{title:"显示数据库",date:"2022-04-15T00:29:44.000Z",permalink:"/pages/b673ce/",tags:["MySQL"]},regularPath:"/02.MySQL/05.Frank%20-%20MySQL%E5%88%A0%E5%BA%93%E8%B7%91%E8%B7%AF/02.%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E5%BA%93/01.%E6%98%BE%E7%A4%BA%E6%95%B0%E6%8D%AE%E5%BA%93.html",relativePath:"02.MySQL/05.Frank - MySQL删库跑路/02.基本操作——数据库/01.显示数据库.md",key:"v-44b816a4",path:"/pages/b673ce/",headers:[{level:2,title:"了解如下四个数据库的作用",slug:"了解如下四个数据库的作用",normalizedTitle:"了解如下四个数据库的作用",charIndex:294}],headersStr:"了解如下四个数据库的作用",content:"# 显示所有的数据库\n\nshwo databases;\n\n\n1\n\n\nmysql> show databases;\n+--------------------+\n| Database           |\n+--------------------+\n| information_schema |\n| mysql              |\n| performance_schema |\n| sys                |\n+--------------------+\n4 rows in set (0.02 sec)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 了解如下四个数据库的作用\n\n 1. information_schema\n 2. mysql\n 3. performance_schema\n 4. sys",normalizedContent:"# 显示所有的数据库\n\nshwo databases;\n\n\n1\n\n\nmysql> show databases;\n+--------------------+\n| database           |\n+--------------------+\n| information_schema |\n| mysql              |\n| performance_schema |\n| sys                |\n+--------------------+\n4 rows in set (0.02 sec)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 了解如下四个数据库的作用\n\n 1. information_schema\n 2. mysql\n 3. performance_schema\n 4. sys",charsets:{cjk:!0},lastUpdated:"2022/12/03, 17:31:39",lastUpdatedTimestamp:1670059899e3},{title:"创建数据库",frontmatter:{title:"创建数据库",date:"2022-04-15T00:29:44.000Z",permalink:"/pages/199240/",tags:["MySQL"]},regularPath:"/02.MySQL/05.Frank%20-%20MySQL%E5%88%A0%E5%BA%93%E8%B7%91%E8%B7%AF/02.%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E5%BA%93/02.%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%BA%93.html",relativePath:"02.MySQL/05.Frank - MySQL删库跑路/02.基本操作——数据库/02.创建数据库.md",key:"v-754c4324",path:"/pages/199240/",headers:[{level:2,title:"数据库名特例",slug:"数据库名特例",normalizedTitle:"数据库名特例",charIndex:152},{level:2,title:"如果同名数据库已存在",slug:"如果同名数据库已存在",normalizedTitle:"如果同名数据库已存在",charIndex:523},{level:3,title:"有逼格的方法：",slug:"有逼格的方法",normalizedTitle:"有逼格的方法：",charIndex:677},{level:3,title:"更有逼格的方法：",slug:"更有逼格的方法",normalizedTitle:"更有逼格的方法：",charIndex:938}],headersStr:"数据库名特例 如果同名数据库已存在 有逼格的方法： 更有逼格的方法：",content:"# 创建数据库\n\ncreate database <DatabaseName>;\n\n\n1\n\n\nExample: 创建 student 数据库：\n\nmysql> create database student;\nQuery OK, 1 row affected (0.01 sec)\n\n\n1\n2\n\n\n\n# 数据库名特例\n\n如果使用关键字作为数据库名，则会报错。比如使用 database 作为数据库名：\n\nmysql> create database database;\nERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'database' at line 1\n\n\n1\n2\n\n\n不建议数据库名使用关键字，如果你固执，那也不是不可以。给关键字加上反引号即可用作数据库名，比如使用 database 作为数据库名：\n\ncreate database `database`;\n\n\n1\n\n\n\n# 如果同名数据库已存在\n\n假如数据库 student 已经存在，再次创建同名仓库：\n\nmysql> create database student;\nERROR 1007 (HY000): Can't create database 'student'; database exists\n\n\n1\n2\n\n\n\n# 有逼格的方法：\n\n加上 if not exists :\n\ncreate database if not exists <DatabaseName>;\n\n\n1\n\n\nExample: 试图创建以存在的 student 同名数据库\n\nmysql> create database if not exists student;\nQuery OK, 1 row affected, 1 warning (0.01 sec)\n\n\n1\n2\n\n\n可以发现，这条命令会运行成功，不会报错，但会给出一个警告，如 1 warning。\n\n\n# 更有逼格的方法：\n\n数据库名加上反引号\n\ncreate database if no exists `<DatabaseName>`;\n\n\n1\n",normalizedContent:"# 创建数据库\n\ncreate database <databasename>;\n\n\n1\n\n\nexample: 创建 student 数据库：\n\nmysql> create database student;\nquery ok, 1 row affected (0.01 sec)\n\n\n1\n2\n\n\n\n# 数据库名特例\n\n如果使用关键字作为数据库名，则会报错。比如使用 database 作为数据库名：\n\nmysql> create database database;\nerror 1064 (42000): you have an error in your sql syntax; check the manual that corresponds to your mysql server version for the right syntax to use near 'database' at line 1\n\n\n1\n2\n\n\n不建议数据库名使用关键字，如果你固执，那也不是不可以。给关键字加上反引号即可用作数据库名，比如使用 database 作为数据库名：\n\ncreate database `database`;\n\n\n1\n\n\n\n# 如果同名数据库已存在\n\n假如数据库 student 已经存在，再次创建同名仓库：\n\nmysql> create database student;\nerror 1007 (hy000): can't create database 'student'; database exists\n\n\n1\n2\n\n\n\n# 有逼格的方法：\n\n加上 if not exists :\n\ncreate database if not exists <databasename>;\n\n\n1\n\n\nexample: 试图创建以存在的 student 同名数据库\n\nmysql> create database if not exists student;\nquery ok, 1 row affected, 1 warning (0.01 sec)\n\n\n1\n2\n\n\n可以发现，这条命令会运行成功，不会报错，但会给出一个警告，如 1 warning。\n\n\n# 更有逼格的方法：\n\n数据库名加上反引号\n\ncreate database if no exists `<databasename>`;\n\n\n1\n",charsets:{cjk:!0},lastUpdated:"2022/12/03, 17:31:39",lastUpdatedTimestamp:1670059899e3},{title:"删除数据库",frontmatter:{title:"删除数据库",date:"2022-04-15T00:29:44.000Z",permalink:"/pages/5e26eb/",tags:["MySQL"]},regularPath:"/02.MySQL/05.Frank%20-%20MySQL%E5%88%A0%E5%BA%93%E8%B7%91%E8%B7%AF/02.%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E5%BA%93/03.%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE%E5%BA%93.html",relativePath:"02.MySQL/05.Frank - MySQL删库跑路/02.基本操作——数据库/03.删除数据库.md",key:"v-73eb45bb",path:"/pages/5e26eb/",headers:[{level:2,title:"有逼格的方法",slug:"有逼格的方法",normalizedTitle:"有逼格的方法",charIndex:276},{level:2,title:"更有逼格 的方法",slug:"更有逼格-的方法",normalizedTitle:"更有逼格 的方法",charIndex:439}],headersStr:"有逼格的方法 更有逼格 的方法",content:"# 销毁数据库\n\ndrop database <DatabaseName>;\n\n\n1\n\n\nExample: 销毁 student 数据库\n\nmysql> drop database student;\nQuery OK, 0 rows affected (0.03 sec)\n\n\n1\n2\n\n\n如果试图销毁不存在的数据库：\n\nmysql> drop database student;\nERROR 1008 (HY000): Can't drop database 'student'; database doesn't exist\n\n\n1\n2\n\n\n\n# 有逼格的方法\n\ndrop database if exists <DatabaseName>;\n\n\n1\n\n\nExample:\n\nmysql> drop database if exists student;\nQuery OK, 0 rows affected, 1 warning (0.01 sec)\n\n\n1\n2\n\n\n\n# 更有逼格 的方法\n\ndrop database if exists `<DatabaseName>`;\n\n\n1\n\n\nExample:\n\nmysql> drop database if exists `database`;\nQuery OK, 0 rows affected (0.01 sec)\n\n\n1\n2\n",normalizedContent:"# 销毁数据库\n\ndrop database <databasename>;\n\n\n1\n\n\nexample: 销毁 student 数据库\n\nmysql> drop database student;\nquery ok, 0 rows affected (0.03 sec)\n\n\n1\n2\n\n\n如果试图销毁不存在的数据库：\n\nmysql> drop database student;\nerror 1008 (hy000): can't drop database 'student'; database doesn't exist\n\n\n1\n2\n\n\n\n# 有逼格的方法\n\ndrop database if exists <databasename>;\n\n\n1\n\n\nexample:\n\nmysql> drop database if exists student;\nquery ok, 0 rows affected, 1 warning (0.01 sec)\n\n\n1\n2\n\n\n\n# 更有逼格 的方法\n\ndrop database if exists `<databasename>`;\n\n\n1\n\n\nexample:\n\nmysql> drop database if exists `database`;\nquery ok, 0 rows affected (0.01 sec)\n\n\n1\n2\n",charsets:{cjk:!0},lastUpdated:"2022/12/03, 17:31:39",lastUpdatedTimestamp:1670059899e3},{title:"查看创建数据库的SQL",frontmatter:{title:"查看创建数据库的SQL",date:"2022-04-15T00:29:44.000Z",permalink:"/pages/f8be11/",tags:["MySQL"]},regularPath:"/02.MySQL/05.Frank%20-%20MySQL%E5%88%A0%E5%BA%93%E8%B7%91%E8%B7%AF/02.%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E5%BA%93/04.%E6%9F%A5%E7%9C%8B%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84SQL.html",relativePath:"02.MySQL/05.Frank - MySQL删库跑路/02.基本操作——数据库/04.查看创建数据库的SQL.md",key:"v-000396c9",path:"/pages/f8be11/",headersStr:null,content:"# 查看创建数据库的SQL\n\nshow create database <DatabaseName>;\n\n\n1\n\n\n该语句会显示当初创建该数据库的SQL语句，以及字符编码。\n\nExample:\n\nmysql> show create database student;\n+----------+-----------------+ \n| Database | Create Database | \n+----------+-----------------+ \n| student  | CREATE DATABASE `student` /*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci */ /*!80016 DEFAULT ENCRYPTION='N' */ \n\n\n1\n2\n3\n4\n5\n",normalizedContent:"# 查看创建数据库的sql\n\nshow create database <databasename>;\n\n\n1\n\n\n该语句会显示当初创建该数据库的sql语句，以及字符编码。\n\nexample:\n\nmysql> show create database student;\n+----------+-----------------+ \n| database | create database | \n+----------+-----------------+ \n| student  | create database `student` /*!40100 default character set utf8mb4 collate utf8mb4_0900_ai_ci */ /*!80016 default encryption='n' */ \n\n\n1\n2\n3\n4\n5\n",charsets:{cjk:!0},lastUpdated:"2022/12/03, 17:31:39",lastUpdatedTimestamp:1670059899e3},{title:"数据库的字符编码",frontmatter:{title:"数据库的字符编码",date:"2022-04-15T00:29:44.000Z",permalink:"/pages/4c42c5/",tags:["MySQL"]},regularPath:"/02.MySQL/05.Frank%20-%20MySQL%E5%88%A0%E5%BA%93%E8%B7%91%E8%B7%AF/02.%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E5%BA%93/05.%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81.html",relativePath:"02.MySQL/05.Frank - MySQL删库跑路/02.基本操作——数据库/05.数据库的字符编码.md",key:"v-06e3b6d6",path:"/pages/4c42c5/",headersStr:null,content:"# 创建数据库的时候指定字符编码\n\ncreate database if not exist `students` charset=gbk;\n\n\n1\n\n\n> 实际开发过程中通常都是指定UTF-8，由于Windows的命令提示符为GBK编码，所以在Windows平台上学习的时候都是设置为GBK编码。如果是Mac或Linux则指定为UTF-8。\n\n\n# 查看数据库的字符编码\n\nshow create database `students`;\n\n\n1\n\n\n\n# 修改数据库的字符编码\n\nalter database `student` charset=utf-\n\n\n1\n",normalizedContent:"# 创建数据库的时候指定字符编码\n\ncreate database if not exist `students` charset=gbk;\n\n\n1\n\n\n> 实际开发过程中通常都是指定utf-8，由于windows的命令提示符为gbk编码，所以在windows平台上学习的时候都是设置为gbk编码。如果是mac或linux则指定为utf-8。\n\n\n# 查看数据库的字符编码\n\nshow create database `students`;\n\n\n1\n\n\n\n# 修改数据库的字符编码\n\nalter database `student` charset=utf-\n\n\n1\n",charsets:{cjk:!0},lastUpdated:"2022/12/03, 17:31:39",lastUpdatedTimestamp:1670059899e3},{title:"显示表结构——desc",frontmatter:{title:"显示表结构——desc",date:"2022-04-15T00:29:44.000Z",permalink:"/pages/e0b946/",tags:["MySQL"]},regularPath:"/02.MySQL/05.Frank%20-%20MySQL%E5%88%A0%E5%BA%93%E8%B7%91%E8%B7%AF/03.%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E2%80%94%E2%80%94%E8%A1%A8/04.%E6%98%BE%E7%A4%BA%E8%A1%A8%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94desc.html",relativePath:"02.MySQL/05.Frank - MySQL删库跑路/03.基本操作——表/04.显示表结构——desc.md",key:"v-da70ac80",path:"/pages/e0b946/",headersStr:null,content:"# 显示表结构\n\ndesc <TableName>;\n\n\n1\n\n\nor\n\ndescribe <TableName>;\n\n\n1\n\n\nExample:\n\nmysql> desc students;\n+---------+--------------+------+-----+----------+----------------+\n| Field   | Type         | Null | Key | Default  | Extra          |\n+---------+--------------+------+-----+----------+----------------+\n| id      | int(11)      | NO   | PRI | NULL     | auto_increment |\n| name    | varchar(30)  | NO   |     | NULL     |                |\n| age     | int(11)      | YES  |     | NULL     |                |\n| phone   | varchar(20)  | YES  |     | NULL     |                |\n| address | varchar(100) | YES  |     | 暂时未知  |                |\n+---------+--------------+------+-----+----------+----------------+\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n",normalizedContent:"# 显示表结构\n\ndesc <tablename>;\n\n\n1\n\n\nor\n\ndescribe <tablename>;\n\n\n1\n\n\nexample:\n\nmysql> desc students;\n+---------+--------------+------+-----+----------+----------------+\n| field   | type         | null | key | default  | extra          |\n+---------+--------------+------+-----+----------+----------------+\n| id      | int(11)      | no   | pri | null     | auto_increment |\n| name    | varchar(30)  | no   |     | null     |                |\n| age     | int(11)      | yes  |     | null     |                |\n| phone   | varchar(20)  | yes  |     | null     |                |\n| address | varchar(100) | yes  |     | 暂时未知  |                |\n+---------+--------------+------+-----+----------+----------------+\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n",charsets:{cjk:!0},lastUpdated:"2022/12/03, 17:31:39",lastUpdatedTimestamp:1670059899e3},{title:"删除表——drop",frontmatter:{title:"删除表——drop",date:"2022-04-15T00:29:44.000Z",permalink:"/pages/00e556/",tags:["MySQL"]},regularPath:"/02.MySQL/05.Frank%20-%20MySQL%E5%88%A0%E5%BA%93%E8%B7%91%E8%B7%AF/03.%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E2%80%94%E2%80%94%E8%A1%A8/05.%E5%88%A0%E9%99%A4%E8%A1%A8%E2%80%94%E2%80%94drop.html",relativePath:"02.MySQL/05.Frank - MySQL删库跑路/03.基本操作——表/05.删除表——drop.md",key:"v-5b8c6c5b",path:"/pages/00e556/",headersStr:null,content:"# 删除表\n\ndrop table <TableName>;\n\n\n1\n\n\n亦可同时删除多个表，并且可以加上 if exists 语句。\n\nExample:\n\nmysql> drop table if exists teachers, students;\nQuery OK, 0 rows affected (0.01 sec)\n\n\n1\n2\n",normalizedContent:"# 删除表\n\ndrop table <tablename>;\n\n\n1\n\n\n亦可同时删除多个表，并且可以加上 if exists 语句。\n\nexample:\n\nmysql> drop table if exists teachers, students;\nquery ok, 0 rows affected (0.01 sec)\n\n\n1\n2\n",charsets:{cjk:!0},lastUpdated:"2022/12/03, 17:31:39",lastUpdatedTimestamp:1670059899e3},{title:"修改表——alter",frontmatter:{title:"修改表——alter",date:"2022-04-15T00:29:44.000Z",permalink:"/pages/a89d89/",tags:["MySQL"]},regularPath:"/02.MySQL/05.Frank%20-%20MySQL%E5%88%A0%E5%BA%93%E8%B7%91%E8%B7%AF/03.%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E2%80%94%E2%80%94%E8%A1%A8/06.%E4%BF%AE%E6%94%B9%E8%A1%A8%E2%80%94%E2%80%94alter.html",relativePath:"02.MySQL/05.Frank - MySQL删库跑路/03.基本操作——表/06.修改表——alter.md",key:"v-353722f2",path:"/pages/a89d89/",headers:[{level:2,title:"重命名表",slug:"重命名表",normalizedTitle:"重命名表",charIndex:17},{level:2,title:"删除字段",slug:"删除字段",normalizedTitle:"删除字段",charIndex:117},{level:2,title:"添加新字段",slug:"添加新字段",normalizedTitle:"添加新字段",charIndex:174},{level:3,title:"追加",slug:"追加",normalizedTitle:"追加",charIndex:184},{level:3,title:"插入",slug:"插入",normalizedTitle:"插入",charIndex:435},{level:2,title:"修改字段名称、类型及其属性",slug:"修改字段名称、类型及其属性",normalizedTitle:"修改字段名称、类型及其属性",charIndex:627},{level:3,title:"Change——改变字段名称、类型",slug:"change-改变字段名称、类型",normalizedTitle:"change——改变字段名称、类型",charIndex:645},{level:3,title:"Modify——调整字段类型、属性",slug:"modify-调整字段类型、属性",normalizedTitle:"modify——调整字段类型、属性",charIndex:906},{level:3,title:"Alter——修改属性",slug:"alter-修改属性",normalizedTitle:"alter——修改属性",charIndex:1047}],headersStr:"重命名表 删除字段 添加新字段 追加 插入 修改字段名称、类型及其属性 Change——改变字段名称、类型 Modify——调整字段类型、属性 Alter——修改属性",content:"# 修改表——alter\n\n\n# 重命名表\n\nalter table <TableName> rename to <NewTableName>;\n\n\n1\n\n\n> 注意！表的名称最好不要是复数，如 students，规范起来！\n\n\n# 删除字段\n\nalter table <TableName> drop <FieldName>;\n\n\n1\n\n\n\n# 添加新字段\n\n\n# 追加\n\nalter table <TableName> add <FieldName> <FieldType>;\n\n\n1\n\n\nExample: 为 students 添加 id_card_number 字段\n\nmysql> alter table students add id_card_number char(18);\nQuery OK, 0 rows affected (0.06 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\n\n1\n2\n3\n\n\n\n# 插入\n\n# First——将字段插到最前面\n\nalter table <TableName> add <FieldName> <FieldType> first;\n\n\n1\n\n\n# After——将字段插到其它字段后面\n\nalter table <TableName> add <FieldName> <FieldType> after <AnoterField>;\n\n\n1\n\n\n\n# 修改字段名称、类型及其属性\n\n\n# Change——改变字段名称、类型\n\nalter table <TableName> change <FieldName> <NewFieldName> <NewFieldType>;\n\n\n1\n\n\nExample:\n\nmysql> alter table students change phone phone_number int(20);\nQuery OK, 0 rows affected (0.07 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\n\n1\n2\n3\n\n\n\n# Modify——调整字段类型、属性\n\nalter table <TableName> modify <FieldName> <FieldType> [NewAttributes];\n\n\n1\n\n\n> 注意！如果使用 modify 修改没有设置属性，会自动设置为默认值或取消。\n\n\n# Alter——修改属性\n\n# 添加默认值\n\nalter table <TableName> alter <FieldName> set default <Value>;\n\n\n1\n\n\n# 删除默认值\n\nalter table <TableName> alte <FieldName> drop default;\n\n\n1\n",normalizedContent:"# 修改表——alter\n\n\n# 重命名表\n\nalter table <tablename> rename to <newtablename>;\n\n\n1\n\n\n> 注意！表的名称最好不要是复数，如 students，规范起来！\n\n\n# 删除字段\n\nalter table <tablename> drop <fieldname>;\n\n\n1\n\n\n\n# 添加新字段\n\n\n# 追加\n\nalter table <tablename> add <fieldname> <fieldtype>;\n\n\n1\n\n\nexample: 为 students 添加 id_card_number 字段\n\nmysql> alter table students add id_card_number char(18);\nquery ok, 0 rows affected (0.06 sec)\nrecords: 0  duplicates: 0  warnings: 0\n\n\n1\n2\n3\n\n\n\n# 插入\n\n# first——将字段插到最前面\n\nalter table <tablename> add <fieldname> <fieldtype> first;\n\n\n1\n\n\n# after——将字段插到其它字段后面\n\nalter table <tablename> add <fieldname> <fieldtype> after <anoterfield>;\n\n\n1\n\n\n\n# 修改字段名称、类型及其属性\n\n\n# change——改变字段名称、类型\n\nalter table <tablename> change <fieldname> <newfieldname> <newfieldtype>;\n\n\n1\n\n\nexample:\n\nmysql> alter table students change phone phone_number int(20);\nquery ok, 0 rows affected (0.07 sec)\nrecords: 0  duplicates: 0  warnings: 0\n\n\n1\n2\n3\n\n\n\n# modify——调整字段类型、属性\n\nalter table <tablename> modify <fieldname> <fieldtype> [newattributes];\n\n\n1\n\n\n> 注意！如果使用 modify 修改没有设置属性，会自动设置为默认值或取消。\n\n\n# alter——修改属性\n\n# 添加默认值\n\nalter table <tablename> alter <fieldname> set default <value>;\n\n\n1\n\n\n# 删除默认值\n\nalter table <tablename> alte <fieldname> drop default;\n\n\n1\n",charsets:{cjk:!0},lastUpdated:"2022/12/03, 17:31:39",lastUpdatedTimestamp:1670059899e3},{title:"创建表——create",frontmatter:{title:"创建表——create",date:"2022-04-15T00:29:44.000Z",permalink:"/pages/bbd8e4/",tags:["MySQL"]},regularPath:"/02.MySQL/05.Frank%20-%20MySQL%E5%88%A0%E5%BA%93%E8%B7%91%E8%B7%AF/03.%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E2%80%94%E2%80%94%E8%A1%A8/03.%E5%88%9B%E5%BB%BA%E8%A1%A8%E2%80%94%E2%80%94create.html",relativePath:"02.MySQL/05.Frank - MySQL删库跑路/03.基本操作——表/03.创建表——create.md",key:"v-6a151cce",path:"/pages/bbd8e4/",headers:[{level:2,title:"先了解一些新鲜词儿（关键字）",slug:"先了解一些新鲜词儿-关键字",normalizedTitle:"先了解一些新鲜词儿（关键字）",charIndex:514}],headersStr:"先了解一些新鲜词儿（关键字）",content:"# 创建表\n\ncreate table <TableName>;\n\n\n1\n\n\nExample: 为了显示更清楚，建议像下面这样创建表\n\nmysql> create table student(\n    -> id int,\n    -> name varchar(30),\n    -> age int\n    -> );\nQuery OK, 0 rows affected (0.03 sec)\n\n\n1\n2\n3\n4\n5\n6\n\n\n表名后面跟着的括号中即为表的字段；\n\n每个字段名和其对应的数据类型之间用空格隔开；\n\n字段与字段之间用逗号隔开，最后一个字段不加逗号。\n\nmysql> show tables;\n+----------------------+\n| Tables_in_jim_school |\n+----------------------+\n| studnet              |\n| teacher              |\n+----------------------+\n2 rows in set (0.01 sec)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 创建表（B格）\n\n\n# 先了解一些新鲜词儿（关键字）\n\n * auto_increment 自动增长\n * primary key 主键，关系型数据库就靠这个主键\n   * 主键是唯一的，不能重复复的，一堆数据主要靠它来区分\n   * 主键不能为空，是必须要填的，所以不用考虑它不为空的情况\n   * 主键一般添加给 id 这个字段\n * not null 不能为空，意思就是必须要填 的\n * unique 不能重复，可以\n * comment 注释，注释内容放到其后的单引号中\n * default 默认值，默认内容放到其后的单引号中\\\n * engine=innodb 指定数据库引擎，MySQL用得最多的就是innodb\n\nExample: 有逼格的表创建方式\n\nmysql> create table teachers(\n    -> id int auto_increment primary key comment '主键id',\n    -> name varchar(30) not null comment '姓名',\n    -> phone varchar(20) comment '电话',\n    -> address varchar(100) default '暂时未知' comment '住址'\n    -> )engine=innodb;\nQuery OK, 0 rows affected (0.03 sec)\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 查看当初怎么创建这个表的\n\nshow create table <TableName>;\n\n\n1\n\n\nExample:\n\nmysql> show create table teachers;\n+----------+-----------------------------------------------+\n| Table    | Create Table                                  |\n+----------+-----------------------------------------------+\n| teachers | CREATE TABLE `teachers` (\n  `id` int NOT NULL AUTO_INCREMENT COMMENT '主键id',\n  `name` varchar(30) NOT NULL COMMENT '姓名',\n  `phone` varchar(20) DEFAULT NULL COMMENT '电话',\n  `address` varchar(100) DEFAULT '暂时未知' COMMENT '住址',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=gbk |\n+----------+-----------------------------------------------+\n1 row in set (0.01 sec)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n",normalizedContent:"# 创建表\n\ncreate table <tablename>;\n\n\n1\n\n\nexample: 为了显示更清楚，建议像下面这样创建表\n\nmysql> create table student(\n    -> id int,\n    -> name varchar(30),\n    -> age int\n    -> );\nquery ok, 0 rows affected (0.03 sec)\n\n\n1\n2\n3\n4\n5\n6\n\n\n表名后面跟着的括号中即为表的字段；\n\n每个字段名和其对应的数据类型之间用空格隔开；\n\n字段与字段之间用逗号隔开，最后一个字段不加逗号。\n\nmysql> show tables;\n+----------------------+\n| tables_in_jim_school |\n+----------------------+\n| studnet              |\n| teacher              |\n+----------------------+\n2 rows in set (0.01 sec)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 创建表（b格）\n\n\n# 先了解一些新鲜词儿（关键字）\n\n * auto_increment 自动增长\n * primary key 主键，关系型数据库就靠这个主键\n   * 主键是唯一的，不能重复复的，一堆数据主要靠它来区分\n   * 主键不能为空，是必须要填的，所以不用考虑它不为空的情况\n   * 主键一般添加给 id 这个字段\n * not null 不能为空，意思就是必须要填 的\n * unique 不能重复，可以\n * comment 注释，注释内容放到其后的单引号中\n * default 默认值，默认内容放到其后的单引号中\\\n * engine=innodb 指定数据库引擎，mysql用得最多的就是innodb\n\nexample: 有逼格的表创建方式\n\nmysql> create table teachers(\n    -> id int auto_increment primary key comment '主键id',\n    -> name varchar(30) not null comment '姓名',\n    -> phone varchar(20) comment '电话',\n    -> address varchar(100) default '暂时未知' comment '住址'\n    -> )engine=innodb;\nquery ok, 0 rows affected (0.03 sec)\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 查看当初怎么创建这个表的\n\nshow create table <tablename>;\n\n\n1\n\n\nexample:\n\nmysql> show create table teachers;\n+----------+-----------------------------------------------+\n| table    | create table                                  |\n+----------+-----------------------------------------------+\n| teachers | create table `teachers` (\n  `id` int not null auto_increment comment '主键id',\n  `name` varchar(30) not null comment '姓名',\n  `phone` varchar(20) default null comment '电话',\n  `address` varchar(100) default '暂时未知' comment '住址',\n  primary key (`id`)\n) engine=innodb default charset=gbk |\n+----------+-----------------------------------------------+\n1 row in set (0.01 sec)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n",charsets:{cjk:!0},lastUpdated:"2022/12/03, 17:31:39",lastUpdatedTimestamp:1670059899e3},{title:"删除数据——delete",frontmatter:{title:"删除数据——delete",date:"2022-04-15T00:29:44.000Z",permalink:"/pages/01b8a7/",tags:[null]},regularPath:"/02.MySQL/05.Frank%20-%20MySQL%E5%88%A0%E5%BA%93%E8%B7%91%E8%B7%AF/04.%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE/02.%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE%E2%80%94%E2%80%94delete.html",relativePath:"02.MySQL/05.Frank - MySQL删库跑路/04.基本操作——数据/02.删除数据——delete.md",key:"v-f94b8f2e",path:"/pages/01b8a7/",headers:[{level:2,title:"方式一",slug:"方式一",normalizedTitle:"方式一",charIndex:11},{level:2,title:"方式二",slug:"方式二",normalizedTitle:"方式二",charIndex:121},{level:2,title:"Example",slug:"example",normalizedTitle:"example",charIndex:280},{level:2,title:"反例 -关于条件一定要根据唯一的来选，否则殃及池鱼",slug:"反例-关于条件一定要根据唯一的来选-否则殃及池鱼",normalizedTitle:"反例 -关于条件一定要根据唯一的来选，否则殃及池鱼",charIndex:542}],headersStr:"方式一 方式二 Example 反例 -关于条件一定要根据唯一的来选，否则殃及池鱼",content:"# 删除数据\n\n\n# 方式一\n\ndelete from <TableName> where <Conditions>;\n\n\n1\n\n\nCondition如何设置将决定会删除哪些数据，一条或者多条，所以要谨慎设置。通常会根据唯一的去选。\n\n\n# 方式二\n\ndelete from <TableName> where <Condition1> and <Condition2>;\n\n\n1\n\n\ndelete from <TableName> where <Condition1> or <Condition2>;\n\n\n1\n\n\n使用 and 或 or 关键字。\n\n\n# Example\n\n一：删除student表中 id 为 3 的数据\n\ndelete from student where id=3;\n\n\n1\n\n\n二：删除student表中 age 小于 18 的数据\n\ndelete from student where age<18;\n\n\n1\n\n\n三：下面可以清空整个student表的数据，但清空表不建议这样写，因为它会遍历每一条数据，会很慢！\n\ndelete from student;\n\n\n1\n\n\n清空表更快的方法是 truncate table <TableName>。\n\n\n# 反例 -关于条件一定要根据唯一的来选，否则殃及池鱼\n\n有如下一张表：\n\n\n+----+------+------+\n| id | name | age  |\n+----+------+------+\n|  1 | Tom  |   10 |\n|  2 | Tom  |   18 |\n|  3 | Tom  |   20 |\n|  4 | Jim  |   20 |\n+----+------+------+\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n按如下方式删除：\n\ndelete from student where name='Tom';\n\n\n1\n\n\n最后表只剩下一条数据了。。。\n\n+----+------+------+\n| id | name | age  |\n+----+------+------+\n|  4 | Jim  |   20 |\n+----+------+------+\n\n\n1\n2\n3\n4\n5\n",normalizedContent:"# 删除数据\n\n\n# 方式一\n\ndelete from <tablename> where <conditions>;\n\n\n1\n\n\ncondition如何设置将决定会删除哪些数据，一条或者多条，所以要谨慎设置。通常会根据唯一的去选。\n\n\n# 方式二\n\ndelete from <tablename> where <condition1> and <condition2>;\n\n\n1\n\n\ndelete from <tablename> where <condition1> or <condition2>;\n\n\n1\n\n\n使用 and 或 or 关键字。\n\n\n# example\n\n一：删除student表中 id 为 3 的数据\n\ndelete from student where id=3;\n\n\n1\n\n\n二：删除student表中 age 小于 18 的数据\n\ndelete from student where age<18;\n\n\n1\n\n\n三：下面可以清空整个student表的数据，但清空表不建议这样写，因为它会遍历每一条数据，会很慢！\n\ndelete from student;\n\n\n1\n\n\n清空表更快的方法是 truncate table <tablename>。\n\n\n# 反例 -关于条件一定要根据唯一的来选，否则殃及池鱼\n\n有如下一张表：\n\n\n+----+------+------+\n| id | name | age  |\n+----+------+------+\n|  1 | tom  |   10 |\n|  2 | tom  |   18 |\n|  3 | tom  |   20 |\n|  4 | jim  |   20 |\n+----+------+------+\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n按如下方式删除：\n\ndelete from student where name='tom';\n\n\n1\n\n\n最后表只剩下一条数据了。。。\n\n+----+------+------+\n| id | name | age  |\n+----+------+------+\n|  4 | jim  |   20 |\n+----+------+------+\n\n\n1\n2\n3\n4\n5\n",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"插入数据——insert",frontmatter:{title:"插入数据——insert",date:"2022-04-15T00:29:44.000Z",permalink:"/pages/bda483/",tags:[null]},regularPath:"/02.MySQL/05.Frank%20-%20MySQL%E5%88%A0%E5%BA%93%E8%B7%91%E8%B7%AF/04.%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE/01.%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE%E2%80%94%E2%80%94insert.html",relativePath:"02.MySQL/05.Frank - MySQL删库跑路/04.基本操作——数据/01.插入数据——insert.md",key:"v-991a76d6",path:"/pages/bda483/",headers:[{level:2,title:"方式一",slug:"方式一",normalizedTitle:"方式一",charIndex:11},{level:2,title:"方式二",slug:"方式二",normalizedTitle:"方式二",charIndex:179},{level:2,title:"Example",slug:"example",normalizedTitle:"example",charIndex:288},{level:2,title:"实际开发过程中肯定不是这么插入数据，但是得会。",slug:"实际开发过程中肯定不是这么插入数据-但是得会。",normalizedTitle:"实际开发过程中肯定不是这么插入数据，但是得会。",charIndex:1363}],headersStr:"方式一 方式二 Example 实际开发过程中肯定不是这么插入数据，但是得会。",content:"# 插入数据\n\n\n# 方式一\n\ninsert into <TableName> ([Field1], [Field2], [Field3]...) values ([Value1], [Value2], [Value3]...);\n\n\n1\n\n\n第一个括号中的字段顺序可以不用与表结构相同，但是后一个括号中的值的顺序必须与前一个括号中字段的顺序对应。\n\n\n# 方式二\n\ninsert into <TableName> values ([Value1], [Value2], [Value3]...);\n\n\n1\n\n\n可以省略第一个括号，但是值的顺序必须与字段的顺序相同。\n\n\n# Example\n\n有如下这样一张表：\n\nmysql> desc student;\n+-------+-------------+------+-----+---------+----------------+\n| Field | Type        | Null | Key | Default | Extra          |\n+-------+-------------+------+-----+---------+----------------+\n| id    | int(11)     | NO   | PRI | NULL    | auto_increment |\n| name  | varchar(30) | NO   |     | NULL    |                |\n| age   | int(11)     | YES  |     | NULL    |                |\n+-------+-------------+------+-----+---------+----------------+\n3 rows in set (0.00 sec)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n用如下几条语句演示不同的数据插入方式：\n\n一：常规\n\nmysql> insert into student (id, name, age) values (1, 'Jim', 20);\n\n\n1\n\n\n二：自定义填入值的顺序，根据第一个括号中字段的顺序\n\nmysql> insert into student (name, id, age) values ('Tom', 2, 19)\n\n\n1\n\n\n三：简化，根据表结构字段顺序\n\nmysql> insert into student values (3, 'Jack', 20);\n\n\n1\n\n\n四：Null 为 YES 的字段可填 null\n\nmysql> insert into student values (4, 'Gray', null)\n\n\n1\n\n\n五：有 auto_increment 的字段可填 null\n\nmysql> insert into student values (null, 'Jarry', 18)\n\n\n1\n\n\n六：有 Default 值的字段可填 default\n\nmysql> insert into student values (6, 'Summer', default);\n\n\n1\n\n\n\n# 实际开发过程中肯定不是这么插入数据，但是得会。\n\n\n# 插入多条数据\n\ninsert into <TableName> values\n--\x3e ([Value1], [Value2], [Value3]...),\n--\x3e ([Value1], [Value2], [Value3]...),\n--\x3e ([Value1], [Value2], [Value3]...);\n\n\n1\n2\n3\n4\n",normalizedContent:"# 插入数据\n\n\n# 方式一\n\ninsert into <tablename> ([field1], [field2], [field3]...) values ([value1], [value2], [value3]...);\n\n\n1\n\n\n第一个括号中的字段顺序可以不用与表结构相同，但是后一个括号中的值的顺序必须与前一个括号中字段的顺序对应。\n\n\n# 方式二\n\ninsert into <tablename> values ([value1], [value2], [value3]...);\n\n\n1\n\n\n可以省略第一个括号，但是值的顺序必须与字段的顺序相同。\n\n\n# example\n\n有如下这样一张表：\n\nmysql> desc student;\n+-------+-------------+------+-----+---------+----------------+\n| field | type        | null | key | default | extra          |\n+-------+-------------+------+-----+---------+----------------+\n| id    | int(11)     | no   | pri | null    | auto_increment |\n| name  | varchar(30) | no   |     | null    |                |\n| age   | int(11)     | yes  |     | null    |                |\n+-------+-------------+------+-----+---------+----------------+\n3 rows in set (0.00 sec)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n用如下几条语句演示不同的数据插入方式：\n\n一：常规\n\nmysql> insert into student (id, name, age) values (1, 'jim', 20);\n\n\n1\n\n\n二：自定义填入值的顺序，根据第一个括号中字段的顺序\n\nmysql> insert into student (name, id, age) values ('tom', 2, 19)\n\n\n1\n\n\n三：简化，根据表结构字段顺序\n\nmysql> insert into student values (3, 'jack', 20);\n\n\n1\n\n\n四：null 为 yes 的字段可填 null\n\nmysql> insert into student values (4, 'gray', null)\n\n\n1\n\n\n五：有 auto_increment 的字段可填 null\n\nmysql> insert into student values (null, 'jarry', 18)\n\n\n1\n\n\n六：有 default 值的字段可填 default\n\nmysql> insert into student values (6, 'summer', default);\n\n\n1\n\n\n\n# 实际开发过程中肯定不是这么插入数据，但是得会。\n\n\n# 插入多条数据\n\ninsert into <tablename> values\n--\x3e ([value1], [value2], [value3]...),\n--\x3e ([value1], [value2], [value3]...),\n--\x3e ([value1], [value2], [value3]...);\n\n\n1\n2\n3\n4\n",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"更新数据——update",frontmatter:{title:"更新数据——update",date:"2022-04-15T00:29:44.000Z",permalink:"/pages/417c02/",tags:[null]},regularPath:"/02.MySQL/05.Frank%20-%20MySQL%E5%88%A0%E5%BA%93%E8%B7%91%E8%B7%AF/04.%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE/04.%E6%9B%B4%E6%96%B0%E6%95%B0%E6%8D%AE%E2%80%94%E2%80%94update.html",relativePath:"02.MySQL/05.Frank - MySQL删库跑路/04.基本操作——数据/04.更新数据——update.md",key:"v-08ea863e",path:"/pages/417c02/",headers:[{level:2,title:"方式一",slug:"方式一",normalizedTitle:"方式一",charIndex:11},{level:2,title:"方式二",slug:"方式二",normalizedTitle:"方式二",charIndex:135},{level:2,title:"Example",slug:"example",normalizedTitle:"example",charIndex:336}],headersStr:"方式一 方式二 Example",content:"# 更新数据\n\n\n# 方式一\n\nupdate <TableName> set <Value1>, <Value2> ... where <Condition>; \n\n\n1\n\n\nValue1、Value2...就是要被更新的值，根据 Condition 来更新。\n\n\n# 方式二\n\nupdate <TableName> set <Vaue1>, <Value2> ... where <Condition1> and <Condition2>;\n\n\n1\n\n\nupdate <TableName> set <Vaue1>, <Value2> ... where <Condition1> or <Condition2>;\n\n\n1\n\n\n使用 and 和 or 关键字。\n\n\n# Example\n\n有如下一张 student 表：\n\n+----+------+------+\n| id | name | age  |\n+----+------+------+\n|  1 | tom  |   18 |\n|  2 | jim  |   18 |\n+----+------+------+\n\n\n1\n2\n3\n4\n5\n6\n\n\n更新表：\n\nupdate student set name='Tom' where id=1;\n\n\n1\n\n\nupdate student set name='Jim', age=20 where id=2;\n\n\n1\n\n\n查看表：\n\n+----+------+------+\n| id | name | age  |\n+----+------+------+\n|  1 | Tom  |   18 |\n|  2 | Jim  |   20 |\n+----+------+------+\n\n\n1\n2\n3\n4\n5\n6\n",normalizedContent:"# 更新数据\n\n\n# 方式一\n\nupdate <tablename> set <value1>, <value2> ... where <condition>; \n\n\n1\n\n\nvalue1、value2...就是要被更新的值，根据 condition 来更新。\n\n\n# 方式二\n\nupdate <tablename> set <vaue1>, <value2> ... where <condition1> and <condition2>;\n\n\n1\n\n\nupdate <tablename> set <vaue1>, <value2> ... where <condition1> or <condition2>;\n\n\n1\n\n\n使用 and 和 or 关键字。\n\n\n# example\n\n有如下一张 student 表：\n\n+----+------+------+\n| id | name | age  |\n+----+------+------+\n|  1 | tom  |   18 |\n|  2 | jim  |   18 |\n+----+------+------+\n\n\n1\n2\n3\n4\n5\n6\n\n\n更新表：\n\nupdate student set name='tom' where id=1;\n\n\n1\n\n\nupdate student set name='jim', age=20 where id=2;\n\n\n1\n\n\n查看表：\n\n+----+------+------+\n| id | name | age  |\n+----+------+------+\n|  1 | tom  |   18 |\n|  2 | jim  |   20 |\n+----+------+------+\n\n\n1\n2\n3\n4\n5\n6\n",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"清空表——truncate",frontmatter:{title:"清空表——truncate",date:"2022-04-15T00:29:44.000Z",permalink:"/pages/fb0760/",tags:[null]},regularPath:"/02.MySQL/05.Frank%20-%20MySQL%E5%88%A0%E5%BA%93%E8%B7%91%E8%B7%AF/04.%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE/03.%E6%B8%85%E7%A9%BA%E8%A1%A8%E2%80%94%E2%80%94truncate.html",relativePath:"02.MySQL/05.Frank - MySQL删库跑路/04.基本操作——数据/03.清空表——truncate.md",key:"v-f7583148",path:"/pages/fb0760/",headers:[{level:2,title:"Truncate table",slug:"truncate-table",normalizedTitle:"truncate table",charIndex:10},{level:2,title:"Example",slug:"example",normalizedTitle:"example",charIndex:145},{level:2,title:"反例 - 不建议使用 delete from <TableName> 来清空表！",slug:"反例-不建议使用-delete-from-tablename-来清空表",normalizedTitle:"反例 - 不建议使用 delete from <tablename> 来清空表！",charIndex:465}],headersStr:"Truncate table Example 反例 - 不建议使用 delete from <TableName> 来清空表！",content:"# 清空表\n\n\n# Truncate table\n\n虽然 delete from <TableName> 可以清空表，但它会一条一条的遍历这样删除，会很慢！\n\n清空表通常使用 truncate table <TableName>;，它会克隆表的结构做个新表，然后把原表直接销毁掉。\n\n\n# Example\n\n有如下一张 student 表：\n\n+----+------+------+\n| id | name | age  |\n+----+------+------+\n|  1 | Tom  |   19 |\n|  2 | Tom  |   10 |\n|  3 | Jim  |   20 |\n|  4 | Jim  |   39 |\n+----+------+------+\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n清空表：\n\nturncate table student;\n\n\n1\n\n\n查看：成功\n\nmysql> select * from student;\nEmpty set (0.00 sec)\n\n\n1\n2\n\n\n\n# 反例 - 不建议使用 delete from <TableName> 来清空表！\n\n有如下一张 student 表：\n\n+----+-------+------+\n| id | name  | age  |\n+----+-------+------+\n|  2 | Tom   |   18 |\n|  3 | Jerry |   22 |\n+----+-------+------+\n\n\n1\n2\n3\n4\n5\n6\n\n\n使用 delete from <TableName> 来清空表：\n\ndelete from student;\n\n\n1\n\n\n然后像下面这样追加一条数据（注意 null）：\n\ninsert into student values (null, 'Jim', 20);\n\n\n1\n\n\n查看表：\n\n+----+-------+------+\n| id | name  | age  |\n+----+-------+------+\n|  4 | Jim   |   20 |\n+----+-------+------+\n\n\n1\n2\n3\n4\n5\n\n\n注意这一条数据的 id，居然是 4 ?! ——一定要去研究一下为什么会这样。\n\n而如果使用 turncate table student 清空表则不会出现这样的情况。",normalizedContent:"# 清空表\n\n\n# truncate table\n\n虽然 delete from <tablename> 可以清空表，但它会一条一条的遍历这样删除，会很慢！\n\n清空表通常使用 truncate table <tablename>;，它会克隆表的结构做个新表，然后把原表直接销毁掉。\n\n\n# example\n\n有如下一张 student 表：\n\n+----+------+------+\n| id | name | age  |\n+----+------+------+\n|  1 | tom  |   19 |\n|  2 | tom  |   10 |\n|  3 | jim  |   20 |\n|  4 | jim  |   39 |\n+----+------+------+\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n清空表：\n\nturncate table student;\n\n\n1\n\n\n查看：成功\n\nmysql> select * from student;\nempty set (0.00 sec)\n\n\n1\n2\n\n\n\n# 反例 - 不建议使用 delete from <tablename> 来清空表！\n\n有如下一张 student 表：\n\n+----+-------+------+\n| id | name  | age  |\n+----+-------+------+\n|  2 | tom   |   18 |\n|  3 | jerry |   22 |\n+----+-------+------+\n\n\n1\n2\n3\n4\n5\n6\n\n\n使用 delete from <tablename> 来清空表：\n\ndelete from student;\n\n\n1\n\n\n然后像下面这样追加一条数据（注意 null）：\n\ninsert into student values (null, 'jim', 20);\n\n\n1\n\n\n查看表：\n\n+----+-------+------+\n| id | name  | age  |\n+----+-------+------+\n|  4 | jim   |   20 |\n+----+-------+------+\n\n\n1\n2\n3\n4\n5\n\n\n注意这一条数据的 id，居然是 4 ?! ——一定要去研究一下为什么会这样。\n\n而如果使用 turncate table student 清空表则不会出现这样的情况。",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"查询表数据(基本)——select",frontmatter:{title:"查询表数据(基本)——select",date:"2022-04-15T00:29:44.000Z",permalink:"/pages/2d27de/",tags:[null]},regularPath:"/02.MySQL/05.Frank%20-%20MySQL%E5%88%A0%E5%BA%93%E8%B7%91%E8%B7%AF/04.%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE/05.%E6%9F%A5%E8%AF%A2%E8%A1%A8%E6%95%B0%E6%8D%AE(%E5%9F%BA%E6%9C%AC)%E2%80%94%E2%80%94select.html",relativePath:"02.MySQL/05.Frank - MySQL删库跑路/04.基本操作——数据/05.查询表数据(基本)——select.md",key:"v-4c4668ed",path:"/pages/2d27de/",headers:[{level:2,title:"基础查询语句一",slug:"基础查询语句一",normalizedTitle:"基础查询语句一",charIndex:61},{level:2,title:"基础查询语句二",slug:"基础查询语句二",normalizedTitle:"基础查询语句二",charIndex:106},{level:2,title:"Example",slug:"example",normalizedTitle:"example",charIndex:181}],headersStr:"基础查询语句一 基础查询语句二 Example",content:"# 查询表数据（基本）\n\n对初学者来说，在查询这块要很下功夫 。\n\n下面是两个最简单的查询语句，后面还有更难的。\n\n\n# 基础查询语句一\n\nselect * from <TableName>;\n\n\n1\n\n\n\n# 基础查询语句二\n\nselect <FieldName1>, <FieldName2> ... from <TableName>; \n\n\n1\n\n\n\n# Example\n\n有如下一张 student 表：\n\n+----+------+------+\n| id | name | age  |\n+----+------+------+\n|  1 | Tom  |   18 |\n|  2 | Jim  |   20 |\n+----+------+------+\n\n\n1\n2\n3\n4\n5\n6\n\n\n使用基础查询语句一来查：\n\nmysql> select * from student;\n+----+------+------+\n| id | name | age  |\n+----+------+------+\n|  1 | Tom  |   18 |\n|  2 | Jim  |   20 |\n+----+------+------+\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n使用基础查询语句二来查：\n\nmysql> select id, name from student;\n+----+------+\n| id | name |\n+----+------+\n|  1 | Tom  |\n|  2 | Jim  |\n+----+------+\n\n\n1\n2\n3\n4\n5\n6\n7\n",normalizedContent:"# 查询表数据（基本）\n\n对初学者来说，在查询这块要很下功夫 。\n\n下面是两个最简单的查询语句，后面还有更难的。\n\n\n# 基础查询语句一\n\nselect * from <tablename>;\n\n\n1\n\n\n\n# 基础查询语句二\n\nselect <fieldname1>, <fieldname2> ... from <tablename>; \n\n\n1\n\n\n\n# example\n\n有如下一张 student 表：\n\n+----+------+------+\n| id | name | age  |\n+----+------+------+\n|  1 | tom  |   18 |\n|  2 | jim  |   20 |\n+----+------+------+\n\n\n1\n2\n3\n4\n5\n6\n\n\n使用基础查询语句一来查：\n\nmysql> select * from student;\n+----+------+------+\n| id | name | age  |\n+----+------+------+\n|  1 | tom  |   18 |\n|  2 | jim  |   20 |\n+----+------+------+\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n使用基础查询语句二来查：\n\nmysql> select id, name from student;\n+----+------+\n| id | name |\n+----+------+\n|  1 | tom  |\n|  2 | jim  |\n+----+------+\n\n\n1\n2\n3\n4\n5\n6\n7\n",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"引用数据库和查看数据库中的表",frontmatter:{title:"引用数据库和查看数据库中的表",date:"2022-04-15T00:29:44.000Z",permalink:"/pages/130114/",tags:["MySQL"]},regularPath:"/02.MySQL/05.Frank%20-%20MySQL%E5%88%A0%E5%BA%93%E8%B7%91%E8%B7%AF/03.%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E2%80%94%E2%80%94%E8%A1%A8/02.%E5%BC%95%E7%94%A8%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E6%9F%A5%E7%9C%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E7%9A%84%E8%A1%A8.html",relativePath:"02.MySQL/05.Frank - MySQL删库跑路/03.基本操作——表/02.引用数据库和查看数据库中的表.md",key:"v-2ec52027",path:"/pages/130114/",headers:[{level:2,title:"引用数据库",slug:"引用数据库",normalizedTitle:"引用数据库",charIndex:2},{level:2,title:"查看数据库中的表",slug:"查看数据库中的表",normalizedTitle:"查看数据库中的表",charIndex:8}],headersStr:"引用数据库 查看数据库中的表",content:"# 引用数据库和查看数据库中的表\n\n\n# 引用数据库\n\nuse <DatabaseName>;\n\n\n1\n\n\nExample:\n\nuse students;\n\n\n1\n\n\n为什么要引用数据库？\n\n就像京东指定哪个仓库发货一样。\n\n\n# 查看数据库中的表\n\nshow tables;\n\n\n1\n\n\nExample:\n\nmysql> show tables;\nEmpty set (0.00 sec)\n\n\n1\n2\n",normalizedContent:"# 引用数据库和查看数据库中的表\n\n\n# 引用数据库\n\nuse <databasename>;\n\n\n1\n\n\nexample:\n\nuse students;\n\n\n1\n\n\n为什么要引用数据库？\n\n就像京东指定哪个仓库发货一样。\n\n\n# 查看数据库中的表\n\nshow tables;\n\n\n1\n\n\nexample:\n\nmysql> show tables;\nempty set (0.00 sec)\n\n\n1\n2\n",charsets:{cjk:!0},lastUpdated:"2022/12/03, 17:31:39",lastUpdatedTimestamp:1670059899e3},{title:"SQL语句区分",frontmatter:{title:"SQL语句区分",date:"2022-04-15T00:29:44.000Z",permalink:"/pages/892416/",tags:[null]},regularPath:"/02.MySQL/05.Frank%20-%20MySQL%E5%88%A0%E5%BA%93%E8%B7%91%E8%B7%AF/04.%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE/06.SQL%E8%AF%AD%E5%8F%A5%E5%8C%BA%E5%88%86.html",relativePath:"02.MySQL/05.Frank - MySQL删库跑路/04.基本操作——数据/06.SQL语句区分.md",key:"v-4ff5c178",path:"/pages/892416/",headers:[{level:2,title:"DDL",slug:"ddl",normalizedTitle:"ddl",charIndex:2},{level:2,title:"DML",slug:"dml",normalizedTitle:"dml",charIndex:69},{level:2,title:"DCL",slug:"dcl",normalizedTitle:"dcl",charIndex:143}],headersStr:"DDL DML DCL",content:"# DDL\n\nData Difintion Language，数据库定义语言\n\ncreate 、drop 、alter、show\n\n\n# DML\n\nData Manipulation Language，数据操作语言\n\ninsert 、delete 、update、select\n\n\n# DCL\n\nData Control Language，数据库控制语言",normalizedContent:"# ddl\n\ndata difintion language，数据库定义语言\n\ncreate 、drop 、alter、show\n\n\n# dml\n\ndata manipulation language，数据操作语言\n\ninsert 、delete 、update、select\n\n\n# dcl\n\ndata control language，数据库控制语言",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"字符集编码问题",frontmatter:{title:"字符集编码问题",date:"2022-04-15T00:29:44.000Z",permalink:"/pages/c9916e/",tags:[null]},regularPath:"/02.MySQL/05.Frank%20-%20MySQL%E5%88%A0%E5%BA%93%E8%B7%91%E8%B7%AF/04.%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE/07.%E5%AD%97%E7%AC%A6%E9%9B%86%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98.html",relativePath:"02.MySQL/05.Frank - MySQL删库跑路/04.基本操作——数据/07.字符集编码问题.md",key:"v-64aff65b",path:"/pages/c9916e/",headers:[{level:2,title:"情景",slug:"情景",normalizedTitle:"情景",charIndex:14},{level:2,title:"查看客户端和显示结果使用的字符集编码",slug:"查看客户端和显示结果使用的字符集编码",normalizedTitle:"查看客户端和显示结果使用的字符集编码",charIndex:84},{level:2,title:"修改字符集编码",slug:"修改字符集编码",normalizedTitle:"修改字符集编码",charIndex:1342}],headersStr:"情景 查看客户端和显示结果使用的字符集编码 修改字符集编码",content:"# 字符集编码问题\n\n\n# 情景\n\nWindows上的MySQL客户端使用中文出现乱码问题。那就要检查一下终端使用的字符集了，比如cmd就是 gbk 字符集。\n\n\n# 查看客户端和显示结果使用的字符集编码\n\nshow variables like 'character_set_%';\n\n\n1\n\n\n显示如下：\n\n+--------------------------+---------------------------------------------------------+\n| Variable_name            | Value                                                   |\n+--------------------------+---------------------------------------------------------+\n| character_set_client     | gbk                                                     |\n| character_set_connection | gbk                                                     |\n| character_set_database   | gbk                                                     |\n| character_set_filesystem | binary                                                  |\n| character_set_results    | gbk                                                     |\n| character_set_server     | latin1                                                  |\n| character_set_system     | utf8                                                    |\n| character_sets_dir       | C:\\Program Files\\MySQL\\MySQL Server 5.7\\share\\charsets\\ |\n+--------------------------+---------------------------------------------------------+\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n其中最主要的就是 character_set_client 和 character_set_results，在Windows上只要确保最主要的这两个值为 gbk 就行了，在实际开发过程中这些值肯定都是 utf8。\n\n\n# 修改字符集编码\n\nset character_set_client=gbk;\n\n\n1\n\n\nset character_set_results=gbk;\n\n\n1\n\n\n> 注意！初学者在Windows上使用GBK没毛病，但是千万不要把公司里的也改成GBK！一定不能瞎几把搞！",normalizedContent:"# 字符集编码问题\n\n\n# 情景\n\nwindows上的mysql客户端使用中文出现乱码问题。那就要检查一下终端使用的字符集了，比如cmd就是 gbk 字符集。\n\n\n# 查看客户端和显示结果使用的字符集编码\n\nshow variables like 'character_set_%';\n\n\n1\n\n\n显示如下：\n\n+--------------------------+---------------------------------------------------------+\n| variable_name            | value                                                   |\n+--------------------------+---------------------------------------------------------+\n| character_set_client     | gbk                                                     |\n| character_set_connection | gbk                                                     |\n| character_set_database   | gbk                                                     |\n| character_set_filesystem | binary                                                  |\n| character_set_results    | gbk                                                     |\n| character_set_server     | latin1                                                  |\n| character_set_system     | utf8                                                    |\n| character_sets_dir       | c:\\program files\\mysql\\mysql server 5.7\\share\\charsets\\ |\n+--------------------------+---------------------------------------------------------+\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n其中最主要的就是 character_set_client 和 character_set_results，在windows上只要确保最主要的这两个值为 gbk 就行了，在实际开发过程中这些值肯定都是 utf8。\n\n\n# 修改字符集编码\n\nset character_set_client=gbk;\n\n\n1\n\n\nset character_set_results=gbk;\n\n\n1\n\n\n> 注意！初学者在windows上使用gbk没毛病，但是千万不要把公司里的也改成gbk！一定不能瞎几把搞！",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"数据库的数据类型问题",frontmatter:{title:"数据库的数据类型问题",date:"2022-04-15T00:29:44.000Z",permalink:"/pages/88991f/",tags:[null]},regularPath:"/02.MySQL/05.Frank%20-%20MySQL%E5%88%A0%E5%BA%93%E8%B7%91%E8%B7%AF/05.%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/01.%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E9%97%AE%E9%A2%98.html",relativePath:"02.MySQL/05.Frank - MySQL删库跑路/05.数据类型/01.数据库的数据类型问题.md",key:"v-1262b87e",path:"/pages/88991f/",headersStr:null,content:"# 数据类型问题\n\n吴俊笔记本 - MySQL - 06 数据类型\n\n>  * 更小的通常更好\n>    * 一般情况下，应该尽量使用可以正确存储数据的最小数据类型。更小的数据类型通常更快。\n>  * 简单就好\n>    * 简单数据类型的操作通常需要更少的 cpu 周期\n>    * 例如整型比字符操作代价更低，因为字符集和校对规则（排序规则）使字符比较比整型比较更复杂，使用整型存储 IP 地址。\n>  * 尽量避免 NULL\n>    * 通常情况下最好制定列为 NOT NULL，除非真的需要存储 NULL 值。可为 NULL 的列更难优化。\n\n如果你是一个实习生，那定义数据类型就没你什么事儿。但是你得了解呀，你要知道有这么回事儿。\n\n最重要的是——表的查询，这可以说是一大痛点，可不是所有的表都是 select * from <TableName> 。\n\n对于数据类型而言，“没有一个统一的标准，但应该符合业务项目的逻辑”\n\n> 手机号，区号和号码要分开存吗\n> \n> 性别，真的是用“男”和“女”吗？只有“男”和“女”吗？",normalizedContent:"# 数据类型问题\n\n吴俊笔记本 - mysql - 06 数据类型\n\n>  * 更小的通常更好\n>    * 一般情况下，应该尽量使用可以正确存储数据的最小数据类型。更小的数据类型通常更快。\n>  * 简单就好\n>    * 简单数据类型的操作通常需要更少的 cpu 周期\n>    * 例如整型比字符操作代价更低，因为字符集和校对规则（排序规则）使字符比较比整型比较更复杂，使用整型存储 ip 地址。\n>  * 尽量避免 null\n>    * 通常情况下最好制定列为 not null，除非真的需要存储 null 值。可为 null 的列更难优化。\n\n如果你是一个实习生，那定义数据类型就没你什么事儿。但是你得了解呀，你要知道有这么回事儿。\n\n最重要的是——表的查询，这可以说是一大痛点，可不是所有的表都是 select * from <tablename> 。\n\n对于数据类型而言，“没有一个统一的标准，但应该符合业务项目的逻辑”\n\n> 手机号，区号和号码要分开存吗\n> \n> 性别，真的是用“男”和“女”吗？只有“男”和“女”吗？",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"数据类型",frontmatter:{title:"数据类型",date:"2022-04-15T00:29:44.000Z",permalink:"/pages/ed2df9/",tags:[null]},regularPath:"/02.MySQL/05.Frank%20-%20MySQL%E5%88%A0%E5%BA%93%E8%B7%91%E8%B7%AF/05.%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/02.%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html",relativePath:"02.MySQL/05.Frank - MySQL删库跑路/05.数据类型/02.数据类型.md",key:"v-c900921e",path:"/pages/ed2df9/",headers:[{level:2,title:"整数类型",slug:"整数类型",normalizedTitle:"整数类型",charIndex:2},{level:2,title:"浮点数",slug:"浮点数",normalizedTitle:"浮点数",charIndex:152},{level:2,title:"定点数",slug:"定点数",normalizedTitle:"定点数",charIndex:754},{level:2,title:"字符串",slug:"字符串",normalizedTitle:"字符串",charIndex:982},{level:2,title:"布尔 boolean",slug:"布尔-boolean",normalizedTitle:"布尔 boolean",charIndex:1274},{level:2,title:"枚举 enum",slug:"枚举-enum",normalizedTitle:"枚举 enum",charIndex:1607},{level:2,title:"集合 set",slug:"集合-set",normalizedTitle:"集合 set",charIndex:2242},{level:2,title:"时间日期 time、date",slug:"时间日期-time、date",normalizedTitle:"时间日期 time、date",charIndex:2670}],headersStr:"整数类型 浮点数 定点数 字符串 布尔 boolean 枚举 enum 集合 set 时间日期 time、date",content:"# 整数类型\n\n>  * TINYINT, SMALLINT, MEDIUMINT, INT, BIGINT 分别使用 8, 16, 24, 32, 64 位存储空间，一般情况下越小的列越好。\n>  * INT(11) 中的数字只是规定了交互工具显示字符的个数，对于存储和计算来说是没有意义的。\n\n\n# 浮点数\n\nFLOAT 和 DOUBLE 为浮点类型，浮点类型因其精度的问题通常并不会被采用，除非一些必要设计。\n\n<FieldName> float(<Number1>,<Number2>)\n\n * Number1：总位数\n * Number2：小数位数，如果位数超过了该位数就会四舍五入，就会导致数据不准确了。\n\nExample:\n\n创建一张 test:\n\nmysql> create table if not exists test(\n    -> number_1 float(3,1),\n    -> number_2 float(3,2)\n    -> );\n\n\n1\n2\n3\n4\n\n\n插入若干数据:\n\nmysql> insert into test values\n\t-> (3.1,3.22),\n    -> (3.222,3.337777);\n\n\n1\n2\n3\n\n\n查询:\n\nmysql> select * from test;\n+----------+----------+\n| number_1 | number_2 |\n+----------+----------+\n|      3.1 |     3.22 |\n|      3.2 |     3.34 |\n+----------+----------+\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n可以看到查询结果已被四舍五入。\n\n\n# 定点数\n\nDECIMAL整数和小数部分分开存储。不会像浮点数一样产生精度丢失。\n\n>  * FLOAT 和 DOUBLE 为浮点类型，DECIMAL 为高精度小数类型。\n>  * CPU 原生不支持 DECIMAl 类型的计算，因此 DECIMAL 的计算代价更高。\n>  * FLOAT、DOUBLE 和 DECIMAL 都可以指定列宽，例如 DECIMAL(18, 9) 表示总共 18 位，取 9 位存储小数部分，剩下 9 位存储整数部分。\n\n\n# 字符串\n\n# CHAR\n\n * CHAR 定长，末尾空格删除。\n * 使用场景：短字符串；定长字符串；经常变更的数据\n\n# VARCHAR\n\n * VARCHAR 变长，末尾空格保留，\n * VARCHAR 在 UPDATE 时若比原来更长，需要做额外的工作。MyISAM 拆数据，InnoDB 分裂页。\n * 使用场景：最大长度比平均长度大很多；更新很少；复杂字符集\n\n# BLOB 和 TEXT\n\nBLOB 和 TEXT 都是为了存储很大的数据而设计的字符串数据类型\n\n * BLOB：二进制存储\n * TEXT：字符串存储\n\n尽量避免使用 BLOB 和 TEXT 类型\n\n\n# 布尔 boolean\n\nmysql> create table if not exists test_5(\n    -> value_1 boolean,\n    -> value_2 boolean\n    -> );\n\n\n1\n2\n3\n4\n\n\nmysql> insert into test_5 values(true,false);\n\n\n1\n\n\nmysql> select * from test_5;\n+---------+---------+\n| value_1 | value_2 |\n+---------+---------+\n|       1 |       0 |\n+---------+---------+\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 枚举 enum\n\n枚举类型从给定的选项中选取一个。\n\nmysql> create table if not exists test_5(\n    -> gender enmu('male','female','?','nothing')\n    -> );\n\n\n1\n2\n3\n\n\nmysql> insert into test_6 values('male'),('female'),('?'),('nothing');\n\n\n1\n\n\nmysql> select * from test_6;\n+---------+\n| gender  |\n+---------+\n| male    |\n| female  |\n| ?       |\n| nothing |\n+---------+\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n枚举类型的另类存储方式（节省空间）：\n\nmysql> insert into test_6 values(1),(2);\n\n\n1\n\n\n1 代表“male”，2 代表“female”\n\nmysql> select * from test_6;\n+---------+\n| gender  |\n+---------+\n| male    |\n| female  |\n| ?       |\n| nothing |\n| male    |\n| female  |\n+---------+\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 集合 set\n\n枚举类型从给定的选项中选取多个。多个选项用逗号隔开，放在一对引号内。\n\nmysql> create table if not exists test_7(\n    -> interested set('文学','哲学','IT','教育','数学','MBA','经济')\n    -> );\n\n\n1\n2\n3\n\n\nmysql> insert into test_7 values\n    -> ('哲学,IT,教育'),\n    -> ('经济,数学'),\n    -> ('MBA');\n\n\n1\n2\n3\n4\n\n\nmysql> select * from test_7;\n+--------------+\n| interested   |\n+--------------+\n| 哲学,IT,教育 |\n| 数学,经济    |\n| MBA          |\n+--------------+\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 时间日期 time、date\n\n行业内规定，每一张表都应该有一个时间/日期的字段。你这个数据是什么时候插入的，什么时候更新的...（当然这个时间通常是用程序来插入）\n\n> DATE、TIME、YEAR、DATETIME、TIMESTAMP\n> \n> 实际应用中普遍使用DATETIME\n\nmysql> create table if not exists test_8(`time` datetime);\n\n\n1\n\n\nmysql> insert into test_8 values ('2022-04-08 16:18:59');\n\n\n1\n\n\nmysql> select * from test_8;\n+---------------------+\n| time                |\n+---------------------+\n| 2022-04-08 16:18:59 |\n+---------------------+\n\n\n1\n2\n3\n4\n5\n6\n",normalizedContent:"# 整数类型\n\n>  * tinyint, smallint, mediumint, int, bigint 分别使用 8, 16, 24, 32, 64 位存储空间，一般情况下越小的列越好。\n>  * int(11) 中的数字只是规定了交互工具显示字符的个数，对于存储和计算来说是没有意义的。\n\n\n# 浮点数\n\nfloat 和 double 为浮点类型，浮点类型因其精度的问题通常并不会被采用，除非一些必要设计。\n\n<fieldname> float(<number1>,<number2>)\n\n * number1：总位数\n * number2：小数位数，如果位数超过了该位数就会四舍五入，就会导致数据不准确了。\n\nexample:\n\n创建一张 test:\n\nmysql> create table if not exists test(\n    -> number_1 float(3,1),\n    -> number_2 float(3,2)\n    -> );\n\n\n1\n2\n3\n4\n\n\n插入若干数据:\n\nmysql> insert into test values\n\t-> (3.1,3.22),\n    -> (3.222,3.337777);\n\n\n1\n2\n3\n\n\n查询:\n\nmysql> select * from test;\n+----------+----------+\n| number_1 | number_2 |\n+----------+----------+\n|      3.1 |     3.22 |\n|      3.2 |     3.34 |\n+----------+----------+\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n可以看到查询结果已被四舍五入。\n\n\n# 定点数\n\ndecimal整数和小数部分分开存储。不会像浮点数一样产生精度丢失。\n\n>  * float 和 double 为浮点类型，decimal 为高精度小数类型。\n>  * cpu 原生不支持 decimal 类型的计算，因此 decimal 的计算代价更高。\n>  * float、double 和 decimal 都可以指定列宽，例如 decimal(18, 9) 表示总共 18 位，取 9 位存储小数部分，剩下 9 位存储整数部分。\n\n\n# 字符串\n\n# char\n\n * char 定长，末尾空格删除。\n * 使用场景：短字符串；定长字符串；经常变更的数据\n\n# varchar\n\n * varchar 变长，末尾空格保留，\n * varchar 在 update 时若比原来更长，需要做额外的工作。myisam 拆数据，innodb 分裂页。\n * 使用场景：最大长度比平均长度大很多；更新很少；复杂字符集\n\n# blob 和 text\n\nblob 和 text 都是为了存储很大的数据而设计的字符串数据类型\n\n * blob：二进制存储\n * text：字符串存储\n\n尽量避免使用 blob 和 text 类型\n\n\n# 布尔 boolean\n\nmysql> create table if not exists test_5(\n    -> value_1 boolean,\n    -> value_2 boolean\n    -> );\n\n\n1\n2\n3\n4\n\n\nmysql> insert into test_5 values(true,false);\n\n\n1\n\n\nmysql> select * from test_5;\n+---------+---------+\n| value_1 | value_2 |\n+---------+---------+\n|       1 |       0 |\n+---------+---------+\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 枚举 enum\n\n枚举类型从给定的选项中选取一个。\n\nmysql> create table if not exists test_5(\n    -> gender enmu('male','female','?','nothing')\n    -> );\n\n\n1\n2\n3\n\n\nmysql> insert into test_6 values('male'),('female'),('?'),('nothing');\n\n\n1\n\n\nmysql> select * from test_6;\n+---------+\n| gender  |\n+---------+\n| male    |\n| female  |\n| ?       |\n| nothing |\n+---------+\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n枚举类型的另类存储方式（节省空间）：\n\nmysql> insert into test_6 values(1),(2);\n\n\n1\n\n\n1 代表“male”，2 代表“female”\n\nmysql> select * from test_6;\n+---------+\n| gender  |\n+---------+\n| male    |\n| female  |\n| ?       |\n| nothing |\n| male    |\n| female  |\n+---------+\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 集合 set\n\n枚举类型从给定的选项中选取多个。多个选项用逗号隔开，放在一对引号内。\n\nmysql> create table if not exists test_7(\n    -> interested set('文学','哲学','it','教育','数学','mba','经济')\n    -> );\n\n\n1\n2\n3\n\n\nmysql> insert into test_7 values\n    -> ('哲学,it,教育'),\n    -> ('经济,数学'),\n    -> ('mba');\n\n\n1\n2\n3\n4\n\n\nmysql> select * from test_7;\n+--------------+\n| interested   |\n+--------------+\n| 哲学,it,教育 |\n| 数学,经济    |\n| mba          |\n+--------------+\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 时间日期 time、date\n\n行业内规定，每一张表都应该有一个时间/日期的字段。你这个数据是什么时候插入的，什么时候更新的...（当然这个时间通常是用程序来插入）\n\n> date、time、year、datetime、timestamp\n> \n> 实际应用中普遍使用datetime\n\nmysql> create table if not exists test_8(`time` datetime);\n\n\n1\n\n\nmysql> insert into test_8 values ('2022-04-08 16:18:59');\n\n\n1\n\n\nmysql> select * from test_8;\n+---------------------+\n| time                |\n+---------------------+\n| 2022-04-08 16:18:59 |\n+---------------------+\n\n\n1\n2\n3\n4\n5\n6\n",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"列属性问题",frontmatter:{title:"列属性问题",date:"2022-04-15T00:29:44.000Z",permalink:"/pages/525c9a/",tags:[null],article:!1},regularPath:"/02.MySQL/05.Frank%20-%20MySQL%E5%88%A0%E5%BA%93%E8%B7%91%E8%B7%AF/06.%E5%88%97%E5%B1%9E%E6%80%A7%E5%AE%8C%E6%95%B4%E6%80%A7/01.%E5%88%97%E5%B1%9E%E6%80%A7%E9%97%AE%E9%A2%98.html",relativePath:"02.MySQL/05.Frank - MySQL删库跑路/06.列属性完整性/01.列属性问题.md",key:"v-677ce2a0",path:"/pages/525c9a/",headersStr:null,content:"# 列属性问题\n\n如果一个字段有 auto_increment 属性，则这个字段必须是 primary key。\n\n这样的字段在插入数据的时候可以填 null，因为它是自增的。但是后续再这样插入数据的时候，auto_increment 不会再取已被删除的值。\n\nmysql> insert into teacher values(null,'杨六',34,'2131231231','Shanghai');\n\n\n1\n\n\nmysql> select * from teacher;\n+----+------+------+------------+----------+\n| id | name | age  | phone      | address  |\n+----+------+------+------------+----------+\n|  1 | 张三 |   32 | 1555555555 | NULL     |\n|  2 | 李四 |   25 | 2121212121 | 暂时未知 |\n|  3 | 王五 |   56 | 4544 | Beijing  |\n|  4 | 杨六 |   34 | 2131231231 | Shanghai |\n+----+------+------+------------+----------+\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nmysql> delete from teacher where id=3;\n\n\n1\n\n\nmysql> insert into teacher values(null,'童七',20,'1343434343',default);\n\n\n1\n\n\n+----+------+------+------------+----------+\n| id | name | age  | phone      | address  |\n+----+------+------+------------+----------+\n|  1 | 张三 |   32 | 1555555555 | 暂时未知 |\n|  2 | 李四 |   25 | 2121212121 | 暂时未知 |\n|  4 | 杨六 |   34 | 2131231231 | Shanghai |\n|  5 | 童七 |   20 | 1343434343 | 暂时未知 |\n+----+------+------+------------+----------+\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n",normalizedContent:"# 列属性问题\n\n如果一个字段有 auto_increment 属性，则这个字段必须是 primary key。\n\n这样的字段在插入数据的时候可以填 null，因为它是自增的。但是后续再这样插入数据的时候，auto_increment 不会再取已被删除的值。\n\nmysql> insert into teacher values(null,'杨六',34,'2131231231','shanghai');\n\n\n1\n\n\nmysql> select * from teacher;\n+----+------+------+------------+----------+\n| id | name | age  | phone      | address  |\n+----+------+------+------------+----------+\n|  1 | 张三 |   32 | 1555555555 | null     |\n|  2 | 李四 |   25 | 2121212121 | 暂时未知 |\n|  3 | 王五 |   56 | 4544 | beijing  |\n|  4 | 杨六 |   34 | 2131231231 | shanghai |\n+----+------+------+------------+----------+\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nmysql> delete from teacher where id=3;\n\n\n1\n\n\nmysql> insert into teacher values(null,'童七',20,'1343434343',default);\n\n\n1\n\n\n+----+------+------+------------+----------+\n| id | name | age  | phone      | address  |\n+----+------+------+------------+----------+\n|  1 | 张三 |   32 | 1555555555 | 暂时未知 |\n|  2 | 李四 |   25 | 2121212121 | 暂时未知 |\n|  4 | 杨六 |   34 | 2131231231 | shanghai |\n|  5 | 童七 |   20 | 1343434343 | 暂时未知 |\n+----+------+------+------------+----------+\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"主键 primary key",frontmatter:{title:"主键 primary key",date:"2022-04-15T00:29:44.000Z",permalink:"/pages/b8807f/",tags:[null]},regularPath:"/02.MySQL/05.Frank%20-%20MySQL%E5%88%A0%E5%BA%93%E8%B7%91%E8%B7%AF/06.%E5%88%97%E5%B1%9E%E6%80%A7%E5%AE%8C%E6%95%B4%E6%80%A7/02.%E4%B8%BB%E9%94%AE%20primary%20key.html",relativePath:"02.MySQL/05.Frank - MySQL删库跑路/06.列属性完整性/02.主键 primary key.md",key:"v-b4d26508",path:"/pages/b8807f/",headers:[{level:2,title:"作用",slug:"作用",normalizedTitle:"作用",charIndex:21},{level:2,title:"要点",slug:"要点",normalizedTitle:"要点",charIndex:60},{level:2,title:"主键的添加、删除",slug:"主键的添加、删除",normalizedTitle:"主键的添加、删除",charIndex:224},{level:3,title:"添加主键",slug:"添加主键",normalizedTitle:"添加主键",charIndex:237},{level:3,title:"复合主键",slug:"复合主键",normalizedTitle:"复合主键",charIndex:1257},{level:3,title:"删除主键",slug:"删除主键",normalizedTitle:"删除主键",charIndex:1358},{level:2,title:"选择主键",slug:"选择主键",normalizedTitle:"选择主键",charIndex:1415}],headersStr:"作用 要点 主键的添加、删除 添加主键 复合主键 删除主键 选择主键",content:"# 主键 primary key\n\n\n# 作用\n\n * 保证数据的完整性，没有纰漏\n\n * 加快查询数据的速度\n\n\n# 要点\n\n 1. 一个表里只能有一个主键，但一个主键可以由多个字段组成。\n 2. 主键不仅仅局限在一张表里，它可能是其它表使用数据的依据。在其它表里它就不叫主键了。\n 3. 每条记录的主键值是唯一的，不能重复\n 4. 主键给谁一定要给清楚。\n 5. 主键不能为 null 值，除非有 auto_increment 属性。\n\n\n# 主键的添加、删除\n\n\n# 添加主键\n\n * 创建表时添加\n   \n   创建表的时候，为避免混淆，建议直接将 primary key 写在字段后面。虽然也可以写在更后面，但不推荐。\n   \n   mysql> create table if not exists test(\n   -> id int primary key,\n   -> name varchar(30)\n   -> );\n   \n   \n   1\n   2\n   3\n   4\n   \n   \n   mysql> create table if not exists test(\n       -> id int,\n       -> name varchar(30),\n       -> primary key (id)\n       -> );\n   \n   \n   1\n   2\n   3\n   4\n   5\n   \n   \n   mysql> desc test;\n   +-------+-------------+------+-----+---------+-------+\n   | Field | Type        | Null | Key | Default | Extra |\n   +-------+-------------+------+-----+---------+-------+\n   | id    | int(11)     | NO   | PRI | NULL    |       |\n   | name  | varchar(30) | YES  |     | NULL    |       |\n   +-------+-------------+------+-----+---------+-------+\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   \n\n * 后期添加主键\n   \n   创建表的时候没设置主键，后期也是可以调整的。\n   \n   alter table <TableName> add primary key (<FieldName>);\n   \n   \n   1\n   \n   \n   注意\n   \n   在实际开发过程中，要设计一个关系型数据库，首先会把百分之八九十的结构都设计好，后期改变结构的情况是少之又少的。结构这东西牵一发而动全身，很麻烦的。\n\n\n# 复合主键\n\nalter table <TableName> add primary key (<FieldName1>,<FieldName2>[,<FieldName3>...])\n\n\n1\n\n\n\n# 删除主键\n\nalter table <TableName> drop primary key;\n\n\n1\n\n\n\n# 选择主键\n\n组合键基本上作用不大，只要有像身份证号、学号这种唯一的数据，谁TM还用组合键？\n\n最好不要选择字符串类型作为主键，不然很不好处理，通常都是选择数字类型字段作为主键。\n\n组和键（复合主键）也不是一无是处，如，一个网站、论坛的用户的昵称不能重名就可以使用组合键，但这样的话扩展性就没有那么好啦。",normalizedContent:"# 主键 primary key\n\n\n# 作用\n\n * 保证数据的完整性，没有纰漏\n\n * 加快查询数据的速度\n\n\n# 要点\n\n 1. 一个表里只能有一个主键，但一个主键可以由多个字段组成。\n 2. 主键不仅仅局限在一张表里，它可能是其它表使用数据的依据。在其它表里它就不叫主键了。\n 3. 每条记录的主键值是唯一的，不能重复\n 4. 主键给谁一定要给清楚。\n 5. 主键不能为 null 值，除非有 auto_increment 属性。\n\n\n# 主键的添加、删除\n\n\n# 添加主键\n\n * 创建表时添加\n   \n   创建表的时候，为避免混淆，建议直接将 primary key 写在字段后面。虽然也可以写在更后面，但不推荐。\n   \n   mysql> create table if not exists test(\n   -> id int primary key,\n   -> name varchar(30)\n   -> );\n   \n   \n   1\n   2\n   3\n   4\n   \n   \n   mysql> create table if not exists test(\n       -> id int,\n       -> name varchar(30),\n       -> primary key (id)\n       -> );\n   \n   \n   1\n   2\n   3\n   4\n   5\n   \n   \n   mysql> desc test;\n   +-------+-------------+------+-----+---------+-------+\n   | field | type        | null | key | default | extra |\n   +-------+-------------+------+-----+---------+-------+\n   | id    | int(11)     | no   | pri | null    |       |\n   | name  | varchar(30) | yes  |     | null    |       |\n   +-------+-------------+------+-----+---------+-------+\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   \n\n * 后期添加主键\n   \n   创建表的时候没设置主键，后期也是可以调整的。\n   \n   alter table <tablename> add primary key (<fieldname>);\n   \n   \n   1\n   \n   \n   注意\n   \n   在实际开发过程中，要设计一个关系型数据库，首先会把百分之八九十的结构都设计好，后期改变结构的情况是少之又少的。结构这东西牵一发而动全身，很麻烦的。\n\n\n# 复合主键\n\nalter table <tablename> add primary key (<fieldname1>,<fieldname2>[,<fieldname3>...])\n\n\n1\n\n\n\n# 删除主键\n\nalter table <tablename> drop primary key;\n\n\n1\n\n\n\n# 选择主键\n\n组合键基本上作用不大，只要有像身份证号、学号这种唯一的数据，谁tm还用组合键？\n\n最好不要选择字符串类型作为主键，不然很不好处理，通常都是选择数字类型字段作为主键。\n\n组和键（复合主键）也不是一无是处，如，一个网站、论坛的用户的昵称不能重名就可以使用组合键，但这样的话扩展性就没有那么好啦。",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"唯一键 unique key",frontmatter:{title:"唯一键 unique key",date:"2022-04-15T12:41:05.000Z",permalink:"/pages/dc235f/",tags:[null]},regularPath:"/02.MySQL/05.Frank%20-%20MySQL%E5%88%A0%E5%BA%93%E8%B7%91%E8%B7%AF/06.%E5%88%97%E5%B1%9E%E6%80%A7%E5%AE%8C%E6%95%B4%E6%80%A7/03.%E5%94%AF%E4%B8%80%E9%94%AE%20unique%20key.html",relativePath:"02.MySQL/05.Frank - MySQL删库跑路/06.列属性完整性/03.唯一键 unique key.md",key:"v-14c326d6",path:"/pages/dc235f/",headers:[{level:2,title:"作用",slug:"作用",normalizedTitle:"作用",charIndex:21},{level:2,title:"要点（唯一键与主键的区别）",slug:"要点-唯一键与主键的区别",normalizedTitle:"要点（唯一键与主键的区别）",charIndex:64},{level:2,title:"唯一键的添加、删除",slug:"唯一键的添加、删除",normalizedTitle:"唯一键的添加、删除",charIndex:174},{level:3,title:"添加唯一键",slug:"添加唯一键",normalizedTitle:"添加唯一键",charIndex:188},{level:3,title:"删除唯一键",slug:"删除唯一键",normalizedTitle:"删除唯一键",charIndex:960}],headersStr:"作用 要点（唯一键与主键的区别） 唯一键的添加、删除 添加唯一键 删除唯一键",content:"# 唯一键 unique key\n\n\n# 作用\n\n保证数据不能重复\n\n> 不是用来区分的，表示该字段的值在当前表中唯一\n\n\n# 要点（唯一键与主键的区别）\n\n * 唯一键唯一键，值唯一，不能重复\n * 一个表中可以有多个唯一键（主键只能有一个）\n * 唯一键只在当前表中瞎凑合（主键可能也会在别的表里凑热闹）\n * 唯一键的值可为null\n\n\n# 唯一键的添加、删除\n\n\n# 添加唯一键\n\n * 创建表时添加唯一键 phone\n   \n   create table test_1(\n   \tid int primary key,\n       phone varchar(20) unique\t# 唯一键 phone\n   \t);\n   \n   \n   1\n   2\n   3\n   4\n   \n   \n   或添加多个唯一键 name、phone\n   \n   create table test_2(\n   \tid int primary key,\n       name varchar(30) unique,\n       phone varchar(20) unique\n   \t);\n   \n   \n   1\n   2\n   3\n   4\n   5\n   \n   \n   使用 desc test_1; 显示表结构可以发现，phone 可以为空，且它的Key为 UNI\n   \n   提示\n   \n   当你试图使用 insert 重复插入相同的值时，会出现 Duplicate entry 的错误提示，其表示重复录入。\n\n * 后期添加唯一键\n   \n   alter table <TableName> add unique (<FieldName>);\n   \n   \n   1\n   \n\n * 添加复合唯一键\n   \n   alter table <TableName> add unique (<FieldName1>,<FieldName2>[,<FieldName3>]);\n   \n   \n   1\n   \n   \n   注意\n   \n   复合的唯一键意义不大，一般都不会讨论这个问题。 当你试图添加复合唯一键的时候，可能会诱发一些🤏有意思的现象，比如Key可能会变为 MUI\n\n\n# 删除唯一键\n\nalter table <TableName> drop index unique <FieldName>;\n\n\n1\n",normalizedContent:"# 唯一键 unique key\n\n\n# 作用\n\n保证数据不能重复\n\n> 不是用来区分的，表示该字段的值在当前表中唯一\n\n\n# 要点（唯一键与主键的区别）\n\n * 唯一键唯一键，值唯一，不能重复\n * 一个表中可以有多个唯一键（主键只能有一个）\n * 唯一键只在当前表中瞎凑合（主键可能也会在别的表里凑热闹）\n * 唯一键的值可为null\n\n\n# 唯一键的添加、删除\n\n\n# 添加唯一键\n\n * 创建表时添加唯一键 phone\n   \n   create table test_1(\n   \tid int primary key,\n       phone varchar(20) unique\t# 唯一键 phone\n   \t);\n   \n   \n   1\n   2\n   3\n   4\n   \n   \n   或添加多个唯一键 name、phone\n   \n   create table test_2(\n   \tid int primary key,\n       name varchar(30) unique,\n       phone varchar(20) unique\n   \t);\n   \n   \n   1\n   2\n   3\n   4\n   5\n   \n   \n   使用 desc test_1; 显示表结构可以发现，phone 可以为空，且它的key为 uni\n   \n   提示\n   \n   当你试图使用 insert 重复插入相同的值时，会出现 duplicate entry 的错误提示，其表示重复录入。\n\n * 后期添加唯一键\n   \n   alter table <tablename> add unique (<fieldname>);\n   \n   \n   1\n   \n\n * 添加复合唯一键\n   \n   alter table <tablename> add unique (<fieldname1>,<fieldname2>[,<fieldname3>]);\n   \n   \n   1\n   \n   \n   注意\n   \n   复合的唯一键意义不大，一般都不会讨论这个问题。 当你试图添加复合唯一键的时候，可能会诱发一些🤏有意思的现象，比如key可能会变为 mui\n\n\n# 删除唯一键\n\nalter table <tablename> drop index unique <fieldname>;\n\n\n1\n",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"外键 foreign key",frontmatter:{title:"外键 foreign key",date:"2022-04-15T12:38:26.000Z",permalink:"/pages/79f68c/",tags:[null]},regularPath:"/02.MySQL/05.Frank%20-%20MySQL%E5%88%A0%E5%BA%93%E8%B7%91%E8%B7%AF/06.%E5%88%97%E5%B1%9E%E6%80%A7%E5%AE%8C%E6%95%B4%E6%80%A7/04.%E5%A4%96%E9%94%AE%20foreign%20key.html",relativePath:"02.MySQL/05.Frank - MySQL删库跑路/06.列属性完整性/04.外键 foreign key.md",key:"v-091b4722",path:"/pages/79f68c/",headers:[{level:2,title:"作用",slug:"作用",normalizedTitle:"作用",charIndex:44},{level:2,title:"要点",slug:"要点",normalizedTitle:"要点",charIndex:64},{level:2,title:"外键的添加、查看、删除",slug:"外键的添加、查看、删除",normalizedTitle:"外键的添加、查看、删除",charIndex:294},{level:3,title:"添加外键",slug:"添加外键",normalizedTitle:"添加外键",charIndex:310},{level:3,title:"查看外键",slug:"查看外键",normalizedTitle:"查看外键",charIndex:1186},{level:3,title:"删除外键",slug:"删除外键",normalizedTitle:"删除外键",charIndex:254}],headersStr:"作用 要点 外键的添加、查看、删除 添加外键 查看外键 删除外键",content:"# 外键 foreign key\n\n表和表之间一旦有了关联之后，就变得麻烦了。\n\n\n# 作用\n\n在表和表之间建立联系。\n\n\n# 要点\n\n * 本表中的外键参照其他表中的主键\n * 外键的数据类型应该与所参照主键相同\n * 外键可能是可以重复的，此时它的Key为 MUI\n * 外键字段的值不应该是其他表主键字段没有的\n * 当其他表中主键字段的某个值被删掉、更新就会产生问题（涉及外键的三种操作）\n * 要销毁两张表时，应先销毁外键所在的表\n * 有并发操作的项目中一般都是禁止使用外键的（企业规范）\n * 删除外键需要使用外键别名\n\n提示\n\nMUI 表示该字段的值是可重复的。\n\n\n# 外键的添加、查看、删除\n\n\n# 添加外键\n\n * 创建表时添加外键（第二张表）\n   \n   1. 第一张表\n   \n   create table test_1(\n   \tstu_id int(4) primary key,\t# test_1表的主键\n       name varchar(30)\n   \t);\n   \n   \n   1\n   2\n   3\n   4\n   \n   2. 第二张表\n   \n   create table test_2(\n       id int primary key,\n       money decimal(10,4),\n       stu_id int(4),\n       foreign key(stu_id) references test_1(stu_id);\t# 设置外键\n   \n   \n   1\n   2\n   3\n   4\n   5\n   \n   \n   其中\n   \n   foreign key(<FieldName1>) references <TableName>(<FieldName2>);\n   \n   \n   1\n   \n   \n   解释：\n   \n   * foreign key：我要设置一个外键\n   * <FieldName1>：这个外键在本表中叫啥名\n   * references：它来自哪儿\n   * <TableName>(<FieldName2>)：它来自<TableName>表中的<FieldName2>字段\n\n * 后期添加外键\n   \n   alter table <TableName> add foreign key(<FieldName1>) references <TableName>(<FieldName2>);\n   \n   \n   1\n   \n   \n   解释同上。\n   \n   提示\n   \n   还是那句话，后期改变结构的情况是少之又少的。数据库都是设计好了再用SQL语句来实现的，哪像初学者设计数据库一上来就是SQL语句一顿操作猛如虎啊。\n\n\n# 查看外键\n\n通过 show create table <TableName>; 来查看外键。\n\n提示\n\n外键创建后，并不会在表结构中明示出来。\n\n外键别名\n\n每创建一个外键，都会自动生成一个别名。\n\nCONSTRAINT `eatery_ibfk_1` FOREIGN KEY(`stu_id`) REFERENCES `test_1` (`stu_id`)；\n\n\n1\n\n\neatery_ibfk_1 为外键 stu_id 的别名，一些操作要依赖于它，比如删除外键。\n\n> 别名相关的内容，详见 MySQL别名\n\n\n# 删除外键\n\nalter table <TableName> drop foreign key <外键别名>;\n\n\n1\n\n\n如要删除 test_2 这个表中的外键 stu_id，使用其别名 eatery_ibfk_1：\n\nalter table test_2 drop foreign key eatery_ibfk_1;\n\n\n1\n\n\n注意\n\n要删除外键必须使用外键别名，别名可通过show create table <FieldName>来查看。",normalizedContent:"# 外键 foreign key\n\n表和表之间一旦有了关联之后，就变得麻烦了。\n\n\n# 作用\n\n在表和表之间建立联系。\n\n\n# 要点\n\n * 本表中的外键参照其他表中的主键\n * 外键的数据类型应该与所参照主键相同\n * 外键可能是可以重复的，此时它的key为 mui\n * 外键字段的值不应该是其他表主键字段没有的\n * 当其他表中主键字段的某个值被删掉、更新就会产生问题（涉及外键的三种操作）\n * 要销毁两张表时，应先销毁外键所在的表\n * 有并发操作的项目中一般都是禁止使用外键的（企业规范）\n * 删除外键需要使用外键别名\n\n提示\n\nmui 表示该字段的值是可重复的。\n\n\n# 外键的添加、查看、删除\n\n\n# 添加外键\n\n * 创建表时添加外键（第二张表）\n   \n   1. 第一张表\n   \n   create table test_1(\n   \tstu_id int(4) primary key,\t# test_1表的主键\n       name varchar(30)\n   \t);\n   \n   \n   1\n   2\n   3\n   4\n   \n   2. 第二张表\n   \n   create table test_2(\n       id int primary key,\n       money decimal(10,4),\n       stu_id int(4),\n       foreign key(stu_id) references test_1(stu_id);\t# 设置外键\n   \n   \n   1\n   2\n   3\n   4\n   5\n   \n   \n   其中\n   \n   foreign key(<fieldname1>) references <tablename>(<fieldname2>);\n   \n   \n   1\n   \n   \n   解释：\n   \n   * foreign key：我要设置一个外键\n   * <fieldname1>：这个外键在本表中叫啥名\n   * references：它来自哪儿\n   * <tablename>(<fieldname2>)：它来自<tablename>表中的<fieldname2>字段\n\n * 后期添加外键\n   \n   alter table <tablename> add foreign key(<fieldname1>) references <tablename>(<fieldname2>);\n   \n   \n   1\n   \n   \n   解释同上。\n   \n   提示\n   \n   还是那句话，后期改变结构的情况是少之又少的。数据库都是设计好了再用sql语句来实现的，哪像初学者设计数据库一上来就是sql语句一顿操作猛如虎啊。\n\n\n# 查看外键\n\n通过 show create table <tablename>; 来查看外键。\n\n提示\n\n外键创建后，并不会在表结构中明示出来。\n\n外键别名\n\n每创建一个外键，都会自动生成一个别名。\n\nconstraint `eatery_ibfk_1` foreign key(`stu_id`) references `test_1` (`stu_id`)；\n\n\n1\n\n\neatery_ibfk_1 为外键 stu_id 的别名，一些操作要依赖于它，比如删除外键。\n\n> 别名相关的内容，详见 mysql别名\n\n\n# 删除外键\n\nalter table <tablename> drop foreign key <外键别名>;\n\n\n1\n\n\n如要删除 test_2 这个表中的外键 stu_id，使用其别名 eatery_ibfk_1：\n\nalter table test_2 drop foreign key eatery_ibfk_1;\n\n\n1\n\n\n注意\n\n要删除外键必须使用外键别名，别名可通过show create table <fieldname>来查看。",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"外键的三种操作",frontmatter:{title:"外键的三种操作",date:"2022-04-15T16:35:26.000Z",permalink:"/pages/6fb1f2/",tags:[null]},regularPath:"/02.MySQL/05.Frank%20-%20MySQL%E5%88%A0%E5%BA%93%E8%B7%91%E8%B7%AF/06.%E5%88%97%E5%B1%9E%E6%80%A7%E5%AE%8C%E6%95%B4%E6%80%A7/05.%E5%A4%96%E9%94%AE%E7%9A%84%E4%B8%89%E7%A7%8D%E6%93%8D%E4%BD%9C.html",relativePath:"02.MySQL/05.Frank - MySQL删库跑路/06.列属性完整性/05.外键的三种操作.md",key:"v-c56d4894",path:"/pages/6fb1f2/",headers:[{level:2,title:"三种操作",slug:"三种操作",normalizedTitle:"三种操作",charIndex:5},{level:2,title:"使用情景",slug:"使用情景",normalizedTitle:"使用情景",charIndex:124},{level:3,title:"置空操作",slug:"置空操作",normalizedTitle:"置空操作",charIndex:54},{level:3,title:"级联操作",slug:"级联操作",normalizedTitle:"级联操作",charIndex:94}],headersStr:"三种操作 使用情景 置空操作 级联操作",content:"# 外键的三种操作\n\n\n# 三种操作\n\n 1. 严格性操作：父表不能删除或更新一个被子表引用的记录\n 2. 置空操作：前提外键字段允许为null，父表操作后，子表对应的字段被置空\n 3. 级联操作：父表操作后，子表关联的数据也跟着一起操作\n\n\n# 使用情景\n\n\n# 置空操作\n\n多用于删除记录。\n\n\n# 级联操作\n\n多用于更新记录。",normalizedContent:"# 外键的三种操作\n\n\n# 三种操作\n\n 1. 严格性操作：父表不能删除或更新一个被子表引用的记录\n 2. 置空操作：前提外键字段允许为null，父表操作后，子表对应的字段被置空\n 3. 级联操作：父表操作后，子表关联的数据也跟着一起操作\n\n\n# 使用情景\n\n\n# 置空操作\n\n多用于删除记录。\n\n\n# 级联操作\n\n多用于更新记录。",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"外键的置空、级联操作",frontmatter:{title:"外键的置空、级联操作",date:"2022-04-16T17:38:56.000Z",permalink:"/pages/a2ee59/",tags:[null]},regularPath:"/02.MySQL/05.Frank%20-%20MySQL%E5%88%A0%E5%BA%93%E8%B7%91%E8%B7%AF/06.%E5%88%97%E5%B1%9E%E6%80%A7%E5%AE%8C%E6%95%B4%E6%80%A7/06.%E5%A4%96%E9%94%AE%E7%9A%84%E7%BD%AE%E7%A9%BA%E3%80%81%E7%BA%A7%E8%81%94%E6%93%8D%E4%BD%9C.html",relativePath:"02.MySQL/05.Frank - MySQL删库跑路/06.列属性完整性/06.外键的置空、级联操作.md",key:"v-74d157a5",path:"/pages/a2ee59/",headers:[{level:2,title:"外键如何设定置空和级联操作？",slug:"外键如何设定置空和级联操作",normalizedTitle:"外键如何设定置空和级联操作？",charIndex:2},{level:3,title:"关键字",slug:"关键字",normalizedTitle:"关键字",charIndex:42},{level:3,title:"创建主表",slug:"创建主表",normalizedTitle:"创建主表",charIndex:111},{level:3,title:"创建子表",slug:"创建子表",normalizedTitle:"创建子表",charIndex:730},{level:2,title:"来感受置空和级联操作的魅力吧",slug:"来感受置空和级联操作的魅力吧",normalizedTitle:"来感受置空和级联操作的魅力吧",charIndex:1885},{level:3,title:"置空",slug:"置空",normalizedTitle:"置空",charIndex:8},{level:3,title:"级联",slug:"级联",normalizedTitle:"级联",charIndex:11}],headersStr:"外键如何设定置空和级联操作？ 关键字 创建主表 创建子表 来感受置空和级联操作的魅力吧 置空 级联",content:"# 外键如何设定置空和级联操作？\n\n> 置空和级联一般在创建表时进行设置。\n\n\n# 关键字\n\n在删除的时候：on delete\n\n在更新的时候：on update\n\n置空：set null\n\n级联：cascade\n\n\n# 创建主表\n\ncreate table if not exists student(\n\tstu_id int primary key auto_increment comment 'student表主键stu_id',\n\tname varchar(30) comment '学生姓名name'\n\t);\n\n\n1\n2\n3\n4\n\n\n 1. 插入数据到student表\n    \n    insert into student values\n        (null, 'Jim'),\n        (null, 'Tom'),\n        (null, 'Anna'),\n        (null, 'Emma');\n    \n    \n    1\n    2\n    3\n    4\n    5\n    \n\n 2. 查询student表\n    \n    +--------+------+\n    | stu_id | name |\n    +--------+------+\n    |      1 | Jim  |\n    |      2 | Tom  |\n    |      3 | Anna |\n    |      4 | Emma |\n    +--------+------+\n    \n    \n    1\n    2\n    3\n    4\n    5\n    6\n    7\n    8\n    \n\n\n# 创建子表\n\ncreate table if not exists eatery_order(\n\tid int primary key auto_increment comment 'eatery_order主键',\n\tmoney decimal(10,4) default '0.0' comment '消费金额',\n\tstu_id int comment 'eatery_order表外键',\n\tforeign key (stu_id) references student(stu_id) on delete set null on update cascade\n\t);\n\n\n1\n2\n3\n4\n5\n6\n\n\n# 关键语句\n\nforeign key (stu_id) references student(stu_id) on delete set null on update cascade\n\n\n1\n\n\n解释：\n\n * on delete set null：在主表删除记录时，本表外键值置空 null\n * on update cascade：在主表更新记录时，本表外键值同步更新\n\n 1. 插入数据到eatery_order表\n    \n    insert into eatery_order values\n        (null, 7, 1),\n        (null, 11, 3),\n        (null, 11, 3),\n        (null, 20, 4),\n        (null, 7, 2),\n        (null, 7, 4);\n    \n    \n    1\n    2\n    3\n    4\n    5\n    6\n    7\n    \n\n 2. 查询eatery_order表\n    \n    +----+---------+--------+\n    | id | money   | stu_id |\n    +----+---------+--------+\n    |  1 |  7.0000 |      1 |\n    |  2 | 11.0000 |      3 |\n    |  3 | 11.0000 |      3 |\n    |  4 | 20.0000 |      4 |\n    |  5 |  7.0000 |      2 |\n    |  6 |  7.0000 |      4 |\n    +----+---------+--------+\n    \n    \n    1\n    2\n    3\n    4\n    5\n    6\n    7\n    8\n    9\n    10\n    \n\n\n# 来感受置空和级联操作的魅力吧\n\n\n# 置空\n\n 1. 删除student表中的一些记录：\n    \n    delete from student where name='Emma';\n    \n    \n    1\n    \n\n 2. 查询eatery_order表\n    \n    +----+---------+--------+\n    | id | money   | stu_id |\n    +----+---------+--------+\n    |  1 |  7.0000 |      1 |\n    |  2 | 11.0000 |      3 |\n    |  3 | 11.0000 |      3 |\n    |  4 | 20.0000 |   NULL |\n    |  5 |  7.0000 |      2 |\n    |  6 |  7.0000 |   NULL |\n    +----+---------+--------+\n    \n    \n    1\n    2\n    3\n    4\n    5\n    6\n    7\n    8\n    9\n    10\n    \n    \n    可以看到在eatery_order表中，原本为4的stu_id，现在都变成了null。\n\n\n# 级联\n\n 1. 更新student表中的一些记录：\n    \n    update student set stu_id=456 where stu_id=3;\n    \n    \n    1\n    \n\n 2. 查询eatery_order表\n    \n    +----+---------+--------+\n    | id | money   | stu_id |\n    +----+---------+--------+\n    |  1 |  7.0000 |      1 |\n    |  2 | 11.0000 |    456 |\n    |  3 | 11.0000 |    456 |\n    |  4 | 20.0000 |   NULL |\n    |  5 |  7.0000 |      2 |\n    |  6 |  7.0000 |   NULL |\n    +----+---------+--------+\n    \n    \n    1\n    2\n    3\n    4\n    5\n    6\n    7\n    8\n    9\n    10\n    \n    \n    可以看到在eatery_order表中，原本为3的stu_id，现在都变成了456。",normalizedContent:"# 外键如何设定置空和级联操作？\n\n> 置空和级联一般在创建表时进行设置。\n\n\n# 关键字\n\n在删除的时候：on delete\n\n在更新的时候：on update\n\n置空：set null\n\n级联：cascade\n\n\n# 创建主表\n\ncreate table if not exists student(\n\tstu_id int primary key auto_increment comment 'student表主键stu_id',\n\tname varchar(30) comment '学生姓名name'\n\t);\n\n\n1\n2\n3\n4\n\n\n 1. 插入数据到student表\n    \n    insert into student values\n        (null, 'jim'),\n        (null, 'tom'),\n        (null, 'anna'),\n        (null, 'emma');\n    \n    \n    1\n    2\n    3\n    4\n    5\n    \n\n 2. 查询student表\n    \n    +--------+------+\n    | stu_id | name |\n    +--------+------+\n    |      1 | jim  |\n    |      2 | tom  |\n    |      3 | anna |\n    |      4 | emma |\n    +--------+------+\n    \n    \n    1\n    2\n    3\n    4\n    5\n    6\n    7\n    8\n    \n\n\n# 创建子表\n\ncreate table if not exists eatery_order(\n\tid int primary key auto_increment comment 'eatery_order主键',\n\tmoney decimal(10,4) default '0.0' comment '消费金额',\n\tstu_id int comment 'eatery_order表外键',\n\tforeign key (stu_id) references student(stu_id) on delete set null on update cascade\n\t);\n\n\n1\n2\n3\n4\n5\n6\n\n\n# 关键语句\n\nforeign key (stu_id) references student(stu_id) on delete set null on update cascade\n\n\n1\n\n\n解释：\n\n * on delete set null：在主表删除记录时，本表外键值置空 null\n * on update cascade：在主表更新记录时，本表外键值同步更新\n\n 1. 插入数据到eatery_order表\n    \n    insert into eatery_order values\n        (null, 7, 1),\n        (null, 11, 3),\n        (null, 11, 3),\n        (null, 20, 4),\n        (null, 7, 2),\n        (null, 7, 4);\n    \n    \n    1\n    2\n    3\n    4\n    5\n    6\n    7\n    \n\n 2. 查询eatery_order表\n    \n    +----+---------+--------+\n    | id | money   | stu_id |\n    +----+---------+--------+\n    |  1 |  7.0000 |      1 |\n    |  2 | 11.0000 |      3 |\n    |  3 | 11.0000 |      3 |\n    |  4 | 20.0000 |      4 |\n    |  5 |  7.0000 |      2 |\n    |  6 |  7.0000 |      4 |\n    +----+---------+--------+\n    \n    \n    1\n    2\n    3\n    4\n    5\n    6\n    7\n    8\n    9\n    10\n    \n\n\n# 来感受置空和级联操作的魅力吧\n\n\n# 置空\n\n 1. 删除student表中的一些记录：\n    \n    delete from student where name='emma';\n    \n    \n    1\n    \n\n 2. 查询eatery_order表\n    \n    +----+---------+--------+\n    | id | money   | stu_id |\n    +----+---------+--------+\n    |  1 |  7.0000 |      1 |\n    |  2 | 11.0000 |      3 |\n    |  3 | 11.0000 |      3 |\n    |  4 | 20.0000 |   null |\n    |  5 |  7.0000 |      2 |\n    |  6 |  7.0000 |   null |\n    +----+---------+--------+\n    \n    \n    1\n    2\n    3\n    4\n    5\n    6\n    7\n    8\n    9\n    10\n    \n    \n    可以看到在eatery_order表中，原本为4的stu_id，现在都变成了null。\n\n\n# 级联\n\n 1. 更新student表中的一些记录：\n    \n    update student set stu_id=456 where stu_id=3;\n    \n    \n    1\n    \n\n 2. 查询eatery_order表\n    \n    +----+---------+--------+\n    | id | money   | stu_id |\n    +----+---------+--------+\n    |  1 |  7.0000 |      1 |\n    |  2 | 11.0000 |    456 |\n    |  3 | 11.0000 |    456 |\n    |  4 | 20.0000 |   null |\n    |  5 |  7.0000 |      2 |\n    |  6 |  7.0000 |   null |\n    +----+---------+--------+\n    \n    \n    1\n    2\n    3\n    4\n    5\n    6\n    7\n    8\n    9\n    10\n    \n    \n    可以看到在eatery_order表中，原本为3的stu_id，现在都变成了456。",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"数据库完整性",frontmatter:{title:"数据库完整性",date:"2022-04-15T13:18:15.000Z",permalink:"/pages/22b6f2/",tags:[null]},regularPath:"/02.MySQL/05.Frank%20-%20MySQL%E5%88%A0%E5%BA%93%E8%B7%91%E8%B7%AF/06.%E5%88%97%E5%B1%9E%E6%80%A7%E5%AE%8C%E6%95%B4%E6%80%A7/07.%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%8C%E6%95%B4%E6%80%A7.html",relativePath:"02.MySQL/05.Frank - MySQL删库跑路/06.列属性完整性/07.数据库完整性.md",key:"v-2d691257",path:"/pages/22b6f2/",headers:[{level:2,title:"三项完整性限制",slug:"三项完整性限制",normalizedTitle:"三项完整性限制",charIndex:13},{level:2,title:"设计关系型数据库",slug:"设计关系型数据库",normalizedTitle:"设计关系型数据库",charIndex:212},{level:2,title:"关于外键",slug:"关于外键",normalizedTitle:"关于外键",charIndex:304}],headersStr:"三项完整性限制 设计关系型数据库 关于外键",content:"# 数据库完整性\n\n\n# 三项完整性限制\n\n * 实体完整性：同一数据表中不可有多项记录拥有相同识别\n * 域完整性（自定义完整性）：限制栏位中的数据必须乎合预设的数据类型\n * 参照完整性：如两个数据表是有关联的，父数据表中的记录必须存在，子数据表的记录才有存在\n\n> 实体完整性这项规则要求每个数据表都必须有主键，而作为主键的所有栏位，其属性必须是唯一且非空。\n\n三项完整性限制是DBA在设计数据库时会考虑的。\n\n\n# 设计关系型数据库\n\n数据库都是设计好了再用SQL语句来实现的，哪像初学者设计数据库一上来就是SQL语句一顿操作猛如虎啊。\n\n后期改变结构的情况是少之又少的，DBA都会头疼的。\n\n\n# 关于外键\n\n凡是涉及到并发操作的项目基本上是不会采用外键的，甚至是杜绝外键。",normalizedContent:"# 数据库完整性\n\n\n# 三项完整性限制\n\n * 实体完整性：同一数据表中不可有多项记录拥有相同识别\n * 域完整性（自定义完整性）：限制栏位中的数据必须乎合预设的数据类型\n * 参照完整性：如两个数据表是有关联的，父数据表中的记录必须存在，子数据表的记录才有存在\n\n> 实体完整性这项规则要求每个数据表都必须有主键，而作为主键的所有栏位，其属性必须是唯一且非空。\n\n三项完整性限制是dba在设计数据库时会考虑的。\n\n\n# 设计关系型数据库\n\n数据库都是设计好了再用sql语句来实现的，哪像初学者设计数据库一上来就是sql语句一顿操作猛如虎啊。\n\n后期改变结构的情况是少之又少的，dba都会头疼的。\n\n\n# 关于外键\n\n凡是涉及到并发操作的项目基本上是不会采用外键的，甚至是杜绝外键。",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"数据库设计基本概念",frontmatter:{title:"数据库设计基本概念",date:"2022-04-20T20:04:16.000Z",permalink:"/pages/7bc52e/",tags:[null]},regularPath:"/02.MySQL/05.Frank%20-%20MySQL%E5%88%A0%E5%BA%93%E8%B7%91%E8%B7%AF/07.%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E6%80%9D%E7%BB%B4/01.%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5.html",relativePath:"02.MySQL/05.Frank - MySQL删库跑路/07.数据库设计思维/01.数据库设计基本概念.md",key:"v-5c56c7ef",path:"/pages/7bc52e/",headers:[{level:2,title:"关系？",slug:"关系",normalizedTitle:"关系？",charIndex:40},{level:2,title:"行？",slug:"行",normalizedTitle:"行？",charIndex:77},{level:2,title:"列？",slug:"列",normalizedTitle:"列？",charIndex:116},{level:2,title:"数据冗余？",slug:"数据冗余",normalizedTitle:"数据冗余？",charIndex:187},{level:2,title:"保证数据完整性",slug:"保证数据完整性",normalizedTitle:"保证数据完整性",charIndex:445}],headersStr:"关系？ 行？ 列？ 数据冗余？ 保证数据完整性",content:'为什么后学数据库设计 ？ 你TMD主键外键都不知道是啥，去TMD设计！\n\n\n# 关系？\n\n关系型数据库，通过两张表的共有字段来确定数据的完整性。\n\n\n# 行？\n\n一条数据 / 一条数据记录\n\n还有一个更"牛逼"的词——实体\n\n\n# 列？\n\n一个字体\n\n也有一个更"牛逼"的词——属性\n\n> 真TM牛逼，也真TMD会吹了哈。。。\n> \n> 专业名词，一套儿一套儿的哈\n\n\n# 数据冗余？\n\n情景：你觉得没必要设计的字段为什么还是设计了？\n\n> 那它肯定是有原因的。你考没考虑过并发的情况？\n> \n> 比如查高考分数，为什么要设计一个总分数的字段？查询的时候把所有学科成绩加起来不就行了吗？\n> \n> 每年多少考生？多数考生肯定是直接查总分啦，这么多考生同时去查，没有性能压力？\n\n数据冗余(Data Redundancy)：\n\n数据冗余 - 维基百科\n\n冗余 (Redundancy) - TechTerms.com\n\n数据冗余作用：\n\n * 提高查询性能\n * 防止数据丢失、出错\n\n\n# 保证数据完整性\n\n选择的数据类型是正确的\n\n容纳数据的范围是正确的\n\n......',normalizedContent:'为什么后学数据库设计 ？ 你tmd主键外键都不知道是啥，去tmd设计！\n\n\n# 关系？\n\n关系型数据库，通过两张表的共有字段来确定数据的完整性。\n\n\n# 行？\n\n一条数据 / 一条数据记录\n\n还有一个更"牛逼"的词——实体\n\n\n# 列？\n\n一个字体\n\n也有一个更"牛逼"的词——属性\n\n> 真tm牛逼，也真tmd会吹了哈。。。\n> \n> 专业名词，一套儿一套儿的哈\n\n\n# 数据冗余？\n\n情景：你觉得没必要设计的字段为什么还是设计了？\n\n> 那它肯定是有原因的。你考没考虑过并发的情况？\n> \n> 比如查高考分数，为什么要设计一个总分数的字段？查询的时候把所有学科成绩加起来不就行了吗？\n> \n> 每年多少考生？多数考生肯定是直接查总分啦，这么多考生同时去查，没有性能压力？\n\n数据冗余(data redundancy)：\n\n数据冗余 - 维基百科\n\n冗余 (redundancy) - techterms.com\n\n数据冗余作用：\n\n * 提高查询性能\n * 防止数据丢失、出错\n\n\n# 保证数据完整性\n\n选择的数据类型是正确的\n\n容纳数据的范围是正确的\n\n......',charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"SQL内注释和代码注释",frontmatter:{title:"SQL内注释和代码注释",date:"2022-04-15T15:21:13.000Z",permalink:"/pages/036a87/",tags:[null]},regularPath:"/02.MySQL/05.Frank%20-%20MySQL%E5%88%A0%E5%BA%93%E8%B7%91%E8%B7%AF/06.%E5%88%97%E5%B1%9E%E6%80%A7%E5%AE%8C%E6%95%B4%E6%80%A7/08.SQL%E5%86%85%E6%B3%A8%E9%87%8A%E5%92%8C%E4%BB%A3%E7%A0%81%E6%B3%A8%E9%87%8A.html",relativePath:"02.MySQL/05.Frank - MySQL删库跑路/06.列属性完整性/08.SQL内注释和代码注释.md",key:"v-f8eb562c",path:"/pages/036a87/",headers:[{level:2,title:"SQL内注释",slug:"sql内注释",normalizedTitle:"sql内注释",charIndex:2},{level:2,title:"代码注释",slug:"代码注释",normalizedTitle:"代码注释",charIndex:9}],headersStr:"SQL内注释 代码注释",content:"# SQL内注释和代码注释\n\n\n# SQL内注释\n\ncomment 'This is comment.'：comment表示注释，单引号内为注释内容\n\n一般在创建表时添加comment关键字。\n\n\n# 代码注释\n\n * #：单行注释\n * /* ... */：多行注释",normalizedContent:"# sql内注释和代码注释\n\n\n# sql内注释\n\ncomment 'this is comment.'：comment表示注释，单引号内为注释内容\n\n一般在创建表时添加comment关键字。\n\n\n# 代码注释\n\n * #：单行注释\n * /* ... */：多行注释",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"实体和实体之间的关系",frontmatter:{title:"实体和实体之间的关系",date:"2022-04-20T20:35:22.000Z",permalink:"/pages/881d02/",tags:[null]},regularPath:"/02.MySQL/05.Frank%20-%20MySQL%E5%88%A0%E5%BA%93%E8%B7%91%E8%B7%AF/07.%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E6%80%9D%E7%BB%B4/02.%E5%AE%9E%E4%BD%93%E5%92%8C%E5%AE%9E%E4%BD%93%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB.html",relativePath:"02.MySQL/05.Frank - MySQL删库跑路/07.数据库设计思维/02.实体和实体之间的关系.md",key:"v-1bb7ea63",path:"/pages/881d02/",headers:[{level:2,title:"生活实例",slug:"生活实例",normalizedTitle:"生活实例",charIndex:88},{level:2,title:"Example",slug:"example",normalizedTitle:"example",charIndex:201}],headersStr:"生活实例 Example",content:"什么TMD叫“一对一”、“一对多”、“多对一”、“多对多”？\n\n其实就是一条记录和一条记录之间的关系，但是这时候我们不能说“记录”，而应该叫“实体和实体之间的关系”。\n\n\n# 生活实例\n\n一对一：请家教，一个老师教一个学生\n\n一对多：一个班一个老师，一个老师教一个班的学生\n\n多对一：请多个家教，多个老师教一个学生\n\n多对多：每个老师教多个班，你教这个班数学，我教这个班语文，我还教那个班语文\n\n\n# Example\n\n如，一个用户可以发布很多文章，这就是典型的一对多关系：",normalizedContent:"什么tmd叫“一对一”、“一对多”、“多对一”、“多对多”？\n\n其实就是一条记录和一条记录之间的关系，但是这时候我们不能说“记录”，而应该叫“实体和实体之间的关系”。\n\n\n# 生活实例\n\n一对一：请家教，一个老师教一个学生\n\n一对多：一个班一个老师，一个老师教一个班的学生\n\n多对一：请多个家教，多个老师教一个学生\n\n多对多：每个老师教多个班，你教这个班数学，我教这个班语文，我还教那个班语文\n\n\n# example\n\n如，一个用户可以发布很多文章，这就是典型的一对多关系：",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"数据库设计三大范式",frontmatter:{title:"数据库设计三大范式",date:"2022-04-24T16:11:20.000Z",permalink:"/pages/f839ed/",tags:[null]},regularPath:"/02.MySQL/05.Frank%20-%20MySQL%E5%88%A0%E5%BA%93%E8%B7%91%E8%B7%AF/07.%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E6%80%9D%E7%BB%B4/03.%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E4%B8%89%E5%A4%A7%E8%8C%83%E5%BC%8F.html",relativePath:"02.MySQL/05.Frank - MySQL删库跑路/07.数据库设计思维/03.数据库设计三大范式.md",key:"v-2fab6371",path:"/pages/f839ed/",headers:[{level:2,title:"数据库设计三大范式",slug:"数据库设计三大范式",normalizedTitle:"数据库设计三大范式",charIndex:2},{level:3,title:"范式？",slug:"范式",normalizedTitle:"范式？",charIndex:16},{level:3,title:"是哪三个范式？",slug:"是哪三个范式",normalizedTitle:"是哪三个范式？",charIndex:260}],headersStr:"数据库设计三大范式 范式？ 是哪三个范式？",content:"# 数据库设计三大范式\n\n\n# 范式？\n\n范式就是指规范。\n\n是否使用范式，取决于项目的需求，没有统一的标准。\n\n> **范式(Normal Form)**是“符合某一种级别的关系模式的集合，表示一个关系内部各属性之间的联系的合理化程度”。很晦涩吧？实际上你可以把它粗略地理解为一张数据表的表结构所符合的某种设计标准的级别。\n> \n> 数据库范式有六种，分别为1NF，2NF，3NF，BCNF，4NF，5N，一般在设计关系型数据库的时候，能考虑到前三者1NF、2NF、3NF就够了，能用到BCNF就已经很吊了。\n\n\n# 是哪三个范式？\n\n * 1NF 保证每列的原子性\n * 2NF 非键字段必须依赖键字段\n * 3NF 消除传递依赖\n\n> 在范式化的数据库中，每个事实数据会出现并且只出现一次；相反，在反范式化的数据库中，信息是冗余的，可能会存储在多个地方。\n> \n>  * 第一范式 (1NF)：属性不可分。\n>  * 第二范式 (2NF)：1NF + 表必须有一个主键 + 非主键必须完全依赖于主键。\n>  * 第三范式 (3NF)：2NF + 非主键列必须直接依赖于主键，不能存在传递依赖。\n\n# 1NF 保证每列的原子性\n\n保证列不能再被分割。\n\n> 比如有一张表有如下几个字段：编号、商品名、进货、销售、备注\n> \n> 其中 进货 和 销售 两者都还可以分出 数量 和 单价 等等属性。显然这张表不符合1NF。\n\n# 2NF 非键字段必须依赖键字段\n\n要满足第二范式（2NF）必须先满足第一范式（1NF）。\n\n任意一个字段都只依赖表中的同一个字段。一个表只用来描述一件事，说白了就是别他妈没事找事。\n\n# 3NF 消除传递依赖\n\n要满足第三范式（3NF）必须先满足第二范式（2NF）。\n\n要求一个数据库表中不包含已在其它表中已包含的非主键字段。也就是说一个表不能有多余的字段，这个表中的字段该干嘛干嘛，不需要的字段就别进来瞎凑热闹。\n\n> 在一些特殊情况下采用第三范式，比如，需要数据冗余来提高性能的时候。",normalizedContent:"# 数据库设计三大范式\n\n\n# 范式？\n\n范式就是指规范。\n\n是否使用范式，取决于项目的需求，没有统一的标准。\n\n> **范式(normal form)**是“符合某一种级别的关系模式的集合，表示一个关系内部各属性之间的联系的合理化程度”。很晦涩吧？实际上你可以把它粗略地理解为一张数据表的表结构所符合的某种设计标准的级别。\n> \n> 数据库范式有六种，分别为1nf，2nf，3nf，bcnf，4nf，5n，一般在设计关系型数据库的时候，能考虑到前三者1nf、2nf、3nf就够了，能用到bcnf就已经很吊了。\n\n\n# 是哪三个范式？\n\n * 1nf 保证每列的原子性\n * 2nf 非键字段必须依赖键字段\n * 3nf 消除传递依赖\n\n> 在范式化的数据库中，每个事实数据会出现并且只出现一次；相反，在反范式化的数据库中，信息是冗余的，可能会存储在多个地方。\n> \n>  * 第一范式 (1nf)：属性不可分。\n>  * 第二范式 (2nf)：1nf + 表必须有一个主键 + 非主键必须完全依赖于主键。\n>  * 第三范式 (3nf)：2nf + 非主键列必须直接依赖于主键，不能存在传递依赖。\n\n# 1nf 保证每列的原子性\n\n保证列不能再被分割。\n\n> 比如有一张表有如下几个字段：编号、商品名、进货、销售、备注\n> \n> 其中 进货 和 销售 两者都还可以分出 数量 和 单价 等等属性。显然这张表不符合1nf。\n\n# 2nf 非键字段必须依赖键字段\n\n要满足第二范式（2nf）必须先满足第一范式（1nf）。\n\n任意一个字段都只依赖表中的同一个字段。一个表只用来描述一件事，说白了就是别他妈没事找事。\n\n# 3nf 消除传递依赖\n\n要满足第三范式（3nf）必须先满足第二范式（2nf）。\n\n要求一个数据库表中不包含已在其它表中已包含的非主键字段。也就是说一个表不能有多余的字段，这个表中的字段该干嘛干嘛，不需要的字段就别进来瞎凑热闹。\n\n> 在一些特殊情况下采用第三范式，比如，需要数据冗余来提高性能的时候。",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"select、from、dual、as、where",frontmatter:{title:"select、from、dual、as、where",date:"2022-04-25T14:56:25.000Z",permalink:"/pages/fca44f/",tags:[null]},regularPath:"/02.MySQL/05.Frank%20-%20MySQL%E5%88%A0%E5%BA%93%E8%B7%91%E8%B7%AF/08.%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2/00.select%E3%80%81from%E3%80%81dual%E3%80%81as.html",relativePath:"02.MySQL/05.Frank - MySQL删库跑路/08.单表查询/00.select、from、dual、as.md",key:"v-6bd5532b",path:"/pages/fca44f/",headers:[{level:2,title:"select、from",slug:"select、from",normalizedTitle:"select、from",charIndex:2},{level:3,title:"笛卡尔积？",slug:"笛卡尔积",normalizedTitle:"笛卡尔积？",charIndex:388},{level:2,title:"dual",slug:"dual",normalizedTitle:"dual",charIndex:14},{level:2,title:"as",slug:"as",normalizedTitle:"as",charIndex:19}],headersStr:"select、from 笛卡尔积？ dual as",content:'# select、from、dual、as\n\n\n# select、from\n\n前面学过的两个最基础的查询语句：\n\nselect * from <TableName>;\n\nselect <FieldName1>, <FieldName2>[, ... ] from <TableName>;\n\n\n1\n2\n3\n\n\n你一定想不到还可以这样用：\n\nmysql> select "Fuck you PPT!";\n+---------------+\n| Fuck you PPT! |\n+---------------+\n| Fuck you PPT! |\n+---------------+\n\nmysql> select 2*7;\n+-----+\n| 2*7 |\n+-----+\n|  14 |\n+-----+\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# 笛卡尔积？\n\nselect * from <TableName1>, <TableName2>;\n\n\n1\n\n\nfrom多个表。\n\n> 笛卡尔积 - 维基百科\n\n\n# dual\n\n为什么还可以查不存在表的数据？\n\n伪表，“当你查询一个不存在的数据时，假装你有这个表，避免让你尴尬。”，但数据库里根本找不到这个表。\n\n其实 select "Fuck you PPT!"; 和 select 2*7 的全写为：\n\nselect "Fuck you PPT!" from dual;\n\nselect 2*7 from dual;\n\n\n1\n2\n3\n\n\n\n# as\n\n指定字段别名。\n\nmysql> select "Fuck you PPT!" as qnmd;\n+---------------+\n| qnmd          |\n+---------------+\n| Fuck you PPT! |\n+---------------+\n\nmysql> select 2*7 as multiply from dual;\n+----------+\n| multiply |\n+----------+\n|       14 |\n+----------+\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n',normalizedContent:'# select、from、dual、as\n\n\n# select、from\n\n前面学过的两个最基础的查询语句：\n\nselect * from <tablename>;\n\nselect <fieldname1>, <fieldname2>[, ... ] from <tablename>;\n\n\n1\n2\n3\n\n\n你一定想不到还可以这样用：\n\nmysql> select "fuck you ppt!";\n+---------------+\n| fuck you ppt! |\n+---------------+\n| fuck you ppt! |\n+---------------+\n\nmysql> select 2*7;\n+-----+\n| 2*7 |\n+-----+\n|  14 |\n+-----+\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# 笛卡尔积？\n\nselect * from <tablename1>, <tablename2>;\n\n\n1\n\n\nfrom多个表。\n\n> 笛卡尔积 - 维基百科\n\n\n# dual\n\n为什么还可以查不存在表的数据？\n\n伪表，“当你查询一个不存在的数据时，假装你有这个表，避免让你尴尬。”，但数据库里根本找不到这个表。\n\n其实 select "fuck you ppt!"; 和 select 2*7 的全写为：\n\nselect "fuck you ppt!" from dual;\n\nselect 2*7 from dual;\n\n\n1\n2\n3\n\n\n\n# as\n\n指定字段别名。\n\nmysql> select "fuck you ppt!" as qnmd;\n+---------------+\n| qnmd          |\n+---------------+\n| fuck you ppt! |\n+---------------+\n\nmysql> select 2*7 as multiply from dual;\n+----------+\n| multiply |\n+----------+\n|       14 |\n+----------+\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n',charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"聚合函数",frontmatter:{title:"聚合函数",date:"2022-04-25T16:59:51.000Z",permalink:"/pages/559548/",tags:[null]},regularPath:"/02.MySQL/05.Frank%20-%20MySQL%E5%88%A0%E5%BA%93%E8%B7%91%E8%B7%AF/08.%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2/02.%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0.html",relativePath:"02.MySQL/05.Frank - MySQL删库跑路/08.单表查询/02.聚合函数.md",key:"v-9a1683c0",path:"/pages/559548/",headers:[{level:2,title:"怎么用？",slug:"怎么用",normalizedTitle:"怎么用？",charIndex:76},{level:2,title:"关于count()",slug:"关于count",normalizedTitle:"关于count()",charIndex:231},{level:3,title:"count()查询速度的争议",slug:"count-查询速度的争议",normalizedTitle:"count()查询速度的争议",charIndex:411}],headersStr:"怎么用？ 关于count() count()查询速度的争议",content:"# 聚合函数\n\n一些聚合函数：\n\n * max()\n * min()\n * sum()\n * avg()\n * count()\n * ....\n\n\n# 怎么用？\n\nExample：\n\nmysql> select avg(english) as '英语平均分' from score;\n+------------+\n| 英语平均分 |\n+------------+\n|    72.5000 |\n+------------+\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 关于count()\n\ncount(*)：计算包括NULL值在内的行数，SQL92定义的标准统计行数的语法。\n\ncount(1)：计算包括NULL值在内的行数，其中的1是恒真表达式。\n\ncount(column)：计算指定列的行数，但不包含NULL值。\n\n> 参考：https://segmentfault.com/a/1190000040733649\n\n\n# count()查询速度的争议\n\n简单来说就是在争议count(*)、count(1)、count(column)哪个速度更快。。。\n\n> 参考：https://segmentfault.com/a/1190000041129056",normalizedContent:"# 聚合函数\n\n一些聚合函数：\n\n * max()\n * min()\n * sum()\n * avg()\n * count()\n * ....\n\n\n# 怎么用？\n\nexample：\n\nmysql> select avg(english) as '英语平均分' from score;\n+------------+\n| 英语平均分 |\n+------------+\n|    72.5000 |\n+------------+\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 关于count()\n\ncount(*)：计算包括null值在内的行数，sql92定义的标准统计行数的语法。\n\ncount(1)：计算包括null值在内的行数，其中的1是恒真表达式。\n\ncount(column)：计算指定列的行数，但不包含null值。\n\n> 参考：https://segmentfault.com/a/1190000040733649\n\n\n# count()查询速度的争议\n\n简单来说就是在争议count(*)、count(1)、count(column)哪个速度更快。。。\n\n> 参考：https://segmentfault.com/a/1190000041129056",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"模糊查询——like",frontmatter:{title:"模糊查询——like",date:"2022-05-02T15:35:17.000Z",permalink:"/pages/7f812c/",tags:[null]},regularPath:"/02.MySQL/05.Frank%20-%20MySQL%E5%88%A0%E5%BA%93%E8%B7%91%E8%B7%AF/08.%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2/03.%E6%A8%A1%E7%B3%8A%E2%80%94%E2%80%94like.html",relativePath:"02.MySQL/05.Frank - MySQL删库跑路/08.单表查询/03.模糊——like.md",key:"v-63435fef",path:"/pages/7f812c/",headers:[{level:2,title:"Example",slug:"example",normalizedTitle:"example",charIndex:62},{level:3,title:"% 百分号",slug:"百分号",normalizedTitle:"% 百分号",charIndex:218},{level:3,title:"_ 下划线",slug:"下划线",normalizedTitle:"_ 下划线",charIndex:1460}],headersStr:"Example % 百分号 _ 下划线",content:"# 模糊查询——like\n\nwhere .. like\n\n * % 符号代表多个字符\n\n * _ 符号代表一个字符\n\n\n# Example\n\n+----+------+\n| id | name |\n+----+------+\n| 1  | Tom  |\n| 2  | Jim  |\n| 3  | Anna |\n| 4  | 张三 |\n| 5  | 李四 |\n+----+------+\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# % 百分号\n\nselect name from student where name like 'A%';\n\n\n1\n\n\n+------+\n| name |\n+------+\n| Anna |\n+------+\n\n\n1\n2\n3\n4\n5\n\n\nshow variables like 'character_set_%';\n\n\n1\n\n\n+--------------------------+---------------------------------------------------------+\n| Variable_name            | Value                                                   |\n+--------------------------+---------------------------------------------------------+\n| character_set_client     | gbk                                                     |\n| character_set_connection | gbk                                                     |\n| character_set_database   | gbk                                                     |\n| character_set_filesystem | binary                                                  |\n| character_set_results    | gbk                                                     |\n| character_set_server     | latin1                                                  |\n| character_set_system     | utf8                                                    |\n| character_sets_dir       | C:\\Program Files\\MySQL\\MySQL Server 5.7\\share\\charsets\\ |\n+--------------------------+---------------------------------------------------------+\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# _ 下划线\n\nselect name from student where name like '张_';\n\n\n1\n\n\n+------+\n| name |\n+------+\n| 张三 |\n+------+\n\n\n1\n2\n3\n4\n5\n\n\nselect name from student where name like 'An__';\n\n\n1\n\n\n+------+\n| name |\n+------+\n| Anna |\n+------+\n\n\n1\n2\n3\n4\n5\n",normalizedContent:"# 模糊查询——like\n\nwhere .. like\n\n * % 符号代表多个字符\n\n * _ 符号代表一个字符\n\n\n# example\n\n+----+------+\n| id | name |\n+----+------+\n| 1  | tom  |\n| 2  | jim  |\n| 3  | anna |\n| 4  | 张三 |\n| 5  | 李四 |\n+----+------+\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# % 百分号\n\nselect name from student where name like 'a%';\n\n\n1\n\n\n+------+\n| name |\n+------+\n| anna |\n+------+\n\n\n1\n2\n3\n4\n5\n\n\nshow variables like 'character_set_%';\n\n\n1\n\n\n+--------------------------+---------------------------------------------------------+\n| variable_name            | value                                                   |\n+--------------------------+---------------------------------------------------------+\n| character_set_client     | gbk                                                     |\n| character_set_connection | gbk                                                     |\n| character_set_database   | gbk                                                     |\n| character_set_filesystem | binary                                                  |\n| character_set_results    | gbk                                                     |\n| character_set_server     | latin1                                                  |\n| character_set_system     | utf8                                                    |\n| character_sets_dir       | c:\\program files\\mysql\\mysql server 5.7\\share\\charsets\\ |\n+--------------------------+---------------------------------------------------------+\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# _ 下划线\n\nselect name from student where name like '张_';\n\n\n1\n\n\n+------+\n| name |\n+------+\n| 张三 |\n+------+\n\n\n1\n2\n3\n4\n5\n\n\nselect name from student where name like 'an__';\n\n\n1\n\n\n+------+\n| name |\n+------+\n| anna |\n+------+\n\n\n1\n2\n3\n4\n5\n",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"where",frontmatter:{title:"where",date:"2022-05-07T22:17:47.000Z",permalink:"/pages/114a58/",tags:[null]},regularPath:"/02.MySQL/05.Frank%20-%20MySQL%E5%88%A0%E5%BA%93%E8%B7%91%E8%B7%AF/08.%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2/01.where.html",relativePath:"02.MySQL/05.Frank - MySQL删库跑路/08.单表查询/01.where.md",key:"v-11e58d10",path:"/pages/114a58/",headers:[{level:2,title:"where",slug:"where",normalizedTitle:"where",charIndex:2},{level:3,title:"where .. in()",slug:"where-in",normalizedTitle:"where .. in()",charIndex:831},{level:3,title:"whree .. not in()",slug:"whree-not-in",normalizedTitle:"whree .. not in()",charIndex:1048},{level:3,title:"where .. between and",slug:"where-between-and",normalizedTitle:"where .. between and",charIndex:1257},{level:3,title:"where .. not between and",slug:"where-not-between-and",normalizedTitle:"where .. not between and",charIndex:1491},{level:3,title:"where .. is null",slug:"where-is-null",normalizedTitle:"where .. is null",charIndex:1618},{level:3,title:"where .. is not null",slug:"where-is-not-null",normalizedTitle:"where .. is not null",charIndex:1878}],headersStr:"where where .. in() whree .. not in() where .. between and where .. not between and where .. is null where .. is not null",content:"# where\n\n根据给定条件匹配过滤结果。\n\nmysql> select * from student where name='Jim';\n+--------+------+------+---------+\n| stu_id | name | age  | address |\n+--------+------+------+---------+\n|      1 | Jim  |   20 | Hubei   |\n+--------+------+------+---------+\n\nmysql> select * from student where age>=19;\n+--------+------+------+---------+\n| stu_id | name | age  | address |\n+--------+------+------+---------+\n|      1 | Jim  |   20 | Hubei   |\n|      2 | Tom  |   19 | Hubei   |\n+--------+------+------+---------+\n\nmysql> select * from student where age>18 and age<=20;\n+--------+------+------+---------+\n| stu_id | name | age  | address |\n+--------+------+------+---------+\n|      1 | Jim  |   20 | Hubei   |\n|      2 | Tom  |   19 | Hubei   |\n+--------+------+------+---------+\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n\n# where .. in()\n\nmysql> select name,address from student where address in('Hubei');\n+------+---------+\n| name | address |\n+------+---------+\n| Jim  | Hubei   |\n| Tom  | Hubei   |\n+------+---------+\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# whree .. not in()\n\nmysql> select name,address from student where address not in('Hubei');\n+------+----------+\n| name | address  |\n+------+----------+\n| Anna | Shanghai |\n+------+----------+\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# where .. between and\n\nmysql> select name,age from student where age between 18 and 20;\n+------+------+\n| name | age  |\n+------+------+\n| Jim  |   20 |\n| Tom  |   19 |\n| Anna |   18 |\n+------+------+\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n包含 18 和 20\n\n\n# where .. not between and\n\nmysql> select name,age from student where age not between 18 and 20;\nEmpty set (0.00 sec)\n\n\n1\n2\n\n\n\n# where .. is null\n\nmysql> select * from student where age is null;\n+--------+------+------+---------+\n| stu_id | name | age  | address |\n+--------+------+------+---------+\n|      4 | Emma | NULL | Beijing |\n+--------+------+------+---------+\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# where .. is not null\n\nmysql> select * from student where age is not null;\n+--------+------+------+----------+\n| stu_id | name | age  | address  |\n+--------+------+------+----------+\n|      1 | Jim  |   20 | Hubei    |\n|      2 | Tom  |   19 | Hubei    |\n|      3 | Anna |   18 | Shanghai |\n+--------+------+------+----------+\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n",normalizedContent:"# where\n\n根据给定条件匹配过滤结果。\n\nmysql> select * from student where name='jim';\n+--------+------+------+---------+\n| stu_id | name | age  | address |\n+--------+------+------+---------+\n|      1 | jim  |   20 | hubei   |\n+--------+------+------+---------+\n\nmysql> select * from student where age>=19;\n+--------+------+------+---------+\n| stu_id | name | age  | address |\n+--------+------+------+---------+\n|      1 | jim  |   20 | hubei   |\n|      2 | tom  |   19 | hubei   |\n+--------+------+------+---------+\n\nmysql> select * from student where age>18 and age<=20;\n+--------+------+------+---------+\n| stu_id | name | age  | address |\n+--------+------+------+---------+\n|      1 | jim  |   20 | hubei   |\n|      2 | tom  |   19 | hubei   |\n+--------+------+------+---------+\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n\n# where .. in()\n\nmysql> select name,address from student where address in('hubei');\n+------+---------+\n| name | address |\n+------+---------+\n| jim  | hubei   |\n| tom  | hubei   |\n+------+---------+\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# whree .. not in()\n\nmysql> select name,address from student where address not in('hubei');\n+------+----------+\n| name | address  |\n+------+----------+\n| anna | shanghai |\n+------+----------+\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# where .. between and\n\nmysql> select name,age from student where age between 18 and 20;\n+------+------+\n| name | age  |\n+------+------+\n| jim  |   20 |\n| tom  |   19 |\n| anna |   18 |\n+------+------+\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n包含 18 和 20\n\n\n# where .. not between and\n\nmysql> select name,age from student where age not between 18 and 20;\nempty set (0.00 sec)\n\n\n1\n2\n\n\n\n# where .. is null\n\nmysql> select * from student where age is null;\n+--------+------+------+---------+\n| stu_id | name | age  | address |\n+--------+------+------+---------+\n|      4 | emma | null | beijing |\n+--------+------+------+---------+\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# where .. is not null\n\nmysql> select * from student where age is not null;\n+--------+------+------+----------+\n| stu_id | name | age  | address  |\n+--------+------+------+----------+\n|      1 | jim  |   20 | hubei    |\n|      2 | tom  |   19 | hubei    |\n|      3 | anna |   18 | shanghai |\n+--------+------+------+----------+\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"排序查询——order by",frontmatter:{title:"排序查询——order by",date:"2022-05-02T16:31:31.000Z",permalink:"/pages/ccf2cc/",tags:[null]},regularPath:"/02.MySQL/05.Frank%20-%20MySQL%E5%88%A0%E5%BA%93%E8%B7%91%E8%B7%AF/08.%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2/04.%E6%8E%92%E5%BA%8F%E2%80%94%E2%80%94order%20by.html",relativePath:"02.MySQL/05.Frank - MySQL删库跑路/08.单表查询/04.排序——order by.md",key:"v-6fa1b01e",path:"/pages/ccf2cc/",headers:[{level:2,title:"Example",slug:"example",normalizedTitle:"example",charIndex:61},{level:3,title:"升序",slug:"升序",normalizedTitle:"升序",charIndex:40},{level:3,title:"降序",slug:"降序",normalizedTitle:"降序",charIndex:54}],headersStr:"Example 升序 降序",content:"# 排序查询——order by\n\norder by 排序\n\n * asc 代表升序\n\n * desc 代表降序\n\n\n# Example\n\n+----+------+------------+---------------+\n| id | name | math_score | english_score |\n+----+------+------------+---------------+\n|  1 | Tom  |         20 |            99 |\n|  2 | Jim  |         59 |            77 |\n|  3 | Anna |         77 |            59 |\n|  4 | 张三 |         89 |            89 |\n|  5 | 李四 |         99 |            20 |\n+----+------+------------+---------------+\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 升序\n\nselect id,name,english_score from student order by english_score asc;\n\n\n1\n\n\n\n# 降序\n\nselect id,name,english_score from student order by english_score desc;\n\n\n1\n\n\n+----+------+---------------+\n| id | name | english_score |\n+----+------+---------------+\n|  1 | Tom  |            99 |\n|  4 | 张三 |            89 |\n|  2 | Jim  |            77 |\n|  3 | Anna |            59 |\n|  5 | 李四 |            20 |\n+----+------+---------------+\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n",normalizedContent:"# 排序查询——order by\n\norder by 排序\n\n * asc 代表升序\n\n * desc 代表降序\n\n\n# example\n\n+----+------+------------+---------------+\n| id | name | math_score | english_score |\n+----+------+------------+---------------+\n|  1 | tom  |         20 |            99 |\n|  2 | jim  |         59 |            77 |\n|  3 | anna |         77 |            59 |\n|  4 | 张三 |         89 |            89 |\n|  5 | 李四 |         99 |            20 |\n+----+------+------------+---------------+\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 升序\n\nselect id,name,english_score from student order by english_score asc;\n\n\n1\n\n\n\n# 降序\n\nselect id,name,english_score from student order by english_score desc;\n\n\n1\n\n\n+----+------+---------------+\n| id | name | english_score |\n+----+------+---------------+\n|  1 | tom  |            99 |\n|  4 | 张三 |            89 |\n|  2 | jim  |            77 |\n|  3 | anna |            59 |\n|  5 | 李四 |            20 |\n+----+------+---------------+\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"分组查询——group by",frontmatter:{title:"分组查询——group by",date:"2022-05-02T16:51:11.000Z",permalink:"/pages/229131/",tags:[null]},regularPath:"/02.MySQL/05.Frank%20-%20MySQL%E5%88%A0%E5%BA%93%E8%B7%91%E8%B7%AF/08.%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2/05.%E5%88%86%E7%BB%84%E2%80%94%E2%80%94group%20by.html",relativePath:"02.MySQL/05.Frank - MySQL删库跑路/08.单表查询/05.分组——group by.md",key:"v-086cf181",path:"/pages/229131/",headers:[{level:2,title:"Example",slug:"example",normalizedTitle:"example",charIndex:138},{level:3,title:"查询表中男女各自人数",slug:"查询表中男女各自人数",normalizedTitle:"查询表中男女各自人数",charIndex:681},{level:3,title:"逆序排列（desc）",slug:"逆序排列-desc",normalizedTitle:"逆序排列（desc）",charIndex:883},{level:3,title:"查询男女各自平均年龄",slug:"查询男女各自平均年龄",normalizedTitle:"查询男女各自平均年龄",charIndex:1090},{level:3,title:"查询各地区人数",slug:"查询各地区人数",normalizedTitle:"查询各地区人数",charIndex:1311},{level:3,title:"group_concat() 函数",slug:"group-concat-函数",normalizedTitle:"group_concat() 函数",charIndex:1527}],headersStr:"Example 查询表中男女各自人数 逆序排列（desc） 查询男女各自平均年龄 查询各地区人数 group_concat() 函数",content:"# 分组查询——group by\n\ngroup by 分组\n\n * 聚合函数\n\n * 依据字段\n\n * desc 逆序排列（默认排列asc）\n\nselect <聚合函数>, <依据字段> from <TableName> group by <依据字段>; \n\n\n1\n\n\n\n# Example\n\n+----+--------+------+--------+---------+\n| id | name   | age  | gender | address |\n+----+--------+------+--------+---------+\n|  1 | 张伟   |   25 | 男     | 上海    |\n|  2 | 李星   |   30 | 男     | 武汉    |\n|  3 | 陈晓   |   23 | 女     | 北京    |\n|  4 | 姚蓝   |   34 | 男     | 上海    |\n|  5 | 朱隶   |   42 | 男     | 北京    |\n|  6 | 张小雨 |   24 | 女     | 上海    |\n|  7 | 丁雪雪 |   21 | 女     | 北京    |\n|  8 | 万娇娇 |   18 | 女     | 武汉    |\n|  9 | 余苗苗 |   19 | 女     | 上海    |\n+----+--------+------+--------+---------+\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# 查询表中男女各自人数\n\nselect count(gender) as '人数', gender as '性别' from manager group by gender;\n\n\n1\n\n\n+------+------+\n| 人数 | 性别 |\n+------+------+\n|    4 | 男   |\n|    5 | 女   |\n+------+------+\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 逆序排列（desc）\n\nselect count(gender) as '人数', gender as '性别' from manager group by gender desc;\n\n\n1\n\n\n+------+------+\n| 人数 | 性别 |\n+------+------+\n|    5 | 女   |\n|    4 | 男   |\n+------+------+\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 查询男女各自平均年龄\n\nselect avg(age) as '平均年龄', gender as '性别' from manager group by gender;\n\n\n1\n\n\n+----------+------+\n| 平均年龄 | 性别 |\n+----------+------+\n|  32.7500 | 男   |\n|  21.0000 | 女   |\n+----------+------+\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 查询各地区人数\n\nselect count(address) as '人数', address as '地区' from manager group by address;\n\n\n1\n\n\n+------+------+\n| 人数 | 地区 |\n+------+------+\n|    3 | 北京 |\n|    4 | 上海 |\n|    2 | 武汉 |\n+------+------+\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# group_concat() 函数\n\nselect group_concat(name), gender from manager group by gender;\n\n\n1\n\n\n+----------------------------------+--------+\n| group_concat(name)               | gender |\n+----------------------------------+--------+\n| 张伟,李星,姚蓝,朱隶              | 男     |\n| 陈晓,张小雨,丁雪雪,万娇娇,余苗苗 | 女     |\n+----------------------------------+--------+\n\n\n1\n2\n3\n4\n5\n6\n",normalizedContent:"# 分组查询——group by\n\ngroup by 分组\n\n * 聚合函数\n\n * 依据字段\n\n * desc 逆序排列（默认排列asc）\n\nselect <聚合函数>, <依据字段> from <tablename> group by <依据字段>; \n\n\n1\n\n\n\n# example\n\n+----+--------+------+--------+---------+\n| id | name   | age  | gender | address |\n+----+--------+------+--------+---------+\n|  1 | 张伟   |   25 | 男     | 上海    |\n|  2 | 李星   |   30 | 男     | 武汉    |\n|  3 | 陈晓   |   23 | 女     | 北京    |\n|  4 | 姚蓝   |   34 | 男     | 上海    |\n|  5 | 朱隶   |   42 | 男     | 北京    |\n|  6 | 张小雨 |   24 | 女     | 上海    |\n|  7 | 丁雪雪 |   21 | 女     | 北京    |\n|  8 | 万娇娇 |   18 | 女     | 武汉    |\n|  9 | 余苗苗 |   19 | 女     | 上海    |\n+----+--------+------+--------+---------+\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# 查询表中男女各自人数\n\nselect count(gender) as '人数', gender as '性别' from manager group by gender;\n\n\n1\n\n\n+------+------+\n| 人数 | 性别 |\n+------+------+\n|    4 | 男   |\n|    5 | 女   |\n+------+------+\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 逆序排列（desc）\n\nselect count(gender) as '人数', gender as '性别' from manager group by gender desc;\n\n\n1\n\n\n+------+------+\n| 人数 | 性别 |\n+------+------+\n|    5 | 女   |\n|    4 | 男   |\n+------+------+\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 查询男女各自平均年龄\n\nselect avg(age) as '平均年龄', gender as '性别' from manager group by gender;\n\n\n1\n\n\n+----------+------+\n| 平均年龄 | 性别 |\n+----------+------+\n|  32.7500 | 男   |\n|  21.0000 | 女   |\n+----------+------+\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 查询各地区人数\n\nselect count(address) as '人数', address as '地区' from manager group by address;\n\n\n1\n\n\n+------+------+\n| 人数 | 地区 |\n+------+------+\n|    3 | 北京 |\n|    4 | 上海 |\n|    2 | 武汉 |\n+------+------+\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# group_concat() 函数\n\nselect group_concat(name), gender from manager group by gender;\n\n\n1\n\n\n+----------------------------------+--------+\n| group_concat(name)               | gender |\n+----------------------------------+--------+\n| 张伟,李星,姚蓝,朱隶              | 男     |\n| 陈晓,张小雨,丁雪雪,万娇娇,余苗苗 | 女     |\n+----------------------------------+--------+\n\n\n1\n2\n3\n4\n5\n6\n",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"结果筛选——having",frontmatter:{title:"结果筛选——having",date:"2022-05-07T22:08:48.000Z",permalink:"/pages/d65fc4/",tags:[null]},regularPath:"/02.MySQL/05.Frank%20-%20MySQL%E5%88%A0%E5%BA%93%E8%B7%91%E8%B7%AF/08.%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2/06.%E7%AD%9B%E9%80%89%E2%80%94%E2%80%94having.html",relativePath:"02.MySQL/05.Frank - MySQL删库跑路/08.单表查询/06.筛选——having.md",key:"v-305be5af",path:"/pages/d65fc4/",headers:[{level:2,title:"where 和 having 的区别",slug:"where-和-having-的区别",normalizedTitle:"where 和 having 的区别",charIndex:19},{level:2,title:"Example",slug:"example",normalizedTitle:"example",charIndex:124}],headersStr:"where 和 having 的区别 Example",content:"# 结果筛选——having\n\n\n# where 和 having 的区别\n\n * where 是对原表进行筛选，是在结果返回之前起作用的，不能使用聚合函数\n\n * having 是对查询结果（结果集 / 伪表）进行过滤，可以使用聚合函数\n\n\n# Example\n\nSELECT\n\taddress,\n\tavg( age ) AS 'avg_age' \nFROM\n\tmanager \nHAVING\n\tage >= 24;\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nSELECT\n\tclassid,\n\tcount(*) AS 'num_of_student' \nFROM\n\tstudent \nGROUP BY\n\tclassid;\nHAVING\n\tcount <=10;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n",normalizedContent:"# 结果筛选——having\n\n\n# where 和 having 的区别\n\n * where 是对原表进行筛选，是在结果返回之前起作用的，不能使用聚合函数\n\n * having 是对查询结果（结果集 / 伪表）进行过滤，可以使用聚合函数\n\n\n# example\n\nselect\n\taddress,\n\tavg( age ) as 'avg_age' \nfrom\n\tmanager \nhaving\n\tage >= 24;\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nselect\n\tclassid,\n\tcount(*) as 'num_of_student' \nfrom\n\tstudent \ngroup by\n\tclassid;\nhaving\n\tcount <=10;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"限制——limit",frontmatter:{title:"限制——limit",date:"2022-05-10T22:30:20.000Z",permalink:"/pages/5cdf6f/",tags:[null]},regularPath:"/02.MySQL/05.Frank%20-%20MySQL%E5%88%A0%E5%BA%93%E8%B7%91%E8%B7%AF/08.%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2/07.%E9%99%90%E5%88%B6%E2%80%94%E2%80%94limit.html",relativePath:"02.MySQL/05.Frank - MySQL删库跑路/08.单表查询/07.限制——limit.md",key:"v-eba2befa",path:"/pages/5cdf6f/",headers:[{level:2,title:"Example",slug:"example",normalizedTitle:"example",charIndex:152},{level:3,title:"limit 0, 3",slug:"limit-0-3",normalizedTitle:"limit 0, 3",charIndex:32},{level:3,title:"limit 1, 2",slug:"limit-1-2",normalizedTitle:"limit 1, 2",charIndex:60},{level:3,title:"limit 3",slug:"limit-3",normalizedTitle:"limit 3",charIndex:88},{level:3,title:"order by  与 limit",slug:"order-by-与-limit",normalizedTitle:"order by  与 limit",charIndex:null}],headersStr:"Example limit 0, 3 limit 1, 2 limit 3 order by  与 limit",content:"# 结果限制——limit\n\n限制显示查询结果的范围。\n\n * limit 0, 3 从第一条记录开始，显示三条\n * limit 1, 2 从第二条记录开始，显示两条\n * limit 3 显示前三条记录\n * order by ... desc limit 3 显示降序排列之后的前三条记录\n\n\n# Example\n\n+----+--------+------+--------+---------+\n| id | name   | age  | gender | address |\n+----+--------+------+--------+---------+\n|  1 | 张伟   |   25 | 男     | 上海    |\n|  2 | 李星   |   30 | 男     | 武汉    |\n|  3 | 陈晓   |   23 | 女     | 北京    |\n|  4 | 姚蓝   |   34 | 男     | 上海    |\n|  5 | 朱隶   |   42 | 男     | 北京    |\n|  6 | 张小雨 |   24 | 女     | 上海    |\n|  7 | 丁雪雪 |   21 | 女     | 北京    |\n|  8 | 万娇娇 |   18 | 女     | 武汉    |\n|  9 | 余苗苗 |   19 | 女     | 上海    |\n+----+--------+------+--------+---------+\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# limit 0, 3\n\nselect * from manager limit 0, 3;\n\n\n1\n\n\n+----+------+------+--------+---------+\n| id | name | age  | gender | address |\n+----+------+------+--------+---------+\n|  1 | 张伟 |   25 | 男     | 上海    |\n|  2 | 李星 |   30 | 男     | 武汉    |\n|  3 | 陈晓 |   23 | 女     | 北京    |\n+----+------+------+--------+---------+\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# limit 1, 2\n\nselect * from manager limit 1, 2;\n\n\n1\n\n\n+----+------+------+--------+---------+\n| id | name | age  | gender | address |\n+----+------+------+--------+---------+\n|  2 | 李星 |   30 | 男     | 武汉    |\n|  3 | 陈晓 |   23 | 女     | 北京    |\n+----+------+------+--------+---------+\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# limit 3\n\nselect * from manager limit 3;\n\n\n1\n\n\n+----+------+------+--------+---------+\n| id | name | age  | gender | address |\n+----+------+------+--------+---------+\n|  1 | 张伟 |   25 | 男     | 上海    |\n|  2 | 李星 |   30 | 男     | 武汉    |\n|  3 | 陈晓 |   23 | 女     | 北京    |\n+----+------+------+--------+---------+\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# order by 与 limit\n\n查询年龄最大的三个人，使用 order by age desc 降序排列，然后使用 limit 3 显示前三条记录。\n\nselect * from manager order by age desc limit 3;\n\n\n1\n\n\n+----+------+------+--------+---------+\n| id | name | age  | gender | address |\n+----+------+------+--------+---------+\n|  5 | 朱隶 |   42 | 男     | 北京    |\n|  4 | 姚蓝 |   34 | 男     | 上海    |\n|  2 | 李星 |   30 | 男     | 武汉    |\n+----+------+------+--------+---------+\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n亦可使用 order by age asc 升序排列查询年龄最小的三个人。",normalizedContent:"# 结果限制——limit\n\n限制显示查询结果的范围。\n\n * limit 0, 3 从第一条记录开始，显示三条\n * limit 1, 2 从第二条记录开始，显示两条\n * limit 3 显示前三条记录\n * order by ... desc limit 3 显示降序排列之后的前三条记录\n\n\n# example\n\n+----+--------+------+--------+---------+\n| id | name   | age  | gender | address |\n+----+--------+------+--------+---------+\n|  1 | 张伟   |   25 | 男     | 上海    |\n|  2 | 李星   |   30 | 男     | 武汉    |\n|  3 | 陈晓   |   23 | 女     | 北京    |\n|  4 | 姚蓝   |   34 | 男     | 上海    |\n|  5 | 朱隶   |   42 | 男     | 北京    |\n|  6 | 张小雨 |   24 | 女     | 上海    |\n|  7 | 丁雪雪 |   21 | 女     | 北京    |\n|  8 | 万娇娇 |   18 | 女     | 武汉    |\n|  9 | 余苗苗 |   19 | 女     | 上海    |\n+----+--------+------+--------+---------+\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# limit 0, 3\n\nselect * from manager limit 0, 3;\n\n\n1\n\n\n+----+------+------+--------+---------+\n| id | name | age  | gender | address |\n+----+------+------+--------+---------+\n|  1 | 张伟 |   25 | 男     | 上海    |\n|  2 | 李星 |   30 | 男     | 武汉    |\n|  3 | 陈晓 |   23 | 女     | 北京    |\n+----+------+------+--------+---------+\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# limit 1, 2\n\nselect * from manager limit 1, 2;\n\n\n1\n\n\n+----+------+------+--------+---------+\n| id | name | age  | gender | address |\n+----+------+------+--------+---------+\n|  2 | 李星 |   30 | 男     | 武汉    |\n|  3 | 陈晓 |   23 | 女     | 北京    |\n+----+------+------+--------+---------+\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# limit 3\n\nselect * from manager limit 3;\n\n\n1\n\n\n+----+------+------+--------+---------+\n| id | name | age  | gender | address |\n+----+------+------+--------+---------+\n|  1 | 张伟 |   25 | 男     | 上海    |\n|  2 | 李星 |   30 | 男     | 武汉    |\n|  3 | 陈晓 |   23 | 女     | 北京    |\n+----+------+------+--------+---------+\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# order by 与 limit\n\n查询年龄最大的三个人，使用 order by age desc 降序排列，然后使用 limit 3 显示前三条记录。\n\nselect * from manager order by age desc limit 3;\n\n\n1\n\n\n+----+------+------+--------+---------+\n| id | name | age  | gender | address |\n+----+------+------+--------+---------+\n|  5 | 朱隶 |   42 | 男     | 北京    |\n|  4 | 姚蓝 |   34 | 男     | 上海    |\n|  2 | 李星 |   30 | 男     | 武汉    |\n+----+------+------+--------+---------+\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n亦可使用 order by age asc 升序排列查询年龄最小的三个人。",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"去重——distinct",frontmatter:{title:"去重——distinct",date:"2022-05-10T22:30:20.000Z",permalink:"/pages/425ca1/",tags:[null]},regularPath:"/02.MySQL/05.Frank%20-%20MySQL%E5%88%A0%E5%BA%93%E8%B7%91%E8%B7%AF/08.%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2/08.%E5%8E%BB%E9%87%8D%E2%80%94%E2%80%94distinct.html",relativePath:"02.MySQL/05.Frank - MySQL删库跑路/08.单表查询/08.去重——distinct.md",key:"v-32e1b1fa",path:"/pages/425ca1/",headers:[{level:2,title:"all",slug:"all",normalizedTitle:"all",charIndex:19},{level:2,title:"distinct",slug:"distinct",normalizedTitle:"distinct",charIndex:6},{level:2,title:"Example",slug:"example",normalizedTitle:"example",charIndex:879},{level:3,title:"不去重 all",slug:"不去重-all",normalizedTitle:"不去重 all",charIndex:1422},{level:3,title:"去重 distinct",slug:"去重-distinct-2",normalizedTitle:"去重 distinct",charIndex:1678},{level:3,title:"统计去重后的数量",slug:"统计去重后的数量",normalizedTitle:"统计去重后的数量",charIndex:1834}],headersStr:"all distinct Example 不去重 all 去重 distinct 统计去重后的数量",content:"# 去重——distinct\n\n\n# all\n\n一般默认的查询语句都带有 all，表示不去重，默认隐藏。\n\nselect all <FieldName> from <TableName>;\n\n\n1\n\n\n\n# distinct\n\n若要对查询结果去重，则使用 distinct，不是对针对于某一列，而是所有列\n\n若要统计去重后记录的数量，则使用 count(distinct <FieldName>)\n\nCREATE TABLE `car`\n( `car_id` INT UNSIGNED NOT NULL PRIMARY KEY,\n `name` VARCHAR(20),\n `price` DECIMAL(8,2)\n);\n\nINSERT INTO CAR (`car_id`, `name`, `price`) VALUES (1, 'Audi A1', '20000');\nINSERT INTO CAR (`car_id`, `name`, `price`) VALUES (2, 'Audi A1', '15000');\nINSERT INTO CAR (`car_id`, `name`, `price`) VALUES (3, 'Audi A2', '40000');\nINSERT INTO CAR (`car_id`, `name`, `price`) VALUES (4, 'Audi A2', '40000');\n\nSELECT DISTINCT `name`, `price` FROM CAR;\n\n+---------+----------+\n| name    | price    |\n+---------+----------+\n| Audi A1 | 20000.00 |\n| Audi A1 | 15000.00 |\n| Audi A2 | 40000.00 |\n+---------+----------+\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n# Example\n\n+----+--------+------+--------+---------+\n| id | name   | age  | gender | address |\n+----+--------+------+--------+---------+\n|  1 | 张伟   |   25 | 男     | 上海    |\n|  2 | 李星   |   30 | 男     | 武汉    |\n|  3 | 陈晓   |   23 | 女     | 北京    |\n|  4 | 姚蓝   |   34 | 男     | 上海    |\n|  5 | 朱隶   |   42 | 男     | 北京    |\n|  6 | 张小雨 |   24 | 女     | 上海    |\n|  7 | 丁雪雪 |   21 | 女     | 北京    |\n|  8 | 万娇娇 |   18 | 女     | 武汉    |\n|  9 | 余苗苗 |   19 | 女     | 上海    |\n+----+--------+------+--------+---------+\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# 不去重 all\n\nselect all address from manager;\n# select address from manager;\n\n\n1\n2\n\n\n+---------+\n| address |\n+---------+\n| 上海    |\n| 武汉    |\n| 北京    |\n| 上海    |\n| 北京    |\n| 上海    |\n| 北京    |\n| 武汉    |\n| 上海    |\n+---------+\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# 去重 distinct\n\nselect distinct address from manager;\n\n\n1\n\n\n+---------+\n| address |\n+---------+\n| 上海    |\n| 武汉    |\n| 北京    |\n+---------+\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 统计去重后的数量\n\nselect count(distinct address) as '城市数量' from manager;\n\n\n1\n\n\n+----------+\n| 城市数量 |\n+----------+\n|        3 |\n+----------+\n\n\n1\n2\n3\n4\n5\n",normalizedContent:"# 去重——distinct\n\n\n# all\n\n一般默认的查询语句都带有 all，表示不去重，默认隐藏。\n\nselect all <fieldname> from <tablename>;\n\n\n1\n\n\n\n# distinct\n\n若要对查询结果去重，则使用 distinct，不是对针对于某一列，而是所有列\n\n若要统计去重后记录的数量，则使用 count(distinct <fieldname>)\n\ncreate table `car`\n( `car_id` int unsigned not null primary key,\n `name` varchar(20),\n `price` decimal(8,2)\n);\n\ninsert into car (`car_id`, `name`, `price`) values (1, 'audi a1', '20000');\ninsert into car (`car_id`, `name`, `price`) values (2, 'audi a1', '15000');\ninsert into car (`car_id`, `name`, `price`) values (3, 'audi a2', '40000');\ninsert into car (`car_id`, `name`, `price`) values (4, 'audi a2', '40000');\n\nselect distinct `name`, `price` from car;\n\n+---------+----------+\n| name    | price    |\n+---------+----------+\n| audi a1 | 20000.00 |\n| audi a1 | 15000.00 |\n| audi a2 | 40000.00 |\n+---------+----------+\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n# example\n\n+----+--------+------+--------+---------+\n| id | name   | age  | gender | address |\n+----+--------+------+--------+---------+\n|  1 | 张伟   |   25 | 男     | 上海    |\n|  2 | 李星   |   30 | 男     | 武汉    |\n|  3 | 陈晓   |   23 | 女     | 北京    |\n|  4 | 姚蓝   |   34 | 男     | 上海    |\n|  5 | 朱隶   |   42 | 男     | 北京    |\n|  6 | 张小雨 |   24 | 女     | 上海    |\n|  7 | 丁雪雪 |   21 | 女     | 北京    |\n|  8 | 万娇娇 |   18 | 女     | 武汉    |\n|  9 | 余苗苗 |   19 | 女     | 上海    |\n+----+--------+------+--------+---------+\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# 不去重 all\n\nselect all address from manager;\n# select address from manager;\n\n\n1\n2\n\n\n+---------+\n| address |\n+---------+\n| 上海    |\n| 武汉    |\n| 北京    |\n| 上海    |\n| 北京    |\n| 上海    |\n| 北京    |\n| 武汉    |\n| 上海    |\n+---------+\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# 去重 distinct\n\nselect distinct address from manager;\n\n\n1\n\n\n+---------+\n| address |\n+---------+\n| 上海    |\n| 武汉    |\n| 北京    |\n+---------+\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 统计去重后的数量\n\nselect count(distinct address) as '城市数量' from manager;\n\n\n1\n\n\n+----------+\n| 城市数量 |\n+----------+\n|        3 |\n+----------+\n\n\n1\n2\n3\n4\n5\n",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"联合——union",frontmatter:{title:"联合——union",date:"2022-05-12T19:18:49.000Z",permalink:"/pages/56c50b/",tags:[null]},regularPath:"/02.MySQL/05.Frank%20-%20MySQL%E5%88%A0%E5%BA%93%E8%B7%91%E8%B7%AF/09.%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/01.%E8%81%94%E5%90%88%E2%80%94%E2%80%94union.html",relativePath:"02.MySQL/05.Frank - MySQL删库跑路/09.多表查询/01.联合——union.md",key:"v-c7c7c5d8",path:"/pages/56c50b/",headers:[{level:2,title:"union",slug:"union",normalizedTitle:"union",charIndex:6},{level:2,title:"union all",slug:"union-all",normalizedTitle:"union all",charIndex:541}],headersStr:"union union all",content:'# 联合——union\n\n\n# union\n\nThe UNION operator is used to combine the result-set (only distinct values) of two or more SELECT statements.\n\n提示\n\nunion 仅显示非重复值。\n\nselect 的字段的个数要一致。\n\nQuery: (To selects all the different cities (only distinct values) from the "Customers" and the "Suppliers" tables)\n\nSELECT City FROM Customers\nUNION\nSELECT City FROM Suppliers\nORDER BY City;\n\n\n1\n2\n3\n4\n\n\nResult:\n\nNumber of Records: 10\nCity\n------\nAachen\nAlbuquerque\nAnchorage\nAnnecy\nBarcelona\nBarquisimeto\nBend\nBergamo\nBerlin\nBern\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# union all\n\nUNION ALL to select all (duplicate values also) cities from the "Customers" and "Suppliers" tables.\n\n提示\n\nunion all 重复值也会显示。\n\nQuery:\n\nSELECT City FROM Customers\nUNION ALL\nSELECT City FROM Suppliers\nORDER BY City;\n\n\n1\n2\n3\n4\n\n\nResult:\n\nNumber of Records: 12\nCity\n-------\nAachen\nAachen\nAlbuquerque\nAnchorage\nAnnecy\nBarcelona\nBarquisimeto\nBend\nBend\nBergamo\nBerlin\nBerlin\nBern\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n',normalizedContent:'# 联合——union\n\n\n# union\n\nthe union operator is used to combine the result-set (only distinct values) of two or more select statements.\n\n提示\n\nunion 仅显示非重复值。\n\nselect 的字段的个数要一致。\n\nquery: (to selects all the different cities (only distinct values) from the "customers" and the "suppliers" tables)\n\nselect city from customers\nunion\nselect city from suppliers\norder by city;\n\n\n1\n2\n3\n4\n\n\nresult:\n\nnumber of records: 10\ncity\n------\naachen\nalbuquerque\nanchorage\nannecy\nbarcelona\nbarquisimeto\nbend\nbergamo\nberlin\nbern\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# union all\n\nunion all to select all (duplicate values also) cities from the "customers" and "suppliers" tables.\n\n提示\n\nunion all 重复值也会显示。\n\nquery:\n\nselect city from customers\nunion all\nselect city from suppliers\norder by city;\n\n\n1\n2\n3\n4\n\n\nresult:\n\nnumber of records: 12\ncity\n-------\naachen\naachen\nalbuquerque\nanchorage\nannecy\nbarcelona\nbarquisimeto\nbend\nbend\nbergamo\nberlin\nberlin\nbern\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n',charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"连接——join",frontmatter:{title:"连接——join",date:"2022-05-14T19:57:50.000Z",permalink:"/pages/653123/",tags:[null]},regularPath:"/02.MySQL/05.Frank%20-%20MySQL%E5%88%A0%E5%BA%93%E8%B7%91%E8%B7%AF/09.%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/02.%E8%BF%9E%E6%8E%A5%E2%80%94%E2%80%94join.html",relativePath:"02.MySQL/05.Frank - MySQL删库跑路/09.多表查询/02.连接——join.md",key:"v-01287270",path:"/pages/653123/",headers:[{level:2,title:"join",slug:"join",normalizedTitle:"join",charIndex:6}],headersStr:"join",content:"# 连接——join\n\n\n# join\n\n两张表一定要有公共字段\n\nMySQL中存在多种类型的 join：\n\n * 内连接——inner join\n * 左连接——left join\n * 右连接——right join\n * \n\n",normalizedContent:"# 连接——join\n\n\n# join\n\n两张表一定要有公共字段\n\nmysql中存在多种类型的 join：\n\n * 内连接——inner join\n * 左连接——left join\n * 右连接——right join\n * \n\n",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Arch Linux 安装过程",frontmatter:{title:"Arch Linux 安装过程",date:"2022-04-17T19:20:20.000Z",permalink:"/pages/affb3e/",tags:[null]},regularPath:"/03.Linux/02.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/04.%E5%85%B6%E5%AE%83/02.Arch%20Linux%20%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B.html",relativePath:"03.Linux/02.学习笔记/04.其它/02.Arch Linux 安装过程.md",key:"v-2995e4f3",path:"/pages/affb3e/",headers:[{level:2,title:"启动 Arch ISO",slug:"启动-arch-iso",normalizedTitle:"启动 arch iso",charIndex:115},{level:2,title:"验证与 Internet 的连接",slug:"验证与-internet-的连接",normalizedTitle:"验证与 internet 的连接",charIndex:423},{level:2,title:"对磁盘进行分区",slug:"对磁盘进行分区",normalizedTitle:"对磁盘进行分区",charIndex:853},{level:3,title:"创建 EFI 系统分区",slug:"创建-efi-系统分区",normalizedTitle:"创建 efi 系统分区",charIndex:1257},{level:3,title:"创建 swap 分区",slug:"创建-swap-分区",normalizedTitle:"创建 swap 分区",charIndex:1508},{level:3,title:"创建 / 分区",slug:"创建-分区",normalizedTitle:"创建 / 分区",charIndex:1703},{level:3,title:"将更改写入磁盘",slug:"将更改写入磁盘",normalizedTitle:"将更改写入磁盘",charIndex:1869},{level:2,title:"创建文件系统",slug:"创建文件系统",normalizedTitle:"创建文件系统",charIndex:1967},{level:2,title:"安装 Arch Linux",slug:"安装-arch-linux",normalizedTitle:"安装 arch linux",charIndex:2346},{level:2,title:"配置已安装的 Arch 系统",slug:"配置已安装的-arch-系统",normalizedTitle:"配置已安装的 arch 系统",charIndex:2592},{level:3,title:"配置时区",slug:"配置时区",normalizedTitle:"配置时区",charIndex:2916},{level:3,title:"设置 locale 文件",slug:"设置-locale-文件",normalizedTitle:"设置 locale 文件",charIndex:3160},{level:3,title:"设置主机名",slug:"设置主机名",normalizedTitle:"设置主机名",charIndex:3700},{level:3,title:"设置 root 用户密码",slug:"设置-root-用户密码",normalizedTitle:"设置 root 用户密码",charIndex:3878},{level:2,title:"安装 GRUB 引导程序",slug:"安装-grub-引导程序",normalizedTitle:"安装 grub 引导程序",charIndex:3906},{level:2,title:"安装桌面环境",slug:"安装桌面环境",normalizedTitle:"安装桌面环境",charIndex:4413},{level:2,title:"创建一个普通用户帐户",slug:"创建一个普通用户帐户",normalizedTitle:"创建一个普通用户帐户",charIndex:4991},{level:2,title:"完成 Arch Linux 系统安装",slug:"完成-arch-linux-系统安装",normalizedTitle:"完成 arch linux 系统安装",charIndex:5223}],headersStr:"启动 Arch ISO 验证与 Internet 的连接 对磁盘进行分区 创建 EFI 系统分区 创建 swap 分区 创建 / 分区 将更改写入磁盘 创建文件系统 安装 Arch Linux 配置已安装的 Arch 系统 配置时区 设置 locale 文件 设置主机名 设置 root 用户密码 安装 GRUB 引导程序 安装桌面环境 创建一个普通用户帐户 完成 Arch Linux 系统安装",content:"> 图文详解：https://www.linuxmi.com/arch-linux-anzhuang.html\n> \n> Arch Linux ISO 下载：https://archlinux.org/download/\n\n\n# 启动 Arch ISO\n\n> ！VirtualBox 用户和 VMware 用户必须在开始安装之前在虚拟机设置中启用 EFI 或 UEFI 引导。否则在尝试安装 GRUB 引导加载程序时会发生错误。（VMware 默认使用 boot 引导）\n> \n> 如果是实体机安装，请另外准备 Live Bootable USB（可以使用 Etcher 或 Ventoy 等应用程序）\n\n * 启动到 Arch ISO 后，选择Arch Linux install medium (x86_64, UEFI)选项并点击Enter\n * 安装程序解压并加载 Linux 内核后， 您将自动跳转到具有 root 权限的终端\n\n\n# 验证与 Internet 的连接\n\n * 只需 ping 一个网站\n\n> 如果收到一个错误信息，请检查你的互联网连接或路由器\n> \n> 检查网络：\n> \n>  * 输入ip a指令检查\n> \n> 这里用的是有线连接，如果你用的是无线连接需要按照下面的步骤连接到无线网：\n> \n>  * 输入iwctl\n>  * 进入iwd模式，输入device list\n> \n> 查看你的网卡名字，这里假设是wlan0，输入\n> \n>  * station wlan0 scan\n> \n> 检查扫描网络，输入\n> \n>  * station wlan0 get-networks\n> \n> 查看网络名字，假设名字叫linuxmi，输入\n> \n>  * station wlan0 connect linuxmi\n> \n> 接着输入密码（如果有密码的话），输入\n> \n>  * exit\n> \n> 退出iwd模式\n> \n> 连接成功之后，检查可以连接到pacman源\n\n\n# 对磁盘进行分区\n\n> 如果您不熟悉诸如 fdisk 之类的分区工具，那么您很可能会在这里遇到最大的麻烦 cfdisk\n\n * fdisk -l 列出磁盘阵列\n\n> 出于本指南的目的，我们创建一个虚拟机，其中包含一个由 /dev/sda。更改/dev/sda为您的设备名称。\n> \n> 对于基本分区，我们需要创建以下分区布局：\n> \n>  * /dev/sda1: EFI 系统分区，大小为 512 MB（通常设为 1G），FAT32 格式。这为存储引导加载程序和引导所需的其他文件提供了空间。\n>  * /dev/sda2：交换分区，4GB 大小。交换空间用于将虚拟内存扩展到已安装的物理内存 (RAM) 之外，或用于挂起磁盘支持。\n>  * /dev/sda3：Linux分区，剩余可用磁盘空间大小，EXT4格式。这是存储我们的 Arch Linux 操作系统、文件和其他信息的根 (/) 分区。\n\n\n# 创建 EFI 系统分区\n\n> 通过 cfdisk 对机器硬盘驱动器运行命令来实际开始创建磁盘布局分区表\n\n * cfdisk /dev/sda\n * 选择GPT标签并点击enter\n * 选择 Free Space 并点击 New\n * 以 MB (1024M) 为单位键入分区大小，然后按Enter键，创建出 /dev/sda1 分区\n * 在/dev/sda1分区仍然被选中的情况下，从底部菜单中选择Type并选择EFI System分区类型\n\n> 现在，您已完成 EFI 系统分区的配置\n\n\n# 创建 swap 分区\n\n> 使用相同的过程创建 swap 分区\n\n * 再次选择剩余的Free space和 并点击New\n * 以 GB (4G) 为单位键入分区大小，然后按Enter键，创建出 /dev/sda2 分区\n * 在/dev/sda2分区仍然被选中的情况下，从底部菜单中选择Type并选择Linux swap分区类型\n\n> 现在，您已经完成了 Swap 分区的配置\n\n\n# 创建 / 分区\n\n * 选择剩余的Free space和 并点击New\n * 对于 (/) 大小，保留默认大小值。这意味着，所有剩余的可用空间。按Enter键\n * 在/dev/sda3分区仍然被选中的情况下，从底部菜单中选择Type并选择Linux filesystem分区类型\n\n> 现在，您已经完成了 / 分区的配置\n\n\n# 将更改写入磁盘\n\n> 接下来，您需要保存所做的更改\n\n * 选择Write从底部菜单和命中Enter\n * 键入yes并按下Enter键\n * 到此结束，选择Quit并按下Enter即可\n\n\n# 创建文件系统\n\n现在您已准备好磁盘分区，是时候在其上创建文件系统了。首先通过运行fdisk -l来查看分区表摘要。\n\n> 该/dev/sda磁盘应该有三个分区（/dev/sda1，dev/sda2，和/dev/sda3）\n> \n> 前面步骤中分区的创建只是在硬盘提供的存储空间上划出边界，并指定了每条边界线之间的空间类型。现在，是时候用所需的文件系统格式化分区了。\n> \n> 我们必须在这里创建 3 个文件系统，所以让我们开始吧。\n\n对于 EFI 分区类型，创建一个 FAT32 文件系统：\n\n * mkfs.fat -F32 /dev/sda1\n\n对于 swap 分区：\n\n * mkswap /dev/sda2\n * swapon /dev/sda2\n\n对于根分区，创建一个 ext4 文件系统：\n\n * mkfs.ext4 /dev/sda3\n\n\n# 安装 Arch Linux\n\n同步 pacman 存储库，以便您可以下载和安装软件：\n\n * pacman -Syy\n\n必须先将根分区 ( /dev/sda3)挂载到 /mnt目录中，然后才能执行所有的安装。\n\n * mount /dev/sda3 /mnt\n\n安装根分区后，是时候安装所有必要的包了。使用该 pacstrap 命令安装 Arch Linux 所需的软件包。\n\n * pacstrap /mnt base linux linux-firmware sudo nano\n\n\n# 配置已安装的 Arch 系统\n\n安装完成后，通过发出以下命令为您的新 Arch Linux 系统生成 fstab 文件：\n\n * genfstab -U /mnt >> /mnt/etc/fstab\n\n现在我们已经安装了 Arch Linux，我们需要使用 命令切换到物理安装的根分区arch-chroot。\n\n * arch-chroot /mnt\n   \n   \n\n> 如果执行arch-chroot /mnt后提示 chroot failed to run command /bin/bash : no such file or directory，可能是没有安装完全，执行 pacstrap /mnt base 确保安装包安装完毕\n\n\n# 配置时区\n\n> 要查找您的时区，您可以执行 ls -l/usr/share/zoneinfo/列出目录的内容 ，找到您的首选时区\n> \n> 创建一个符号链接来设置时区（将“ America/New_York”替换为您的时区） ln -sf /usr/share/zoneinfo/America/New_York /etc/localtime\n\n例如，上海：\n\n * ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\n\n\n# 设置 locale 文件\n\n该文件 /etc/locale.gen 包含区域设置和系统语言，并在默认情况下被注释。我们必须使用文本编辑器打开此文件并取消注释包含所需语言环境的行。\n\n * nano /etc/locale.gen\n\n把/etc/locale.gen中 en_US.UTF-8 UTF-8、en_US ISO-8859-1和zh_CN.UTF-8 UTF-8的注释取消\n\n> 如果没有安装 nano 编辑器，可以执行pacman -S nano安装 nano，使用 vim 编辑器亦可。\n\n现在使用以下命令一一生成语言环境配置文件：\n\n * locale-gen\n\n创建并设置 LANG 变量：\n\n * echo LANG=zh_CN.UTF-8 > /etc/locale.conf\n * export LANG=zh_CN.UTF-8\n\n> 此后系统中可能会出现乱码，可以当下解决，亦可完成系统安装后再来解决\n> \n> 安装中文字体解决 Arch Linux 中文乱码：\n> \n>  * pacman -S wqy-zenhei ttf-fireflysung\n> \n> (flash乱码) —乱码的原因就是缺少中文字体的支持，下载文泉驿xx， OK了\n\n\n# 设置主机名\n\n * echo [YourHostName] > /etc/hostname\n\n您还需要将此名称添加到 /etc/hosts 文件中：\n\n * nano /etc/hosts\n\n内容如下：\n\n> 127.0.0.1 localhost\n> \n> ::1 localhost\n> \n> 127.0.0.1 [YourHostName]\n\n\n# 设置 root 用户密码\n\n * passwd\n\n\n# 安装 GRUB 引导程序\n\n> 现在我们安装引导加载程序，以便 Arch 在重新启动后启动。Linux 发行版和 Arch Linux 的默认引导加载程序也由 GRUB 包表示。\n\n安装 GRUB 引导加载程序和 EFI 引导管理器包：\n\n * pacman -S grub efibootmgr os-prober mtools\n\n然后创建挂载点 /dev/sda1并挂载它：\n\n * mkdir /boot/efi\n * mount /dev/sda1 /boot/efi\n\n现在让我们安装我们的引导加载程序：\n\n * grub-install --target=x86_64-efi --bootloader-id=grub_uefi\n\n如果顺利： 不顺利的话：\n\n> 如果是虚拟安装，一定要以 UEFI 引导，VMware 默认以 boot 引导\n> \n> 如果是实体机，则检查主机是否支持 UEFI，是否可以进入 BIOS 就该为 UEFI 引导模式\n\n最后，生成 /boot/grub/grub.cfg 文件：\n\n * grub-mkconfig -o /boot/grub/grub.cfg\n\n\n# 安装桌面环境\n\n> 目前，Arch Linux 系统仅包含从命令行管理系统所需的基本软件包，没有 GUI（图形用户界面）。\n> \n> 有许多桌面环境可以与 Arch Linux 一起使用。\n> \n> 现在，将安装GNOME作为安装桌面环境示例。\n\n第一步是安装 X 环境。键入以下命令将 Xorg 安装为显示服务器：\n\n * pacman -S xorg-server xorg-apps\n\n然后安装一个合适的显卡驱动程序。 Nvidia用户：\n\n * pacman -S nvidia nvidia-utils\n\nAMD 用户：\n\n * pacman -S xf86-video-amdgpu\n\n英特尔用户：\n\n * pacman -S xf86-video-intel\n\n现在，您可以使用以下命令在 Arch Linux 上安装 GNOME 桌面环境：\n\n * pacman -S gnome gnome-extra networkmanager\n\n> GNOME 为下载提供了一个选择。对于每个提示，选择适当的提供者并按Enter继续。如果您不确定，只需按Enter接受默认值。\n\n启用 GDM 显示管理器和网络管理器：\n\n * systemctl enable gdm\n * systemctl enable NetworkManager\n\n\n# 创建一个普通用户帐户\n\n用户帐户的创建方法也会自动为用户创建主目录。另外，我们可以给这个账号 sudo 权限。\n\n * useradd -m -G wheel [UserName]\n\n请务必为新用户设置密码：\n\n * passwd [UserName]\n\n接下来，为新创建的用户启用 sudo 权限：\n\n * EDITOR=nano visudo\n\n向下滚动屏幕并找到以下行：\n\n * %wheel ALL=(ALL) ALL\n\n通过删除#符号取消注释。\n\n\n# 完成 Arch Linux 系统安装\n\n现在我们已经完成了 Arch Linux 的安装，所以我们现在将从终端退出并卸载我们的根分区并重新启动到我们新安装的 Arch Linux 系统。\n\n * exit\n * umount -R /mnt\n * reboot\n\n到这一步了，你可以安装你想要的东西并根据需要配置你的 Arch Linux。",normalizedContent:"> 图文详解：https://www.linuxmi.com/arch-linux-anzhuang.html\n> \n> arch linux iso 下载：https://archlinux.org/download/\n\n\n# 启动 arch iso\n\n> ！virtualbox 用户和 vmware 用户必须在开始安装之前在虚拟机设置中启用 efi 或 uefi 引导。否则在尝试安装 grub 引导加载程序时会发生错误。（vmware 默认使用 boot 引导）\n> \n> 如果是实体机安装，请另外准备 live bootable usb（可以使用 etcher 或 ventoy 等应用程序）\n\n * 启动到 arch iso 后，选择arch linux install medium (x86_64, uefi)选项并点击enter\n * 安装程序解压并加载 linux 内核后， 您将自动跳转到具有 root 权限的终端\n\n\n# 验证与 internet 的连接\n\n * 只需 ping 一个网站\n\n> 如果收到一个错误信息，请检查你的互联网连接或路由器\n> \n> 检查网络：\n> \n>  * 输入ip a指令检查\n> \n> 这里用的是有线连接，如果你用的是无线连接需要按照下面的步骤连接到无线网：\n> \n>  * 输入iwctl\n>  * 进入iwd模式，输入device list\n> \n> 查看你的网卡名字，这里假设是wlan0，输入\n> \n>  * station wlan0 scan\n> \n> 检查扫描网络，输入\n> \n>  * station wlan0 get-networks\n> \n> 查看网络名字，假设名字叫linuxmi，输入\n> \n>  * station wlan0 connect linuxmi\n> \n> 接着输入密码（如果有密码的话），输入\n> \n>  * exit\n> \n> 退出iwd模式\n> \n> 连接成功之后，检查可以连接到pacman源\n\n\n# 对磁盘进行分区\n\n> 如果您不熟悉诸如 fdisk 之类的分区工具，那么您很可能会在这里遇到最大的麻烦 cfdisk\n\n * fdisk -l 列出磁盘阵列\n\n> 出于本指南的目的，我们创建一个虚拟机，其中包含一个由 /dev/sda。更改/dev/sda为您的设备名称。\n> \n> 对于基本分区，我们需要创建以下分区布局：\n> \n>  * /dev/sda1: efi 系统分区，大小为 512 mb（通常设为 1g），fat32 格式。这为存储引导加载程序和引导所需的其他文件提供了空间。\n>  * /dev/sda2：交换分区，4gb 大小。交换空间用于将虚拟内存扩展到已安装的物理内存 (ram) 之外，或用于挂起磁盘支持。\n>  * /dev/sda3：linux分区，剩余可用磁盘空间大小，ext4格式。这是存储我们的 arch linux 操作系统、文件和其他信息的根 (/) 分区。\n\n\n# 创建 efi 系统分区\n\n> 通过 cfdisk 对机器硬盘驱动器运行命令来实际开始创建磁盘布局分区表\n\n * cfdisk /dev/sda\n * 选择gpt标签并点击enter\n * 选择 free space 并点击 new\n * 以 mb (1024m) 为单位键入分区大小，然后按enter键，创建出 /dev/sda1 分区\n * 在/dev/sda1分区仍然被选中的情况下，从底部菜单中选择type并选择efi system分区类型\n\n> 现在，您已完成 efi 系统分区的配置\n\n\n# 创建 swap 分区\n\n> 使用相同的过程创建 swap 分区\n\n * 再次选择剩余的free space和 并点击new\n * 以 gb (4g) 为单位键入分区大小，然后按enter键，创建出 /dev/sda2 分区\n * 在/dev/sda2分区仍然被选中的情况下，从底部菜单中选择type并选择linux swap分区类型\n\n> 现在，您已经完成了 swap 分区的配置\n\n\n# 创建 / 分区\n\n * 选择剩余的free space和 并点击new\n * 对于 (/) 大小，保留默认大小值。这意味着，所有剩余的可用空间。按enter键\n * 在/dev/sda3分区仍然被选中的情况下，从底部菜单中选择type并选择linux filesystem分区类型\n\n> 现在，您已经完成了 / 分区的配置\n\n\n# 将更改写入磁盘\n\n> 接下来，您需要保存所做的更改\n\n * 选择write从底部菜单和命中enter\n * 键入yes并按下enter键\n * 到此结束，选择quit并按下enter即可\n\n\n# 创建文件系统\n\n现在您已准备好磁盘分区，是时候在其上创建文件系统了。首先通过运行fdisk -l来查看分区表摘要。\n\n> 该/dev/sda磁盘应该有三个分区（/dev/sda1，dev/sda2，和/dev/sda3）\n> \n> 前面步骤中分区的创建只是在硬盘提供的存储空间上划出边界，并指定了每条边界线之间的空间类型。现在，是时候用所需的文件系统格式化分区了。\n> \n> 我们必须在这里创建 3 个文件系统，所以让我们开始吧。\n\n对于 efi 分区类型，创建一个 fat32 文件系统：\n\n * mkfs.fat -f32 /dev/sda1\n\n对于 swap 分区：\n\n * mkswap /dev/sda2\n * swapon /dev/sda2\n\n对于根分区，创建一个 ext4 文件系统：\n\n * mkfs.ext4 /dev/sda3\n\n\n# 安装 arch linux\n\n同步 pacman 存储库，以便您可以下载和安装软件：\n\n * pacman -syy\n\n必须先将根分区 ( /dev/sda3)挂载到 /mnt目录中，然后才能执行所有的安装。\n\n * mount /dev/sda3 /mnt\n\n安装根分区后，是时候安装所有必要的包了。使用该 pacstrap 命令安装 arch linux 所需的软件包。\n\n * pacstrap /mnt base linux linux-firmware sudo nano\n\n\n# 配置已安装的 arch 系统\n\n安装完成后，通过发出以下命令为您的新 arch linux 系统生成 fstab 文件：\n\n * genfstab -u /mnt >> /mnt/etc/fstab\n\n现在我们已经安装了 arch linux，我们需要使用 命令切换到物理安装的根分区arch-chroot。\n\n * arch-chroot /mnt\n   \n   \n\n> 如果执行arch-chroot /mnt后提示 chroot failed to run command /bin/bash : no such file or directory，可能是没有安装完全，执行 pacstrap /mnt base 确保安装包安装完毕\n\n\n# 配置时区\n\n> 要查找您的时区，您可以执行 ls -l/usr/share/zoneinfo/列出目录的内容 ，找到您的首选时区\n> \n> 创建一个符号链接来设置时区（将“ america/new_york”替换为您的时区） ln -sf /usr/share/zoneinfo/america/new_york /etc/localtime\n\n例如，上海：\n\n * ln -sf /usr/share/zoneinfo/asia/shanghai /etc/localtime\n\n\n# 设置 locale 文件\n\n该文件 /etc/locale.gen 包含区域设置和系统语言，并在默认情况下被注释。我们必须使用文本编辑器打开此文件并取消注释包含所需语言环境的行。\n\n * nano /etc/locale.gen\n\n把/etc/locale.gen中 en_us.utf-8 utf-8、en_us iso-8859-1和zh_cn.utf-8 utf-8的注释取消\n\n> 如果没有安装 nano 编辑器，可以执行pacman -s nano安装 nano，使用 vim 编辑器亦可。\n\n现在使用以下命令一一生成语言环境配置文件：\n\n * locale-gen\n\n创建并设置 lang 变量：\n\n * echo lang=zh_cn.utf-8 > /etc/locale.conf\n * export lang=zh_cn.utf-8\n\n> 此后系统中可能会出现乱码，可以当下解决，亦可完成系统安装后再来解决\n> \n> 安装中文字体解决 arch linux 中文乱码：\n> \n>  * pacman -s wqy-zenhei ttf-fireflysung\n> \n> (flash乱码) —乱码的原因就是缺少中文字体的支持，下载文泉驿xx， ok了\n\n\n# 设置主机名\n\n * echo [yourhostname] > /etc/hostname\n\n您还需要将此名称添加到 /etc/hosts 文件中：\n\n * nano /etc/hosts\n\n内容如下：\n\n> 127.0.0.1 localhost\n> \n> ::1 localhost\n> \n> 127.0.0.1 [yourhostname]\n\n\n# 设置 root 用户密码\n\n * passwd\n\n\n# 安装 grub 引导程序\n\n> 现在我们安装引导加载程序，以便 arch 在重新启动后启动。linux 发行版和 arch linux 的默认引导加载程序也由 grub 包表示。\n\n安装 grub 引导加载程序和 efi 引导管理器包：\n\n * pacman -s grub efibootmgr os-prober mtools\n\n然后创建挂载点 /dev/sda1并挂载它：\n\n * mkdir /boot/efi\n * mount /dev/sda1 /boot/efi\n\n现在让我们安装我们的引导加载程序：\n\n * grub-install --target=x86_64-efi --bootloader-id=grub_uefi\n\n如果顺利： 不顺利的话：\n\n> 如果是虚拟安装，一定要以 uefi 引导，vmware 默认以 boot 引导\n> \n> 如果是实体机，则检查主机是否支持 uefi，是否可以进入 bios 就该为 uefi 引导模式\n\n最后，生成 /boot/grub/grub.cfg 文件：\n\n * grub-mkconfig -o /boot/grub/grub.cfg\n\n\n# 安装桌面环境\n\n> 目前，arch linux 系统仅包含从命令行管理系统所需的基本软件包，没有 gui（图形用户界面）。\n> \n> 有许多桌面环境可以与 arch linux 一起使用。\n> \n> 现在，将安装gnome作为安装桌面环境示例。\n\n第一步是安装 x 环境。键入以下命令将 xorg 安装为显示服务器：\n\n * pacman -s xorg-server xorg-apps\n\n然后安装一个合适的显卡驱动程序。 nvidia用户：\n\n * pacman -s nvidia nvidia-utils\n\namd 用户：\n\n * pacman -s xf86-video-amdgpu\n\n英特尔用户：\n\n * pacman -s xf86-video-intel\n\n现在，您可以使用以下命令在 arch linux 上安装 gnome 桌面环境：\n\n * pacman -s gnome gnome-extra networkmanager\n\n> gnome 为下载提供了一个选择。对于每个提示，选择适当的提供者并按enter继续。如果您不确定，只需按enter接受默认值。\n\n启用 gdm 显示管理器和网络管理器：\n\n * systemctl enable gdm\n * systemctl enable networkmanager\n\n\n# 创建一个普通用户帐户\n\n用户帐户的创建方法也会自动为用户创建主目录。另外，我们可以给这个账号 sudo 权限。\n\n * useradd -m -g wheel [username]\n\n请务必为新用户设置密码：\n\n * passwd [username]\n\n接下来，为新创建的用户启用 sudo 权限：\n\n * editor=nano visudo\n\n向下滚动屏幕并找到以下行：\n\n * %wheel all=(all) all\n\n通过删除#符号取消注释。\n\n\n# 完成 arch linux 系统安装\n\n现在我们已经完成了 arch linux 的安装，所以我们现在将从终端退出并卸载我们的根分区并重新启动到我们新安装的 arch linux 系统。\n\n * exit\n * umount -r /mnt\n * reboot\n\n到这一步了，你可以安装你想要的东西并根据需要配置你的 arch linux。",charsets:{cjk:!0},lastUpdated:"2022/04/22, 22:11:52",lastUpdatedTimestamp:1650636712e3},{title:"Linux磁盘分区参考表",frontmatter:{title:"Linux磁盘分区参考表",date:"2022-04-17T19:20:20.000Z",permalink:"/pages/a89c71/",tags:[null]},regularPath:"/03.Linux/02.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/04.%E5%85%B6%E5%AE%83/03.Linux%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA%E5%8F%82%E8%80%83%E8%A1%A8.html",relativePath:"03.Linux/02.学习笔记/04.其它/03.Linux磁盘分区参考表.md",key:"v-72916731",path:"/pages/a89c71/",headersStr:null,content:"# Linux磁盘分区参考表\n\n目录      格式     建议大小      描述\nswap    swap   物理内存的两倍   交换分区，相当于Windows中的“虚拟内存”\n/boot   ext4   1024MB    Linux内核以及引导系统程序所需文件，一般GRUB或LILO系统引导管理器也位于该目录。\n/tmp    ext4   5G        系统临时文件所在目录，系统重启不会保存。\n/       ext4   ---       根目录\n/home   ext4   ---       用户工作目录，个人配置文件、环境变量等。",normalizedContent:"# linux磁盘分区参考表\n\n目录      格式     建议大小      描述\nswap    swap   物理内存的两倍   交换分区，相当于windows中的“虚拟内存”\n/boot   ext4   1024mb    linux内核以及引导系统程序所需文件，一般grub或lilo系统引导管理器也位于该目录。\n/tmp    ext4   5g        系统临时文件所在目录，系统重启不会保存。\n/       ext4   ---       根目录\n/home   ext4   ---       用户工作目录，个人配置文件、环境变量等。",charsets:{cjk:!0},lastUpdated:"2022/04/22, 22:11:52",lastUpdatedTimestamp:1650636712e3},{title:"Linux中不同颜色代表的文件类型",frontmatter:{title:"Linux中不同颜色代表的文件类型",date:"2022-04-17T19:20:20.000Z",permalink:"/pages/30b829/",tags:[null]},regularPath:"/03.Linux/02.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/04.%E5%85%B6%E5%AE%83/04.Linux%E4%B8%AD%E4%B8%8D%E5%90%8C%E9%A2%9C%E8%89%B2%E4%BB%A3%E8%A1%A8%E7%9A%84%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B.html",relativePath:"03.Linux/02.学习笔记/04.其它/04.Linux中不同颜色代表的文件类型.md",key:"v-032199b6",path:"/pages/30b829/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/04/22, 22:11:52",lastUpdatedTimestamp:1650636712e3},{title:"配置Yum源",frontmatter:{title:"配置Yum源",date:"2022-04-17T19:20:20.000Z",permalink:"/pages/544d08/",tags:[null]},regularPath:"/03.Linux/02.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/04.%E5%85%B6%E5%AE%83/05.%E9%85%8D%E7%BD%AEYum%E6%BA%90.html",relativePath:"03.Linux/02.学习笔记/04.其它/05.配置Yum源.md",key:"v-fd7e728a",path:"/pages/544d08/",headers:[{level:2,title:"情景",slug:"情景",normalizedTitle:"情景",charIndex:2},{level:2,title:"yum",slug:"yum",normalizedTitle:"yum",charIndex:85},{level:2,title:"配置yum源",slug:"配置yum源",normalizedTitle:"配置yum源",charIndex:302},{level:2,title:"测试能否通过rpm正常安装软件",slug:"测试能否通过rpm正常安装软件",normalizedTitle:"测试能否通过rpm正常安装软件",charIndex:313},{level:2,title:"yum配置文件",slug:"yum配置文件",normalizedTitle:"yum配置文件",charIndex:873},{level:2,title:"安装软件及其依赖",slug:"安装软件及其依赖",normalizedTitle:"安装软件及其依赖",charIndex:1335}],headersStr:"情景 yum 配置yum源 测试能否通过rpm正常安装软件 yum配置文件 安装软件及其依赖",content:"# 情景\n\n安装A软件无法成功，终端提示“安装A软件之前，需要先安装B软件”，于是安装B软件，终端又提示“安装B软件之前，需要先安装C软件”......\n\n咋办？\n\n配置yum本地源：一次解决所有软件包之间的依赖关系。\n\n\n# yum\n\nYum（Yellow dog Updater, Modified）是由Duke University团队修改Yellow Dog Linux的Yellow Dog Updater开发而成，是一个基于RPM包管理的字符前端软件包管理器。能够从指定的服务器自动下载RPM包并且安装，可以处理依赖性关系，并且一次安装所有依赖的软件包，无须繁琐地一次次下载、安装。\n\n\n# 配置yum源\n\n\n# 测试能否通过rpm正常安装软件\n\n以 httpd 这个软件为例：\n\n# rpm -i ./httpd-2.4.6-95.el7.centos.x86_64.rpm \n\nwarning: ./httpd-2.4.6-95.el7.centos.x86_64.rpm: Header V3 RSA/SHA256 Signature, key ID f4a80eb5: NOKEY\nerror: Failed dependencies:\n\t/etc/mime.types is needed by httpd-2.4.6-95.el7.centos.x86_64\n\thttpd-tools = 2.4.6-95.el7.centos is needed by httpd-2.4.6-95.el7.centos.x86_64\n\tlibapr-1.so.0()(64bit) is needed by httpd-2.4.6-95.el7.centos.x86_64\n\tlibaprutil-1.so.0()(64bit) is needed by httpd-2.4.6-95.el7.centos.x86_64\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n终端提示 Failed dependencies ，缺少依赖。\n\n\n# yum配置文件\n\n 1. 在用户目录下创建一个备份目录 repoBackup，用于备份其他的 yum 配置文件\n 2. 切换目录至 /etc/yum.repos.d/\n 3. mv 移动所有 .repo 文件放到备份目录下：\n\nmv *.repo /etc/home/<userName>/repoBackup/\n\n\n1\n\n 4. 在 /etc/yum.repos.d/ 目录下创建 CentOS-Base.repo 文件\n\n[newreop]\nname = CentOS-new\n# name       仓库描述\nbaseurl = file:///mnt/iso\n# baseurl    为软件仓库位置，也可以是线上软件仓库（此处为挂载的光盘）\nenabled = 1\n# enabled    是否启用这个仓库，1为启用，0为禁用\ngpgcheck = 0\n# gpgcheck   是否检查GPG签名（主要是用来验证软件包是不是红帽官方的）\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n 5. 保存退出。\n\n\n# 安装软件及其依赖\n\n 1. 清除yum缓存：\n\nyum clean all\n\n\n1\n\n 2. 安装软件：\n\nyum install <softwareName>\n\n\n1\n\n 3. 查看软件包信息：\n\nyum info <sorftwareName>\n\n\n1\n",normalizedContent:"# 情景\n\n安装a软件无法成功，终端提示“安装a软件之前，需要先安装b软件”，于是安装b软件，终端又提示“安装b软件之前，需要先安装c软件”......\n\n咋办？\n\n配置yum本地源：一次解决所有软件包之间的依赖关系。\n\n\n# yum\n\nyum（yellow dog updater, modified）是由duke university团队修改yellow dog linux的yellow dog updater开发而成，是一个基于rpm包管理的字符前端软件包管理器。能够从指定的服务器自动下载rpm包并且安装，可以处理依赖性关系，并且一次安装所有依赖的软件包，无须繁琐地一次次下载、安装。\n\n\n# 配置yum源\n\n\n# 测试能否通过rpm正常安装软件\n\n以 httpd 这个软件为例：\n\n# rpm -i ./httpd-2.4.6-95.el7.centos.x86_64.rpm \n\nwarning: ./httpd-2.4.6-95.el7.centos.x86_64.rpm: header v3 rsa/sha256 signature, key id f4a80eb5: nokey\nerror: failed dependencies:\n\t/etc/mime.types is needed by httpd-2.4.6-95.el7.centos.x86_64\n\thttpd-tools = 2.4.6-95.el7.centos is needed by httpd-2.4.6-95.el7.centos.x86_64\n\tlibapr-1.so.0()(64bit) is needed by httpd-2.4.6-95.el7.centos.x86_64\n\tlibaprutil-1.so.0()(64bit) is needed by httpd-2.4.6-95.el7.centos.x86_64\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n终端提示 failed dependencies ，缺少依赖。\n\n\n# yum配置文件\n\n 1. 在用户目录下创建一个备份目录 repobackup，用于备份其他的 yum 配置文件\n 2. 切换目录至 /etc/yum.repos.d/\n 3. mv 移动所有 .repo 文件放到备份目录下：\n\nmv *.repo /etc/home/<username>/repobackup/\n\n\n1\n\n 4. 在 /etc/yum.repos.d/ 目录下创建 centos-base.repo 文件\n\n[newreop]\nname = centos-new\n# name       仓库描述\nbaseurl = file:///mnt/iso\n# baseurl    为软件仓库位置，也可以是线上软件仓库（此处为挂载的光盘）\nenabled = 1\n# enabled    是否启用这个仓库，1为启用，0为禁用\ngpgcheck = 0\n# gpgcheck   是否检查gpg签名（主要是用来验证软件包是不是红帽官方的）\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n 5. 保存退出。\n\n\n# 安装软件及其依赖\n\n 1. 清除yum缓存：\n\nyum clean all\n\n\n1\n\n 2. 安装软件：\n\nyum install <softwarename>\n\n\n1\n\n 3. 查看软件包信息：\n\nyum info <sorftwarename>\n\n\n1\n",charsets:{cjk:!0},lastUpdated:"2022/04/22, 22:11:52",lastUpdatedTimestamp:1650636712e3},{title:"步入 Linux 的现代方法",frontmatter:{title:"步入 Linux 的现代方法",date:"2022-04-17T19:20:20.000Z",permalink:"/pages/0c031c/",tags:[null]},regularPath:"/03.Linux/05.Frank%20-%20Linxu%E7%8E%B0%E4%BB%A3%E6%96%B9%E6%B3%95/01.%E5%BF%85%E7%9F%A5/00.%E6%AD%A5%E5%85%A5%20Linux%20%E7%9A%84%E7%8E%B0%E4%BB%A3%E6%96%B9%E6%B3%95.html",relativePath:"03.Linux/05.Frank - Linxu现代方法/01.必知/00.步入 Linux 的现代方法.md",key:"v-1c283729",path:"/pages/0c031c/",headers:[{level:2,title:"命令帮助和查询",slug:"命令帮助和查询",normalizedTitle:"命令帮助和查询",charIndex:2},{level:2,title:"初入Ubuntu Linux系统",slug:"初入ubuntu-linux系统",normalizedTitle:"初入ubuntu linux系统",charIndex:157},{level:3,title:"Ubuntu镜像源",slug:"ubuntu镜像源",normalizedTitle:"ubuntu镜像源",charIndex:178},{level:3,title:"Ubuntu Server初步使用步骤",slug:"ubuntu-server初步使用步骤",normalizedTitle:"ubuntu server初步使用步骤",charIndex:298},{level:3,title:"Linux网络相关设置",slug:"linux网络相关设置",normalizedTitle:"linux网络相关设置",charIndex:551}],headersStr:"命令帮助和查询 初入Ubuntu Linux系统 Ubuntu镜像源 Ubuntu Server初步使用步骤 Linux网络相关设置",content:"# 命令帮助和查询\n\n不可能把所有命令都学完，要怎么查询和使用命令？这个命令有哪些参数？\n\n * 命令-查看帮助——man 命令名，如：man ls、man cd...前提是你的英语水平不错。\n * Linux 命令搜索网站：https://wangchujiang.com/linux-command/\n\n\n# 初入Ubuntu Linux系统\n\n\n# Ubuntu镜像源\n\n> 清华大学开源软件镜像站： https://mirrors.tuna.tsinghua.edu.cn/ubuntu/\n> \n> 阿里云： https://mirrors.aliyun.com/ubuntu/\n\n\n# Ubuntu Server初步使用步骤\n\n 1. 设置阿里镜像源(Mirrors Address) https://mirrors.aliyun.com/ubuntu/\n 2. 设置root密码 sudo passwd root\n 3. 更新软件源 apt-get update\n 4. 更新所有已安装的包 apt-get upgrade\n 5. 安装必要软件 sudo apt-get install openssh-server\n 6. ssh连接 ssh liyoh@xxx.xxx.xxx\n\n\n# Linux网络相关设置\n\n 1. 切换为root用户 su root\n 2. 为主机动态分配一个IP地址 dhclient\n 3. 查看该地址 ifconfig",normalizedContent:"# 命令帮助和查询\n\n不可能把所有命令都学完，要怎么查询和使用命令？这个命令有哪些参数？\n\n * 命令-查看帮助——man 命令名，如：man ls、man cd...前提是你的英语水平不错。\n * linux 命令搜索网站：https://wangchujiang.com/linux-command/\n\n\n# 初入ubuntu linux系统\n\n\n# ubuntu镜像源\n\n> 清华大学开源软件镜像站： https://mirrors.tuna.tsinghua.edu.cn/ubuntu/\n> \n> 阿里云： https://mirrors.aliyun.com/ubuntu/\n\n\n# ubuntu server初步使用步骤\n\n 1. 设置阿里镜像源(mirrors address) https://mirrors.aliyun.com/ubuntu/\n 2. 设置root密码 sudo passwd root\n 3. 更新软件源 apt-get update\n 4. 更新所有已安装的包 apt-get upgrade\n 5. 安装必要软件 sudo apt-get install openssh-server\n 6. ssh连接 ssh liyoh@xxx.xxx.xxx\n\n\n# linux网络相关设置\n\n 1. 切换为root用户 su root\n 2. 为主机动态分配一个ip地址 dhclient\n 3. 查看该地址 ifconfig",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"步入Linux的世界",frontmatter:{title:"步入Linux的世界",date:"2022-04-17T19:20:20.000Z",permalink:"/pages/8975a4/",tags:[null]},regularPath:"/03.Linux/05.Frank%20-%20Linxu%E7%8E%B0%E4%BB%A3%E6%96%B9%E6%B3%95/01.%E5%BF%85%E7%9F%A5/01.%E6%AD%A5%E5%85%A5Linux%E7%9A%84%E4%B8%96%E7%95%8C.html",relativePath:"03.Linux/05.Frank - Linxu现代方法/01.必知/01.步入Linux的世界.md",key:"v-5a9b2bfe",path:"/pages/8975a4/",headers:[{level:2,title:"Learn？",slug:"learn",normalizedTitle:"learn？",charIndex:2},{level:2,title:"Four parts of Linux",slug:"four-parts-of-linux",normalizedTitle:"four parts of linux",charIndex:51},{level:3,title:"Linux kernel",slug:"linux-kernel",normalizedTitle:"linux kernel",charIndex:76},{level:3,title:"GNU",slug:"gnu",normalizedTitle:"gnu",charIndex:93},{level:3,title:"GUI",slug:"gui",normalizedTitle:"gui",charIndex:109},{level:2,title:"File System",slug:"file-system",normalizedTitle:"file system",charIndex:1184}],headersStr:"Learn？ Four parts of Linux Linux kernel GNU GUI File System",content:'# Learn？\n\nLinux入门不是学“Linux”\n\n体验：比较各种系统的不同点、相同点\n\n\n# Four parts of Linux\n\n 1. Linux kernel\n 2. GNU (tools)\n 3. GUI Desktop (environment)\n 4. Application\n\n\n# Linux kernel\n\nLinux严格来说是单指操作系统的内核。\n\n * 硬件设备管理和使用\n * 软件程序（系统）\n * 系统内存\n * 文件管理\n\n\n# GNU\n\n为各种系统生产和提供必备软件\n\nUnix上具有的一些软件，Linux内核本身没有。\n\n所以GNU他们模仿Unix，为Linux写了一些必要的软件。\n\nGNU : /gənuː/\n\nGNU\'s Not Unix !\n\n> PS：IT术语，它并不是遵循通常的英语音标，而是专业术语。有趣的是，有不少名称是“递归”的。\n\nLinux真正的名字——GNU/Linux\n\n> Linux操作系统包涵了Linux内核与其他自由软件项目中的GNU组件和软件，可以被称为GNU/Linux\n\n# Coreutils\n\nGNU核心工作组（GNU Core Utilities，亦常缩写为coreutils）\n\n原本在Unix上的一些命令和工具移植（模仿）到Linux\n\n供Linux使用的这套工具就是 Coreutils\n\nCoreutils three tools：\n\n * 处理文件的工具\n * 操作文本的工具\n * 管理进程的工具\n\n# Shell\n\nShell也被称为壳层或外壳\n\n提供给用户使用的软件，用户和电脑进行交互\n\nShell提供两种界面：\n\n * CLI（Command-Line Interface，命令行界面）\n * GUI（Graphical User Interface，图形用户界面）\n\n 1. Bash Shell\n\n几乎所有的发行版Linux都带有Bash Shell，基础的Shell\n\n 2. Zsh\n\n也称为 Z shell，是 Bourne Shell (sh) 的扩展版本。\n\nZsh对Bourne shell做出了大量改进，同时加入了Bash、ksh及tcsh的某些功能。\n\nZsh 在 Mac 系统上非常流行，基于 Unix 的 MacOS 通常也是专业人士的选择。\n\n非常吊的"Oh My ZSH!"项目：\n\n> Oh My Zsh - a delightful & open source framework for Zsh\n\n\n# GUI\n\n 1. X Windows\n 2. KDE\n 3. GNOME\n 4. Unity (为GNOME桌面环境开发的用户界面，用于Ubuntu系统。不同于KDE、GNOME，Unity并非一个桌面套件)\n\n\n# File System\n\nLinux通常使用ext4文件系统，通常使用vfat作为引导分区\n\nFiles system 查看命令 df -T',normalizedContent:'# learn？\n\nlinux入门不是学“linux”\n\n体验：比较各种系统的不同点、相同点\n\n\n# four parts of linux\n\n 1. linux kernel\n 2. gnu (tools)\n 3. gui desktop (environment)\n 4. application\n\n\n# linux kernel\n\nlinux严格来说是单指操作系统的内核。\n\n * 硬件设备管理和使用\n * 软件程序（系统）\n * 系统内存\n * 文件管理\n\n\n# gnu\n\n为各种系统生产和提供必备软件\n\nunix上具有的一些软件，linux内核本身没有。\n\n所以gnu他们模仿unix，为linux写了一些必要的软件。\n\ngnu : /gənuː/\n\ngnu\'s not unix !\n\n> ps：it术语，它并不是遵循通常的英语音标，而是专业术语。有趣的是，有不少名称是“递归”的。\n\nlinux真正的名字——gnu/linux\n\n> linux操作系统包涵了linux内核与其他自由软件项目中的gnu组件和软件，可以被称为gnu/linux\n\n# coreutils\n\ngnu核心工作组（gnu core utilities，亦常缩写为coreutils）\n\n原本在unix上的一些命令和工具移植（模仿）到linux\n\n供linux使用的这套工具就是 coreutils\n\ncoreutils three tools：\n\n * 处理文件的工具\n * 操作文本的工具\n * 管理进程的工具\n\n# shell\n\nshell也被称为壳层或外壳\n\n提供给用户使用的软件，用户和电脑进行交互\n\nshell提供两种界面：\n\n * cli（command-line interface，命令行界面）\n * gui（graphical user interface，图形用户界面）\n\n 1. bash shell\n\n几乎所有的发行版linux都带有bash shell，基础的shell\n\n 2. zsh\n\n也称为 z shell，是 bourne shell (sh) 的扩展版本。\n\nzsh对bourne shell做出了大量改进，同时加入了bash、ksh及tcsh的某些功能。\n\nzsh 在 mac 系统上非常流行，基于 unix 的 macos 通常也是专业人士的选择。\n\n非常吊的"oh my zsh!"项目：\n\n> oh my zsh - a delightful & open source framework for zsh\n\n\n# gui\n\n 1. x windows\n 2. kde\n 3. gnome\n 4. unity (为gnome桌面环境开发的用户界面，用于ubuntu系统。不同于kde、gnome，unity并非一个桌面套件)\n\n\n# file system\n\nlinux通常使用ext4文件系统，通常使用vfat作为引导分区\n\nfiles system 查看命令 df -t',charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Linux路径",frontmatter:{title:"Linux路径",date:"2022-04-17T19:20:20.000Z",permalink:"/pages/d1d9d6/",tags:[null]},regularPath:"/03.Linux/05.Frank%20-%20Linxu%E7%8E%B0%E4%BB%A3%E6%96%B9%E6%B3%95/01.%E5%BF%85%E7%9F%A5/02.Linux%E8%B7%AF%E5%BE%84.html",relativePath:"03.Linux/05.Frank - Linxu现代方法/01.必知/02.Linux路径.md",key:"v-21fa34f8",path:"/pages/d1d9d6/",headers:[{level:2,title:"绝对路径和相对路径",slug:"绝对路径和相对路径",normalizedTitle:"绝对路径和相对路径",charIndex:2},{level:3,title:"绝对路径",slug:"绝对路径",normalizedTitle:"绝对路径",charIndex:2},{level:3,title:"相对路径",slug:"相对路径",normalizedTitle:"相对路径",charIndex:7},{level:2,title:"Linux中的路径",slug:"linux中的路径",normalizedTitle:"linux中的路径",charIndex:182},{level:3,title:"pwd命令",slug:"pwd命令",normalizedTitle:"pwd命令",charIndex:196}],headersStr:"绝对路径和相对路径 绝对路径 相对路径 Linux中的路径 pwd命令",content:"# 绝对路径和相对路径\n\n\n# 绝对路径\n\n“全”，有“根”\n\n> 太阳系地球中国湖北武汉洪山区某某大学\n\n\n# 相对路径\n\n“不全”，有“故事背景”\n\n比如你已经在湖北了，而你的学校在哪儿，“目标”相对于“你”而言在什么位置\n\n> 武汉洪山区某某学院\n\n（人话：已经在某个目录了，我的目标文件/目录相对于我的位置）\n\n又比如：国际包裹地址、国内包裹地址\n\n\n# Linux中的路径\n\n\n# pwd命令\n\npwd命令可显示当前工作目录的绝对路径（），全称 Print Working Directory。\n\n一个test.txt文件的绝对路径：\n\n> /home/jim/Documents/doc/test.txt\n\n从根目录进到home目录，再进到用户目录......一直到具体的文件。\n\n相对路径：\n\n> Documents/doc/test.txt\n\n注意相对路径首位是没有/正斜线符号的，如果首位有/符号，那么它就变成了绝对路径。\n\n使用 gedit命令打开文件验证路径的正确性（在文件中写入一些内容）：\n\njim@fuck:~$ gedit /home/jim/Documents/doc/test.txt\njim@fuck:~$ gedit Documents/doc/test.txt\n\n\n1\n2\n\n\n两条命令都能打开同一目录下的同一文件\n\n值得注意的是，用户当前的工作目录在~\n\n如果现在切换到其他目录，仍然使用先前的相对路径就不能打开目标文件了\n\n有时，为了不让系统将路径识别为绝对路径，会在/前加.，表示当前目录\n\n> Linux 中：\n> \n> . 表示当前目录\n> \n> .. 表示上一级目录\n\n下面的命令同样能打开test.txt文件：\n\njim@fuck:~$ gedit ./Documents/doc/test.txt\n\n\n1\n\n\n在/前面加~同样能打开test.txt文件：\n\njim@fuck:~$ gedit ~/Documents/doc/test.txt\n\n\n1\n",normalizedContent:"# 绝对路径和相对路径\n\n\n# 绝对路径\n\n“全”，有“根”\n\n> 太阳系地球中国湖北武汉洪山区某某大学\n\n\n# 相对路径\n\n“不全”，有“故事背景”\n\n比如你已经在湖北了，而你的学校在哪儿，“目标”相对于“你”而言在什么位置\n\n> 武汉洪山区某某学院\n\n（人话：已经在某个目录了，我的目标文件/目录相对于我的位置）\n\n又比如：国际包裹地址、国内包裹地址\n\n\n# linux中的路径\n\n\n# pwd命令\n\npwd命令可显示当前工作目录的绝对路径（），全称 print working directory。\n\n一个test.txt文件的绝对路径：\n\n> /home/jim/documents/doc/test.txt\n\n从根目录进到home目录，再进到用户目录......一直到具体的文件。\n\n相对路径：\n\n> documents/doc/test.txt\n\n注意相对路径首位是没有/正斜线符号的，如果首位有/符号，那么它就变成了绝对路径。\n\n使用 gedit命令打开文件验证路径的正确性（在文件中写入一些内容）：\n\njim@fuck:~$ gedit /home/jim/documents/doc/test.txt\njim@fuck:~$ gedit documents/doc/test.txt\n\n\n1\n2\n\n\n两条命令都能打开同一目录下的同一文件\n\n值得注意的是，用户当前的工作目录在~\n\n如果现在切换到其他目录，仍然使用先前的相对路径就不能打开目标文件了\n\n有时，为了不让系统将路径识别为绝对路径，会在/前加.，表示当前目录\n\n> linux 中：\n> \n> . 表示当前目录\n> \n> .. 表示上一级目录\n\n下面的命令同样能打开test.txt文件：\n\njim@fuck:~$ gedit ./documents/doc/test.txt\n\n\n1\n\n\n在/前面加~同样能打开test.txt文件：\n\njim@fuck:~$ gedit ~/documents/doc/test.txt\n\n\n1\n",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Linux根目录",frontmatter:{title:"Linux根目录",date:"2022-04-17T19:20:20.000Z",permalink:"/pages/7866fe/",tags:[null]},regularPath:"/03.Linux/05.Frank%20-%20Linxu%E7%8E%B0%E4%BB%A3%E6%96%B9%E6%B3%95/01.%E5%BF%85%E7%9F%A5/03.Linux%E6%A0%B9%E7%9B%AE%E5%BD%95.html",relativePath:"03.Linux/05.Frank - Linxu现代方法/01.必知/03.Linux根目录.md",key:"v-aee938f8",path:"/pages/7866fe/",headers:[{level:2,title:"路径问题",slug:"路径问题",normalizedTitle:"路径问题",charIndex:314},{level:2,title:"Linux 根目录解析（主要的目录）",slug:"linux-根目录解析-主要的目录",normalizedTitle:"linux 根目录解析（主要的目录）",charIndex:593},{level:2,title:"Linux 文件系统层级标准",slug:"linux-文件系统层级标准",normalizedTitle:"linux 文件系统层级标准",charIndex:1189}],headersStr:"路径问题 Linux 根目录解析（主要的目录） Linux 文件系统层级标准",content:"Linux 没有像 Windows 中C:、D:、E:盘符这样的概念。\n\n正斜线/代表根目录，命令cd /即切换到 Linux 根目录。\n\njim@fuck:~$ cd /\njim@fuck:/$ ls -F\nbin@   cdrom/  etc/   lib@    lib64@   lost+found/  mnt/  proc/  run/   snap/  swapfile  tmp/  var/\nboot/  dev/    home/  lib32@  libx32@  media/       opt/  root/  sbin@  srv/   sys/      usr/\n\n\n1\n2\n3\n4\n\n\n\n# 路径问题\n\nLinux 中路径使用正斜线\n\nWindows 的路径使用反斜线\n\n> /为正斜线 \\为反斜线\n\nLinux 中的路径：\n\n> /home/Documents/doc/test.txt\n\nWindows 中的路径：\n\n> C:\\Users\\UserName\\Documents\\test.txt\n\n所以，有时候写的调用文件的代码就会出错...\n\n获取当前目录路径\n\n在 Linux 中输入pwd可输出当前目录路径\n\njim@fuck:~/Documents/doc$ pwd\n/home/jim/Documents/doc\n\n\n1\n2\n\n\n\n# Linux 根目录解析（主要的目录）\n\nbin：二进制目录，存放多用户级使用的系统自带的 GNU 命令工具（是已编译好的二进制文件）\n\netc：系统配置文件目录\n\nhome：用户目录，显示所有用户目录（不包括 root 用户）\n\nlib：库目录，一种“依赖”；又有lib64和lib32之分\n\nmnt：挂载目录，U盘。挂载——外在设备和电脑进行连接\n\nproc：虚拟文件系统目录\n\nrun：运行目录\n\ntmp：临时目录\n\nvar：可变目录\n\nboot：启动目录\n\ndev：设备目录（类似于 Windows 上的设备管理器）\n\nmedia：媒体目录，可挂载外部设备\n\nopt：可选目录，通常存放一些第三方的软件包和数据\n\nroot：root 用户的主目录，管理员目录\n\nsbin：系统二进制目录，存放高级管理员使用的 GNU 命令工具\n\nsrv：服务目录（类似于 Windows 任务管理器中的服务）\n\nsys：与proc类似也是一个虚拟文件系统目录，存放系统核心与硬件相关的信息\n\nusr：用户二进制目录，存放用户使用的 GNU 命令工具，在usr/bin会存放用户所安装软件的命令工具\n\n> https://www.runoob.com/linux/linux-system-contents.html https://www.jianshu.com/p/142deb98ed5a\n\n\n# Linux 文件系统层级标准\n\nFHS，Filesystem Hierarchy Standard（文件系统层级标准），里边详细声明了 Linux 文件系统中各目录作用，供 Linux 开发者参考。\n\n> https://www.pathname.com/fhs/pub/fhs-2.3.pdf",normalizedContent:"linux 没有像 windows 中c:、d:、e:盘符这样的概念。\n\n正斜线/代表根目录，命令cd /即切换到 linux 根目录。\n\njim@fuck:~$ cd /\njim@fuck:/$ ls -f\nbin@   cdrom/  etc/   lib@    lib64@   lost+found/  mnt/  proc/  run/   snap/  swapfile  tmp/  var/\nboot/  dev/    home/  lib32@  libx32@  media/       opt/  root/  sbin@  srv/   sys/      usr/\n\n\n1\n2\n3\n4\n\n\n\n# 路径问题\n\nlinux 中路径使用正斜线\n\nwindows 的路径使用反斜线\n\n> /为正斜线 \\为反斜线\n\nlinux 中的路径：\n\n> /home/documents/doc/test.txt\n\nwindows 中的路径：\n\n> c:\\users\\username\\documents\\test.txt\n\n所以，有时候写的调用文件的代码就会出错...\n\n获取当前目录路径\n\n在 linux 中输入pwd可输出当前目录路径\n\njim@fuck:~/documents/doc$ pwd\n/home/jim/documents/doc\n\n\n1\n2\n\n\n\n# linux 根目录解析（主要的目录）\n\nbin：二进制目录，存放多用户级使用的系统自带的 gnu 命令工具（是已编译好的二进制文件）\n\netc：系统配置文件目录\n\nhome：用户目录，显示所有用户目录（不包括 root 用户）\n\nlib：库目录，一种“依赖”；又有lib64和lib32之分\n\nmnt：挂载目录，u盘。挂载——外在设备和电脑进行连接\n\nproc：虚拟文件系统目录\n\nrun：运行目录\n\ntmp：临时目录\n\nvar：可变目录\n\nboot：启动目录\n\ndev：设备目录（类似于 windows 上的设备管理器）\n\nmedia：媒体目录，可挂载外部设备\n\nopt：可选目录，通常存放一些第三方的软件包和数据\n\nroot：root 用户的主目录，管理员目录\n\nsbin：系统二进制目录，存放高级管理员使用的 gnu 命令工具\n\nsrv：服务目录（类似于 windows 任务管理器中的服务）\n\nsys：与proc类似也是一个虚拟文件系统目录，存放系统核心与硬件相关的信息\n\nusr：用户二进制目录，存放用户使用的 gnu 命令工具，在usr/bin会存放用户所安装软件的命令工具\n\n> https://www.runoob.com/linux/linux-system-contents.html https://www.jianshu.com/p/142deb98ed5a\n\n\n# linux 文件系统层级标准\n\nfhs，filesystem hierarchy standard（文件系统层级标准），里边详细声明了 linux 文件系统中各目录作用，供 linux 开发者参考。\n\n> https://www.pathname.com/fhs/pub/fhs-2.3.pdf",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Linux Kernel",frontmatter:{title:"Linux Kernel",date:"2022-04-17T19:20:20.000Z",permalink:"/pages/e8ee07/",tags:[null]},regularPath:"/03.Linux/05.Frank%20-%20Linxu%E7%8E%B0%E4%BB%A3%E6%96%B9%E6%B3%95/01.%E5%BF%85%E7%9F%A5/05.Linux%20Kernel.html",relativePath:"03.Linux/05.Frank - Linxu现代方法/01.必知/05.Linux Kernel.md",key:"v-43f4085c",path:"/pages/e8ee07/",headers:[{level:2,title:"Versions",slug:"versions",normalizedTitle:"versions",charIndex:37}],headersStr:"Versions",content:"Linux Kernel —— 是开源的类Unix操作系统宏内核\n\n\n# Versions\n\nExample：2.3.20\n\n第一个组数字：目前发布的内核主版本。\n\n第二个组数字：偶数表示稳定版本；奇数表示开发中版本。\n\n第三个组数字：错误修补的次数",normalizedContent:"linux kernel —— 是开源的类unix操作系统宏内核\n\n\n# versions\n\nexample：2.3.20\n\n第一个组数字：目前发布的内核主版本。\n\n第二个组数字：偶数表示稳定版本；奇数表示开发中版本。\n\n第三个组数字：错误修补的次数",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Shell命令基础",frontmatter:{title:"Shell命令基础",date:"2022-04-17T19:20:20.000Z",permalink:"/pages/11d275/",tags:[null]},regularPath:"/03.Linux/05.Frank%20-%20Linxu%E7%8E%B0%E4%BB%A3%E6%96%B9%E6%B3%95/02.%E5%91%BD%E4%BB%A4/00.Shell%E5%91%BD%E4%BB%A4%E5%9F%BA%E7%A1%80.html",relativePath:"03.Linux/05.Frank - Linxu现代方法/02.命令/00.Shell命令基础.md",key:"v-061a36ca",path:"/pages/11d275/",headers:[{level:2,title:"基本认识",slug:"基本认识",normalizedTitle:"基本认识",charIndex:2},{level:2,title:"命令的结构",slug:"命令的结构",normalizedTitle:"命令的结构",charIndex:408},{level:2,title:"命令帮助和查询",slug:"命令帮助和查询",normalizedTitle:"命令帮助和查询",charIndex:575}],headersStr:"基本认识 命令的结构 命令帮助和查询",content:"# 基本认识\n\n 1. Terminal头部：\n\nusername@localhost:~$\n\n\n1\n\n\n> 用户名 @ 主机名 : 当前工作目录 等待用户输入\n> \n> ~代表用户目录，用户目录路径——/home/user_name/\n\n 2. ls和cd命令：\n\n> ls命令——查询当前目录下的文件及文件夹\n> \n> ls -a：显示出所有文件和文件夹（包括隐藏的）\n> \n> ls -a [dir]：显示目标目录（或路径）下的文件和文件夹\n\n> cd命令\n> \n> cd [dir]：切换工作目录至dir目录\n> \n> cd ~：切换至用户目录，更快捷的操作——只输入cd即可返回用户目录\n> \n> cd /：切换至根目录\n> \n> cd ..：切换至上一级目录\n\n 3. 快捷方式\n\n> 快速切换近期使用过的命令——方向键上下键\n> \n> 清屏——Ctrl+L\n> \n> 清除输入——Ctrl+U\n\n\n# 命令的结构\n\nLinux 命令的结构大体上由语法、选项、参数组成\n\n 1. 语法\n\n如：ls [选项] [目录名/文件名...] 中括号[]里面的为可选项\n\n 2. 选项\n\n如：-a、--all... 一条命令可以有多个选项，用空格隔开，如：ls -a --version\n\n 3. 参数\n\n如：ls的参数就为目录名或文件名\n\n\n# 命令帮助和查询\n\n不可能把所有命令都学完，要怎么查询和使用命令？这个命令有哪些参数？\n\n * 命令-查看帮助——man 命令名，如：man ls、man cd...前提是你的英语水平不错。\n * Linux 命令搜索网站：https://wangchujiang.com/linux-command/",normalizedContent:"# 基本认识\n\n 1. terminal头部：\n\nusername@localhost:~$\n\n\n1\n\n\n> 用户名 @ 主机名 : 当前工作目录 等待用户输入\n> \n> ~代表用户目录，用户目录路径——/home/user_name/\n\n 2. ls和cd命令：\n\n> ls命令——查询当前目录下的文件及文件夹\n> \n> ls -a：显示出所有文件和文件夹（包括隐藏的）\n> \n> ls -a [dir]：显示目标目录（或路径）下的文件和文件夹\n\n> cd命令\n> \n> cd [dir]：切换工作目录至dir目录\n> \n> cd ~：切换至用户目录，更快捷的操作——只输入cd即可返回用户目录\n> \n> cd /：切换至根目录\n> \n> cd ..：切换至上一级目录\n\n 3. 快捷方式\n\n> 快速切换近期使用过的命令——方向键上下键\n> \n> 清屏——ctrl+l\n> \n> 清除输入——ctrl+u\n\n\n# 命令的结构\n\nlinux 命令的结构大体上由语法、选项、参数组成\n\n 1. 语法\n\n如：ls [选项] [目录名/文件名...] 中括号[]里面的为可选项\n\n 2. 选项\n\n如：-a、--all... 一条命令可以有多个选项，用空格隔开，如：ls -a --version\n\n 3. 参数\n\n如：ls的参数就为目录名或文件名\n\n\n# 命令帮助和查询\n\n不可能把所有命令都学完，要怎么查询和使用命令？这个命令有哪些参数？\n\n * 命令-查看帮助——man 命令名，如：man ls、man cd...前提是你的英语水平不错。\n * linux 命令搜索网站：https://wangchujiang.com/linux-command/",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"ls——进阶使用，遍历、匹配和过滤文件",frontmatter:{title:"ls——进阶使用，遍历、匹配和过滤文件",date:"2022-04-17T19:20:20.000Z",permalink:"/pages/2a0898/",tags:[null]},regularPath:"/03.Linux/05.Frank%20-%20Linxu%E7%8E%B0%E4%BB%A3%E6%96%B9%E6%B3%95/02.%E5%91%BD%E4%BB%A4/02.ls%E2%80%94%E2%80%94%E8%BF%9B%E9%98%B6%E4%BD%BF%E7%94%A8%EF%BC%8C%E9%81%8D%E5%8E%86%E3%80%81%E5%8C%B9%E9%85%8D%E5%92%8C%E8%BF%87%E6%BB%A4%E6%96%87%E4%BB%B6.html",relativePath:"03.Linux/05.Frank - Linxu现代方法/02.命令/02.ls——进阶使用，遍历、匹配和过滤文件.md",key:"v-46c3fbe0",path:"/pages/2a0898/",headers:[{level:2,title:"最常用最屌的ls命令",slug:"最常用最屌的ls命令",normalizedTitle:"最常用最屌的ls命令",charIndex:2},{level:2,title:"遍历文件夹（递归）",slug:"遍历文件夹-递归",normalizedTitle:"遍历文件夹（递归）",charIndex:1099},{level:2,title:"文件扩展匹配符",slug:"文件扩展匹配符",normalizedTitle:"文件扩展匹配符",charIndex:1419},{level:2,title:"元字符通配符",slug:"元字符通配符",normalizedTitle:"元字符通配符",charIndex:1730}],headersStr:"最常用最屌的ls命令 遍历文件夹（递归） 文件扩展匹配符 元字符通配符",content:"# 最常用最屌的ls命令\n\n * ls -alF\n * ll -aF、l -F\n\n强大之处在于，显示详细信息的同时还区分了文件夹和文件（文件夹后带有“/”）\n\njim at LAPTOP-QQ68DGFG in ~\n$ ls -alF\ntotal 140\ndrwxr-xr-x 1 jim  jim   4096 Dec 30 12:02 ./\ndrwxr-xr-x 1 root root  4096 Oct 30 11:46 ../\n-rw------- 1 jim  jim    645 Dec 17 22:14 .bash_history\n-rw-r--r-- 1 jim  jim    220 Oct 30 11:46 .bash_logout\n-rw-r--r-- 1 jim  jim   3771 Oct 30 11:46 .bashrc\ndrwx------ 1 jim  jim   4096 Nov  9 18:30 .config/\ndrwxr-xr-x 1 jim  jim   4096 Oct 30 11:46 .landscape/\n-rw-r--r-- 1 jim  jim      0 Dec 17 21:53 .motd_shown\ndrwxr-xr-x 1 jim  jim   4096 Dec 30 11:36 .oh-my-zsh/\n-rw-r--r-- 1 jim  jim    807 Oct 30 11:46 .profile\n-rw-r--r-- 1 jim  jim      0 Dec 15 13:52 .sudo_as_admin_successful\ndrwxr-xr-x 1 jim  jim   4096 Oct 30 12:01 .vim/\n-rw------- 1 jim  jim   4232 Dec 22 10:40 .viminfo\n-rw-r--r-- 1 jim  jim  48971 Dec 17 22:06 .zcompdump\n-rw-r--r-- 1 jim  jim  50324 Dec 30 11:36 .zcompdump-LAPTOP-QQ68DGFG-5.8\n-rw------- 1 jim  jim   2007 Dec 30 12:02 .zsh_history\n-rw-r--r-- 1 jim  jim   3674 Dec 17 22:35 .zshrc\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n# 遍历文件夹（递归）\n\nls -R\n\njim at LAPTOP-QQ68DGFG in ~\n$ ls -R\n.:\nDoc  Img\n\n./Doc:\ntest.txt\n\n./Img:\nSnipaste_2021-12-20_12-47-23.png\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nls -FR\n\njim at LAPTOP-QQ68DGFG in ~\n$ ls -FR\n.:\nDoc/  Img/\n\n./Doc:\ntest_1.txt  test_2.txt  test_3.pdf\n\n./Img:\nSnipaste_2021-12-20_12-47-23.png\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 文件扩展匹配符\n\n * *——指代多个\n * ?——指代一个\n\n将 pdf 文件过滤掉： ls *.txt\n\njim at LAPTOP-QQ68DGFG in ~/Doc\n$ ls\ntest_1.txt  test_2.txt  test_3.pdf\n\njim at LAPTOP-QQ68DGFG in ~/Doc\n$ ls *.txt\ntest_1.txt  test_2.txt\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nls test_?.txt\n\njim at LAPTOP-QQ68DGFG in ~/Doc\n$ ls test_?.txt\ntest_1.txt  test_2.txt\n\n\n1\n2\n3\n\n\n\n# 元字符通配符\n\nls t[a-x]st.txt\n\njim at LAPTOP-QQ68DGFG in ~/Doc\n$ ls\ntast.txt  tbst.txt  tcst.txt  tzst.txt\n\njim at LAPTOP-QQ68DGFG in ~/Doc\n$ ls t[a-x]st.txt\ntast.txt  tbst.txt  tcst.txt\n\n\n1\n2\n3\n4\n5\n6\n7\n",normalizedContent:"# 最常用最屌的ls命令\n\n * ls -alf\n * ll -af、l -f\n\n强大之处在于，显示详细信息的同时还区分了文件夹和文件（文件夹后带有“/”）\n\njim at laptop-qq68dgfg in ~\n$ ls -alf\ntotal 140\ndrwxr-xr-x 1 jim  jim   4096 dec 30 12:02 ./\ndrwxr-xr-x 1 root root  4096 oct 30 11:46 ../\n-rw------- 1 jim  jim    645 dec 17 22:14 .bash_history\n-rw-r--r-- 1 jim  jim    220 oct 30 11:46 .bash_logout\n-rw-r--r-- 1 jim  jim   3771 oct 30 11:46 .bashrc\ndrwx------ 1 jim  jim   4096 nov  9 18:30 .config/\ndrwxr-xr-x 1 jim  jim   4096 oct 30 11:46 .landscape/\n-rw-r--r-- 1 jim  jim      0 dec 17 21:53 .motd_shown\ndrwxr-xr-x 1 jim  jim   4096 dec 30 11:36 .oh-my-zsh/\n-rw-r--r-- 1 jim  jim    807 oct 30 11:46 .profile\n-rw-r--r-- 1 jim  jim      0 dec 15 13:52 .sudo_as_admin_successful\ndrwxr-xr-x 1 jim  jim   4096 oct 30 12:01 .vim/\n-rw------- 1 jim  jim   4232 dec 22 10:40 .viminfo\n-rw-r--r-- 1 jim  jim  48971 dec 17 22:06 .zcompdump\n-rw-r--r-- 1 jim  jim  50324 dec 30 11:36 .zcompdump-laptop-qq68dgfg-5.8\n-rw------- 1 jim  jim   2007 dec 30 12:02 .zsh_history\n-rw-r--r-- 1 jim  jim   3674 dec 17 22:35 .zshrc\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n# 遍历文件夹（递归）\n\nls -r\n\njim at laptop-qq68dgfg in ~\n$ ls -r\n.:\ndoc  img\n\n./doc:\ntest.txt\n\n./img:\nsnipaste_2021-12-20_12-47-23.png\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nls -fr\n\njim at laptop-qq68dgfg in ~\n$ ls -fr\n.:\ndoc/  img/\n\n./doc:\ntest_1.txt  test_2.txt  test_3.pdf\n\n./img:\nsnipaste_2021-12-20_12-47-23.png\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 文件扩展匹配符\n\n * *——指代多个\n * ?——指代一个\n\n将 pdf 文件过滤掉： ls *.txt\n\njim at laptop-qq68dgfg in ~/doc\n$ ls\ntest_1.txt  test_2.txt  test_3.pdf\n\njim at laptop-qq68dgfg in ~/doc\n$ ls *.txt\ntest_1.txt  test_2.txt\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nls test_?.txt\n\njim at laptop-qq68dgfg in ~/doc\n$ ls test_?.txt\ntest_1.txt  test_2.txt\n\n\n1\n2\n3\n\n\n\n# 元字符通配符\n\nls t[a-x]st.txt\n\njim at laptop-qq68dgfg in ~/doc\n$ ls\ntast.txt  tbst.txt  tcst.txt  tzst.txt\n\njim at laptop-qq68dgfg in ~/doc\n$ ls t[a-x]st.txt\ntast.txt  tbst.txt  tcst.txt\n\n\n1\n2\n3\n4\n5\n6\n7\n",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"touch",frontmatter:{title:"touch",date:"2022-04-17T19:20:20.000Z",permalink:"/pages/4ccd98/",tags:[null]},regularPath:"/03.Linux/05.Frank%20-%20Linxu%E7%8E%B0%E4%BB%A3%E6%96%B9%E6%B3%95/02.%E5%91%BD%E4%BB%A4/05.touch.html",relativePath:"03.Linux/05.Frank - Linxu现代方法/02.命令/05.touch.md",key:"v-4b514f00",path:"/pages/4ccd98/",headers:[{level:2,title:"touch的两个作用",slug:"touch的两个作用",normalizedTitle:"touch的两个作用",charIndex:2}],headersStr:"touch的两个作用",content:"# touch的两个作用\n\n * 把已存在文件的时间标签更新为系统当前的时间\n * 创建新的空文件\n\n创建单个文件：\n\ntouch 1.txt\n\n\n1\n\n\n创建多个文件：\n\ntouch 1.md 2.md 3.md\n\n\n1\n",normalizedContent:"# touch的两个作用\n\n * 把已存在文件的时间标签更新为系统当前的时间\n * 创建新的空文件\n\n创建单个文件：\n\ntouch 1.txt\n\n\n1\n\n\n创建多个文件：\n\ntouch 1.md 2.md 3.md\n\n\n1\n",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"cp",frontmatter:{title:"cp",date:"2022-04-17T19:20:20.000Z",permalink:"/pages/38c84c/",tags:[null]},regularPath:"/03.Linux/05.Frank%20-%20Linxu%E7%8E%B0%E4%BB%A3%E6%96%B9%E6%B3%95/02.%E5%91%BD%E4%BB%A4/06.cp.html",relativePath:"03.Linux/05.Frank - Linxu现代方法/02.命令/06.cp.md",key:"v-0cfc498e",path:"/pages/38c84c/",headers:[{level:2,title:"复制单个文件",slug:"复制单个文件",normalizedTitle:"复制单个文件",charIndex:27},{level:2,title:"复制文件夹下所有文件（不含目录和子目录）",slug:"复制文件夹下所有文件-不含目录和子目录",normalizedTitle:"复制文件夹下所有文件（不含目录和子目录）",charIndex:156},{level:2,title:"复制文件夹及之下的所有文件和子目录",slug:"复制文件夹及之下的所有文件和子目录",normalizedTitle:"复制文件夹及之下的所有文件和子目录",charIndex:197},{level:2,title:"练习技巧",slug:"练习技巧",normalizedTitle:"练习技巧",charIndex:280}],headersStr:"复制单个文件 复制文件夹下所有文件（不含目录和子目录） 复制文件夹及之下的所有文件和子目录 练习技巧",content:"cp命令全称copy\n\n作用：复制文件或目录\n\n\n# 复制单个文件\n\ncp 源文件 目标文件\n\n但通常不建议直接复制，如果目标目录已存在同名文件，Linux 不会提示，所以最好带上-i，以避免覆盖文件。\n\ncp -i 源文件 目标文件 交互操作\n\n如果目标目录有同名文件，y或n用回答问题决定是否覆盖。\n\n\n# 复制文件夹下所有文件（不含目录和子目录）\n\ncp 源文件夹/* 目标目录\n\n\n# 复制文件夹及之下的所有文件和子目录\n\ncp -r 源文件夹 目标目录 递归处理\n\n当前目录为目标目录：\n\ncp -r ~/Music/Jack .\n\n\n1\n\n\n\n# 练习技巧\n\n利用touch创建多个文件\n\ntouch 1.java 2.java 3.jpg 4.png 5.java 6.java\n\n\n1\n\n\n想办法把所有 .java 文件复制到另一个目录\n\n多使用诸如 pwd、cd -、ls等命令辅助\n\ncp -R ./*.java /Doc/javaFile/\n\n\n1\n",normalizedContent:"cp命令全称copy\n\n作用：复制文件或目录\n\n\n# 复制单个文件\n\ncp 源文件 目标文件\n\n但通常不建议直接复制，如果目标目录已存在同名文件，linux 不会提示，所以最好带上-i，以避免覆盖文件。\n\ncp -i 源文件 目标文件 交互操作\n\n如果目标目录有同名文件，y或n用回答问题决定是否覆盖。\n\n\n# 复制文件夹下所有文件（不含目录和子目录）\n\ncp 源文件夹/* 目标目录\n\n\n# 复制文件夹及之下的所有文件和子目录\n\ncp -r 源文件夹 目标目录 递归处理\n\n当前目录为目标目录：\n\ncp -r ~/music/jack .\n\n\n1\n\n\n\n# 练习技巧\n\n利用touch创建多个文件\n\ntouch 1.java 2.java 3.jpg 4.png 5.java 6.java\n\n\n1\n\n\n想办法把所有 .java 文件复制到另一个目录\n\n多使用诸如 pwd、cd -、ls等命令辅助\n\ncp -r ./*.java /doc/javafile/\n\n\n1\n",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"熟练使用cd、ls命令",frontmatter:{title:"熟练使用cd、ls命令",date:"2022-04-17T19:20:20.000Z",permalink:"/pages/adaf3b/",tags:[null]},regularPath:"/03.Linux/05.Frank%20-%20Linxu%E7%8E%B0%E4%BB%A3%E6%96%B9%E6%B3%95/03.%E6%8A%80%E5%B7%A7/01.%E7%86%9F%E7%BB%83%E4%BD%BF%E7%94%A8cd%E3%80%81ls%E5%91%BD%E4%BB%A4.html",relativePath:"03.Linux/05.Frank - Linxu现代方法/03.技巧/01.熟练使用cd、ls命令.md",key:"v-06b4bc73",path:"/pages/adaf3b/",headers:[{level:2,title:"怎么练？",slug:"怎么练",normalizedTitle:"怎么练？",charIndex:39},{level:2,title:"cd技巧",slug:"cd技巧",normalizedTitle:"cd技巧",charIndex:168}],headersStr:"怎么练？ cd技巧",content:"熟练使用cd、ls命令，这俩可以说是最常用的命令了，没事儿就多练一练\n\n\n# 怎么练？\n\n * 在用户目录下创建一些文件/文件夹什么的，反正只要能让你用到这两个命令的事情，大胆做就好了。\n * cd、ls与绝对路径、相对路径的配合使用\n\n> . 当前目录（使用pwd可显示当前目录的绝对路径）\n> \n> .. 当前目录的父目录\n\n\n# cd技巧\n\n> cd -显示并切换至用户上次所在的目录\n> \n> 可单独输入cd或~来快速返回到用户目录",normalizedContent:"熟练使用cd、ls命令，这俩可以说是最常用的命令了，没事儿就多练一练\n\n\n# 怎么练？\n\n * 在用户目录下创建一些文件/文件夹什么的，反正只要能让你用到这两个命令的事情，大胆做就好了。\n * cd、ls与绝对路径、相对路径的配合使用\n\n> . 当前目录（使用pwd可显示当前目录的绝对路径）\n> \n> .. 当前目录的父目录\n\n\n# cd技巧\n\n> cd -显示并切换至用户上次所在的目录\n> \n> 可单独输入cd或~来快速返回到用户目录",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"Terminal中的快捷键",frontmatter:{title:"Terminal中的快捷键",date:"2022-04-17T19:20:20.000Z",permalink:"/pages/84b95d/",tags:[null]},regularPath:"/03.Linux/05.Frank%20-%20Linxu%E7%8E%B0%E4%BB%A3%E6%96%B9%E6%B3%95/03.%E6%8A%80%E5%B7%A7/02.Terminal%E4%B8%AD%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE.html",relativePath:"03.Linux/05.Frank - Linxu现代方法/03.技巧/02.Terminal中的快捷键.md",key:"v-eb5241a6",path:"/pages/84b95d/",headersStr:null,content:"操作     方案一            方案二\n拷贝     ctrl+shift+C   ctrl+insert\n粘贴     ctrl+shift+V   shift+insert\n强制停止   ctrl+C         ",normalizedContent:"操作     方案一            方案二\n拷贝     ctrl+shift+c   ctrl+insert\n粘贴     ctrl+shift+v   shift+insert\n强制停止   ctrl+c         ",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"终端光标移动技巧",frontmatter:{title:"终端光标移动技巧",date:"2022-04-17T19:20:20.000Z",permalink:"/pages/9576cc/",tags:[null]},regularPath:"/03.Linux/05.Frank%20-%20Linxu%E7%8E%B0%E4%BB%A3%E6%96%B9%E6%B3%95/03.%E6%8A%80%E5%B7%A7/03.%E7%BB%88%E7%AB%AF%E5%85%89%E6%A0%87%E7%A7%BB%E5%8A%A8%E6%8A%80%E5%B7%A7.html",relativePath:"03.Linux/05.Frank - Linxu现代方法/03.技巧/03.终端光标移动技巧.md",key:"v-e95328cc",path:"/pages/9576cc/",headers:[{level:2,title:"偷懒不会？",slug:"偷懒不会",normalizedTitle:"偷懒不会？",charIndex:2},{level:2,title:"快捷键",slug:"快捷键",normalizedTitle:"快捷键",charIndex:11}],headersStr:"偷懒不会？ 快捷键",content:"# 偷懒不会？\n\n有些快捷键，你不知道一样能使用 Linux Shell，但它们的确能让你事半功倍。\n\n总不能按一下左右方向键移动一下光标吧，只需要加上ctrl键就能跳单词了，前提是单词于单词之间以某些符号间隔（比如下划线_或空格）\n\ntouch create_file_temp_123.txt\n\n\n1\n\n\n另外：\n\nctrl+u这个快捷键其实是指清除光标之前的内容，对应的ctrl+k是清除光标之后的内容\n\n用 tab键偷懒，其实比你手动输入更可靠\n\n删除文件可以用rm，删库跑路了解一下\n\n\n# 快捷键\n\n作用          快捷键1         快捷键2\n补全          tab          \n跳单词         ctrl+左右方向键   \n光标跳跃到首部     ctrl+a       \n光标跳跃到尾部     ctrl+e       \n删除光标之后的内容   ctrl+k       \n删除光标之前的内容   ctrl+u       \n查看使用过的命令    ctrl+p       上下键\n                         ",normalizedContent:"# 偷懒不会？\n\n有些快捷键，你不知道一样能使用 linux shell，但它们的确能让你事半功倍。\n\n总不能按一下左右方向键移动一下光标吧，只需要加上ctrl键就能跳单词了，前提是单词于单词之间以某些符号间隔（比如下划线_或空格）\n\ntouch create_file_temp_123.txt\n\n\n1\n\n\n另外：\n\nctrl+u这个快捷键其实是指清除光标之前的内容，对应的ctrl+k是清除光标之后的内容\n\n用 tab键偷懒，其实比你手动输入更可靠\n\n删除文件可以用rm，删库跑路了解一下\n\n\n# 快捷键\n\n作用          快捷键1         快捷键2\n补全          tab          \n跳单词         ctrl+左右方向键   \n光标跳跃到首部     ctrl+a       \n光标跳跃到尾部     ctrl+e       \n删除光标之后的内容   ctrl+k       \n删除光标之前的内容   ctrl+u       \n查看使用过的命令    ctrl+p       上下键\n                         ",charsets:{cjk:!0},lastUpdated:"2022/09/26, 16:55:15",lastUpdatedTimestamp:1664182515e3},{title:"SSH备忘单",frontmatter:{title:"SSH备忘单",date:"2022-09-14T14:26:38.000Z",permalink:"/pages/254159/",sticky:3,tags:["SSH"]},regularPath:"/04.%E6%8A%80%E6%9C%AF/01.%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/00.SSH%E5%A4%87%E5%BF%98%E5%8D%95.html",relativePath:"04.技术/01.技术文档/00.SSH备忘单.md",key:"v-47eb0248",path:"/pages/254159/",headers:[{level:2,title:"客户端和服务器",slug:"客户端和服务器",normalizedTitle:"客户端和服务器",charIndex:90},{level:2,title:"两种主要的验证方式",slug:"两种主要的验证方式",normalizedTitle:"两种主要的验证方式",charIndex:382},{level:2,title:"连接",slug:"连接",normalizedTitle:"连接",charIndex:438},{level:2,title:"密钥安全验证",slug:"密钥安全验证",normalizedTitle:"密钥安全验证",charIndex:532}],headersStr:"客户端和服务器 两种主要的验证方式 连接 密钥安全验证",content:"# SSH备忘单\n\n> SSH（Secure Shell 的缩写）是一种网络协议，用于加密两台计算机之间的通信，并且支持各种身份验证机制。\n> \n> SSH教程 - 网道\n\n\n# 客户端和服务器\n\n> SSH 的软件架构是服务器-客户端模式（Server - Client）。在这个架构中，SSH 软件分成两个部分：向服务器发出请求的部分，称为客户端（client），OpenSSH 的实现为 ssh；接收客户端发出的请求的部分，称为服务器（server），OpenSSH 的实现为 sshd。\n\n本地主机安装客户端：\n\nsudo apt-get install openssh-client\n\n\n1\n\n\n> Windows终端自带SSH客户端。\n\n远程主机安装服务器：\n\nsudo apt-get install openssh-server\n\n\n1\n\n\n\n# 两种主要的验证方式\n\n * 基于口令的安全验证（密码）\n * 基于密钥的安全验证（RSA，非对称加密）\n\n\n# 连接\n\nssh user@host\n\nExample: ssh fuck@10.10.10.10\n\n\n1\n2\n3\n\n\n> host 可以是IP地址，也可以是主机名（需要额外配置）\n\n\n# 密钥安全验证\n\n> 设定好之后的连接便不再需要输入密码。\n\n 1. 客户端运行命令 ssh-keygen\n    \n    > 在 $HOME/.ssh/ 目录下生成两个新文件：id_rsa.pub 和 id_rsa\n\n 2. 拷贝公钥到远程主机 ssh-copy-id user@host\n    \n    > 一般客户端使用密钥，远程主机使用公钥，生成密钥的操作在客户端完成。\n\n 3. 连接 ssh user@host",normalizedContent:"# ssh备忘单\n\n> ssh（secure shell 的缩写）是一种网络协议，用于加密两台计算机之间的通信，并且支持各种身份验证机制。\n> \n> ssh教程 - 网道\n\n\n# 客户端和服务器\n\n> ssh 的软件架构是服务器-客户端模式（server - client）。在这个架构中，ssh 软件分成两个部分：向服务器发出请求的部分，称为客户端（client），openssh 的实现为 ssh；接收客户端发出的请求的部分，称为服务器（server），openssh 的实现为 sshd。\n\n本地主机安装客户端：\n\nsudo apt-get install openssh-client\n\n\n1\n\n\n> windows终端自带ssh客户端。\n\n远程主机安装服务器：\n\nsudo apt-get install openssh-server\n\n\n1\n\n\n\n# 两种主要的验证方式\n\n * 基于口令的安全验证（密码）\n * 基于密钥的安全验证（rsa，非对称加密）\n\n\n# 连接\n\nssh user@host\n\nexample: ssh fuck@10.10.10.10\n\n\n1\n2\n3\n\n\n> host 可以是ip地址，也可以是主机名（需要额外配置）\n\n\n# 密钥安全验证\n\n> 设定好之后的连接便不再需要输入密码。\n\n 1. 客户端运行命令 ssh-keygen\n    \n    > 在 $home/.ssh/ 目录下生成两个新文件：id_rsa.pub 和 id_rsa\n\n 2. 拷贝公钥到远程主机 ssh-copy-id user@host\n    \n    > 一般客户端使用密钥，远程主机使用公钥，生成密钥的操作在客户端完成。\n\n 3. 连接 ssh user@host",charsets:{cjk:!0},lastUpdated:"2022/10/29, 19:52:35",lastUpdatedTimestamp:1667044355e3},{title:"Git使用手册",frontmatter:{title:"Git使用手册",date:"2019-12-25T14:27:01.000Z",permalink:"/pages/9a7ee40fc232253e",categories:["技术","技术文档"],tags:[null],author:{name:"xugaoyi",link:"https://github.com/xugaoyi"}},regularPath:"/04.%E6%8A%80%E6%9C%AF/01.%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/01.Git%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C.html",relativePath:"04.技术/01.技术文档/01.Git使用手册.md",key:"v-5ee0e570",path:"/pages/9a7ee40fc232253e/",headers:[{level:2,title:"安装",slug:"安装",normalizedTitle:"安装",charIndex:14},{level:2,title:"创建版本库（仓库）",slug:"创建版本库-仓库",normalizedTitle:"创建版本库（仓库）",charIndex:296},{level:2,title:"添加文件到仓库",slug:"添加文件到仓库",normalizedTitle:"添加文件到仓库",charIndex:478},{level:2,title:"版本管理",slug:"版本管理",normalizedTitle:"版本管理",charIndex:819},{level:2,title:"远程仓库",slug:"远程仓库",normalizedTitle:"远程仓库",charIndex:1714},{level:2,title:"分支管理",slug:"分支管理",normalizedTitle:"分支管理",charIndex:2960},{level:2,title:"帮助命令",slug:"帮助命令",normalizedTitle:"帮助命令",charIndex:3360},{level:2,title:"参考文档",slug:"参考文档",normalizedTitle:"参考文档",charIndex:7031}],excerpt:'<h1 id="git使用手册"><a class="header-anchor" href="#git使用手册">#</a> Git使用手册</h1>\n<h2 id="安装"><a class="header-anchor" href="#安装">#</a> 安装</h2>\n<p>官网下载：<a href="https://git-scm.com/downloads" target="_blank" rel="noopener noreferrer">https://git-scm.com/downloads<OutboundLink/></a> 下载完成后使用默认进行安装。</p>\n<p>安装完成后，在开始菜单里找到 <code>Git</code> -&gt; <code>Git Bash</code>，蹦出一个类似命令行窗口的东西，就说明Git安装成功！\n还需要最后一步设置，在命令行输入：</p>\n\x3c!--beforebegin--\x3e<div class="language-bash line-numbers-mode">\x3c!--afterbegin--\x3e<pre v-pre class="language-bash"><code><span class="token function">git</span> config --global user.name <span class="token string">"Your Name"</span>\n<span class="token function">git</span> config --global user.email <span class="token string">"email@example.com"</span>\n</code></pre>\n<div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br></div>\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<p>因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。</p>\n',headersStr:"安装 创建版本库（仓库） 添加文件到仓库 版本管理 远程仓库 分支管理 帮助命令 参考文档",content:"# Git使用手册\n\n\n# 安装\n\n官网下载：https://git-scm.com/downloads 下载完成后使用默认进行安装。\n\n安装完成后，在开始菜单里找到 Git -> Git Bash，蹦出一个类似命令行窗口的东西，就说明Git安装成功！ 还需要最后一步设置，在命令行输入：\n\ngit config --global user.name \"Your Name\"\ngit config --global user.email \"email@example.com\"\n\n\n1\n2\n\n\n因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。\n\n\n# 创建版本库（仓库）\n\n# 创建仓库\nmkdir <仓库name> \n\n# 进入仓库\ncd <仓库name>\n\n# 此命令用于显示当前目录\npwd\n\n# 把当前目录初始化成Git仓库\ngit init\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n> 也不一定必须在空目录下创建Git仓库，选择一个已经有东西的目录直接git init也是可以的。\n\n\n# 添加文件到仓库\n\n在仓库目录下放入文件，如新建一个test.txt文件，然后使用git add test.txt命令告诉Git，把文件添加到缓存区，然后使用git commit -m \"提交描述\"告诉Git，把文件提交到仓库。\n\n# 添加指定文件或文件夹到缓存区，文件需添加后缀\ngit add <文件或文件夹name>                   # 单个文件\ngit add <文件或文件夹name> <文件或文件夹name>  # 多个文件\n\n# 或 全部文件同时添加到缓存区\ngit add .\n\n# 把文件从缓存区提交至仓库\ngit commit -m \"提交描述\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n# 提交描述规范\n\n在提交代码时输入清晰的说明有利于版本管理，建议搭配如下关键字编写提交描述\n\n# 新建(add)\n# 删除(rm)\n# 更新(update)\n# 改动(change)\n# 实现\n# 发布\n# 修复\n...\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 版本管理\n\n# 提交修改\n\n如修改test.txt的内容后，运行git status命令看看被修改的文件，然后再使用git add test.txt、 git commit -m \"修改描述\"把修改后的文件提交到仓库，提交后可再次使用git status查看当前状态。\n\n# 显示 新增/删除/被改动等 的文件\ngit status\n\n\n1\n2\n\n\n# 查看版本记录\n\n# 查看版本记录\ngit log   # 显示版本号、提交时间等信息\n\n\n1\n2\n\n\n> 也可使用可视化工具查看Git版本历史： 在仓库目录右键 > Git BUI Here\n\n# 回退版本\n\n首先，Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，也就是最新的提交1094adb...（注意我的提交ID和你的肯定不一样），上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。\n\n# 回退到上一个版本\n$ git reset --hard HEAD^\n\n\n1\n2\n\n\n此时查看git log记录发现，原来最新的版本已经没有了，想回到原来最新的版本怎么办？这就需要知道最新的版本的版本号\n\n# 跳转到指定版本\ngit reset --hard <版本号前几位>\n\n\n1\n2\n\n\n但是不知道版本号怎么办？Git提供了一个命令git reflog用来记录你的每一次命令\n\ngit reflog\n\n\n1\n\n\n# 撤销修改\n\nhttps://www.liaoxuefeng.com/wiki/896043488029600/897889638509536\n\n# 删除文件\n\nhttps://www.liaoxuefeng.com/wiki/896043488029600/900002180232448\n\n\n# 远程仓库\n\n# SSH验证\n\n使本机能关联远程仓库，首次需要SSH验证\n\n * 第1步：创建SSH Key。在用户主（C:\\Users\\dell）目录下，看看有没有.ssh目录， 如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。 如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：\n\n# 创建SSH Key\nssh-keygen -t rsa -C \"邮件地址\"\n\n\n1\n2\n\n * 第2步：登陆GitHub，右上角头像 > settings > SSH and GPG keys >Add SSH Key，在key的文本框里粘贴id_rsa.pub文件的内容\n\n# 关联远程仓库\n\nSSH验证完成后，在github创建仓库，创建仓库时记得取消 Initialize this repository with a README的勾选，然后在本地命令：\n\n# 关联远程仓库，仓库名一般使用origin\ngit remote add <仓库名> <远程仓库地址>\n\n# 示例\ngit remote add origin git@github.com:xugaoyi/test.git\n\n\n1\n2\n3\n4\n5\n\n\n下一步，就可以把本地库的所有内容推送到远程库上\n\n# 把文件推送到远程仓库\ngit push -u <仓库名> <分支名>\n\n# 示例\ngit push -u origin master\n\n\n1\n2\n3\n4\n5\n\n\n由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。\n\n> 前提是目录已经git init初始化成仓库，并且git status状态是没有改动的，如果有改动则先git add .添加至缓存区，git commit -m '提交描述'提交至仓库，然后执行上面命令。\n> \n> 如创建仓库时勾选了 Initialize this repository with a README 则需先拉取README.md文件到本地仓库git pull\n> \n> 可关联多个远程仓库，注意给不同的远程仓库取不一样的名称，提交是分别按名称提交到不一样的远程仓库。\n\n# 简化的推送命令\ngit push\n\n\n1\n2\n\n\n# 查看远程仓库\n\n# 查看远程仓库\ngit remote -v\n\n\n1\n2\n\n\n# 删除远程仓库\n\n# 删除远程仓库\ngit remote rm <仓库名>\n\n\n1\n2\n\n\n# 从远程库克隆项目\n\n# 从远程库克隆项目\ngit clone <仓库地址>\n\n\n1\n2\n\n\n# 克隆指定分支\n\n# 克隆指定分支\ngit clone -b <分支名> <仓库地址>\n\n\n1\n2\n\n\n\n# 分支管理\n\n# 创建分支\n\n# 创建分支\ngit checkout -b <分支名>\n\n\n1\n2\n\n\n# 查看分支\n\n# 查看分支\ngit branch\n\n\n1\n2\n\n\n查看分支时，在分支前带 * 号的表示当前的分支\n\n# 切换分支\n\n# 切换分支\ngit checkout <分支名>\n\n\n1\n2\n\n\n# 合并分支\n\n# 合并本地的分支\ngit merge <分支名>\n\n# 合并远程的分支\ngit merge <远程仓库名>/<分支名>\n\n\n1\n2\n3\n4\n5\n\n\n注意，是将指定分支合并到当前分支，并非当前分支合并到指定分支。\n\n一般情况下是把当前分支切换到主分支，然后把子分支合并到主分支。\n\n# 删除分支\n\n# 删除分支\ngit branch -d <分支名>\n\n\n1\n2\n\n\n# 修改分支名\n\n# 修改分支名\ngit branch -m <原分支名> <新分支名>\n\n\n1\n2\n\n\n\n# 帮助命令\n\n如对命令不清楚时，可使用git help命令显示出git命令介绍。\n\n# 帮助命令\ngit help\n\n\n1\n2\n\n\n$ git help\nusage: git [--version] [--help] [-C <path>] [-c <name>=<value>]\n           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]\n           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]\n           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]\n           <command> [<args>]\n\nThese are common Git commands used in various situations:\n\nstart a working area (see also: git help tutorial)\n   clone      Clone a repository into a new directory\n   init       Create an empty Git repository or reinitialize an existing one\n\nwork on the current change (see also: git help everyday)\n   add        Add file contents to the index\n   mv         Move or rename a file, a directory, or a symlink\n   reset      Reset current HEAD to the specified state\n   rm         Remove files from the working tree and from the index\n\nexamine the history and state (see also: git help revisions)\n   bisect     Use binary search to find the commit that introduced a bug\n   grep       Print lines matching a pattern\n   log        Show commit logs\n   show       Show various types of objects\n   status     Show the working tree status\n\ngrow, mark and tweak your common history\n   branch     List, create, or delete branches\n   checkout   Switch branches or restore working tree files\n   commit     Record changes to the repository\n   diff       Show changes between commits, commit and working tree, etc\n   merge      Join two or more development histories together\n   rebase     Reapply commits on top of another base tip\n   tag        Create, list, delete or verify a tag object signed with GPG\n\ncollaborate (see also: git help workflows)\n   fetch      Download objects and refs from another repository\n   pull       Fetch from and integrate with another repository or a local branch\n   push       Update remote refs along with associated objects\n\n'git help -a' and 'git help -g' list available subcommands and some\nconcept guides. See 'git help <command>' or 'git help <concept>'\nto read about a specific subcommand or concept.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n\n\n翻译工具翻译中文\n\n$ git help\n使用：git [--version] [--help] [-C <path>] [-c <name>=<value>]\n           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]\n           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]\n           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]\n           <command> [<args>]\n\n这些是在各种情况下使用的通用Git命令：\n\nstart a working area (参见命令: git help tutorial)\n   clone      将存储库克隆到新目录中\n   init       创建一个空的Git存储库或重新初始化一个现有的存储库\n\nwork on the current change (参见命令: git help everyday)\n   add        将文件内容添加到索引中\n   mv         移动或重命名文件、目录或符号链接\n   reset      将当前磁头重置为指定状态\n   rm         从工作树和索引中删除文件\n\nexamine the history and state (参见命令: git help revisions)\n   bisect     使用二分查找查找引入错误的提交\n   grep       打印与模式匹配的行\n   log        显示提交日志\n   show       显示各种类型的对象\n   status     显示工作树状态\n\ngrow, mark and tweak your common history\n   branch     列出、创建或删除分支\n   checkout   切换分支或还原工作树文件\n   commit     记录对存储库的更改\n   diff       显示提交、提交和工作树等之间的更改\n   merge      将两个或多个开发历史连接在一起\n   rebase     在另一个基本提示之上重新应用提交\n   tag        创建、列表、删除或验证用GPG签名的标记对象\n\ncollaborate (参见命令: git help workflows)\n   fetch      从另一个存储库下载对象和引用\n   pull       从另一个存储库或本地分支获取并与之集成\n   push       更新远程引用和相关对象\n\n'git help -a' 和 'git help -g' 列出可用的子命令和一些概念指导。\n命令'git help <command>' 或 'git help <concept>' 查看特定子命令或概念.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n\n\n\n# 参考文档\n\nhttps://www.liaoxuefeng.com/wiki/896043488029600",normalizedContent:"# git使用手册\n\n\n# 安装\n\n官网下载：https://git-scm.com/downloads 下载完成后使用默认进行安装。\n\n安装完成后，在开始菜单里找到 git -> git bash，蹦出一个类似命令行窗口的东西，就说明git安装成功！ 还需要最后一步设置，在命令行输入：\n\ngit config --global user.name \"your name\"\ngit config --global user.email \"email@example.com\"\n\n\n1\n2\n\n\n因为git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和email地址。\n\n\n# 创建版本库（仓库）\n\n# 创建仓库\nmkdir <仓库name> \n\n# 进入仓库\ncd <仓库name>\n\n# 此命令用于显示当前目录\npwd\n\n# 把当前目录初始化成git仓库\ngit init\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n> 也不一定必须在空目录下创建git仓库，选择一个已经有东西的目录直接git init也是可以的。\n\n\n# 添加文件到仓库\n\n在仓库目录下放入文件，如新建一个test.txt文件，然后使用git add test.txt命令告诉git，把文件添加到缓存区，然后使用git commit -m \"提交描述\"告诉git，把文件提交到仓库。\n\n# 添加指定文件或文件夹到缓存区，文件需添加后缀\ngit add <文件或文件夹name>                   # 单个文件\ngit add <文件或文件夹name> <文件或文件夹name>  # 多个文件\n\n# 或 全部文件同时添加到缓存区\ngit add .\n\n# 把文件从缓存区提交至仓库\ngit commit -m \"提交描述\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n# 提交描述规范\n\n在提交代码时输入清晰的说明有利于版本管理，建议搭配如下关键字编写提交描述\n\n# 新建(add)\n# 删除(rm)\n# 更新(update)\n# 改动(change)\n# 实现\n# 发布\n# 修复\n...\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 版本管理\n\n# 提交修改\n\n如修改test.txt的内容后，运行git status命令看看被修改的文件，然后再使用git add test.txt、 git commit -m \"修改描述\"把修改后的文件提交到仓库，提交后可再次使用git status查看当前状态。\n\n# 显示 新增/删除/被改动等 的文件\ngit status\n\n\n1\n2\n\n\n# 查看版本记录\n\n# 查看版本记录\ngit log   # 显示版本号、提交时间等信息\n\n\n1\n2\n\n\n> 也可使用可视化工具查看git版本历史： 在仓库目录右键 > git bui here\n\n# 回退版本\n\n首先，git必须知道当前版本是哪个版本，在git中，用head表示当前版本，也就是最新的提交1094adb...（注意我的提交id和你的肯定不一样），上一个版本就是head^，上上一个版本就是head^^，当然往上100个版本写100个^比较容易数不过来，所以写成head~100。\n\n# 回退到上一个版本\n$ git reset --hard head^\n\n\n1\n2\n\n\n此时查看git log记录发现，原来最新的版本已经没有了，想回到原来最新的版本怎么办？这就需要知道最新的版本的版本号\n\n# 跳转到指定版本\ngit reset --hard <版本号前几位>\n\n\n1\n2\n\n\n但是不知道版本号怎么办？git提供了一个命令git reflog用来记录你的每一次命令\n\ngit reflog\n\n\n1\n\n\n# 撤销修改\n\nhttps://www.liaoxuefeng.com/wiki/896043488029600/897889638509536\n\n# 删除文件\n\nhttps://www.liaoxuefeng.com/wiki/896043488029600/900002180232448\n\n\n# 远程仓库\n\n# ssh验证\n\n使本机能关联远程仓库，首次需要ssh验证\n\n * 第1步：创建ssh key。在用户主（c:\\users\\dell）目录下，看看有没有.ssh目录， 如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。 如果没有，打开shell（windows下打开git bash），创建ssh key：\n\n# 创建ssh key\nssh-keygen -t rsa -c \"邮件地址\"\n\n\n1\n2\n\n * 第2步：登陆github，右上角头像 > settings > ssh and gpg keys >add ssh key，在key的文本框里粘贴id_rsa.pub文件的内容\n\n# 关联远程仓库\n\nssh验证完成后，在github创建仓库，创建仓库时记得取消 initialize this repository with a readme的勾选，然后在本地命令：\n\n# 关联远程仓库，仓库名一般使用origin\ngit remote add <仓库名> <远程仓库地址>\n\n# 示例\ngit remote add origin git@github.com:xugaoyi/test.git\n\n\n1\n2\n3\n4\n5\n\n\n下一步，就可以把本地库的所有内容推送到远程库上\n\n# 把文件推送到远程仓库\ngit push -u <仓库名> <分支名>\n\n# 示例\ngit push -u origin master\n\n\n1\n2\n3\n4\n5\n\n\n由于远程库是空的，我们第一次推送master分支时，加上了-u参数，git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。\n\n> 前提是目录已经git init初始化成仓库，并且git status状态是没有改动的，如果有改动则先git add .添加至缓存区，git commit -m '提交描述'提交至仓库，然后执行上面命令。\n> \n> 如创建仓库时勾选了 initialize this repository with a readme 则需先拉取readme.md文件到本地仓库git pull\n> \n> 可关联多个远程仓库，注意给不同的远程仓库取不一样的名称，提交是分别按名称提交到不一样的远程仓库。\n\n# 简化的推送命令\ngit push\n\n\n1\n2\n\n\n# 查看远程仓库\n\n# 查看远程仓库\ngit remote -v\n\n\n1\n2\n\n\n# 删除远程仓库\n\n# 删除远程仓库\ngit remote rm <仓库名>\n\n\n1\n2\n\n\n# 从远程库克隆项目\n\n# 从远程库克隆项目\ngit clone <仓库地址>\n\n\n1\n2\n\n\n# 克隆指定分支\n\n# 克隆指定分支\ngit clone -b <分支名> <仓库地址>\n\n\n1\n2\n\n\n\n# 分支管理\n\n# 创建分支\n\n# 创建分支\ngit checkout -b <分支名>\n\n\n1\n2\n\n\n# 查看分支\n\n# 查看分支\ngit branch\n\n\n1\n2\n\n\n查看分支时，在分支前带 * 号的表示当前的分支\n\n# 切换分支\n\n# 切换分支\ngit checkout <分支名>\n\n\n1\n2\n\n\n# 合并分支\n\n# 合并本地的分支\ngit merge <分支名>\n\n# 合并远程的分支\ngit merge <远程仓库名>/<分支名>\n\n\n1\n2\n3\n4\n5\n\n\n注意，是将指定分支合并到当前分支，并非当前分支合并到指定分支。\n\n一般情况下是把当前分支切换到主分支，然后把子分支合并到主分支。\n\n# 删除分支\n\n# 删除分支\ngit branch -d <分支名>\n\n\n1\n2\n\n\n# 修改分支名\n\n# 修改分支名\ngit branch -m <原分支名> <新分支名>\n\n\n1\n2\n\n\n\n# 帮助命令\n\n如对命令不清楚时，可使用git help命令显示出git命令介绍。\n\n# 帮助命令\ngit help\n\n\n1\n2\n\n\n$ git help\nusage: git [--version] [--help] [-c <path>] [-c <name>=<value>]\n           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]\n           [-p | --paginate | -p | --no-pager] [--no-replace-objects] [--bare]\n           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]\n           <command> [<args>]\n\nthese are common git commands used in various situations:\n\nstart a working area (see also: git help tutorial)\n   clone      clone a repository into a new directory\n   init       create an empty git repository or reinitialize an existing one\n\nwork on the current change (see also: git help everyday)\n   add        add file contents to the index\n   mv         move or rename a file, a directory, or a symlink\n   reset      reset current head to the specified state\n   rm         remove files from the working tree and from the index\n\nexamine the history and state (see also: git help revisions)\n   bisect     use binary search to find the commit that introduced a bug\n   grep       print lines matching a pattern\n   log        show commit logs\n   show       show various types of objects\n   status     show the working tree status\n\ngrow, mark and tweak your common history\n   branch     list, create, or delete branches\n   checkout   switch branches or restore working tree files\n   commit     record changes to the repository\n   diff       show changes between commits, commit and working tree, etc\n   merge      join two or more development histories together\n   rebase     reapply commits on top of another base tip\n   tag        create, list, delete or verify a tag object signed with gpg\n\ncollaborate (see also: git help workflows)\n   fetch      download objects and refs from another repository\n   pull       fetch from and integrate with another repository or a local branch\n   push       update remote refs along with associated objects\n\n'git help -a' and 'git help -g' list available subcommands and some\nconcept guides. see 'git help <command>' or 'git help <concept>'\nto read about a specific subcommand or concept.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n\n\n翻译工具翻译中文\n\n$ git help\n使用：git [--version] [--help] [-c <path>] [-c <name>=<value>]\n           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]\n           [-p | --paginate | -p | --no-pager] [--no-replace-objects] [--bare]\n           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]\n           <command> [<args>]\n\n这些是在各种情况下使用的通用git命令：\n\nstart a working area (参见命令: git help tutorial)\n   clone      将存储库克隆到新目录中\n   init       创建一个空的git存储库或重新初始化一个现有的存储库\n\nwork on the current change (参见命令: git help everyday)\n   add        将文件内容添加到索引中\n   mv         移动或重命名文件、目录或符号链接\n   reset      将当前磁头重置为指定状态\n   rm         从工作树和索引中删除文件\n\nexamine the history and state (参见命令: git help revisions)\n   bisect     使用二分查找查找引入错误的提交\n   grep       打印与模式匹配的行\n   log        显示提交日志\n   show       显示各种类型的对象\n   status     显示工作树状态\n\ngrow, mark and tweak your common history\n   branch     列出、创建或删除分支\n   checkout   切换分支或还原工作树文件\n   commit     记录对存储库的更改\n   diff       显示提交、提交和工作树等之间的更改\n   merge      将两个或多个开发历史连接在一起\n   rebase     在另一个基本提示之上重新应用提交\n   tag        创建、列表、删除或验证用gpg签名的标记对象\n\ncollaborate (参见命令: git help workflows)\n   fetch      从另一个存储库下载对象和引用\n   pull       从另一个存储库或本地分支获取并与之集成\n   push       更新远程引用和相关对象\n\n'git help -a' 和 'git help -g' 列出可用的子命令和一些概念指导。\n命令'git help <command>' 或 'git help <concept>' 查看特定子命令或概念.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n\n\n\n# 参考文档\n\nhttps://www.liaoxuefeng.com/wiki/896043488029600",charsets:{cjk:!0},lastUpdated:"2022/04/11, 10:49:20",lastUpdatedTimestamp:164964536e4},{title:"Markdown使用教程",frontmatter:{title:"Markdown使用教程",date:"2019-12-25T14:27:01.000Z",permalink:"/pages/ad247c4332211551",categories:["技术","技术文档"],tags:[null],author:{name:"xugaoyi",link:"https://github.com/xugaoyi"}},regularPath:"/04.%E6%8A%80%E6%9C%AF/01.%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/02.Markdown%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B.html",relativePath:"04.技术/01.技术文档/02.Markdown使用教程.md",key:"v-c9a18048",path:"/pages/ad247c4332211551/",headers:[{level:2,title:"一、Markdown",slug:"一、markdown",normalizedTitle:"一、markdown",charIndex:19},{level:3,title:"简介",slug:"简介",normalizedTitle:"简介",charIndex:34},{level:3,title:"应用",slug:"应用",normalizedTitle:"应用",charIndex:87},{level:3,title:"编辑器",slug:"编辑器",normalizedTitle:"编辑器",charIndex:152},{level:2,title:"二、徽章",slug:"二、徽章",normalizedTitle:"二、徽章",charIndex:194},{level:2,title:"三、设置目录",slug:"三、设置目录",normalizedTitle:"三、设置目录",charIndex:579},{level:2,title:"四、标题",slug:"四、标题",normalizedTitle:"四、标题",charIndex:1197},{level:2,title:"二级标题",slug:"二级标题",normalizedTitle:"二级标题",charIndex:1215},{level:3,title:"三级标题",slug:"三级标题",normalizedTitle:"三级标题",charIndex:1227},{level:2,title:"五、文本",slug:"五、文本",normalizedTitle:"五、文本",charIndex:1285},{level:3,title:"段落",slug:"段落",normalizedTitle:"段落",charIndex:1297},{level:3,title:"字体",slug:"字体",normalizedTitle:"字体",charIndex:1307},{level:3,title:"删除线",slug:"删除线",normalizedTitle:"删除线",charIndex:1317},{level:3,title:"下划线",slug:"下划线",normalizedTitle:"下划线",charIndex:1328},{level:3,title:"文字高亮",slug:"文字高亮",normalizedTitle:"文字高亮",charIndex:1339},{level:3,title:"分隔线",slug:"分隔线",normalizedTitle:"分隔线",charIndex:1351},{level:3,title:"脚注",slug:"脚注",normalizedTitle:"脚注",charIndex:1362},{level:2,title:"六、列表",slug:"六、列表",normalizedTitle:"六、列表",charIndex:1370},{level:3,title:"无序列表",slug:"无序列表",normalizedTitle:"无序列表",charIndex:1382},{level:3,title:"有序列表",slug:"有序列表",normalizedTitle:"有序列表",charIndex:1394},{level:3,title:"折叠列表",slug:"折叠列表",normalizedTitle:"折叠列表",charIndex:1406},{level:3,title:"带复选框列表",slug:"带复选框列表",normalizedTitle:"带复选框列表",charIndex:1418},{level:3,title:"列表嵌套",slug:"列表嵌套",normalizedTitle:"列表嵌套",charIndex:1432},{level:2,title:"七、区块引用",slug:"七、区块引用",normalizedTitle:"七、区块引用",charIndex:1442},{level:2,title:"八、代码",slug:"八、代码",normalizedTitle:"八、代码",charIndex:1496},{level:3,title:"代码区块",slug:"代码区块",normalizedTitle:"代码区块",charIndex:1508},{level:2,title:"九、链接",slug:"九、链接",normalizedTitle:"九、链接",charIndex:1518},{level:3,title:"变量链接",slug:"变量链接",normalizedTitle:"变量链接",charIndex:1530},{level:3,title:"Github仓库中使用内部链接",slug:"github仓库中使用内部链接",normalizedTitle:"github仓库中使用内部链接",charIndex:4923},{level:3,title:"锚点链接",slug:"锚点链接",normalizedTitle:"锚点链接",charIndex:1563},{level:2,title:"十、图片",slug:"十、图片",normalizedTitle:"十、图片",charIndex:1573},{level:3,title:"图片宽高",slug:"图片宽高",normalizedTitle:"图片宽高",charIndex:1585},{level:3,title:"相对路径以及Github中使用图片",slug:"相对路径以及github中使用图片",normalizedTitle:"相对路径以及github中使用图片",charIndex:1597},{level:2,title:"十一、表格",slug:"十一、表格",normalizedTitle:"十一、表格",charIndex:1620},{level:2,title:"十二、Emoji表情包",slug:"十二、emoji表情包",normalizedTitle:"十二、emoji表情包",charIndex:1631},{level:2,title:"十三、其他技巧",slug:"十三、其他技巧",normalizedTitle:"十三、其他技巧",charIndex:1648},{level:3,title:"支持的 HTML 元素",slug:"支持的-html-元素",normalizedTitle:"支持的 html 元素",charIndex:1663},{level:3,title:"转义",slug:"转义",normalizedTitle:"转义",charIndex:1682},{level:3,title:"数学公式",slug:"数学公式",normalizedTitle:"数学公式",charIndex:1692},{level:3,title:"图表",slug:"图表",normalizedTitle:"图表",charIndex:1704},{level:3,title:"流程图",slug:"流程图",normalizedTitle:"流程图",charIndex:1714},{level:3,title:"时序图",slug:"时序图",normalizedTitle:"时序图",charIndex:1725},{level:3,title:"甘特图",slug:"甘特图",normalizedTitle:"甘特图",charIndex:1736}],excerpt:'<h1 id="markdown使用教程"><a class="header-anchor" href="#markdown使用教程">#</a> Markdown使用教程</h1>\n<h2 id="一、markdown"><a class="header-anchor" href="#一、markdown">#</a> 一、Markdown</h2>\n<h3 id="简介"><a class="header-anchor" href="#简介">#</a> 简介</h3>\n<p><img src="https://raw.githubusercontent.com/xugaoyi/image_store/master/blog/md_logo.png" alt="logo"></p>\n<p><code>Markdown</code> 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。</p>\n',headersStr:"一、Markdown 简介 应用 编辑器 二、徽章 三、设置目录 四、标题 二级标题 三级标题 五、文本 段落 字体 删除线 下划线 文字高亮 分隔线 脚注 六、列表 无序列表 有序列表 折叠列表 带复选框列表 列表嵌套 七、区块引用 八、代码 代码区块 九、链接 变量链接 Github仓库中使用内部链接 锚点链接 十、图片 图片宽高 相对路径以及Github中使用图片 十一、表格 十二、Emoji表情包 十三、其他技巧 支持的 HTML 元素 转义 数学公式 图表 流程图 时序图 甘特图",content:"# Markdown使用教程\n\n\n# 一、Markdown\n\n\n# 简介\n\n\n\nMarkdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。\n\n\n# 应用\n\n当前许多网站都广泛使用 Markdown 来撰写帮助文档或是用于论坛上发表消息。例如：GitHub、简书、知乎等\n\n\n# 编辑器\n\n推荐使用Typora，官网：https://typora.io/\n\n\n# 二、徽章\n\n# 什么是徽章\n\n徽章是一种小巧精美的小图标，一般配有相关文字进行辅助说明，可对数据进行监控，链接跳转等，富有表现力。\n\n常见于github项目主页，但其不仅出现于 github 项目主页，凡是能够表现图片的地方都可以出现徽章。\n\n# 徽章的使用\n\n * 在markdown中使用\n\n格式:\n[![图片文字说明](图片源地址)](超链接地址)  # 即超链接内部嵌套图片\n\n语法：\n[![github](https://img.shields.io/badge/github-xugaoyi-brightgreen.svg)](https://github.com/xugaoyi)\n\n\n1\n2\n3\n4\n5\n\n\n\n\n徽章生成网站：https://shields.io/\n\n本文档主要介绍markdown，不对徽章做过多介绍，详细介绍请 戳我 了解。\n\n\n# 三、设置目录\n\n设置之后会根据分级标题来自动生成目录。\n\n[TOC]\n\n\n1\n\n\n> 注：github暂未支持。\n\n[TOC]\n\n在github生成TOC的方法：https://github.com/ekalinin/github-markdown-toc\n\nwindows系统需要基于golang实现的工具：https://github.com/ekalinin/github-markdown-toc.go\n\n> 如果你有GO语言的编译环境，可以尝试自己编译，如果没有，可以直接下载编译好的二进制文件。\n> \n> 如windows系统64位 下载：gh-md-toc.windows.amd64.tgz （386 是32位，amd64是64位）\n> \n> 下载解压后，发现没有后缀名无法识别，实际上这是个exe文件，所以只需要暴力地在后面加上.exe就可以开始愉快使用了。\n> \n> 使用方法：\n> \n>  1. 首先将.md文档复制到gh-md-toc.exe的根目录下\n>  2. 在该目录下打开系统命令行，输入命令：gh-md-toc.exe README.MD 生成目录\n>  3. 把生成的目录复制到.md文件即可。\n\n这是gh-md-toc生成的目录：\n\n * 一、Markdown\n   * 简介\n   * 应用\n   * 编辑器\n * 二、徽章\n   * 什么是徽章\n   * 徽章的使用\n * 三、设置目录\n * 四、标题\n * 一级标题\n   * 二级标题\n     * 三级标题\n       * 四级标题\n         * 五级标题\n           * 六级标题\n   * 五、文本\n     * 段落\n     * 字体\n     * 删除线\n     * 下划线\n     * 文字高亮\n     * 分隔线\n     * 脚注\n   * 六、列表\n     * 无序列表\n     * 有序列表\n     * 折叠列表\n     * 带复选框列表\n     * 列表嵌套\n   * 七、区块引用\n     * 区块嵌套\n     * 区块中使用列表\n     * 列表中使用区块\n   * 八、代码\n     * 代码区块\n   * 九、链接\n     * 变量链接\n     * Github中使用内部链接\n     * 锚点链接\n   * 十、图片\n     * 图片宽高\n     * 相对路径以及Github中使用图片\n   * 十一、表格\n   * 十二、Emoji表情包\n   * 十三、其他技巧\n     * 支持的 HTML 元素\n     * 转义\n     * 数学公式\n     * 图表\n     * 流程图\n     * 时序图\n     * 甘特图\n\n\n# 四、标题\n\n# 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n##### 五级标题\n###### 六级标题\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 一级标题\n\n\n# 二级标题\n\n\n# 三级标题\n\n# 四级标题\n\n# 五级标题\n\n# 六级标题\n\n\n# 五、文本\n\n\n# 段落\n\nMarkdown 段落没有特殊的格式，直接编写文字，需要段落缩进时使用2个Tab\n\n\n# 字体\n\n*斜体文本*\n或 _斜体文本_\n**粗体文本**\n或  __粗体文本__\n***粗斜体文本***\n或 ___粗斜体文本___\n\n\n1\n2\n3\n4\n5\n6\n\n\n斜体文本\n\n斜体文本\n\n粗体文本\n\n粗体文本\n\n粗斜体文本\n\n粗斜体文本\n\n\n# 删除线\n\n如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 ~~ 即可，实例如下：\n\n~~BAIDU.COM~~\n\n\n1\n\n\nBAIDU.COM\n\n\n# 下划线\n\n下划线可以通过 HTML 的<u> 标签来实现：\n\n<u>带下划线的文本</u>\n\n\n1\n\n\n带下划线的文本\n\n\n# 文字高亮\n\n文字高亮能使行内部分文字高亮，使用一对反引号。\n\n`html` `css` `javascript`\n\n\n1\n\n\nhtml css javascript\n\n\n# 分隔线\n\n你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：\n\n***\n\n*****\n\n- - -\n\n----------\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n----------------------------------------\n\n\n# 脚注\n\n脚注是对文本的补充说明。\n\n[^变量]\n在文档结尾或其他位置給变量赋值：\n[^变量]: 注明框内显示的内容\n\n鼠标移到这里> [^哈喽]\n[^哈喽]: 注明框内显示的内容\n\n\n1\n2\n3\n4\n5\n6\n\n\n> 注：在部分线上预览未支持\n\n鼠标移到这里> ^哈喽\n\n\n# 六、列表\n\n\n# 无序列表\n\n使用星号*、加号+或是减号-作为列表标记：\n\n* 第一项\n* 第二项\n\n+ 第一项\n+ 第二项\n\n- 第一项\n- 第二项\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n * 第一项\n * 第二项\n\n\n# 有序列表\n\n使用数字并加上. 号来表示\n\n1. 第一项\n2. 第二项\n\n\n1\n2\n\n 1. 第一项\n 2. 第二项\n\n\n# 折叠列表\n\n<details>\n<summary>点我打开关闭折叠</summary>\n 折叠内容\n <ul>\n     <li>1</li>\n     <li>2</li>\n     <li>3</li>\n </ul>\n</details>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n> 注意：<details> 标签内写markdown代码无效，可写html代码，如ul>li、table等\n\n点我打开关闭折叠 折叠内容\n * 1\n * 2\n * 3\n\n包含table的折叠\n\n分类        例词\n人称代词-主格   I我，you你，he他，she她，they他们， we我们\n人称代词-宾格   me我， you你， him他， her她， them他们， us我们\n物主代词      my我的， his他的， your你的（your你们的）， their他们的， hers她的\n指示代词      this这， that那， these这些， those 那些\n反身代词      myself我自己， himself他自己， themselves他们自己，\n          yourself你(们)自己，herself她自己\n疑问代词      who谁， what什么， which哪个\n不定代词      some一些， many许多， both两个、两个都， any许多\n关系代词      which……的物， who……的人， that……的人或物， who谁， that引导定语从句\n相互代词      each other 互相， one another互相\n连接代词      who,whom,whose,what,which,whatever,whichever,whoever,whomever\n替代词       one（单数），ones（复数）\n\n\n# 带复选框列表\n\n* [x] 第一项\n* [ ] 第二项\n* [ ] 第三项\n\n\n1\n2\n3\n\n\n> 注：在部分线上预览未支持\n\n * [x] 第一项\n\n * [ ] 第二项\n\n * [ ] 第三项\n\n\n# 列表嵌套\n\n1. 第一项：\n    - 第一项嵌套的第一个元素\n    - 第一项嵌套的第二个元素\n2. 第二项：\n    - 第二项嵌套的第一个元素\n       - 第三层嵌套\n\n\n1\n2\n3\n4\n5\n6\n\n 1. 第一项\n    * 嵌套1\n    * 嵌套2\n 2. 第二项\n    * 嵌套1\n      * 嵌套2\n\n\n# 七、区块引用\n\n区块引用是在段落开头使用 >符号 ，然后后面紧跟一个空格符号：\n\n> 区块引用\n\n\n1\n\n\n> 区块引用\n> \n> Typora中回车键自动延伸区块\n\n# 区块嵌套\n\n> 第一层\n> > 第二层\n> > > 第三层\n\n\n1\n2\n3\n\n\n> 第一层\n> \n> > 第二层\n> > \n> > > 第三层\n\n# 区块中使用列表\n\n> 区块中使用列表\n> 1. 第一项\n> 2. 第二项\n> * 111\n> * 222\n\n\n1\n2\n3\n4\n5\n\n\n> 区块中使用列表\n> \n>  1. 第一项\n>  2. 第二项\n>     * 111\n>     * 222\n\n# 列表中使用区块\n\n* 第一项\n    > 区块\n* 第二项\n\n\n1\n2\n3\n\n\n * 第一项\n   \n   > 区块\n   > \n   > 区块\n\n * 第二项\n\n\n# 八、代码\n\n如果是段落上的一个代码片段可以用反引号把它包起来（`），示例：\n\n`alert()`\n\n\n1\n\n\nalert()\n\n\n# 代码区块\n\n用三个反引号 ``` 包裹一段代码，并指定一种语言（也可以不指定），指定代码语言后会有代码的颜色高亮\n\n本代码区块为示例说明：\n\n​```javascript\nfunction test() {\n\talert('test')\n}\n​```\n\n\n1\n2\n3\n4\n5\n\n\n效果：\n\nfunction test() {\n\talert('test')\n}\n\n\n1\n2\n3\n\n\n\n# 九、链接\n\n格式：\n\n[链接名称](链接地址)\n\n[链接名称](链接地址,可选的alt)\n\n或\n\n<链接地址>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n示例：\n\n[百度](http://www.baidu.com,'百度')\n\n\n1\n\n\n百度\n\n直接显示链接地址：\n\n<http://www.baidu.com>\n\n\n1\n\n\nhttp://www.baidu.com\n\n\n# 变量链接\n\n链接可以用变量来代替，文档末尾或其他位置附带变量地址：\n\n这个链接用 1 作为网址变量 [Google][1]\n这个链接用 baidu 作为网址变量 [Baidu][baidu]\n\n然后在文档的结尾或其他位置给变量赋值（网址）\n  [1]: http://www.google.com/\n  [baidu]: http://www.baidu.com/\n\n\n1\n2\n3\n4\n5\n6\n\n\n这个链接用 1 作为网址变量 Google\n\n这个链接用 baidu 作为网址变量 Baidu\n\n\n# Github仓库中使用内部链接\n\n可使用相对路径（前提是有该路径下的文件）\n[test](test.md)\n\n\n1\n2\n\n\ntest\n\n\n# 锚点链接\n\n本文件中每一个标题都是一个锚点，和HTML的锚点（#）类似\n\n[Markdown](#Markdown)\n\n\n1\n\n\n> 注： github对含有标点符号的标题进行锚点时会忽略掉标点符号， 本页中，如果这样写则无法跳转：[链接](#九、链接) 正确写法：[链接](#九链接)\n\nMarkdown\n\n链接\n\n流程图\n\n\n# 十、图片\n\n和链接的区别是前面多一个感叹号!\n\n![图片名](图片链接)\n\n\n1\n\n\n当然，你也可以像链接那样对图片地址使用变量:\n\n这里链接用 img 作为图片地址变量\n然后在文档的结尾或其他位置给变量赋值（图片地址）\n![RUNOOB][img]\n[img]: https://raw.githubusercontent.com/xugaoyi/image_store/master/blog/md_logo.png\n\n\n1\n2\n3\n4\n\n\n\n\n\n# 图片宽高\n\n如下想设置图片宽高，可以使用 <img> 标签。\n\n<img src=\"https://raw.githubusercontent.com/xugaoyi/image_store/master/blog/md_logo.png\" width=\"50px\" height=\"30px\">\n\n\n1\n\n\n\n# 相对路径以及Github中使用图片\n\n不管是在本地还是在github同一个仓库中，如果图片存在，可以使用相对路径。\n\n相对路径图片：\n\n![头像图片](./md-img/test.jpg)\n\n\n1\n\n\ngithub上如果引用其他github仓库中的图片则要注意地址格式：仓库地址/raw/分支名/图片路径 或 https://raw.githubusercontent.com/用户名/仓库名/分支名/图片路径\n\n![其他仓库的图片1](https://github.com/xugaoyi/vue-music/raw/master/src/common/image/default.png)\n或\n![其他仓库的图片2](https://raw.githubusercontent.com/xugaoyi/image_store/master/blog/md_logo.png)\n\n\n\n1\n2\n3\n4\n\n\n\n\n\n\n\n# 十一、表格\n\n制作表格使用 |来分隔不同的单元格，使用-来分隔表头和其他行。\n\n|  表头   | 表头  |\n|  ----  | ----  |\n| 单元格  | 单元格 |\n| 单元格  | 单元格 |\n\n\n1\n2\n3\n4\n\n\n表头    表头\n单元格   单元格\n单元格   单元格\n\n对齐方式\n\n * -: 设置内容和标题栏居右对齐\n * :- 设置内容和标题栏居左对齐\n * :-: 设置内容和标题栏居中对齐\n\n| 左对齐 | 右对齐 | 居中对齐 |\n| :-----| ----: | :----: |\n| 单元格 | 单元格 | 单元格 |\n| 单元格 | 单元格 | 单元格 |\n\n\n1\n2\n3\n4\n\n\n左对齐   右对齐   居中对齐\n单元格   单元格   单元格\n单元格   单元格   单元格\n\n\n# 十二、Emoji表情包\n\nEmoji表情英文名的前后加冒号，Typore上先输入冒号再输入首字母有表情提示\n\n:smirk:\n\n\n1\n\n\n💋 😸🙈🐴 😏😊😃😄 ☀️\n\n更多表情名称请查看：表情包清单\n\n\n# 十三、其他技巧\n\n\n# 支持的 HTML 元素\n\n不在 Markdown 语法涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。\n\n目前支持的 HTML 元素有：<kbd> <b> <i> <em> <sup> <sub> <br>等等 ，如：\n\n使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑\n\n\n1\n\n\n使用 Ctrl+Alt+Del 重启电脑\n\n我是使用b标签的加粗字体\n\n\n# 转义\n\nMarkdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用反斜杠转义字符：\n\n**未转义星号显示加粗**\n\\*\\* 转义显示星号 \\*\\*\n\n\n1\n2\n\n\n未转义星号显示加粗 ** 转义显示星号 **\n\nMarkdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：\n\n\\   反斜线\n`   反引号\n*   星号\n_   下划线\n{}  花括号\n[]  方括号\n()  小括号\n#   井字号\n+   加号\n-   减号\n.   英文句点\n!   感叹号\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n----------------------------------------\n\n*** 以下部分在Github或其他在线预览中暂未支持 ***\n\n----------------------------------------\n\n\n# 数学公式\n\n当你需要在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 Mathjax 对数学公式进行渲染。如：\n\n$$\n\\mathbf{V}_1 \\times \\mathbf{V}_2 =  \\begin{vmatrix}\n\\mathbf{i} & \\mathbf{j} & \\mathbf{k} \\\\\n\\frac{\\partial X}{\\partial u} &  \\frac{\\partial Y}{\\partial u} & 0 \\\\\n\\frac{\\partial X}{\\partial v} &  \\frac{\\partial Y}{\\partial v} & 0 \\\\\n\\end{vmatrix}\n$$tep1}{\\style{visibility:hidden}{(x+1)(x+1)}}\n$$\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n$$ \\mathbf{V}_1 \\times \\mathbf{V}_2 = \\begin{vmatrix} \\mathbf{i} & \\mathbf{j} & \\mathbf{k} \\ \\frac{\\partial X}{\\partial u} & \\frac{\\partial Y}{\\partial u} & 0 \\ \\frac{\\partial X}{\\partial v} & \\frac{\\partial Y}{\\partial v} & 0 \\ \\end{vmatrix} $$\n\n\n# 图表\n\n​```chart\n,Budget,Income,Expenses,Debt\nJune,5000,8000,4000,6000\nJuly,3000,1000,4000,3000\nAug,5000,7000,6000,3000\nSep,7000,2000,3000,1000\nOct,6000,5000,4000,2000\nNov,4000,3000,5000,\n\ntype: pie\ntitle: Monthly Revenue\nx.title: Amount\ny.title: Month\ny.suffix: $\n​```\n​```mermaid\nsequenceDiagram\nA->>B: 是否已收到消息？\nB--\x3e>A: 已收到消息\n​```\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n> 注：在Typora中未支持\n\n\n# 流程图\n\n语法：\n​```mermaid\ngraph TD\nA[模块A] --\x3e|A1| B(模块B)\nB --\x3e C{判断条件C}\nC --\x3e|条件C1| D[模块D]\nC --\x3e|条件C2| E[模块E]\nC --\x3e|条件C3| F[模块F]\n​```\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n流程图相关文章：\n\nhttps://www.jianshu.com/p/b421cc723da5\n\nhttp://www.imooc.com/article/292708\n\n\n# 时序图\n\n​```mermaid\nsequenceDiagram\nA->>B: 是否已收到消息？\nB--\x3e>A: 已收到消息\n​```\n\n\n1\n2\n3\n4\n5\n\n\n\n# 甘特图\n\n​```mermaid\ngantt\ntitle 甘特图\ndateFormat  YYYY-MM-DD\nsection 项目A\n任务1           :a1, 2018-06-06, 30d\n任务2     :after a1  , 20d\nsection 项目B\n任务3      :2018-06-12  , 12d\n任务4      : 24d\n​```\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n回到顶部",normalizedContent:"# markdown使用教程\n\n\n# 一、markdown\n\n\n# 简介\n\n\n\nmarkdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。\n\n\n# 应用\n\n当前许多网站都广泛使用 markdown 来撰写帮助文档或是用于论坛上发表消息。例如：github、简书、知乎等\n\n\n# 编辑器\n\n推荐使用typora，官网：https://typora.io/\n\n\n# 二、徽章\n\n# 什么是徽章\n\n徽章是一种小巧精美的小图标，一般配有相关文字进行辅助说明，可对数据进行监控，链接跳转等，富有表现力。\n\n常见于github项目主页，但其不仅出现于 github 项目主页，凡是能够表现图片的地方都可以出现徽章。\n\n# 徽章的使用\n\n * 在markdown中使用\n\n格式:\n[![图片文字说明](图片源地址)](超链接地址)  # 即超链接内部嵌套图片\n\n语法：\n[![github](https://img.shields.io/badge/github-xugaoyi-brightgreen.svg)](https://github.com/xugaoyi)\n\n\n1\n2\n3\n4\n5\n\n\n\n\n徽章生成网站：https://shields.io/\n\n本文档主要介绍markdown，不对徽章做过多介绍，详细介绍请 戳我 了解。\n\n\n# 三、设置目录\n\n设置之后会根据分级标题来自动生成目录。\n\n[toc]\n\n\n1\n\n\n> 注：github暂未支持。\n\n[toc]\n\n在github生成toc的方法：https://github.com/ekalinin/github-markdown-toc\n\nwindows系统需要基于golang实现的工具：https://github.com/ekalinin/github-markdown-toc.go\n\n> 如果你有go语言的编译环境，可以尝试自己编译，如果没有，可以直接下载编译好的二进制文件。\n> \n> 如windows系统64位 下载：gh-md-toc.windows.amd64.tgz （386 是32位，amd64是64位）\n> \n> 下载解压后，发现没有后缀名无法识别，实际上这是个exe文件，所以只需要暴力地在后面加上.exe就可以开始愉快使用了。\n> \n> 使用方法：\n> \n>  1. 首先将.md文档复制到gh-md-toc.exe的根目录下\n>  2. 在该目录下打开系统命令行，输入命令：gh-md-toc.exe readme.md 生成目录\n>  3. 把生成的目录复制到.md文件即可。\n\n这是gh-md-toc生成的目录：\n\n * 一、markdown\n   * 简介\n   * 应用\n   * 编辑器\n * 二、徽章\n   * 什么是徽章\n   * 徽章的使用\n * 三、设置目录\n * 四、标题\n * 一级标题\n   * 二级标题\n     * 三级标题\n       * 四级标题\n         * 五级标题\n           * 六级标题\n   * 五、文本\n     * 段落\n     * 字体\n     * 删除线\n     * 下划线\n     * 文字高亮\n     * 分隔线\n     * 脚注\n   * 六、列表\n     * 无序列表\n     * 有序列表\n     * 折叠列表\n     * 带复选框列表\n     * 列表嵌套\n   * 七、区块引用\n     * 区块嵌套\n     * 区块中使用列表\n     * 列表中使用区块\n   * 八、代码\n     * 代码区块\n   * 九、链接\n     * 变量链接\n     * github中使用内部链接\n     * 锚点链接\n   * 十、图片\n     * 图片宽高\n     * 相对路径以及github中使用图片\n   * 十一、表格\n   * 十二、emoji表情包\n   * 十三、其他技巧\n     * 支持的 html 元素\n     * 转义\n     * 数学公式\n     * 图表\n     * 流程图\n     * 时序图\n     * 甘特图\n\n\n# 四、标题\n\n# 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n##### 五级标题\n###### 六级标题\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 一级标题\n\n\n# 二级标题\n\n\n# 三级标题\n\n# 四级标题\n\n# 五级标题\n\n# 六级标题\n\n\n# 五、文本\n\n\n# 段落\n\nmarkdown 段落没有特殊的格式，直接编写文字，需要段落缩进时使用2个tab\n\n\n# 字体\n\n*斜体文本*\n或 _斜体文本_\n**粗体文本**\n或  __粗体文本__\n***粗斜体文本***\n或 ___粗斜体文本___\n\n\n1\n2\n3\n4\n5\n6\n\n\n斜体文本\n\n斜体文本\n\n粗体文本\n\n粗体文本\n\n粗斜体文本\n\n粗斜体文本\n\n\n# 删除线\n\n如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 ~~ 即可，实例如下：\n\n~~baidu.com~~\n\n\n1\n\n\nbaidu.com\n\n\n# 下划线\n\n下划线可以通过 html 的<u> 标签来实现：\n\n<u>带下划线的文本</u>\n\n\n1\n\n\n带下划线的文本\n\n\n# 文字高亮\n\n文字高亮能使行内部分文字高亮，使用一对反引号。\n\n`html` `css` `javascript`\n\n\n1\n\n\nhtml css javascript\n\n\n# 分隔线\n\n你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：\n\n***\n\n*****\n\n- - -\n\n----------\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n----------------------------------------\n\n\n# 脚注\n\n脚注是对文本的补充说明。\n\n[^变量]\n在文档结尾或其他位置給变量赋值：\n[^变量]: 注明框内显示的内容\n\n鼠标移到这里> [^哈喽]\n[^哈喽]: 注明框内显示的内容\n\n\n1\n2\n3\n4\n5\n6\n\n\n> 注：在部分线上预览未支持\n\n鼠标移到这里> ^哈喽\n\n\n# 六、列表\n\n\n# 无序列表\n\n使用星号*、加号+或是减号-作为列表标记：\n\n* 第一项\n* 第二项\n\n+ 第一项\n+ 第二项\n\n- 第一项\n- 第二项\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n * 第一项\n * 第二项\n\n\n# 有序列表\n\n使用数字并加上. 号来表示\n\n1. 第一项\n2. 第二项\n\n\n1\n2\n\n 1. 第一项\n 2. 第二项\n\n\n# 折叠列表\n\n<details>\n<summary>点我打开关闭折叠</summary>\n 折叠内容\n <ul>\n     <li>1</li>\n     <li>2</li>\n     <li>3</li>\n </ul>\n</details>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n> 注意：<details> 标签内写markdown代码无效，可写html代码，如ul>li、table等\n\n点我打开关闭折叠 折叠内容\n * 1\n * 2\n * 3\n\n包含table的折叠\n\n分类        例词\n人称代词-主格   i我，you你，he他，she她，they他们， we我们\n人称代词-宾格   me我， you你， him他， her她， them他们， us我们\n物主代词      my我的， his他的， your你的（your你们的）， their他们的， hers她的\n指示代词      this这， that那， these这些， those 那些\n反身代词      myself我自己， himself他自己， themselves他们自己，\n          yourself你(们)自己，herself她自己\n疑问代词      who谁， what什么， which哪个\n不定代词      some一些， many许多， both两个、两个都， any许多\n关系代词      which……的物， who……的人， that……的人或物， who谁， that引导定语从句\n相互代词      each other 互相， one another互相\n连接代词      who,whom,whose,what,which,whatever,whichever,whoever,whomever\n替代词       one（单数），ones（复数）\n\n\n# 带复选框列表\n\n* [x] 第一项\n* [ ] 第二项\n* [ ] 第三项\n\n\n1\n2\n3\n\n\n> 注：在部分线上预览未支持\n\n * [x] 第一项\n\n * [ ] 第二项\n\n * [ ] 第三项\n\n\n# 列表嵌套\n\n1. 第一项：\n    - 第一项嵌套的第一个元素\n    - 第一项嵌套的第二个元素\n2. 第二项：\n    - 第二项嵌套的第一个元素\n       - 第三层嵌套\n\n\n1\n2\n3\n4\n5\n6\n\n 1. 第一项\n    * 嵌套1\n    * 嵌套2\n 2. 第二项\n    * 嵌套1\n      * 嵌套2\n\n\n# 七、区块引用\n\n区块引用是在段落开头使用 >符号 ，然后后面紧跟一个空格符号：\n\n> 区块引用\n\n\n1\n\n\n> 区块引用\n> \n> typora中回车键自动延伸区块\n\n# 区块嵌套\n\n> 第一层\n> > 第二层\n> > > 第三层\n\n\n1\n2\n3\n\n\n> 第一层\n> \n> > 第二层\n> > \n> > > 第三层\n\n# 区块中使用列表\n\n> 区块中使用列表\n> 1. 第一项\n> 2. 第二项\n> * 111\n> * 222\n\n\n1\n2\n3\n4\n5\n\n\n> 区块中使用列表\n> \n>  1. 第一项\n>  2. 第二项\n>     * 111\n>     * 222\n\n# 列表中使用区块\n\n* 第一项\n    > 区块\n* 第二项\n\n\n1\n2\n3\n\n\n * 第一项\n   \n   > 区块\n   > \n   > 区块\n\n * 第二项\n\n\n# 八、代码\n\n如果是段落上的一个代码片段可以用反引号把它包起来（`），示例：\n\n`alert()`\n\n\n1\n\n\nalert()\n\n\n# 代码区块\n\n用三个反引号 ``` 包裹一段代码，并指定一种语言（也可以不指定），指定代码语言后会有代码的颜色高亮\n\n本代码区块为示例说明：\n\n​```javascript\nfunction test() {\n\talert('test')\n}\n​```\n\n\n1\n2\n3\n4\n5\n\n\n效果：\n\nfunction test() {\n\talert('test')\n}\n\n\n1\n2\n3\n\n\n\n# 九、链接\n\n格式：\n\n[链接名称](链接地址)\n\n[链接名称](链接地址,可选的alt)\n\n或\n\n<链接地址>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n示例：\n\n[百度](http://www.baidu.com,'百度')\n\n\n1\n\n\n百度\n\n直接显示链接地址：\n\n<http://www.baidu.com>\n\n\n1\n\n\nhttp://www.baidu.com\n\n\n# 变量链接\n\n链接可以用变量来代替，文档末尾或其他位置附带变量地址：\n\n这个链接用 1 作为网址变量 [google][1]\n这个链接用 baidu 作为网址变量 [baidu][baidu]\n\n然后在文档的结尾或其他位置给变量赋值（网址）\n  [1]: http://www.google.com/\n  [baidu]: http://www.baidu.com/\n\n\n1\n2\n3\n4\n5\n6\n\n\n这个链接用 1 作为网址变量 google\n\n这个链接用 baidu 作为网址变量 baidu\n\n\n# github仓库中使用内部链接\n\n可使用相对路径（前提是有该路径下的文件）\n[test](test.md)\n\n\n1\n2\n\n\ntest\n\n\n# 锚点链接\n\n本文件中每一个标题都是一个锚点，和html的锚点（#）类似\n\n[markdown](#markdown)\n\n\n1\n\n\n> 注： github对含有标点符号的标题进行锚点时会忽略掉标点符号， 本页中，如果这样写则无法跳转：[链接](#九、链接) 正确写法：[链接](#九链接)\n\nmarkdown\n\n链接\n\n流程图\n\n\n# 十、图片\n\n和链接的区别是前面多一个感叹号!\n\n![图片名](图片链接)\n\n\n1\n\n\n当然，你也可以像链接那样对图片地址使用变量:\n\n这里链接用 img 作为图片地址变量\n然后在文档的结尾或其他位置给变量赋值（图片地址）\n![runoob][img]\n[img]: https://raw.githubusercontent.com/xugaoyi/image_store/master/blog/md_logo.png\n\n\n1\n2\n3\n4\n\n\n\n\n\n# 图片宽高\n\n如下想设置图片宽高，可以使用 <img> 标签。\n\n<img src=\"https://raw.githubusercontent.com/xugaoyi/image_store/master/blog/md_logo.png\" width=\"50px\" height=\"30px\">\n\n\n1\n\n\n\n# 相对路径以及github中使用图片\n\n不管是在本地还是在github同一个仓库中，如果图片存在，可以使用相对路径。\n\n相对路径图片：\n\n![头像图片](./md-img/test.jpg)\n\n\n1\n\n\ngithub上如果引用其他github仓库中的图片则要注意地址格式：仓库地址/raw/分支名/图片路径 或 https://raw.githubusercontent.com/用户名/仓库名/分支名/图片路径\n\n![其他仓库的图片1](https://github.com/xugaoyi/vue-music/raw/master/src/common/image/default.png)\n或\n![其他仓库的图片2](https://raw.githubusercontent.com/xugaoyi/image_store/master/blog/md_logo.png)\n\n\n\n1\n2\n3\n4\n\n\n\n\n\n\n\n# 十一、表格\n\n制作表格使用 |来分隔不同的单元格，使用-来分隔表头和其他行。\n\n|  表头   | 表头  |\n|  ----  | ----  |\n| 单元格  | 单元格 |\n| 单元格  | 单元格 |\n\n\n1\n2\n3\n4\n\n\n表头    表头\n单元格   单元格\n单元格   单元格\n\n对齐方式\n\n * -: 设置内容和标题栏居右对齐\n * :- 设置内容和标题栏居左对齐\n * :-: 设置内容和标题栏居中对齐\n\n| 左对齐 | 右对齐 | 居中对齐 |\n| :-----| ----: | :----: |\n| 单元格 | 单元格 | 单元格 |\n| 单元格 | 单元格 | 单元格 |\n\n\n1\n2\n3\n4\n\n\n左对齐   右对齐   居中对齐\n单元格   单元格   单元格\n单元格   单元格   单元格\n\n\n# 十二、emoji表情包\n\nemoji表情英文名的前后加冒号，typore上先输入冒号再输入首字母有表情提示\n\n:smirk:\n\n\n1\n\n\n💋 😸🙈🐴 😏😊😃😄 ☀️\n\n更多表情名称请查看：表情包清单\n\n\n# 十三、其他技巧\n\n\n# 支持的 html 元素\n\n不在 markdown 语法涵盖范围之内的标签，都可以直接在文档里面用 html 撰写。\n\n目前支持的 html 元素有：<kbd> <b> <i> <em> <sup> <sub> <br>等等 ，如：\n\n使用 <kbd>ctrl</kbd>+<kbd>alt</kbd>+<kbd>del</kbd> 重启电脑\n\n\n1\n\n\n使用 ctrl+alt+del 重启电脑\n\n我是使用b标签的加粗字体\n\n\n# 转义\n\nmarkdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用反斜杠转义字符：\n\n**未转义星号显示加粗**\n\\*\\* 转义显示星号 \\*\\*\n\n\n1\n2\n\n\n未转义星号显示加粗 ** 转义显示星号 **\n\nmarkdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：\n\n\\   反斜线\n`   反引号\n*   星号\n_   下划线\n{}  花括号\n[]  方括号\n()  小括号\n#   井字号\n+   加号\n-   减号\n.   英文句点\n!   感叹号\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n----------------------------------------\n\n*** 以下部分在github或其他在线预览中暂未支持 ***\n\n----------------------------------------\n\n\n# 数学公式\n\n当你需要在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 tex 或 latex 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 mathjax 对数学公式进行渲染。如：\n\n$$\n\\mathbf{v}_1 \\times \\mathbf{v}_2 =  \\begin{vmatrix}\n\\mathbf{i} & \\mathbf{j} & \\mathbf{k} \\\\\n\\frac{\\partial x}{\\partial u} &  \\frac{\\partial y}{\\partial u} & 0 \\\\\n\\frac{\\partial x}{\\partial v} &  \\frac{\\partial y}{\\partial v} & 0 \\\\\n\\end{vmatrix}\n$$tep1}{\\style{visibility:hidden}{(x+1)(x+1)}}\n$$\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n$$ \\mathbf{v}_1 \\times \\mathbf{v}_2 = \\begin{vmatrix} \\mathbf{i} & \\mathbf{j} & \\mathbf{k} \\ \\frac{\\partial x}{\\partial u} & \\frac{\\partial y}{\\partial u} & 0 \\ \\frac{\\partial x}{\\partial v} & \\frac{\\partial y}{\\partial v} & 0 \\ \\end{vmatrix} $$\n\n\n# 图表\n\n​```chart\n,budget,income,expenses,debt\njune,5000,8000,4000,6000\njuly,3000,1000,4000,3000\naug,5000,7000,6000,3000\nsep,7000,2000,3000,1000\noct,6000,5000,4000,2000\nnov,4000,3000,5000,\n\ntype: pie\ntitle: monthly revenue\nx.title: amount\ny.title: month\ny.suffix: $\n​```\n​```mermaid\nsequencediagram\na->>b: 是否已收到消息？\nb--\x3e>a: 已收到消息\n​```\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n> 注：在typora中未支持\n\n\n# 流程图\n\n语法：\n​```mermaid\ngraph td\na[模块a] --\x3e|a1| b(模块b)\nb --\x3e c{判断条件c}\nc --\x3e|条件c1| d[模块d]\nc --\x3e|条件c2| e[模块e]\nc --\x3e|条件c3| f[模块f]\n​```\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n流程图相关文章：\n\nhttps://www.jianshu.com/p/b421cc723da5\n\nhttp://www.imooc.com/article/292708\n\n\n# 时序图\n\n​```mermaid\nsequencediagram\na->>b: 是否已收到消息？\nb--\x3e>a: 已收到消息\n​```\n\n\n1\n2\n3\n4\n5\n\n\n\n# 甘特图\n\n​```mermaid\ngantt\ntitle 甘特图\ndateformat  yyyy-mm-dd\nsection 项目a\n任务1           :a1, 2018-06-06, 30d\n任务2     :after a1  , 20d\nsection 项目b\n任务3      :2018-06-12  , 12d\n任务4      : 24d\n​```\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n回到顶部",charsets:{cjk:!0},lastUpdated:"2022/04/11, 10:49:20",lastUpdatedTimestamp:164964536e4},{title:"npm常用命令",frontmatter:{title:"npm常用命令",date:"2019-12-25T14:27:01.000Z",permalink:"/pages/61f2f95fd7da14fd",categories:["技术","技术文档"],tags:[null],author:{name:"xugaoyi",link:"https://github.com/xugaoyi"}},regularPath:"/04.%E6%8A%80%E6%9C%AF/01.%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/03.npm%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html",relativePath:"04.技术/01.技术文档/03.npm常用命令.md",key:"v-8da46682",path:"/pages/61f2f95fd7da14fd/",headers:[{level:2,title:"简介",slug:"简介",normalizedTitle:"简介",charIndex:14},{level:2,title:"常用命令",slug:"常用命令",normalizedTitle:"常用命令",charIndex:5},{level:2,title:"使用技巧",slug:"使用技巧",normalizedTitle:"使用技巧",charIndex:1761},{level:2,title:"npm发布包教程",slug:"npm发布包教程",normalizedTitle:"npm发布包教程",charIndex:1912},{level:2,title:"nrm的作用与使用",slug:"nrm的作用与使用",normalizedTitle:"nrm的作用与使用",charIndex:1935}],excerpt:'<h1 id="npm常用命令"><a class="header-anchor" href="#npm常用命令">#</a> npm常用命令</h1>\n<h2 id="简介"><a class="header-anchor" href="#简介">#</a> 简介</h2>\n<p>npm是跟随node一起安装的包（模块）管理器。常见的使用场景有以下几种：</p>\n<ul>\n<li>允许用户从npm服务器下载别人编写的第三方包到本地使用。</li>\n<li>允许用户从npm服务器下载并安装别人编写的命令行程序到本地使用。</li>\n<li>允许用户将自己编写的包或命令行程序上传到npm服务器供别人使用。</li>\n</ul>\n',headersStr:"简介 常用命令 使用技巧 npm发布包教程 nrm的作用与使用",content:'# npm常用命令\n\n\n# 简介\n\nnpm是跟随node一起安装的包（模块）管理器。常见的使用场景有以下几种：\n\n * 允许用户从npm服务器下载别人编写的第三方包到本地使用。\n * 允许用户从npm服务器下载并安装别人编写的命令行程序到本地使用。\n * 允许用户将自己编写的包或命令行程序上传到npm服务器供别人使用。\n\n\n# 常用命令\n\n# 检测是否安装及版本\n\nnpm -v # 显示版本号说明已经安装相应的版本\n\n\n1\n\n\n# 生成package.json文件\n\nnpm init\n\n\n1\n\n\n> package.json用来描述项目中用到的模块和其他信息\n\n# 安装模块\n\nnpm install # 安装package.json定义好的模块，简写 npm i\n\n# 安装包指定模块\nnpm i <ModuleName>\n\n# 全局安装\nnpm i <ModuleName> -g \n\n# 安装包的同时，将信息写入到package.json中的 dependencies 配置中\nnpm i <ModuleName> --save\n\n# 安装包的同时，将信息写入到package.json中的 devDependencies 配置中\nnpm i <ModuleName> --save-dev\n\n# 安装多模块\nnpm i <ModuleName1> <ModuleName2>\n\n# 安装方式参数：\n-save # 简写-S，加入到生产依赖中\n-save-dev # 简写-D，加入到开发依赖中\n-g # 全局安装 将安装包放在 /usr/local 下或者你 node 的安装目录\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n# 查看\n\n# 查看所有全局安装的包\nnpm ls -g\n\n# 查看本地项目中安装的包\nnpm ls\n\n# 查看包的 package.json文件\nnpm view <ModuleName>\n\n# 查看包的依赖关系\nnpm view <ModuleName> dependencies\n\n# 查看包的源文件地址\nnpm view <ModuleName> repository.url\n\n# 查看包所依赖的node版本\nnpm view <ModuleName> engines\n\n# 查看帮助\nnpm help\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n# 更新模块\n\n# 更新本地模块\nnpm update <ModuleName>\n\n# 更新全局模块\nnpm update -g <ModuleName> # 更新全局软件包。\nnpm update -g # 更新所有的全局软件包。\nnpm outdated -g --depth=0 # 找出需要更新的包。\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n# 卸载模块\n\n# 卸载本地模块\nnpm uninstall <ModuleName>\n\n# 卸载全局模块\nnpm uninstall -g <ModuleName> # 卸载全局软件包。\n\n\n1\n2\n3\n4\n5\n\n\n# 清空缓存\n\n# 清空npm缓存\nnpm cache clear\n\n\n1\n2\n\n\n# 使用淘宝镜像\n\n# 使用淘宝镜像\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n\n\n1\n2\n\n\n# 其他\n\n# 更改包内容后进行重建\nnpm rebuild <ModuleName>\n\n# 检查包是否已经过时，此命令会列出所有已经过时的包，可以及时进行包的更新\nnpm outdated\n\n# 访问npm的json文件，此命令将会打开一个网页\nnpm help json\n\n# 发布一个包的时候，需要检验某个包名是否存在\nnpm search <ModuleName>\n\n# 撤销自己发布过的某个版本代码\nnpm unpublish <package> <version>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# 使用技巧\n\n# 多次安装不成功尝试先清除缓存\n\nnpm cache clean -f\n\n\n1\n\n\n# 查看已安装的依赖包版本号\n\nnpm ls <ModuleName>\n\n\n1\n\n\n> 注意：用此方法才能准确的知道项目使用的版本号，查看package.json时，有“^" 符号表示大于此版本\n\n\n# npm发布包教程\n\nnpm发布包教程\n\n\n# nrm的作用与使用\n\n# nrm是什么？\n\nnrm(npm registry manager )是npm的镜像源管理工具，有时候国外资源太慢，使用这个就可以快速地在 npm 源间切换\n\n# nrm的安装\n\nnpm install -g nrm\n\n\n1\n\n\n# nrm命令\n\nnrm ls　#查看可用的源（有*号的表示当前所使用的源,以下<registry>表示源的名称）\nnrm use <registry> # 将npm下载源切换成指定的源\nnrm add <registry> <url> # 添加源，url为源的路径\nnrm del <registry> # 删除源\nnrm test <registry> # 测试源的响应时间，可以作为使用哪个源的参考\n\nnrm help　# 查看nrm帮助\nnrm home <registry>　# 跳转到指定源的官网\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n# nrm使用\n\n如果在你的网络不太理想或者受到其他网络限制导致不能使用npm原本的源进行下载时，nrm就非常有用了，你只需要：\n\nnrm ls # 查看可用的源\nnrm use <registry>　# 切换到指定源\n\n\n1\n2\n',normalizedContent:'# npm常用命令\n\n\n# 简介\n\nnpm是跟随node一起安装的包（模块）管理器。常见的使用场景有以下几种：\n\n * 允许用户从npm服务器下载别人编写的第三方包到本地使用。\n * 允许用户从npm服务器下载并安装别人编写的命令行程序到本地使用。\n * 允许用户将自己编写的包或命令行程序上传到npm服务器供别人使用。\n\n\n# 常用命令\n\n# 检测是否安装及版本\n\nnpm -v # 显示版本号说明已经安装相应的版本\n\n\n1\n\n\n# 生成package.json文件\n\nnpm init\n\n\n1\n\n\n> package.json用来描述项目中用到的模块和其他信息\n\n# 安装模块\n\nnpm install # 安装package.json定义好的模块，简写 npm i\n\n# 安装包指定模块\nnpm i <modulename>\n\n# 全局安装\nnpm i <modulename> -g \n\n# 安装包的同时，将信息写入到package.json中的 dependencies 配置中\nnpm i <modulename> --save\n\n# 安装包的同时，将信息写入到package.json中的 devdependencies 配置中\nnpm i <modulename> --save-dev\n\n# 安装多模块\nnpm i <modulename1> <modulename2>\n\n# 安装方式参数：\n-save # 简写-s，加入到生产依赖中\n-save-dev # 简写-d，加入到开发依赖中\n-g # 全局安装 将安装包放在 /usr/local 下或者你 node 的安装目录\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n# 查看\n\n# 查看所有全局安装的包\nnpm ls -g\n\n# 查看本地项目中安装的包\nnpm ls\n\n# 查看包的 package.json文件\nnpm view <modulename>\n\n# 查看包的依赖关系\nnpm view <modulename> dependencies\n\n# 查看包的源文件地址\nnpm view <modulename> repository.url\n\n# 查看包所依赖的node版本\nnpm view <modulename> engines\n\n# 查看帮助\nnpm help\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n# 更新模块\n\n# 更新本地模块\nnpm update <modulename>\n\n# 更新全局模块\nnpm update -g <modulename> # 更新全局软件包。\nnpm update -g # 更新所有的全局软件包。\nnpm outdated -g --depth=0 # 找出需要更新的包。\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n# 卸载模块\n\n# 卸载本地模块\nnpm uninstall <modulename>\n\n# 卸载全局模块\nnpm uninstall -g <modulename> # 卸载全局软件包。\n\n\n1\n2\n3\n4\n5\n\n\n# 清空缓存\n\n# 清空npm缓存\nnpm cache clear\n\n\n1\n2\n\n\n# 使用淘宝镜像\n\n# 使用淘宝镜像\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n\n\n1\n2\n\n\n# 其他\n\n# 更改包内容后进行重建\nnpm rebuild <modulename>\n\n# 检查包是否已经过时，此命令会列出所有已经过时的包，可以及时进行包的更新\nnpm outdated\n\n# 访问npm的json文件，此命令将会打开一个网页\nnpm help json\n\n# 发布一个包的时候，需要检验某个包名是否存在\nnpm search <modulename>\n\n# 撤销自己发布过的某个版本代码\nnpm unpublish <package> <version>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# 使用技巧\n\n# 多次安装不成功尝试先清除缓存\n\nnpm cache clean -f\n\n\n1\n\n\n# 查看已安装的依赖包版本号\n\nnpm ls <modulename>\n\n\n1\n\n\n> 注意：用此方法才能准确的知道项目使用的版本号，查看package.json时，有“^" 符号表示大于此版本\n\n\n# npm发布包教程\n\nnpm发布包教程\n\n\n# nrm的作用与使用\n\n# nrm是什么？\n\nnrm(npm registry manager )是npm的镜像源管理工具，有时候国外资源太慢，使用这个就可以快速地在 npm 源间切换\n\n# nrm的安装\n\nnpm install -g nrm\n\n\n1\n\n\n# nrm命令\n\nnrm ls　#查看可用的源（有*号的表示当前所使用的源,以下<registry>表示源的名称）\nnrm use <registry> # 将npm下载源切换成指定的源\nnrm add <registry> <url> # 添加源，url为源的路径\nnrm del <registry> # 删除源\nnrm test <registry> # 测试源的响应时间，可以作为使用哪个源的参考\n\nnrm help　# 查看nrm帮助\nnrm home <registry>　# 跳转到指定源的官网\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n# nrm使用\n\n如果在你的网络不太理想或者受到其他网络限制导致不能使用npm原本的源进行下载时，nrm就非常有用了，你只需要：\n\nnrm ls # 查看可用的源\nnrm use <registry>　# 切换到指定源\n\n\n1\n2\n',charsets:{cjk:!0},lastUpdated:"2022/04/11, 10:49:20",lastUpdatedTimestamp:164964536e4},{title:"npm packageJson属性详解",frontmatter:{author:{name:"xugaoyi",link:"https://github.com/xugaoyi"},title:"npm packageJson属性详解",date:"2020-04-08T17:16:38.000Z",permalink:"/pages/dec4f3f00e71a312",categories:["技术","技术文档"],tags:[null]},regularPath:"/04.%E6%8A%80%E6%9C%AF/01.%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/10.npm%20packageJson%E5%B1%9E%E6%80%A7%E8%AF%A6%E8%A7%A3.html",relativePath:"04.技术/01.技术文档/10.npm packageJson属性详解.md",key:"v-39227ad2",path:"/pages/dec4f3f00e71a312/",headers:[{level:2,title:"概述",slug:"概述",normalizedTitle:"概述",charIndex:86},{level:2,title:"name",slug:"name",normalizedTitle:"name",charIndex:160},{level:2,title:"version",slug:"version",normalizedTitle:"version",charIndex:191},{level:2,title:"description",slug:"description",normalizedTitle:"description",charIndex:1036},{level:2,title:"keywords",slug:"keywords",normalizedTitle:"keywords",charIndex:1081},{level:2,title:"homepage",slug:"homepage",normalizedTitle:"homepage",charIndex:1114},{level:2,title:"bugs",slug:"bugs",normalizedTitle:"bugs",charIndex:1266},{level:2,title:"license",slug:"license",normalizedTitle:"license",charIndex:1496},{level:2,title:"和用户相关的属性: author, contributors",slug:"和用户相关的属性-author-contributors",normalizedTitle:"和用户相关的属性: author, contributors",charIndex:1666},{level:2,title:"files",slug:"files",normalizedTitle:"files",charIndex:2037},{level:2,title:"main",slug:"main",normalizedTitle:"main",charIndex:2013},{level:2,title:"bin",slug:"bin",normalizedTitle:"bin",charIndex:2444},{level:2,title:"man",slug:"man",normalizedTitle:"man",charIndex:3180},{level:2,title:"directories",slug:"directories",normalizedTitle:"directories",charIndex:4055},{level:3,title:"directories.lib",slug:"directories-lib",normalizedTitle:"directories.lib",charIndex:4211},{level:3,title:"directories.bin",slug:"directories-bin",normalizedTitle:"directories.bin",charIndex:4282},{level:3,title:"directories.man",slug:"directories-man",normalizedTitle:"directories.man",charIndex:4383},{level:3,title:"directories.doc",slug:"directories-doc",normalizedTitle:"directories.doc",charIndex:4440},{level:3,title:"directories.example",slug:"directories-example",normalizedTitle:"directories.example",charIndex:4514},{level:2,title:"repository",slug:"repository",normalizedTitle:"repository",charIndex:4561},{level:2,title:"scripts",slug:"scripts",normalizedTitle:"scripts",charIndex:5066},{level:2,title:"config",slug:"config",normalizedTitle:"config",charIndex:146},{level:2,title:"dependencies",slug:"dependencies",normalizedTitle:"dependencies",charIndex:1017},{level:2,title:"URLs as Dependencies",slug:"urls-as-dependencies",normalizedTitle:"urls as dependencies",charIndex:6629},{level:2,title:"Git URLs as Dependencies",slug:"git-urls-as-dependencies",normalizedTitle:"git urls as dependencies",charIndex:6706},{level:2,title:"GitHub URLs",slug:"github-urls",normalizedTitle:"github urls",charIndex:7059},{level:2,title:"Local Paths",slug:"local-paths",normalizedTitle:"local paths",charIndex:7300},{level:2,title:"devDependencies",slug:"devdependencies",normalizedTitle:"devdependencies",charIndex:7631},{level:2,title:"peerDependencies",slug:"peerdependencies",normalizedTitle:"peerdependencies",charIndex:8354},{level:2,title:"bundledDependencies",slug:"bundleddependencies",normalizedTitle:"bundleddependencies",charIndex:8793},{level:2,title:"optionalDependencies",slug:"optionaldependencies",normalizedTitle:"optionaldependencies",charIndex:8870},{level:2,title:"engines",slug:"engines",normalizedTitle:"engines",charIndex:594},{level:2,title:"engineStrict",slug:"enginestrict",normalizedTitle:"enginestrict",charIndex:9646},{level:2,title:"os",slug:"os",normalizedTitle:"os",charIndex:1394},{level:2,title:"cpu",slug:"cpu",normalizedTitle:"cpu",charIndex:9846},{level:2,title:"preferGlobal",slug:"preferglobal",normalizedTitle:"preferglobal",charIndex:9962},{level:2,title:"private",slug:"private",normalizedTitle:"private",charIndex:10079},{level:2,title:"publishConfig",slug:"publishconfig",normalizedTitle:"publishconfig",charIndex:10172},{level:2,title:"DEFAULT VALUES",slug:"default-values",normalizedTitle:"default values",charIndex:10286},{level:2,title:"参考文档列表(https://docs.npmjs.com/)",slug:"参考文档列表-https-docs-npmjs-com",normalizedTitle:"参考文档列表(https://docs.npmjs.com/)",charIndex:10599}],excerpt:'<h1 id="npm-package-json属性详解"><a class="header-anchor" href="#npm-package-json属性详解">#</a> npm package.json属性详解</h1>\n<blockquote>\n<p>本文转自<a href="https://www.cnblogs.com/tzyy/p/5193811.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/tzyy/p/5193811.html<OutboundLink/></a>，作者：TZYY</p>\n</blockquote>\n<h2 id="概述"><a class="header-anchor" href="#概述">#</a> 概述</h2>\n<p><code>package.json</code>必须是一个严格的json文件，而不仅仅是js里边的一个对象。其中很多属性可以通过<code>npm-config</code>来生成</p>\n',headersStr:"概述 name version description keywords homepage bugs license 和用户相关的属性: author, contributors files main bin man directories directories.lib directories.bin directories.man directories.doc directories.example repository scripts config dependencies URLs as Dependencies Git URLs as Dependencies GitHub URLs Local Paths devDependencies peerDependencies bundledDependencies optionalDependencies engines engineStrict os cpu preferGlobal private publishConfig DEFAULT VALUES 参考文档列表(https://docs.npmjs.com/)",content:'# npm package.json属性详解\n\n> 本文转自https://www.cnblogs.com/tzyy/p/5193811.html，作者：TZYY\n\n\n# 概述\n\npackage.json必须是一个严格的json文件，而不仅仅是js里边的一个对象。其中很多属性可以通过npm-config来生成\n\n\n# name\n\npackage.json中最重要的属性是name和version两个属性，这两个属性是必须要有的，否则模块就无法被安装，这两个属性一起形成了一个npm模块的唯一标识符。模块中内容变更的同时，模块版本也应该一起变化。 name属性就是你的模块名称，下面是一些命名规则:\n\n * name必须小于等于214个字节，包括前缀名称在内（如 xxx/xxxmodule）。\n\n * name不能以"_"或"."开头\n\n * 不能含有大写字母\n\n * name会成为url的一部分，不能含有url非法字符\n   \n   下面是官网文档的一些建议：\n\n * 不要使用和node核心模块一样的名称\n\n * name中不要含有"js"和"node"。 It\'s assumed that it\'s js, since you\'re writing a package.json file, and you can specify the engine using the "engines" field. (See below.)\n\n * name属性会成为模块url、命令行中的一个参数或者一个文件夹名称，任何非url安全的字符在name中都不能使用，也不能以"_"或"."开头\n\n * name属性也许会被写在require()的参数中，所以最好取个简短而语义化的值。\n\n * 创建一个模块前可以先到后边的网址查查name是否已经被占用. https://www.npmjs.com/\n   \n   * # 发布一个包的时候，需要检验某个包名是否存在\n     npm search <ModuleName>\n     \n     \n     1\n     2\n     \n\nname属性可以有一些前缀如 e.g. @myorg/mypackage.在npm-scope(7)的文档中可以看到详细说明\n\n\n# version\n\nversion必须可以被npm依赖的一个node-semver模块解析。具体规则见下面的dependencies模块\n\n\n# description\n\n一个描述，方便别人了解你的模块作用，搜索的时候也有用。\n\n\n# keywords\n\n一个字符串数组，方便别人搜索到本模块\n\n\n# homepage\n\n项目主页url 注意: 这个项目主页url和url属性不同，如果你填写了url属性，npm注册工具会认为你把项目发布到其他地方了，获取模块的时候不会从npm官方仓库获取，而是会重定向到url属性配置的地址。 （原文档中用了 spit(吐)这个单词，作者表示他不是在开玩笑:）\n\n\n# bugs\n\n填写一个bug提交地址或者一个邮箱，被你的模块坑到的人可以通过这里吐槽，例如：\n\n{\n    "url" : "https://github.com/owner/project/issues",\n    "email" : "project@hostname.com"\n}\n\n\n1\n2\n3\n4\n\n\nurl和email可以任意填或不填，如果只填一个，可以直接写成一个字符串而不是对象。如果填写了url，npm bugs命令会使用这个url。\n\n\n# license\n\n你应该为你的模块制定一个协议，让用户知道他们有何权限来使用你的模块，以及使用该模块有哪些限制。最简单的，例如你用BSD-3-Clause 或 MIT之类的协议，如下：\n\n{ "license" : "MIT" }\n\n\n1\n\n\n你可以在https://spdx.org/licenses/ 这个地址查阅协议列表 。\n\n\n# 和用户相关的属性: author, contributors\n\nauthor是一个码农， contributors是一个码农数组。 person是一个有一些描述属性的对象，如下 like this:\n\n{\n    "name" : "Barney Rubble",\n    "email" : "b@rubble.com",\n    "url" : "http://barnyrubble.tumblr.com/"\n}\n\n\n1\n2\n3\n4\n5\n\n\n也可以按如下格式缩写，npm会帮着转换:\n\n"Barney Rubble b@rubble.com (http://barnyrubble.tumblr.com/)"\n\n\n1\n\n\nemail和url属性实际上都是可以省略的。描述用户信息的还有一个maintainers（维护者）属性。\n\n\n# files\n\nfiles属性的值是一个数组，内容是模块下文件名或者文件夹名，如果是文件夹名，则文件夹下所有的文件也会被包含进来（除非文件被另一些配置排除了） 你也可以在模块根目录下创建一个.npmignore文件（windows下无法直接创建以"."开头的文件，使用linux命令行工具创建如git bash），写在这个文件里边的文件即便被写在files属性里边也会被排除在外，这个文件的写法".gitignore"类似。\n\n\n# main\n\nmain属性指定了程序的主入口文件。意思是，如果你的模块被命名为foo，用户安装了这个模块并通过require("foo")来使用这个模块，那么require返回的内容就是main属性指定的文件中 module.exports指向的对象。 它应该指向模块根目录下的一个文件。对大对数模块而言，这个属性更多的是让模块有一个主入口文件，然而很多模块并不写这个属性。\n\n\n# bin\n\n很多模块有一个或多个需要配置到PATH路径下的可执行模块，npm让这个工作变得十分简单（实际上npm本身也是通过bin属性安装为一个可执行命令的） 如果要用npm的这个功能，在package.json里边配置一个bin属性。bin属性是一个已命令名称为key，本地文件名称为value的map如下：\n\n{\n    "bin" : { "myapp" : "./cli.js" }\n}\n\n\n1\n2\n3\n\n\n模块安装的时候，若是全局安装，则npm会为bin中配置的文件在bin目录下创建一个软连接（对于windows系统，默认会在C:\\Users\\username\\AppData\\Roaming\\npm目录下），若是局部安装，则会在项目内的./node_modules/.bin/目录下创建一个软链接。 因此，按上面的例子，当你安装myapp的时候，npm就会为cli.js在/usr/local/bin/myapp路径创建一个软链接。 如果你的模块只有一个可执行文件，并且它的命令名称和模块名称一样，你可以只写一个字符串来代替上面那种配置，例如：\n\n{ \n    "name": "my-program",\n    "version": "1.2.5", \n    "bin": "./path/to/program"\n}\n\n\n1\n2\n3\n4\n5\n\n\n作用和如下写法相同:\n\n{ \n    "name": "my-program", \n    "version": "1.2.5", \n    "bin" : { \n        "my-program" : "./path/to/program" \n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# man\n\n制定一个或通过数组制定一些文件来让linux下的man命令查找文档地址。 如果只有一个文件被指定的话，安装后直接使用man+模块名称，而不管man指定的文件的实际名称。例如:\n\n{\n    "name" : "foo",\n    "version" : "1.2.3", \n    "description" : "A packaged foo fooer for fooing foos", \n    "main" : "foo.js", \n    "man" : "./man/doc.1"\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n通过man foo命令会得到 ./man/doc.1 文件的内容。 如果man文件名称不是以模块名称开头的，安装的时候会给加上模块名称前缀。因此，下面这段配置：\n\n{ \n    "name" : "foo", \n    "version" : "1.2.3", \n    "description" : "A packaged foo fooer for fooing foos", \n    "main" : "foo.js", \n    "man" : [ "./man/foo.1", "./man/bar.1" ]\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n会创建一些文件来作为man foo和man foo-bar命令的结果。 man文件必须以数字结尾，或者如果被压缩了，以.gz结尾。数字表示文件将被安装到man的哪个部分。\n\n{ \n    "name" : "foo", \n    "version" : "1.2.3",\n    "description" : "A packaged foo fooer for fooing foos", \n    "main" : "foo.js", \n    "man" : [ "./man/foo.1", "./man/foo.2" ]\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n会创建 man foo 和 man 2 foo 两条命令。\n\n\n# directories\n\nCommonJs通过directories来制定一些方法来描述模块的结构，看看npm的package.json文件https://registry.npmjs.org/npm/latest ，可以发现里边有这个字段的内容。 目前这个配置没有任何作用，将来可能会整出一些花样来。\n\n\n# directories.lib\n\n告诉用户模块中lib目录在哪，这个配置目前没有任何作用，但是对使用模块的人来说是一个很有用的信息。\n\n\n# directories.bin\n\n如果你在这里指定了bin目录，这个配置下面的文件会被加入到bin路径下，如果你已经在package.json中配置了bin目录，那么这里的配置将不起任何作用。\n\n\n# directories.man\n\n指定一个目录，目录里边都是man文件，这是一种配置man文件的语法糖。\n\n\n# directories.doc\n\n在这个目录里边放一些markdown文件，可能最终有一天它们会被友好的展现出来（应该是在npm的网站上）\n\n\n# directories.example\n\n放一些示例脚本，或许某一天会有用 - -！\n\n\n# repository\n\n指定一个代码存放地址，对想要为你的项目贡献代码的人有帮助。像这样：\n\n"repository" :\n  {\n      "type" : "git",\n      "url" : "https://github.com/npm/npm.git"\n  }\n\n"repository" :\n  { \n      "type" : "svn", \n      "url" : "https://v8.googlecode.com/svn/trunk/"\n  }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n若你的模块放在GitHub, GitHub gist, Bitbucket, or GitLab的仓库里，npm install的时候可以使用缩写标记来完成：\n\n"repository": "npm/npm"\n\n"repository": "gist:11081aaa281"\n\n"repository": "bitbucket:example/repo"\n\n"repository": "gitlab:another/repo"\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# scripts\n\nscripts属性是一个对象，里边指定了项目的生命周期个各个环节需要执行的命令。key是生命周期中的事件，value是要执行的命令。 具体的内容有 install start stop 等，详见 https://docs.npmjs.com/misc/scripts\n\n\n# config\n\n用来设置一些项目不怎么变化的项目配置，例如port等。 用户用的时候可以使用如下用法：\n\nhttp.createServer(...).listen(process.env.npm_package_config_port)\n\n\n1\n\n\n可以通过npm config set foo:port 80来修改config。详见https://docs.npmjs.com/misc/config\n\n{ \n    "name" : "foo", \n    "config" : { "port" : "8080" }\n}\n\n\n1\n2\n3\n4\n\n\n\n# dependencies\n\ndependencies属性是一个对象，配置模块依赖的模块列表，key是模块名称，value是版本范围，版本范围是一个字符，可以被一个或多个空格分割。 dependencies也可以被指定为一个git地址或者一个压缩包地址。 不要把测试工具或transpilers写到dependencies中。 下面是一些写法，详见https://docs.npmjs.com/misc/semver\n\n * version 精确匹配版本\n * >version 必须大于某个版本\n * >=version 大于等于\n * <version 小于\n * <=versionversion 小于\n * ~version "约等于"，具体规则详见semver文档\n * ^version "兼容版本"具体规则详见semver文档\n * 1.2.x 仅一点二点几的版本\n * http://... 见下面url作为denpendencies的说明\n * * 任何版本\n * "" 空字符，和*相同\n * version1 - version2 相当于 >=version1 <=version2.\n * range1 || range2 范围1和范围2满足任意一个都行\n * git... 见下面git url作为denpendencies的说明\n * user/repo See 见下面GitHub仓库的说明\n * tag 发布的一个特殊的标签，见npm-tag的文档 https://docs.npmjs.com/getting-started/using-tags\n * path/path/path 见下面本地模块的说明 下面的写法都是可以的:\n\n{ "dependencies" :\n  { "foo" : "1.0.0 - 2.9999.9999"\n  , "bar" : ">=1.0.2 <2.1.2"\n  , "baz" : ">1.0.2 <=2.3.4"\n  , "boo" : "2.0.1"\n  , "qux" : "<1.0.0 || >=2.3.1 <2.4.5 || >=2.5.2 <3.0.0"\n  , "asd" : "http://asdf.com/asdf.tar.gz"\n  , "til" : "~1.2"\n  , "elf" : "~1.2.3"\n  , "two" : "2.x"\n  , "thr" : "3.3.x"\n  , "lat" : "latest"\n  , "dyl" : "file:../dyl"\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# URLs as Dependencies\n\n在版本范围的地方可以写一个url指向一个压缩包，模块安装的时候会把这个压缩包下载下来安装到模块本地。\n\n\n# Git URLs as Dependencies\n\nGit url可以像下面一样:\n\ngit://github.com/user/project.git#commit-ish\ngit+ssh://user@hostname:project.git#commit-ish\ngit+ssh://user@hostname/project.git#commit-ish\ngit+http://user@hostname/project/blah.git#commit-ish\ngit+https://user@hostname/project/blah.git#commit-ish\n\n\n1\n2\n3\n4\n5\n\n\ncommit-ish 可以是任意标签，哈希值，或者可以检出的分支，默认是master分支。\n\n\n# GitHub URLs\n\n支持github的 username/modulename 的写法，#后边可以加后缀写明分支hash或标签：\n\n{\n  "name": "foo",\n  "version": "0.0.0",\n  "dependencies": {\n    "express": "visionmedia/express",\n    "mocha": "visionmedia/mocha#4727d357ea"\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# Local Paths\n\nnpm2.0.0版本以上可以提供一个本地路径来安装一个本地的模块，通过npm install xxx --save 来安装，格式如下：\n\n../foo/bar\n~/foo/bar\n./foo/bar\n/foo/bar\n\n\n1\n2\n3\n4\n\n\npackage.json 生成的相对路径如下:\n\n{\n  "name": "baz",\n  "dependencies": {\n    "bar": "file:../foo/bar"\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n这种属性在离线开发或者测试需要用npm install的情况，又不想自己搞一个npm server的时候有用，但是发布模块到公共仓库时不应该使用这种属性。\n\n\n# devDependencies\n\n如果有人想要下载并使用你的模块，也许他们并不希望或需要下载一些你在开发过程中使用的额外的测试或者文档框架。 在这种情况下，最好的方法是把这些依赖添加到devDependencies属性的对象中。 这些模块会在npm link或者npm install的时候被安装，也可以像其他npm配置一样被管理，详见npm的config文档。 对于一些跨平台的构建任务，例如把CoffeeScript编译成JavaScript，就可以通过在package.json的script属性里边配置prepublish脚本来完成这个任务，然后需要依赖的coffee-script模块就写在devDependencies属性种。 例如:\n\n{ "name": "ethopia-waza",\n  "description": "a delightfully fruity coffee varietal",\n  "version": "1.2.3",\n  "devDependencies": {\n    "coffee-script": "~1.6.3"\n  },\n  "scripts": {\n    "prepublish": "coffee -o lib/ -c src/waza.coffee"\n  },\n  "main": "lib/waza.js"\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\nprepublish脚本会在发布之前运行，因此用户在使用之前就不用再自己去完成编译的过程了。在开发模式下，运行npm install也会执行这个脚本（见npm script文档），因此可以很方便的调试。\n\n\n# peerDependencies\n\n有时候做一些插件开发，比如grunt等工具的插件，它们往往是在grunt的某个版本的基础上开发的，而在他们的代码中并不会出现require("grunt")这样的依赖，dependencies配置里边也不会写上grunt的依赖，为了说明此模块只能作为插件跑在宿主的某个版本范围下，可以配置peerDependencies：\n\n{\n  "name": "tea-latte",\n  "version": "1.3.5",\n  "peerDependencies": {\n    "tea": "2.x"\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面这个配置确保再npm install的时候tea-latte会和2.x版本的tea一起安装，而且它们两个的依赖关系是同级的： ├── tea-latte@1.3.5 └── tea@2.2.0 这个配置的目的是让npm知道，如果要使用此插件模块，请确保安装了兼容版本的宿主模块。\n\n\n# bundledDependencies\n\n上面的单词少个d，写成bundleDependencies也可以。 指定发布的时候会被一起打包的模块。\n\n\n# optionalDependencies\n\n如果一个依赖模块可以被使用， 同时你也希望在该模块找不到或无法获取时npm继续运行，你可以把这个模块依赖放到optionalDependencies配置中。这个配置的写法和dependencies的写法一样，不同的是这里边写的模块安装失败不会导致npm install失败。 当然，这种模块就需要你自己在代码中处理模块确实的情况了，例如：\n\ntry {\n  var foo = require(\'foo\')\n  var fooVersion = require(\'foo/package.json\').version\n} catch (er) {\n  foo = null\n}\nif ( notGoodFooVersion(fooVersion) ) {\n  foo = null\n}\n\n// .. then later in your program ..\n\nif (foo) {\n  foo.doFooThings()\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\noptionalDependencies 中的配置会覆盖dependencies中的配置，最好只在一个地方写。\n\n\n# engines\n\n你可以指定项目运行的node版本范围，如下： { "engines" : { "node" : ">=0.10.3 <0.12" } } 和dependencies一样，如果你不指定版本范围或者指定为*，任何版本的node都可以。 也可以指定一些npm版本可以正确的安装你的模块，例如： { "engines" : { "npm" : "~1.0.20" } } 要注意的是，除非你设置了engine-strict属性，engines属性是仅供参考的。\n\n\n# engineStrict\n\n注意：这个属性已经弃用，将在npm 3.0.0 版本干掉。\n\n\n# os\n\n可以指定你的模块只能在哪个操作系统上跑： "os" : [ "darwin", "linux" ] 也可以指定黑名单而不是白名单： "os" : [ "!win32" ] 服务的操作系统是由process.platform来判断的，这个属性允许黑白名单同时存在，虽然没啥必要这样搞...\n\n\n# cpu\n\n限制模块只能在某某cpu架构下运行 "cpu" : [ "x64", "ia32" ] 同样可以设置黑名单: "cpu" : [ "!arm", "!mips" ] cpu架构通过 process.arch 判断\n\n\n# preferGlobal\n\n如果您的软件包主要用于安装到全局的命令行应用程序，那么该值设置为true ，如果它被安装在本地，则提供一个警告。实际上该配置并没有阻止用户把模块安装到本地，只是防止该模块被错误的使用引起一些问题。\n\n\n# private\n\n如果这个属性被设置为true，npm将拒绝发布它，这是为了防止一个私有模块被无意间发布出去。如果你只想让模块被发布到一个特定的npm仓库，如一个内部的仓库，可与在下面的publishConfig中配置仓库参数。\n\n\n# publishConfig\n\n这个配置是会在模块发布时用到的一些值的集合。如果你不想模块被默认被标记为最新的，或者默认发布到公共仓库，可以在这里配置tag或仓库地址。\n\n\n# DEFAULT VALUES\n\nnpm设置了一些默认参数，如： "scripts": {"start": "node server.js"} 如果模块根目录下有一个server.js文件，那么npm start会默认运行这个文件。 "scripts":{"preinstall": "node-gyp rebuild"} 如果模块根目录下有binding.gyp, npm将默认用node-gyp来编译preinstall的脚本 "contributors": [...] 若模块根目录下有AUTHORS 文件，则npm会按Name (url)格式解析每一行的数据添加到contributors中，可以用#添加行注释\n\n\n# 参考文档列表(https://docs.npmjs.com/)\n\nsemver(7) npm-init(1) npm-version(1) npm-config(1) npm-config(7) npm-help(1) npm-faq(7) npm-install(1) npm-publish(1) npm-rm(1)',normalizedContent:'# npm package.json属性详解\n\n> 本文转自https://www.cnblogs.com/tzyy/p/5193811.html，作者：tzyy\n\n\n# 概述\n\npackage.json必须是一个严格的json文件，而不仅仅是js里边的一个对象。其中很多属性可以通过npm-config来生成\n\n\n# name\n\npackage.json中最重要的属性是name和version两个属性，这两个属性是必须要有的，否则模块就无法被安装，这两个属性一起形成了一个npm模块的唯一标识符。模块中内容变更的同时，模块版本也应该一起变化。 name属性就是你的模块名称，下面是一些命名规则:\n\n * name必须小于等于214个字节，包括前缀名称在内（如 xxx/xxxmodule）。\n\n * name不能以"_"或"."开头\n\n * 不能含有大写字母\n\n * name会成为url的一部分，不能含有url非法字符\n   \n   下面是官网文档的一些建议：\n\n * 不要使用和node核心模块一样的名称\n\n * name中不要含有"js"和"node"。 it\'s assumed that it\'s js, since you\'re writing a package.json file, and you can specify the engine using the "engines" field. (see below.)\n\n * name属性会成为模块url、命令行中的一个参数或者一个文件夹名称，任何非url安全的字符在name中都不能使用，也不能以"_"或"."开头\n\n * name属性也许会被写在require()的参数中，所以最好取个简短而语义化的值。\n\n * 创建一个模块前可以先到后边的网址查查name是否已经被占用. https://www.npmjs.com/\n   \n   * # 发布一个包的时候，需要检验某个包名是否存在\n     npm search <modulename>\n     \n     \n     1\n     2\n     \n\nname属性可以有一些前缀如 e.g. @myorg/mypackage.在npm-scope(7)的文档中可以看到详细说明\n\n\n# version\n\nversion必须可以被npm依赖的一个node-semver模块解析。具体规则见下面的dependencies模块\n\n\n# description\n\n一个描述，方便别人了解你的模块作用，搜索的时候也有用。\n\n\n# keywords\n\n一个字符串数组，方便别人搜索到本模块\n\n\n# homepage\n\n项目主页url 注意: 这个项目主页url和url属性不同，如果你填写了url属性，npm注册工具会认为你把项目发布到其他地方了，获取模块的时候不会从npm官方仓库获取，而是会重定向到url属性配置的地址。 （原文档中用了 spit(吐)这个单词，作者表示他不是在开玩笑:）\n\n\n# bugs\n\n填写一个bug提交地址或者一个邮箱，被你的模块坑到的人可以通过这里吐槽，例如：\n\n{\n    "url" : "https://github.com/owner/project/issues",\n    "email" : "project@hostname.com"\n}\n\n\n1\n2\n3\n4\n\n\nurl和email可以任意填或不填，如果只填一个，可以直接写成一个字符串而不是对象。如果填写了url，npm bugs命令会使用这个url。\n\n\n# license\n\n你应该为你的模块制定一个协议，让用户知道他们有何权限来使用你的模块，以及使用该模块有哪些限制。最简单的，例如你用bsd-3-clause 或 mit之类的协议，如下：\n\n{ "license" : "mit" }\n\n\n1\n\n\n你可以在https://spdx.org/licenses/ 这个地址查阅协议列表 。\n\n\n# 和用户相关的属性: author, contributors\n\nauthor是一个码农， contributors是一个码农数组。 person是一个有一些描述属性的对象，如下 like this:\n\n{\n    "name" : "barney rubble",\n    "email" : "b@rubble.com",\n    "url" : "http://barnyrubble.tumblr.com/"\n}\n\n\n1\n2\n3\n4\n5\n\n\n也可以按如下格式缩写，npm会帮着转换:\n\n"barney rubble b@rubble.com (http://barnyrubble.tumblr.com/)"\n\n\n1\n\n\nemail和url属性实际上都是可以省略的。描述用户信息的还有一个maintainers（维护者）属性。\n\n\n# files\n\nfiles属性的值是一个数组，内容是模块下文件名或者文件夹名，如果是文件夹名，则文件夹下所有的文件也会被包含进来（除非文件被另一些配置排除了） 你也可以在模块根目录下创建一个.npmignore文件（windows下无法直接创建以"."开头的文件，使用linux命令行工具创建如git bash），写在这个文件里边的文件即便被写在files属性里边也会被排除在外，这个文件的写法".gitignore"类似。\n\n\n# main\n\nmain属性指定了程序的主入口文件。意思是，如果你的模块被命名为foo，用户安装了这个模块并通过require("foo")来使用这个模块，那么require返回的内容就是main属性指定的文件中 module.exports指向的对象。 它应该指向模块根目录下的一个文件。对大对数模块而言，这个属性更多的是让模块有一个主入口文件，然而很多模块并不写这个属性。\n\n\n# bin\n\n很多模块有一个或多个需要配置到path路径下的可执行模块，npm让这个工作变得十分简单（实际上npm本身也是通过bin属性安装为一个可执行命令的） 如果要用npm的这个功能，在package.json里边配置一个bin属性。bin属性是一个已命令名称为key，本地文件名称为value的map如下：\n\n{\n    "bin" : { "myapp" : "./cli.js" }\n}\n\n\n1\n2\n3\n\n\n模块安装的时候，若是全局安装，则npm会为bin中配置的文件在bin目录下创建一个软连接（对于windows系统，默认会在c:\\users\\username\\appdata\\roaming\\npm目录下），若是局部安装，则会在项目内的./node_modules/.bin/目录下创建一个软链接。 因此，按上面的例子，当你安装myapp的时候，npm就会为cli.js在/usr/local/bin/myapp路径创建一个软链接。 如果你的模块只有一个可执行文件，并且它的命令名称和模块名称一样，你可以只写一个字符串来代替上面那种配置，例如：\n\n{ \n    "name": "my-program",\n    "version": "1.2.5", \n    "bin": "./path/to/program"\n}\n\n\n1\n2\n3\n4\n5\n\n\n作用和如下写法相同:\n\n{ \n    "name": "my-program", \n    "version": "1.2.5", \n    "bin" : { \n        "my-program" : "./path/to/program" \n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# man\n\n制定一个或通过数组制定一些文件来让linux下的man命令查找文档地址。 如果只有一个文件被指定的话，安装后直接使用man+模块名称，而不管man指定的文件的实际名称。例如:\n\n{\n    "name" : "foo",\n    "version" : "1.2.3", \n    "description" : "a packaged foo fooer for fooing foos", \n    "main" : "foo.js", \n    "man" : "./man/doc.1"\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n通过man foo命令会得到 ./man/doc.1 文件的内容。 如果man文件名称不是以模块名称开头的，安装的时候会给加上模块名称前缀。因此，下面这段配置：\n\n{ \n    "name" : "foo", \n    "version" : "1.2.3", \n    "description" : "a packaged foo fooer for fooing foos", \n    "main" : "foo.js", \n    "man" : [ "./man/foo.1", "./man/bar.1" ]\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n会创建一些文件来作为man foo和man foo-bar命令的结果。 man文件必须以数字结尾，或者如果被压缩了，以.gz结尾。数字表示文件将被安装到man的哪个部分。\n\n{ \n    "name" : "foo", \n    "version" : "1.2.3",\n    "description" : "a packaged foo fooer for fooing foos", \n    "main" : "foo.js", \n    "man" : [ "./man/foo.1", "./man/foo.2" ]\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n会创建 man foo 和 man 2 foo 两条命令。\n\n\n# directories\n\ncommonjs通过directories来制定一些方法来描述模块的结构，看看npm的package.json文件https://registry.npmjs.org/npm/latest ，可以发现里边有这个字段的内容。 目前这个配置没有任何作用，将来可能会整出一些花样来。\n\n\n# directories.lib\n\n告诉用户模块中lib目录在哪，这个配置目前没有任何作用，但是对使用模块的人来说是一个很有用的信息。\n\n\n# directories.bin\n\n如果你在这里指定了bin目录，这个配置下面的文件会被加入到bin路径下，如果你已经在package.json中配置了bin目录，那么这里的配置将不起任何作用。\n\n\n# directories.man\n\n指定一个目录，目录里边都是man文件，这是一种配置man文件的语法糖。\n\n\n# directories.doc\n\n在这个目录里边放一些markdown文件，可能最终有一天它们会被友好的展现出来（应该是在npm的网站上）\n\n\n# directories.example\n\n放一些示例脚本，或许某一天会有用 - -！\n\n\n# repository\n\n指定一个代码存放地址，对想要为你的项目贡献代码的人有帮助。像这样：\n\n"repository" :\n  {\n      "type" : "git",\n      "url" : "https://github.com/npm/npm.git"\n  }\n\n"repository" :\n  { \n      "type" : "svn", \n      "url" : "https://v8.googlecode.com/svn/trunk/"\n  }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n若你的模块放在github, github gist, bitbucket, or gitlab的仓库里，npm install的时候可以使用缩写标记来完成：\n\n"repository": "npm/npm"\n\n"repository": "gist:11081aaa281"\n\n"repository": "bitbucket:example/repo"\n\n"repository": "gitlab:another/repo"\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# scripts\n\nscripts属性是一个对象，里边指定了项目的生命周期个各个环节需要执行的命令。key是生命周期中的事件，value是要执行的命令。 具体的内容有 install start stop 等，详见 https://docs.npmjs.com/misc/scripts\n\n\n# config\n\n用来设置一些项目不怎么变化的项目配置，例如port等。 用户用的时候可以使用如下用法：\n\nhttp.createserver(...).listen(process.env.npm_package_config_port)\n\n\n1\n\n\n可以通过npm config set foo:port 80来修改config。详见https://docs.npmjs.com/misc/config\n\n{ \n    "name" : "foo", \n    "config" : { "port" : "8080" }\n}\n\n\n1\n2\n3\n4\n\n\n\n# dependencies\n\ndependencies属性是一个对象，配置模块依赖的模块列表，key是模块名称，value是版本范围，版本范围是一个字符，可以被一个或多个空格分割。 dependencies也可以被指定为一个git地址或者一个压缩包地址。 不要把测试工具或transpilers写到dependencies中。 下面是一些写法，详见https://docs.npmjs.com/misc/semver\n\n * version 精确匹配版本\n * >version 必须大于某个版本\n * >=version 大于等于\n * <version 小于\n * <=versionversion 小于\n * ~version "约等于"，具体规则详见semver文档\n * ^version "兼容版本"具体规则详见semver文档\n * 1.2.x 仅一点二点几的版本\n * http://... 见下面url作为denpendencies的说明\n * * 任何版本\n * "" 空字符，和*相同\n * version1 - version2 相当于 >=version1 <=version2.\n * range1 || range2 范围1和范围2满足任意一个都行\n * git... 见下面git url作为denpendencies的说明\n * user/repo see 见下面github仓库的说明\n * tag 发布的一个特殊的标签，见npm-tag的文档 https://docs.npmjs.com/getting-started/using-tags\n * path/path/path 见下面本地模块的说明 下面的写法都是可以的:\n\n{ "dependencies" :\n  { "foo" : "1.0.0 - 2.9999.9999"\n  , "bar" : ">=1.0.2 <2.1.2"\n  , "baz" : ">1.0.2 <=2.3.4"\n  , "boo" : "2.0.1"\n  , "qux" : "<1.0.0 || >=2.3.1 <2.4.5 || >=2.5.2 <3.0.0"\n  , "asd" : "http://asdf.com/asdf.tar.gz"\n  , "til" : "~1.2"\n  , "elf" : "~1.2.3"\n  , "two" : "2.x"\n  , "thr" : "3.3.x"\n  , "lat" : "latest"\n  , "dyl" : "file:../dyl"\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# urls as dependencies\n\n在版本范围的地方可以写一个url指向一个压缩包，模块安装的时候会把这个压缩包下载下来安装到模块本地。\n\n\n# git urls as dependencies\n\ngit url可以像下面一样:\n\ngit://github.com/user/project.git#commit-ish\ngit+ssh://user@hostname:project.git#commit-ish\ngit+ssh://user@hostname/project.git#commit-ish\ngit+http://user@hostname/project/blah.git#commit-ish\ngit+https://user@hostname/project/blah.git#commit-ish\n\n\n1\n2\n3\n4\n5\n\n\ncommit-ish 可以是任意标签，哈希值，或者可以检出的分支，默认是master分支。\n\n\n# github urls\n\n支持github的 username/modulename 的写法，#后边可以加后缀写明分支hash或标签：\n\n{\n  "name": "foo",\n  "version": "0.0.0",\n  "dependencies": {\n    "express": "visionmedia/express",\n    "mocha": "visionmedia/mocha#4727d357ea"\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# local paths\n\nnpm2.0.0版本以上可以提供一个本地路径来安装一个本地的模块，通过npm install xxx --save 来安装，格式如下：\n\n../foo/bar\n~/foo/bar\n./foo/bar\n/foo/bar\n\n\n1\n2\n3\n4\n\n\npackage.json 生成的相对路径如下:\n\n{\n  "name": "baz",\n  "dependencies": {\n    "bar": "file:../foo/bar"\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n这种属性在离线开发或者测试需要用npm install的情况，又不想自己搞一个npm server的时候有用，但是发布模块到公共仓库时不应该使用这种属性。\n\n\n# devdependencies\n\n如果有人想要下载并使用你的模块，也许他们并不希望或需要下载一些你在开发过程中使用的额外的测试或者文档框架。 在这种情况下，最好的方法是把这些依赖添加到devdependencies属性的对象中。 这些模块会在npm link或者npm install的时候被安装，也可以像其他npm配置一样被管理，详见npm的config文档。 对于一些跨平台的构建任务，例如把coffeescript编译成javascript，就可以通过在package.json的script属性里边配置prepublish脚本来完成这个任务，然后需要依赖的coffee-script模块就写在devdependencies属性种。 例如:\n\n{ "name": "ethopia-waza",\n  "description": "a delightfully fruity coffee varietal",\n  "version": "1.2.3",\n  "devdependencies": {\n    "coffee-script": "~1.6.3"\n  },\n  "scripts": {\n    "prepublish": "coffee -o lib/ -c src/waza.coffee"\n  },\n  "main": "lib/waza.js"\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\nprepublish脚本会在发布之前运行，因此用户在使用之前就不用再自己去完成编译的过程了。在开发模式下，运行npm install也会执行这个脚本（见npm script文档），因此可以很方便的调试。\n\n\n# peerdependencies\n\n有时候做一些插件开发，比如grunt等工具的插件，它们往往是在grunt的某个版本的基础上开发的，而在他们的代码中并不会出现require("grunt")这样的依赖，dependencies配置里边也不会写上grunt的依赖，为了说明此模块只能作为插件跑在宿主的某个版本范围下，可以配置peerdependencies：\n\n{\n  "name": "tea-latte",\n  "version": "1.3.5",\n  "peerdependencies": {\n    "tea": "2.x"\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面这个配置确保再npm install的时候tea-latte会和2.x版本的tea一起安装，而且它们两个的依赖关系是同级的： ├── tea-latte@1.3.5 └── tea@2.2.0 这个配置的目的是让npm知道，如果要使用此插件模块，请确保安装了兼容版本的宿主模块。\n\n\n# bundleddependencies\n\n上面的单词少个d，写成bundledependencies也可以。 指定发布的时候会被一起打包的模块。\n\n\n# optionaldependencies\n\n如果一个依赖模块可以被使用， 同时你也希望在该模块找不到或无法获取时npm继续运行，你可以把这个模块依赖放到optionaldependencies配置中。这个配置的写法和dependencies的写法一样，不同的是这里边写的模块安装失败不会导致npm install失败。 当然，这种模块就需要你自己在代码中处理模块确实的情况了，例如：\n\ntry {\n  var foo = require(\'foo\')\n  var fooversion = require(\'foo/package.json\').version\n} catch (er) {\n  foo = null\n}\nif ( notgoodfooversion(fooversion) ) {\n  foo = null\n}\n\n// .. then later in your program ..\n\nif (foo) {\n  foo.dofoothings()\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\noptionaldependencies 中的配置会覆盖dependencies中的配置，最好只在一个地方写。\n\n\n# engines\n\n你可以指定项目运行的node版本范围，如下： { "engines" : { "node" : ">=0.10.3 <0.12" } } 和dependencies一样，如果你不指定版本范围或者指定为*，任何版本的node都可以。 也可以指定一些npm版本可以正确的安装你的模块，例如： { "engines" : { "npm" : "~1.0.20" } } 要注意的是，除非你设置了engine-strict属性，engines属性是仅供参考的。\n\n\n# enginestrict\n\n注意：这个属性已经弃用，将在npm 3.0.0 版本干掉。\n\n\n# os\n\n可以指定你的模块只能在哪个操作系统上跑： "os" : [ "darwin", "linux" ] 也可以指定黑名单而不是白名单： "os" : [ "!win32" ] 服务的操作系统是由process.platform来判断的，这个属性允许黑白名单同时存在，虽然没啥必要这样搞...\n\n\n# cpu\n\n限制模块只能在某某cpu架构下运行 "cpu" : [ "x64", "ia32" ] 同样可以设置黑名单: "cpu" : [ "!arm", "!mips" ] cpu架构通过 process.arch 判断\n\n\n# preferglobal\n\n如果您的软件包主要用于安装到全局的命令行应用程序，那么该值设置为true ，如果它被安装在本地，则提供一个警告。实际上该配置并没有阻止用户把模块安装到本地，只是防止该模块被错误的使用引起一些问题。\n\n\n# private\n\n如果这个属性被设置为true，npm将拒绝发布它，这是为了防止一个私有模块被无意间发布出去。如果你只想让模块被发布到一个特定的npm仓库，如一个内部的仓库，可与在下面的publishconfig中配置仓库参数。\n\n\n# publishconfig\n\n这个配置是会在模块发布时用到的一些值的集合。如果你不想模块被默认被标记为最新的，或者默认发布到公共仓库，可以在这里配置tag或仓库地址。\n\n\n# default values\n\nnpm设置了一些默认参数，如： "scripts": {"start": "node server.js"} 如果模块根目录下有一个server.js文件，那么npm start会默认运行这个文件。 "scripts":{"preinstall": "node-gyp rebuild"} 如果模块根目录下有binding.gyp, npm将默认用node-gyp来编译preinstall的脚本 "contributors": [...] 若模块根目录下有authors 文件，则npm会按name (url)格式解析每一行的数据添加到contributors中，可以用#添加行注释\n\n\n# 参考文档列表(https://docs.npmjs.com/)\n\nsemver(7) npm-init(1) npm-version(1) npm-config(1) npm-config(7) npm-help(1) npm-faq(7) npm-install(1) npm-publish(1) npm-rm(1)',charsets:{cjk:!0},lastUpdated:"2022/04/11, 10:49:20",lastUpdatedTimestamp:164964536e4},{title:"yaml语言教程",frontmatter:{title:"yaml语言教程",date:"2019-12-25T14:27:01.000Z",permalink:"/pages/4e8444e2d534d14f",categories:["技术","技术文档"],tags:[null],author:{name:"xugaoyi",link:"https://github.com/xugaoyi"}},regularPath:"/04.%E6%8A%80%E6%9C%AF/01.%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/15.yaml%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B.html",relativePath:"04.技术/01.技术文档/15.yaml语言教程.md",key:"v-ea16c700",path:"/pages/4e8444e2d534d14f/",headers:[{level:2,title:"简介",slug:"简介",normalizedTitle:"简介",charIndex:15},{level:2,title:"基本语法",slug:"基本语法",normalizedTitle:"基本语法",charIndex:326},{level:2,title:"数据类型",slug:"数据类型",normalizedTitle:"数据类型",charIndex:422},{level:2,title:"YAML 对象",slug:"yaml-对象",normalizedTitle:"yaml 对象",charIndex:576},{level:2,title:"YAML 数组",slug:"yaml-数组",normalizedTitle:"yaml 数组",charIndex:1086},{level:2,title:"复合结构（对象和数组组合）",slug:"复合结构-对象和数组组合",normalizedTitle:"复合结构（对象和数组组合）",charIndex:1594},{level:2,title:"纯量",slug:"纯量",normalizedTitle:"纯量",charIndex:549},{level:2,title:"转换数据格式",slug:"转换数据格式",normalizedTitle:"转换数据格式",charIndex:3050},{level:2,title:"锚点引用",slug:"锚点引用",normalizedTitle:"锚点引用",charIndex:3157}],excerpt:'<h1 id="yaml语言教程"><a class="header-anchor" href="#yaml语言教程">#</a> yaml语言教程</h1>\n<h2 id="简介"><a class="header-anchor" href="#简介">#</a> 简介</h2>\n<p>YAML 是 &quot;YAML Ain\'t a Markup Language&quot;（YAML 不是一种标记语言）的递归缩写。在开发的这种语言时，YAML 的意思其实是：&quot;Yet Another Markup Language&quot;（仍是一种标记语言）。</p>\n',headersStr:"简介 基本语法 数据类型 YAML 对象 YAML 数组 复合结构（对象和数组组合） 纯量 转换数据格式 锚点引用",content:"# yaml语言教程\n\n\n# 简介\n\nYAML 是 \"YAML Ain't a Markup Language\"（YAML 不是一种标记语言）的递归缩写。在开发的这种语言时，YAML 的意思其实是：\"Yet Another Markup Language\"（仍是一种标记语言）。\n\nYAML 的语法和其他高级语言类似，并且可以简单表达清单、散列表，标量等数据形态。它使用空白符号缩进和大量依赖外观的特色，特别适合用来表达或编辑数据结构、各种配置文件、倾印调试内容、文件大纲（例如：许多电子邮件标题格式和YAML非常接近）。\n\nYAML 的配置文件后缀为 .yml，如：runoob.yml 。\n\n> yaml常用来用作配置文件，和json类似\n\n\n# 基本语法\n\n * 大小写敏感\n\n * 使用缩进表示层级关系\n\n * 缩进不允许使用tab，只允许空格\n\n * 缩进的空格数不重要，只要相同层级的元素左对齐即可\n\n * '#'表示注释\n\n\n# 数据类型\n\nYAML 支持以下几种数据类型：\n\n * 对象：键值对的集合，又称为映射（mapping）/ 哈希（hashes） / 字典（dictionary）\n * 数组：一组按次序排列的值，又称为序列（sequence） / 列表（list）\n * 纯量（scalars）：单个的、不可再分的值\n\n\n# YAML 对象\n\n对象的几种表示形式：\n\n1、对象键值对使用冒号结构表示 key: value，冒号后面要加一个空格。\n\nkey: value\n\n\n1\n\n\n2、也可以使用 key:{key1: value1, key2: value2, ...}。\n\nkey:{child-key1:value1,child-key2:value2}\n\n\n1\n\n\n3、还可以使用缩进表示层级关系；\n\nkey: \n    child-key1: value1\n    child-key2: value2\n\n\n1\n2\n3\n\n\n同2，只是表示形式不同。\n\n4、较为复杂的对象格式，可以使用问号加一个空格代表一个复杂的 key，配合一个冒号加一个空格代表一个 value：\n\n?  \n    - complexkey1\n    - complexkey2\n:\n    - complexvalue1\n    - complexvalue2\n\n\n1\n2\n3\n4\n5\n6\n\n\n意思即对象的属性是一个数组 [complexkey1,complexkey2]，对应的值也是一个数组 [complexvalue1,complexvalue2]\n\n\n# YAML 数组\n\n以 - 开头的行表示构成一个数组：\n\n- A\n- B\n- C\n\n\n1\n2\n3\n\n\nYAML 支持多维数组，可以使用行内表示：\n\nkey: [value1, value2, ...]\n\n\n1\n\n\n数据结构的子成员是一个数组，则可以在该项下面缩进一个空格。\n\n-\n - A\n - B\n - C\n\n\n1\n2\n3\n4\n\n\n一个相对复杂的例子：\n\ncompanies:\n    -\n        id: 1\n        name: company1\n        price: 200W\n    -\n        id: 2\n        name: company2\n        price: 500W\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n意思是 companies 属性是一个数组，每一个数组元素又是由 id、name、price 三个属性构成。\n\n数组也可以使用流式(flow)的方式表示：\n\ncompanies: [{id: 1,name: company1,price: 200W},{id: 2,name: company2,price: 500W}]\n\n\n1\n\n\n\n# 复合结构（对象和数组组合）\n\n数组和对象可以构成复合结构，例：\n\nlanguages:\n  - Ruby\n  - Perl\n  - Python \nwebsites:\n  YAML: yaml.org \n  Ruby: ruby-lang.org \n  Python: python.org \n  Perl: use.perl.org\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n转换为 js 为：\n\n{ \n  languages: [ 'Ruby', 'Perl', 'Python'],\n  websites: {\n    YAML: 'yaml.org',\n    Ruby: 'ruby-lang.org',\n    Python: 'python.org',\n    Perl: 'use.perl.org' \n  } \n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 纯量\n\n纯量是最基本的，不可再分的值，包括：\n\n * 字符串\n * 布尔值\n * 整数\n * 浮点数\n * Null\n * 时间\n * 日期\n\n使用一个例子来快速了解纯量的基本使用：\n\nboolean: # 布尔值\n    - TRUE  #true,True都可以\n    - FALSE  #false，False都可以\nfloat: # 浮点数\n    - 3.14\n    - 6.8523015e+5  #可以使用科学计数法\nint: # 整数\n    - 123\n    - 0b1010_0111_0100_1010_1110    #二进制表示\nnull: # Null\n    nodeName: 'node'\n    parent: ~  #使用~表示null\nstring: # 字符串\n    - 哈哈 # 字符串默认不使用引号表示\n    - 'Hello world'  #可以使用双引号或者单引号包裹特殊字符\n    - newline\n      newline2    #字符串可以拆成多行，每一行会被转化成一个空格\ndate:\n    - 2018-02-17    #日期必须使用ISO 8601格式，即yyyy-MM-dd\ndatetime: \n    -  2018-02-17T15:02:31+08:00    #时间使用ISO 8601格式，时间和日期之间使用T连接，最后使用+代表时区\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n多行字符串可以使用|保留换行符，也可以使用>折叠换行。\n\nthis: |\n  Foo\n  Bar\nthat: >\n  Foo\n  Bar\n\n\n1\n2\n3\n4\n5\n6\n\n\n转为js代码如下。\n\n{ this: 'Foo\\nBar\\n', that: 'Foo Bar\\n' }\n\n\n1\n\n\n+表示保留文字块末尾的换行，-表示删除字符串末尾的换行。\n\ns1: |\n  Foo\n \ns2: |+\n  Foo\n \n \ns3: |-\n  Foo\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n转为json代码如下\n\n{ s1: 'Foo\\n', s2: 'Foo\\n\\n\\n', s3: 'Foo' }\n\n\n1\n\n\n字符串之中可以插入 HTML 标记。\n\nmessage: |\n  <p style=\"color: red\">\n    段落\n  </p>\n\n\n1\n2\n3\n4\n\n\n\n# 转换数据格式\n\n允许使用两个感叹号，强制转换数据类型。\n\ne: !!str 123\nf: !!str true\n\n\n1\n2\n\n\n转换js结果同：\n\n{ e: '123', f: 'true' }\n\n\n1\n\n\n\n# 锚点引用\n\n& 锚点和< span class=\"marked\">* 别名，可以用来引用:\n\ndefaults: &defaults # 添加锚点\n  adapter:  postgres\n  host:     localhost\n\ndevelopment:\n  database: myapp_development\n  <<: *defaults # <<表示合并，*引用锚点\n\ntest:\n  database: myapp_test\n  <<: *defaults # <<表示合并，*引用锚点\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n相当于:\n\ndefaults:\n  adapter:  postgres\n  host:     localhost\n\ndevelopment:\n  database: myapp_development\n  adapter:  postgres\n  host:     localhost\n\ntest:\n  database: myapp_test\n  adapter:  postgres\n  host:     localhost\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n& 用来建立锚点（defaults），<< 表示合并到当前数据，***** 用来引用锚点。\n\n下面是另一个例子:\n\n- &showell Steve \n- Clark \n- Brian \n- Oren \n- *showell \n\n\n1\n2\n3\n4\n5\n\n\n转为js代码如下:\n\n[ 'Steve', 'Clark', 'Brian', 'Oren', 'Steve' ]\n\n\n1\n\n\n> 参考：\n> \n>  * yaml官网：https://yaml.org/\n>  * yaml与js的转换demo：http://nodeca.github.io/js-yaml/\n>  * 菜鸟教程：https://www.ruanyifeng.com/blog/2016/07/yaml.html",normalizedContent:"# yaml语言教程\n\n\n# 简介\n\nyaml 是 \"yaml ain't a markup language\"（yaml 不是一种标记语言）的递归缩写。在开发的这种语言时，yaml 的意思其实是：\"yet another markup language\"（仍是一种标记语言）。\n\nyaml 的语法和其他高级语言类似，并且可以简单表达清单、散列表，标量等数据形态。它使用空白符号缩进和大量依赖外观的特色，特别适合用来表达或编辑数据结构、各种配置文件、倾印调试内容、文件大纲（例如：许多电子邮件标题格式和yaml非常接近）。\n\nyaml 的配置文件后缀为 .yml，如：runoob.yml 。\n\n> yaml常用来用作配置文件，和json类似\n\n\n# 基本语法\n\n * 大小写敏感\n\n * 使用缩进表示层级关系\n\n * 缩进不允许使用tab，只允许空格\n\n * 缩进的空格数不重要，只要相同层级的元素左对齐即可\n\n * '#'表示注释\n\n\n# 数据类型\n\nyaml 支持以下几种数据类型：\n\n * 对象：键值对的集合，又称为映射（mapping）/ 哈希（hashes） / 字典（dictionary）\n * 数组：一组按次序排列的值，又称为序列（sequence） / 列表（list）\n * 纯量（scalars）：单个的、不可再分的值\n\n\n# yaml 对象\n\n对象的几种表示形式：\n\n1、对象键值对使用冒号结构表示 key: value，冒号后面要加一个空格。\n\nkey: value\n\n\n1\n\n\n2、也可以使用 key:{key1: value1, key2: value2, ...}。\n\nkey:{child-key1:value1,child-key2:value2}\n\n\n1\n\n\n3、还可以使用缩进表示层级关系；\n\nkey: \n    child-key1: value1\n    child-key2: value2\n\n\n1\n2\n3\n\n\n同2，只是表示形式不同。\n\n4、较为复杂的对象格式，可以使用问号加一个空格代表一个复杂的 key，配合一个冒号加一个空格代表一个 value：\n\n?  \n    - complexkey1\n    - complexkey2\n:\n    - complexvalue1\n    - complexvalue2\n\n\n1\n2\n3\n4\n5\n6\n\n\n意思即对象的属性是一个数组 [complexkey1,complexkey2]，对应的值也是一个数组 [complexvalue1,complexvalue2]\n\n\n# yaml 数组\n\n以 - 开头的行表示构成一个数组：\n\n- a\n- b\n- c\n\n\n1\n2\n3\n\n\nyaml 支持多维数组，可以使用行内表示：\n\nkey: [value1, value2, ...]\n\n\n1\n\n\n数据结构的子成员是一个数组，则可以在该项下面缩进一个空格。\n\n-\n - a\n - b\n - c\n\n\n1\n2\n3\n4\n\n\n一个相对复杂的例子：\n\ncompanies:\n    -\n        id: 1\n        name: company1\n        price: 200w\n    -\n        id: 2\n        name: company2\n        price: 500w\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n意思是 companies 属性是一个数组，每一个数组元素又是由 id、name、price 三个属性构成。\n\n数组也可以使用流式(flow)的方式表示：\n\ncompanies: [{id: 1,name: company1,price: 200w},{id: 2,name: company2,price: 500w}]\n\n\n1\n\n\n\n# 复合结构（对象和数组组合）\n\n数组和对象可以构成复合结构，例：\n\nlanguages:\n  - ruby\n  - perl\n  - python \nwebsites:\n  yaml: yaml.org \n  ruby: ruby-lang.org \n  python: python.org \n  perl: use.perl.org\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n转换为 js 为：\n\n{ \n  languages: [ 'ruby', 'perl', 'python'],\n  websites: {\n    yaml: 'yaml.org',\n    ruby: 'ruby-lang.org',\n    python: 'python.org',\n    perl: 'use.perl.org' \n  } \n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 纯量\n\n纯量是最基本的，不可再分的值，包括：\n\n * 字符串\n * 布尔值\n * 整数\n * 浮点数\n * null\n * 时间\n * 日期\n\n使用一个例子来快速了解纯量的基本使用：\n\nboolean: # 布尔值\n    - true  #true,true都可以\n    - false  #false，false都可以\nfloat: # 浮点数\n    - 3.14\n    - 6.8523015e+5  #可以使用科学计数法\nint: # 整数\n    - 123\n    - 0b1010_0111_0100_1010_1110    #二进制表示\nnull: # null\n    nodename: 'node'\n    parent: ~  #使用~表示null\nstring: # 字符串\n    - 哈哈 # 字符串默认不使用引号表示\n    - 'hello world'  #可以使用双引号或者单引号包裹特殊字符\n    - newline\n      newline2    #字符串可以拆成多行，每一行会被转化成一个空格\ndate:\n    - 2018-02-17    #日期必须使用iso 8601格式，即yyyy-mm-dd\ndatetime: \n    -  2018-02-17t15:02:31+08:00    #时间使用iso 8601格式，时间和日期之间使用t连接，最后使用+代表时区\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n多行字符串可以使用|保留换行符，也可以使用>折叠换行。\n\nthis: |\n  foo\n  bar\nthat: >\n  foo\n  bar\n\n\n1\n2\n3\n4\n5\n6\n\n\n转为js代码如下。\n\n{ this: 'foo\\nbar\\n', that: 'foo bar\\n' }\n\n\n1\n\n\n+表示保留文字块末尾的换行，-表示删除字符串末尾的换行。\n\ns1: |\n  foo\n \ns2: |+\n  foo\n \n \ns3: |-\n  foo\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n转为json代码如下\n\n{ s1: 'foo\\n', s2: 'foo\\n\\n\\n', s3: 'foo' }\n\n\n1\n\n\n字符串之中可以插入 html 标记。\n\nmessage: |\n  <p style=\"color: red\">\n    段落\n  </p>\n\n\n1\n2\n3\n4\n\n\n\n# 转换数据格式\n\n允许使用两个感叹号，强制转换数据类型。\n\ne: !!str 123\nf: !!str true\n\n\n1\n2\n\n\n转换js结果同：\n\n{ e: '123', f: 'true' }\n\n\n1\n\n\n\n# 锚点引用\n\n& 锚点和< span class=\"marked\">* 别名，可以用来引用:\n\ndefaults: &defaults # 添加锚点\n  adapter:  postgres\n  host:     localhost\n\ndevelopment:\n  database: myapp_development\n  <<: *defaults # <<表示合并，*引用锚点\n\ntest:\n  database: myapp_test\n  <<: *defaults # <<表示合并，*引用锚点\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n相当于:\n\ndefaults:\n  adapter:  postgres\n  host:     localhost\n\ndevelopment:\n  database: myapp_development\n  adapter:  postgres\n  host:     localhost\n\ntest:\n  database: myapp_test\n  adapter:  postgres\n  host:     localhost\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n& 用来建立锚点（defaults），<< 表示合并到当前数据，***** 用来引用锚点。\n\n下面是另一个例子:\n\n- &showell steve \n- clark \n- brian \n- oren \n- *showell \n\n\n1\n2\n3\n4\n5\n\n\n转为js代码如下:\n\n[ 'steve', 'clark', 'brian', 'oren', 'steve' ]\n\n\n1\n\n\n> 参考：\n> \n>  * yaml官网：https://yaml.org/\n>  * yaml与js的转换demo：http://nodeca.github.io/js-yaml/\n>  * 菜鸟教程：https://www.ruanyifeng.com/blog/2016/07/yaml.html",charsets:{cjk:!0},lastUpdated:"2022/04/11, 10:49:20",lastUpdatedTimestamp:164964536e4},{title:"Git介绍",frontmatter:{title:"Git介绍",date:"2021-07-23T18:48:08.000Z",permalink:"/pages/baf5f9/",categories:["Git"],tags:["Git"]},regularPath:"/04.%E6%8A%80%E6%9C%AF/02.Git/00.Git%E4%BB%8B%E7%BB%8D.html",relativePath:"04.技术/02.Git/00.Git介绍.md",key:"v-e9028434",path:"/pages/baf5f9/",headers:[{level:2,title:"作用",slug:"作用",normalizedTitle:"作用",charIndex:132},{level:2,title:"Git工作流程",slug:"git工作流程",normalizedTitle:"git工作流程",charIndex:299}],headersStr:"作用 Git工作流程",content:"# 介绍\n\nGit是一个免费开源的分布式版本控制软件。\n\nGit项目由Linux创始人Linus-Torvalds(林纳斯-托瓦兹)发起，为主要开发者。\n\n> 有趣的是，Git似乎是Linus-Torvalds为了方便维护Linux这个开源项目而诞生的。\n\n\n# 作用\n\n 1. 版本控制\n    \n    保留一切历史，可以让代码迅速恢复到你想指定的commit位置。\n\n 2. 协作开发\n    \n    在自己电脑上使用Git，确实有版本控制功能，但没有协作开发功能。 如果要实现协作开发，大家就要把每次写的东西放到基于Git的一个平台，如Github、GitLab、Gitee……\n\n\n# Git工作流程\n\n> 一般工作流程如下：\n> \n>  * 克隆 Git 资源作为工作目录。\n> \n>  * 在克隆的资源上添加或修改文件。\n> \n>  * 如果其他人修改了，你可以更新资源。\n> \n>  * 在提交前查看修改。\n> \n>  * 提交修改。\n> \n>  * 在修改完成后，如果发现错误，可以撤回提交并再次修改并提交。\n\n\n# 链接\n\nGit官网\n\nGit简明指南",normalizedContent:"# 介绍\n\ngit是一个免费开源的分布式版本控制软件。\n\ngit项目由linux创始人linus-torvalds(林纳斯-托瓦兹)发起，为主要开发者。\n\n> 有趣的是，git似乎是linus-torvalds为了方便维护linux这个开源项目而诞生的。\n\n\n# 作用\n\n 1. 版本控制\n    \n    保留一切历史，可以让代码迅速恢复到你想指定的commit位置。\n\n 2. 协作开发\n    \n    在自己电脑上使用git，确实有版本控制功能，但没有协作开发功能。 如果要实现协作开发，大家就要把每次写的东西放到基于git的一个平台，如github、gitlab、gitee……\n\n\n# git工作流程\n\n> 一般工作流程如下：\n> \n>  * 克隆 git 资源作为工作目录。\n> \n>  * 在克隆的资源上添加或修改文件。\n> \n>  * 如果其他人修改了，你可以更新资源。\n> \n>  * 在提交前查看修改。\n> \n>  * 提交修改。\n> \n>  * 在修改完成后，如果发现错误，可以撤回提交并再次修改并提交。\n\n\n# 链接\n\ngit官网\n\ngit简明指南",charsets:{cjk:!0},lastUpdated:"2022/04/11, 19:01:34",lastUpdatedTimestamp:1649674894e3},{title:"《Git》学习笔记",frontmatter:{pageComponent:{name:"Catalogue",data:{path:"《Git》学习笔记",imgUrl:"https://avatars3.githubusercontent.com/u/18133?s=200&v=4",description:"<a href='https://git-scm.com/book/zh/v2' target='_blank'>Git官网文档</a>的学习笔记，以官方文档为准。"}},title:"《Git》学习笔记",date:"2020-11-18T17:40:48.000Z",permalink:"/note/git",article:!1,comment:!1,editLink:!1,author:{name:"xugaoyi",link:"https://github.com/xugaoyi"}},regularPath:"/04.%E6%8A%80%E6%9C%AF/02.Git/33.%E3%80%8AGit%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html",relativePath:"04.技术/02.Git/33.《Git》学习笔记.md",key:"v-28192474",path:"/note/git/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/04/11, 18:22:27",lastUpdatedTimestamp:1649672547e3},{title:"GitHub高级搜索技巧",frontmatter:{title:"GitHub高级搜索技巧",date:"2019-12-25T14:27:01.000Z",permalink:"/pages/4c778760be26d8b3",categories:["技术","GitHub技巧"],tags:[null],author:{name:"xugaoyi",link:"https://github.com/xugaoyi"}},regularPath:"/04.%E6%8A%80%E6%9C%AF/22.GitHub%E6%8A%80%E5%B7%A7/01.GitHub%E9%AB%98%E7%BA%A7%E6%90%9C%E7%B4%A2%E6%8A%80%E5%B7%A7.html",relativePath:"04.技术/22.GitHub技巧/01.GitHub高级搜索技巧.md",key:"v-ad47ee68",path:"/pages/4c778760be26d8b3/",excerpt:'<h1 id="github高级搜索技巧"><a class="header-anchor" href="#github高级搜索技巧">#</a> GitHub高级搜索技巧</h1>\n<p><code>in:name &lt;关键字&gt;</code>\n仓库名称带关键字查询</p>\n<p><code>in:description &lt;关键字&gt;</code>\n仓库描述带关键字查询</p>\n<p><code>in:readme &lt;关键字&gt;</code>\nREADME文件带关键字查询</p>\n',headersStr:null,content:'# GitHub高级搜索技巧\n\nin:name <关键字> 仓库名称带关键字查询\n\nin:description <关键字> 仓库描述带关键字查询\n\nin:readme <关键字> README文件带关键字查询\n\nstars(fork): >(=) <数字> <关键字> star或fork数大于(或等于)指定数字的带关键字查询\n\nstars(fork): 10..20 <关键词> star或fork数在10到20之间的带关键字查询\n\nsize:>=5000 <关键词> 限定仓库大于等于5000K的带关键字查询\n\npushed(created):>2019-11-15 <关键字> 更新 或 创建 日期在2019年11月16日之后的带关键字查询\n\nlicense:apache-2.0 <关键字> LICENSE为apache-2.0的带关键字查询\n\nlanguage:java <关键词> 仓库语言为Java的带关键字查询\n\nuser:<用户名> 查询某个用户的项目\n\norg:<组织名> 查询某个组织的项目\n\n*以上查询条件可组合使用，空格隔开\n\n# 示例1：搜索仓库名包含javascript，并且stars数大于1000的项目\nin:name javascript stars:>1000\n\n# 示例2：搜索描述中包含"小程序"，并且fork大于100，并且最近更新时间在2019-11-15之后的，并且使用开发语言为vue的项目\nin:description 小程序 fork:>100 pushed:>2019-11-15 language:vue\n\n\n1\n2\n3\n4\n5\n\n\n*或使用高级搜索页搜索：\n\nhttps://github.com/search/advanced',normalizedContent:'# github高级搜索技巧\n\nin:name <关键字> 仓库名称带关键字查询\n\nin:description <关键字> 仓库描述带关键字查询\n\nin:readme <关键字> readme文件带关键字查询\n\nstars(fork): >(=) <数字> <关键字> star或fork数大于(或等于)指定数字的带关键字查询\n\nstars(fork): 10..20 <关键词> star或fork数在10到20之间的带关键字查询\n\nsize:>=5000 <关键词> 限定仓库大于等于5000k的带关键字查询\n\npushed(created):>2019-11-15 <关键字> 更新 或 创建 日期在2019年11月16日之后的带关键字查询\n\nlicense:apache-2.0 <关键字> license为apache-2.0的带关键字查询\n\nlanguage:java <关键词> 仓库语言为java的带关键字查询\n\nuser:<用户名> 查询某个用户的项目\n\norg:<组织名> 查询某个组织的项目\n\n*以上查询条件可组合使用，空格隔开\n\n# 示例1：搜索仓库名包含javascript，并且stars数大于1000的项目\nin:name javascript stars:>1000\n\n# 示例2：搜索描述中包含"小程序"，并且fork大于100，并且最近更新时间在2019-11-15之后的，并且使用开发语言为vue的项目\nin:description 小程序 fork:>100 pushed:>2019-11-15 language:vue\n\n\n1\n2\n3\n4\n5\n\n\n*或使用高级搜索页搜索：\n\nhttps://github.com/search/advanced',charsets:{cjk:!0},lastUpdated:"2022/04/11, 18:22:27",lastUpdatedTimestamp:1649672547e3},{title:"GitHub Actions 实现自动部署静态博客",frontmatter:{title:"GitHub Actions 实现自动部署静态博客",date:"2019-12-27T11:44:41.000Z",permalink:"/pages/6b9d359ec5aa5019",categories:["技术","GitHub技巧"],tags:[null],author:{name:"xugaoyi",link:"https://github.com/xugaoyi"}},regularPath:"/04.%E6%8A%80%E6%9C%AF/22.GitHub%E6%8A%80%E5%B7%A7/02.GitHub%20Actions%20%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2.html",relativePath:"04.技术/22.GitHub技巧/02.GitHub Actions 实现自动部署静态博客.md",key:"v-3ddb7a44",path:"/pages/6b9d359ec5aa5019/",headers:[{level:2,title:"前言",slug:"前言",normalizedTitle:"前言",charIndex:32},{level:2,title:"实现",slug:"实现",normalizedTitle:"实现",charIndex:17},{level:2,title:"相关文章",slug:"相关文章",normalizedTitle:"相关文章",charIndex:3449}],excerpt:'<h1 id="github-actions-实现自动部署静态博客"><a class="header-anchor" href="#github-actions-实现自动部署静态博客">#</a> GitHub Actions 实现自动部署静态博客</h1>\n<h2 id="前言"><a class="header-anchor" href="#前言">#</a> 前言</h2>\n<p>我使用vuepress搭建了一个静态博客，挂在了Github pages和<a href="https://dev.tencent.com/" target="_blank" rel="noopener noreferrer">Coding pages<OutboundLink/></a>上面。</p>\n<p>coding pages在国内的访问速度比github pages要快很多，而且还可以被百度收录。</p>\n',headersStr:"前言 实现 相关文章",content:'# GitHub Actions 实现自动部署静态博客\n\n\n# 前言\n\n我使用vuepress搭建了一个静态博客，挂在了Github pages和Coding pages上面。\n\ncoding pages在国内的访问速度比github pages要快很多，而且还可以被百度收录。\n\n一开始的部署方式是使用sh部署脚本把代码提交到这两个平台的仓库分支，虽然已经很方便了，但是我还想把博客未打包的源码提交到Github主分支上。这就需要我操作两次命令，我就想能不能只需要一次操作就可以同时把源码、部署代码一次性提交到两个平台呢？\n\n\n# 实现\n\n在了解GitHub Actions最近（2019.12）刚正式发布了之后，尝试使用它发现能够满足我的需求。GitHub Actions 入门教程\n\n首先，需要获取token，后面会用到。获取方法：github获取token官方文档、coding获取token官方文档。\n\n然后，将这两个token同时储存到github仓库的Settings/Secrets里面。变量名可以随便取，但是注意要和后面的ci.yml文件内的变量名一致，这里取的是ACCESS_TOKEN和CODING_TOKEN。\n\n\n\nGitHub Actions 的配置文件叫做 workflow 文件，存放在代码仓库的.github/workflows目录。\n\nworkflow 文件采用 YAML 格式，文件名可以任意取，但是后缀名统一为.yml，比如ci.yml。一个库可以有多个 workflow 文件。GitHub 只要发现.github/workflows目录里面有.yml文件，就会自动运行该文件。\n\n我的ci.yml文件：\n\nname: CI\n\n# 在master分支发生push事件时触发。\non: \n  push:\n    branches:\n      - master\njobs: # 工作流\n  build:\n    runs-on: ubuntu-latest #运行在虚拟机环境ubuntu-latest\n\n    strategy:\n      matrix:\n        node-version: [10.x]\n\n    steps: \n      - name: Checkout # 步骤1\n        uses: actions/checkout@v1 # 使用的动作。格式：userName/repoName。作用：检出仓库，获取源码。 官方actions库：https://github.com/actions\n      - name: Use Node.js ${{ matrix.node-version }} # 步骤2\n        uses: actions/setup-node@v1 # 作用：安装nodejs\n        with:\n          node-version: ${{ matrix.node-version }} # 版本\n      - name: run deploy.sh # 步骤3 （同时部署到github和coding）\n        env: # 设置环境变量\n          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }} # toKen私密变量\n          CODING_TOKEN: ${{ secrets.CODING_TOKEN }} # 腾讯云开发者平台（coding）私密token\n        run: npm install && npm run deploy # 执行的命令  \n        # package.json 中添加 "deploy": "bash deploy.sh"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\n这个配置文件会在我push提交代码到主分支时触发工作，运行环境是ubuntu-latest，工作步骤：\n\n * 一，获取仓库源码\n\n * 二，安装nodejs，打包项目有用到nodejs\n\n * 三，把token设置到环境变量，安装项目依赖，并运行deploy.sh文件，\n\n> ACCESS_TOKE 和 CODING_TOKEN 都是保存在github仓库的Settings/Secrets位置的私密变量，仓库代码中可以通过<secrets.变量名>来获取，保证了token的私密性。\n\n再来看看将要被运行的deploy.sh部署代码：\n\n#!/usr/bin/env sh\n# 确保脚本抛出遇到的错误\nset -e\nnpm run build # 生成静态文件\ncd docs/.vuepress/dist # 进入生成的文件夹\n\n# deploy to github\necho \'blog.xugaoyi.com\' > CNAME\nif [ -z "$GITHUB_TOKEN" ]; then\n  msg=\'deploy\'\n  githubUrl=git@github.com:xugaoyi/blog.git\nelse\n  msg=\'来自github action的自动部署\'\n  githubUrl=https://xugaoyi:${GITHUB_TOKEN}@github.com/xugaoyi/blog.git\n  git config --global user.name "xugaoyi"\n  git config --global user.email "894072666@qq.com"\nfi\ngit init\ngit add -A\ngit commit -m "${msg}"\ngit push -f $githubUrl master:gh-pages # 推送到github\n\n# deploy to coding\necho \'www.xugaoyi.com\\nxugaoyi.com\' > CNAME  # 自定义域名\nif [ -z "$CODING_TOKEN" ]; then  # -z 字符串 长度为0则为true；$CODING_TOKEN来自于github仓库`Settings/Secrets`设置的私密环境变量\n  codingUrl=git@git.dev.tencent.com:xugaoyi/xugaoyi.git\nelse\n  codingUrl=https://xugaoyi:${CODING_TOKEN}@git.dev.tencent.com/xugaoyi/xugaoyi.git\nfi\ngit add -A\ngit commit -m "${msg}"\ngit push -f $codingUrl master # 推送到coding\n\ncd -\nrm -rf docs/.vuepress/dist\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n\n\n这个文件使用Shell命令写的，它会先运行打包命令，进入打包好的文件，创建一个自定义域名的CNAME文件（如果你没有自定义域名可去掉这个命令），判断是否有token环境变量，如果没有说明是在本地自己的电脑上运行的部署，使用ssh代码仓库地址，如果有token环境变量，说明是GitHub Actions自动触发的部署，此时使用的是可以通过toKen来获取代码提交权限的提交地址。最后通过git命令提交到各自的仓库，完成部署。\n\n> 提示：\n> \n>  * Shell 可以获取到环境变量。\n> \n>  * 我想给两个平台上部署的博客不一样的自定义域名，因此做了分开创建CNAME文件，分开提交。\n\n至此，我前面提到的需求就实现啦，只需要把源码push到github仓库这一个步骤，后面的博客打包、部署到github和coding等工作都由GitHub Actions来自动完成。\n\n如下你想查看部署日志，你可以到github仓库的Actions这一项查看。\n\n\n\n\n# 相关文章\n\n《GitHub Actions 定时运行代码：每天定时百度链接推送》',normalizedContent:'# github actions 实现自动部署静态博客\n\n\n# 前言\n\n我使用vuepress搭建了一个静态博客，挂在了github pages和coding pages上面。\n\ncoding pages在国内的访问速度比github pages要快很多，而且还可以被百度收录。\n\n一开始的部署方式是使用sh部署脚本把代码提交到这两个平台的仓库分支，虽然已经很方便了，但是我还想把博客未打包的源码提交到github主分支上。这就需要我操作两次命令，我就想能不能只需要一次操作就可以同时把源码、部署代码一次性提交到两个平台呢？\n\n\n# 实现\n\n在了解github actions最近（2019.12）刚正式发布了之后，尝试使用它发现能够满足我的需求。github actions 入门教程\n\n首先，需要获取token，后面会用到。获取方法：github获取token官方文档、coding获取token官方文档。\n\n然后，将这两个token同时储存到github仓库的settings/secrets里面。变量名可以随便取，但是注意要和后面的ci.yml文件内的变量名一致，这里取的是access_token和coding_token。\n\n\n\ngithub actions 的配置文件叫做 workflow 文件，存放在代码仓库的.github/workflows目录。\n\nworkflow 文件采用 yaml 格式，文件名可以任意取，但是后缀名统一为.yml，比如ci.yml。一个库可以有多个 workflow 文件。github 只要发现.github/workflows目录里面有.yml文件，就会自动运行该文件。\n\n我的ci.yml文件：\n\nname: ci\n\n# 在master分支发生push事件时触发。\non: \n  push:\n    branches:\n      - master\njobs: # 工作流\n  build:\n    runs-on: ubuntu-latest #运行在虚拟机环境ubuntu-latest\n\n    strategy:\n      matrix:\n        node-version: [10.x]\n\n    steps: \n      - name: checkout # 步骤1\n        uses: actions/checkout@v1 # 使用的动作。格式：username/reponame。作用：检出仓库，获取源码。 官方actions库：https://github.com/actions\n      - name: use node.js ${{ matrix.node-version }} # 步骤2\n        uses: actions/setup-node@v1 # 作用：安装nodejs\n        with:\n          node-version: ${{ matrix.node-version }} # 版本\n      - name: run deploy.sh # 步骤3 （同时部署到github和coding）\n        env: # 设置环境变量\n          github_token: ${{ secrets.access_token }} # token私密变量\n          coding_token: ${{ secrets.coding_token }} # 腾讯云开发者平台（coding）私密token\n        run: npm install && npm run deploy # 执行的命令  \n        # package.json 中添加 "deploy": "bash deploy.sh"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\n这个配置文件会在我push提交代码到主分支时触发工作，运行环境是ubuntu-latest，工作步骤：\n\n * 一，获取仓库源码\n\n * 二，安装nodejs，打包项目有用到nodejs\n\n * 三，把token设置到环境变量，安装项目依赖，并运行deploy.sh文件，\n\n> access_toke 和 coding_token 都是保存在github仓库的settings/secrets位置的私密变量，仓库代码中可以通过<secrets.变量名>来获取，保证了token的私密性。\n\n再来看看将要被运行的deploy.sh部署代码：\n\n#!/usr/bin/env sh\n# 确保脚本抛出遇到的错误\nset -e\nnpm run build # 生成静态文件\ncd docs/.vuepress/dist # 进入生成的文件夹\n\n# deploy to github\necho \'blog.xugaoyi.com\' > cname\nif [ -z "$github_token" ]; then\n  msg=\'deploy\'\n  githuburl=git@github.com:xugaoyi/blog.git\nelse\n  msg=\'来自github action的自动部署\'\n  githuburl=https://xugaoyi:${github_token}@github.com/xugaoyi/blog.git\n  git config --global user.name "xugaoyi"\n  git config --global user.email "894072666@qq.com"\nfi\ngit init\ngit add -a\ngit commit -m "${msg}"\ngit push -f $githuburl master:gh-pages # 推送到github\n\n# deploy to coding\necho \'www.xugaoyi.com\\nxugaoyi.com\' > cname  # 自定义域名\nif [ -z "$coding_token" ]; then  # -z 字符串 长度为0则为true；$coding_token来自于github仓库`settings/secrets`设置的私密环境变量\n  codingurl=git@git.dev.tencent.com:xugaoyi/xugaoyi.git\nelse\n  codingurl=https://xugaoyi:${coding_token}@git.dev.tencent.com/xugaoyi/xugaoyi.git\nfi\ngit add -a\ngit commit -m "${msg}"\ngit push -f $codingurl master # 推送到coding\n\ncd -\nrm -rf docs/.vuepress/dist\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n\n\n这个文件使用shell命令写的，它会先运行打包命令，进入打包好的文件，创建一个自定义域名的cname文件（如果你没有自定义域名可去掉这个命令），判断是否有token环境变量，如果没有说明是在本地自己的电脑上运行的部署，使用ssh代码仓库地址，如果有token环境变量，说明是github actions自动触发的部署，此时使用的是可以通过token来获取代码提交权限的提交地址。最后通过git命令提交到各自的仓库，完成部署。\n\n> 提示：\n> \n>  * shell 可以获取到环境变量。\n> \n>  * 我想给两个平台上部署的博客不一样的自定义域名，因此做了分开创建cname文件，分开提交。\n\n至此，我前面提到的需求就实现啦，只需要把源码push到github仓库这一个步骤，后面的博客打包、部署到github和coding等工作都由github actions来自动完成。\n\n如下你想查看部署日志，你可以到github仓库的actions这一项查看。\n\n\n\n\n# 相关文章\n\n《github actions 定时运行代码：每天定时百度链接推送》',charsets:{cjk:!0},lastUpdated:"2022/04/11, 18:22:27",lastUpdatedTimestamp:1649672547e3},{title:"GitHub Actions 定时运行代码：每天定时百度链接推送",frontmatter:{title:"GitHub Actions 定时运行代码：每天定时百度链接推送",date:"2019-12-30T21:23:00.000Z",permalink:"/pages/f44d2f9ad04ab8d3",categories:["技术","GitHub技巧"],tags:["github","博客"],author:{name:"xugaoyi",link:"https://github.com/xugaoyi"}},regularPath:"/04.%E6%8A%80%E6%9C%AF/22.GitHub%E6%8A%80%E5%B7%A7/03.GitHub%20Actions%20%E5%AE%9A%E6%97%B6%E8%BF%90%E8%A1%8C%E4%BB%A3%E7%A0%81%EF%BC%9A%E6%AF%8F%E5%A4%A9%E5%AE%9A%E6%97%B6%E7%99%BE%E5%BA%A6%E9%93%BE%E6%8E%A5%E6%8E%A8%E9%80%81.html",relativePath:"04.技术/22.GitHub技巧/03.GitHub Actions 定时运行代码：每天定时百度链接推送.md",key:"v-81ef1bfc",path:"/pages/f44d2f9ad04ab8d3/",headers:[{level:2,title:"百度主动链接推送",slug:"百度主动链接推送",normalizedTitle:"百度主动链接推送",charIndex:246},{level:2,title:"自动生成urls.txt",slug:"自动生成urls-txt",normalizedTitle:"自动生成urls.txt",charIndex:603},{level:2,title:"GitHub Actions 定时运行代码",slug:"github-actions-定时运行代码",normalizedTitle:"github actions 定时运行代码",charIndex:2},{level:3,title:"配置 GitHub Actions",slug:"配置-github-actions",normalizedTitle:"配置 github actions",charIndex:2071},{level:3,title:"baiduPush命令在package.json配置",slug:"baidupush命令在package-json配置",normalizedTitle:"baidupush命令在package.json配置",charIndex:2824},{level:3,title:"baiduPush.sh执行百度推送命令",slug:"baidupush-sh执行百度推送命令",normalizedTitle:"baidupush.sh执行百度推送命令",charIndex:3175},{level:2,title:"相关文章",slug:"相关文章",normalizedTitle:"相关文章",charIndex:3659}],excerpt:'<h1 id="github-actions-定时运行代码-每天定时百度链接推送"><a class="header-anchor" href="#github-actions-定时运行代码-每天定时百度链接推送">#</a> GitHub Actions 定时运行代码：每天定时百度链接推送</h1>\n<p>博客上线已经有些日子了，却发现百度迟迟没有收录我的博客页面，在百度推送工具当中除了有自动推送的代码嵌入网站之外，还有一个实时的主动推送更高效。</p>\n<p>最近刚好了解到GitHub Actions的定时运行代码功能，可以用它来每天自动运行命令生成所有博客链接并进行一次性推送给百度。</p>\n<p>GitHub Actions 是一个 CI/CD（持续集成/持续部署）工具，但也可用作代码运行环境。<strong>功能非常强大，能够玩出许多花样。</strong></p>\n',headersStr:"百度主动链接推送 自动生成urls.txt GitHub Actions 定时运行代码 配置 GitHub Actions baiduPush命令在package.json配置 baiduPush.sh执行百度推送命令 相关文章",content:"# GitHub Actions 定时运行代码：每天定时百度链接推送\n\n博客上线已经有些日子了，却发现百度迟迟没有收录我的博客页面，在百度推送工具当中除了有自动推送的代码嵌入网站之外，还有一个实时的主动推送更高效。\n\n最近刚好了解到GitHub Actions的定时运行代码功能，可以用它来每天自动运行命令生成所有博客链接并进行一次性推送给百度。\n\nGitHub Actions 是一个 CI/CD（持续集成/持续部署）工具，但也可用作代码运行环境。功能非常强大，能够玩出许多花样。\n\n\n# 百度主动链接推送\n\n链接主动推送在百度站长中有介绍，如图。\n\n\n\n具体使用方法就是创建一个文件urls.txt，文件内每行一条链接的格式写入提交的多个链接，如图。\n\n\n\n运行命令\n\ncurl -H 'Content-Type:text/plain' --data-binary @urls.txt \"http://data.zz.baidu.com/urls?site=xugaoyi.com&token=T5PEAzhG*****\"\n\n\n1\n\n\n上面命令的地址和参数由百度站长提供。运行完命令会返回推送结果，不出意外的话就会把urls.txt内的所有链接一次性推送给百度。\n\n这个方法虽然比嵌入网站头部的自动推送更高效，但是也有它的麻烦之处，就是得自己填入链接到urls.txt文件，然后手动运行命令。\n\n\n# 自动生成urls.txt\n\n没关系，技术的本质就是让人\"偷懒\"的。于是，我写了一个nodejs工具，用于把所有的博客页面链接生成到urls.txt\n\n// baiduPush.js\n\n/**\n * 生成百度链接推送文件\n */\nconst fs = require('fs');\nconst path = require('path');\nconst logger = require('tracer').colorConsole();\nconst matter = require('gray-matter'); // FrontMatter解析器 https://github.com/jonschlinkert/gray-matter\nconst readFileList = require('./modules/readFileList');\nconst urlsRoot = path.join(__dirname, '..', 'urls.txt'); // 百度链接推送文件\nconst DOMAIN = process.argv.splice(2)[0]; // 获取命令行传入的参数\n\nif (!DOMAIN) {\n  logger.error('请在运行此文件时指定一个你要进行百度推送的域名参数，例：node utils/baiduPush.js https://xugaoyi.com')\n  return\n}\n\nmain();\nfunction main() {\n  fs.writeFileSync(urlsRoot, DOMAIN)\n  const files = readFileList(); // 读取所有md文件数据\n\n  files.forEach( file => {\n    const { data } = matter(fs.readFileSync(file.filePath, 'utf8')); \n\n    if (data.permalink) {\n      const link = `\\r\\n${DOMAIN}${data.permalink}/`;\n      console.log(link)\n      fs.appendFileSync(urlsRoot, link);\n    }\n  })\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n\n上面代码仅是针对我个人的博客生成链接到urls.txt文件。更多代码在 这里。\n\n运行如下命令就可以生产一个包含博客所有链接的urls.txt文件：\n\nnode utils/baiduPush.js https://xugaoyi.com\n\n\n1\n\n\n哈哈，第一个麻烦解决了😏，接下来是解决第二个需要手动运行推送命令的问题。\n\n> 如果你没办法自动生成，你也可以自己手动创建一个urls.txt文件，放到github仓库。\n\n\n# GitHub Actions 定时运行代码\n\n今天的主角GitHub Actions 要登场了。（相关：GitHub Actions 入门教程、GitHub Actions 实现自动部署静态博客）\n\nGitHub Actions 是一个 CI/CD（持续集成/持续部署）工具，但也可用作代码运行环境。功能非常强大，能够玩出许多花样。\n\n\n# 配置 GitHub Actions\n\n触发 GitHub Actions 需要在项目仓库新建一个.github/workflows子目录，里面是 YAML 格式配置文件，文件名可以随便取。GitHub 只要发现配置文件，就会运行 Actions。\n\n配置文件的第一部分是触发条件。\n\n## baiduPush.yml\nname: 'baiduPush'\n \non:\n  push:\n  schedule:\n    - cron: '0 23 * * *'\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，name字段是配置文件的描述，on字段是触发条件。我们指定两种情况下触发，第一种是代码 Push 进仓库，第二种是定时任务，每天在国际标准时间23点（北京时间+8，即早上7点）运行。\n\n> 定时设置看这里\n\n接着，就是运行流程。\n\njobs:\n  bot:\n    runs-on: ubuntu-latest # 运行环境为最新版的Ubuntu\n    steps:\n      - name: 'Checkout codes' # 步骤一，获取仓库代码\n        uses: actions/checkout@v1\n      - name: 'Run baiduPush.sh' # 步骤二，执行sh命令文件\n        run: npm install && npm run baiduPush # 运行命令。（注意，运行目录是仓库根目录）\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，指定运行环境是最新的ubuntu，流程的第一步是从代码仓库获取代码，第二步运行两个命令，先安装项目依赖，再运行写在package.json的baiduPush命令。完整代码看 这里\n\n\n# baiduPush命令在package.json配置\n\n// package.json\n\"scripts\": {\n\t\"baiduPush\": \"node utils/baiduPush.js https://xugaoyi.com && bash baiduPush.sh\"\n}\n\n\n1\n2\n3\n4\n\n\n上面脚本中在node utils/baiduPush.js的后面加入你的域名参数。运行此命令生成urls.txt文件，然后执行baiduPush.sh文件。\n\n注意，在使用window系统时，请使用git bash命令窗运行上面的脚本。\n\n> baiduPush命令之所以没有放在baiduPush.yml的 run 里面是因为我想在本地也可以执行npm run baiduPush命令。\n\n\n# baiduPush.sh执行百度推送命令\n\nbaiduPush.sh文件：\n\n#!/usr/bin/env sh\n\nset -e\n\n# 百度链接推送\ncurl -H 'Content-Type:text/plain' --data-binary @urls.txt \"http://data.zz.baidu.com/urls?site=https://xugaoyi.com&token=T5PEAzhGa*****\"\n\nrm -rf urls.txt # 灭迹\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，把urls.txt文件中的所有链接一次性推送。\n\n> baiduPush.sh内的命令之所以没有写在package.json是因为我觉得命令太长了，不方便阅读。\n\n写好配置，推送到仓库，就会在每天的早上7点钟，自动运行命令生成一个包含博客所有页面链接的urls.txt文件，并把所有链接一次性推送到百度。麻麻再也不用担心我的网站不被收录~~😘 😘 😘\n\n在这个基础上可以扩展，使用GitHub Actions满足你自己的各种定时需求。\n\n\n# 相关文章\n\n《 GitHub Actions 实现自动部署静态博客》\n\n《解决百度无法收录搭建在GitHub上的静态博客的问题》",normalizedContent:"# github actions 定时运行代码：每天定时百度链接推送\n\n博客上线已经有些日子了，却发现百度迟迟没有收录我的博客页面，在百度推送工具当中除了有自动推送的代码嵌入网站之外，还有一个实时的主动推送更高效。\n\n最近刚好了解到github actions的定时运行代码功能，可以用它来每天自动运行命令生成所有博客链接并进行一次性推送给百度。\n\ngithub actions 是一个 ci/cd（持续集成/持续部署）工具，但也可用作代码运行环境。功能非常强大，能够玩出许多花样。\n\n\n# 百度主动链接推送\n\n链接主动推送在百度站长中有介绍，如图。\n\n\n\n具体使用方法就是创建一个文件urls.txt，文件内每行一条链接的格式写入提交的多个链接，如图。\n\n\n\n运行命令\n\ncurl -h 'content-type:text/plain' --data-binary @urls.txt \"http://data.zz.baidu.com/urls?site=xugaoyi.com&token=t5peazhg*****\"\n\n\n1\n\n\n上面命令的地址和参数由百度站长提供。运行完命令会返回推送结果，不出意外的话就会把urls.txt内的所有链接一次性推送给百度。\n\n这个方法虽然比嵌入网站头部的自动推送更高效，但是也有它的麻烦之处，就是得自己填入链接到urls.txt文件，然后手动运行命令。\n\n\n# 自动生成urls.txt\n\n没关系，技术的本质就是让人\"偷懒\"的。于是，我写了一个nodejs工具，用于把所有的博客页面链接生成到urls.txt\n\n// baidupush.js\n\n/**\n * 生成百度链接推送文件\n */\nconst fs = require('fs');\nconst path = require('path');\nconst logger = require('tracer').colorconsole();\nconst matter = require('gray-matter'); // frontmatter解析器 https://github.com/jonschlinkert/gray-matter\nconst readfilelist = require('./modules/readfilelist');\nconst urlsroot = path.join(__dirname, '..', 'urls.txt'); // 百度链接推送文件\nconst domain = process.argv.splice(2)[0]; // 获取命令行传入的参数\n\nif (!domain) {\n  logger.error('请在运行此文件时指定一个你要进行百度推送的域名参数，例：node utils/baidupush.js https://xugaoyi.com')\n  return\n}\n\nmain();\nfunction main() {\n  fs.writefilesync(urlsroot, domain)\n  const files = readfilelist(); // 读取所有md文件数据\n\n  files.foreach( file => {\n    const { data } = matter(fs.readfilesync(file.filepath, 'utf8')); \n\n    if (data.permalink) {\n      const link = `\\r\\n${domain}${data.permalink}/`;\n      console.log(link)\n      fs.appendfilesync(urlsroot, link);\n    }\n  })\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n\n上面代码仅是针对我个人的博客生成链接到urls.txt文件。更多代码在 这里。\n\n运行如下命令就可以生产一个包含博客所有链接的urls.txt文件：\n\nnode utils/baidupush.js https://xugaoyi.com\n\n\n1\n\n\n哈哈，第一个麻烦解决了😏，接下来是解决第二个需要手动运行推送命令的问题。\n\n> 如果你没办法自动生成，你也可以自己手动创建一个urls.txt文件，放到github仓库。\n\n\n# github actions 定时运行代码\n\n今天的主角github actions 要登场了。（相关：github actions 入门教程、github actions 实现自动部署静态博客）\n\ngithub actions 是一个 ci/cd（持续集成/持续部署）工具，但也可用作代码运行环境。功能非常强大，能够玩出许多花样。\n\n\n# 配置 github actions\n\n触发 github actions 需要在项目仓库新建一个.github/workflows子目录，里面是 yaml 格式配置文件，文件名可以随便取。github 只要发现配置文件，就会运行 actions。\n\n配置文件的第一部分是触发条件。\n\n## baidupush.yml\nname: 'baidupush'\n \non:\n  push:\n  schedule:\n    - cron: '0 23 * * *'\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，name字段是配置文件的描述，on字段是触发条件。我们指定两种情况下触发，第一种是代码 push 进仓库，第二种是定时任务，每天在国际标准时间23点（北京时间+8，即早上7点）运行。\n\n> 定时设置看这里\n\n接着，就是运行流程。\n\njobs:\n  bot:\n    runs-on: ubuntu-latest # 运行环境为最新版的ubuntu\n    steps:\n      - name: 'checkout codes' # 步骤一，获取仓库代码\n        uses: actions/checkout@v1\n      - name: 'run baidupush.sh' # 步骤二，执行sh命令文件\n        run: npm install && npm run baidupush # 运行命令。（注意，运行目录是仓库根目录）\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，指定运行环境是最新的ubuntu，流程的第一步是从代码仓库获取代码，第二步运行两个命令，先安装项目依赖，再运行写在package.json的baidupush命令。完整代码看 这里\n\n\n# baidupush命令在package.json配置\n\n// package.json\n\"scripts\": {\n\t\"baidupush\": \"node utils/baidupush.js https://xugaoyi.com && bash baidupush.sh\"\n}\n\n\n1\n2\n3\n4\n\n\n上面脚本中在node utils/baidupush.js的后面加入你的域名参数。运行此命令生成urls.txt文件，然后执行baidupush.sh文件。\n\n注意，在使用window系统时，请使用git bash命令窗运行上面的脚本。\n\n> baidupush命令之所以没有放在baidupush.yml的 run 里面是因为我想在本地也可以执行npm run baidupush命令。\n\n\n# baidupush.sh执行百度推送命令\n\nbaidupush.sh文件：\n\n#!/usr/bin/env sh\n\nset -e\n\n# 百度链接推送\ncurl -h 'content-type:text/plain' --data-binary @urls.txt \"http://data.zz.baidu.com/urls?site=https://xugaoyi.com&token=t5peazhga*****\"\n\nrm -rf urls.txt # 灭迹\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，把urls.txt文件中的所有链接一次性推送。\n\n> baidupush.sh内的命令之所以没有写在package.json是因为我觉得命令太长了，不方便阅读。\n\n写好配置，推送到仓库，就会在每天的早上7点钟，自动运行命令生成一个包含博客所有页面链接的urls.txt文件，并把所有链接一次性推送到百度。麻麻再也不用担心我的网站不被收录~~😘 😘 😘\n\n在这个基础上可以扩展，使用github actions满足你自己的各种定时需求。\n\n\n# 相关文章\n\n《 github actions 实现自动部署静态博客》\n\n《解决百度无法收录搭建在github上的静态博客的问题》",charsets:{cjk:!0},lastUpdated:"2022/04/11, 18:22:27",lastUpdatedTimestamp:1649672547e3},{title:"CentOS网络设置",frontmatter:{title:"CentOS网络设置",date:"2022-04-17T19:20:20.000Z",permalink:"/pages/4e011c/",tags:[null]},regularPath:"/03.Linux/02.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/04.%E5%85%B6%E5%AE%83/01.CentOS%E7%BD%91%E7%BB%9C%E8%AE%BE%E7%BD%AE.html",relativePath:"03.Linux/02.学习笔记/04.其它/01.CentOS网络设置.md",key:"v-0927a410",path:"/pages/4e011c/",headers:[{level:2,title:"虚拟机Linux设置NAT网络",slug:"虚拟机linux设置nat网络",normalizedTitle:"虚拟机linux设置nat网络",charIndex:2},{level:2,title:"虚拟机Linux设置桥接网络",slug:"虚拟机linux设置桥接网络",normalizedTitle:"虚拟机linux设置桥接网络",charIndex:214},{level:3,title:"物理机网络参数信息",slug:"物理机网络参数信息",normalizedTitle:"物理机网络参数信息",charIndex:248},{level:2,title:"可能出现的错误",slug:"可能出现的错误",normalizedTitle:"可能出现的错误",charIndex:597},{level:3,title:"重启网络出现错误",slug:"重启网络出现错误",normalizedTitle:"重启网络出现错误",charIndex:609}],headersStr:"虚拟机Linux设置NAT网络 虚拟机Linux设置桥接网络 物理机网络参数信息 可能出现的错误 重启网络出现错误",content:'# 虚拟机Linux设置NAT网络\n\n虚拟机网络设置为NAT桥接。\n\n然后在 Terminal 中切换到 root 用户进行如下操作：\n\n 1. 用编辑器打开 /etc/sysconfig/network-script/ifcfg-ens33\n 2. 将 ONBOOT=no 改为 ONBOOT=yes\n 3. 重启网络 systemctl restart network\n 4. ping www.baidu.com\n\n\n# 虚拟机Linux设置桥接网络\n\n虚拟机网咯设置为桥接模式。\n\n\n# 物理机网络参数信息\n\n获取物理机的IP地址、子网掩码、默认网关、DNS。\n\n在Linux系统中打开文件 /etc/sysconfig/network-script/ifcfg-ens33 添加如下字段：\n\nIPADDR=...\nNETMASK=...\nGATEWAY=...\nDNS1=...\n\n\n1\n2\n3\n4\n\n\n四个字段分别对应 IP地址、子网掩码、默认网关、DNS，参数根据自己物理机所处局域网来填（通常除了IP地址有一点不同，其他三个参数跟物理机一样）。\n\n然后将 BOOTPROTO=dhcp 改为 BOOTPROTO=none\n\n如果物理机是Windows,可在终端用 ipconfig 命令来查看。\n\n填好参数后重启网络：systemctl restart network\n\n\n# 可能出现的错误\n\n\n# 重启网络出现错误\n\n提示出错：\n\nJob for network.service failed because the control process exited with error code. See "systemctl status network.service" and "journalctl -xe" for details.\n\n\n1\n\n\n# 解决方案\n\n解决方案链接\n\n可能是与 NetworkManager 冲突了，关闭即可：\n\nsystemctl stop NetworkManager\n\n\n1\n',normalizedContent:'# 虚拟机linux设置nat网络\n\n虚拟机网络设置为nat桥接。\n\n然后在 terminal 中切换到 root 用户进行如下操作：\n\n 1. 用编辑器打开 /etc/sysconfig/network-script/ifcfg-ens33\n 2. 将 onboot=no 改为 onboot=yes\n 3. 重启网络 systemctl restart network\n 4. ping www.baidu.com\n\n\n# 虚拟机linux设置桥接网络\n\n虚拟机网咯设置为桥接模式。\n\n\n# 物理机网络参数信息\n\n获取物理机的ip地址、子网掩码、默认网关、dns。\n\n在linux系统中打开文件 /etc/sysconfig/network-script/ifcfg-ens33 添加如下字段：\n\nipaddr=...\nnetmask=...\ngateway=...\ndns1=...\n\n\n1\n2\n3\n4\n\n\n四个字段分别对应 ip地址、子网掩码、默认网关、dns，参数根据自己物理机所处局域网来填（通常除了ip地址有一点不同，其他三个参数跟物理机一样）。\n\n然后将 bootproto=dhcp 改为 bootproto=none\n\n如果物理机是windows,可在终端用 ipconfig 命令来查看。\n\n填好参数后重启网络：systemctl restart network\n\n\n# 可能出现的错误\n\n\n# 重启网络出现错误\n\n提示出错：\n\njob for network.service failed because the control process exited with error code. see "systemctl status network.service" and "journalctl -xe" for details.\n\n\n1\n\n\n# 解决方案\n\n解决方案链接\n\n可能是与 networkmanager 冲突了，关闭即可：\n\nsystemctl stop networkmanager\n\n\n1\n',charsets:{cjk:!0},lastUpdated:"2022/06/19, 16:16:22",lastUpdatedTimestamp:1655626582e3},{title:"GitHub加速下载项目的方法",frontmatter:{title:"GitHub加速下载项目的方法",date:"2020-03-09T10:28:09.000Z",permalink:"/pages/95331c6a9613faf8",categories:["技术","GitHub技巧"],tags:[null],author:{name:"xugaoyi",link:"https://github.com/xugaoyi"}},regularPath:"/04.%E6%8A%80%E6%9C%AF/22.GitHub%E6%8A%80%E5%B7%A7/10.GitHub%E5%8A%A0%E9%80%9F%E4%B8%8B%E8%BD%BD%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%96%B9%E6%B3%95.html",relativePath:"04.技术/22.GitHub技巧/10.GitHub加速下载项目的方法.md",key:"v-5b207988",path:"/pages/95331c6a9613faf8/",headers:[{level:2,title:"利用码云来转接做下载加速",slug:"利用码云来转接做下载加速",normalizedTitle:"利用码云来转接做下载加速",charIndex:109}],excerpt:'<h1 id="github加速下载项目的方法"><a class="header-anchor" href="#github加速下载项目的方法">#</a> GitHub加速下载项目的方法</h1>\n<p>国内在github上克隆项目总是异常的慢，据我多次克隆观察，下载速度最快就20k/s左右，特别是在克隆比较大的项目时简直慢得无法忍受！下面介绍一种加载克隆项目的方法。</p>\n',headersStr:"利用码云来转接做下载加速",content:'# GitHub加速下载项目的方法\n\n国内在github上克隆项目总是异常的慢，据我多次克隆观察，下载速度最快就20k/s左右，特别是在克隆比较大的项目时简直慢得无法忍受！下面介绍一种加载克隆项目的方法。\n\n\n\n\n# 利用码云来转接做下载加速\n\n 1. 首先你得有一个 码云 的账号\n\n 2. 登录码云之后在页面右上角的加号选择从GitHub/GitLab导入项目\n    \n    \n\n 3. 选择从URL导入，粘贴从GitHub复制来的仓库地址，然后导入，这个导入过程一般是很快的。\n    \n    \n\n 4. 从码云克隆刚导入的这个项目，克隆速度会快很多，网速好的能达到几兆每秒（具体速度就看你的网速了，吐槽一下我家网速，总在关键时刻显示"视频加载中"....）\n    \n    \n\n 5. 另外要注意的一点，克隆下来的项目关联的是码云的仓库，如果你需要关联github仓库需要更改远程仓库。\n    \n    git remote -v # 查看关联的远程仓库\n    git remote rm <仓库名> # 删除远程仓库\n    git remote add <仓库名> <远程仓库地址> # 关联远程仓库，仓库名一般使用origin\n    \n    \n    1\n    2\n    3\n    \n\n这个方法适合用于克隆比较大的项目，如果克隆小项目，20k/s的速度好像还能将就~~',normalizedContent:'# github加速下载项目的方法\n\n国内在github上克隆项目总是异常的慢，据我多次克隆观察，下载速度最快就20k/s左右，特别是在克隆比较大的项目时简直慢得无法忍受！下面介绍一种加载克隆项目的方法。\n\n\n\n\n# 利用码云来转接做下载加速\n\n 1. 首先你得有一个 码云 的账号\n\n 2. 登录码云之后在页面右上角的加号选择从github/gitlab导入项目\n    \n    \n\n 3. 选择从url导入，粘贴从github复制来的仓库地址，然后导入，这个导入过程一般是很快的。\n    \n    \n\n 4. 从码云克隆刚导入的这个项目，克隆速度会快很多，网速好的能达到几兆每秒（具体速度就看你的网速了，吐槽一下我家网速，总在关键时刻显示"视频加载中"....）\n    \n    \n\n 5. 另外要注意的一点，克隆下来的项目关联的是码云的仓库，如果你需要关联github仓库需要更改远程仓库。\n    \n    git remote -v # 查看关联的远程仓库\n    git remote rm <仓库名> # 删除远程仓库\n    git remote add <仓库名> <远程仓库地址> # 关联远程仓库，仓库名一般使用origin\n    \n    \n    1\n    2\n    3\n    \n\n这个方法适合用于克隆比较大的项目，如果克隆小项目，20k/s的速度好像还能将就~~',charsets:{cjk:!0},lastUpdated:"2022/04/11, 18:22:27",lastUpdatedTimestamp:1649672547e3},{title:"常用meta整理",frontmatter:{title:"常用meta整理",date:"2020-02-21T12:20:10.000Z",permalink:"/pages/8309a5b876fc95e3",categories:["HTML"],tags:[null],author:{name:"xugaoyi",link:"https://github.com/xugaoyi"}},regularPath:"/04.%E6%8A%80%E6%9C%AF/50.%E5%89%8D%E7%AB%AF/10.HTML/10.%E5%B8%B8%E7%94%A8meta%E6%95%B4%E7%90%86.html",relativePath:"04.技术/50.前端/10.HTML/10.常用meta整理.md",key:"v-3441661b",path:"/pages/8309a5b876fc95e3/",headers:[{level:2,title:"元素",slug:"meta-元素",normalizedTitle:"元素",charIndex:22},{level:3,title:"概要",slug:"概要",normalizedTitle:"概要",charIndex:29},{level:3,title:"网页相关",slug:"网页相关",normalizedTitle:"网页相关",charIndex:588},{level:3,title:"SEO优化",slug:"seo优化",normalizedTitle:"seo优化",charIndex:1948},{level:3,title:"移动设备",slug:"移动设备",normalizedTitle:"移动设备",charIndex:2933},{level:3,title:"一个常用的移动端页面meta设置",slug:"一个常用的移动端页面meta设置",normalizedTitle:"一个常用的移动端页面meta设置",charIndex:4976}],excerpt:'<h1 id="常用meta整理"><a class="header-anchor" href="#常用meta整理">#</a> 常用meta整理</h1>\n<h2 id="meta-元素"><a class="header-anchor" href="#meta-元素">#</a> &lt;meta&gt; 元素</h2>\n<h3 id="概要"><a class="header-anchor" href="#概要">#</a> 概要</h3>\n<p>meta标签提供关于HTML文档的元数据。元数据不会显示在页面上，但是对于机器是可读的。它可用于浏览器（如何显示内容或重新加载页面），搜索引擎（关键词），或其他 web 服务。</p>\n',headersStr:"元素 概要 网页相关 SEO优化 移动设备 一个常用的移动端页面meta设置",content:'# 常用meta整理\n\n\n# <meta> 元素\n\n\n# 概要\n\nmeta标签提供关于HTML文档的元数据。元数据不会显示在页面上，但是对于机器是可读的。它可用于浏览器（如何显示内容或重新加载页面），搜索引擎（关键词），或其他 web 服务。\n\n必要属性\n\n属性        值           描述\ncontent   some text   定义与http-equiv或name属性相关的元信息\n\n可选属性\n\n属性           值                                                         描述\nhttp-equiv   content-type / expire / refresh / set-cookie              把content属性关联到HTTP头部。\nname         author / description / keywords / generator / revised /   把 content 属性关联到一个name。\n             others\ncontent      some text                                                 定义用于翻译 content 属性值的格式。\n\n\n# 网页相关\n\n * 申明编码\n\n<meta charset=\'utf-8\' />\n\n\n1\n\n * 优先使用 IE 最新版本和 Chrome\n\n\x3c!-- 关于X-UA-Compatible --\x3e\n<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" /> \x3c!-- 推荐 --\x3e\n\n<meta http-equiv="X-UA-Compatible" content="IE=6" >\x3c!-- 使用IE6 --\x3e\n<meta http-equiv="X-UA-Compatible" content="IE=7" >\x3c!-- 使用IE7 --\x3e\n<meta http-equiv="X-UA-Compatible" content="IE=8" >\x3c!-- 使用IE8 --\x3e\n\n\n1\n2\n3\n4\n5\n6\n\n * 浏览器内核控制：国内浏览器很多都是双内核（webkit和Trident），webkit内核高速浏览，IE内核兼容网页和旧版网站。而添加meta标签的网站可以控制浏览器选择何种内核渲染。参考文档\n\n默认用极速核(Chrome)：<meta name="renderer" content="webkit"> \n默认用ie兼容内核（IE6/7）：<meta name="renderer" content="ie-comp"> \n默认用ie标准内核（IE9/IE10/IE11/取决于用户的IE）：<meta name="renderer" content="ie-stand"> \n\n\n1\n2\n3\n\n\n国内双核浏览器默认内核模式如下：\n\n 1. 搜狗高速浏览器、QQ浏览器：IE内核（兼容模式）\n 2. 360极速浏览器、遨游浏览器：Webkit内核（极速模式）\n\n * 禁止浏览器从本地计算机的缓存中访问页面内容：这样设定，访问者将无法脱机浏览。\n\n<meta http-equiv="Pragma" content="no-cache">\n\n\n1\n\n * Windows 8\n\n<meta name="msapplication-TileColor" content="#000"/> \x3c!-- Windows 8 磁贴颜色 --\x3e\n<meta name="msapplication-TileImage" content="icon.png"/> \x3c!-- Windows 8 磁贴图标 --\x3e\n\n\n1\n2\n\n * 站点适配：主要用于PC-手机页的对应关系。\n\n<meta name="mobile-agent"content="format=[wml|xhtml|html5]; url=url">\n\x3c!--\n[wml|xhtml|html5]根据手机页的协议语言，选择其中一种；\nurl="url" 后者代表当前PC页所对应的手机页URL，两者必须是一一对应关系。\n --\x3e\n\n\n1\n2\n3\n4\n5\n\n * 转码申明：用百度打开网页可能会对其进行转码（比如贴广告），避免转码可添加如下meta。\n\n<meta http-equiv="Cache-Control" content="no-siteapp" />\n\n\n1\n\n\n\n# SEO优化\n\n参考文档\n\n * 页面关键词，每个网页应具有描述该网页内容的一组唯一的关键字。 使用人们可能会搜索，并准确描述网页上所提供信息的描述性和代表性关键字及短语。标记内容太短，则搜索引擎可能不会认为这些内容相关。另外标记不应超过 874 个字符。\n\n<meta name="keywords" content="your tags" />\n\n\n1\n\n * 页面描述，每个网页都应有一个不超过 150 个字符且能准确反映网页内容的描述标签。\n\n<meta name="description" content="150 words" />\n\n\n1\n\n * 搜索引擎索引方式，robotterms是一组使用逗号(,)分割的值，通常有如下几种取值：none，noindex，nofollow，all，index和follow。确保正确使用nofollow和noindex属性值。\n\n<meta name="robots" content="index,follow" />\n\x3c!--\n    all：文件将被检索，且页面上的链接可以被查询；\n    none：文件将不被检索，且页面上的链接不可以被查询；\n    index：文件将被检索；\n    follow：页面上的链接可以被查询；\n    noindex：文件将不被检索；\n    nofollow：页面上的链接不可以被查询。\n --\x3e\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n * 页面重定向和刷新：content内的数字代表时间（秒），既多少时间后刷新。如果加url,则会重定向到指定网页（搜索引擎能够自动检测，也很容易被引擎视作误导而受到惩罚）。\n\n<meta http-equiv="refresh" content="0;url=" />\n\n\n1\n\n * 其他\n\n<meta name="author" content="author name" /> \x3c!-- 定义网页作者 --\x3e\n<meta name="google" content="index,follow" />\n<meta name="googlebot" content="index,follow" />\n<meta name="verify" content="index,follow" />\n\n\n1\n2\n3\n4\n\n\n\n# 移动设备\n\n * viewport：能优化移动浏览器的显示。如果不是响应式网站，不要使用initial-scale或者禁用缩放。\n\n<meta name="viewport" content="width=device-width,initial-scale=1.0,minimun-scale=1.0,maximum-scale=1.0,user-scalable=no"/>\n\x3c!--这是常用的移动meta设置--\x3e\n\n\n1\n2\n\n 1. width：宽度（数值 / device-width）（范围从200 到10,000，默认为980 像素）\n 2. height：高度（数值 / device-height）（范围从223 到10,000）\n 3. initial-scale：初始的缩放比例 （范围从>0 到10）\n 4. minimum-scale：允许用户缩放到的最小比例\n 5. maximum-scale：允许用户缩放到的最大比例\n 6. user-scalable：用户是否可以手动缩 (no,yes)\n\n注意，很多人使用initial-scale=1到非响应式网站上，这会让网站以100%宽度渲染，用户需要手动移动页面或者缩放。如果和initial-scale=1同时使用user-scalable=no或maximum-scale=1，则用户将不能放大/缩小网页来看到全部的内容。\n\n * WebApp全屏模式：伪装app，离线应用。\n\n<meta name="apple-mobile-web-app-capable" content="yes" /> \x3c!-- 启用 WebApp 全屏模式 --\x3e\n\n\n1\n\n * 主题颜色\n\n<meta name="theme-color" content="#11a8cd">\n\n\n1\n\n\n\n\n * 隐藏状态栏/设置状态栏颜色：只有在开启WebApp全屏模式时才生效。content的值为default | black | black-translucent 。\n\n<meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />\n\n\n1\n\n * 添加到主屏后的标题\n\n<meta name="apple-mobile-web-app-title" content="标题">\n\n\n1\n\n * 忽略数字自动识别为电话号码\n\n<meta content="telephone=no" name="format-detection" />\n\n\n1\n\n * 忽略识别邮箱\n\n<meta content="email=no" name="format-detection" />\n\n\n1\n\n * 添加智能 App 广告条 Smart App Banner：告诉浏览器这个网站对应的app，并在页面上显示下载banner(如下图)。参考文档\n\n<meta name="apple-itunes-app" content="app-id=myAppStoreID, affiliate-data=myAffiliateData, app-argument=myURL">\n\n\n1\n\n\n\n\n * 其他 参考文档\n\n\x3c!-- 针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓 --\x3e\n<meta name="HandheldFriendly" content="true">\n\x3c!-- 微软的老式浏览器 --\x3e\n<meta name="MobileOptimized" content="320">\n\x3c!-- uc强制竖屏 --\x3e\n<meta name="screen-orientation" content="portrait">\n\x3c!-- QQ强制竖屏 --\x3e\n<meta name="x5-orientation" content="portrait">\n\x3c!-- UC强制全屏 --\x3e\n<meta name="full-screen" content="yes">\n\x3c!-- QQ强制全屏 --\x3e\n<meta name="x5-fullscreen" content="true">\n\x3c!-- UC应用模式 --\x3e\n<meta name="browsermode" content="application">\n\x3c!-- QQ应用模式 --\x3e\n<meta name="x5-page-mode" content="app">\n\x3c!-- windows phone 点击无高光 --\x3e\n<meta name="msapplication-tap-highlight" content="no">\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# 一个常用的移动端页面meta设置\n\n<meta charset="utf-8">\n<meta http-equiv="X-UA-Compatible" content="IE=edge">\n<meta name="viewport" content="width=device-width,initial-scale=1.0,minimun-scale=1.0,maximum-scale=1.0,user-scalable=no">\n\n\n1\n2\n3\n',normalizedContent:'# 常用meta整理\n\n\n# <meta> 元素\n\n\n# 概要\n\nmeta标签提供关于html文档的元数据。元数据不会显示在页面上，但是对于机器是可读的。它可用于浏览器（如何显示内容或重新加载页面），搜索引擎（关键词），或其他 web 服务。\n\n必要属性\n\n属性        值           描述\ncontent   some text   定义与http-equiv或name属性相关的元信息\n\n可选属性\n\n属性           值                                                         描述\nhttp-equiv   content-type / expire / refresh / set-cookie              把content属性关联到http头部。\nname         author / description / keywords / generator / revised /   把 content 属性关联到一个name。\n             others\ncontent      some text                                                 定义用于翻译 content 属性值的格式。\n\n\n# 网页相关\n\n * 申明编码\n\n<meta charset=\'utf-8\' />\n\n\n1\n\n * 优先使用 ie 最新版本和 chrome\n\n\x3c!-- 关于x-ua-compatible --\x3e\n<meta http-equiv="x-ua-compatible" content="ie=edge,chrome=1" /> \x3c!-- 推荐 --\x3e\n\n<meta http-equiv="x-ua-compatible" content="ie=6" >\x3c!-- 使用ie6 --\x3e\n<meta http-equiv="x-ua-compatible" content="ie=7" >\x3c!-- 使用ie7 --\x3e\n<meta http-equiv="x-ua-compatible" content="ie=8" >\x3c!-- 使用ie8 --\x3e\n\n\n1\n2\n3\n4\n5\n6\n\n * 浏览器内核控制：国内浏览器很多都是双内核（webkit和trident），webkit内核高速浏览，ie内核兼容网页和旧版网站。而添加meta标签的网站可以控制浏览器选择何种内核渲染。参考文档\n\n默认用极速核(chrome)：<meta name="renderer" content="webkit"> \n默认用ie兼容内核（ie6/7）：<meta name="renderer" content="ie-comp"> \n默认用ie标准内核（ie9/ie10/ie11/取决于用户的ie）：<meta name="renderer" content="ie-stand"> \n\n\n1\n2\n3\n\n\n国内双核浏览器默认内核模式如下：\n\n 1. 搜狗高速浏览器、qq浏览器：ie内核（兼容模式）\n 2. 360极速浏览器、遨游浏览器：webkit内核（极速模式）\n\n * 禁止浏览器从本地计算机的缓存中访问页面内容：这样设定，访问者将无法脱机浏览。\n\n<meta http-equiv="pragma" content="no-cache">\n\n\n1\n\n * windows 8\n\n<meta name="msapplication-tilecolor" content="#000"/> \x3c!-- windows 8 磁贴颜色 --\x3e\n<meta name="msapplication-tileimage" content="icon.png"/> \x3c!-- windows 8 磁贴图标 --\x3e\n\n\n1\n2\n\n * 站点适配：主要用于pc-手机页的对应关系。\n\n<meta name="mobile-agent"content="format=[wml|xhtml|html5]; url=url">\n\x3c!--\n[wml|xhtml|html5]根据手机页的协议语言，选择其中一种；\nurl="url" 后者代表当前pc页所对应的手机页url，两者必须是一一对应关系。\n --\x3e\n\n\n1\n2\n3\n4\n5\n\n * 转码申明：用百度打开网页可能会对其进行转码（比如贴广告），避免转码可添加如下meta。\n\n<meta http-equiv="cache-control" content="no-siteapp" />\n\n\n1\n\n\n\n# seo优化\n\n参考文档\n\n * 页面关键词，每个网页应具有描述该网页内容的一组唯一的关键字。 使用人们可能会搜索，并准确描述网页上所提供信息的描述性和代表性关键字及短语。标记内容太短，则搜索引擎可能不会认为这些内容相关。另外标记不应超过 874 个字符。\n\n<meta name="keywords" content="your tags" />\n\n\n1\n\n * 页面描述，每个网页都应有一个不超过 150 个字符且能准确反映网页内容的描述标签。\n\n<meta name="description" content="150 words" />\n\n\n1\n\n * 搜索引擎索引方式，robotterms是一组使用逗号(,)分割的值，通常有如下几种取值：none，noindex，nofollow，all，index和follow。确保正确使用nofollow和noindex属性值。\n\n<meta name="robots" content="index,follow" />\n\x3c!--\n    all：文件将被检索，且页面上的链接可以被查询；\n    none：文件将不被检索，且页面上的链接不可以被查询；\n    index：文件将被检索；\n    follow：页面上的链接可以被查询；\n    noindex：文件将不被检索；\n    nofollow：页面上的链接不可以被查询。\n --\x3e\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n * 页面重定向和刷新：content内的数字代表时间（秒），既多少时间后刷新。如果加url,则会重定向到指定网页（搜索引擎能够自动检测，也很容易被引擎视作误导而受到惩罚）。\n\n<meta http-equiv="refresh" content="0;url=" />\n\n\n1\n\n * 其他\n\n<meta name="author" content="author name" /> \x3c!-- 定义网页作者 --\x3e\n<meta name="google" content="index,follow" />\n<meta name="googlebot" content="index,follow" />\n<meta name="verify" content="index,follow" />\n\n\n1\n2\n3\n4\n\n\n\n# 移动设备\n\n * viewport：能优化移动浏览器的显示。如果不是响应式网站，不要使用initial-scale或者禁用缩放。\n\n<meta name="viewport" content="width=device-width,initial-scale=1.0,minimun-scale=1.0,maximum-scale=1.0,user-scalable=no"/>\n\x3c!--这是常用的移动meta设置--\x3e\n\n\n1\n2\n\n 1. width：宽度（数值 / device-width）（范围从200 到10,000，默认为980 像素）\n 2. height：高度（数值 / device-height）（范围从223 到10,000）\n 3. initial-scale：初始的缩放比例 （范围从>0 到10）\n 4. minimum-scale：允许用户缩放到的最小比例\n 5. maximum-scale：允许用户缩放到的最大比例\n 6. user-scalable：用户是否可以手动缩 (no,yes)\n\n注意，很多人使用initial-scale=1到非响应式网站上，这会让网站以100%宽度渲染，用户需要手动移动页面或者缩放。如果和initial-scale=1同时使用user-scalable=no或maximum-scale=1，则用户将不能放大/缩小网页来看到全部的内容。\n\n * webapp全屏模式：伪装app，离线应用。\n\n<meta name="apple-mobile-web-app-capable" content="yes" /> \x3c!-- 启用 webapp 全屏模式 --\x3e\n\n\n1\n\n * 主题颜色\n\n<meta name="theme-color" content="#11a8cd">\n\n\n1\n\n\n\n\n * 隐藏状态栏/设置状态栏颜色：只有在开启webapp全屏模式时才生效。content的值为default | black | black-translucent 。\n\n<meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />\n\n\n1\n\n * 添加到主屏后的标题\n\n<meta name="apple-mobile-web-app-title" content="标题">\n\n\n1\n\n * 忽略数字自动识别为电话号码\n\n<meta content="telephone=no" name="format-detection" />\n\n\n1\n\n * 忽略识别邮箱\n\n<meta content="email=no" name="format-detection" />\n\n\n1\n\n * 添加智能 app 广告条 smart app banner：告诉浏览器这个网站对应的app，并在页面上显示下载banner(如下图)。参考文档\n\n<meta name="apple-itunes-app" content="app-id=myappstoreid, affiliate-data=myaffiliatedata, app-argument=myurl">\n\n\n1\n\n\n\n\n * 其他 参考文档\n\n\x3c!-- 针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓 --\x3e\n<meta name="handheldfriendly" content="true">\n\x3c!-- 微软的老式浏览器 --\x3e\n<meta name="mobileoptimized" content="320">\n\x3c!-- uc强制竖屏 --\x3e\n<meta name="screen-orientation" content="portrait">\n\x3c!-- qq强制竖屏 --\x3e\n<meta name="x5-orientation" content="portrait">\n\x3c!-- uc强制全屏 --\x3e\n<meta name="full-screen" content="yes">\n\x3c!-- qq强制全屏 --\x3e\n<meta name="x5-fullscreen" content="true">\n\x3c!-- uc应用模式 --\x3e\n<meta name="browsermode" content="application">\n\x3c!-- qq应用模式 --\x3e\n<meta name="x5-page-mode" content="app">\n\x3c!-- windows phone 点击无高光 --\x3e\n<meta name="msapplication-tap-highlight" content="no">\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# 一个常用的移动端页面meta设置\n\n<meta charset="utf-8">\n<meta http-equiv="x-ua-compatible" content="ie=edge">\n<meta name="viewport" content="width=device-width,initial-scale=1.0,minimun-scale=1.0,maximum-scale=1.0,user-scalable=no">\n\n\n1\n2\n3\n',charsets:{cjk:!0},lastUpdated:"2022/04/11, 18:22:27",lastUpdatedTimestamp:1649672547e3},{title:"CSS教程和技巧收藏",frontmatter:{title:"CSS教程和技巧收藏",date:"2020-08-11T17:13:52.000Z",permalink:"/pages/c8f128/",categories:["页面","CSS"],tags:[null]},regularPath:"/04.%E6%8A%80%E6%9C%AF/50.%E5%89%8D%E7%AB%AF/20.CSS/00.CSS%E6%95%99%E7%A8%8B%E5%92%8C%E6%8A%80%E5%B7%A7%E6%94%B6%E8%97%8F.html",relativePath:"04.技术/50.前端/20.CSS/00.CSS教程和技巧收藏.md",key:"v-0b2ea8bc",path:"/pages/c8f128/",headers:[{level:2,title:"Flex 布局教程：语法篇",slug:"flex-布局教程-语法篇",normalizedTitle:"flex 布局教程：语法篇",charIndex:2},{level:2,title:"CSS Grid 网格布局教程",slug:"css-grid-网格布局教程",normalizedTitle:"css grid 网格布局教程",charIndex:78},{level:2,title:"只要一行代码，实现五种 CSS 经典布局",slug:"只要一行代码-实现五种-css-经典布局",normalizedTitle:"只要一行代码，实现五种 css 经典布局",charIndex:164}],headersStr:"Flex 布局教程：语法篇 CSS Grid 网格布局教程 只要一行代码，实现五种 CSS 经典布局",content:"# Flex 布局教程：语法篇\n\nhttp://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\n\n\n# CSS Grid 网格布局教程\n\nhttp://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html\n\n\n# 只要一行代码，实现五种 CSS 经典布局\n\nhttp://www.ruanyifeng.com/blog/2020/08/five-css-layouts-in-one-line.html\n\n * 空间居中布局\n   \n   > 不管容器的大小，项目总是占据中心点\n\n * 并列式布局\n   \n   > 多个项目并列，如果宽度不够，放不下的项目就自动折行\n\n * 两栏式布局\n   \n   > 一个边栏，一个主栏。边栏始终存在，主栏根据设备宽度，变宽或者变窄\n\n * 三明治布局\n   \n   > 页面在垂直方向上，分成三部分：页眉、内容区、页脚。\n\n * 圣杯布局\n   \n   > 最常用的布局，所以被比喻为圣杯。它将页面分成五个部分，除了页眉和页脚，内容区分成左边栏、主栏、右边栏。",normalizedContent:"# flex 布局教程：语法篇\n\nhttp://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\n\n\n# css grid 网格布局教程\n\nhttp://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html\n\n\n# 只要一行代码，实现五种 css 经典布局\n\nhttp://www.ruanyifeng.com/blog/2020/08/five-css-layouts-in-one-line.html\n\n * 空间居中布局\n   \n   > 不管容器的大小，项目总是占据中心点\n\n * 并列式布局\n   \n   > 多个项目并列，如果宽度不够，放不下的项目就自动折行\n\n * 两栏式布局\n   \n   > 一个边栏，一个主栏。边栏始终存在，主栏根据设备宽度，变宽或者变窄\n\n * 三明治布局\n   \n   > 页面在垂直方向上，分成三部分：页眉、内容区、页脚。\n\n * 圣杯布局\n   \n   > 最常用的布局，所以被比喻为圣杯。它将页面分成五个部分，除了页眉和页脚，内容区分成左边栏、主栏、右边栏。",charsets:{cjk:!0},lastUpdated:"2022/04/11, 18:22:27",lastUpdatedTimestamp:1649672547e3},{title:"flex布局案例-基础",frontmatter:{title:"flex布局案例-基础",date:"2019-12-25T14:27:01.000Z",permalink:"/pages/ea6db1530c42ad51",categories:["页面","CSS"],tags:[null],author:{name:"xugaoyi",link:"https://github.com/xugaoyi"}},regularPath:"/04.%E6%8A%80%E6%9C%AF/50.%E5%89%8D%E7%AB%AF/20.CSS/02.flex%E5%B8%83%E5%B1%80%E6%A1%88%E4%BE%8B-%E5%9F%BA%E7%A1%80.html",relativePath:"04.技术/50.前端/20.CSS/02.flex布局案例-基础.md",key:"v-3cc4bb4a",path:"/pages/ea6db1530c42ad51/",headersStr:null,content:'# flex布局案例-基础\n\n> 可用F12开发者工具查看元素及样式，可打开codepen在线编辑代码。\n\n<html>\n  <div class="box">\n    <span>1</span>\n    <span>2</span>\n    <span>3</span>\n    <span>4</span>\n    <span>5</span>\n    <span>6</span>\n    <span>7</span>\n  </div>\n</html>\n<style>\n/* 父元素上定义弹性盒模型，称之为 “容器” */\n.box{\n  width: 350px;\n  height: 300px;\n  background: #eee;\n  /* 基本概念：.box为容器，.box下的span为项目；.box的x轴为主轴，y轴为交叉轴 */\n  /* flex 定义为弹性盒模型 */\n  display: flex;\n  /*flex-direction 排列方向： row 行（默认） | row-reverse 行-反转  | column 列 | column-reverse 列-反转 */\n  flex-direction: row; \n  /*flex-wrap 是否换行： nowrap 不换行（默认，可能会压缩项目宽度） | wrap 换行 | wrap-reverse 换行-反转，第一行在下方 */\n  flex-wrap: wrap;\n  /* flex-flow  方向和换行的简写：默认值为row nowrap，方向 和 是否换行 的取值 */\n  flex-flow: row wrap;\n  /* justify-content 项目在主轴上的对齐方式: flex-start 左对齐（默认） | flex-end 右对齐 | center 居中 | space-between 两端对齐 | space-around 项目两侧的间隔相等*/\n  justify-content: space-around;\n  /* align-items 项目在交叉轴上的对齐方式：stretch（默认）伸展，如果项目未设置高度或设为auto，将占满整个容器的高度 | \n  flex-start 交叉轴的起点对齐 | flex-end 交叉轴的终点对齐 | center 交叉轴的中心点对齐 | baseline 项目的第一行文字的基线对齐（适用于每个项目高度不一致，以项目中的文字为基准对齐） */\n  align-items: center\n  /* align-content 多根轴线的对齐方式（一排项目为一根轴线，只有一根轴线时此样式不起作用）: \n  stretch（默认）伸展，轴线占满整个交叉轴 | flex-start 容器顶部对齐 | flex-end 容器底部对齐 | center 与交叉轴的中点对齐 |\n  space-between 与交叉轴两端对齐，轴线之间的间隔平均分布| space-around 每根轴线两侧的间隔都相等*/\n  align-content：flex-start\n  /* 代码单词中文含义 ：\n  flex 弹性； direction 方向； wrap 外套、包； flow 流动\n  justify 对齐； content 内容；space 空间、距离；between 在...之间；around 周围的\n  align 排列；stretch 伸展；\n  */\n}\n/* 子元素称之为 “项目” */\n.box span{\n  display:block;width: 50px;height: 50px;background: mediumspringgreen;margin: 10px;text-align: center;line-height: 50px;\n  /* flex-grow 项目的放大比例，默认为0，即如果存在剩余空间，也不放大;\n  如果所有为1时，则它们将等分剩余空间（如果有的话）。\n  如果其中一个项目为2，其他项目都为1，则为2的占据的剩余空间将比其他项多一倍。\n  */\n  flex-grow: 0; /* grow 扩大 */\n  /* flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。 \n  如果所有项目都为1，当空间不足时，都将等比例缩小。\n  如果其中一个项目为0，其他项目都为1，则空间不足时，为0的不缩小*/\n  flex-shrink: 1; /* shrink 缩小 */\n  /* flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（宽度）。\n  浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为`auto`，即项目的本来大小。\n  它可以设为跟`width`或`height`属性一样的值（比如50px），则项目将占据固定空间*/\n  flex-basis: auto; /* basis 基础 */\n  /* flex属性是flex-grow,flex-shrink 和 flex-basis的简写，默认值为`0 1 auto`。后两个属性可选。\n  该属性有两个快捷值：auto (1 1 auto)，即放大 和 none (0 0 auto)，即缩小。\n  建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。*/\n  flex:0 1 auto; /* flex: 0放大 1缩小 auto原本宽度*/\n}\n.box span:nth-child(2){\n  /* order 项目的排列顺序。数值越小，排列越靠前，默认为0 ; 取值：正负整数。*/\n  order: -1;\n  background: red;\n}\n.box span:nth-child(7){\n  /* align-self 属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。\n  默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。\n  取值：auto（默认） | flex-start | flex-end | center | baseline | stretch。\n  */\n  align-self: flex-end;\n  background: blue;\n}\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n\n\n\n> 参考：http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html',normalizedContent:'# flex布局案例-基础\n\n> 可用f12开发者工具查看元素及样式，可打开codepen在线编辑代码。\n\n<html>\n  <div class="box">\n    <span>1</span>\n    <span>2</span>\n    <span>3</span>\n    <span>4</span>\n    <span>5</span>\n    <span>6</span>\n    <span>7</span>\n  </div>\n</html>\n<style>\n/* 父元素上定义弹性盒模型，称之为 “容器” */\n.box{\n  width: 350px;\n  height: 300px;\n  background: #eee;\n  /* 基本概念：.box为容器，.box下的span为项目；.box的x轴为主轴，y轴为交叉轴 */\n  /* flex 定义为弹性盒模型 */\n  display: flex;\n  /*flex-direction 排列方向： row 行（默认） | row-reverse 行-反转  | column 列 | column-reverse 列-反转 */\n  flex-direction: row; \n  /*flex-wrap 是否换行： nowrap 不换行（默认，可能会压缩项目宽度） | wrap 换行 | wrap-reverse 换行-反转，第一行在下方 */\n  flex-wrap: wrap;\n  /* flex-flow  方向和换行的简写：默认值为row nowrap，方向 和 是否换行 的取值 */\n  flex-flow: row wrap;\n  /* justify-content 项目在主轴上的对齐方式: flex-start 左对齐（默认） | flex-end 右对齐 | center 居中 | space-between 两端对齐 | space-around 项目两侧的间隔相等*/\n  justify-content: space-around;\n  /* align-items 项目在交叉轴上的对齐方式：stretch（默认）伸展，如果项目未设置高度或设为auto，将占满整个容器的高度 | \n  flex-start 交叉轴的起点对齐 | flex-end 交叉轴的终点对齐 | center 交叉轴的中心点对齐 | baseline 项目的第一行文字的基线对齐（适用于每个项目高度不一致，以项目中的文字为基准对齐） */\n  align-items: center\n  /* align-content 多根轴线的对齐方式（一排项目为一根轴线，只有一根轴线时此样式不起作用）: \n  stretch（默认）伸展，轴线占满整个交叉轴 | flex-start 容器顶部对齐 | flex-end 容器底部对齐 | center 与交叉轴的中点对齐 |\n  space-between 与交叉轴两端对齐，轴线之间的间隔平均分布| space-around 每根轴线两侧的间隔都相等*/\n  align-content：flex-start\n  /* 代码单词中文含义 ：\n  flex 弹性； direction 方向； wrap 外套、包； flow 流动\n  justify 对齐； content 内容；space 空间、距离；between 在...之间；around 周围的\n  align 排列；stretch 伸展；\n  */\n}\n/* 子元素称之为 “项目” */\n.box span{\n  display:block;width: 50px;height: 50px;background: mediumspringgreen;margin: 10px;text-align: center;line-height: 50px;\n  /* flex-grow 项目的放大比例，默认为0，即如果存在剩余空间，也不放大;\n  如果所有为1时，则它们将等分剩余空间（如果有的话）。\n  如果其中一个项目为2，其他项目都为1，则为2的占据的剩余空间将比其他项多一倍。\n  */\n  flex-grow: 0; /* grow 扩大 */\n  /* flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。 \n  如果所有项目都为1，当空间不足时，都将等比例缩小。\n  如果其中一个项目为0，其他项目都为1，则空间不足时，为0的不缩小*/\n  flex-shrink: 1; /* shrink 缩小 */\n  /* flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（宽度）。\n  浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为`auto`，即项目的本来大小。\n  它可以设为跟`width`或`height`属性一样的值（比如50px），则项目将占据固定空间*/\n  flex-basis: auto; /* basis 基础 */\n  /* flex属性是flex-grow,flex-shrink 和 flex-basis的简写，默认值为`0 1 auto`。后两个属性可选。\n  该属性有两个快捷值：auto (1 1 auto)，即放大 和 none (0 0 auto)，即缩小。\n  建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。*/\n  flex:0 1 auto; /* flex: 0放大 1缩小 auto原本宽度*/\n}\n.box span:nth-child(2){\n  /* order 项目的排列顺序。数值越小，排列越靠前，默认为0 ; 取值：正负整数。*/\n  order: -1;\n  background: red;\n}\n.box span:nth-child(7){\n  /* align-self 属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。\n  默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。\n  取值：auto（默认） | flex-start | flex-end | center | baseline | stretch。\n  */\n  align-self: flex-end;\n  background: blue;\n}\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n\n\n\n> 参考：http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html',charsets:{cjk:!0},lastUpdated:"2022/04/11, 18:22:27",lastUpdatedTimestamp:1649672547e3},{title:"flex布局语法",frontmatter:{title:"flex布局语法",date:"2019-12-25T14:27:01.000Z",permalink:"/pages/0a83b083bdf257cb",author:{name:"阮一峰"},categories:["页面","CSS"],tags:[null]},regularPath:"/04.%E6%8A%80%E6%9C%AF/50.%E5%89%8D%E7%AB%AF/20.CSS/01.flex%E5%B8%83%E5%B1%80%E8%AF%AD%E6%B3%95.html",relativePath:"04.技术/50.前端/20.CSS/01.flex布局语法.md",key:"v-030c6d13",path:"/pages/0a83b083bdf257cb/",headers:[{level:2,title:"一、flex 布局是什么？",slug:"一、flex-布局是什么",normalizedTitle:"一、flex 布局是什么？",charIndex:15},{level:2,title:"二、基本概念",slug:"二、基本概念",normalizedTitle:"二、基本概念",charIndex:364},{level:2,title:"三、容器的属性",slug:"三、容器的属性",normalizedTitle:"三、容器的属性",charIndex:668},{level:3,title:"3.1 flex-direction属性",slug:"_3-1-flex-direction属性",normalizedTitle:"3.1 flex-direction属性",charIndex:893},{level:3,title:"3.2 flex-wrap属性",slug:"_3-2-flex-wrap属性",normalizedTitle:"3.2 flex-wrap属性",charIndex:1187},{level:3,title:"3.3 flex-flow",slug:"_3-3-flex-flow",normalizedTitle:"3.3 flex-flow",charIndex:1432},{level:3,title:"3.4 justify-content属性",slug:"_3-4-justify-content属性",normalizedTitle:"3.4 justify-content属性",charIndex:1593},{level:3,title:"3.5 align-items属性",slug:"_3-5-align-items属性",normalizedTitle:"3.5 align-items属性",charIndex:1957},{level:3,title:"3.6 align-content属性",slug:"_3-6-align-content属性",normalizedTitle:"3.6 align-content属性",charIndex:2301},{level:2,title:"四、项目的属性",slug:"四、项目的属性",normalizedTitle:"四、项目的属性",charIndex:2724},{level:3,title:"4.1 order属性",slug:"_4-1-order属性",normalizedTitle:"4.1 order属性",charIndex:2876},{level:3,title:"4.2 flex-grow属性",slug:"_4-2-flex-grow属性",normalizedTitle:"4.2 flex-grow属性",charIndex:2984},{level:3,title:"4.3 flex-shrink属性",slug:"_4-3-flex-shrink属性",normalizedTitle:"4.3 flex-shrink属性",charIndex:3213},{level:3,title:"4.4 flex-basis属性",slug:"_4-4-flex-basis属性",normalizedTitle:"4.4 flex-basis属性",charIndex:3455},{level:3,title:"4.5 flex属性",slug:"_4-5-flex属性",normalizedTitle:"4.5 flex属性",charIndex:3698},{level:3,title:"4.6 align-self属性",slug:"_4-6-align-self属性",normalizedTitle:"4.6 align-self属性",charIndex:3970}],excerpt:'<h1 id="flex布局语法"><a class="header-anchor" href="#flex布局语法">#</a> flex布局语法</h1>\n<h2 id="一、flex-布局是什么"><a class="header-anchor" href="#一、flex-布局是什么">#</a> 一、flex 布局是什么？</h2>\n<p>Flex是 Flexible Box 的缩写，意为&quot;弹性布局&quot;，用来为盒状模型提供最大的灵活性。</p>\n<p><strong>任何一个容器</strong> 都可以指定为 Flex 布局。</p>\n',headersStr:"一、flex 布局是什么？ 二、基本概念 三、容器的属性 3.1 flex-direction属性 3.2 flex-wrap属性 3.3 flex-flow 3.4 justify-content属性 3.5 align-items属性 3.6 align-content属性 四、项目的属性 4.1 order属性 4.2 flex-grow属性 4.3 flex-shrink属性 4.4 flex-basis属性 4.5 flex属性 4.6 align-self属性",content:'# flex布局语法\n\n\n# 一、flex 布局是什么？\n\nFlex是 Flexible Box 的缩写，意为"弹性布局"，用来为盒状模型提供最大的灵活性。\n\n任何一个容器 都可以指定为 Flex 布局。\n\n.box{\n  display: flex;\n}\n\n\n1\n2\n3\n\n\n行内元素 也可以使用 Flex 布局。\n\n.box{\n  display: inline-flex;\n}\n\n\n1\n2\n3\n\n\nWebkit 内核的浏览器，必须加上-webkit前缀。\n\n.box{\n  display: -webkit-flex; /* Safari */\n  display: flex;\n}\n\n\n1\n2\n3\n4\n\n\n注意，设为 Flex 布局以后，子元素的float、clear和vertical-align属性将失效。\n\n\n# 二、基本概念\n\n采用 Flex 布局的元素，称为 Flex 容器（flex container），简称"容器"。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称"项目"。\n\n\n\n容器默认存在两根轴：水平的主轴（或x轴）（main axis）和垂直的交叉轴（或y轴）（cross axis）。主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；交叉轴的开始位置叫做cross start，结束位置叫做cross end。\n\n项目默认沿主轴排列。单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size。\n\n\n# 三、容器的属性\n\n以下6个属性设置在容器上。(即设置在 display: flex; 的元素上)\n\n>  * flex-direction 方向 决定项目的排列方向\n> \n>  * flex-wrap 换行\n> \n>  * flex-flow 方向和换行的简写\n> \n>  * justify-content 主轴对齐方式\n> \n>  * align-items 交叉轴对齐方式\n> \n>  * align-content 多轴线的对齐方式\n\n\n# 3.1 flex-direction属性\n\nflex-direction属性决定主轴的方向（即项目的排列方向）。\n\n> .box {\n>   flex-direction: row | row-reverse | column | column-reverse;\n> }\n> \n> \n> 1\n> 2\n> 3\n\n\n\n它可能有4个值。\n\n>  * row（默认值）：主轴为水平方向，起点在左端。\n>  * row-reverse：主轴为水平方向，起点在右端。\n>  * column：主轴为垂直方向，起点在上沿。\n>  * column-reverse：主轴为垂直方向，起点在下沿。\n\n\n# 3.2 flex-wrap属性\n\n默认情况下，项目都排在一条线（又称"轴线"）上。flex-wrap属性定义，如果一条轴线排不下，如何换行。\n\n\n\n> .box{\n>   flex-wrap: nowrap | wrap | wrap-reverse;\n> }\n> \n> \n> 1\n> 2\n> 3\n\n它可能取三个值。\n\n（1）nowrap（默认）：不换行。会压缩项目的宽度\n\n\n\n（2）wrap：换行，第一行在上方。\n\n\n\n（3）wrap-reverse：换行，第一行在下方。\n\n\n\n\n# 3.3 flex-flow\n\nflex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。\n\n> .box {\n>   flex-flow: <flex-direction> || <flex-wrap>;\n> }\n> \n> \n> 1\n> 2\n> 3\n\n\n# 3.4 justify-content属性\n\njustify-content属性定义了项目在主轴上的对齐方式。\n\n> .box {\n>   justify-content: flex-start | flex-end | center | space-between | space-around;\n> }\n> \n> \n> 1\n> 2\n> 3\n\n\n\n它可能取5个值，具体对齐方式与轴的方向有关。下面假设主轴为从左到右。\n\n>  * flex-start（默认值）：左对齐\n>  * flex-end：右对齐\n>  * center： 居中\n>  * space-between：两端对齐，项目之间的间隔都相等。\n>  * space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。\n\n\n# 3.5 align-items属性\n\nalign-items属性定义项目在交叉轴上如何对齐。\n\n> .box {\n>   align-items: flex-start | flex-end | center | baseline | stretch;\n> }\n> \n> \n> 1\n> 2\n> 3\n\n\n\n它可能取5个值。具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下。\n\n>  * flex-start：交叉轴的起点对齐。\n>  * flex-end：交叉轴的终点对齐。\n>  * center：交叉轴的中点对齐。\n>  * baseline: 项目的第一行文字的基线对齐。\n>  * stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。\n\n\n# 3.6 align-content属性\n\nalign-content属性定义了多根轴线的对齐方式（一排项目为一根轴线）。如果项目只有一根轴线，该属性不起作用。\n\n> .box {\n>   align-content: flex-start | flex-end | center | space-between | space-around | stretch;\n> }\n> \n> \n> 1\n> 2\n> 3\n\n\n\n该属性可能取6个值。\n\n>  * flex-start：与交叉轴的起点对齐。\n>  * flex-end：与交叉轴的终点对齐。\n>  * center：与交叉轴的中点对齐。\n>  * space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。\n>  * space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。\n>  * stretch（默认值）：轴线占满整个交叉轴。\n\n\n# 四、项目的属性\n\n以下6个属性设置在项目上。\n\n>  * order\n>  * flex-grow\n>  * flex-shrink\n>  * flex-basis\n>  * flex flex-grow, flex-shrink 和 flex-basis的简写\n>  * align-self\n\n\n# 4.1 order属性\n\norder属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。\n\n> .item {\n>   order: <integer>;\n> }\n> \n> \n> 1\n> 2\n> 3\n\n\n\n\n# 4.2 flex-grow属性\n\nflex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。\n\n> .item {\n>   flex-grow: <number>; /* default 0 */\n> }\n> \n> \n> 1\n> 2\n> 3\n\n\n\n如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。\n\n\n# 4.3 flex-shrink属性\n\nflex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。\n\n> .item {\n>   flex-shrink: <number>; /* default 1 */\n> }\n> \n> \n> 1\n> 2\n> 3\n\n\n\n如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。\n\n负值对该属性无效。\n\n\n# 4.4 flex-basis属性\n\nflex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。\n\n> .item {\n>   flex-basis: <length> | auto; /* default auto */\n> }\n> \n> \n> 1\n> 2\n> 3\n\n它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。\n\n\n# 4.5 flex属性\n\nflex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。\n\n> .item {\n>   flex: none | [ <\'flex-grow\'> <\'flex-shrink\'>? || <\'flex-basis\'> ]\n> }\n> \n> \n> 1\n> 2\n> 3\n\n该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。\n\n建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。\n\n\n# 4.6 align-self属性\n\nalign-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。\n\n> .item {\n>   align-self: auto | flex-start | flex-end | center | baseline | stretch;\n> }\n> \n> \n> 1\n> 2\n> 3\n\n\n\n该属性可能取6个值，除了auto，其他都与align-items属性完全一致。\n\n（完）\n\n> 来源：\n> \n> http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\n> \n> http://www.ruanyifeng.com/blog/2015/07/flex-examples.html\n\n',normalizedContent:'# flex布局语法\n\n\n# 一、flex 布局是什么？\n\nflex是 flexible box 的缩写，意为"弹性布局"，用来为盒状模型提供最大的灵活性。\n\n任何一个容器 都可以指定为 flex 布局。\n\n.box{\n  display: flex;\n}\n\n\n1\n2\n3\n\n\n行内元素 也可以使用 flex 布局。\n\n.box{\n  display: inline-flex;\n}\n\n\n1\n2\n3\n\n\nwebkit 内核的浏览器，必须加上-webkit前缀。\n\n.box{\n  display: -webkit-flex; /* safari */\n  display: flex;\n}\n\n\n1\n2\n3\n4\n\n\n注意，设为 flex 布局以后，子元素的float、clear和vertical-align属性将失效。\n\n\n# 二、基本概念\n\n采用 flex 布局的元素，称为 flex 容器（flex container），简称"容器"。它的所有子元素自动成为容器成员，称为 flex 项目（flex item），简称"项目"。\n\n\n\n容器默认存在两根轴：水平的主轴（或x轴）（main axis）和垂直的交叉轴（或y轴）（cross axis）。主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；交叉轴的开始位置叫做cross start，结束位置叫做cross end。\n\n项目默认沿主轴排列。单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size。\n\n\n# 三、容器的属性\n\n以下6个属性设置在容器上。(即设置在 display: flex; 的元素上)\n\n>  * flex-direction 方向 决定项目的排列方向\n> \n>  * flex-wrap 换行\n> \n>  * flex-flow 方向和换行的简写\n> \n>  * justify-content 主轴对齐方式\n> \n>  * align-items 交叉轴对齐方式\n> \n>  * align-content 多轴线的对齐方式\n\n\n# 3.1 flex-direction属性\n\nflex-direction属性决定主轴的方向（即项目的排列方向）。\n\n> .box {\n>   flex-direction: row | row-reverse | column | column-reverse;\n> }\n> \n> \n> 1\n> 2\n> 3\n\n\n\n它可能有4个值。\n\n>  * row（默认值）：主轴为水平方向，起点在左端。\n>  * row-reverse：主轴为水平方向，起点在右端。\n>  * column：主轴为垂直方向，起点在上沿。\n>  * column-reverse：主轴为垂直方向，起点在下沿。\n\n\n# 3.2 flex-wrap属性\n\n默认情况下，项目都排在一条线（又称"轴线"）上。flex-wrap属性定义，如果一条轴线排不下，如何换行。\n\n\n\n> .box{\n>   flex-wrap: nowrap | wrap | wrap-reverse;\n> }\n> \n> \n> 1\n> 2\n> 3\n\n它可能取三个值。\n\n（1）nowrap（默认）：不换行。会压缩项目的宽度\n\n\n\n（2）wrap：换行，第一行在上方。\n\n\n\n（3）wrap-reverse：换行，第一行在下方。\n\n\n\n\n# 3.3 flex-flow\n\nflex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。\n\n> .box {\n>   flex-flow: <flex-direction> || <flex-wrap>;\n> }\n> \n> \n> 1\n> 2\n> 3\n\n\n# 3.4 justify-content属性\n\njustify-content属性定义了项目在主轴上的对齐方式。\n\n> .box {\n>   justify-content: flex-start | flex-end | center | space-between | space-around;\n> }\n> \n> \n> 1\n> 2\n> 3\n\n\n\n它可能取5个值，具体对齐方式与轴的方向有关。下面假设主轴为从左到右。\n\n>  * flex-start（默认值）：左对齐\n>  * flex-end：右对齐\n>  * center： 居中\n>  * space-between：两端对齐，项目之间的间隔都相等。\n>  * space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。\n\n\n# 3.5 align-items属性\n\nalign-items属性定义项目在交叉轴上如何对齐。\n\n> .box {\n>   align-items: flex-start | flex-end | center | baseline | stretch;\n> }\n> \n> \n> 1\n> 2\n> 3\n\n\n\n它可能取5个值。具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下。\n\n>  * flex-start：交叉轴的起点对齐。\n>  * flex-end：交叉轴的终点对齐。\n>  * center：交叉轴的中点对齐。\n>  * baseline: 项目的第一行文字的基线对齐。\n>  * stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。\n\n\n# 3.6 align-content属性\n\nalign-content属性定义了多根轴线的对齐方式（一排项目为一根轴线）。如果项目只有一根轴线，该属性不起作用。\n\n> .box {\n>   align-content: flex-start | flex-end | center | space-between | space-around | stretch;\n> }\n> \n> \n> 1\n> 2\n> 3\n\n\n\n该属性可能取6个值。\n\n>  * flex-start：与交叉轴的起点对齐。\n>  * flex-end：与交叉轴的终点对齐。\n>  * center：与交叉轴的中点对齐。\n>  * space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。\n>  * space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。\n>  * stretch（默认值）：轴线占满整个交叉轴。\n\n\n# 四、项目的属性\n\n以下6个属性设置在项目上。\n\n>  * order\n>  * flex-grow\n>  * flex-shrink\n>  * flex-basis\n>  * flex flex-grow, flex-shrink 和 flex-basis的简写\n>  * align-self\n\n\n# 4.1 order属性\n\norder属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。\n\n> .item {\n>   order: <integer>;\n> }\n> \n> \n> 1\n> 2\n> 3\n\n\n\n\n# 4.2 flex-grow属性\n\nflex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。\n\n> .item {\n>   flex-grow: <number>; /* default 0 */\n> }\n> \n> \n> 1\n> 2\n> 3\n\n\n\n如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。\n\n\n# 4.3 flex-shrink属性\n\nflex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。\n\n> .item {\n>   flex-shrink: <number>; /* default 1 */\n> }\n> \n> \n> 1\n> 2\n> 3\n\n\n\n如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。\n\n负值对该属性无效。\n\n\n# 4.4 flex-basis属性\n\nflex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。\n\n> .item {\n>   flex-basis: <length> | auto; /* default auto */\n> }\n> \n> \n> 1\n> 2\n> 3\n\n它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。\n\n\n# 4.5 flex属性\n\nflex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。\n\n> .item {\n>   flex: none | [ <\'flex-grow\'> <\'flex-shrink\'>? || <\'flex-basis\'> ]\n> }\n> \n> \n> 1\n> 2\n> 3\n\n该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。\n\n建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。\n\n\n# 4.6 align-self属性\n\nalign-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。\n\n> .item {\n>   align-self: auto | flex-start | flex-end | center | baseline | stretch;\n> }\n> \n> \n> 1\n> 2\n> 3\n\n\n\n该属性可能取6个值，除了auto，其他都与align-items属性完全一致。\n\n（完）\n\n> 来源：\n> \n> http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\n> \n> http://www.ruanyifeng.com/blog/2015/07/flex-examples.html\n\n',charsets:{cjk:!0},lastUpdated:"2022/04/11, 18:22:27",lastUpdatedTimestamp:1649672547e3},{title:"flex布局案例-骰子",frontmatter:{title:"flex布局案例-骰子",date:"2019-12-25T14:27:01.000Z",permalink:"/pages/eff61bc8b4f4695d",categories:["页面","CSS"],tags:[null],author:{name:"xugaoyi",link:"https://github.com/xugaoyi"}},regularPath:"/04.%E6%8A%80%E6%9C%AF/50.%E5%89%8D%E7%AB%AF/20.CSS/03.flex%E5%B8%83%E5%B1%80%E6%A1%88%E4%BE%8B-%E9%AA%B0%E5%AD%90.html",relativePath:"04.技术/50.前端/20.CSS/03.flex布局案例-骰子.md",key:"v-3e1b8c0c",path:"/pages/eff61bc8b4f4695d/",headersStr:null,content:'# flex布局案例-骰子\n\n> 可用F12开发者工具查看元素及样式，可打开codepen在线编辑代码。\n\n<html>\n  <div class="box2">\n    <div class="first-face">\n      <span class="pip"></span>\n    </div>\n    <div class="second-face">\n      <span class="pip"></span>\n      <span class="pip"></span>\n    </div>\n    <div class="third-face">\n      <span class="pip"></span>\n      <span class="pip"></span>\n      <span class="pip"></span>\n    </div>\n    <div class="fourth-face">\n      <div class="column">\n        <span class="pip"></span>\n        <span class="pip"></span>\n      </div>\n      <div class="column">\n        <span class="pip"></span>\n        <span class="pip"></span>\n      </div>\n    </div>\n    <div class="fifth-face">\n      <div class="column">\n        <span class="pip"></span>\n        <span class="pip"></span>\n      </div>\n      <div class="column">\n        <span class="pip"></span>\n      </div>\n      <div class="column">\n        <span class="pip"></span>\n        <span class="pip"></span>\n      </div>\n    </div>\n    <div class="sixth-face">\n      <div class="column">\n        <span class="pip"></span>\n        <span class="pip"></span>\n        <span class="pip"></span>\n      </div>\n      <div class="column">\n        <span class="pip"></span>\n        <span class="pip"></span>\n        <span class="pip"></span>\n      </div>\n    </div>\n  </div>\n</html>\n<style>\n  /* 一 */\n  .first-face { /* 形成上下左右居中 */\n    display: flex;\n    /* 项目在主轴上居中 */\n    justify-content: center;\n    /* 项目在交叉轴上居中 */\n    align-items: center;\n  }\n  /* 二 */\n  .second-face {\n    display: flex;\n    /* 两侧对齐 */\n    justify-content: space-between;\n  }\n  .second-face .pip:nth-of-type(2) {\n    /* 居下 */\n    align-self: flex-end;\n  }/* 三 */\n  .third-face {\n    display: flex;\n    /* 两侧对齐 */\n    justify-content: space-between;\n  }\n  .third-face .pip:nth-of-type(2) {\n    /* 居中 */\n    align-self: center;\n  }\n  .third-face .pip:nth-of-type(3) {\n    /* 居下 */\n    align-self: flex-end;\n  }\n  /* 四 、六*/\n  .fourth-face,\n  .sixth-face {\n    display: flex;\n    /* 两侧对齐 */\n    justify-content: space-between;\n  }\n  .fourth-face .column,\n  .sixth-face .column {\n    display: flex;\n    /* 纵向排列 */\n    flex-direction: column;\n    /* 两侧对齐 */\n    justify-content: space-between;\n  }\n  /* 五 */\n  .fifth-face {\n    display: flex;\n    /* 两侧对齐 */\n    justify-content: space-between;\n  }\n  .fifth-face .column {\n    display: flex;\n    /* 纵向排列 */\n    flex-direction: column;\n    /* 两侧对齐 */\n    justify-content: space-between;\n  }\n  .fifth-face .column:nth-of-type(2) {\n    /* 居中对齐 */\n    justify-content: center;\n  }\n/* 基础样式 */\n.box2 {\n  display: flex;\n  /* 项目在交叉轴上居中 */\n  align-items: center;\n  /* 项目在主轴上居中 */\n  justify-content: center;\n  vertical-align: center;\n  /* 允许项目换行 */\n  flex-wrap: wrap;  /* 项目是多行时以交叉轴中心对齐 */\n  align-content: center;\n  font-family: \'Open Sans\', sans-serif;\n}\n/* 类名包含face的元素 */\n[class$="face"] {\n  margin: 5px;\n  padding: 4px;  background-color: #e7e7e7;\n  width: 104px;\n  height: 104px;\n  object-fit: contain;  box-shadow:\n    inset 0 5px white,\n    inset 0 -5px #bbb,\n    inset 5px 0 #d7d7d7,\n    inset -5px 0 #d7d7d7;  border-radius: 10%;\n}\n.pip {\n  display: block;\n  width: 24px;\n  height: 24px;\n  border-radius: 50%;\n  margin: 4px;  background-color: #333;\n  box-shadow: inset 0 3px #111, inset 0 -3px #555;\n}\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n\n\n\n> 参考：http://www.ruanyifeng.com/blog/2015/07/flex-examples.html',normalizedContent:'# flex布局案例-骰子\n\n> 可用f12开发者工具查看元素及样式，可打开codepen在线编辑代码。\n\n<html>\n  <div class="box2">\n    <div class="first-face">\n      <span class="pip"></span>\n    </div>\n    <div class="second-face">\n      <span class="pip"></span>\n      <span class="pip"></span>\n    </div>\n    <div class="third-face">\n      <span class="pip"></span>\n      <span class="pip"></span>\n      <span class="pip"></span>\n    </div>\n    <div class="fourth-face">\n      <div class="column">\n        <span class="pip"></span>\n        <span class="pip"></span>\n      </div>\n      <div class="column">\n        <span class="pip"></span>\n        <span class="pip"></span>\n      </div>\n    </div>\n    <div class="fifth-face">\n      <div class="column">\n        <span class="pip"></span>\n        <span class="pip"></span>\n      </div>\n      <div class="column">\n        <span class="pip"></span>\n      </div>\n      <div class="column">\n        <span class="pip"></span>\n        <span class="pip"></span>\n      </div>\n    </div>\n    <div class="sixth-face">\n      <div class="column">\n        <span class="pip"></span>\n        <span class="pip"></span>\n        <span class="pip"></span>\n      </div>\n      <div class="column">\n        <span class="pip"></span>\n        <span class="pip"></span>\n        <span class="pip"></span>\n      </div>\n    </div>\n  </div>\n</html>\n<style>\n  /* 一 */\n  .first-face { /* 形成上下左右居中 */\n    display: flex;\n    /* 项目在主轴上居中 */\n    justify-content: center;\n    /* 项目在交叉轴上居中 */\n    align-items: center;\n  }\n  /* 二 */\n  .second-face {\n    display: flex;\n    /* 两侧对齐 */\n    justify-content: space-between;\n  }\n  .second-face .pip:nth-of-type(2) {\n    /* 居下 */\n    align-self: flex-end;\n  }/* 三 */\n  .third-face {\n    display: flex;\n    /* 两侧对齐 */\n    justify-content: space-between;\n  }\n  .third-face .pip:nth-of-type(2) {\n    /* 居中 */\n    align-self: center;\n  }\n  .third-face .pip:nth-of-type(3) {\n    /* 居下 */\n    align-self: flex-end;\n  }\n  /* 四 、六*/\n  .fourth-face,\n  .sixth-face {\n    display: flex;\n    /* 两侧对齐 */\n    justify-content: space-between;\n  }\n  .fourth-face .column,\n  .sixth-face .column {\n    display: flex;\n    /* 纵向排列 */\n    flex-direction: column;\n    /* 两侧对齐 */\n    justify-content: space-between;\n  }\n  /* 五 */\n  .fifth-face {\n    display: flex;\n    /* 两侧对齐 */\n    justify-content: space-between;\n  }\n  .fifth-face .column {\n    display: flex;\n    /* 纵向排列 */\n    flex-direction: column;\n    /* 两侧对齐 */\n    justify-content: space-between;\n  }\n  .fifth-face .column:nth-of-type(2) {\n    /* 居中对齐 */\n    justify-content: center;\n  }\n/* 基础样式 */\n.box2 {\n  display: flex;\n  /* 项目在交叉轴上居中 */\n  align-items: center;\n  /* 项目在主轴上居中 */\n  justify-content: center;\n  vertical-align: center;\n  /* 允许项目换行 */\n  flex-wrap: wrap;  /* 项目是多行时以交叉轴中心对齐 */\n  align-content: center;\n  font-family: \'open sans\', sans-serif;\n}\n/* 类名包含face的元素 */\n[class$="face"] {\n  margin: 5px;\n  padding: 4px;  background-color: #e7e7e7;\n  width: 104px;\n  height: 104px;\n  object-fit: contain;  box-shadow:\n    inset 0 5px white,\n    inset 0 -5px #bbb,\n    inset 5px 0 #d7d7d7,\n    inset -5px 0 #d7d7d7;  border-radius: 10%;\n}\n.pip {\n  display: block;\n  width: 24px;\n  height: 24px;\n  border-radius: 50%;\n  margin: 4px;  background-color: #333;\n  box-shadow: inset 0 3px #111, inset 0 -3px #555;\n}\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n\n\n\n> 参考：http://www.ruanyifeng.com/blog/2015/07/flex-examples.html',charsets:{cjk:!0},lastUpdated:"2022/04/11, 18:22:27",lastUpdatedTimestamp:1649672547e3},{title:"flex布局案例-圣杯布局",frontmatter:{title:"flex布局案例-圣杯布局",date:"2019-12-25T14:27:01.000Z",permalink:"/pages/df9e7c7214fa5046",categories:["页面","CSS"],tags:[null],author:{name:"xugaoyi",link:"https://github.com/xugaoyi"}},regularPath:"/04.%E6%8A%80%E6%9C%AF/50.%E5%89%8D%E7%AB%AF/20.CSS/04.flex%E5%B8%83%E5%B1%80%E6%A1%88%E4%BE%8B-%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80.html",relativePath:"04.技术/50.前端/20.CSS/04.flex布局案例-圣杯布局.md",key:"v-158d8f8e",path:"/pages/df9e7c7214fa5046/",headersStr:null,content:'# flex布局案例-圣杯布局\n\n> 可用F12开发者工具查看元素及样式，可打开codepen在线编辑代码。\n\n<html>\n  <div class="HolyGrail">\n    <header>#header</header>\n    <div class="wrap">\n      <nav class="left">left 宽度固定200px</nav>\n      <main class="content">center 宽度自适应</main>\n      <aside class="right">right 宽度固定200px</aside>\n    </div>\n    <footer>#footer</footer>\n  </div>\n</html>\n<style>\n  .HolyGrail {\n    text-align: center;\n    display: flex;\n    min-height: 40vh;\n    flex-direction: column;\n  }\n  .HolyGrail .wrap {\n    display: flex;\n    flex: 1;\n  }\n  .HolyGrail .content {\n    background: #eee;\n    flex: 1;\n  }\n  .HolyGrail .left,.HolyGrail .right {\n    background:lightgreen;\n    flex: 0 0 200px;\n  }\n  .HolyGrail header,.HolyGrail footer{\n    background:#999;\n    height: 50px;\n    line-height: 50px;\n  }\n  .HolyGrail .left {\n    background:salmon;\n  }\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n\n\n\n> 参考：http://www.ruanyifeng.com/blog/2015/07/flex-examples.html',normalizedContent:'# flex布局案例-圣杯布局\n\n> 可用f12开发者工具查看元素及样式，可打开codepen在线编辑代码。\n\n<html>\n  <div class="holygrail">\n    <header>#header</header>\n    <div class="wrap">\n      <nav class="left">left 宽度固定200px</nav>\n      <main class="content">center 宽度自适应</main>\n      <aside class="right">right 宽度固定200px</aside>\n    </div>\n    <footer>#footer</footer>\n  </div>\n</html>\n<style>\n  .holygrail {\n    text-align: center;\n    display: flex;\n    min-height: 40vh;\n    flex-direction: column;\n  }\n  .holygrail .wrap {\n    display: flex;\n    flex: 1;\n  }\n  .holygrail .content {\n    background: #eee;\n    flex: 1;\n  }\n  .holygrail .left,.holygrail .right {\n    background:lightgreen;\n    flex: 0 0 200px;\n  }\n  .holygrail header,.holygrail footer{\n    background:#999;\n    height: 50px;\n    line-height: 50px;\n  }\n  .holygrail .left {\n    background:salmon;\n  }\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n\n\n\n> 参考：http://www.ruanyifeng.com/blog/2015/07/flex-examples.html',charsets:{cjk:!0},lastUpdated:"2022/04/11, 18:22:27",lastUpdatedTimestamp:1649672547e3},{title:"flex布局案例-网格布局",frontmatter:{title:"flex布局案例-网格布局",date:"2019-12-25T14:27:01.000Z",permalink:"/pages/85b5a3fe218a34b7",categories:["页面","CSS"],tags:[null],author:{name:"xugaoyi",link:"https://github.com/xugaoyi"}},regularPath:"/04.%E6%8A%80%E6%9C%AF/50.%E5%89%8D%E7%AB%AF/20.CSS/05.flex%E5%B8%83%E5%B1%80%E6%A1%88%E4%BE%8B-%E7%BD%91%E6%A0%BC%E5%B8%83%E5%B1%80.html",relativePath:"04.技术/50.前端/20.CSS/05.flex布局案例-网格布局.md",key:"v-5a9d5485",path:"/pages/85b5a3fe218a34b7/",headersStr:null,content:'# flex布局案例-网格布局\n\n> 可用F12开发者工具查看元素及样式，可打开codepen在线编辑代码。\n\n<html>\n  <div class="grid">\n    <div class="grid-cell">1/2</div>\n    <div class="grid-cell">1/2</div>\n  </div>\n\n  <div class="grid">\n    <div class="grid-cell">1/3</div>\n    <div class="grid-cell">1/3</div>\n    <div class="grid-cell">1/3</div>\n  </div>\n\n  <div class="grid">\n    <div class="grid-cell">1/4</div>\n    <div class="grid-cell">1/4</div>\n    <div class="grid-cell">1/4</div>\n    <div class="grid-cell">1/4</div>\n  </div>\n\n  <div class="grid text">\n    <div class="grid-cell">\n      高度会跟随右侧元素变化\n    </div>\n    <div class="grid-cell">\n      内容填充内容填充内容填充内容填充内容填充内容填充内容填充内容填充内容填充内容填充内容填充内容填充内容填充内容填充内容填充内容填充内容填充内容填充内容填充内容填充内容填充内容填充内容填充内容填充\n    </div>\n  </div>\n\n  <h4>某个网格设置百分比宽度</h4>\n  <div class="grid">\n      <div class="grid-cell u-full">100%</div>\n  </div>\n  <div class="grid">\n      <div class="grid-cell u-1of2">50%</div>\n      <div class="grid-cell">auto</div>\n      <div class="grid-cell">auto</div>\n  </div>\n  <div class="grid">\n      <div class="grid-cell u-1of3">33.33%</div>\n      <div class="grid-cell">auto</div>\n      <div class="grid-cell">auto</div>\n  </div>\n  <div class="grid">\n      <div class="grid-cell u-1of4">25%</div>\n      <div class="grid-cell">auto</div>\n      <div class="grid-cell">auto</div>\n      <div class="grid-cell">auto</div>\n      <div class="grid-cell">auto</div>\n      <div class="grid-cell">auto</div>\n      <div class="grid-cell">auto</div>\n  </div>\n</html>\n<style>\n  .grid {\n    display: flex;\n  }\n  .grid-cell {\n    flex: 1;\n  }\n  .grid-cell.u-full {\n    flex: 0 0 100%;\n  }\n  .grid-cell.u-1of2 {\n    flex: 0 0 50%;\n  }\n  .grid-cell.u-1of3 {\n    flex: 0 0 33.3333%;\n  }\n  .grid-cell.u-1of4 {\n    flex: 0 0 25%;\n  }\n  /* 基础样式 */\n  .grid-cell {\n    background: #eee;\n    text-align: center;\n    margin: 5px;\n    padding: 10px 0;\n  }\n  .text .grid-cell {\n    text-align: left\n  }\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n\n\n\n> 参考：http://www.ruanyifeng.com/blog/2015/07/flex-examples.html',normalizedContent:'# flex布局案例-网格布局\n\n> 可用f12开发者工具查看元素及样式，可打开codepen在线编辑代码。\n\n<html>\n  <div class="grid">\n    <div class="grid-cell">1/2</div>\n    <div class="grid-cell">1/2</div>\n  </div>\n\n  <div class="grid">\n    <div class="grid-cell">1/3</div>\n    <div class="grid-cell">1/3</div>\n    <div class="grid-cell">1/3</div>\n  </div>\n\n  <div class="grid">\n    <div class="grid-cell">1/4</div>\n    <div class="grid-cell">1/4</div>\n    <div class="grid-cell">1/4</div>\n    <div class="grid-cell">1/4</div>\n  </div>\n\n  <div class="grid text">\n    <div class="grid-cell">\n      高度会跟随右侧元素变化\n    </div>\n    <div class="grid-cell">\n      内容填充内容填充内容填充内容填充内容填充内容填充内容填充内容填充内容填充内容填充内容填充内容填充内容填充内容填充内容填充内容填充内容填充内容填充内容填充内容填充内容填充内容填充内容填充内容填充\n    </div>\n  </div>\n\n  <h4>某个网格设置百分比宽度</h4>\n  <div class="grid">\n      <div class="grid-cell u-full">100%</div>\n  </div>\n  <div class="grid">\n      <div class="grid-cell u-1of2">50%</div>\n      <div class="grid-cell">auto</div>\n      <div class="grid-cell">auto</div>\n  </div>\n  <div class="grid">\n      <div class="grid-cell u-1of3">33.33%</div>\n      <div class="grid-cell">auto</div>\n      <div class="grid-cell">auto</div>\n  </div>\n  <div class="grid">\n      <div class="grid-cell u-1of4">25%</div>\n      <div class="grid-cell">auto</div>\n      <div class="grid-cell">auto</div>\n      <div class="grid-cell">auto</div>\n      <div class="grid-cell">auto</div>\n      <div class="grid-cell">auto</div>\n      <div class="grid-cell">auto</div>\n  </div>\n</html>\n<style>\n  .grid {\n    display: flex;\n  }\n  .grid-cell {\n    flex: 1;\n  }\n  .grid-cell.u-full {\n    flex: 0 0 100%;\n  }\n  .grid-cell.u-1of2 {\n    flex: 0 0 50%;\n  }\n  .grid-cell.u-1of3 {\n    flex: 0 0 33.3333%;\n  }\n  .grid-cell.u-1of4 {\n    flex: 0 0 25%;\n  }\n  /* 基础样式 */\n  .grid-cell {\n    background: #eee;\n    text-align: center;\n    margin: 5px;\n    padding: 10px 0;\n  }\n  .text .grid-cell {\n    text-align: left\n  }\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n\n\n\n> 参考：http://www.ruanyifeng.com/blog/2015/07/flex-examples.html',charsets:{cjk:!0},lastUpdated:"2022/04/11, 18:22:27",lastUpdatedTimestamp:1649672547e3},{title:"CSS3之transition过渡",frontmatter:{title:"CSS3之transition过渡",date:"2019-12-25T14:27:01.000Z",permalink:"/pages/02d7f59d98d87409",categories:["页面","CSS"],tags:[null],author:{name:"xugaoyi",link:"https://github.com/xugaoyi"}},regularPath:"/04.%E6%8A%80%E6%9C%AF/50.%E5%89%8D%E7%AB%AF/20.CSS/07.CSS3%E4%B9%8Btransition%E8%BF%87%E6%B8%A1.html",relativePath:"04.技术/50.前端/20.CSS/07.CSS3之transition过渡.md",key:"v-3c6bfcb8",path:"/pages/02d7f59d98d87409/",headersStr:null,content:'# CSS3之transition过渡\n\nhtml结构\n\n<div class="box1">  \n  <div class="div1"></div>\n  <div class="div2"></div>\n  <div class="div3"></div>\n</div>\n\n\n1\n2\n3\n4\n5\n\n\n先给元素设置transition过渡，指定样式和时间，这里设置all全部样式都采用0.3s的过渡\n\n.box1>div{\n  /* 给元素所有变化都添加过渡动画, 也可以指定唯一的过渡样式属性*/\n  transition: all .3s;\n}\n\n\n1\n2\n3\n4\n\n\n> 鼠标经过元素测试效果\n\n宽度过渡\n\n\n.div1:hover{width: 150px;}\n\n\n1\n\n\n背景色过渡\n\n\n\n.div2:hover{background: #999;}\n\n\n1\n\n\n\n\n按贝塞尔曲线设置的过渡\n\n\n\n/贝塞尔曲线过渡/\n.div3{transition-timing-function: cubic-bezier(.39,.62,.74,1.39)}\n.div3:hover{transform: translate3d(-25px, -25px, 0)}\n\n\n1\n2\n3\n\n\n\n\n\n# 贝塞尔曲线 cubic-bezier(x1,y1,x2,y2)\n\n通过调整贝塞尔曲线可以设置出多种动画效果，比如反弹效果等 X轴的范围是0~1，Y轴的取值没有规定，但是也不宜过大。 如：直线linear，即cubic-bezier(0,0,1,1)\n\n贝塞尔曲线在线工具：https://cubic-bezier.com/#.17,.67,.83,.67\n\n参考：https://www.w3school.com.cn/css3/index.asp',normalizedContent:'# css3之transition过渡\n\nhtml结构\n\n<div class="box1">  \n  <div class="div1"></div>\n  <div class="div2"></div>\n  <div class="div3"></div>\n</div>\n\n\n1\n2\n3\n4\n5\n\n\n先给元素设置transition过渡，指定样式和时间，这里设置all全部样式都采用0.3s的过渡\n\n.box1>div{\n  /* 给元素所有变化都添加过渡动画, 也可以指定唯一的过渡样式属性*/\n  transition: all .3s;\n}\n\n\n1\n2\n3\n4\n\n\n> 鼠标经过元素测试效果\n\n宽度过渡\n\n\n.div1:hover{width: 150px;}\n\n\n1\n\n\n背景色过渡\n\n\n\n.div2:hover{background: #999;}\n\n\n1\n\n\n\n\n按贝塞尔曲线设置的过渡\n\n\n\n/贝塞尔曲线过渡/\n.div3{transition-timing-function: cubic-bezier(.39,.62,.74,1.39)}\n.div3:hover{transform: translate3d(-25px, -25px, 0)}\n\n\n1\n2\n3\n\n\n\n\n\n# 贝塞尔曲线 cubic-bezier(x1,y1,x2,y2)\n\n通过调整贝塞尔曲线可以设置出多种动画效果，比如反弹效果等 x轴的范围是0~1，y轴的取值没有规定，但是也不宜过大。 如：直线linear，即cubic-bezier(0,0,1,1)\n\n贝塞尔曲线在线工具：https://cubic-bezier.com/#.17,.67,.83,.67\n\n参考：https://www.w3school.com.cn/css3/index.asp',charsets:{cjk:!0},lastUpdated:"2022/04/11, 18:22:27",lastUpdatedTimestamp:1649672547e3},{title:"flex布局案例-输入框布局",frontmatter:{title:"flex布局案例-输入框布局",date:"2019-12-25T14:27:01.000Z",permalink:"/pages/05cc577fb51c7998",categories:["页面","CSS"],tags:[null],author:{name:"xugaoyi",link:"https://github.com/xugaoyi"}},regularPath:"/04.%E6%8A%80%E6%9C%AF/50.%E5%89%8D%E7%AB%AF/20.CSS/06.flex%E5%B8%83%E5%B1%80%E6%A1%88%E4%BE%8B-%E8%BE%93%E5%85%A5%E6%A1%86%E5%B8%83%E5%B1%80.html",relativePath:"04.技术/50.前端/20.CSS/06.flex布局案例-输入框布局.md",key:"v-f8f78794",path:"/pages/05cc577fb51c7998/",headersStr:null,content:'# flex布局案例-输入框布局\n\n> 可用F12开发者工具查看元素及样式，可打开codepen在线编辑代码。\n\n<html>\n  <div class="InputAddOn">\n    <span class="InputAddOn-item">icon</span>\n    <input class="InputAddOn-field" placeholder="input宽度自适应">\n    <button class="InputAddOn-item">提交</button>\n  </div>\n  <br/>\n  <div class="Media">\n    <div class="Media-figure">左侧固定</div>\n    <p class="Media-body">右侧自适应右侧自适应右侧自适应右侧自适应右侧自适应右侧自适应右侧自适应右侧自适应右侧自适应右侧自适应右侧自适应右侧自适应右侧自适应右侧自适应</p>\n  </div>\n</html>\n<style>\n  .InputAddOn {\n    display: flex;\n  }\n  .InputAddOn-field {\n    flex: 1;\n  }\n  .Media {\n    display: flex;\n    align-items: flex-start;\n  }\n  .Media-figure {\n    width: 100px;\n    height: 100px;\n    background: #eee;\n    margin-right: 1em;\n  }\n  .Media-body {\n    flex: 1;\n  }\n  /* 基础样式 */\n  input:-webkit-autofill,\n  select:-webkit-autofill {\n    -webkit-box-shadow: 0 0 0px 1000px white inset !important;\n  }\n  input {\n    outline-color: invert;\n    outline-style: none;\n    outline-width: 0px;\n    text-shadow: none;\n    -webkit-appearance: none;\n    -webkit-user-select: text;\n    outline-color: transparent;\n    box-shadow: none;\n  }\n  .InputAddOn-item {\n    width: 100px;\n    text-align: center;\n    line-height: 30px;\n    border: 1px solid #ccc;\n    background: #eee\n  }\n  .InputAddOn-field {\n    height: 30px;\n    padding: 1px 6px;\n    border: 1px solid #ccc;\n    border-left: none;\n    border-right: none;\n  }\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n\n\n\n> 参考：http://www.ruanyifeng.com/blog/2015/07/flex-examples.html',normalizedContent:'# flex布局案例-输入框布局\n\n> 可用f12开发者工具查看元素及样式，可打开codepen在线编辑代码。\n\n<html>\n  <div class="inputaddon">\n    <span class="inputaddon-item">icon</span>\n    <input class="inputaddon-field" placeholder="input宽度自适应">\n    <button class="inputaddon-item">提交</button>\n  </div>\n  <br/>\n  <div class="media">\n    <div class="media-figure">左侧固定</div>\n    <p class="media-body">右侧自适应右侧自适应右侧自适应右侧自适应右侧自适应右侧自适应右侧自适应右侧自适应右侧自适应右侧自适应右侧自适应右侧自适应右侧自适应右侧自适应</p>\n  </div>\n</html>\n<style>\n  .inputaddon {\n    display: flex;\n  }\n  .inputaddon-field {\n    flex: 1;\n  }\n  .media {\n    display: flex;\n    align-items: flex-start;\n  }\n  .media-figure {\n    width: 100px;\n    height: 100px;\n    background: #eee;\n    margin-right: 1em;\n  }\n  .media-body {\n    flex: 1;\n  }\n  /* 基础样式 */\n  input:-webkit-autofill,\n  select:-webkit-autofill {\n    -webkit-box-shadow: 0 0 0px 1000px white inset !important;\n  }\n  input {\n    outline-color: invert;\n    outline-style: none;\n    outline-width: 0px;\n    text-shadow: none;\n    -webkit-appearance: none;\n    -webkit-user-select: text;\n    outline-color: transparent;\n    box-shadow: none;\n  }\n  .inputaddon-item {\n    width: 100px;\n    text-align: center;\n    line-height: 30px;\n    border: 1px solid #ccc;\n    background: #eee\n  }\n  .inputaddon-field {\n    height: 30px;\n    padding: 1px 6px;\n    border: 1px solid #ccc;\n    border-left: none;\n    border-right: none;\n  }\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n\n\n\n> 参考：http://www.ruanyifeng.com/blog/2015/07/flex-examples.html',charsets:{cjk:!0},lastUpdated:"2022/04/11, 18:22:27",lastUpdatedTimestamp:1649672547e3},{title:"「布局技巧」图片未加载前自动撑开元素高度",frontmatter:{title:"「布局技巧」图片未加载前自动撑开元素高度",date:"2020-02-22T16:37:10.000Z",permalink:"/pages/3d52574260725aea",categories:["页面","CSS"],tags:[null],author:{name:"xugaoyi",link:"https://github.com/xugaoyi"}},regularPath:"/04.%E6%8A%80%E6%9C%AF/50.%E5%89%8D%E7%AB%AF/20.CSS/20.%E3%80%8C%E5%B8%83%E5%B1%80%E6%8A%80%E5%B7%A7%E3%80%8D%E5%9B%BE%E7%89%87%E6%9C%AA%E5%8A%A0%E8%BD%BD%E5%89%8D%E8%87%AA%E5%8A%A8%E6%92%91%E5%BC%80%E5%85%83%E7%B4%A0%E9%AB%98%E5%BA%A6.html",relativePath:"04.技术/50.前端/20.CSS/20.「布局技巧」图片未加载前自动撑开元素高度.md",key:"v-157d6660",path:"/pages/3d52574260725aea/",excerpt:'<h1 id="「布局技巧」图片未加载前自动撑开元素高度"><a class="header-anchor" href="#「布局技巧」图片未加载前自动撑开元素高度">#</a> 「布局技巧」图片未加载前自动撑开元素高度</h1>\n<p>在移动端开发中，有一些元素是根据图片高度来自动撑开的 ，高度不能写死（如轮播图的外层元素）。在网络较慢的情况下，图片加载需要一些时间，此时该元素的高度没有被撑开，在网页布局上会有一些不想看到的效果。</p>\n',headersStr:null,content:"# 「布局技巧」图片未加载前自动撑开元素高度\n\n在移动端开发中，有一些元素是根据图片高度来自动撑开的 ，高度不能写死（如轮播图的外层元素）。在网络较慢的情况下，图片加载需要一些时间，此时该元素的高度没有被撑开，在网页布局上会有一些不想看到的效果。 这种情况我们可以设置如下样式来设置该元素的高度：\n\n.wrapper\n  overflow hidden\n  width 100%\n  height 0\n  padding-bottom 26.66% // 这个数值是图片的高宽比，即 高/宽\n  background #eee\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码中，padding-bottom 的取值是图片的高宽比（即，高/宽），它会根据 width值的26.66%计算，最终元素的高度会和图片加载完成后的高度一致。\n\n也可以使用vw的方法，但在一些浏览器可能有兼容性问题：\n\n.wrapper\n  width 100%\n  height 26.66vw\n  background #eee\n\n\n1\n2\n3\n4\n\n\n> vw，viewpoint width，视窗宽度，1vw=视窗宽度的1%\n> \n> vh，viewpoint height，视窗高度，1vh=视窗高度的1%\n> \n> 更多 CSS单位。",normalizedContent:"# 「布局技巧」图片未加载前自动撑开元素高度\n\n在移动端开发中，有一些元素是根据图片高度来自动撑开的 ，高度不能写死（如轮播图的外层元素）。在网络较慢的情况下，图片加载需要一些时间，此时该元素的高度没有被撑开，在网页布局上会有一些不想看到的效果。 这种情况我们可以设置如下样式来设置该元素的高度：\n\n.wrapper\n  overflow hidden\n  width 100%\n  height 0\n  padding-bottom 26.66% // 这个数值是图片的高宽比，即 高/宽\n  background #eee\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码中，padding-bottom 的取值是图片的高宽比（即，高/宽），它会根据 width值的26.66%计算，最终元素的高度会和图片加载完成后的高度一致。\n\n也可以使用vw的方法，但在一些浏览器可能有兼容性问题：\n\n.wrapper\n  width 100%\n  height 26.66vw\n  background #eee\n\n\n1\n2\n3\n4\n\n\n> vw，viewpoint width，视窗宽度，1vw=视窗宽度的1%\n> \n> vh，viewpoint height，视窗高度，1vh=视窗高度的1%\n> \n> 更多 css单位。",charsets:{cjk:!0},lastUpdated:"2022/04/11, 18:22:27",lastUpdatedTimestamp:1649672547e3},{title:"文字在一行或多行时超出显示省略号",frontmatter:{title:"文字在一行或多行时超出显示省略号",date:"2020-02-23T15:07:08.000Z",permalink:"/pages/42b66999cc27dc25",categories:["页面","CSS"],tags:[null],author:{name:"xugaoyi",link:"https://github.com/xugaoyi"}},regularPath:"/04.%E6%8A%80%E6%9C%AF/50.%E5%89%8D%E7%AB%AF/20.CSS/30.%E6%96%87%E5%AD%97%E5%9C%A8%E4%B8%80%E8%A1%8C%E6%88%96%E5%A4%9A%E8%A1%8C%E6%97%B6%E8%B6%85%E5%87%BA%E6%98%BE%E7%A4%BA%E7%9C%81%E7%95%A5%E5%8F%B7.html",relativePath:"04.技术/50.前端/20.CSS/30.文字在一行或多行时超出显示省略号.md",key:"v-3dbf8362",path:"/pages/42b66999cc27dc25/",headers:[{level:2,title:"一行超出显示省略",slug:"一行超出显示省略",normalizedTitle:"一行超出显示省略",charIndex:23},{level:2,title:"两行（多行）超出显示省略号",slug:"两行-多行-超出显示省略号",normalizedTitle:"两行（多行）超出显示省略号",charIndex:441},{level:2,title:"JS判断是否显示了省略号",slug:"js判断是否显示了省略号",normalizedTitle:"js判断是否显示了省略号",charIndex:1086}],excerpt:'<h1 id="文字在一行或多行时超出显示省略号"><a class="header-anchor" href="#文字在一行或多行时超出显示省略号">#</a> 文字在一行或多行时超出显示省略号</h1>\n<h2 id="一行超出显示省略"><a class="header-anchor" href="#一行超出显示省略">#</a> 一行超出显示省略</h2>\n\x3c!--beforebegin--\x3e<div class="language-css line-numbers-mode">\x3c!--afterbegin--\x3e<pre v-pre class="language-css"><code><span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>\n<span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span>\n<span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span>\n</code></pre>\n<div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div>\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e',headersStr:"一行超出显示省略 两行（多行）超出显示省略号 JS判断是否显示了省略号",content:'# 文字在一行或多行时超出显示省略号\n\n\n# 一行超出显示省略\n\noverflow: hidden;\nwhite-space: nowrap;\ntext-overflow: ellipsis;\n\n\n1\n2\n3\n\n\n<html>\n   <div class="box-42b6">演示文字演示文字演示文字演示文字演示文字演示文字演示文字演示文字演示文字演示文字演示文字演示文字演示文字演示文字演示文字演示文字演示文字</div>\n</html>\n<style>\n    .box-42b6{\n        border: 1px solid #999;\n        width: 200px;\n\n        overflow: hidden;\n        white-space: nowrap;\n        text-overflow: ellipsis;\n    }\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n\n# 两行（多行）超出显示省略号\n\noverflow: hidden;\nwhite-space: normal;\ntext-overflow: ellipsis;\ndisplay: -webkit-box;\n-webkit-line-clamp: 2;\n-webkit-box-orient: vertical;\n\n\n1\n2\n3\n4\n5\n6\n\n\n显示的行数由line-clamp样式的值决定。\n\n<html>\n   <div class="box2-42b6">演示文字演示文字演示文字演示文字演示文字演示文字演示文字演示文字演示文字演示文字演示文字演示文字演示文字演示文字演示文字演示文字演示文字</div>\n</html>\n<style>\n    .box2-42b6{\n        border: 1px solid #999;\n        width: 200px;\n\n        overflow: hidden;\n        white-space: normal;\n        text-overflow: ellipsis;\n        display: -webkit-box;\n        -webkit-line-clamp: 2;\n        -webkit-box-orient: vertical;\n\n      }\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n\n# JS判断是否显示了省略号\n\n有时候我们需要知道是否已经溢出，显示了省略号，可以用到clientHeight和scrollHeight的知识：\n\nlet cHeight = noWrapDiv.clientHeight;\nlet sHeight = noWrapDiv.scrollHeight;\nif (sHeight > cHeight) {\n      console.log("已经溢出显示省略号");\n} else {\n      console.log("没有溢出");\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n> 这里可以用于判断是否溢出显示展开收缩按钮。\n\n# 知识点拓展\n\nscrollHeight：元素内容的高度，包括由于溢出导致的视图中不可见内容。不包含滚动条、边框和外边距。\n\nclientHeight：元素内容的可视区的高度，包含内边距，但不包括水平滚动条、边框和外边距。\n\noffsetHeight：元素的像素高度，高度包含该元素的垂直内边距和边框，且是一个整数。',normalizedContent:'# 文字在一行或多行时超出显示省略号\n\n\n# 一行超出显示省略\n\noverflow: hidden;\nwhite-space: nowrap;\ntext-overflow: ellipsis;\n\n\n1\n2\n3\n\n\n<html>\n   <div class="box-42b6">演示文字演示文字演示文字演示文字演示文字演示文字演示文字演示文字演示文字演示文字演示文字演示文字演示文字演示文字演示文字演示文字演示文字</div>\n</html>\n<style>\n    .box-42b6{\n        border: 1px solid #999;\n        width: 200px;\n\n        overflow: hidden;\n        white-space: nowrap;\n        text-overflow: ellipsis;\n    }\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n\n# 两行（多行）超出显示省略号\n\noverflow: hidden;\nwhite-space: normal;\ntext-overflow: ellipsis;\ndisplay: -webkit-box;\n-webkit-line-clamp: 2;\n-webkit-box-orient: vertical;\n\n\n1\n2\n3\n4\n5\n6\n\n\n显示的行数由line-clamp样式的值决定。\n\n<html>\n   <div class="box2-42b6">演示文字演示文字演示文字演示文字演示文字演示文字演示文字演示文字演示文字演示文字演示文字演示文字演示文字演示文字演示文字演示文字演示文字</div>\n</html>\n<style>\n    .box2-42b6{\n        border: 1px solid #999;\n        width: 200px;\n\n        overflow: hidden;\n        white-space: normal;\n        text-overflow: ellipsis;\n        display: -webkit-box;\n        -webkit-line-clamp: 2;\n        -webkit-box-orient: vertical;\n\n      }\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n\n# js判断是否显示了省略号\n\n有时候我们需要知道是否已经溢出，显示了省略号，可以用到clientheight和scrollheight的知识：\n\nlet cheight = nowrapdiv.clientheight;\nlet sheight = nowrapdiv.scrollheight;\nif (sheight > cheight) {\n      console.log("已经溢出显示省略号");\n} else {\n      console.log("没有溢出");\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n> 这里可以用于判断是否溢出显示展开收缩按钮。\n\n# 知识点拓展\n\nscrollheight：元素内容的高度，包括由于溢出导致的视图中不可见内容。不包含滚动条、边框和外边距。\n\nclientheight：元素内容的可视区的高度，包含内边距，但不包括水平滚动条、边框和外边距。\n\noffsetheight：元素的像素高度，高度包含该元素的垂直内边距和边框，且是一个整数。',charsets:{cjk:!0},lastUpdated:"2022/04/11, 18:22:27",lastUpdatedTimestamp:1649672547e3},{title:"CSS3之animation动画",frontmatter:{title:"CSS3之animation动画",date:"2019-12-25T14:27:01.000Z",permalink:"/pages/c2c0432138f6e042",categories:["页面","CSS"],tags:[null],author:{name:"xugaoyi",link:"https://github.com/xugaoyi"}},regularPath:"/04.%E6%8A%80%E6%9C%AF/50.%E5%89%8D%E7%AB%AF/20.CSS/08.CSS3%E4%B9%8Banimation%E5%8A%A8%E7%94%BB.html",relativePath:"04.技术/50.前端/20.CSS/08.CSS3之animation动画.md",key:"v-33039ea5",path:"/pages/c2c0432138f6e042/",headers:[{level:3,title:"贝塞尔曲线 cubic-bezier(x1,y1,x2,y2)",slug:"贝塞尔曲线-cubic-bezier-x1-y1-x2-y2",normalizedTitle:"贝塞尔曲线 cubic-bezier(x1,y1,x2,y2)",charIndex:2232}],headersStr:"贝塞尔曲线 cubic-bezier(x1,y1,x2,y2)",content:'# CSS3之animation动画\n\n> 可用F12开发者工具查看元素及样式，可打开codepen在线编辑代码。\n\n<html>\n  <div class="animationBox">\n    <div class="rotate">旋转动画1</div>\n    <div class="play">\n      <div class="img">旋转动画2</div>\n      <span><p class="p2"></p></span>\n      <span><p></p></span>\n      <span><p></p></span>\n      <span><p class="p2"></p></span>\n    </div>\n    <div class="elasticity">弹性动画</div>\n    <div class="elasticity2">曲线弹性</div>\n  </div>\n</html>\n\n<style>\n  .animationBox{overflow: hidden;}\n  .animationBox>div{\n    width: 100px;height: 100px;background: #eee;border-radius: 50%;text-align: center;line-height: 100px;margin: 30px;float:left;\n  }\n  .rotate{\n    animation: rotate 5s linear infinite\n  }\n  .rotate:hover{ animation-play-state: paused}\n  @keyframes rotate {\n    0%{transform: rotate(0);}\n  100%{transform: rotate(360deg);}\n  }\n  .animationBox>.play {\n    position: relative;\n    margin: 50px 30px;\n    background:none;\n  }\n  .play .img{\n    position: absolute;\n    top: 0;\n    left:0;\n    z-index: 1;\n    width: 100px;height: 100px; background: #eee;\n    border-radius: 50%;\n\n    animation: rotate 5s linear infinite\n  }\n  .play span {\n    position: absolute;\n    top: 1px;\n    left:1px;\n    z-index: 0;\n    display: block;\n    width: 96px;\n    height: 96px;\n    border: 1px solid #999;\n    border-radius: 50%;\n  }\n  .play span p{display: block;width: 4px;height: 4px;background: #000;margin: -2px 0 0 50%;border-radius: 50%;opacity: 0.5;}\n  .play span .p2{margin: 50% 0 0 -2px;}\n  .play span{\n    animation: wave 5s linear infinite\n  }\n  .play>span:nth-child(3){\n    /* 延迟时间 */\n    animation-delay:1s; \n  }\n  .play>span:nth-child(4){\n    animation-delay:2.2s;\n  }\n  .play>span:nth-child(5){\n    animation-delay:3.8s;\n  }\n  \n  @keyframes wave {\n    0%\n    {\n      transform:scale(1) rotate(360deg);\n      opacity: 0.8;\n    }\n  100%\n    {\n      transform:scale(1.8) rotate(0deg);\n      opacity: 0;\n    }\n  }\n\n\n  .elasticity{\n    /* 参数说明\n      动画名称 花费时间 贝塞尔曲线 延迟开始时间 播放次数n|infinite  是否反向播放动画\n    */\n    animation: elasticity 1s linear 2s infinite\n  }\n  \n  @keyframes elasticity{\n    0%{\n      transform: scale(0);\n    }\n    60%{\n      transform: scale(1.1);\n    }\n    90%{\n      transform: scale(1);\n    }\n  }\n  \n\n  .elasticity2{\n    /**\n    贝塞尔曲线 cubic-bezier(x1,y1,x2,y2)\n\n    通过调整贝塞尔曲线可以设置出多种动画效果，比如反弹效果等\n    X轴的范围是0~1，Y轴的取值没有规定，但是也不宜过大\n    直线：linear，即cubic-bezier(0,0,1,1)\n\n    贝塞尔曲线在线工具：https://cubic-bezier.com/#.17,.67,.83,.67\n      */\n    animation: elasticity2 1s cubic-bezier(.39,.62,.74,1.39) 2s infinite\n  }\n  @keyframes elasticity2{\n    0%{\n      transform: scale(0);\n    }\n    90%{\n      transform: scale(1);\n    }\n  }\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n\n\n\n\n# 贝塞尔曲线 cubic-bezier(x1,y1,x2,y2)\n\n通过调整贝塞尔曲线可以设置出多种动画效果，比如反弹效果等 X轴的范围是0~1，Y轴的取值没有规定，但是也不宜过大。 如：直线linear，即cubic-bezier(0,0,1,1)\n\n贝塞尔曲线在线工具：https://cubic-bezier.com/#.17,.67,.83,.67\n\n> 参考：https://www.w3school.com.cn/css3/index.asp',normalizedContent:'# css3之animation动画\n\n> 可用f12开发者工具查看元素及样式，可打开codepen在线编辑代码。\n\n<html>\n  <div class="animationbox">\n    <div class="rotate">旋转动画1</div>\n    <div class="play">\n      <div class="img">旋转动画2</div>\n      <span><p class="p2"></p></span>\n      <span><p></p></span>\n      <span><p></p></span>\n      <span><p class="p2"></p></span>\n    </div>\n    <div class="elasticity">弹性动画</div>\n    <div class="elasticity2">曲线弹性</div>\n  </div>\n</html>\n\n<style>\n  .animationbox{overflow: hidden;}\n  .animationbox>div{\n    width: 100px;height: 100px;background: #eee;border-radius: 50%;text-align: center;line-height: 100px;margin: 30px;float:left;\n  }\n  .rotate{\n    animation: rotate 5s linear infinite\n  }\n  .rotate:hover{ animation-play-state: paused}\n  @keyframes rotate {\n    0%{transform: rotate(0);}\n  100%{transform: rotate(360deg);}\n  }\n  .animationbox>.play {\n    position: relative;\n    margin: 50px 30px;\n    background:none;\n  }\n  .play .img{\n    position: absolute;\n    top: 0;\n    left:0;\n    z-index: 1;\n    width: 100px;height: 100px; background: #eee;\n    border-radius: 50%;\n\n    animation: rotate 5s linear infinite\n  }\n  .play span {\n    position: absolute;\n    top: 1px;\n    left:1px;\n    z-index: 0;\n    display: block;\n    width: 96px;\n    height: 96px;\n    border: 1px solid #999;\n    border-radius: 50%;\n  }\n  .play span p{display: block;width: 4px;height: 4px;background: #000;margin: -2px 0 0 50%;border-radius: 50%;opacity: 0.5;}\n  .play span .p2{margin: 50% 0 0 -2px;}\n  .play span{\n    animation: wave 5s linear infinite\n  }\n  .play>span:nth-child(3){\n    /* 延迟时间 */\n    animation-delay:1s; \n  }\n  .play>span:nth-child(4){\n    animation-delay:2.2s;\n  }\n  .play>span:nth-child(5){\n    animation-delay:3.8s;\n  }\n  \n  @keyframes wave {\n    0%\n    {\n      transform:scale(1) rotate(360deg);\n      opacity: 0.8;\n    }\n  100%\n    {\n      transform:scale(1.8) rotate(0deg);\n      opacity: 0;\n    }\n  }\n\n\n  .elasticity{\n    /* 参数说明\n      动画名称 花费时间 贝塞尔曲线 延迟开始时间 播放次数n|infinite  是否反向播放动画\n    */\n    animation: elasticity 1s linear 2s infinite\n  }\n  \n  @keyframes elasticity{\n    0%{\n      transform: scale(0);\n    }\n    60%{\n      transform: scale(1.1);\n    }\n    90%{\n      transform: scale(1);\n    }\n  }\n  \n\n  .elasticity2{\n    /**\n    贝塞尔曲线 cubic-bezier(x1,y1,x2,y2)\n\n    通过调整贝塞尔曲线可以设置出多种动画效果，比如反弹效果等\n    x轴的范围是0~1，y轴的取值没有规定，但是也不宜过大\n    直线：linear，即cubic-bezier(0,0,1,1)\n\n    贝塞尔曲线在线工具：https://cubic-bezier.com/#.17,.67,.83,.67\n      */\n    animation: elasticity2 1s cubic-bezier(.39,.62,.74,1.39) 2s infinite\n  }\n  @keyframes elasticity2{\n    0%{\n      transform: scale(0);\n    }\n    90%{\n      transform: scale(1);\n    }\n  }\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n\n\n\n\n# 贝塞尔曲线 cubic-bezier(x1,y1,x2,y2)\n\n通过调整贝塞尔曲线可以设置出多种动画效果，比如反弹效果等 x轴的范围是0~1，y轴的取值没有规定，但是也不宜过大。 如：直线linear，即cubic-bezier(0,0,1,1)\n\n贝塞尔曲线在线工具：https://cubic-bezier.com/#.17,.67,.83,.67\n\n> 参考：https://www.w3school.com.cn/css3/index.asp',charsets:{cjk:!0},lastUpdated:"2022/04/11, 18:22:27",lastUpdatedTimestamp:1649672547e3},{title:"水平垂直居中的几种方式-案例",frontmatter:{title:"水平垂直居中的几种方式-案例",date:"2020-03-13T16:13:43.000Z",permalink:"/pages/cb7cb251adba4bf7",categories:["页面","CSS"],tags:[null],author:{name:"xugaoyi",link:"https://github.com/xugaoyi"}},regularPath:"/04.%E6%8A%80%E6%9C%AF/50.%E5%89%8D%E7%AB%AF/20.CSS/40.%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F-%E6%A1%88%E4%BE%8B.html",relativePath:"04.技术/50.前端/20.CSS/40.水平垂直居中的几种方式-案例.md",key:"v-584f7a00",path:"/pages/cb7cb251adba4bf7/",headersStr:null,content:"# 水平垂直居中的几种方式-案例\n\nSee the Pen 水平垂直居中的几种方式 by xugaoyi (@xugaoyi) on CodePen.",normalizedContent:"# 水平垂直居中的几种方式-案例\n\nsee the pen 水平垂直居中的几种方式 by xugaoyi (@xugaoyi) on codepen.",charsets:{cjk:!0},lastUpdated:"2022/04/11, 18:22:27",lastUpdatedTimestamp:1649672547e3},{title:"从box-sizing属性入手，了解盒子模型",frontmatter:{title:"从box-sizing属性入手，了解盒子模型",date:"2020-02-27T17:08:48.000Z",permalink:"/pages/20a978023139589d",categories:["页面","CSS"],tags:[null],author:{name:"xugaoyi",link:"https://github.com/xugaoyi"}},regularPath:"/04.%E6%8A%80%E6%9C%AF/50.%E5%89%8D%E7%AB%AF/20.CSS/35.%E4%BB%8Ebox-sizing%E5%B1%9E%E6%80%A7%E5%85%A5%E6%89%8B%EF%BC%8C%E4%BA%86%E8%A7%A3%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B.html",relativePath:"04.技术/50.前端/20.CSS/35.从box-sizing属性入手，了解盒子模型.md",key:"v-77561fe6",path:"/pages/20a978023139589d/",headers:[{level:2,title:"背景",slug:"背景",normalizedTitle:"背景",charIndex:29},{level:2,title:"什么是CSS 盒模型?",slug:"什么是css-盒模型",normalizedTitle:"什么是css 盒模型?",charIndex:225},{level:2,title:"标准盒模型",slug:"标准盒模型",normalizedTitle:"标准盒模型",charIndex:183},{level:2,title:"代替（IE）盒模型",slug:"代替-ie-盒模型",normalizedTitle:"代替（ie）盒模型",charIndex:319},{level:2,title:"box-sizing属性",slug:"box-sizing属性",normalizedTitle:"box-sizing属性",charIndex:3}],excerpt:'<h1 id="从box-sizing属性入手-了解盒子模型"><a class="header-anchor" href="#从box-sizing属性入手-了解盒子模型">#</a> 从box-sizing属性入手，了解盒子模型</h1>\n<h2 id="背景"><a class="header-anchor" href="#背景">#</a> 背景</h2>\n<p>先声明一下运用的场景，假如项目布局使用的是<strong>自适应</strong>的布局方式，div给出的宽度是<strong>百分比</strong>的形式，即占窗口宽度的100%，但边框<code>border</code>和内边距<code>padding</code>是用像素来表示的，此时就会造成一个问题是div总宽度超过窗口宽度。为了避免这种问题，可以使用属性<code>box-sizing:border-box</code>来把 <strong>标准盒模型</strong> 变成 <strong>代替(IE)盒模型</strong> ，从而使div的总宽度依然是100%</p>\n',headersStr:"背景 什么是CSS 盒模型? 标准盒模型 代替（IE）盒模型 box-sizing属性",content:"# 从box-sizing属性入手，了解盒子模型\n\n\n# 背景\n\n先声明一下运用的场景，假如项目布局使用的是自适应的布局方式，div给出的宽度是百分比的形式，即占窗口宽度的100%，但边框border和内边距padding是用像素来表示的，此时就会造成一个问题是div总宽度超过窗口宽度。为了避免这种问题，可以使用属性box-sizing:border-box来把 标准盒模型 变成 代替(IE)盒模型 ，从而使div的总宽度依然是100%\n\n\n# 什么是CSS 盒模型?\n\n页面布局中，一个元素的外边距（margin）、 边框（border）、内边距（padding）、内容（content）组成一个盒模型。盒模型可分为标准盒模型 和 代替（IE）盒模型。\n\n\n# 标准盒模型\n\n在标准模型中，如果你给盒设置 width 和 height，实际设置的是内容区域( content box)的宽高。 padding 和 border 再加上设置的宽高一起决定整个盒子的大小。\n\n示例：\n\n.box {\n  width: 100px;\n  height: 50px;\n  margin: 10px;\n  padding: 25px;\n  border: 5px solid black;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n如果使用标准模型，元素总宽度 = 160px （100+25+25+5+5），总高度 = 110px (50 + 25 + 25 + 5 + 5)，即内容区域content box加 padding 和 border 。\n\n> 注: margin 不计入实际大小 —— 当然，它会影响盒子在页面所占空间，但是影响的是盒子外部空间。\n\n\n# 代替（IE）盒模型\n\n你可能会认为盒子的大小还要加上边框和内边距，这样很麻烦。 因为这个原因，css还有一个替代盒模型。使用这个模型，所有宽度都是可见宽度，所以内容宽度是该宽度减去边框和填充部分。使用上面相同的样式得到总宽高是 width = 100px, height = 50px。\n\n默认浏览器会使用标准模型。如果需要使用替代模型，您可以通过为其设置 box-sizing: border-box 来实现。 这样就可以告诉浏览器使用 border-box 来定义区域，从而设定您想要的大小。\n\n.box { \n  box-sizing: border-box; \n} \n\n\n1\n2\n3\n\n\n\n# box-sizing属性\n\nCSS中的 box-sizing 属性用于告诉浏览器如何计算一个元素是总宽度和总高度\n\n在 CSS盒子模型 的默认定义里，你对一个元素所设置的 width 与 height 只会应用到这个元素的内容区。如果这个元素有任何的 border 或 padding ，绘制到屏幕上时的盒子宽度和高度会加上设置的边框和内边距值。这意味着当你调整一个元素的宽度和高度时需要时刻注意到这个元素的边框和内边距。当我们实现响应式布局时，这个特点尤其烦人。\n\nbox-sizing 属性可以被用来调整这些表现:\n\n * content-box 是默认值。如果你设置一个元素的宽为100px，那么这个元素的内容区会有100px 宽，并且任何边框和内边距的宽度都会被增加到最后绘制出来的元素宽度中。\n   \n   * 尺寸计算公式：\n     \n     width = 内容的宽度\n     \n     height = 内容的高度\n\n * border-box 告诉浏览器：你想要设置的边框和内边距的值是包含在width内的。也就是说，如果你将一个元素的width设为100px，那么这100px会包含它的border和padding，内容区的实际宽度是width减去(border + padding)的值。大多数情况下，这使得我们更容易地设定一个元素的宽高。\n   \n   * 尺寸计算公式：\n     \n     width = border + padding + 内容的宽度\n     \n     height = border + padding + 内容的高度\n\n来源：https://developer.mozilla.org/zh-CN/docs/Web/CSS/box-sizing",normalizedContent:"# 从box-sizing属性入手，了解盒子模型\n\n\n# 背景\n\n先声明一下运用的场景，假如项目布局使用的是自适应的布局方式，div给出的宽度是百分比的形式，即占窗口宽度的100%，但边框border和内边距padding是用像素来表示的，此时就会造成一个问题是div总宽度超过窗口宽度。为了避免这种问题，可以使用属性box-sizing:border-box来把 标准盒模型 变成 代替(ie)盒模型 ，从而使div的总宽度依然是100%\n\n\n# 什么是css 盒模型?\n\n页面布局中，一个元素的外边距（margin）、 边框（border）、内边距（padding）、内容（content）组成一个盒模型。盒模型可分为标准盒模型 和 代替（ie）盒模型。\n\n\n# 标准盒模型\n\n在标准模型中，如果你给盒设置 width 和 height，实际设置的是内容区域( content box)的宽高。 padding 和 border 再加上设置的宽高一起决定整个盒子的大小。\n\n示例：\n\n.box {\n  width: 100px;\n  height: 50px;\n  margin: 10px;\n  padding: 25px;\n  border: 5px solid black;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n如果使用标准模型，元素总宽度 = 160px （100+25+25+5+5），总高度 = 110px (50 + 25 + 25 + 5 + 5)，即内容区域content box加 padding 和 border 。\n\n> 注: margin 不计入实际大小 —— 当然，它会影响盒子在页面所占空间，但是影响的是盒子外部空间。\n\n\n# 代替（ie）盒模型\n\n你可能会认为盒子的大小还要加上边框和内边距，这样很麻烦。 因为这个原因，css还有一个替代盒模型。使用这个模型，所有宽度都是可见宽度，所以内容宽度是该宽度减去边框和填充部分。使用上面相同的样式得到总宽高是 width = 100px, height = 50px。\n\n默认浏览器会使用标准模型。如果需要使用替代模型，您可以通过为其设置 box-sizing: border-box 来实现。 这样就可以告诉浏览器使用 border-box 来定义区域，从而设定您想要的大小。\n\n.box { \n  box-sizing: border-box; \n} \n\n\n1\n2\n3\n\n\n\n# box-sizing属性\n\ncss中的 box-sizing 属性用于告诉浏览器如何计算一个元素是总宽度和总高度\n\n在 css盒子模型 的默认定义里，你对一个元素所设置的 width 与 height 只会应用到这个元素的内容区。如果这个元素有任何的 border 或 padding ，绘制到屏幕上时的盒子宽度和高度会加上设置的边框和内边距值。这意味着当你调整一个元素的宽度和高度时需要时刻注意到这个元素的边框和内边距。当我们实现响应式布局时，这个特点尤其烦人。\n\nbox-sizing 属性可以被用来调整这些表现:\n\n * content-box 是默认值。如果你设置一个元素的宽为100px，那么这个元素的内容区会有100px 宽，并且任何边框和内边距的宽度都会被增加到最后绘制出来的元素宽度中。\n   \n   * 尺寸计算公式：\n     \n     width = 内容的宽度\n     \n     height = 内容的高度\n\n * border-box 告诉浏览器：你想要设置的边框和内边距的值是包含在width内的。也就是说，如果你将一个元素的width设为100px，那么这100px会包含它的border和padding，内容区的实际宽度是width减去(border + padding)的值。大多数情况下，这使得我们更容易地设定一个元素的宽高。\n   \n   * 尺寸计算公式：\n     \n     width = border + padding + 内容的宽度\n     \n     height = border + padding + 内容的高度\n\n来源：https://developer.mozilla.org/zh-cn/docs/web/css/box-sizing",charsets:{cjk:!0},lastUpdated:"2022/04/11, 18:22:27",lastUpdatedTimestamp:1649672547e3},{title:"如何根据系统主题自动响应CSS深色模式",frontmatter:{title:"如何根据系统主题自动响应CSS深色模式",date:"2020-03-31T14:06:26.000Z",permalink:"/pages/5dde351274f1e39d",categories:["页面","CSS"],tags:["css"],author:{name:"xugaoyi",link:"https://github.com/xugaoyi"}},regularPath:"/04.%E6%8A%80%E6%9C%AF/50.%E5%89%8D%E7%AB%AF/20.CSS/45.%E5%A6%82%E4%BD%95%E6%A0%B9%E6%8D%AE%E7%B3%BB%E7%BB%9F%E4%B8%BB%E9%A2%98%E8%87%AA%E5%8A%A8%E5%93%8D%E5%BA%94CSS%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F.html",relativePath:"04.技术/50.前端/20.CSS/45.如何根据系统主题自动响应CSS深色模式.md",key:"v-29e25319",path:"/pages/5dde351274f1e39d/",headers:[{level:2,title:"CSS 深色模式 (Dark Mode)",slug:"css-深色模式-dark-mode",normalizedTitle:"css 深色模式 (dark mode)",charIndex:123},{level:2,title:"添加深色模式自动响应",slug:"添加深色模式自动响应",normalizedTitle:"添加深色模式自动响应",charIndex:673},{level:2,title:"JS判断深色模式",slug:"js判断深色模式",normalizedTitle:"js判断深色模式",charIndex:1087},{level:2,title:"结论",slug:"结论",normalizedTitle:"结论",charIndex:1782}],excerpt:'<h1 id="如何根据系统主题自动响应css深色模式"><a class="header-anchor" href="#如何根据系统主题自动响应css深色模式">#</a> 如何根据系统主题自动响应CSS深色模式</h1>\n<p align="center">\n  <img src="https://cdn.jsdelivr.net/gh/xugaoyi/image_store/blog/20200427163531.jpg" width="500">\n</p>\n<p>很多人喜欢选择APP或网站中的深色模式，也许他们更喜欢这样的外观，或者他们想让自己的眼睛免受疲劳。这篇文章将告诉你如何在网站中实现一个自动的CSS深色模式，根据访客的系统主题来自动响应。</p>\n',headersStr:"CSS 深色模式 (Dark Mode) 添加深色模式自动响应 JS判断深色模式 结论",content:"# 如何根据系统主题自动响应CSS深色模式\n\n\n\n很多人喜欢选择APP或网站中的深色模式，也许他们更喜欢这样的外观，或者他们想让自己的眼睛免受疲劳。这篇文章将告诉你如何在网站中实现一个自动的CSS深色模式，根据访客的系统主题来自动响应。\n\n\n# CSS 深色模式 (Dark Mode)\n\n在:root根元素中定义变量来设置主题的颜色。我建议你也这样做，因为这样会使这个过程容易得多。我定义的变量如下:\n\n:root {\n  --bg: #fff;\n  --textColor: #004050;\n  --borderColor: rgba(0,0,0,.15);\n}\n\n\n1\n2\n3\n4\n5\n\n\n> :root 这个 CSS 伪类匹配文档树的根元素。对于 HTML 来说，:root 表示 <html>元素，除了优先级更高之外，与 html 选择器相同。\n\n如果希望在样式表中使用这些变量，可以这样做\n\nbody {\n  color: var(--bg);\n}\n\n\n1\n2\n3\n\n\n这样，如果你想改变你的主题颜色，所需要做的就是修改你定义的变量，所有使用这个变量的样式都会被更新。\n\n现在我们需要定义一组新的变量，这些变量将在调用CSS深色模式时使用。对我来说，深色模式的变量是这样的:\n\n/* 定义深色模式的颜色 */\n:root {\n  --bg: rgb(30,30,34);\n  --textColor: rgb(150,150,154);\n  --borderColor: #2C2C3A;\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 添加深色模式自动响应\n\n现在我们定义了两组变量。剩下要做的一件事就是将prefers-color-scheme媒体查询添加到我们的深色模式变量中。\n\n使用您的深色模式变量并在外层添加@media查询\n\n/* 根据系统的深色模式响应深色变量 */\n@media (prefers-color-scheme: dark) {\n  :root {\n    --bg: rgb(30,30,34);\n    --textColor: rgb(150,150,154);\n    --borderColor: #2C2C3A;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n> prefers-color-scheme文档\n\n这是真的! 如果有人正在使用一个深色模式的系统主题，并访问你的网站，将自动切换到深色模式。\n\n> 如果你的电脑系统不支持深色模式，可以使用手机测试，先把手机的系统主题调到深色模式，再打开你的网站。\n\n\n# JS判断深色模式\n\n如果你的需求需要js来判断系统是否处于深色模式，可以这样做：\n\nif(window.matchMedia('(prefers-color-scheme: dark)').matches){\n  //深色主题\n}\n\n\n1\n2\n3\n\n\n> matchMedia方法返回一个MediaQueryList对象，该对象具有属性matches、media，具有方法addListener、removeListener。\n\naddListener接收一个MediaQueryList对象作为参数。 为深色模式添加监听器，以响应系统切换到或切换出深色模式：\n\nlet listeners={\n  dark:(mediaQueryList )=>{\n    if(mediaQueryList.matches){\n      alert('您切换到深色模式了！')\n    }\n  },\n  light:(mediaQueryList)=>{\n    if(mediaQueryList.matches){\n      alert('您切换到浅色模式了！')\n    }\n  }\n}\n\nwindow.matchMedia('(prefers-color-scheme: dark)').addListener(listeners.dark)\nwindow.matchMedia('(prefers-color-scheme: light)').addListener(listeners.light)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# 结论\n\n我们不仅可以在布局方面响应不同尺寸屏幕，还可以按系统主题响应深色模式。我相信你的深夜访客，或者那些喜欢深色模式的人，会感谢你的。",normalizedContent:"# 如何根据系统主题自动响应css深色模式\n\n\n\n很多人喜欢选择app或网站中的深色模式，也许他们更喜欢这样的外观，或者他们想让自己的眼睛免受疲劳。这篇文章将告诉你如何在网站中实现一个自动的css深色模式，根据访客的系统主题来自动响应。\n\n\n# css 深色模式 (dark mode)\n\n在:root根元素中定义变量来设置主题的颜色。我建议你也这样做，因为这样会使这个过程容易得多。我定义的变量如下:\n\n:root {\n  --bg: #fff;\n  --textcolor: #004050;\n  --bordercolor: rgba(0,0,0,.15);\n}\n\n\n1\n2\n3\n4\n5\n\n\n> :root 这个 css 伪类匹配文档树的根元素。对于 html 来说，:root 表示 <html>元素，除了优先级更高之外，与 html 选择器相同。\n\n如果希望在样式表中使用这些变量，可以这样做\n\nbody {\n  color: var(--bg);\n}\n\n\n1\n2\n3\n\n\n这样，如果你想改变你的主题颜色，所需要做的就是修改你定义的变量，所有使用这个变量的样式都会被更新。\n\n现在我们需要定义一组新的变量，这些变量将在调用css深色模式时使用。对我来说，深色模式的变量是这样的:\n\n/* 定义深色模式的颜色 */\n:root {\n  --bg: rgb(30,30,34);\n  --textcolor: rgb(150,150,154);\n  --bordercolor: #2c2c3a;\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 添加深色模式自动响应\n\n现在我们定义了两组变量。剩下要做的一件事就是将prefers-color-scheme媒体查询添加到我们的深色模式变量中。\n\n使用您的深色模式变量并在外层添加@media查询\n\n/* 根据系统的深色模式响应深色变量 */\n@media (prefers-color-scheme: dark) {\n  :root {\n    --bg: rgb(30,30,34);\n    --textcolor: rgb(150,150,154);\n    --bordercolor: #2c2c3a;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n> prefers-color-scheme文档\n\n这是真的! 如果有人正在使用一个深色模式的系统主题，并访问你的网站，将自动切换到深色模式。\n\n> 如果你的电脑系统不支持深色模式，可以使用手机测试，先把手机的系统主题调到深色模式，再打开你的网站。\n\n\n# js判断深色模式\n\n如果你的需求需要js来判断系统是否处于深色模式，可以这样做：\n\nif(window.matchmedia('(prefers-color-scheme: dark)').matches){\n  //深色主题\n}\n\n\n1\n2\n3\n\n\n> matchmedia方法返回一个mediaquerylist对象，该对象具有属性matches、media，具有方法addlistener、removelistener。\n\naddlistener接收一个mediaquerylist对象作为参数。 为深色模式添加监听器，以响应系统切换到或切换出深色模式：\n\nlet listeners={\n  dark:(mediaquerylist )=>{\n    if(mediaquerylist.matches){\n      alert('您切换到深色模式了！')\n    }\n  },\n  light:(mediaquerylist)=>{\n    if(mediaquerylist.matches){\n      alert('您切换到浅色模式了！')\n    }\n  }\n}\n\nwindow.matchmedia('(prefers-color-scheme: dark)').addlistener(listeners.dark)\nwindow.matchmedia('(prefers-color-scheme: light)').addlistener(listeners.light)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# 结论\n\n我们不仅可以在布局方面响应不同尺寸屏幕，还可以按系统主题响应深色模式。我相信你的深夜访客，或者那些喜欢深色模式的人，会感谢你的。",charsets:{cjk:!0},lastUpdated:"2022/04/11, 18:22:27",lastUpdatedTimestamp:1649672547e3},{title:"「css技巧」使用hover和attr()定制悬浮提示",frontmatter:{title:"「css技巧」使用hover和attr()定制悬浮提示",date:"2020-04-18T12:14:09.000Z",permalink:"/pages/941581927b4a38f8",categories:["页面","CSS"],tags:[null],author:{name:"xugaoyi",link:"https://github.com/xugaoyi"}},regularPath:"/04.%E6%8A%80%E6%9C%AF/50.%E5%89%8D%E7%AB%AF/20.CSS/50.%E3%80%8Ccss%E6%8A%80%E5%B7%A7%E3%80%8D%E4%BD%BF%E7%94%A8hover%E5%92%8Cattr()%E5%AE%9A%E5%88%B6%E6%82%AC%E6%B5%AE%E6%8F%90%E7%A4%BA.html",relativePath:"04.技术/50.前端/20.CSS/50.「css技巧」使用hover和attr()定制悬浮提示.md",key:"v-4f80cc75",path:"/pages/941581927b4a38f8/",excerpt:'<h1 id="「css技巧」使用hover和attr-定制悬浮提示-demo"><a class="header-anchor" href="#「css技巧」使用hover和attr-定制悬浮提示-demo">#</a> 「css技巧」使用hover和attr()定制悬浮提示-demo</h1>\n<iframe height="400" style="width: 100%;" scrolling="no" title="【CSS：行为】使用:hover和attr()定制悬浮提示" src="https://codepen.io/xugaoyi/embed/vYNKNaq?height=400&theme-id=light&default-tab=css,result" frameborder="no" allowtransparency="true" allowfullscreen="true" loading="lazy">\n  See the Pen <a href=\'https://codepen.io/xugaoyi/pen/vYNKNaq\'>【CSS：行为】使用:hover和attr()定制悬浮提示</a> by xugaoyi\n  (<a href=\'https://codepen.io/xugaoyi\'>@xugaoyi</a>) on <a href=\'https://codepen.io\'>CodePen</a>.\n</iframe>\n',headersStr:null,content:"# 「css技巧」使用hover和attr()定制悬浮提示-demo\n\nSee the Pen 【CSS：行为】使用:hover和attr()定制悬浮提示 by xugaoyi (@xugaoyi) on CodePen.",normalizedContent:"# 「css技巧」使用hover和attr()定制悬浮提示-demo\n\nsee the pen 【css：行为】使用:hover和attr()定制悬浮提示 by xugaoyi (@xugaoyi) on codepen.",charsets:{cjk:!0},lastUpdated:"2022/04/11, 18:22:27",lastUpdatedTimestamp:1649672547e3},{title:"CSS-function汇总",frontmatter:{title:"CSS-function汇总",date:"2020-05-12T09:36:44.000Z",permalink:"/pages/3da0d7",categories:["页面","CSS"],tags:[null],author:{name:"xugaoyi",link:"https://github.com/xugaoyi"}},regularPath:"/04.%E6%8A%80%E6%9C%AF/50.%E5%89%8D%E7%AB%AF/20.CSS/60.CSS-function%E6%B1%87%E6%80%BB.html",relativePath:"04.技术/50.前端/20.CSS/60.CSS-function汇总.md",key:"v-1d9c3c3b",path:"/pages/3da0d7/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/04/11, 18:22:27",lastUpdatedTimestamp:1649672547e3},{title:"语法简介",frontmatter:{title:"语法简介",date:"2022-05-10T22:48:40.000Z",permalink:"/pages/d872e5/",tags:["English","语法"]},regularPath:"/05.%E8%8B%B1%E8%AF%AD/01.Khan%20Academy%20-%20%E8%AF%AD%E6%B3%95/00.%E8%AF%AD%E6%B3%95%E7%AE%80%E4%BB%8B.html",relativePath:"05.英语/01.Khan Academy - 语法/00.语法简介.md",key:"v-5de59050",path:"/pages/d872e5/",headers:[{level:2,title:"链接",slug:"链接",normalizedTitle:"链接",charIndex:16},{level:2,title:"语法的要点",slug:"语法的要点",normalizedTitle:"语法的要点",charIndex:70},{level:2,title:"积累",slug:"积累",normalizedTitle:"积累",charIndex:171},{level:3,title:"A set of conventions and rules that govern language.",slug:"a-set-of-conventions-and-rules-that-govern-language",normalizedTitle:"a set of conventions and rules that govern language.",charIndex:178},{level:3,title:"context dependent.",slug:"context-dependent",normalizedTitle:"context dependent.",charIndex:253},{level:3,title:"Must know many Grammar!",slug:"must-know-many-grammar",normalizedTitle:"must know many grammar!",charIndex:276}],headersStr:"链接 语法的要点 积累 A set of conventions and rules that govern language. context dependent. Must know many Grammar!",content:"# 可汗学院 - 语法\n\n\n# 链接\n\nhttps://zh.khanacademy.org/humanities/grammar\n\n\n# 语法的要点\n\n * 对话的惯例和规则\n   * 惯例：锦上添花\n   * 规则：能让别人理解的最低限度\n * 语法依托于语境而存在（context dependent）\n * 必须知道很多语法\n\n\n# 积累\n\n\n# A set of conventions and rules that govern language.\n\n> 规范语言的一系列惯例和规则。\n\n\n# context dependent.\n\n\n# Must know many Grammar!\n\n> A set of：一系列；一套\n> \n> convention：习俗，惯例，约定\n> \n> govern：规范；管理\n> \n> context：语境\n> \n> dependent：依赖的；（n.取决）",normalizedContent:"# 可汗学院 - 语法\n\n\n# 链接\n\nhttps://zh.khanacademy.org/humanities/grammar\n\n\n# 语法的要点\n\n * 对话的惯例和规则\n   * 惯例：锦上添花\n   * 规则：能让别人理解的最低限度\n * 语法依托于语境而存在（context dependent）\n * 必须知道很多语法\n\n\n# 积累\n\n\n# a set of conventions and rules that govern language.\n\n> 规范语言的一系列惯例和规则。\n\n\n# context dependent.\n\n\n# must know many grammar!\n\n> a set of：一系列；一套\n> \n> convention：习俗，惯例，约定\n> \n> govern：规范；管理\n> \n> context：语境\n> \n> dependent：依赖的；（n.取决）",charsets:{cjk:!0},lastUpdated:"2022/12/03, 17:31:39",lastUpdatedTimestamp:1670059899e3},{title:"名词简介",frontmatter:{title:"名词简介",date:"2022-06-06T17:21:09.000Z",permalink:"/pages/b37945/",tags:["English","语法"]},regularPath:"/05.%E8%8B%B1%E8%AF%AD/01.Khan%20Academy%20-%20%E8%AF%AD%E6%B3%95/01.%E5%90%8D%E8%AF%8D/01.%E5%90%8D%E8%AF%8D%E7%AE%80%E4%BB%8B.html",relativePath:"05.英语/01.Khan Academy - 语法/01.名词/01.名词简介.md",key:"v-d54b86a8",path:"/pages/b37945/",headers:[{level:2,title:"Introduction to nouns",slug:"introduction-to-nouns",normalizedTitle:"introduction to nouns",charIndex:79},{level:3,title:"Noun is everything!",slug:"noun-is-everything",normalizedTitle:"noun is everything!",charIndex:179},{level:2,title:"Singular and Plural Nouns",slug:"singular-and-plural-nouns",normalizedTitle:"singular and plural nouns",charIndex:389},{level:3,title:"Singular Nouns",slug:"singular-nouns",normalizedTitle:"singular nouns",charIndex:432},{level:3,title:"Plural Nouns",slug:"plural-nouns",normalizedTitle:"plural nouns",charIndex:402},{level:3,title:"Sentences",slug:"sentences",normalizedTitle:"sentences",charIndex:1023}],headersStr:"Introduction to nouns Noun is everything! Singular and Plural Nouns Singular Nouns Plural Nouns Sentences",content:"# Noun\n\nhttps://liuxue.ef.com.cn/english-references/english-grammar/nouns/\n\n\n# Introduction to nouns\n\nhttps://liuxue.ef.com.cn/english-references/english-grammar/noun-gender/\n\n\n# Noun is everything!\n\n * person（人物）\n * places（地点）\n * things（事物）\n * ideas（概念）\n\nFor instance：\n\n> This is Rual.\n> \n> He is from Argentina.\n> \n> He is a penguin.\n> \n> Rual has big dreams.\n\n> 至于 This 和 he 之类的为代词\n\n\n# Singular and Plural Nouns\n\n> 单数名词和复数名词\n\n\n# Singular Nouns\n\nWhich means：single\n\nSingular only include itself of the word.\n\n> Singular contains the word single.\n\n\n# Plural Nouns\n\nWhich means：more\n\n复数会有字母“s”，来自于拉丁语中的“plus”，意为“more”\n\n复数又有规则复数（Regular plurals）和不规则复数（Irregular plurals），好在英语中大多数单词的复数形式是规则的，然而，也有些坏家伙（Irregular）。\n\n> However, here's the bad news.\n\n# Regular plurals\n\n> 规则复数\n\nFor instance：\n\nDogs Cats Dinosaurs Whales\n\n> Dinosaur：恐龙\n> \n> Whale：鲸鱼\n\n# Irregular plurals\n\n> 不规则复数\n\nFor instance：\n\n> 树叶 leaf ---\x3e leaves\n> \n> 孩子 child ---\x3e children\n> \n> 真菌 fungus ---\x3e fungi\n> \n> 老鼠 mouse ---\x3e mice\n> \n> 绵羊 sheep ---\x3e sheep（原型）\n\n\n# Sentences\n\nFor instance：\n\n> One elephant\n> \n> Two elephants",normalizedContent:"# noun\n\nhttps://liuxue.ef.com.cn/english-references/english-grammar/nouns/\n\n\n# introduction to nouns\n\nhttps://liuxue.ef.com.cn/english-references/english-grammar/noun-gender/\n\n\n# noun is everything!\n\n * person（人物）\n * places（地点）\n * things（事物）\n * ideas（概念）\n\nfor instance：\n\n> this is rual.\n> \n> he is from argentina.\n> \n> he is a penguin.\n> \n> rual has big dreams.\n\n> 至于 this 和 he 之类的为代词\n\n\n# singular and plural nouns\n\n> 单数名词和复数名词\n\n\n# singular nouns\n\nwhich means：single\n\nsingular only include itself of the word.\n\n> singular contains the word single.\n\n\n# plural nouns\n\nwhich means：more\n\n复数会有字母“s”，来自于拉丁语中的“plus”，意为“more”\n\n复数又有规则复数（regular plurals）和不规则复数（irregular plurals），好在英语中大多数单词的复数形式是规则的，然而，也有些坏家伙（irregular）。\n\n> however, here's the bad news.\n\n# regular plurals\n\n> 规则复数\n\nfor instance：\n\ndogs cats dinosaurs whales\n\n> dinosaur：恐龙\n> \n> whale：鲸鱼\n\n# irregular plurals\n\n> 不规则复数\n\nfor instance：\n\n> 树叶 leaf ---\x3e leaves\n> \n> 孩子 child ---\x3e children\n> \n> 真菌 fungus ---\x3e fungi\n> \n> 老鼠 mouse ---\x3e mice\n> \n> 绵羊 sheep ---\x3e sheep（原型）\n\n\n# sentences\n\nfor instance：\n\n> one elephant\n> \n> two elephants",charsets:{cjk:!0},lastUpdated:"2022/12/03, 17:31:39",lastUpdatedTimestamp:1670059899e3},{title:"名词类型",frontmatter:{title:"名词类型",date:"2022-12-03T15:35:55.000Z",permalink:"/pages/c5da57/",tags:["English","语法"]},regularPath:"/05.%E8%8B%B1%E8%AF%AD/01.Khan%20Academy%20-%20%E8%AF%AD%E6%B3%95/01.%E5%90%8D%E8%AF%8D/02.%E5%90%8D%E8%AF%8D%E7%B1%BB%E5%9E%8B.html",relativePath:"05.英语/01.Khan Academy - 语法/01.名词/02.名词类型.md",key:"v-39573a11",path:"/pages/c5da57/",headers:[{level:2,title:"Common and Proper Nouns",slug:"common-and-proper-nouns",normalizedTitle:"common and proper nouns",charIndex:21},{level:3,title:"Common Nouns",slug:"common-nouns",normalizedTitle:"common nouns",charIndex:62},{level:3,title:"Proper Nouns",slug:"proper-nouns",normalizedTitle:"proper nouns",charIndex:32},{level:2,title:"Concrete and Abstract Nouns",slug:"concrete-and-abstract-nouns",normalizedTitle:"concrete and abstract nouns",charIndex:550},{level:3,title:"Concrete Nouns",slug:"concrete-nouns",normalizedTitle:"concrete nouns",charIndex:595},{level:3,title:"Abstract Nouns",slug:"abstract-nouns",normalizedTitle:"abstract nouns",charIndex:563}],headersStr:"Common and Proper Nouns Common Nouns Proper Nouns Concrete and Abstract Nouns Concrete Nouns Abstract Nouns",content:"# Nouns category\n\n\n# Common and Proper Nouns\n\n> 普通名词和专有名词\n\n\n# Common Nouns\n\nWhich means：General\n\nFor instance：\n\n> city\n> \n> mountian\n\nCommon nouns are only capitalized if you find them at the beginning of sentences.\n\nYou can say：\n\n> He lives in a city.\n> \n> Mountians are my favorite.\n\n\n# Proper Nouns\n\nWhich means：Specific\n\nFor instance：\n\n> Shanghai\n> \n> Kilimanjaro（乞力马扎罗山）\n\nProper nouns are always capitalized.\n\nSo you might say:\n\n> I want to go to Shanghai.\n> \n> Have you been to Kilimanjaro before?\n> \n> Kilimanjaro is my favorite mountian.\n\n\n# Concrete and Abstract Nouns\n\n> 具体名词和抽象名词\n\n\n# Concrete Nouns\n\nWhich means：Physical\n\nFor instance：\n\n> dog\n> \n> ball\n> \n> cliff（峭壁；悬崖）\n\n\n# Abstract Nouns\n\nWhich means：Not physical\n\nFor instance：\n\n> sadness\n> \n> happiness\n> \n> freedom\n> \n> permission（许可）\n> \n> liberty（解放）\n> \n> injustice（非正义）",normalizedContent:"# nouns category\n\n\n# common and proper nouns\n\n> 普通名词和专有名词\n\n\n# common nouns\n\nwhich means：general\n\nfor instance：\n\n> city\n> \n> mountian\n\ncommon nouns are only capitalized if you find them at the beginning of sentences.\n\nyou can say：\n\n> he lives in a city.\n> \n> mountians are my favorite.\n\n\n# proper nouns\n\nwhich means：specific\n\nfor instance：\n\n> shanghai\n> \n> kilimanjaro（乞力马扎罗山）\n\nproper nouns are always capitalized.\n\nso you might say:\n\n> i want to go to shanghai.\n> \n> have you been to kilimanjaro before?\n> \n> kilimanjaro is my favorite mountian.\n\n\n# concrete and abstract nouns\n\n> 具体名词和抽象名词\n\n\n# concrete nouns\n\nwhich means：physical\n\nfor instance：\n\n> dog\n> \n> ball\n> \n> cliff（峭壁；悬崖）\n\n\n# abstract nouns\n\nwhich means：not physical\n\nfor instance：\n\n> sadness\n> \n> happiness\n> \n> freedom\n> \n> permission（许可）\n> \n> liberty（解放）\n> \n> injustice（非正义）",charsets:{cjk:!0},lastUpdated:"2022/12/03, 17:31:39",lastUpdatedTimestamp:1670059899e3},{title:"不规则复数名词：基复数和不规则结尾",frontmatter:{title:"不规则复数名词：基复数和不规则结尾",date:"2022-12-03T15:37:10.000Z",permalink:"/pages/f744b7/",tags:["English","语法"]},regularPath:"/05.%E8%8B%B1%E8%AF%AD/01.Khan%20Academy%20-%20%E8%AF%AD%E6%B3%95/01.%E5%90%8D%E8%AF%8D/03.%E4%B8%8D%E8%A7%84%E5%88%99%E5%A4%8D%E6%95%B0%E5%90%8D%E8%AF%8D%EF%BC%9A%E5%9F%BA%E5%A4%8D%E6%95%B0%E5%92%8C%E4%B8%8D%E8%A7%84%E5%88%99%E7%BB%93%E5%B0%BE.html",relativePath:"05.英语/01.Khan Academy - 语法/01.名词/03.不规则复数名词：基复数和不规则结尾.md",key:"v-63ce2149",path:"/pages/f744b7/",headers:[{level:2,title:"End -f to -ves",slug:"end-f-to-ves",normalizedTitle:"end -f to -ves",charIndex:152},{level:2,title:"End add -en",slug:"end-add-en",normalizedTitle:"end add -en",charIndex:303},{level:2,title:"Base Plural(Plural is the same as Singual)",slug:"base-plural-plural-is-the-same-as-singual",normalizedTitle:"base plural(plural is the same as singual)",charIndex:531}],headersStr:"End -f to -ves End add -en Base Plural(Plural is the same as Singual)",content:'# Irregular plural Nouns: Base plural and Irregular endings\n\nhttps://liuxue.ef.com.cn/english-references/english-grammar/singular-and-plural-nouns/\n\n\n# End -f to -ves\n\nWord end with "f", change "f" to "ves".\n\nFor instance：\n\n> leaf ---\x3e leaves（叶子）\n> \n> loaf ---\x3e loaves（面包）\n> \n> calf ---\x3e calves（小牛）\n\n\n# End add -en\n\nOnly four irregular plural nouns will end in "en".\n\nThey are：\n\n> Child ---\x3e Children（小孩们）\n> \n> Ox ---\x3e Oxen（公牛们）\n> \n> Brother ---\x3e Brotheren\n> \n> Sister ---\x3e Sisteren\n\nAmong them, only "Children" is often used.\n\n\n# Base Plural(Plural is the same as Singual)\n\n> Sheep\n> \n> Fish（如果是指 fish 的种类，则为 fishes）\n> \n> Deer（鹿）\n> \n> Species（物种）\n> \n> Aircraft（飞机）\n\nFor instance：\n\n> There was one sheep on the hill.\n> \n> There were two sheep on the hill.',normalizedContent:'# irregular plural nouns: base plural and irregular endings\n\nhttps://liuxue.ef.com.cn/english-references/english-grammar/singular-and-plural-nouns/\n\n\n# end -f to -ves\n\nword end with "f", change "f" to "ves".\n\nfor instance：\n\n> leaf ---\x3e leaves（叶子）\n> \n> loaf ---\x3e loaves（面包）\n> \n> calf ---\x3e calves（小牛）\n\n\n# end add -en\n\nonly four irregular plural nouns will end in "en".\n\nthey are：\n\n> child ---\x3e children（小孩们）\n> \n> ox ---\x3e oxen（公牛们）\n> \n> brother ---\x3e brotheren\n> \n> sister ---\x3e sisteren\n\namong them, only "children" is often used.\n\n\n# base plural(plural is the same as singual)\n\n> sheep\n> \n> fish（如果是指 fish 的种类，则为 fishes）\n> \n> deer（鹿）\n> \n> species（物种）\n> \n> aircraft（飞机）\n\nfor instance：\n\n> there was one sheep on the hill.\n> \n> there were two sheep on the hill.',charsets:{cjk:!0},lastUpdated:"2022/12/03, 17:31:39",lastUpdatedTimestamp:1670059899e3},{title:"不规则复数名词：突变复数和外来复数",frontmatter:{title:"不规则复数名词：突变复数和外来复数",date:"2022-12-03T15:37:19.000Z",permalink:"/pages/9c0957/",tags:["English","语法"]},regularPath:"/05.%E8%8B%B1%E8%AF%AD/01.Khan%20Academy%20-%20%E8%AF%AD%E6%B3%95/01.%E5%90%8D%E8%AF%8D/04.%E4%B8%8D%E8%A7%84%E5%88%99%E5%A4%8D%E6%95%B0%E5%90%8D%E8%AF%8D%EF%BC%9A%E7%AA%81%E5%8F%98%E5%A4%8D%E6%95%B0%E5%92%8C%E5%A4%96%E6%9D%A5%E5%A4%8D%E6%95%B0.html",relativePath:"05.英语/01.Khan Academy - 语法/01.名词/04.不规则复数名词：突变复数和外来复数.md",key:"v-1c1cf212",path:"/pages/9c0957/",headers:[{level:2,title:"Irregular Plural Nouns：Mutant Plurals",slug:"irregular-plural-nouns-mutant-plurals",normalizedTitle:"irregular plural nouns：mutant plurals",charIndex:2},{level:2,title:"Irregular Plural Nouns：Foreign Pluars",slug:"irregular-plural-nouns-foreign-pluars",normalizedTitle:"irregular plural nouns：foreign pluars",charIndex:288}],headersStr:"Irregular Plural Nouns：Mutant Plurals Irregular Plural Nouns：Foreign Pluars",content:"# Irregular Plural Nouns：Mutant Plurals\n\nBecause their vowel sound change another vowel sound.\n\nWORD   SINGULAR   PLURAL\n1      foot       feet\n2      woman      women\n3      man        men\n4      tooth      teeth\n5      goose      geese\n6      mouse      mice\n7      louse      lice\n\n\n# Irregular Plural Nouns：Foreign Pluars\n\n学英语之前你不需要懂拉丁语和希腊语,但是英语中的有些单词源自这些语言.了解一些希腊语、拉丁语单数变复数的情况很有帮助.\n\n",normalizedContent:"# irregular plural nouns：mutant plurals\n\nbecause their vowel sound change another vowel sound.\n\nword   singular   plural\n1      foot       feet\n2      woman      women\n3      man        men\n4      tooth      teeth\n5      goose      geese\n6      mouse      mice\n7      louse      lice\n\n\n# irregular plural nouns：foreign pluars\n\n学英语之前你不需要懂拉丁语和希腊语,但是英语中的有些单词源自这些语言.了解一些希腊语、拉丁语单数变复数的情况很有帮助.\n\n",charsets:{cjk:!0},lastUpdated:"2022/12/03, 17:31:39",lastUpdatedTimestamp:1670059899e3},{title:"动词简介",frontmatter:{title:"动词简介",date:"2022-12-03T16:46:23.000Z",permalink:"/pages/379914/",tags:[null]},regularPath:"/05.%E8%8B%B1%E8%AF%AD/01.Khan%20Academy%20-%20%E8%AF%AD%E6%B3%95/02.%E5%8A%A8%E8%AF%8D/01.%E5%8A%A8%E8%AF%8D%E7%AE%80%E4%BB%8B.html",relativePath:"05.英语/01.Khan Academy - 语法/02.动词/01.动词简介.md",key:"v-43592254",path:"/pages/379914/",headers:[{level:2,title:"What is Verb?",slug:"what-is-verb",normalizedTitle:"what is verb?",charIndex:11},{level:3,title:"What is does？",slug:"what-is-does",normalizedTitle:"what is does？",charIndex:29},{level:3,title:"For instance：",slug:"for-instance",normalizedTitle:"for instance：",charIndex:149},{level:2,title:"主谓一致",slug:"主谓一致",normalizedTitle:"主谓一致",charIndex:228},{level:3,title:"什么是主谓一致",slug:"什么是主谓一致",normalizedTitle:"什么是主谓一致",charIndex:237},{level:3,title:"For instance",slug:"for-instance-2",normalizedTitle:"for instance",charIndex:149}],headersStr:"What is Verb? What is does？ For instance： 主谓一致 什么是主谓一致 For instance",content:"# Verb\n\n\n# What is Verb?\n\n\n# What is does？\n\n * Show action（表示动作）\n * Link concepts（连接概念）\n * Help other verbs（帮助其它动词）\n\nAll sentences contain Verb.\n\n\n# For instance：\n\n> The bear roars.\n> \n> The bear runs.\n> \n> The bear sleeps.\n\n\n# 主谓一致\n\n\n# 什么是主谓一致\n\n指匹配一个句子中的主语和动词。\n\n * 如果主语为单数，则 动词+s。\n * 如果主语为复数，动词不变\n   * 可数名词+s\n   * 不可数名词不变\n\n\n# For instance\n\n> (Y): The dog barks. || The dogs bark. // 如果dog是单数,则使用前一句（动词+s）\n> \n> (X): The dog bark. || The dogs barks.\n> \n> (Y): Jack bakes a cake. || We bake a cake.\n> \n> (X): Jack bake a cake. || We bakes a cake.",normalizedContent:"# verb\n\n\n# what is verb?\n\n\n# what is does？\n\n * show action（表示动作）\n * link concepts（连接概念）\n * help other verbs（帮助其它动词）\n\nall sentences contain verb.\n\n\n# for instance：\n\n> the bear roars.\n> \n> the bear runs.\n> \n> the bear sleeps.\n\n\n# 主谓一致\n\n\n# 什么是主谓一致\n\n指匹配一个句子中的主语和动词。\n\n * 如果主语为单数，则 动词+s。\n * 如果主语为复数，动词不变\n   * 可数名词+s\n   * 不可数名词不变\n\n\n# for instance\n\n> (y): the dog barks. || the dogs bark. // 如果dog是单数,则使用前一句（动词+s）\n> \n> (x): the dog bark. || the dogs barks.\n> \n> (y): jack bakes a cake. || we bake a cake.\n> \n> (x): jack bake a cake. || we bakes a cake.",charsets:{cjk:!0},lastUpdated:"2022/12/03, 17:31:39",lastUpdatedTimestamp:1670059899e3},{title:"动词时态",frontmatter:{title:"动词时态",date:"2022-12-03T16:46:23.000Z",permalink:"/pages/22d116/",tags:[null]},regularPath:"/05.%E8%8B%B1%E8%AF%AD/01.Khan%20Academy%20-%20%E8%AF%AD%E6%B3%95/02.%E5%8A%A8%E8%AF%8D/02.%E5%8A%A8%E8%AF%8D%E6%97%B6%E6%80%81.html",relativePath:"05.英语/01.Khan Academy - 语法/02.动词/02.动词时态.md",key:"v-0de5a480",path:"/pages/22d116/",headers:[{level:2,title:"Introduction to Verb tense",slug:"introduction-to-verb-tense",normalizedTitle:"introduction to verb tense",charIndex:40},{level:3,title:"For instance",slug:"for-instance",normalizedTitle:"for instance",charIndex:127},{level:2,title:"现在时态",slug:"现在时态",normalizedTitle:"现在时态",charIndex:199},{level:2,title:"过去时态",slug:"过去时态",normalizedTitle:"过去时态",charIndex:359},{level:2,title:"将来时态",slug:"将来时态",normalizedTitle:"将来时态",charIndex:499}],headersStr:"Introduction to Verb tense For instance 现在时态 过去时态 将来时态",content:"# Verb tense\n\n> Verb [[tense]]：动词时态\n\n\n# Introduction to Verb tense\n\n时态是动词在时间上定位的能力。\n\n * 现在-Present\n * 过去-Past\n * 未来-Future\n\n\n# For instance\n\n> Talk： 现在：I talk... 过去：I talked... 未来：I will talk...\n\n\n# 现在时态\n\n可以描述现在时态的方式有两种：\n\n * 动词没有经过修饰或变形（动词原形）\n   \n   > I eat a donut. （我在吃一个甜甜圈。）\n\n * 句子中有 is 和 动词+ing 存在\n   \n   > Bertie is singing in the shower.（伯蒂边洗澡边唱歌）\n\n\n# 过去时态\n\n基本的过去式构成方式——动词+ed 大多数时候都可以通过动词末尾加 ed 将现在时的句子转换为过去时。\n\n> Present: I walk to the moon. Past: I walked to the moon.\n\n如动词末尾有 e，则可只加 d。\n\n\n# 将来时态\n\n造将来时态的句子有两种方式， will+动词 和 is going to... 组成将来时的最常用方式就是——在现在时态句子的动词前加一个 will：\n\n> present: I eat this cupcake.（我在吃这杯蛋糕。） future: I will eat this cupcake.（我将要吃这杯蛋糕。）\n\n也可以说 is going to：\n\n> future: Lorraine is going to visit Canada.（罗琳将去加拿大。）",normalizedContent:"# verb tense\n\n> verb [[tense]]：动词时态\n\n\n# introduction to verb tense\n\n时态是动词在时间上定位的能力。\n\n * 现在-present\n * 过去-past\n * 未来-future\n\n\n# for instance\n\n> talk： 现在：i talk... 过去：i talked... 未来：i will talk...\n\n\n# 现在时态\n\n可以描述现在时态的方式有两种：\n\n * 动词没有经过修饰或变形（动词原形）\n   \n   > i eat a donut. （我在吃一个甜甜圈。）\n\n * 句子中有 is 和 动词+ing 存在\n   \n   > bertie is singing in the shower.（伯蒂边洗澡边唱歌）\n\n\n# 过去时态\n\n基本的过去式构成方式——动词+ed 大多数时候都可以通过动词末尾加 ed 将现在时的句子转换为过去时。\n\n> present: i walk to the moon. past: i walked to the moon.\n\n如动词末尾有 e，则可只加 d。\n\n\n# 将来时态\n\n造将来时态的句子有两种方式， will+动词 和 is going to... 组成将来时的最常用方式就是——在现在时态句子的动词前加一个 will：\n\n> present: i eat this cupcake.（我在吃这杯蛋糕。） future: i will eat this cupcake.（我将要吃这杯蛋糕。）\n\n也可以说 is going to：\n\n> future: lorraine is going to visit canada.（罗琳将去加拿大。）",charsets:{cjk:!0},lastUpdated:"2022/12/03, 17:31:39",lastUpdatedTimestamp:1670059899e3},{title:"系动词和助动词",frontmatter:{title:"系动词和助动词",date:"2022-12-03T16:46:23.000Z",permalink:"/pages/4a60fd/",tags:[null]},regularPath:"/05.%E8%8B%B1%E8%AF%AD/01.Khan%20Academy%20-%20%E8%AF%AD%E6%B3%95/02.%E5%8A%A8%E8%AF%8D/03.%E7%B3%BB%E5%8A%A8%E8%AF%8D%E5%92%8C%E5%8A%A9%E5%8A%A8%E8%AF%8D.html",relativePath:"05.英语/01.Khan Academy - 语法/02.动词/03.系动词和助动词.md",key:"v-32908d60",path:"/pages/4a60fd/",headers:[{level:2,title:"系动词(Linking Verbs)",slug:"系动词-linking-verbs",normalizedTitle:"系动词(linking verbs)",charIndex:15},{level:2,title:"系动词 & 实义动词",slug:"系动词-实义动词",normalizedTitle:"系动词 &amp; 实义动词",charIndex:null},{level:3,title:"实义动词 Action Verbs",slug:"实义动词-action-verbs",normalizedTitle:"实义动词 action verbs",charIndex:324},{level:3,title:"系动词（状态动词 State of being Verbs）",slug:"系动词-状态动词-state-of-being-verbs",normalizedTitle:"系动词（状态动词 state of being verbs）",charIndex:509},{level:2,title:"助动词(Helping Verbs || Auxiliary Verbs)",slug:"助动词-helping-verbs-auxiliary-verbs",normalizedTitle:"助动词(helping verbs || auxiliary verbs)",charIndex:784}],headersStr:"系动词(Linking Verbs) 系动词 & 实义动词 实义动词 Action Verbs 系动词（状态动词 State of being Verbs） 助动词(Helping Verbs || Auxiliary Verbs)",content:'# 连系动词和助动词\n\n\n# 系动词(Linking Verbs)\n\n系动词可以将想法互相联系起来，反映对象是怎样的，状态如何。\n\n系动词包括所有形式的“be动词”：\n\nTO BE   EXAMPLE            TO BE   EXAMPLE\nam      I am               is      he is\nare     we are / you are   be      be nice\nbeing   they were being    been    they have been\nwas     he was             were    we were\n\n\n# 系动词 & 实义动词\n\n\n# 实义动词 Action Verbs\n\n表示做了什么动作 ---\x3e Does\n\n> The bear eats a fish. // eats 是 bear 的一个动作。\n\n> The bear looked me. // 这只熊 看着 一个叫“me”的东西。 （它看着"me"）\n\n> The bear smells a person. // 这只熊闻一个人。\n\n\n# 系动词（状态动词 State of being Verbs）\n\n表示什么状态 ---\x3e is，连接对象和想法。\n\n> The bear is hungry. // hungry 是 bear 的一种状态。\n> \n> is 连接了 “bear” 和 "hungry"\n\n> The bear looked lonely. // 这只熊 看起来 是一种“lonely”的状态。 （我看着它） looked 连接了 “bear” 和 “lonely”\n\n> The bear smells like cinnamon. // 这只熊闻起来像肉桂。\n\n\n# 助动词(Helping Verbs || Auxiliary Verbs)\n\n动词除了表示动作和连接的作用外，它还可以辅助其它动词(Help other verbs)\n\n助动词实际上就是 To hava 和 To be\n\n> Brian is eating a pizza. // 布莱恩在吃披萨。 （动作正在进行）\n> \n> Brian has eaten a pizza. // 布莱恩吃了一个披萨。 （动作在过去已经完成）\n> \n> Brian was eating a pizza. // 布莱恩刚刚在吃披萨。 （另一件事情发生之前的动作）\n> \n> Brian had been eating a pizza. // 布莱恩刚刚吃完了披萨。 （刚刚在做，到某个时刻就不再进行了）',normalizedContent:'# 连系动词和助动词\n\n\n# 系动词(linking verbs)\n\n系动词可以将想法互相联系起来，反映对象是怎样的，状态如何。\n\n系动词包括所有形式的“be动词”：\n\nto be   example            to be   example\nam      i am               is      he is\nare     we are / you are   be      be nice\nbeing   they were being    been    they have been\nwas     he was             were    we were\n\n\n# 系动词 & 实义动词\n\n\n# 实义动词 action verbs\n\n表示做了什么动作 ---\x3e does\n\n> the bear eats a fish. // eats 是 bear 的一个动作。\n\n> the bear looked me. // 这只熊 看着 一个叫“me”的东西。 （它看着"me"）\n\n> the bear smells a person. // 这只熊闻一个人。\n\n\n# 系动词（状态动词 state of being verbs）\n\n表示什么状态 ---\x3e is，连接对象和想法。\n\n> the bear is hungry. // hungry 是 bear 的一种状态。\n> \n> is 连接了 “bear” 和 "hungry"\n\n> the bear looked lonely. // 这只熊 看起来 是一种“lonely”的状态。 （我看着它） looked 连接了 “bear” 和 “lonely”\n\n> the bear smells like cinnamon. // 这只熊闻起来像肉桂。\n\n\n# 助动词(helping verbs || auxiliary verbs)\n\n动词除了表示动作和连接的作用外，它还可以辅助其它动词(help other verbs)\n\n助动词实际上就是 to hava 和 to be\n\n> brian is eating a pizza. // 布莱恩在吃披萨。 （动作正在进行）\n> \n> brian has eaten a pizza. // 布莱恩吃了一个披萨。 （动作在过去已经完成）\n> \n> brian was eating a pizza. // 布莱恩刚刚在吃披萨。 （另一件事情发生之前的动作）\n> \n> brian had been eating a pizza. // 布莱恩刚刚吃完了披萨。 （刚刚在做，到某个时刻就不再进行了）',charsets:{cjk:!0},lastUpdated:"2022/12/03, 17:31:39",lastUpdatedTimestamp:1670059899e3},{title:"语态",frontmatter:{title:"语态",date:"2022-12-03T16:46:23.000Z",permalink:"/pages/1f8c91/",tags:[null]},regularPath:"/05.%E8%8B%B1%E8%AF%AD/01.Khan%20Academy%20-%20%E8%AF%AD%E6%B3%95/02.%E5%8A%A8%E8%AF%8D/05.%E8%AF%AD%E6%80%81.html",relativePath:"05.英语/01.Khan Academy - 语法/02.动词/05.语态.md",key:"v-79350870",path:"/pages/1f8c91/",headers:[{level:2,title:"一般体",slug:"一般体",normalizedTitle:"一般体",charIndex:92},{level:2,title:"进行体",slug:"进行体",normalizedTitle:"进行体",charIndex:230},{level:2,title:"完成体",slug:"完成体",normalizedTitle:"完成体",charIndex:377}],headersStr:"一般体 进行体 完成体",content:'# Verb Aspect 动词体态\n\n如果说动词时态让我们可以准确描述过去、现在、将来,那么语态（aspect）能对事件做出时间上更精准的描述.\n\n体态就像时态中的小时态。\n\n\n# 一般体\n\n一般体态就是动词变化形式的原始时态。\n\n如果现在时、过去时没有任何助动词，仅有将来时的助动词是"will"，那它就是一般体态。\n\nFor instance：\n\n> 过去：I walked\n> \n> 现在：I walk\n> \n> 将来：I will walk\n\n\n# 进行体\n\n进行体也叫继续体，用于表达某事正在进行。\n\n"be"、"ing"就是组成进行体态的形式。\n\n> 过去进行：I was walking\n> \n> 现在进行：I am walking\n> \n> 将来进行：I will be walking\n\n进行体态总是"be"和动词词形变化。\n\n\n# 完成体\n\n人们当前谈论的动作已经完成了。\n\n形成一个完成语态的形式就是"have"加上动词的过去时。\n\n> 过去完成：I had walked\n> \n> 现在完成：I have walked\n> \n> 将来完成：I will have walked',normalizedContent:'# verb aspect 动词体态\n\n如果说动词时态让我们可以准确描述过去、现在、将来,那么语态（aspect）能对事件做出时间上更精准的描述.\n\n体态就像时态中的小时态。\n\n\n# 一般体\n\n一般体态就是动词变化形式的原始时态。\n\n如果现在时、过去时没有任何助动词，仅有将来时的助动词是"will"，那它就是一般体态。\n\nfor instance：\n\n> 过去：i walked\n> \n> 现在：i walk\n> \n> 将来：i will walk\n\n\n# 进行体\n\n进行体也叫继续体，用于表达某事正在进行。\n\n"be"、"ing"就是组成进行体态的形式。\n\n> 过去进行：i was walking\n> \n> 现在进行：i am walking\n> \n> 将来进行：i will be walking\n\n进行体态总是"be"和动词词形变化。\n\n\n# 完成体\n\n人们当前谈论的动作已经完成了。\n\n形成一个完成语态的形式就是"have"加上动词的过去时。\n\n> 过去完成：i had walked\n> \n> 现在完成：i have walked\n> \n> 将来完成：i will have walked',charsets:{cjk:!0},lastUpdated:"2022/12/03, 17:31:39",lastUpdatedTimestamp:1670059899e3},{title:"不规则动词",frontmatter:{title:"不规则动词",date:"2022-12-03T16:46:23.000Z",permalink:"/pages/6b1c2d/",tags:[null]},regularPath:"/05.%E8%8B%B1%E8%AF%AD/01.Khan%20Academy%20-%20%E8%AF%AD%E6%B3%95/02.%E5%8A%A8%E8%AF%8D/04.%E4%B8%8D%E8%A7%84%E5%88%99%E5%8A%A8%E8%AF%8D.html",relativePath:"05.英语/01.Khan Academy - 语法/02.动词/04.不规则动词.md",key:"v-b700167a",path:"/pages/6b1c2d/",headers:[{level:2,title:"最奇怪也是最常见的四个不规则动词",slug:"最奇怪也是最常见的四个不规则动词",normalizedTitle:"最奇怪也是最常见的四个不规则动词",charIndex:224},{level:2,title:"带 -ed 声的不规则动词",slug:"带-ed-声的不规则动词",normalizedTitle:"带 -ed 声的不规则动词",charIndex:608},{level:2,title:"过去完成时（过去分词）",slug:"过去完成时-过去分词",normalizedTitle:"过去完成时（过去分词）",charIndex:913},{level:2,title:"元音变化的不规则动词",slug:"元音变化的不规则动词",normalizedTitle:"元音变化的不规则动词",charIndex:1064},{level:2,title:'动词的 en 结尾变化形式（"taken" for a ride）',slug:"动词的-en-结尾变化形式-taken-for-a-ride",normalizedTitle:"动词的 en 结尾变化形式（&quot;taken&quot; for a ride）",charIndex:null},{level:2,title:"真正的不规则动词",slug:"真正的不规则动词",normalizedTitle:"真正的不规则动词",charIndex:2830}],headersStr:'最奇怪也是最常见的四个不规则动词 带 -ed 声的不规则动词 过去完成时（过去分词） 元音变化的不规则动词 动词的 en 结尾变化形式（"taken" for a ride） 真正的不规则动词',content:'# Irregular Verbs\n\nRegular Verbs talk 的过去时、现在时、将来时：\n\nPAST 过去   PRESENT 现在   FUTURE 未来\ntalked    talk         will talk\n\nIrregular Verbs run 的过去时、现在时、将来时：\n\nPAST 过去   PRESENT 现在   FUTURE 未来\nr**a**n   run          will run\n\n\n# 最奇怪也是最常见的四个不规则动词\n\nVERBS   1ST PRESENT   3RD PRESENT   PLURAL PRESENT   1ST PAST   PLURAL PAST\nbe      I am          she is        we are           I was      we were\nhava    I have        she has       we have          I had      we had\ndo      I do          she does      we do            I did      we did\nsay     I say         she says      we say           I said     we said\n\n\n# 带 -ed 声的不规则动词\n\n很多不规则动词的过去时的结尾都会尽可能的像 -ed 的发音，而不是直接加 -ed。\n\n比如常见的 t 结尾的不规则动词的过去式：\n\nPAST         PRESENT      PAST        PRESENT\nwalk**ed**   walk         spen**t**   spend\nslep**t**    sleep        lef**t**    leave\nkep**t**     keep         leap**t**   leap\nbuil**t**    build        los**t**    lose\n\n\n# 过去完成时（过去分词）\n\n过去完成时用在谈论一些 发生在过去且已经完成的事情，英语中有固定的形式表达它： 把动词和 have 结合在一起 ---\x3e have + verb\n\n例如：\n\n> have walked 走过\n> \n> have said 讲过了\n> \n> have done 完成了\n\n\n# 元音变化的不规则动词\n\n可汗学院对应的本节课程\n\n大部分规则动词的过去时和过去完成时都是一样的。但还是存在一些极少数情况。\n\nVowel shifts ——元音转换\n\n元音：舌头不碰到口腔上壁所能发出声音，包括 a、e、i、o、u 有时还包含 y。\n\n有趣的是，从 现在时 ---\x3e 过去时 ---\x3e 过去完成时 的元音发音在口腔中呈 前端 ---\x3e 中部 ---\x3e 后端 变化。\n\n从现在时到过去时再到过去完成时发音的部位越来越靠后。比如 sing、drink。\n\n例如：\n\ns**ing（元音 ih） ---\x3e sang（元音 ah） ---\x3e su**ng（元音 uh）\n\n有些动词的过去时和过去完成时是一样的，没有变化，但它们的现在时和过去时还是有变化的，比如 win、find。\n\n例如：\n\nw**in（元音 ih） ---\x3e won（元音 uh） ---\x3e wo**n（元音 uh）\n\nf**ind （元音 i-ee） ---\x3e found（元音 ow） ---\x3e fou**nd（元音 ow）\n\nPRESENT                PAST                  PAST PREFECT（过去完成时态）\n现在时、过去时、过去完成时 元音都变化：                         \ns**i**ng (I sing)      s**a**ng (she sang)   s**u**ng (they have suang)\ndr**i**nk (I drink)    dr**a**nk (I drank)   dr**u**nk (I had drunk)\n现在时、过去时 元音变化：                                \nw**i**n                w**o**n               w**o**n\nf**i**nd               f**ou**nd             f**ou**nd\nsit                    sat                   sat\nsneak                  snuck                 snuck\n特殊的：                                         \nrun                    ran                   run\n\n\n# 动词的 en 结尾变化形式（"taken" for a ride）\n\nPRESENT           PAST                 PAST PREFECT（过去分词）\ntear              tore                 tor**n** (had torn)\nshow              showed               show**n** (had shown)\nprove             proved               prov**en**\nbite（I bite：我咬）   bit（it bit：它咬了）      bitt**en**（I was bitten：我被咬了）\n                                       or（it had bitten）\nride              rode                 ridd**en**（had ridden or was ridden）\neat               ate                  eat**en**（had eaten or was eaten）\nspeak             spoke                spoke**n**\nbe                was/were             be**en**\ngo（I go：我去）       went（She went：她去了）   go**ne**（字母顺序不一样，但发音是一样的）\n\n\n# 真正的不规则动词\n\n最奇怪、最模糊、最怪诞、最可怕的动词形式，这些动词都不能归到其它动词类别。\n\n不能说它们是以 -ed 结尾的，也不能说它们是 -en 结尾的，更不能说它们在元音上有什么变化。它们是不规则动词里最不规则的地方。\n\nCHANGE（变化）        PRESENT    PAST\n-ught             teach      ta**ught**\n                  catch      ca**ught**\n                  bring      bro**ught**\n                             \n-d + 元音变化         flee       fle**d** (ee--\x3ee)\n                  say        sai**d** (a--\x3eai)\n                             \nPresent == Past   bet（赌博）    bet\n                  set（设置）    set\n                  hurt（伤害）   hurt\n                             \n                             \n炒鸡奇怪的助动词          can        could（"l"不发音）\n                  may        might\n                  shall      should（"l"不发音）\n                  will       would（"l"不发音）',normalizedContent:'# irregular verbs\n\nregular verbs talk 的过去时、现在时、将来时：\n\npast 过去   present 现在   future 未来\ntalked    talk         will talk\n\nirregular verbs run 的过去时、现在时、将来时：\n\npast 过去   present 现在   future 未来\nr**a**n   run          will run\n\n\n# 最奇怪也是最常见的四个不规则动词\n\nverbs   1st present   3rd present   plural present   1st past   plural past\nbe      i am          she is        we are           i was      we were\nhava    i have        she has       we have          i had      we had\ndo      i do          she does      we do            i did      we did\nsay     i say         she says      we say           i said     we said\n\n\n# 带 -ed 声的不规则动词\n\n很多不规则动词的过去时的结尾都会尽可能的像 -ed 的发音，而不是直接加 -ed。\n\n比如常见的 t 结尾的不规则动词的过去式：\n\npast         present      past        present\nwalk**ed**   walk         spen**t**   spend\nslep**t**    sleep        lef**t**    leave\nkep**t**     keep         leap**t**   leap\nbuil**t**    build        los**t**    lose\n\n\n# 过去完成时（过去分词）\n\n过去完成时用在谈论一些 发生在过去且已经完成的事情，英语中有固定的形式表达它： 把动词和 have 结合在一起 ---\x3e have + verb\n\n例如：\n\n> have walked 走过\n> \n> have said 讲过了\n> \n> have done 完成了\n\n\n# 元音变化的不规则动词\n\n可汗学院对应的本节课程\n\n大部分规则动词的过去时和过去完成时都是一样的。但还是存在一些极少数情况。\n\nvowel shifts ——元音转换\n\n元音：舌头不碰到口腔上壁所能发出声音，包括 a、e、i、o、u 有时还包含 y。\n\n有趣的是，从 现在时 ---\x3e 过去时 ---\x3e 过去完成时 的元音发音在口腔中呈 前端 ---\x3e 中部 ---\x3e 后端 变化。\n\n从现在时到过去时再到过去完成时发音的部位越来越靠后。比如 sing、drink。\n\n例如：\n\ns**ing（元音 ih） ---\x3e sang（元音 ah） ---\x3e su**ng（元音 uh）\n\n有些动词的过去时和过去完成时是一样的，没有变化，但它们的现在时和过去时还是有变化的，比如 win、find。\n\n例如：\n\nw**in（元音 ih） ---\x3e won（元音 uh） ---\x3e wo**n（元音 uh）\n\nf**ind （元音 i-ee） ---\x3e found（元音 ow） ---\x3e fou**nd（元音 ow）\n\npresent                past                  past prefect（过去完成时态）\n现在时、过去时、过去完成时 元音都变化：                         \ns**i**ng (i sing)      s**a**ng (she sang)   s**u**ng (they have suang)\ndr**i**nk (i drink)    dr**a**nk (i drank)   dr**u**nk (i had drunk)\n现在时、过去时 元音变化：                                \nw**i**n                w**o**n               w**o**n\nf**i**nd               f**ou**nd             f**ou**nd\nsit                    sat                   sat\nsneak                  snuck                 snuck\n特殊的：                                         \nrun                    ran                   run\n\n\n# 动词的 en 结尾变化形式（"taken" for a ride）\n\npresent           past                 past prefect（过去分词）\ntear              tore                 tor**n** (had torn)\nshow              showed               show**n** (had shown)\nprove             proved               prov**en**\nbite（i bite：我咬）   bit（it bit：它咬了）      bitt**en**（i was bitten：我被咬了）\n                                       or（it had bitten）\nride              rode                 ridd**en**（had ridden or was ridden）\neat               ate                  eat**en**（had eaten or was eaten）\nspeak             spoke                spoke**n**\nbe                was/were             be**en**\ngo（i go：我去）       went（she went：她去了）   go**ne**（字母顺序不一样，但发音是一样的）\n\n\n# 真正的不规则动词\n\n最奇怪、最模糊、最怪诞、最可怕的动词形式，这些动词都不能归到其它动词类别。\n\n不能说它们是以 -ed 结尾的，也不能说它们是 -en 结尾的，更不能说它们在元音上有什么变化。它们是不规则动词里最不规则的地方。\n\nchange（变化）        present    past\n-ught             teach      ta**ught**\n                  catch      ca**ught**\n                  bring      bro**ught**\n                             \n-d + 元音变化         flee       fle**d** (ee--\x3ee)\n                  say        sai**d** (a--\x3eai)\n                             \npresent == past   bet（赌博）    bet\n                  set（设置）    set\n                  hurt（伤害）   hurt\n                             \n                             \n炒鸡奇怪的助动词          can        could（"l"不发音）\n                  may        might\n                  shall      should（"l"不发音）\n                  will       would（"l"不发音）',charsets:{cjk:!0},lastUpdated:"2022/12/03, 17:31:39",lastUpdatedTimestamp:1670059899e3},{title:"动词体和情态动词",frontmatter:{title:"动词体和情态动词",date:"2022-12-03T16:46:23.000Z",permalink:"/pages/6ffc85/",tags:[null]},regularPath:"/05.%E8%8B%B1%E8%AF%AD/01.Khan%20Academy%20-%20%E8%AF%AD%E6%B3%95/02.%E5%8A%A8%E8%AF%8D/06.%E5%8A%A8%E8%AF%8D%E4%BD%93%E5%92%8C%E6%83%85%E6%80%81%E5%8A%A8%E8%AF%8D.html",relativePath:"05.英语/01.Khan Academy - 语法/02.动词/06.动词体和情态动词.md",key:"v-2b29a74e",path:"/pages/6ffc85/",headers:[{level:2,title:"完成进行体",slug:"完成进行体",normalizedTitle:"完成进行体",charIndex:15},{level:2,title:"情态动词",slug:"情态动词",normalizedTitle:"情态动词",charIndex:6},{level:3,title:"但什么是情态呢？(But what is modality?)",slug:"但什么是情态呢-but-what-is-modality",normalizedTitle:"但什么是情态呢？(but what is modality?)",charIndex:371},{level:3,title:"情态动词有哪些？",slug:"情态动词有哪些",normalizedTitle:"情态动词有哪些？",charIndex:543},{level:3,title:"情态动词的功能",slug:"情态动词的功能",normalizedTitle:"情态动词的功能",charIndex:777}],headersStr:"完成进行体 情态动词 但什么是情态呢？(But what is modality?) 情态动词有哪些？ 情态动词的功能",content:'# 动词体和情态动词\n\n\n# 完成进行体\n\n形式：have + been + verb_ing\n\n唯一变化的是助动词 have，随着你所用的时态而变化。\n\n时态 + 完成进行体：\n\n> 过去：I had been eating cookies. // 我一直再吃曲奇饼干。\n> \n> 现在：I have been eating cookies. // 我吃了挺久的曲奇饼干。\n> \n> 将来：I will have been eating cookies. // 我将吃了很久的曲奇饼干。\n\n这个体态可以表示某件事会进行多久。\n\n> 到下周四，我将要吃了40年的曲奇饼干了，此生无憾了。\n\n\n# 情态动词\n\n有一类称为情态助词的助动词可以被用来表达某些情况：比如当提出建议时,猜测可能性时,对别人发出请求时,等等.情态动词非常好用.\n\n\n# 但什么是情态呢？(But what is modality?)\n\n> 情态就是我们使用这些动词表达事物的条件或状况。\n> \n> 我们使用这些动词来确定：\n> \n>  * 某事是可能发生，还是一定发生了\n>  * 某事是否存在\n>  * 我们是否有能力做某事\n>  * 我们是否得到做某事的许可\n>  * 我们是否有义务要求或需要做某事\n\n\n# 情态动词有哪些？\n\nWORDS    TRANSLATE   \nmay                  \nmight                \nmust                 \ncan                  \ncould                \nshall                \nshould               \nwill                 \nwould                \n\n\n# 情态动词的功能\n\n 1. 情态动词适用于一切事物（主语）。可以使用 任何主语 + 任何一个情态动词。\n    \n    > I/You/He/She/They/We can do it!\n\n任何句子主语搭配的情态动词都不需要发生改变。\n\n 2. 情态动词能做的事情其实就是它们不能做的事情。它们没有 "to" 的形式，也就是"不定式"形式。\n    \n    所以，绝对没有 "to may"、"to could"、"to should"等等。\n\n 3. 表明情态，它能设定条件。\n    \n    也就是情态动词的释义。\n    \n    > You must remove your shoes. // 必须\n    > \n    > It may rain. // 可能\n    > \n    > You may enter. // 允许',normalizedContent:'# 动词体和情态动词\n\n\n# 完成进行体\n\n形式：have + been + verb_ing\n\n唯一变化的是助动词 have，随着你所用的时态而变化。\n\n时态 + 完成进行体：\n\n> 过去：i had been eating cookies. // 我一直再吃曲奇饼干。\n> \n> 现在：i have been eating cookies. // 我吃了挺久的曲奇饼干。\n> \n> 将来：i will have been eating cookies. // 我将吃了很久的曲奇饼干。\n\n这个体态可以表示某件事会进行多久。\n\n> 到下周四，我将要吃了40年的曲奇饼干了，此生无憾了。\n\n\n# 情态动词\n\n有一类称为情态助词的助动词可以被用来表达某些情况：比如当提出建议时,猜测可能性时,对别人发出请求时,等等.情态动词非常好用.\n\n\n# 但什么是情态呢？(but what is modality?)\n\n> 情态就是我们使用这些动词表达事物的条件或状况。\n> \n> 我们使用这些动词来确定：\n> \n>  * 某事是可能发生，还是一定发生了\n>  * 某事是否存在\n>  * 我们是否有能力做某事\n>  * 我们是否得到做某事的许可\n>  * 我们是否有义务要求或需要做某事\n\n\n# 情态动词有哪些？\n\nwords    translate   \nmay                  \nmight                \nmust                 \ncan                  \ncould                \nshall                \nshould               \nwill                 \nwould                \n\n\n# 情态动词的功能\n\n 1. 情态动词适用于一切事物（主语）。可以使用 任何主语 + 任何一个情态动词。\n    \n    > i/you/he/she/they/we can do it!\n\n任何句子主语搭配的情态动词都不需要发生改变。\n\n 2. 情态动词能做的事情其实就是它们不能做的事情。它们没有 "to" 的形式，也就是"不定式"形式。\n    \n    所以，绝对没有 "to may"、"to could"、"to should"等等。\n\n 3. 表明情态，它能设定条件。\n    \n    也就是情态动词的释义。\n    \n    > you must remove your shoes. // 必须\n    > \n    > it may rain. // 可能\n    > \n    > you may enter. // 允许',charsets:{cjk:!0},lastUpdated:"2022/12/03, 17:31:39",lastUpdatedTimestamp:1670059899e3},{title:"2022-03",frontmatter:{title:"2022-03",date:"2022-03-01T12:55:34.000Z",permalink:"/pages/455805/",tags:["记录"]},regularPath:"/06.%E8%AE%B0%E5%BD%95/01.Monthly/01.2022-03.html",relativePath:"06.记录/01.Monthly/01.2022-03.md",key:"v-7972075e",path:"/pages/455805/",headers:[{level:2,title:"你真正的年龄？",slug:"你真正的年龄",normalizedTitle:"你真正的年龄？",charIndex:2},{level:2,title:"你的信息源？",slug:"你的信息源",normalizedTitle:"你的信息源？",charIndex:51},{level:2,title:"责任？",slug:"责任",normalizedTitle:"责任？",charIndex:85}],headersStr:"你真正的年龄？ 你的信息源？ 责任？",content:"# 你真正的年龄？\n\n人的年龄有两种，即生理年龄和心理年龄。\n\n而你真正的年龄——心理年龄。\n\n\n# 你的信息源？\n\n你会关注像流量明星丑闻这种“顶流”信息吗？\n\n\n# 责任？\n\n责任从来都不是用来“规范”他人的工具。",normalizedContent:"# 你真正的年龄？\n\n人的年龄有两种，即生理年龄和心理年龄。\n\n而你真正的年龄——心理年龄。\n\n\n# 你的信息源？\n\n你会关注像流量明星丑闻这种“顶流”信息吗？\n\n\n# 责任？\n\n责任从来都不是用来“规范”他人的工具。",charsets:{cjk:!0},lastUpdated:"2022/12/03, 17:31:39",lastUpdatedTimestamp:1670059899e3},{title:"2022-04",frontmatter:{title:"2022-04",date:"2022-04-01T12:55:34.000Z",permalink:"/pages/fd3564/",tags:["记录"]},regularPath:"/06.%E8%AE%B0%E5%BD%95/01.Monthly/02.2022-04.html",relativePath:"06.记录/01.Monthly/02.2022-04.md",key:"v-b69608c4",path:"/pages/fd3564/",headers:[{level:2,title:"Wait, But Why?",slug:"wait-but-why",normalizedTitle:"wait, but why?",charIndex:2},{level:2,title:"门槛？",slug:"门槛",normalizedTitle:"门槛？",charIndex:21},{level:2,title:"什么都学的人，什么都学不会",slug:"什么都学的人-什么都学不会",normalizedTitle:"什么都学的人，什么都学不会",charIndex:60},{level:2,title:"当欲望填满人的内心，人就会失去目标",slug:"当欲望填满人的内心-人就会失去目标",normalizedTitle:"当欲望填满人的内心，人就会失去目标",charIndex:116},{level:2,title:"人就像猎豹，跑着跑着就累了",slug:"人就像猎豹-跑着跑着就累了",normalizedTitle:"人就像猎豹，跑着跑着就累了",charIndex:303},{level:2,title:"你想成为程序员，却要听「非程序员们」的建议？",slug:"你想成为程序员-却要听「非程序员们」的建议",normalizedTitle:"你想成为程序员，却要听「非程序员们」的建议？",charIndex:343},{level:2,title:"远行",slug:"远行",normalizedTitle:"远行",charIndex:426},{level:2,title:"你是为了学外语而学外语？",slug:"你是为了学外语而学外语",normalizedTitle:"你是为了学外语而学外语？",charIndex:582},{level:2,title:"态度",slug:"态度",normalizedTitle:"态度",charIndex:724},{level:2,title:"越是能力差的人，越是高估自己",slug:"越是能力差的人-越是高估自己",normalizedTitle:"越是能力差的人，越是高估自己",charIndex:790},{level:2,title:"年轻人，要允许自己犯错",slug:"年轻人-要允许自己犯错",normalizedTitle:"年轻人，要允许自己犯错",charIndex:821},{level:2,title:"宇宙很大，生活更大",slug:"宇宙很大-生活更大",normalizedTitle:"宇宙很大，生活更大",charIndex:1169},{level:2,title:"It's your book",slug:"it-s-your-book",normalizedTitle:"it's your book",charIndex:1183}],headersStr:"Wait, But Why? 门槛？ 什么都学的人，什么都学不会 当欲望填满人的内心，人就会失去目标 人就像猎豹，跑着跑着就累了 你想成为程序员，却要听「非程序员们」的建议？ 远行 你是为了学外语而学外语？ 态度 越是能力差的人，越是高估自己 年轻人，要允许自己犯错 宇宙很大，生活更大 It's your book",content:"# Wait, But Why?\n\n\n# 门槛？\n\n如果一个人真的想做这件事儿，那他不会去想门槛不门槛的问题。\n\n\n# 什么都学的人，什么都学不会\n\nJava“全栈”开发 == Java啥都不会。\n\n最后你tm什么都不是。\n\n\n# 当欲望填满人的内心，人就会失去目标\n\n怎么做“减法”？\n\n对于生活，可以“先加后减”，满足欲望，但一定要认清其必要性，唯有体验之后你才知道未来是否需要它。\n\n对于目标，只做你最想做的那一件事，其他的统统砍掉。\n\n> 不断追寻流行是不可能的，因为驱动流行的是人们当下临时的欲望，不可能无止境地提升，不可能代表当前的真实性，更不可能代表未来。\n> \n> ——Frank\n\n\n# 人就像猎豹，跑着跑着就累了\n\n猎豹不可能一直跑，人也不可能持续地学习。\n\n\n# 你想成为程序员，却要听「非程序员们」的建议？\n\n你想成为艺术家，却要听「非艺术家们」的建议？\n\n你想成为公务员，却要听「非公务员们」的建议？\n\n......\n\n\n# 远行\n\n⌈远行⌋才能让你快速成长，去做自己热爱的事业，去闯出自己的小天地。\n\n> A ship is safe in harbor, but that's not what ships are for.\n\n否则，就算你呆在你父母身边也无济于事，你不能为他们改变什么，等自己有了事业和能力之后什么都好说。\n\n\n# 你是为了学外语而学外语？\n\n有的人学外语是为了出国，有的人是为了工作，有的人是为了旅行，有的人是为了学习资源，还有的人是为了看美剧。而你呢？你TM辛辛苦苦学几年的外语就为了一场考试，考过之后又丢掉它？你对得起你自己吗？\n\n明明有机会看到更广阔的风景，却还是甘愿做个井底之蛙。\n\n\n# 态度\n\n不管是任何你不喜欢的事情落到你头上，都应该拿出一个好的态度（在他人看来）去解决它，然后投入到自己热爱的事情当中去。\n\n\n# 越是能力差的人，越是高估自己\n\n> 邓宁-克鲁格效应\n\n\n# 年轻人，要允许自己犯错\n\n每一次犯错都要告诉自己“经验+3”，如果你想升级，不是经验越多越好吗？\n\n>  * 如果你允许自己犯错，那么你犯的错误就会减少。\n> \n>  * 犯错的批评与表扬\n>    \n>    传统教育教给你的是：不允许你犯错，犯错会遭到谩骂和批评，贴上失败的标签，只有正确才会受到表扬。\n>    \n>    真正的教育给你的是：你本就应该犯错，只有犯错才会吸取教训\n>    \n>    多么荒唐……\n> \n>  * 犯错的自责与愧疚\n>    \n>    你曾经接受的教育里，最可怕的是：你认为犯错会很自责，会很愧疚，很痛苦，甚至会焦虑和紧张。\n>    \n>    现实情况是：你犯错是必然，犯错应该感到高兴，因为你离成功又近了一次。\n> \n> ——Frank\n\n\n# 宇宙很大，生活更大\n\n\n# It's your book\n\n你的人生是你自己杜撰的一本书，你想怎么写就怎么写✍，轮不到任何人来指指点点。",normalizedContent:"# wait, but why?\n\n\n# 门槛？\n\n如果一个人真的想做这件事儿，那他不会去想门槛不门槛的问题。\n\n\n# 什么都学的人，什么都学不会\n\njava“全栈”开发 == java啥都不会。\n\n最后你tm什么都不是。\n\n\n# 当欲望填满人的内心，人就会失去目标\n\n怎么做“减法”？\n\n对于生活，可以“先加后减”，满足欲望，但一定要认清其必要性，唯有体验之后你才知道未来是否需要它。\n\n对于目标，只做你最想做的那一件事，其他的统统砍掉。\n\n> 不断追寻流行是不可能的，因为驱动流行的是人们当下临时的欲望，不可能无止境地提升，不可能代表当前的真实性，更不可能代表未来。\n> \n> ——frank\n\n\n# 人就像猎豹，跑着跑着就累了\n\n猎豹不可能一直跑，人也不可能持续地学习。\n\n\n# 你想成为程序员，却要听「非程序员们」的建议？\n\n你想成为艺术家，却要听「非艺术家们」的建议？\n\n你想成为公务员，却要听「非公务员们」的建议？\n\n......\n\n\n# 远行\n\n⌈远行⌋才能让你快速成长，去做自己热爱的事业，去闯出自己的小天地。\n\n> a ship is safe in harbor, but that's not what ships are for.\n\n否则，就算你呆在你父母身边也无济于事，你不能为他们改变什么，等自己有了事业和能力之后什么都好说。\n\n\n# 你是为了学外语而学外语？\n\n有的人学外语是为了出国，有的人是为了工作，有的人是为了旅行，有的人是为了学习资源，还有的人是为了看美剧。而你呢？你tm辛辛苦苦学几年的外语就为了一场考试，考过之后又丢掉它？你对得起你自己吗？\n\n明明有机会看到更广阔的风景，却还是甘愿做个井底之蛙。\n\n\n# 态度\n\n不管是任何你不喜欢的事情落到你头上，都应该拿出一个好的态度（在他人看来）去解决它，然后投入到自己热爱的事情当中去。\n\n\n# 越是能力差的人，越是高估自己\n\n> 邓宁-克鲁格效应\n\n\n# 年轻人，要允许自己犯错\n\n每一次犯错都要告诉自己“经验+3”，如果你想升级，不是经验越多越好吗？\n\n>  * 如果你允许自己犯错，那么你犯的错误就会减少。\n> \n>  * 犯错的批评与表扬\n>    \n>    传统教育教给你的是：不允许你犯错，犯错会遭到谩骂和批评，贴上失败的标签，只有正确才会受到表扬。\n>    \n>    真正的教育给你的是：你本就应该犯错，只有犯错才会吸取教训\n>    \n>    多么荒唐……\n> \n>  * 犯错的自责与愧疚\n>    \n>    你曾经接受的教育里，最可怕的是：你认为犯错会很自责，会很愧疚，很痛苦，甚至会焦虑和紧张。\n>    \n>    现实情况是：你犯错是必然，犯错应该感到高兴，因为你离成功又近了一次。\n> \n> ——frank\n\n\n# 宇宙很大，生活更大\n\n\n# it's your book\n\n你的人生是你自己杜撰的一本书，你想怎么写就怎么写✍，轮不到任何人来指指点点。",charsets:{cjk:!0},lastUpdated:"2022/12/03, 17:31:39",lastUpdatedTimestamp:1670059899e3},{title:"2022-05",frontmatter:{title:"2022-05",date:"2022-05-01T15:37:11.000Z",permalink:"/pages/a0be6e/",tags:["记录"]},regularPath:"/06.%E8%AE%B0%E5%BD%95/01.Monthly/03.2022-05.html",relativePath:"06.记录/01.Monthly/03.2022-05.md",key:"v-60102044",path:"/pages/a0be6e/",headers:[{level:2,title:"与其抱怨是小丑犯傻，不如责怪是自己先去的马戏团",slug:"与其抱怨是小丑犯傻-不如责怪是自己先去的马戏团",normalizedTitle:"与其抱怨是小丑犯傻，不如责怪是自己先去的马戏团",charIndex:2},{level:2,title:"不要和任何人竞争",slug:"不要和任何人竞争",normalizedTitle:"不要和任何人竞争",charIndex:125},{level:2,title:"极端的做法怎么可能解决极端的行为呢",slug:"极端的做法怎么可能解决极端的行为呢",normalizedTitle:"极端的做法怎么可能解决极端的行为呢",charIndex:454}],headersStr:"与其抱怨是小丑犯傻，不如责怪是自己先去的马戏团 不要和任何人竞争 极端的做法怎么可能解决极端的行为呢",content:"# 与其抱怨是小丑犯傻，不如责怪是自己先去的马戏团\n\n> Don't blame a clown for acting like a clown. Ask yourself why you keep going to the circus.\n\n\n# 不要和任何人竞争\n\n学会和自己合作，学会和他人合作。\n\n> 大学里的同学关系现状：\n> \n> 你和你的同学在非洲🌍\n> \n> 突然看到一头狮子🦁️，你们准备逃跑💨。\n> \n> 你说：“我们怎么可能跑得过它？”\n> \n> 可你的同学却说：“我只要跑得过你就行了”\n> \n> 狮子：社会\n> \n> 你：废物\n> \n> 你同学：表面跟你合作，却暗地里要抢先在你前面的废物\n> \n> 总结：你们都是废物，最后早晚一天都得死在狮子嘴里\n> \n> 最后，赢家是什么？\n> \n> 我和我的同学：“一个开车，一个开枪”\n> \n> 巨头赢家都是合作，你以为呢？\n> \n> 如果你喜欢竞争，你可以试试和狮子单挑！当然，我只能说祝你好运！\n> \n> ——Frank\n\n\n# 极端的做法怎么可能解决极端的行为呢",normalizedContent:"# 与其抱怨是小丑犯傻，不如责怪是自己先去的马戏团\n\n> don't blame a clown for acting like a clown. ask yourself why you keep going to the circus.\n\n\n# 不要和任何人竞争\n\n学会和自己合作，学会和他人合作。\n\n> 大学里的同学关系现状：\n> \n> 你和你的同学在非洲🌍\n> \n> 突然看到一头狮子🦁️，你们准备逃跑💨。\n> \n> 你说：“我们怎么可能跑得过它？”\n> \n> 可你的同学却说：“我只要跑得过你就行了”\n> \n> 狮子：社会\n> \n> 你：废物\n> \n> 你同学：表面跟你合作，却暗地里要抢先在你前面的废物\n> \n> 总结：你们都是废物，最后早晚一天都得死在狮子嘴里\n> \n> 最后，赢家是什么？\n> \n> 我和我的同学：“一个开车，一个开枪”\n> \n> 巨头赢家都是合作，你以为呢？\n> \n> 如果你喜欢竞争，你可以试试和狮子单挑！当然，我只能说祝你好运！\n> \n> ——frank\n\n\n# 极端的做法怎么可能解决极端的行为呢",charsets:{cjk:!0},lastUpdated:"2023/03/01, 19:07:41",lastUpdatedTimestamp:1677668861e3},{title:"人称代词",frontmatter:{title:"人称代词",date:"2022-12-03T16:48:02.000Z",permalink:"/pages/a15720/",tags:[null]},regularPath:"/05.%E8%8B%B1%E8%AF%AD/01.Khan%20Academy%20-%20%E8%AF%AD%E6%B3%95/03.%E4%BB%A3%E8%AF%8D/02.%E4%BA%BA%E7%A7%B0%E4%BB%A3%E8%AF%8D.html",relativePath:"05.英语/01.Khan Academy - 语法/03.代词/02.人称代词.md",key:"v-d9036cba",path:"/pages/a15720/",headers:[{level:2,title:"1st 第一人称 ---\x3e me",slug:"_1st-第一人称-me",normalizedTitle:"1st 第一人称 ---&gt; me",charIndex:null},{level:2,title:"2nd 第二人称 ---\x3e you",slug:"_2nd-第二人称-you",normalizedTitle:"2nd 第二人称 ---&gt; you",charIndex:null},{level:2,title:"3rd 第三人称 ---\x3e people or things",slug:"_3rd-第三人称-people-or-things",normalizedTitle:"3rd 第三人称 ---&gt; people or things",charIndex:null}],headersStr:"1st 第一人称 ---\x3e me 2nd 第二人称 ---\x3e you 3rd 第三人称 ---\x3e people or things",content:"# 人称代词\n\n\n# 1st 第一人称 ---\x3e me\n\nSINGULAR   PLURAL\nI、me、      we、us、\nmy、mine    our、ours\n\n\n# 2nd 第二人称 ---\x3e you\n\nSINGULAR    PLURAL\nyou、your、   you、your、\nyours       yours\n\n\n# 3rd 第三人称 ---\x3e people or things\n\nSINGULAR        PLURAL\nshe、her、hers、   they、them、\nhe、him、his、     their、theirs\nit、its",normalizedContent:"# 人称代词\n\n\n# 1st 第一人称 ---\x3e me\n\nsingular   plural\ni、me、      we、us、\nmy、mine    our、ours\n\n\n# 2nd 第二人称 ---\x3e you\n\nsingular    plural\nyou、your、   you、your、\nyours       yours\n\n\n# 3rd 第三人称 ---\x3e people or things\n\nsingular        plural\nshe、her、hers、   they、them、\nhe、him、his、     their、theirs\nit、its",charsets:{cjk:!0},lastUpdated:"2022/12/03, 17:31:39",lastUpdatedTimestamp:1670059899e3},{title:"《梁永安：阅读、游历和爱情》",frontmatter:{title:"《梁永安：阅读、游历和爱情》",date:"2022-10-12T14:58:26.000Z",permalink:"/pages/4c7197/",tags:["阅读","记录"]},regularPath:"/06.%E8%AE%B0%E5%BD%95/03.%E9%98%85%E8%AF%BB/02.%E3%80%8A%E6%A2%81%E6%B0%B8%E5%AE%89%EF%BC%9A%E9%98%85%E8%AF%BB%E3%80%81%E6%B8%B8%E5%8E%86%E5%92%8C%E7%88%B1%E6%83%85%E3%80%8B.html",relativePath:"06.记录/03.阅读/02.《梁永安：阅读、游历和爱情》.md",key:"v-2bb0f60a",path:"/pages/4c7197/",headers:[{level:2,title:"在失去坐标的转型时代，青年人如何定位自我",slug:"在失去坐标的转型时代-青年人如何定位自我",normalizedTitle:"在失去坐标的转型时代，青年人如何定位自我",charIndex:30},{level:2,title:"人这种社会动物，如何坚定自己",slug:"人这种社会动物-如何坚定自己",normalizedTitle:"人这种社会动物，如何坚定自己",charIndex:146},{level:2,title:"谈工作",slug:"谈工作",normalizedTitle:"谈工作",charIndex:225},{level:2,title:"“摸鱼”可耻？怎样做一个理直气壮的打工人",slug:"摸鱼-可耻-怎样做一个理直气壮的打工人",normalizedTitle:"“摸鱼”可耻？怎样做一个理直气壮的打工人",charIndex:292},{level:2,title:"我劳动，我幸福",slug:"我劳动-我幸福",normalizedTitle:"我劳动，我幸福",charIndex:655},{level:2,title:"乌合之众的社会规则",slug:"乌合之众的社会规则",normalizedTitle:"乌合之众的社会规则",charIndex:759},{level:2,title:"当代年轻人，需要哪些生命的探索",slug:"当代年轻人-需要哪些生命的探索",normalizedTitle:"当代年轻人，需要哪些生命的探索",charIndex:834},{level:2,title:"女性文化伴随社会发展，曲折向前",slug:"女性文化伴随社会发展-曲折向前",normalizedTitle:"女性文化伴随社会发展，曲折向前",charIndex:979},{level:2,title:"相爱相杀源于人性的复杂",slug:"相爱相杀源于人性的复杂",normalizedTitle:"相爱相杀源于人性的复杂",charIndex:1059},{level:2,title:"爱情不是方舟，人应该追寻更大的精神空间",slug:"爱情不是方舟-人应该追寻更大的精神空间",normalizedTitle:"爱情不是方舟，人应该追寻更大的精神空间",charIndex:1095},{level:2,title:"时代复杂，怎样抓住瞬间",slug:"时代复杂-怎样抓住瞬间",normalizedTitle:"时代复杂，怎样抓住瞬间",charIndex:1193},{level:2,title:"孤独在中国文化语境里的难言之隐",slug:"孤独在中国文化语境里的难言之隐",normalizedTitle:"孤独在中国文化语境里的难言之隐",charIndex:1230},{level:2,title:"孤独，让你认识自己",slug:"孤独-让你认识自己",normalizedTitle:"孤独，让你认识自己",charIndex:1290},{level:2,title:"如何理解年轻人的力量和软弱",slug:"如何理解年轻人的力量和软弱",normalizedTitle:"如何理解年轻人的力量和软弱",charIndex:1517},{level:2,title:"为什么现在的审美趋向中性化",slug:"为什么现在的审美趋向中性化",normalizedTitle:"为什么现在的审美趋向中性化",charIndex:1677},{level:2,title:"审美和审丑，该怎样界定",slug:"审美和审丑-该怎样界定",normalizedTitle:"审美和审丑，该怎样界定",charIndex:1769},{level:2,title:"艺术不仅是绘画、音乐，艺术是原创，是自由",slug:"艺术不仅是绘画、音乐-艺术是原创-是自由",normalizedTitle:"艺术不仅是绘画、音乐，艺术是原创，是自由",charIndex:1880},{level:2,title:"艺术的无用之美比有用还厉害",slug:"艺术的无用之美比有用还厉害",normalizedTitle:"艺术的无用之美比有用还厉害",charIndex:2064},{level:2,title:"年轻人要怎样去学习艺术",slug:"年轻人要怎样去学习艺术",normalizedTitle:"年轻人要怎样去学习艺术",charIndex:2133},{level:2,title:"附录 梁永安 答读者问",slug:"附录-梁永安-答读者问",normalizedTitle:"附录 梁永安 答读者问",charIndex:2476}],headersStr:"在失去坐标的转型时代，青年人如何定位自我 人这种社会动物，如何坚定自己 谈工作 “摸鱼”可耻？怎样做一个理直气壮的打工人 我劳动，我幸福 乌合之众的社会规则 当代年轻人，需要哪些生命的探索 女性文化伴随社会发展，曲折向前 相爱相杀源于人性的复杂 爱情不是方舟，人应该追寻更大的精神空间 时代复杂，怎样抓住瞬间 孤独在中国文化语境里的难言之隐 孤独，让你认识自己 如何理解年轻人的力量和软弱 为什么现在的审美趋向中性化 审美和审丑，该怎样界定 艺术不仅是绘画、音乐，艺术是原创，是自由 艺术的无用之美比有用还厉害 年轻人要怎样去学习艺术 附录 梁永安 答读者问",content:"书名：《梁永安：阅读、游历和爱情》\n\n作者：梁永安\n\n\n# 在失去坐标的转型时代，青年人如何定位自我\n\n> 今天的人，时代留给他们思考和沉淀的时间太短，而社会形态又太复杂，自我认知很难建构。在这么复杂的时代，要整合各个维度的东西非常不易，一般要几百年的过程，正是“路漫漫其修远兮”。\n\n\n# 人这种社会动物，如何坚定自己\n\n> 一个人就像一棵树，只有自己根基坚实，才有面对风雨的能力；如果自己不是自然生长并具有饱满生命力的话，就会特别脆弱。\n\n\n# 谈工作\n\n> 人要先把一个事情做透，做到专业领域里最好的状态，然后这时候才能说你到底爱不爱它，才能说你到底真正适合去做什么。\n\n\n# “摸鱼”可耻？怎样做一个理直气壮的打工人\n\n> 现在年轻人表达、关注的，不是衣食住行等表层的物质问题，他们不再满足于简单的生存，而是对自己到底是一个什么样的人、在这个世界上应该干什么的深度思考。当投石问路无果，他们就用这种方式获得一个自我反思的途径。\n\n> 人一定要有自己的自由时间。衡量人的解放，最最重要的指标就是人的自由时间。年轻人的自由时间没了，艺术心情、空间渴望、情感权利也全没了，创造性匮乏，老板们这么做无异于杀鸡取卵。\n\n> 上一代人，他们的原创力其实还不够，一个真正好的企业家、好的企业文化，是可以宣扬不加班的，关键要挖掘出企业的活力，如流程的合理化、高效的管理制度、优秀的激励机制等方方面面。企业要有这个眼光，使人在整个群体里获得尊严感，获得一种价值感，人才会产生一种创造力量，才会优化、提升生产力。\n\n\n# 我劳动，我幸福\n\n> 我们不能因为某些人跟自己的价值观不相契，就否定掉全世界那么多丰富多样的人的存在。我们毕生的追求应该是要在差异性里获得对世界的丰富认知。再次，要给这个世界创造、增添一点儿新东西。\n\n\n# 乌合之众的社会规则\n\n> 在现代社会里，人都处在一种摇摆中，个体聚集在一起就有看戏的心理。我们不能说人都变坏了，而是社会本身就有残酷的一面。\n\n\n# 当代年轻人，需要哪些生命的探索\n\n> 一个人身上有一个优点，必然对应着一个缺点，这是一种自我的结构。\n\n> 有些人旅行，到了地方就是自拍留影，做的都是美食攻略，很可惜，这样的人出去旅行等于没旅行。怎么达到认识真实世界，打开自己视界的目的？生活需要“品”，不是到处找自己喜欢的东西。\n\n\n# 女性文化伴随社会发展，曲折向前\n\n> 所有新生的事物都是不完美的，都具有叛逆性、破坏性。任何事物的早期都有这样一个过程，若要发展需打破很多原有的局限。\n\n\n# 相爱相杀源于人性的复杂\n\n> 其实爱上一个人就是爱上一种生活。\n\n\n# 爱情不是方舟，人应该追寻更大的精神空间\n\n> 人的想法里既有过去时代思想的遗传，又有面向未来追求个人自由的期待，人活得就像两个人。今天很多中国人身上活得就是两个人，甚至三个人，很累很累。\n\n\n# 时代复杂，怎样抓住瞬间\n\n> 我们的身体在城市里，灵魂还在乡村。\n\n\n# 孤独在中国文化语境里的难言之隐\n\n> 今天的社会出现的突出问题，就是你身上有很多可能性，但是生活得没什么可能。\n\n\n# 孤独，让你认识自己\n\n> 这个世界看着很安静，可无形的聒噪，各种声光电淹没你，让你身上到处浮动着浮躁的东西，所以有时候人需要用孤独来沉淀自己，我们每个人心里面埋藏了太多的东西。\n\n> 一个人在世界上如果连自己都不了解，那活得多么混乱啊？你没有基本的孤独时刻，没有片刻留给自己，你如何能明白自己、体会自己？\n\n> 如果两个人有意识地去谈恋爱，吃饭，约会，情人节送礼，最后顺理成章地结婚，内在的东西不一定是爱情，但形式上又很像，这种恋爱就很程序化。\n\n\n# 如何理解年轻人的力量和软弱\n\n> 年轻人要看到自己最大的资本，是时间站在他这边，可以看到时代在大变化，空白不断地展开，里面还有很多的可能性，而不是在现实空间里找个固定位置，因为可能性是展开的，可以预知性地学一些东西。\n\n> 如果门是开着的，你没去努力，那就是你自己的问题。现在很多出现的问题都是故步自封产生的。\n\n\n# 为什么现在的审美趋向中性化\n\n> 因为上一代有个心结，他们不希望自己受过的苦再让下一代经历，于是像襁褓一样把孩子保护起来，从小到大都没让他们受过什么磨炼。这其实是害了下一代。\n\n\n# 审美和审丑，该怎样界定\n\n> 有时候，事物最有价值的那部分往往跟世俗的价值观相反，跟环境有点格格不入，然后就呈现出某种荒诞性来，最后被边缘化。\n\n> 审丑实际上能审出人性，我们自己笑了半天，最后才发现是在笑自己。\n\n\n# 艺术不仅是绘画、音乐，艺术是原创，是自由\n\n> 这个世界，不管做什么行业的人，都可以分为两种。一种是继承性的人。\n\n> 另外一种是承担“变异”功能的人。\n\n> 如果一直继承的话，物种就会出现僵化。人类改变的需求就是艺术发展的契机。\n\n> 艺术的背后是自由\n\n> 放眼世界，艺术是推动社会发展的巨大车轮之一。如果单纯认为艺术就是电影、音乐、绘画，那就理解偏了。\n\n\n# 艺术的无用之美比有用还厉害\n\n> 世界上有100条路，我偏要走第101条。你不知道第101条路在哪里，也不知道这条路会通到哪里。\n\n\n# 年轻人要怎样去学习艺术\n\n> 世界有两种生活状态的人，一种是生活艺术化的人，一种是艺术生活化的人。\n\n> 生活艺术化的人，他就在常规里生活，衣食住行，生老病死，婚丧嫁娶，他也有情感需求、娱乐需求、精神需求，会看看电影，听听音乐，欣赏绘画等等，但本质上他还是一个在现实中生活的人，只是给予生活一定的艺术化，显得浪漫些。\n\n> 艺术生活化的人，渴求的是变化和自由的生活。这个世界上的任何事物之于他都是艺术原料，他把自由放在第一位，也不跟人争利益，争得失。世间万物都是他的观察对象，哪怕是现在年轻人深感为苦的工作，也只是他生活在这个世界上的基础，职场争斗、各种利益等也不能引起他的兴趣。这种人的一生活得像一个精灵。艺术生活化的人，才是艺术家。艺术本身，带给人精神的宽阔、精神的释放。\n\n\n# 附录 梁永安 答读者问\n\n> 中国最大的强项就是人气。我在上海最不怕等红灯，反而很高兴，因为我喜欢看车，通过观看各种各样的车，我觉得中国太有希望了。为什么有希望呢？因为我看有的车设计得那么丑，居然还有人买。中国生产的东西，只要做出来，就会有市场，就会有一定的收入。",normalizedContent:"书名：《梁永安：阅读、游历和爱情》\n\n作者：梁永安\n\n\n# 在失去坐标的转型时代，青年人如何定位自我\n\n> 今天的人，时代留给他们思考和沉淀的时间太短，而社会形态又太复杂，自我认知很难建构。在这么复杂的时代，要整合各个维度的东西非常不易，一般要几百年的过程，正是“路漫漫其修远兮”。\n\n\n# 人这种社会动物，如何坚定自己\n\n> 一个人就像一棵树，只有自己根基坚实，才有面对风雨的能力；如果自己不是自然生长并具有饱满生命力的话，就会特别脆弱。\n\n\n# 谈工作\n\n> 人要先把一个事情做透，做到专业领域里最好的状态，然后这时候才能说你到底爱不爱它，才能说你到底真正适合去做什么。\n\n\n# “摸鱼”可耻？怎样做一个理直气壮的打工人\n\n> 现在年轻人表达、关注的，不是衣食住行等表层的物质问题，他们不再满足于简单的生存，而是对自己到底是一个什么样的人、在这个世界上应该干什么的深度思考。当投石问路无果，他们就用这种方式获得一个自我反思的途径。\n\n> 人一定要有自己的自由时间。衡量人的解放，最最重要的指标就是人的自由时间。年轻人的自由时间没了，艺术心情、空间渴望、情感权利也全没了，创造性匮乏，老板们这么做无异于杀鸡取卵。\n\n> 上一代人，他们的原创力其实还不够，一个真正好的企业家、好的企业文化，是可以宣扬不加班的，关键要挖掘出企业的活力，如流程的合理化、高效的管理制度、优秀的激励机制等方方面面。企业要有这个眼光，使人在整个群体里获得尊严感，获得一种价值感，人才会产生一种创造力量，才会优化、提升生产力。\n\n\n# 我劳动，我幸福\n\n> 我们不能因为某些人跟自己的价值观不相契，就否定掉全世界那么多丰富多样的人的存在。我们毕生的追求应该是要在差异性里获得对世界的丰富认知。再次，要给这个世界创造、增添一点儿新东西。\n\n\n# 乌合之众的社会规则\n\n> 在现代社会里，人都处在一种摇摆中，个体聚集在一起就有看戏的心理。我们不能说人都变坏了，而是社会本身就有残酷的一面。\n\n\n# 当代年轻人，需要哪些生命的探索\n\n> 一个人身上有一个优点，必然对应着一个缺点，这是一种自我的结构。\n\n> 有些人旅行，到了地方就是自拍留影，做的都是美食攻略，很可惜，这样的人出去旅行等于没旅行。怎么达到认识真实世界，打开自己视界的目的？生活需要“品”，不是到处找自己喜欢的东西。\n\n\n# 女性文化伴随社会发展，曲折向前\n\n> 所有新生的事物都是不完美的，都具有叛逆性、破坏性。任何事物的早期都有这样一个过程，若要发展需打破很多原有的局限。\n\n\n# 相爱相杀源于人性的复杂\n\n> 其实爱上一个人就是爱上一种生活。\n\n\n# 爱情不是方舟，人应该追寻更大的精神空间\n\n> 人的想法里既有过去时代思想的遗传，又有面向未来追求个人自由的期待，人活得就像两个人。今天很多中国人身上活得就是两个人，甚至三个人，很累很累。\n\n\n# 时代复杂，怎样抓住瞬间\n\n> 我们的身体在城市里，灵魂还在乡村。\n\n\n# 孤独在中国文化语境里的难言之隐\n\n> 今天的社会出现的突出问题，就是你身上有很多可能性，但是生活得没什么可能。\n\n\n# 孤独，让你认识自己\n\n> 这个世界看着很安静，可无形的聒噪，各种声光电淹没你，让你身上到处浮动着浮躁的东西，所以有时候人需要用孤独来沉淀自己，我们每个人心里面埋藏了太多的东西。\n\n> 一个人在世界上如果连自己都不了解，那活得多么混乱啊？你没有基本的孤独时刻，没有片刻留给自己，你如何能明白自己、体会自己？\n\n> 如果两个人有意识地去谈恋爱，吃饭，约会，情人节送礼，最后顺理成章地结婚，内在的东西不一定是爱情，但形式上又很像，这种恋爱就很程序化。\n\n\n# 如何理解年轻人的力量和软弱\n\n> 年轻人要看到自己最大的资本，是时间站在他这边，可以看到时代在大变化，空白不断地展开，里面还有很多的可能性，而不是在现实空间里找个固定位置，因为可能性是展开的，可以预知性地学一些东西。\n\n> 如果门是开着的，你没去努力，那就是你自己的问题。现在很多出现的问题都是故步自封产生的。\n\n\n# 为什么现在的审美趋向中性化\n\n> 因为上一代有个心结，他们不希望自己受过的苦再让下一代经历，于是像襁褓一样把孩子保护起来，从小到大都没让他们受过什么磨炼。这其实是害了下一代。\n\n\n# 审美和审丑，该怎样界定\n\n> 有时候，事物最有价值的那部分往往跟世俗的价值观相反，跟环境有点格格不入，然后就呈现出某种荒诞性来，最后被边缘化。\n\n> 审丑实际上能审出人性，我们自己笑了半天，最后才发现是在笑自己。\n\n\n# 艺术不仅是绘画、音乐，艺术是原创，是自由\n\n> 这个世界，不管做什么行业的人，都可以分为两种。一种是继承性的人。\n\n> 另外一种是承担“变异”功能的人。\n\n> 如果一直继承的话，物种就会出现僵化。人类改变的需求就是艺术发展的契机。\n\n> 艺术的背后是自由\n\n> 放眼世界，艺术是推动社会发展的巨大车轮之一。如果单纯认为艺术就是电影、音乐、绘画，那就理解偏了。\n\n\n# 艺术的无用之美比有用还厉害\n\n> 世界上有100条路，我偏要走第101条。你不知道第101条路在哪里，也不知道这条路会通到哪里。\n\n\n# 年轻人要怎样去学习艺术\n\n> 世界有两种生活状态的人，一种是生活艺术化的人，一种是艺术生活化的人。\n\n> 生活艺术化的人，他就在常规里生活，衣食住行，生老病死，婚丧嫁娶，他也有情感需求、娱乐需求、精神需求，会看看电影，听听音乐，欣赏绘画等等，但本质上他还是一个在现实中生活的人，只是给予生活一定的艺术化，显得浪漫些。\n\n> 艺术生活化的人，渴求的是变化和自由的生活。这个世界上的任何事物之于他都是艺术原料，他把自由放在第一位，也不跟人争利益，争得失。世间万物都是他的观察对象，哪怕是现在年轻人深感为苦的工作，也只是他生活在这个世界上的基础，职场争斗、各种利益等也不能引起他的兴趣。这种人的一生活得像一个精灵。艺术生活化的人，才是艺术家。艺术本身，带给人精神的宽阔、精神的释放。\n\n\n# 附录 梁永安 答读者问\n\n> 中国最大的强项就是人气。我在上海最不怕等红灯，反而很高兴，因为我喜欢看车，通过观看各种各样的车，我觉得中国太有希望了。为什么有希望呢？因为我看有的车设计得那么丑，居然还有人买。中国生产的东西，只要做出来，就会有市场，就会有一定的收入。",charsets:{cjk:!0},lastUpdated:"2022/12/03, 17:31:39",lastUpdatedTimestamp:1670059899e3},{title:"《傲慢与偏见》",frontmatter:{title:"《傲慢与偏见》",date:"2022-10-29T19:31:59.000Z",permalink:"/pages/8fff1a/",tags:["阅读","记录"]},regularPath:"/06.%E8%AE%B0%E5%BD%95/03.%E9%98%85%E8%AF%BB/03.%E3%80%8A%E5%82%B2%E6%85%A2%E4%B8%8E%E5%81%8F%E8%A7%81%E3%80%8B.html",relativePath:"06.记录/03.阅读/03.《傲慢与偏见》.md",key:"v-80ac896a",path:"/pages/8fff1a/",headers:[{level:2,title:"第一卷",slug:"第一卷",normalizedTitle:"第一卷",charIndex:36},{level:2,title:"第二卷",slug:"第二卷",normalizedTitle:"第二卷",charIndex:623},{level:2,title:"第三卷",slug:"第三卷",normalizedTitle:"第三卷",charIndex:820}],headersStr:"第一卷 第二卷 第三卷",content:"# 《傲慢与偏见》\n\n书名：《傲慢与偏见》\n\n作者：简·奥斯丁\n\n\n# 第一卷\n\n◆ 第一卷 5\n\n> 骄傲是一般人的通病。\n\n> 人性特别容易犯这个毛病。因为有了某种品质，无论是真实的还是假想的，就为之沾沾自喜\n\n> 虚荣与骄傲是两个不同的概念，虽然两个字眼经常给当做同义词混用。一个人可以骄傲而不虚荣。骄傲多指我们对自己的看法，虚荣多指我们想要别人对我们抱有什么看法。\n\n◆ 第一卷 9\n\n> “哦！是的。不过你得承认，她长得很一般。卢卡斯太太本人也常这么说，羡慕我的简长得俊俏。我不喜欢吹自己的孩子，不过说实话，简这孩子——比她好看的姑娘可不多见。谁都这么说，我可不是偏心眼。还在她十五岁那年，在我城里那位兄弟加德纳家里，有位先生爱上了她，我弟媳妇硬说，我们临走前他会向简求婚。不过，他没有提出来。也许他觉得她太年轻。不过他为简写了几首诗，写得真动人。”\n> \n> “他的爱情也就此完结了，”伊丽莎白不耐烦地说。“我想许多人就是采取这个方式，克制了自己的爱情。诗有驱除爱情的功能，这不知道是谁第一个发现的！”\n> \n> “我一向认为，诗是爱情的食粮，”达西说。\n> \n> “那要是一种美好、坚贞、健康的爱情才行。凡是强健的东西，可以从万物获得滋补。如果只是一点微薄的情意，那么我相信，一首出色的十四行诗就能把它彻底葬送掉。”\n\n◆ 第一卷 10\n\n> 假装谦虚是再虚伪不过了\n\n> 那样做往往只是信口开河，有时只是转弯抹角的自夸。\n\n\n# 第二卷\n\n◆ 第二卷 3\n\n> 一般说来，无论什么事，你越是等得心急，它就越是难以如愿\n\n◆ 第二卷 14\n\n> 有心事应该等到独自一个人的时候再去想。每逢独自一个人的时候，她就会尽情地想个痛快。她每天都要独自散散步，一边走一边尽兴地回想着那些不愉快的事情。\n\n◆ 第二卷 19\n\n> 天下有不少人，因为自己的轻率而招致了不幸之后，往往会从恣意作乐中寻求慰藉，借以弥补自己的愚蠢与过失\n\n\n# 第三卷\n\n◆ 第三卷 16\n\n> “... 你使我明白过来，我既然认定有位姑娘值得我去博得她的欢心，那就决不应该自命不凡地去取悦她。”",normalizedContent:"# 《傲慢与偏见》\n\n书名：《傲慢与偏见》\n\n作者：简·奥斯丁\n\n\n# 第一卷\n\n◆ 第一卷 5\n\n> 骄傲是一般人的通病。\n\n> 人性特别容易犯这个毛病。因为有了某种品质，无论是真实的还是假想的，就为之沾沾自喜\n\n> 虚荣与骄傲是两个不同的概念，虽然两个字眼经常给当做同义词混用。一个人可以骄傲而不虚荣。骄傲多指我们对自己的看法，虚荣多指我们想要别人对我们抱有什么看法。\n\n◆ 第一卷 9\n\n> “哦！是的。不过你得承认，她长得很一般。卢卡斯太太本人也常这么说，羡慕我的简长得俊俏。我不喜欢吹自己的孩子，不过说实话，简这孩子——比她好看的姑娘可不多见。谁都这么说，我可不是偏心眼。还在她十五岁那年，在我城里那位兄弟加德纳家里，有位先生爱上了她，我弟媳妇硬说，我们临走前他会向简求婚。不过，他没有提出来。也许他觉得她太年轻。不过他为简写了几首诗，写得真动人。”\n> \n> “他的爱情也就此完结了，”伊丽莎白不耐烦地说。“我想许多人就是采取这个方式，克制了自己的爱情。诗有驱除爱情的功能，这不知道是谁第一个发现的！”\n> \n> “我一向认为，诗是爱情的食粮，”达西说。\n> \n> “那要是一种美好、坚贞、健康的爱情才行。凡是强健的东西，可以从万物获得滋补。如果只是一点微薄的情意，那么我相信，一首出色的十四行诗就能把它彻底葬送掉。”\n\n◆ 第一卷 10\n\n> 假装谦虚是再虚伪不过了\n\n> 那样做往往只是信口开河，有时只是转弯抹角的自夸。\n\n\n# 第二卷\n\n◆ 第二卷 3\n\n> 一般说来，无论什么事，你越是等得心急，它就越是难以如愿\n\n◆ 第二卷 14\n\n> 有心事应该等到独自一个人的时候再去想。每逢独自一个人的时候，她就会尽情地想个痛快。她每天都要独自散散步，一边走一边尽兴地回想着那些不愉快的事情。\n\n◆ 第二卷 19\n\n> 天下有不少人，因为自己的轻率而招致了不幸之后，往往会从恣意作乐中寻求慰藉，借以弥补自己的愚蠢与过失\n\n\n# 第三卷\n\n◆ 第三卷 16\n\n> “... 你使我明白过来，我既然认定有位姑娘值得我去博得她的欢心，那就决不应该自命不凡地去取悦她。”",charsets:{cjk:!0},lastUpdated:"2022/12/03, 17:31:39",lastUpdatedTimestamp:1670059899e3},{title:"所有格代词",frontmatter:{title:"所有格代词",date:"2022-12-03T16:48:02.000Z",permalink:"/pages/d1eca2/",tags:[null]},regularPath:"/05.%E8%8B%B1%E8%AF%AD/01.Khan%20Academy%20-%20%E8%AF%AD%E6%B3%95/03.%E4%BB%A3%E8%AF%8D/03.%E6%89%80%E6%9C%89%E6%A0%BC%E4%BB%A3%E8%AF%8D.html",relativePath:"05.英语/01.Khan Academy - 语法/03.代词/03.所有格代词.md",key:"v-7d0620ad",path:"/pages/d1eca2/",headers:[{level:2,title:"什么是所有格代词？",slug:"什么是所有格代词",normalizedTitle:"什么是所有格代词？",charIndex:26},{level:2,title:"For instance",slug:"for-instance",normalizedTitle:"for instance",charIndex:475},{level:2,title:"辨别名词性物主代词",slug:"辨别名词性物主代词",normalizedTitle:"辨别名词性物主代词",charIndex:637},{level:2,title:"More for instance",slug:"more-for-instance",normalizedTitle:"more for instance",charIndex:869}],headersStr:"什么是所有格代词？ For instance 辨别名词性物主代词 More for instance",content:'# Possessive Pronouns\n\n\n# 什么是所有格代词？\n\n> Jim\'s book.\n> \n> Girish\'s hat.\n\n所有格代词也叫物主代词。\n\n物主代词描述了属于某人的某物，比如“her shoe”或者“the book is mine”。\n\n物主代词可以是**形容词(Adjective)，比如“his bicycle”。或者可以作为名词(Noun)，像“the seats are theirs”。这两种形式下都不需要标明撇号** \' 来说明归属于，所以“我们的”是ours而不是our\'s，yours也不能写成your\'s。\n\nLIKE ADJECTIVES   LIKE NOUNS\nmy                mine\nour               ours\nyour              yours\nher               hers\nhis               his\nit                its\ntheir             theirs\n\n\n# For instance\n\n> That is my book. // 那是我的书。(my ---\x3e Adj, "my"修饰和描述"book")\n> \n> That book is mine. // 那本书是我的。(mine ---\x3e Noun，人称代词作名词)\n\n形容词性物主代词修饰和描述对象，通常与对象连用。\n\n\n# 辨别名词性物主代词\n\n有些语境下的名词性物主代词是独立于对象的，即使语句中没有出现对象，该名词性物主代词亦可单独表示该对象。\n\n * 人称代词作名词性物主代词\n * 单独表示对象的名词性物主代词（对立于对象）\n\n情景：Jim\'s book.\n\n> Jim, where is your book?\n> \n> Mine is on the bedside table. // (Noun, 这里没有出现"book", "Mine"可以单独表示"book")\n\n\n# More for instance\n\n情景：Girish has a very nice hat.\n\n> That is Girish\'s hat. // (Possessive Pronoun)\n> \n> That is his hat. // (Adj)\n> \n> That hat is his. // (Noun, 人称代词作名词)\n> \n> His is the hat with polka dots. // (Noun，单独表示对象)',normalizedContent:'# possessive pronouns\n\n\n# 什么是所有格代词？\n\n> jim\'s book.\n> \n> girish\'s hat.\n\n所有格代词也叫物主代词。\n\n物主代词描述了属于某人的某物，比如“her shoe”或者“the book is mine”。\n\n物主代词可以是**形容词(adjective)，比如“his bicycle”。或者可以作为名词(noun)，像“the seats are theirs”。这两种形式下都不需要标明撇号** \' 来说明归属于，所以“我们的”是ours而不是our\'s，yours也不能写成your\'s。\n\nlike adjectives   like nouns\nmy                mine\nour               ours\nyour              yours\nher               hers\nhis               his\nit                its\ntheir             theirs\n\n\n# for instance\n\n> that is my book. // 那是我的书。(my ---\x3e adj, "my"修饰和描述"book")\n> \n> that book is mine. // 那本书是我的。(mine ---\x3e noun，人称代词作名词)\n\n形容词性物主代词修饰和描述对象，通常与对象连用。\n\n\n# 辨别名词性物主代词\n\n有些语境下的名词性物主代词是独立于对象的，即使语句中没有出现对象，该名词性物主代词亦可单独表示该对象。\n\n * 人称代词作名词性物主代词\n * 单独表示对象的名词性物主代词（对立于对象）\n\n情景：jim\'s book.\n\n> jim, where is your book?\n> \n> mine is on the bedside table. // (noun, 这里没有出现"book", "mine"可以单独表示"book")\n\n\n# more for instance\n\n情景：girish has a very nice hat.\n\n> that is girish\'s hat. // (possessive pronoun)\n> \n> that is his hat. // (adj)\n> \n> that hat is his. // (noun, 人称代词作名词)\n> \n> his is the hat with polka dots. // (noun，单独表示对象)',charsets:{cjk:!0},lastUpdated:"2022/12/03, 17:31:39",lastUpdatedTimestamp:1670059899e3},{title:"《我们要自学》",frontmatter:{title:"《我们要自学》",date:"2022-12-03T17:07:05.000Z",permalink:"/pages/fbe430/",tags:["阅读","记录"]},regularPath:"/06.%E8%AE%B0%E5%BD%95/03.%E9%98%85%E8%AF%BB/04.%E3%80%8A%E6%88%91%E4%BB%AC%E8%A6%81%E8%87%AA%E5%AD%A6%E3%80%8B.html",relativePath:"06.记录/03.阅读/04.《我们要自学》.md",key:"v-1770b0c0",path:"/pages/fbe430/",headers:[{level:2,title:"序　自学人生",slug:"序-自学人生",normalizedTitle:"序　自学人生",charIndex:22},{level:2,title:"第1章 为什么要自学",slug:"第1章-为什么要自学",normalizedTitle:"第1章 为什么要自学",charIndex:225},{level:2,title:"第2章 自学是否可能",slug:"第2章-自学是否可能",normalizedTitle:"第2章 自学是否可能",charIndex:602},{level:2,title:"第 3 章 自学与老师",slug:"第-3-章-自学与老师",normalizedTitle:"第 3 章 自学与老师",charIndex:656},{level:2,title:"第4章 自学的方法",slug:"第4章-自学的方法",normalizedTitle:"第4章 自学的方法",charIndex:958},{level:2,title:"第5章 自学的难点",slug:"第5章-自学的难点",normalizedTitle:"第5章 自学的难点",charIndex:2189},{level:2,title:"第6章 自学的例子",slug:"第6章-自学的例子",normalizedTitle:"第6章 自学的例子",charIndex:3129}],headersStr:"序　自学人生 第1章 为什么要自学 第2章 自学是否可能 第 3 章 自学与老师 第4章 自学的方法 第5章 自学的难点 第6章 自学的例子",content:"书名：《我们要自学》\n\n作者：张玳\n\n\n# 序　自学人生\n\n> 说它特别，是因为很少有学习方法的书去像它一样重视学习的动机和目的。说它不同，在于里面有很多“反直觉”的道理和观点\n\n一段不太一样的人生\n\n> 从小我就非常叛逆，这一点直到现在都没有改变。不过，绝大部分时候，我反抗并不是因为基因中有叛逆因子，而是我很明确地知道我想要\n\n一本不太一样的书\n\n> 这本书是一个真正自学者的自白，一个离经叛道者的出奇制胜之道。这也是我相信它与众不同的\n\n\n# 第1章 为什么要自学\n\n1.1　什么是自学\n\n> 自学就是完全自发、自主地进行学习。\n\n> 被动的接受教学则很容易使学生丢失掉终极目标，所以只能把学习（或者考试）本身作为目标。\n\n> 学生不知道为什么而学，掌握着大量所谓教育学理论知识的老师也不知道为什么而教。\n\n1.2　自学让人自由\n\n> 有时候，有人能帮助我们挣脱锁链，但更多时候，你必须靠自己。不仅要靠自己，还得抵制住周围人的闲言碎语。为什么要出去啊，这里多好啊，大家都在这里，生活了多久了，好好的为什么要出去。\n\n> 我发现很多所谓的“老师”是希望你留在洞穴里的。他们教育的内容是洞穴里的内容，教育的目的也是希望你能适应并留在洞穴里。所以，一旦你想要离开，他们就会变得非常紧张。不仅老师会紧张，连周围的洞穴人都会觉得紧张。他们一面说着风凉话，一面又暗暗羡慕你走出去之后能看到不同的风景。\n\n\n# 第2章 自学是否可能\n\n2.2　知识守恒\n\n> 如果单纯靠传授，老师不可能教出比自己更优秀的学生。\n\n\n# 第 3 章 自学与老师\n\n> 自学就像是磁铁一样，自行吸引知识，不依靠别人的灌输。\n\n3.2.1　制订计划\n\n> 如果你是自主学习，其实很自然就会有目标，有目标就能形成计划。\n\n3.2.2　进度监测\n\n> 心流指的是人们全情投入一件事情，注意力极度集中，并产生持续愉悦感的心理状态。\n\n3.2.3　持续反馈\n\n> 学习一门语言的时候，可以大声阅读文章，把音录下来，然后再回放来听听，很多小的问题就会变得很明显。\n\n> 人在主观从事一项事务和客观看待时是完全不同的心理状态\n\n3.2.5　示之以范\n\n> 首先，寻找范例不是像无头苍蝇一样乱撞、乱找，而是你已经有一个比较明确的目的，然后再寻找相应的\n\n\n# 第4章 自学的方法\n\n4.1.2　寻找入门级的材料\n\n> 我们现在的信息并不是太少，而是太多\n\n> 实际上真正打出这些字样的材料绝大部分都不太适合入门\n\n4.1.3　先上车再补票\n\n> 这位老师使用的方法，就是把学习对象简化，缩小，直到学生不再有任何疑惑，可以马上上手。这是一个非常好的切入方法，从最简单，最直观的东西做起，不管做得再差，你总有可以自我反馈的基础。一切思考都是从这样的基础中催生出来。\n\n4.2.1　书籍和文章\n\n> 读书让人变蠢的另一个原因是不经思考地全盘接受。不管采用什么样的方法，我们在阅读的时候都应该确保是带着问题的，要质疑和批判。书给人的感觉很正式，所以人往往容易过度相信书里面的说法。\n\n> 可以看看《学会提问》，这是一本非常好的批判性思维的书\n\n> 教科书像婆婆嘴一样唠唠叨叨还可以理解，因为它们是标准化的成果，而标准化需要照顾到最不愿学，或者理解能力最差的学生。\n\n4.2.4　新型工具\n\n> 工具仍然是工具，它能在不同的情景下帮助人解决一些具体的问题或者困难，但是无法代替人自己的恒心和毅力，更难以帮助你培养对学习对象的爱。有爱才能坚持下来，有爱才能看工具书都看得津津有味。对这一点，学习者应该有所觉悟\n\n4.2.5　理性看待入门级材料\n\n> 学习一项技能，主要的目的是运用，而不是研究，可是，很多入门书都是披着学习的外衣在做研究。\n\n4.2.6　学习资源的局限性\n\n> 自学者应该记住，再好的学习资源都只是工具，工具永远也无法解决人的问题——只有人能解决人的问题。\n\n4.3.1　明确你的目标\n\n> 长期目标应该比较具体，比如多少字的写作，阅读多少篇文章，画多少张画，能完美演奏某个曲子，都可以。不要给自己设定比较抽象的目标，比如“成为钢琴家”，或者“成为半专业的摄影师”，这样的目标无法验证和衡量，也就失去了意义。\n\n4.4.2　抓整体，放细节\n\n> 不管学习什么，我们都应该注重整体效果，而不要被细节所困扰，打断自己的心流，浪费时间。\n\n4.4.5　形成知识体系\n\n> 现代人的注意力本身就很有限\n\n> 写作即思考\n\n> 金字塔思维法\n\n> 这本里程碑式的书名为《金字塔原理》，书中介绍了一种从上至下，非常有条理、有结构的思维方式。\n\n> 既然名字叫作“金字塔”，那我们基本上可以想象它是由一个顶节点，发展出多个子节点，然后子节点再继续发展，这样一个情形。对于写作来说，顶节点就是你想要阐述的核心观点，其子节点又是支持观点（次级观点），然后再有更小的证据来证明支持观点。如此发展，则文章中的每一句话，在金字塔中都有其位置和作用，即证明最顶端的核心观点。对于知识体系来说，顶端是你想要学习的东西，然后下一层则是要做到这一点，需要的技能，再下一层则是要达到这样一些技能，需要哪些知识或者练习。如果你对于整个东西所需的能力和知识体系还不明了，没关系，金字塔结构的意思就是任何一个节点拿出来，都能形成一个缩小版的金字塔。\n\n\n# 第5章 自学的难点\n\n5.1　拖延症的问题\n\n> 拖延症和脑残一样，无药可治。\n\n> 希望用工具和方法来解决人的问题——这是不现实的。工具和方法只能解决工具和方法自身的问题。\n\n> 如果原来的设计方法不好，那就换一种设计方法。如果原来的产品开发方法不好，就换一种开发方法。但要是人本身就有问题，那不管使用任何方法都会出问题。正如俗话所说，你永远也叫不醒一个装睡的人。对不起，人的问题只能靠人来解决，真相很残酷。不管是 GTD 方法也好，各种待办事项程序也好，都是工具。工具由人驱动，如果人决定不使用这些工具，再好的工具也没用。\n\n> 解决拖延症和戒烟一样。任何辅助措施都是安慰剂，如果没有自己（极为）强大的意志力，加上明确的方向和目标，就只能静待自己幡然醒悟那一刻了。\n\n5.4　驱动和推动\n\n> 自学者应该学会客观看待推动和驱动两股力量。推动力有其特定的适用场景和作用，不过，驱动的力量才是长效的力量。所以，我们需要找到内在驱动力。内在驱动力来自于爱，而爱又来自于好奇心。\n\n5.5　整理和收纳\n\n> 要想真正进入高效状态，特别是超高效的“心流”状态，那么我们就只能关注在一件事情上。\n\n5.6　回归主流社会\n\n> 你可以把它当作是你学习你自己想学的东西的妨碍。你的目的，就是花最小的力气，熟悉它的规则，然后顺着它的规则走，迅速满足它的需求\n\n> 如果要硬记抽象的东西，那么我们就必须不断地重复。这个过程不仅无聊，而且衰退非常快。\n\n> 中国的数学教育看似高端，赶英超美，但其实相当枯燥，模式也很固定。你需要背诵一些公式，一些固定的解法，并且要学会把应用题抽象出来。这需要一些锻炼，但其实只要摸到了门路，就很简单了——一句话说，就是它其实根本不需要你进行真正的思考，最多只需要把记忆中的东西进行一些组合就行了。\n\n> 只要记住，我们的目标是学我们想学的东西，只要用记忆术来对付了应试教育这一套，就能学自己想学的东西了。\n\n> 一个真正优秀的自学者是不惧怕学校摧残的。在中国这个社会，即便你有优秀的学习能力，但是回归主流社会，做一点符合主流价值观的事情（比如拿个文凭），还是比较重要的。希望所有的自学者都能越过学校这个坎，最大限度地利用好学校这段没有现实压力的美好时光。\n\n\n# 第6章 自学的例子\n\n6.1.3　发展期\n\n> 文章。这类文章由于需要比较客观，描述的也大多是事实，所以文化成分并不大，很容易阅读。慢慢地，人就能适应英文的材料，不再看到就觉得头晕。\n\n> 我们在阅读的时候要敢于批判。\n\n> 最最难的，就是英语的小说了。\n\n6.1.4　总结\n\n> 如果总结一下我的英语学习，那就是：学以致用，培养语感。在我看来，语感也许是英语学习最重要的部分。有了它，我们就能自然地造句，自然地阅读和领会别人的意思。\n\n> 大人一定要注意在启蒙期做好引导，选好老师。\n\n> 不能让不好的启蒙老师毁了你自己的学习态度，对吧？",normalizedContent:"书名：《我们要自学》\n\n作者：张玳\n\n\n# 序　自学人生\n\n> 说它特别，是因为很少有学习方法的书去像它一样重视学习的动机和目的。说它不同，在于里面有很多“反直觉”的道理和观点\n\n一段不太一样的人生\n\n> 从小我就非常叛逆，这一点直到现在都没有改变。不过，绝大部分时候，我反抗并不是因为基因中有叛逆因子，而是我很明确地知道我想要\n\n一本不太一样的书\n\n> 这本书是一个真正自学者的自白，一个离经叛道者的出奇制胜之道。这也是我相信它与众不同的\n\n\n# 第1章 为什么要自学\n\n1.1　什么是自学\n\n> 自学就是完全自发、自主地进行学习。\n\n> 被动的接受教学则很容易使学生丢失掉终极目标，所以只能把学习（或者考试）本身作为目标。\n\n> 学生不知道为什么而学，掌握着大量所谓教育学理论知识的老师也不知道为什么而教。\n\n1.2　自学让人自由\n\n> 有时候，有人能帮助我们挣脱锁链，但更多时候，你必须靠自己。不仅要靠自己，还得抵制住周围人的闲言碎语。为什么要出去啊，这里多好啊，大家都在这里，生活了多久了，好好的为什么要出去。\n\n> 我发现很多所谓的“老师”是希望你留在洞穴里的。他们教育的内容是洞穴里的内容，教育的目的也是希望你能适应并留在洞穴里。所以，一旦你想要离开，他们就会变得非常紧张。不仅老师会紧张，连周围的洞穴人都会觉得紧张。他们一面说着风凉话，一面又暗暗羡慕你走出去之后能看到不同的风景。\n\n\n# 第2章 自学是否可能\n\n2.2　知识守恒\n\n> 如果单纯靠传授，老师不可能教出比自己更优秀的学生。\n\n\n# 第 3 章 自学与老师\n\n> 自学就像是磁铁一样，自行吸引知识，不依靠别人的灌输。\n\n3.2.1　制订计划\n\n> 如果你是自主学习，其实很自然就会有目标，有目标就能形成计划。\n\n3.2.2　进度监测\n\n> 心流指的是人们全情投入一件事情，注意力极度集中，并产生持续愉悦感的心理状态。\n\n3.2.3　持续反馈\n\n> 学习一门语言的时候，可以大声阅读文章，把音录下来，然后再回放来听听，很多小的问题就会变得很明显。\n\n> 人在主观从事一项事务和客观看待时是完全不同的心理状态\n\n3.2.5　示之以范\n\n> 首先，寻找范例不是像无头苍蝇一样乱撞、乱找，而是你已经有一个比较明确的目的，然后再寻找相应的\n\n\n# 第4章 自学的方法\n\n4.1.2　寻找入门级的材料\n\n> 我们现在的信息并不是太少，而是太多\n\n> 实际上真正打出这些字样的材料绝大部分都不太适合入门\n\n4.1.3　先上车再补票\n\n> 这位老师使用的方法，就是把学习对象简化，缩小，直到学生不再有任何疑惑，可以马上上手。这是一个非常好的切入方法，从最简单，最直观的东西做起，不管做得再差，你总有可以自我反馈的基础。一切思考都是从这样的基础中催生出来。\n\n4.2.1　书籍和文章\n\n> 读书让人变蠢的另一个原因是不经思考地全盘接受。不管采用什么样的方法，我们在阅读的时候都应该确保是带着问题的，要质疑和批判。书给人的感觉很正式，所以人往往容易过度相信书里面的说法。\n\n> 可以看看《学会提问》，这是一本非常好的批判性思维的书\n\n> 教科书像婆婆嘴一样唠唠叨叨还可以理解，因为它们是标准化的成果，而标准化需要照顾到最不愿学，或者理解能力最差的学生。\n\n4.2.4　新型工具\n\n> 工具仍然是工具，它能在不同的情景下帮助人解决一些具体的问题或者困难，但是无法代替人自己的恒心和毅力，更难以帮助你培养对学习对象的爱。有爱才能坚持下来，有爱才能看工具书都看得津津有味。对这一点，学习者应该有所觉悟\n\n4.2.5　理性看待入门级材料\n\n> 学习一项技能，主要的目的是运用，而不是研究，可是，很多入门书都是披着学习的外衣在做研究。\n\n4.2.6　学习资源的局限性\n\n> 自学者应该记住，再好的学习资源都只是工具，工具永远也无法解决人的问题——只有人能解决人的问题。\n\n4.3.1　明确你的目标\n\n> 长期目标应该比较具体，比如多少字的写作，阅读多少篇文章，画多少张画，能完美演奏某个曲子，都可以。不要给自己设定比较抽象的目标，比如“成为钢琴家”，或者“成为半专业的摄影师”，这样的目标无法验证和衡量，也就失去了意义。\n\n4.4.2　抓整体，放细节\n\n> 不管学习什么，我们都应该注重整体效果，而不要被细节所困扰，打断自己的心流，浪费时间。\n\n4.4.5　形成知识体系\n\n> 现代人的注意力本身就很有限\n\n> 写作即思考\n\n> 金字塔思维法\n\n> 这本里程碑式的书名为《金字塔原理》，书中介绍了一种从上至下，非常有条理、有结构的思维方式。\n\n> 既然名字叫作“金字塔”，那我们基本上可以想象它是由一个顶节点，发展出多个子节点，然后子节点再继续发展，这样一个情形。对于写作来说，顶节点就是你想要阐述的核心观点，其子节点又是支持观点（次级观点），然后再有更小的证据来证明支持观点。如此发展，则文章中的每一句话，在金字塔中都有其位置和作用，即证明最顶端的核心观点。对于知识体系来说，顶端是你想要学习的东西，然后下一层则是要做到这一点，需要的技能，再下一层则是要达到这样一些技能，需要哪些知识或者练习。如果你对于整个东西所需的能力和知识体系还不明了，没关系，金字塔结构的意思就是任何一个节点拿出来，都能形成一个缩小版的金字塔。\n\n\n# 第5章 自学的难点\n\n5.1　拖延症的问题\n\n> 拖延症和脑残一样，无药可治。\n\n> 希望用工具和方法来解决人的问题——这是不现实的。工具和方法只能解决工具和方法自身的问题。\n\n> 如果原来的设计方法不好，那就换一种设计方法。如果原来的产品开发方法不好，就换一种开发方法。但要是人本身就有问题，那不管使用任何方法都会出问题。正如俗话所说，你永远也叫不醒一个装睡的人。对不起，人的问题只能靠人来解决，真相很残酷。不管是 gtd 方法也好，各种待办事项程序也好，都是工具。工具由人驱动，如果人决定不使用这些工具，再好的工具也没用。\n\n> 解决拖延症和戒烟一样。任何辅助措施都是安慰剂，如果没有自己（极为）强大的意志力，加上明确的方向和目标，就只能静待自己幡然醒悟那一刻了。\n\n5.4　驱动和推动\n\n> 自学者应该学会客观看待推动和驱动两股力量。推动力有其特定的适用场景和作用，不过，驱动的力量才是长效的力量。所以，我们需要找到内在驱动力。内在驱动力来自于爱，而爱又来自于好奇心。\n\n5.5　整理和收纳\n\n> 要想真正进入高效状态，特别是超高效的“心流”状态，那么我们就只能关注在一件事情上。\n\n5.6　回归主流社会\n\n> 你可以把它当作是你学习你自己想学的东西的妨碍。你的目的，就是花最小的力气，熟悉它的规则，然后顺着它的规则走，迅速满足它的需求\n\n> 如果要硬记抽象的东西，那么我们就必须不断地重复。这个过程不仅无聊，而且衰退非常快。\n\n> 中国的数学教育看似高端，赶英超美，但其实相当枯燥，模式也很固定。你需要背诵一些公式，一些固定的解法，并且要学会把应用题抽象出来。这需要一些锻炼，但其实只要摸到了门路，就很简单了——一句话说，就是它其实根本不需要你进行真正的思考，最多只需要把记忆中的东西进行一些组合就行了。\n\n> 只要记住，我们的目标是学我们想学的东西，只要用记忆术来对付了应试教育这一套，就能学自己想学的东西了。\n\n> 一个真正优秀的自学者是不惧怕学校摧残的。在中国这个社会，即便你有优秀的学习能力，但是回归主流社会，做一点符合主流价值观的事情（比如拿个文凭），还是比较重要的。希望所有的自学者都能越过学校这个坎，最大限度地利用好学校这段没有现实压力的美好时光。\n\n\n# 第6章 自学的例子\n\n6.1.3　发展期\n\n> 文章。这类文章由于需要比较客观，描述的也大多是事实，所以文化成分并不大，很容易阅读。慢慢地，人就能适应英文的材料，不再看到就觉得头晕。\n\n> 我们在阅读的时候要敢于批判。\n\n> 最最难的，就是英语的小说了。\n\n6.1.4　总结\n\n> 如果总结一下我的英语学习，那就是：学以致用，培养语感。在我看来，语感也许是英语学习最重要的部分。有了它，我们就能自然地造句，自然地阅读和领会别人的意思。\n\n> 大人一定要注意在启蒙期做好引导，选好老师。\n\n> 不能让不好的启蒙老师毁了你自己的学习态度，对吧？",charsets:{cjk:!0},lastUpdated:"2022/12/03, 17:31:39",lastUpdatedTimestamp:1670059899e3},{title:"《挪威的森林》",frontmatter:{title:"《挪威的森林》",date:"2023-04-14T13:06:40.000Z",permalink:"/pages/86ac50/",tags:["记录","阅读"]},regularPath:"/06.%E8%AE%B0%E5%BD%95/03.%E9%98%85%E8%AF%BB/05.%E3%80%8A%E6%8C%AA%E5%A8%81%E7%9A%84%E6%A3%AE%E6%9E%97%E3%80%8B.html",relativePath:"06.记录/03.阅读/05.《挪威的森林》.md",key:"v-078e42cf",path:"/pages/86ac50/",headersStr:null,content:"书名：《挪威的森林》\n\n作者：村上春树(Haruki Murakami)\n\n◆ 第六章\n\n> 任凭怎么解释，世人也只能相信自己愿意相信的事情。\n\n◆ 第七章\n\n> People are strange when you are a stranger.\n\n◆ 第十章\n\n> “饼干罐不是装有各种各样的饼干，喜欢的和不大喜欢的都在里面吗？如果先一个劲儿挑你喜欢的吃，那么剩下的就全是不大喜欢的。每次遇到麻烦我就总这样想：先把这个应付过去，往下就好办了。人生就是饼干罐。”\n\n> 倘若周围一团漆黑，那就只能静等眼睛习惯黑暗。\n\n> 在风和日丽的天气里荡舟于美丽的湖面，我们会既觉得蓝天迷人，又深感湖水多娇——二者同一道理。不必那么苦恼。纵令听其自然，世事的长河也还是要流往其应流的方向，而即使再竭尽人力，该受伤害的人也无由幸免。所谓人生便是如此。\n\n◆ 第十一章\n\n> “死并非生的对立面，死潜伏在我们的生之中。”",normalizedContent:"书名：《挪威的森林》\n\n作者：村上春树(haruki murakami)\n\n◆ 第六章\n\n> 任凭怎么解释，世人也只能相信自己愿意相信的事情。\n\n◆ 第七章\n\n> people are strange when you are a stranger.\n\n◆ 第十章\n\n> “饼干罐不是装有各种各样的饼干，喜欢的和不大喜欢的都在里面吗？如果先一个劲儿挑你喜欢的吃，那么剩下的就全是不大喜欢的。每次遇到麻烦我就总这样想：先把这个应付过去，往下就好办了。人生就是饼干罐。”\n\n> 倘若周围一团漆黑，那就只能静等眼睛习惯黑暗。\n\n> 在风和日丽的天气里荡舟于美丽的湖面，我们会既觉得蓝天迷人，又深感湖水多娇——二者同一道理。不必那么苦恼。纵令听其自然，世事的长河也还是要流往其应流的方向，而即使再竭尽人力，该受伤害的人也无由幸免。所谓人生便是如此。\n\n◆ 第十一章\n\n> “死并非生的对立面，死潜伏在我们的生之中。”",charsets:{cjk:!0}},{title:"青钢影",frontmatter:{title:"青钢影",date:"2023-04-14T12:54:07.000Z",permalink:"/pages/6010b8/",tags:["记录","English"]},regularPath:"/06.%E8%AE%B0%E5%BD%95/10.Others/10.%E9%9D%92%E9%92%A2%E5%BD%B1.html",relativePath:"06.记录/10.Others/10.青钢影.md",key:"v-6e1af767",path:"/pages/6010b8/",headers:[{level:3,title:"精准与否，就是屠宰与手术的区别。",slug:"精准与否-就是屠宰与手术的区别。",normalizedTitle:"精准与否，就是屠宰与手术的区别。",charIndex:2},{level:3,title:"世界既不黑也不白，而是一道精致的灰。",slug:"世界既不黑也不白-而是一道精致的灰。",normalizedTitle:"世界既不黑也不白，而是一道精致的灰。",charIndex:94},{level:3,title:"手上的任务是唯一",slug:"手上的任务是唯一",normalizedTitle:"手上的任务是唯一",charIndex:173},{level:3,title:"小心你的言行。敬酒不吃吃罚酒。",slug:"小心你的言行。敬酒不吃吃罚酒。",normalizedTitle:"小心你的言行。敬酒不吃吃罚酒。",charIndex:220},{level:3,title:"切忌愚鲁。",slug:"切忌愚鲁。",normalizedTitle:"切忌愚鲁。",charIndex:304},{level:3,title:"优雅永不过时。",slug:"优雅永不过时。",normalizedTitle:"优雅永不过时。",charIndex:338},{level:3,title:"形式的纯粹，功能的纯粹。",slug:"形式的纯粹-功能的纯粹。",normalizedTitle:"形式的纯粹，功能的纯粹。",charIndex:387},{level:3,title:"你的徒劳，让人失望。",slug:"你的徒劳-让人失望。",normalizedTitle:"你的徒劳，让人失望。",charIndex:452},{level:3,title:"如果你赢不了，就不要动手。",slug:"如果你赢不了-就不要动手。",normalizedTitle:"如果你赢不了，就不要动手。",charIndex:500},{level:3,title:"你,要,自知!",slug:"你-要-自知",normalizedTitle:"你,要,自知!",charIndex:550},{level:3,title:"别着急，我还没完事呢。",slug:"别着急-我还没完事呢。",normalizedTitle:"别着急，我还没完事呢。",charIndex:595},{level:3,title:"卓越是一种品德，你恰巧欠缺。",slug:"卓越是一种品德-你恰巧欠缺。",normalizedTitle:"卓越是一种品德，你恰巧欠缺。",charIndex:647},{level:3,title:"告诉我，多一只手会让你多一份光荣么?",slug:"告诉我-多一只手会让你多一份光荣么",normalizedTitle:"告诉我，多一只手会让你多一份光荣么?",charIndex:728},{level:3,title:"我会把你变成无关紧要的琐事。",slug:"我会把你变成无关紧要的琐事。",normalizedTitle:"我会把你变成无关紧要的琐事。",charIndex:804},{level:3,title:"有时候，伤疤是一个人最上等的华服。",slug:"有时候-伤疤是一个人最上等的华服。",normalizedTitle:"有时候，伤疤是一个人最上等的华服。",charIndex:862},{level:3,title:"要么打，要么跑，优柔寡断令人厌恶。",slug:"要么打-要么跑-优柔寡断令人厌恶。",normalizedTitle:"要么打，要么跑，优柔寡断令人厌恶。",charIndex:935},{level:3,title:"自负会让每个人都屈膝下跪。",slug:"自负会让每个人都屈膝下跪。",normalizedTitle:"自负会让每个人都屈膝下跪。",charIndex:1003},{level:3,title:"这份工作，不是为业余人士而准备的。",slug:"这份工作-不是为业余人士而准备的。",normalizedTitle:"这份工作，不是为业余人士而准备的。",charIndex:1056},{level:3,title:"你毫无策略的行动让我恶心。",slug:"你毫无策略的行动让我恶心。",normalizedTitle:"你毫无策略的行动让我恶心。",charIndex:1109},{level:3,title:"要多想，不然你就是在给自己挖坟。",slug:"要多想-不然你就是在给自己挖坟。",normalizedTitle:"要多想，不然你就是在给自己挖坟。",charIndex:1165},{level:3,title:"我已经足够年纪明白事理了。",slug:"我已经足够年纪明白事理了。",normalizedTitle:"我已经足够年纪明白事理了。",charIndex:1233},{level:3,title:"想阻止我?你是哪位?",slug:"想阻止我-你是哪位",normalizedTitle:"想阻止我?你是哪位?",charIndex:1294},{level:3,title:"法律需要维护，才能维护人民。",slug:"法律需要维护-才能维护人民。",normalizedTitle:"法律需要维护，才能维护人民。",charIndex:1340},{level:3,title:"天哪!有人能给这根棒槌指点一下么?",slug:"天哪-有人能给这根棒槌指点一下么",normalizedTitle:"天哪!有人能给这根棒槌指点一下么?",charIndex:1423},{level:3,title:"人人有自己的位置，忘乎所以，就危险了。",slug:"人人有自己的位置-忘乎所以-就危险了。",normalizedTitle:"人人有自己的位置，忘乎所以，就危险了。",charIndex:1490},{level:3,title:"谎言不会伤人，真相才是快刀。",slug:"谎言不会伤人-真相才是快刀。",normalizedTitle:"谎言不会伤人，真相才是快刀。",charIndex:1578},{level:3,title:"悔恨会磨平我们灵魂中的棱角。",slug:"悔恨会磨平我们灵魂中的棱角。",normalizedTitle:"悔恨会磨平我们灵魂中的棱角。",charIndex:1653},{level:3,title:"这是你的极限了。",slug:"这是你的极限了。",normalizedTitle:"这是你的极限了。",charIndex:1718},{level:3,title:"进化的代价是必要的死亡。",slug:"进化的代价是必要的死亡。",normalizedTitle:"进化的代价是必要的死亡。",charIndex:1752},{level:3,title:"你已经被忘却了。",slug:"你已经被忘却了。",normalizedTitle:"你已经被忘却了。",charIndex:1816},{level:3,title:"我们都有底线，而我，也许已经越过自己的了。",slug:"我们都有底线-而我-也许已经越过自己的了。",normalizedTitle:"我们都有底线，而我，也许已经越过自己的了。",charIndex:1855},{level:3,title:"不要有趣，要有用。",slug:"不要有趣-要有用。",normalizedTitle:"不要有趣，要有用。",charIndex:1948},{level:3,title:"尽管吹牛吧，趁你还有地方，趁你还活着。",slug:"尽管吹牛吧-趁你还有地方-趁你还活着。",normalizedTitle:"尽管吹牛吧，趁你还有地方，趁你还活着。",charIndex:1990},{level:3,title:"结果比宣言更有力。",slug:"结果比宣言更有力。",normalizedTitle:"结果比宣言更有力。",charIndex:2078},{level:3,title:"看清你要去的地方。",slug:"看清你要去的地方。",normalizedTitle:"看清你要去的地方。",charIndex:2138},{level:3,title:"看起来所有问题都解决了，但是我不这么认为。",slug:"看起来所有问题都解决了-但是我不这么认为。",normalizedTitle:"看起来所有问题都解决了，但是我不这么认为。",charIndex:2178},{level:3,title:"不要往心里去，你只是处于劣势而已。",slug:"不要往心里去-你只是处于劣势而已。",normalizedTitle:"不要往心里去，你只是处于劣势而已。",charIndex:2276},{level:3,title:"不要如此大惊小怪。",slug:"不要如此大惊小怪。",normalizedTitle:"不要如此大惊小怪。",charIndex:2354}],headersStr:"精准与否，就是屠宰与手术的区别。 世界既不黑也不白，而是一道精致的灰。 手上的任务是唯一 小心你的言行。敬酒不吃吃罚酒。 切忌愚鲁。 优雅永不过时。 形式的纯粹，功能的纯粹。 你的徒劳，让人失望。 如果你赢不了，就不要动手。 你,要,自知! 别着急，我还没完事呢。 卓越是一种品德，你恰巧欠缺。 告诉我，多一只手会让你多一份光荣么? 我会把你变成无关紧要的琐事。 有时候，伤疤是一个人最上等的华服。 要么打，要么跑，优柔寡断令人厌恶。 自负会让每个人都屈膝下跪。 这份工作，不是为业余人士而准备的。 你毫无策略的行动让我恶心。 要多想，不然你就是在给自己挖坟。 我已经足够年纪明白事理了。 想阻止我?你是哪位? 法律需要维护，才能维护人民。 天哪!有人能给这根棒槌指点一下么? 人人有自己的位置，忘乎所以，就危险了。 谎言不会伤人，真相才是快刀。 悔恨会磨平我们灵魂中的棱角。 这是你的极限了。 进化的代价是必要的死亡。 你已经被忘却了。 我们都有底线，而我，也许已经越过自己的了。 不要有趣，要有用。 尽管吹牛吧，趁你还有地方，趁你还活着。 结果比宣言更有力。 看清你要去的地方。 看起来所有问题都解决了，但是我不这么认为。 不要往心里去，你只是处于劣势而已。 不要如此大惊小怪。",content:"# 精准与否，就是屠宰与手术的区别。\n\naccuracy or not is the difference between slaughtering and operation.\n\n\n# 世界既不黑也不白，而是一道精致的灰。\n\nthe world is neither black nor white, but a fine gray.\n\n\n# 手上的任务是唯一\n\nthe task on hand is the only one\n\n\n# 小心你的言行。敬酒不吃吃罚酒。\n\nbe careful with your words and deeds. Toast without free wine.\n\n\n# 切忌愚鲁。\n\ndo not be foolishness.\n\n\n# 优雅永不过时。\n\nelegance will never be out of date.\n\n\n# 形式的纯粹，功能的纯粹。\n\nthe purity of form and the purity of function.\n\n\n# 你的徒劳，让人失望。\n\nyour futility is disappointing.\n\n\n# 如果你赢不了，就不要动手。\n\nif you can't win, don't do it.\n\n\n# 你,要,自知!\n\nyou, you need to know yourself!\n\n\n# 别着急，我还没完事呢。\n\ndon't worry. I'm not finished yet.\n\n\n# 卓越是一种品德，你恰巧欠缺。\n\nexcellence is a kind of morality, and you happen to lack it.\n\n\n# 告诉我，多一只手会让你多一份光荣么?\n\nTell me, will one more hand make you more glorious?\n\n\n# 我会把你变成无关紧要的琐事。\n\nI will turn you into trivial matters.\n\n\n# 有时候，伤疤是一个人最上等的华服。\n\nsometimes scars are the best clothes of a person.\n\n\n# 要么打，要么跑，优柔寡断令人厌恶。\n\nit is disgusting to play or run, indecision.\n\n\n# 自负会让每个人都屈膝下跪。\n\nconceit will make everyone kneel.\n\n\n# 这份工作，不是为业余人士而准备的。\n\nthis job is not for amateurs.\n\n\n# 你毫无策略的行动让我恶心。\n\nyour unprotected actions disgust me.\n\n\n# 要多想，不然你就是在给自己挖坟。\n\nThink more, or you're digging your own grave.\n\n\n# 我已经足够年纪明白事理了。\n\nI am old enough to understand the matter.\n\n\n# 想阻止我?你是哪位?\n\nwant to stop me? Who are you?\n\n\n# 法律需要维护，才能维护人民。\n\nthe law needs to be maintained in order to protect the people.\n\n\n# 天哪!有人能给这根棒槌指点一下么?\n\nMy God! Can anyone give this mallet a hint?\n\n\n# 人人有自己的位置，忘乎所以，就危险了。\n\neveryone has his own position, forgetting it, it is dangerous.\n\n\n# 谎言不会伤人，真相才是快刀。\n\nlies will not hurt people. The truth is a quick knife.\n\n\n# 悔恨会磨平我们灵魂中的棱角。\n\nremorse will grind the corners of our souls.\n\n\n# 这是你的极限了。\n\nthis is your limit.\n\n\n# 进化的代价是必要的死亡。\n\nthe cost of evolution is the necessary death.\n\n\n# 你已经被忘却了。\n\nYou have been forgotten.\n\n\n# 我们都有底线，而我，也许已经越过自己的了。\n\nwe all have the bottom line, and I, perhaps, have crossed my own.\n\n\n# 不要有趣，要有用。\n\nDon't be funny, be useful.\n\n\n# 尽管吹牛吧，趁你还有地方，趁你还活着。\n\nBrag, while you still have a place, while you are still alive.\n\n\n# 结果比宣言更有力。\n\nThe result is stronger than the declaration.\n\n\n# 看清你要去的地方。\n\nSee where you are going.\n\n\n# 看起来所有问题都解决了，但是我不这么认为。\n\nIt seems that all the problems have been solved, but I don't think so.\n\n\n# 不要往心里去，你只是处于劣势而已。\n\nDon't take it to heart. You're just at a disadvantage.\n\n\n# 不要如此大惊小怪。\n\nDon't make such a fuss.",normalizedContent:"# 精准与否，就是屠宰与手术的区别。\n\naccuracy or not is the difference between slaughtering and operation.\n\n\n# 世界既不黑也不白，而是一道精致的灰。\n\nthe world is neither black nor white, but a fine gray.\n\n\n# 手上的任务是唯一\n\nthe task on hand is the only one\n\n\n# 小心你的言行。敬酒不吃吃罚酒。\n\nbe careful with your words and deeds. toast without free wine.\n\n\n# 切忌愚鲁。\n\ndo not be foolishness.\n\n\n# 优雅永不过时。\n\nelegance will never be out of date.\n\n\n# 形式的纯粹，功能的纯粹。\n\nthe purity of form and the purity of function.\n\n\n# 你的徒劳，让人失望。\n\nyour futility is disappointing.\n\n\n# 如果你赢不了，就不要动手。\n\nif you can't win, don't do it.\n\n\n# 你,要,自知!\n\nyou, you need to know yourself!\n\n\n# 别着急，我还没完事呢。\n\ndon't worry. i'm not finished yet.\n\n\n# 卓越是一种品德，你恰巧欠缺。\n\nexcellence is a kind of morality, and you happen to lack it.\n\n\n# 告诉我，多一只手会让你多一份光荣么?\n\ntell me, will one more hand make you more glorious?\n\n\n# 我会把你变成无关紧要的琐事。\n\ni will turn you into trivial matters.\n\n\n# 有时候，伤疤是一个人最上等的华服。\n\nsometimes scars are the best clothes of a person.\n\n\n# 要么打，要么跑，优柔寡断令人厌恶。\n\nit is disgusting to play or run, indecision.\n\n\n# 自负会让每个人都屈膝下跪。\n\nconceit will make everyone kneel.\n\n\n# 这份工作，不是为业余人士而准备的。\n\nthis job is not for amateurs.\n\n\n# 你毫无策略的行动让我恶心。\n\nyour unprotected actions disgust me.\n\n\n# 要多想，不然你就是在给自己挖坟。\n\nthink more, or you're digging your own grave.\n\n\n# 我已经足够年纪明白事理了。\n\ni am old enough to understand the matter.\n\n\n# 想阻止我?你是哪位?\n\nwant to stop me? who are you?\n\n\n# 法律需要维护，才能维护人民。\n\nthe law needs to be maintained in order to protect the people.\n\n\n# 天哪!有人能给这根棒槌指点一下么?\n\nmy god! can anyone give this mallet a hint?\n\n\n# 人人有自己的位置，忘乎所以，就危险了。\n\neveryone has his own position, forgetting it, it is dangerous.\n\n\n# 谎言不会伤人，真相才是快刀。\n\nlies will not hurt people. the truth is a quick knife.\n\n\n# 悔恨会磨平我们灵魂中的棱角。\n\nremorse will grind the corners of our souls.\n\n\n# 这是你的极限了。\n\nthis is your limit.\n\n\n# 进化的代价是必要的死亡。\n\nthe cost of evolution is the necessary death.\n\n\n# 你已经被忘却了。\n\nyou have been forgotten.\n\n\n# 我们都有底线，而我，也许已经越过自己的了。\n\nwe all have the bottom line, and i, perhaps, have crossed my own.\n\n\n# 不要有趣，要有用。\n\ndon't be funny, be useful.\n\n\n# 尽管吹牛吧，趁你还有地方，趁你还活着。\n\nbrag, while you still have a place, while you are still alive.\n\n\n# 结果比宣言更有力。\n\nthe result is stronger than the declaration.\n\n\n# 看清你要去的地方。\n\nsee where you are going.\n\n\n# 看起来所有问题都解决了，但是我不这么认为。\n\nit seems that all the problems have been solved, but i don't think so.\n\n\n# 不要往心里去，你只是处于劣势而已。\n\ndon't take it to heart. you're just at a disadvantage.\n\n\n# 不要如此大惊小怪。\n\ndon't make such a fuss.",charsets:{cjk:!0},lastUpdated:"2023/04/14, 12:58:00",lastUpdatedTimestamp:168144828e4},{title:"代词简介",frontmatter:{title:"代词简介",date:"2022-12-03T16:48:02.000Z",permalink:"/pages/76a49d/",tags:[null]},regularPath:"/05.%E8%8B%B1%E8%AF%AD/01.Khan%20Academy%20-%20%E8%AF%AD%E6%B3%95/03.%E4%BB%A3%E8%AF%8D/01.%E4%BB%A3%E8%AF%8D%E7%AE%80%E4%BB%8B.html",relativePath:"05.英语/01.Khan Academy - 语法/03.代词/01.代词简介.md",key:"v-6d8e5d58",path:"/pages/76a49d/",headers:[{level:2,title:"什么是代词",slug:"什么是代词",normalizedTitle:"什么是代词",charIndex:2}],headersStr:"什么是代词",content:"# 什么是代词\n\n> Klum eating his pziaa.\n> \n> Lily drink her beer.\n\n在一段话中，指代其它已经存在词的词，即为代词。",normalizedContent:"# 什么是代词\n\n> klum eating his pziaa.\n> \n> lily drink her beer.\n\n在一段话中，指代其它已经存在词的词，即为代词。",charsets:{cjk:!0},lastUpdated:"2022/12/03, 17:31:39",lastUpdatedTimestamp:1670059899e3},{title:"Electronic drug?",frontmatter:{title:"Electronic drug?",date:"2022-05-10T22:30:20.000Z",permalink:"/pages/c1a476/",tags:["English","作文儿"]},regularPath:"/06.%E8%AE%B0%E5%BD%95/10.Others/51.Electronic%20drug.html",relativePath:"06.记录/10.Others/51.Electronic drug.md",key:"v-914c6eca",path:"/pages/c1a476/",headersStr:null,content:"Electronic drug?\n\nNow, smartphones are widespread around the world. Nearly everybody has a smartphone. That's not odd, because the world is always evolving. That's good. But, you should know the short video exploded. Since the short video appears, everything seems to have changed. Even many elderly and children are affected. Much less young people. Though a single short video is indeed very short. But, when they gather together. That's not short at all.\n\nIf you think this article title is stubborn, you probably misread it. Don't forget the end of the title has \"?\". I'm not a Riddler. I mean not all smartphones are electronic drugs, depends on the master how to use them. So, the point is we must suitably use smartphones. Otherwise, they are electronic drugs.",normalizedContent:"electronic drug?\n\nnow, smartphones are widespread around the world. nearly everybody has a smartphone. that's not odd, because the world is always evolving. that's good. but, you should know the short video exploded. since the short video appears, everything seems to have changed. even many elderly and children are affected. much less young people. though a single short video is indeed very short. but, when they gather together. that's not short at all.\n\nif you think this article title is stubborn, you probably misread it. don't forget the end of the title has \"?\". i'm not a riddler. i mean not all smartphones are electronic drugs, depends on the master how to use them. so, the point is we must suitably use smartphones. otherwise, they are electronic drugs.",charsets:{},lastUpdated:"2022/12/03, 17:31:39",lastUpdatedTimestamp:1670059899e3},{title:"费曼学习法",frontmatter:{title:"费曼学习法",date:"2020-07-16T10:04:14.000Z",permalink:"/pages/f2a556/",categories:["更多","学习"],tags:["学习方法"],author:{name:"xugaoyi",link:"https://github.com/xugaoyi"}},regularPath:"/07.%E6%9B%B4%E5%A4%9A/01.%E5%AD%A6%E4%B9%A0/00.%E8%B4%B9%E6%9B%BC%E5%AD%A6%E4%B9%A0%E6%B3%95.html",relativePath:"07.更多/01.学习/00.费曼学习法.md",key:"v-5dd65de6",path:"/pages/f2a556/",headers:[{level:3,title:"步骤",slug:"步骤",normalizedTitle:"步骤",charIndex:102}],headersStr:"步骤",content:"费曼学习法，我很喜欢的一个学习方法，简单来说，就是：通过向别人清楚的解说某一件事或是写一篇浅显易懂的教程文章，来确认自己是否真正弄懂了这件事。 可以说是在通过向别讲解过程中来对自身的 查缺补漏。\n\n\n# 步骤\n\n费曼学习法分为4个步骤:\n\n 1. 确定学习目标\n\n你想学习的概念、内容、主题是什么。\n\n 2. 模拟教学学习法\n\n你要模拟自己是一位老师，面对完全不懂这个领域的人，用自己的话，尽可能具体形象地讲诉。这样的讲诉有助于你活学活用，触类旁通，联系生活具体情境。\n\n 3. 回顾\n\n反思第2步遇到的问题，哪些地方卡壳了，哪些地方对方没有真正听懂。找出问题的要害，把握关键环节。\n\n 4. 简化\n\n把这些遇到问题的地方，重新梳理理解，尽可能了解更多背景和相关知识，再用尽可能简化的方式重新表达，设法看穿本质。然后，返回第2步。\n\n> 参考：\n> \n> 《费曼学习法：为何被称为史上最牛的学习法，它的本质究竟是什么？》\n> \n> 《费曼学习法》",normalizedContent:"费曼学习法，我很喜欢的一个学习方法，简单来说，就是：通过向别人清楚的解说某一件事或是写一篇浅显易懂的教程文章，来确认自己是否真正弄懂了这件事。 可以说是在通过向别讲解过程中来对自身的 查缺补漏。\n\n\n# 步骤\n\n费曼学习法分为4个步骤:\n\n 1. 确定学习目标\n\n你想学习的概念、内容、主题是什么。\n\n 2. 模拟教学学习法\n\n你要模拟自己是一位老师，面对完全不懂这个领域的人，用自己的话，尽可能具体形象地讲诉。这样的讲诉有助于你活学活用，触类旁通，联系生活具体情境。\n\n 3. 回顾\n\n反思第2步遇到的问题，哪些地方卡壳了，哪些地方对方没有真正听懂。找出问题的要害，把握关键环节。\n\n 4. 简化\n\n把这些遇到问题的地方，重新梳理理解，尽可能了解更多背景和相关知识，再用尽可能简化的方式重新表达，设法看穿本质。然后，返回第2步。\n\n> 参考：\n> \n> 《费曼学习法：为何被称为史上最牛的学习法，它的本质究竟是什么？》\n> \n> 《费曼学习法》",charsets:{cjk:!0},lastUpdated:"2022/12/03, 17:31:39",lastUpdatedTimestamp:1670059899e3},{title:"提高记忆的技巧",frontmatter:{title:"提高记忆的技巧",date:"2020-01-03T14:34:48.000Z",permalink:"/pages/996822b2a2ca6e3b",categories:["更多","学习"],tags:[null],author:{name:"xugaoyi",link:"https://github.com/xugaoyi"}},regularPath:"/07.%E6%9B%B4%E5%A4%9A/01.%E5%AD%A6%E4%B9%A0/03.%E6%8F%90%E9%AB%98%E8%AE%B0%E5%BF%86%E7%9A%84%E6%8A%80%E5%B7%A7.html",relativePath:"07.更多/01.学习/03.提高记忆的技巧.md",key:"v-45e13a46",path:"/pages/996822b2a2ca6e3b/",excerpt:'<h1 id="提高记忆的技巧"><a class="header-anchor" href="#提高记忆的技巧">#</a> 提高记忆的技巧</h1>\n<ol>\n<li><strong>多个感官并用</strong>\n记忆时调用一切感官。没人的话可以大声阅读，有人的话可以默念，轻微摇晃手指等，有助于保持专注。</li>\n</ol>\n',headersStr:null,content:"# 提高记忆的技巧\n\n 1. 多个感官并用 记忆时调用一切感官。没人的话可以大声阅读，有人的话可以默念，轻微摇晃手指等，有助于保持专注。\n\n 2. 重复记忆 每天留出半个到一个小时，梳理总结今天所学的内容。每一章复习完成后做系统的知识整理。\n\n 3. 建立关联 把你所学的新知识与已有的认知建立联系，对于记忆事半功倍。\n\n 4. 场景记忆 把知识具象化为一个场景，想象自己在何时何地能用这些知识，与自身发生联系。\n\n 5. 提出问题 每学习一个知识点，试着提问，然后给出答案。用了就记住了。",normalizedContent:"# 提高记忆的技巧\n\n 1. 多个感官并用 记忆时调用一切感官。没人的话可以大声阅读，有人的话可以默念，轻微摇晃手指等，有助于保持专注。\n\n 2. 重复记忆 每天留出半个到一个小时，梳理总结今天所学的内容。每一章复习完成后做系统的知识整理。\n\n 3. 建立关联 把你所学的新知识与已有的认知建立联系，对于记忆事半功倍。\n\n 4. 场景记忆 把知识具象化为一个场景，想象自己在何时何地能用这些知识，与自身发生联系。\n\n 5. 提出问题 每学习一个知识点，试着提问，然后给出答案。用了就记住了。",charsets:{cjk:!0},lastUpdated:"2022/12/03, 17:31:39",lastUpdatedTimestamp:1670059899e3},{title:"Extravagant Spending on College Campus",frontmatter:{title:"Extravagant Spending on College Campus",date:"2022-10-24T11:05:13.000Z",permalink:"/pages/c4b107/",tags:["English","作文儿"]},regularPath:"/06.%E8%AE%B0%E5%BD%95/10.Others/52.Extravagant%20Spending%20on%20College%20Campus.html",relativePath:"06.记录/10.Others/52.Extravagant Spending on College Campus.md",key:"v-602f6a3e",path:"/pages/c4b107/",headers:[{level:2,title:"Extravagant Spending on College Campus",slug:"extravagant-spending-on-college-campus",normalizedTitle:"extravagant spending on college campus",charIndex:2}],headersStr:"Extravagant Spending on College Campus",content:"# Extravagant Spending on College Campus\n\nCollege students are living the dream. They are in an environment that allows them to spend money freely and they are not held accountable for their spending. This is a result of the weak economy and the fact that college students have access to credit cards.\n\nAnother reason is the culture on campus. Many colleges have a culture of consumption where students are encouraged to spend money on things like alcohol, food, and entertainment. This attitude can lead students to spend more than they should.\n\nIt is important for college students to understand the importance of spending frugally and saving money. This will help them to be prepared for the realities of life after college.\n\nCollege students need to spend wisely and save as much as possible. This will allow them to be prepared for the realities of life after college.",normalizedContent:"# extravagant spending on college campus\n\ncollege students are living the dream. they are in an environment that allows them to spend money freely and they are not held accountable for their spending. this is a result of the weak economy and the fact that college students have access to credit cards.\n\nanother reason is the culture on campus. many colleges have a culture of consumption where students are encouraged to spend money on things like alcohol, food, and entertainment. this attitude can lead students to spend more than they should.\n\nit is important for college students to understand the importance of spending frugally and saving money. this will help them to be prepared for the realities of life after college.\n\ncollege students need to spend wisely and save as much as possible. this will allow them to be prepared for the realities of life after college.",charsets:{},lastUpdated:"2022/12/03, 17:31:39",lastUpdatedTimestamp:1670059899e3},{title:"笔记方法",frontmatter:{title:"笔记方法",date:"2020-07-16T11:00:55.000Z",permalink:"/pages/e60c81/",categories:["更多","学习"],tags:["笔记方法"],author:{name:"xugaoyi",link:"https://github.com/xugaoyi"}},regularPath:"/07.%E6%9B%B4%E5%A4%9A/01.%E5%AD%A6%E4%B9%A0/01.%E7%AC%94%E8%AE%B0%E6%96%B9%E6%B3%95.html",relativePath:"07.更多/01.学习/01.笔记方法.md",key:"v-069726b1",path:"/pages/e60c81/",headers:[{level:2,title:"康奈尔笔记法",slug:"康奈尔笔记法",normalizedTitle:"康奈尔笔记法",charIndex:2},{level:2,title:"思维导图法",slug:"思维导图法",normalizedTitle:"思维导图法",charIndex:15},{level:2,title:"金三角笔记法",slug:"金三角笔记法",normalizedTitle:"金三角笔记法",charIndex:27},{level:2,title:"曼陀罗九宫格笔记法",slug:"曼陀罗九宫格笔记法",normalizedTitle:"曼陀罗九宫格笔记法",charIndex:40},{level:2,title:"记号记录法",slug:"记号记录法",normalizedTitle:"记号记录法",charIndex:56},{level:2,title:"六色笔记法",slug:"六色笔记法",normalizedTitle:"六色笔记法",charIndex:68},{level:2,title:"加工笔记法",slug:"加工笔记法",normalizedTitle:"加工笔记法",charIndex:80},{level:2,title:"整理笔记要点1-科学标记重点",slug:"整理笔记要点1-科学标记重点",normalizedTitle:"整理笔记要点1-科学标记重点",charIndex:92},{level:2,title:"整理笔记要点2-修改不涂改",slug:"整理笔记要点2-修改不涂改",normalizedTitle:"整理笔记要点2-修改不涂改",charIndex:113}],headersStr:"康奈尔笔记法 思维导图法 金三角笔记法 曼陀罗九宫格笔记法 记号记录法 六色笔记法 加工笔记法 整理笔记要点1-科学标记重点 整理笔记要点2-修改不涂改",content:"# 康奈尔笔记法\n\n\n\n\n# 思维导图法\n\n\n\n\n# 金三角笔记法\n\n\n\n\n# 曼陀罗九宫格笔记法\n\n\n\n\n# 记号记录法\n\n\n\n\n# 六色笔记法\n\n\n\n\n# 加工笔记法\n\n\n\n\n# 整理笔记要点1-科学标记重点\n\n\n\n\n# 整理笔记要点2-修改不涂改\n\n",normalizedContent:"# 康奈尔笔记法\n\n\n\n\n# 思维导图法\n\n\n\n\n# 金三角笔记法\n\n\n\n\n# 曼陀罗九宫格笔记法\n\n\n\n\n# 记号记录法\n\n\n\n\n# 六色笔记法\n\n\n\n\n# 加工笔记法\n\n\n\n\n# 整理笔记要点1-科学标记重点\n\n\n\n\n# 整理笔记要点2-修改不涂改\n\n",charsets:{cjk:!0},lastUpdated:"2022/12/03, 17:31:39",lastUpdatedTimestamp:1670059899e3},{title:"提高学习效率的策略",frontmatter:{title:"提高学习效率的策略",date:"2020-01-04T11:54:14.000Z",permalink:"/pages/a8692ab3bdcb4588",categories:["更多","学习"],tags:[null],author:{name:"xugaoyi",link:"https://github.com/xugaoyi"}},regularPath:"/07.%E6%9B%B4%E5%A4%9A/01.%E5%AD%A6%E4%B9%A0/02.%E6%8F%90%E9%AB%98%E5%AD%A6%E4%B9%A0%E6%95%88%E7%8E%87%E7%9A%84%E7%AD%96%E7%95%A5.html",relativePath:"07.更多/01.学习/02.提高学习效率的策略.md",key:"v-9150e006",path:"/pages/a8692ab3bdcb4588/",headers:[{level:3,title:"检索式学习",slug:"检索式学习",normalizedTitle:"检索式学习",charIndex:222},{level:3,title:"频繁的集中练习只会产生短期记忆",slug:"频繁的集中练习只会产生短期记忆",normalizedTitle:"频繁的集中练习只会产生短期记忆",charIndex:634},{level:3,title:"间隔练习使知识存储更牢固",slug:"间隔练习使知识存储更牢固",normalizedTitle:"间隔练习使知识存储更牢固",charIndex:958},{level:3,title:"穿插练习有助于长期记忆",slug:"穿插练习有助于长期记忆",normalizedTitle:"穿插练习有助于长期记忆",charIndex:1346},{level:3,title:"多样化练习促进知识的活学活用",slug:"多样化练习促进知识的活学活用",normalizedTitle:"多样化练习促进知识的活学活用",charIndex:1728},{level:3,title:"小总结",slug:"小总结",normalizedTitle:"小总结",charIndex:1918},{level:3,title:"知识的“滚雪球”效应",slug:"知识的-滚雪球-效应",normalizedTitle:"知识的“滚雪球”效应",charIndex:2183}],excerpt:'<h1 id="提高学习效率的策略"><a class="header-anchor" href="#提高学习效率的策略">#</a> 提高学习效率的策略</h1>\n<p>推荐一本关于学习方法的书《认知天性》，里面有讲到有一些简单实用的学习策略，能让大家学的更好、记得更牢，而且这些策略人人可用，时时可用。这些方法包括各种形式的<strong>检索练习</strong>——例如小的测试和自测，<strong>间隔练习</strong>、<strong>穿插</strong>不同但相关科目或技能的练习（<strong>多样化练习</strong>），在别人教给你解决方案前自己先试着解决问题，从不同类型问题中提取基本原理和规则。由于学习是反复的过程，需要复习早先学过的东西，持续更新已知，并把它们和新知识联系起来。</p>\n',headersStr:"检索式学习 频繁的集中练习只会产生短期记忆 间隔练习使知识存储更牢固 穿插练习有助于长期记忆 多样化练习促进知识的活学活用 小总结 知识的“滚雪球”效应",content:"# 提高学习效率的策略\n\n推荐一本关于学习方法的书《认知天性》，里面有讲到有一些简单实用的学习策略，能让大家学的更好、记得更牢，而且这些策略人人可用，时时可用。这些方法包括各种形式的检索练习——例如小的测试和自测，间隔练习、穿插不同但相关科目或技能的练习（多样化练习），在别人教给你解决方案前自己先试着解决问题，从不同类型问题中提取基本原理和规则。由于学习是反复的过程，需要复习早先学过的东西，持续更新已知，并把它们和新知识联系起来。\n\n\n# 检索式学习\n\n练习从记忆中检索新知识或新技能是有效的学习工具，也是保持长久记忆的有力武器。但凡需要大脑记忆、需要在将来回忆的东西，都可以用到它——对于事实、复杂的概念、解决问题的技巧、运动技能来说都适用。\n\n那么到底什么是检索式学习呢？说说我理解的检索式学习：在脑中检索知识，比如课后的一个小测试、对某个知识点用笔默写出来，甚至去参加面试，等等，都可以理解为检索式学习。\n\n努力检索有助于人们获得更好的学习效果，产生更持久的记忆。我们很容易相信，学东西时越轻松，学习效果越好，但研究表明，事实恰恰相反。只有当头脑被迫工作时，才会将所学的东西记得更牢靠。在检索时所付出的努力越大——只要真正做到这一点检索就会更好地强化你的所学。在第一次检测后，推迟后续检索练习要比立即练习更能强化记忆，因为延迟后再检索需要会费更大力气。\n\n反复检索不仅能让记忆更持久，还能让知识在更多变的环境中更容易被检索，而且可以解决更多的问题。\n\n\n# 频繁的集中练习只会产生短期记忆\n\n人们顽固地相信，自己把心思放在一件事上，拼命重复就能学得更好，认为这些观点经受住了时间的考验，而且“练习，练习，再练习”的明显收效再次证明了这种方法的好处。但是，科学家们把习得技能阶段的这种成绩称为“暂时的优势”，并把它同“潜在的习惯优势”区分开来。形成习惯优势有种种技巧，例如有间隔的练习、有穿插内容的练习，以及多样化练习，这些技巧恰恰会放缓有明显成果的学习进程，它们不会在练习中提高我们的表现。我们从表面上看不到成绩提高，也就没有付出努力的动力（大多数人的学习心理就是这样，在看不到成果的时候容易失去动力）。填鸭式练习是集中练习的一种形式，它一直被比作贪食症——吃得不少，但没过多久基本上都吐出来了。\n\n\n# 间隔练习使知识存储更牢固\n\n把学习与练习间隔开来分期进行，让两者之间隔上一定时间，这样做就能让学习成果更加显著、记忆更加牢固，能有效地形成习惯优势。间隔多长时间才够？答案很简单：从最低限度上说，间隔的时间足够出现一点儿遗忘就对了。练习环节中间出现一点儿遗忘是好事，只要它能让人更加努力地练习就行。话说回来，你肯定不愿意忘掉太多东西，以至于检索最终变成了对资料的重新学习。间隔一段时间再练习能巩固记忆。睡眠似乎在巩固记忆的工作中扮演了重要角色，所以在两次练习间至少间隔一天应该是不错的做法。 要当心熟悉这个陷阱：你感觉自己明白了某样东西，觉得不再需要练习了。如果想走捷径，这种熟悉会让你在自测时受伤。道格拉斯·拉尔森说：“你必须自觉地说，好吧，我要强迫自己把这些全想起来，要是我想不起来，那我是忘掉了什么，我怎，么会不知道那个呢?’如果是教师出题测验，那就一下子变成你\n\n\n# 穿插练习有助于长期记忆\n\n穿插练习两样或更多的内容同样也提供了一种间隔。穿插内容练习有助于发展人们辨识不同问题的能力，也是在培养人们从不断增加的解决方案中寻找合适工具的能力。进行穿插内容练习，不能是完成一个科目的全部练习再跳到下一个科目。你需要在每个科目的练习完成前就跳到下一个科目。我们的一个朋友这样描述自己的经历，“我去上了一堂冰球课，学习滑冰、控球、射门。滑冰练习还没进行多长时间，自己刚刚有点儿上手的感觉，教练就转到控球练习上了，这让我感到非常沮丧。灰心地到家后，我说，‘为什么教练不让我们一次把技能练好呢？”其实他是遇上了少有的好教练。这位教练懂得分散精力练习不同技能要比下力气一次掌握一件事更有效果。球员感到沮丧是因为并没有在短时间内看到成果，但到下一周，无论是滑冰、控球，还是其他内容，他都会获得全面进步，效果会好于每次只专心练习一项技能。\n\n\n# 多样化练习促进知识的活学活用\n\n与穿插内容练习一样，多样化练习有助于学习者树立更开阔的心理模式。这是一种能力，掌握它的人可以评估不断变化的条件，并调整应对方式进行适应。可以说，穿插内容练习与多样化练习有助于学习者超越暂时性记忆，步入更高层次的概念性学习，并把它们应用到实际情景中，从而获得更全面、更深刻、更持久的学习效果。这些学习成果在运动技能中就表现为潜在的习惯优势。\n\n\n# 小总结\n\n有间隔、有内容穿插出现，以及内容多样化，其实就是我们生活的本来面貌。程序员每开发一个项目，都是一次测验，也是一次检索练习的锻炼。每次常规的拦车检查对于警察来说都是一次测验，而且每次检查都不一样，这会加强警察的外显记忆与内隐记忆。只要他上心，今后的工作就会更有效率。人们常说的一句话是“从经验中学习”。有些人似乎从来不学习，学与不学的一个区别可能就在于，人们是否培养了反思（总结）的习惯。反思（总结）是检索练习的一种形式（发生了什么？我是怎么做的？怎样才能有用？），而且辅以细化加强（下次我要采取别的什么方法？）\n\n\n# 知识的“滚雪球”效应\n\n学习的过程至少可以分成三步：最开始是对短期工作记忆中信息的编码。这时信息还没有被巩固成长期记忆中坚实的知识表征。巩固会辨识并稳定记忆线索，赋予其含义，把它们与过去的经验以及长期记忆中已经存储下来的其他知识联系起来。检索会更新所学的东西，并让你做到学以致用。\n\n学习总是建立在已知基础之上。我们是通过与已知建立联系这种方式来解读事件和记忆事件的。\n\n长期记忆的容量基本上是无限的。你知道得越多，就越有可能为新知识建立联系。\n\n由于长期记忆的容量颇大，所以关键是要有一种能力，让你在需要的时候锁定并回忆已知。回忆所学知识的难易程度取决于对信息的重复使用（保持检索路径不会被忘却），也取决于你是否建立起了强大的检索线索，因为它能重新激活你的记忆。\n\n阶段性地检索所学，有助于强化记忆间的联系，也能强化回忆知识的线索，同时还能弱化连通冲突记忆的路径。检索练习若是没什么难度，那就不能强化所学的知识；练习难度越大，收效才越大。\n\n当你从短期记忆中回忆所学时，例如快速频繁地进行练习，是不需要花什么心思的，也不会有长期性的收效。但当你过一段时间再回忆时，当你对所学的东西有些遗忘时，你就不得不努力重建这一切。这种耗费心力的检索既能强化记忆，又能让所学再次具有可塑性，引发对所学知识的再巩固。再巩固可以用新信息更新你的记忆，同时可以将它们与最近学到的东西联系起来。\n\n重复进行费力的回忆或是练习，有助于把所学的知识整合成心智模型。在心智模型中，一套彼此相关的概念或一系列运动技能被融会贯通，形成一个有意义的整体。它能适应随后的各种环境，并发挥作用。开车时的感知和操控就是一个例子。在面对弧线球时知道如何打出全垒打也是同一个道理。\n\n练习的条件如果发生了变化，或是在检索中穿插安排了对其他资料的练习，我们就能强化自己的辨析与归纳能力，凭借全面发展，我们还能把所学的知识用在以后的新环境中。穿插与多样化建立了新的联系，拓展并进一步深化了记忆中的知识，同时增加了检索线索的数量。、\n\n试着自己想出答案，而不是坐等别人给你答案，或是在拿到解决方案前自行尝试解决一个问题，会产生更好的学习效果，也能让你把正确的答案或解决方案记得更持久。即便有时你会犯错，只要有纠正性反馈就没问题。\n\n——以上内容摘自《认知天性》，结合本人的个人理解，更多内容请查看该书籍。\n\n",normalizedContent:"# 提高学习效率的策略\n\n推荐一本关于学习方法的书《认知天性》，里面有讲到有一些简单实用的学习策略，能让大家学的更好、记得更牢，而且这些策略人人可用，时时可用。这些方法包括各种形式的检索练习——例如小的测试和自测，间隔练习、穿插不同但相关科目或技能的练习（多样化练习），在别人教给你解决方案前自己先试着解决问题，从不同类型问题中提取基本原理和规则。由于学习是反复的过程，需要复习早先学过的东西，持续更新已知，并把它们和新知识联系起来。\n\n\n# 检索式学习\n\n练习从记忆中检索新知识或新技能是有效的学习工具，也是保持长久记忆的有力武器。但凡需要大脑记忆、需要在将来回忆的东西，都可以用到它——对于事实、复杂的概念、解决问题的技巧、运动技能来说都适用。\n\n那么到底什么是检索式学习呢？说说我理解的检索式学习：在脑中检索知识，比如课后的一个小测试、对某个知识点用笔默写出来，甚至去参加面试，等等，都可以理解为检索式学习。\n\n努力检索有助于人们获得更好的学习效果，产生更持久的记忆。我们很容易相信，学东西时越轻松，学习效果越好，但研究表明，事实恰恰相反。只有当头脑被迫工作时，才会将所学的东西记得更牢靠。在检索时所付出的努力越大——只要真正做到这一点检索就会更好地强化你的所学。在第一次检测后，推迟后续检索练习要比立即练习更能强化记忆，因为延迟后再检索需要会费更大力气。\n\n反复检索不仅能让记忆更持久，还能让知识在更多变的环境中更容易被检索，而且可以解决更多的问题。\n\n\n# 频繁的集中练习只会产生短期记忆\n\n人们顽固地相信，自己把心思放在一件事上，拼命重复就能学得更好，认为这些观点经受住了时间的考验，而且“练习，练习，再练习”的明显收效再次证明了这种方法的好处。但是，科学家们把习得技能阶段的这种成绩称为“暂时的优势”，并把它同“潜在的习惯优势”区分开来。形成习惯优势有种种技巧，例如有间隔的练习、有穿插内容的练习，以及多样化练习，这些技巧恰恰会放缓有明显成果的学习进程，它们不会在练习中提高我们的表现。我们从表面上看不到成绩提高，也就没有付出努力的动力（大多数人的学习心理就是这样，在看不到成果的时候容易失去动力）。填鸭式练习是集中练习的一种形式，它一直被比作贪食症——吃得不少，但没过多久基本上都吐出来了。\n\n\n# 间隔练习使知识存储更牢固\n\n把学习与练习间隔开来分期进行，让两者之间隔上一定时间，这样做就能让学习成果更加显著、记忆更加牢固，能有效地形成习惯优势。间隔多长时间才够？答案很简单：从最低限度上说，间隔的时间足够出现一点儿遗忘就对了。练习环节中间出现一点儿遗忘是好事，只要它能让人更加努力地练习就行。话说回来，你肯定不愿意忘掉太多东西，以至于检索最终变成了对资料的重新学习。间隔一段时间再练习能巩固记忆。睡眠似乎在巩固记忆的工作中扮演了重要角色，所以在两次练习间至少间隔一天应该是不错的做法。 要当心熟悉这个陷阱：你感觉自己明白了某样东西，觉得不再需要练习了。如果想走捷径，这种熟悉会让你在自测时受伤。道格拉斯·拉尔森说：“你必须自觉地说，好吧，我要强迫自己把这些全想起来，要是我想不起来，那我是忘掉了什么，我怎，么会不知道那个呢?’如果是教师出题测验，那就一下子变成你\n\n\n# 穿插练习有助于长期记忆\n\n穿插练习两样或更多的内容同样也提供了一种间隔。穿插内容练习有助于发展人们辨识不同问题的能力，也是在培养人们从不断增加的解决方案中寻找合适工具的能力。进行穿插内容练习，不能是完成一个科目的全部练习再跳到下一个科目。你需要在每个科目的练习完成前就跳到下一个科目。我们的一个朋友这样描述自己的经历，“我去上了一堂冰球课，学习滑冰、控球、射门。滑冰练习还没进行多长时间，自己刚刚有点儿上手的感觉，教练就转到控球练习上了，这让我感到非常沮丧。灰心地到家后，我说，‘为什么教练不让我们一次把技能练好呢？”其实他是遇上了少有的好教练。这位教练懂得分散精力练习不同技能要比下力气一次掌握一件事更有效果。球员感到沮丧是因为并没有在短时间内看到成果，但到下一周，无论是滑冰、控球，还是其他内容，他都会获得全面进步，效果会好于每次只专心练习一项技能。\n\n\n# 多样化练习促进知识的活学活用\n\n与穿插内容练习一样，多样化练习有助于学习者树立更开阔的心理模式。这是一种能力，掌握它的人可以评估不断变化的条件，并调整应对方式进行适应。可以说，穿插内容练习与多样化练习有助于学习者超越暂时性记忆，步入更高层次的概念性学习，并把它们应用到实际情景中，从而获得更全面、更深刻、更持久的学习效果。这些学习成果在运动技能中就表现为潜在的习惯优势。\n\n\n# 小总结\n\n有间隔、有内容穿插出现，以及内容多样化，其实就是我们生活的本来面貌。程序员每开发一个项目，都是一次测验，也是一次检索练习的锻炼。每次常规的拦车检查对于警察来说都是一次测验，而且每次检查都不一样，这会加强警察的外显记忆与内隐记忆。只要他上心，今后的工作就会更有效率。人们常说的一句话是“从经验中学习”。有些人似乎从来不学习，学与不学的一个区别可能就在于，人们是否培养了反思（总结）的习惯。反思（总结）是检索练习的一种形式（发生了什么？我是怎么做的？怎样才能有用？），而且辅以细化加强（下次我要采取别的什么方法？）\n\n\n# 知识的“滚雪球”效应\n\n学习的过程至少可以分成三步：最开始是对短期工作记忆中信息的编码。这时信息还没有被巩固成长期记忆中坚实的知识表征。巩固会辨识并稳定记忆线索，赋予其含义，把它们与过去的经验以及长期记忆中已经存储下来的其他知识联系起来。检索会更新所学的东西，并让你做到学以致用。\n\n学习总是建立在已知基础之上。我们是通过与已知建立联系这种方式来解读事件和记忆事件的。\n\n长期记忆的容量基本上是无限的。你知道得越多，就越有可能为新知识建立联系。\n\n由于长期记忆的容量颇大，所以关键是要有一种能力，让你在需要的时候锁定并回忆已知。回忆所学知识的难易程度取决于对信息的重复使用（保持检索路径不会被忘却），也取决于你是否建立起了强大的检索线索，因为它能重新激活你的记忆。\n\n阶段性地检索所学，有助于强化记忆间的联系，也能强化回忆知识的线索，同时还能弱化连通冲突记忆的路径。检索练习若是没什么难度，那就不能强化所学的知识；练习难度越大，收效才越大。\n\n当你从短期记忆中回忆所学时，例如快速频繁地进行练习，是不需要花什么心思的，也不会有长期性的收效。但当你过一段时间再回忆时，当你对所学的东西有些遗忘时，你就不得不努力重建这一切。这种耗费心力的检索既能强化记忆，又能让所学再次具有可塑性，引发对所学知识的再巩固。再巩固可以用新信息更新你的记忆，同时可以将它们与最近学到的东西联系起来。\n\n重复进行费力的回忆或是练习，有助于把所学的知识整合成心智模型。在心智模型中，一套彼此相关的概念或一系列运动技能被融会贯通，形成一个有意义的整体。它能适应随后的各种环境，并发挥作用。开车时的感知和操控就是一个例子。在面对弧线球时知道如何打出全垒打也是同一个道理。\n\n练习的条件如果发生了变化，或是在检索中穿插安排了对其他资料的练习，我们就能强化自己的辨析与归纳能力，凭借全面发展，我们还能把所学的知识用在以后的新环境中。穿插与多样化建立了新的联系，拓展并进一步深化了记忆中的知识，同时增加了检索线索的数量。、\n\n试着自己想出答案，而不是坐等别人给你答案，或是在拿到解决方案前自行尝试解决一个问题，会产生更好的学习效果，也能让你把正确的答案或解决方案记得更持久。即便有时你会犯错，只要有纠正性反馈就没问题。\n\n——以上内容摘自《认知天性》，结合本人的个人理解，更多内容请查看该书籍。\n\n",charsets:{cjk:!0},lastUpdated:"2022/12/03, 17:31:39",lastUpdatedTimestamp:1670059899e3},{title:"自律小建议",frontmatter:{title:"自律小建议",date:"2020-01-03T14:35:18.000Z",permalink:"/pages/c3f302a03c8daf79",categories:["更多","学习"],tags:[null],author:{name:"xugaoyi",link:"https://github.com/xugaoyi"}},regularPath:"/07.%E6%9B%B4%E5%A4%9A/01.%E5%AD%A6%E4%B9%A0/04.%E8%87%AA%E5%BE%8B%E5%B0%8F%E5%BB%BA%E8%AE%AE.html",relativePath:"07.更多/01.学习/04.自律小建议.md",key:"v-050b5070",path:"/pages/c3f302a03c8daf79/",excerpt:'<h1 id="自律小建议"><a class="header-anchor" href="#自律小建议">#</a> 自律小建议</h1>\n<ul>\n<li><strong>培养专注</strong>\n<ul>\n<li>练习冥想、瑜伽等</li>\n</ul>\n</li>\n<li><strong>排除外界干扰</strong>\n<ul>\n<li>手机调到勿扰，在图书馆学习等</li>\n</ul>\n</li>\n</ul>\n',headersStr:null,content:"# 自律小建议\n\n * 培养专注\n   * 练习冥想、瑜伽等\n * 排除外界干扰\n   * 手机调到勿扰，在图书馆学习等\n\n * 规定学习时间\n   \n   * 番茄时间管理——使用番茄时间管理法，选择一个待完成的任务，将番茄时间设为25分钟，专注工作，中途不允许做任何与该任务无关的事，直到番茄时钟响起，然后短暂休息一下（5分钟就行），每4个番茄时段多休息一会儿。\n     \n     > 人的大脑在记忆一个东西的时候，有短期记忆和长期记忆之分。大脑编码内容进行长期记忆，需要一个过程的，可能是几个小时或几天，集中练习就给不了这个过程，所以集中练习带来的效果是短期记忆，而进行间隔练习，大脑则有时间进行充分的编码，学习到的知识就会储存为长期记忆。\n     > \n     > 推荐几种间歇锻炼方法：体能训练、课间操、眼保操、拉伸训练...\n     > \n     > 有好的身体可以使大脑更清醒哟~\n\n * 限制娱乐时间\n   \n   * 减少使用娱乐app的时间（苹果手机可设定屏幕使用时间）\n   \n   * 推荐观看>B站某位UP主的视频《每天只看半小时手机，坚持一周后我有哪些变化？》\n\n * 戒网瘾（特别是游戏）\n   \n   * 除了手机、游戏以外，周围有很多美好的事物值得我们去关注。\n\n * 设定目标\n   \n   * 想要更好的薪水和职位？多花点时间在学习上吧~\n   * 潜意识暗示自己，建立信心，让自己变得更优秀，然后去挑战更高的目标\n\n * 优秀的人仍在不断努力\n   \n   * 且看大神 阮一峰github 提交记录",normalizedContent:"# 自律小建议\n\n * 培养专注\n   * 练习冥想、瑜伽等\n * 排除外界干扰\n   * 手机调到勿扰，在图书馆学习等\n\n * 规定学习时间\n   \n   * 番茄时间管理——使用番茄时间管理法，选择一个待完成的任务，将番茄时间设为25分钟，专注工作，中途不允许做任何与该任务无关的事，直到番茄时钟响起，然后短暂休息一下（5分钟就行），每4个番茄时段多休息一会儿。\n     \n     > 人的大脑在记忆一个东西的时候，有短期记忆和长期记忆之分。大脑编码内容进行长期记忆，需要一个过程的，可能是几个小时或几天，集中练习就给不了这个过程，所以集中练习带来的效果是短期记忆，而进行间隔练习，大脑则有时间进行充分的编码，学习到的知识就会储存为长期记忆。\n     > \n     > 推荐几种间歇锻炼方法：体能训练、课间操、眼保操、拉伸训练...\n     > \n     > 有好的身体可以使大脑更清醒哟~\n\n * 限制娱乐时间\n   \n   * 减少使用娱乐app的时间（苹果手机可设定屏幕使用时间）\n   \n   * 推荐观看>b站某位up主的视频《每天只看半小时手机，坚持一周后我有哪些变化？》\n\n * 戒网瘾（特别是游戏）\n   \n   * 除了手机、游戏以外，周围有很多美好的事物值得我们去关注。\n\n * 设定目标\n   \n   * 想要更好的薪水和职位？多花点时间在学习上吧~\n   * 潜意识暗示自己，建立信心，让自己变得更优秀，然后去挑战更高的目标\n\n * 优秀的人仍在不断努力\n   \n   * 且看大神 阮一峰github 提交记录",charsets:{cjk:!0},lastUpdated:"2022/12/03, 17:31:39",lastUpdatedTimestamp:1670059899e3},{title:"处理问题的思路",frontmatter:{title:"处理问题的思路",date:"2020-01-03T14:36:02.000Z",permalink:"/pages/9ba2b8fb13de1957",categories:["更多","学习"],tags:[null],author:{name:"xugaoyi",link:"https://github.com/xugaoyi"}},regularPath:"/07.%E6%9B%B4%E5%A4%9A/01.%E5%AD%A6%E4%B9%A0/05.%E5%A4%84%E7%90%86%E9%97%AE%E9%A2%98%E7%9A%84%E6%80%9D%E8%B7%AF.html",relativePath:"07.更多/01.学习/05.处理问题的思路.md",key:"v-c68bce4c",path:"/pages/9ba2b8fb13de1957/",headers:[{level:2,title:"工作中遇到问题？",slug:"工作中遇到问题",normalizedTitle:"工作中遇到问题？",charIndex:14},{level:2,title:"这个问题我该怎么解决呢？",slug:"这个问题我该怎么解决呢",normalizedTitle:"这个问题我该怎么解决呢？",charIndex:86}],headersStr:"工作中遇到问题？ 这个问题我该怎么解决呢？",content:"# 处理问题的思路\n\n\n# 工作中遇到问题？\n\n遇到问题卡住了，可以先休息一会儿，调整一下状态，喝杯水走走放松放松，然后想想有没有遗漏的地方，或者其他的解决方案呢\n\n\n# 这个问题我该怎么解决呢？\n\n 1. 学会搜索\n    \n    * 关键词\n    \n    * 多关键词\n    \n    * 加入时间\n    \n    * 加入特定的社区\n    \n    * site用法\n\n 2. 高阶搜索方法\n    \n    * 英文搜索（必应搜索、google搜索，很多英文文档或文章相对来说层数结构很清晰）\n    * 视频站搜索（http://www.youtube.com/、http://egghead.io）\n    * 百度盘搜索\n    * 指定文件后缀\n\n 3. 寻求帮助\n    \n    * 找同学\n    \n    * 找同事\n    \n    * 找朋友\n    \n    * 找社区\n\n 4. 开拓思路——发散性解决问题\n    \n    * 去问问原作者？\n    * 去发个邮件/twitter/facebook?\n    * 去找Boss要资源？\n    * 加入公共社区参与讨论?\n    * ...",normalizedContent:"# 处理问题的思路\n\n\n# 工作中遇到问题？\n\n遇到问题卡住了，可以先休息一会儿，调整一下状态，喝杯水走走放松放松，然后想想有没有遗漏的地方，或者其他的解决方案呢\n\n\n# 这个问题我该怎么解决呢？\n\n 1. 学会搜索\n    \n    * 关键词\n    \n    * 多关键词\n    \n    * 加入时间\n    \n    * 加入特定的社区\n    \n    * site用法\n\n 2. 高阶搜索方法\n    \n    * 英文搜索（必应搜索、google搜索，很多英文文档或文章相对来说层数结构很清晰）\n    * 视频站搜索（http://www.youtube.com/、http://egghead.io）\n    * 百度盘搜索\n    * 指定文件后缀\n\n 3. 寻求帮助\n    \n    * 找同学\n    \n    * 找同事\n    \n    * 找朋友\n    \n    * 找社区\n\n 4. 开拓思路——发散性解决问题\n    \n    * 去问问原作者？\n    * 去发个邮件/twitter/facebook?\n    * 去找boss要资源？\n    * 加入公共社区参与讨论?\n    * ...",charsets:{cjk:!0},lastUpdated:"2022/12/03, 17:31:39",lastUpdatedTimestamp:1670059899e3},{title:"搜索引擎使用技巧",frontmatter:{title:"搜索引擎使用技巧",date:"2020-05-24T11:44:19.000Z",permalink:"/pages/ce818a",categories:["更多","学习"],tags:["搜索技巧"],author:{name:"xugaoyi",link:"https://github.com/xugaoyi"}},regularPath:"/07.%E6%9B%B4%E5%A4%9A/01.%E5%AD%A6%E4%B9%A0/10.%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7.html",relativePath:"07.更多/01.学习/10.搜索引擎使用技巧.md",key:"v-09e49812",path:"/pages/ce818a/",headers:[{level:3,title:"技巧1：排除干扰项",slug:"技巧1-排除干扰项",normalizedTitle:"技巧1：排除干扰项",charIndex:117},{level:3,title:"技巧2：精确搜索",slug:"技巧2-精确搜索",normalizedTitle:"技巧2：精确搜索",charIndex:263},{level:3,title:"技巧3：指定网站内搜索",slug:"技巧3-指定网站内搜索",normalizedTitle:"技巧3：指定网站内搜索",charIndex:354},{level:3,title:"技巧4：指定文件格式",slug:"技巧4-指定文件格式",normalizedTitle:"技巧4：指定文件格式",charIndex:458},{level:3,title:"技巧5：指定在标题搜索",slug:"技巧5-指定在标题搜索",normalizedTitle:"技巧5：指定在标题搜索",charIndex:544},{level:3,title:"技巧6：指定在内容中搜索",slug:"技巧6-指定在内容中搜索",normalizedTitle:"技巧6：指定在内容中搜索",charIndex:595},{level:3,title:"技巧7：多种搜索技巧叠加使用",slug:"技巧7-多种搜索技巧叠加使用",normalizedTitle:"技巧7：多种搜索技巧叠加使用",charIndex:658},{level:3,title:"注意事项",slug:"注意事项",normalizedTitle:"注意事项",charIndex:739}],headersStr:"技巧1：排除干扰项 技巧2：精确搜索 技巧3：指定网站内搜索 技巧4：指定文件格式 技巧5：指定在标题搜索 技巧6：指定在内容中搜索 技巧7：多种搜索技巧叠加使用 注意事项",content:'搜索引擎相信大家经常在使用，但是有时候想搜某个信息时却搜出来一大堆不相关的（百度：你们都在看我干什么？）。下面我们来介绍几种搜索技巧，可以提升搜索效率，助你快速查资料，妈妈再也不担心我的学习了（\'妈~我真的是在找学习资料\'）\n\n\n# 技巧1：排除干扰项\n\n方式：关键词1+空格+减号+关键词2，即 关键词1 -关键词2\n\n功能：排除一些不想要的关键词\n\n示例：\n\n锤子 -锤子手机\n\n\n1\n\n\n示例中将在搜索结果排除与锤子手机相关的，只显示锤子本来的样子。\n\n> 经过百度搜索的测试，有的关键词能排除掉，有的并不好使\n\n\n# 技巧2：精确搜索\n\n方式：给关键词加双引号，"关键词"\n\n功能：只搜索引号里的字，少一个字或者把字拆开都不行\n\n示例：\n\n"达拉不崩吧"\n\n\n1\n\n\n> 注意是英文的双引号\n\n\n# 技巧3：指定网站内搜索\n\n方式：site:域名 关键词\n\n功能：只搜索指定域名的内容\n\n示例：\n\nsite:zhihu.com 前端\n\n\n1\n\n\n有一些站内自带的搜索并不好用，可以尝试这个搜索技巧。\n\n\n# 技巧4：指定文件格式\n\n方式：filetype:文件格式 关键词\n\n示例：\n\nfiletype:avi 你懂的\n\n\n1\n\n\n常见文件格式有doc、pdf、ppt等\n\n\n# 技巧5：指定在标题搜索\n\n方式：intitle:关键词\n\n功能：搜索的关键词要出现在标题当中\n\n\n# 技巧6：指定在内容中搜索\n\n方式：intext:关键词、allintext:关键词1 关键词2、inurl:关键词2\n\n\n# 技巧7：多种搜索技巧叠加使用\n\n示例：\n\nsite:zhihu.com 前端 intitle:js\n\n\n1\n\n\n多种技巧和关键词叠加使用，中间空格隔开。\n\n\n# 注意事项\n\n以上搜索技巧使用的符号均是英文符号。',normalizedContent:'搜索引擎相信大家经常在使用，但是有时候想搜某个信息时却搜出来一大堆不相关的（百度：你们都在看我干什么？）。下面我们来介绍几种搜索技巧，可以提升搜索效率，助你快速查资料，妈妈再也不担心我的学习了（\'妈~我真的是在找学习资料\'）\n\n\n# 技巧1：排除干扰项\n\n方式：关键词1+空格+减号+关键词2，即 关键词1 -关键词2\n\n功能：排除一些不想要的关键词\n\n示例：\n\n锤子 -锤子手机\n\n\n1\n\n\n示例中将在搜索结果排除与锤子手机相关的，只显示锤子本来的样子。\n\n> 经过百度搜索的测试，有的关键词能排除掉，有的并不好使\n\n\n# 技巧2：精确搜索\n\n方式：给关键词加双引号，"关键词"\n\n功能：只搜索引号里的字，少一个字或者把字拆开都不行\n\n示例：\n\n"达拉不崩吧"\n\n\n1\n\n\n> 注意是英文的双引号\n\n\n# 技巧3：指定网站内搜索\n\n方式：site:域名 关键词\n\n功能：只搜索指定域名的内容\n\n示例：\n\nsite:zhihu.com 前端\n\n\n1\n\n\n有一些站内自带的搜索并不好用，可以尝试这个搜索技巧。\n\n\n# 技巧4：指定文件格式\n\n方式：filetype:文件格式 关键词\n\n示例：\n\nfiletype:avi 你懂的\n\n\n1\n\n\n常见文件格式有doc、pdf、ppt等\n\n\n# 技巧5：指定在标题搜索\n\n方式：intitle:关键词\n\n功能：搜索的关键词要出现在标题当中\n\n\n# 技巧6：指定在内容中搜索\n\n方式：intext:关键词、allintext:关键词1 关键词2、inurl:关键词2\n\n\n# 技巧7：多种搜索技巧叠加使用\n\n示例：\n\nsite:zhihu.com 前端 intitle:js\n\n\n1\n\n\n多种技巧和关键词叠加使用，中间空格隔开。\n\n\n# 注意事项\n\n以上搜索技巧使用的符号均是英文符号。',charsets:{cjk:!0},lastUpdated:"2022/12/03, 17:31:39",lastUpdatedTimestamp:1670059899e3},{title:"什么是编程语言？",frontmatter:{title:"什么是编程语言？",date:"2022-10-15T12:05:35.000Z",permalink:"/pages/4eb330/",tags:[null]},regularPath:"/07.%E6%9B%B4%E5%A4%9A/02.%E7%BC%96%E7%A8%8B/00.%E4%BB%80%E4%B9%88%E6%98%AF%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%EF%BC%9F.html",relativePath:"07.更多/02.编程/00.什么是编程语言？.md",key:"v-a648cdb0",path:"/pages/4eb330/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/12/03, 17:31:39",lastUpdatedTimestamp:1670059899e3},{title:"编程语言重要吗？",frontmatter:{title:"编程语言重要吗？",date:"2022-10-14T10:59:11.000Z",permalink:"/pages/f28982/",tags:[null]},regularPath:"/07.%E6%9B%B4%E5%A4%9A/02.%E7%BC%96%E7%A8%8B/01.%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E9%87%8D%E8%A6%81%E5%90%97%EF%BC%9F.html",relativePath:"07.更多/02.编程/01.编程语言重要吗？.md",key:"v-511ab6fa",path:"/pages/f28982/",headers:[{level:2,title:"什么是编程？",slug:"什么是编程",normalizedTitle:"什么是编程？",charIndex:73},{level:2,title:"编程语言重要吗？",slug:"编程语言重要吗-2",normalizedTitle:"编程语言重要吗？",charIndex:2},{level:2,title:'量子速"学"？21天精通一门编程语言？',slug:"量子速-学-21天精通一门编程语言",normalizedTitle:"量子速&quot;学&quot;？21天精通一门编程语言？",charIndex:null},{level:2,title:"“编程淘金热”",slug:"编程淘金热",normalizedTitle:"“编程淘金热”",charIndex:713}],headersStr:'什么是编程？ 编程语言重要吗？ 量子速"学"？21天精通一门编程语言？ “编程淘金热”',content:'# 编程语言重要吗？\n\n> 若要了解编程语言是什么，请参考这里：xxx\n\n在谈及“编程语言重要吗？”这个话题之前我们先来谈谈什么是编程。\n\n\n# 什么是编程？\n\n有的人觉得学了一门编程语言就是会编程了。\n\n这样说也没错。比如，某人写出了一个在屏幕上显示“Hello World”文字的程序，那么Ta确实可以称自己会“编程”，因为这个人确实进行了“编程”的行为，尽管Ta只会写 Hello World 这个程序。\n\n但是，没人会觉得这人会是一位程序员（Programmer）。因为专业人士所认为的“会编程”可不仅仅只是会写个 Hello World 程序，或者写个 if-else 这样的逻辑结构就完事儿了。\n\n在外行人面前装装样子就得了，在业内人士面前说自己会“编程”，这是在搬起石头砸自己的脚。\n\n\n# 编程语言重要吗？\n\n这个问题，要从不同的方面（维度）来讨论。\n\n从编程实力上来说，语言不重要，重要的是基础和方法（经验）。\n\n从就业上来说，语言又很重要，从众多公司的招聘要求就可知道。\n\n> 薪水与热爱 - Frank\n\n\n# 量子速"学"？21天精通一门编程语言？\n\n假如你在自己的简历上写“精通Java”，那么面试官可能会问你字节码相关的问题。21天，有人能精通到JVM字节码的内容上去吗？依我看，放屁！21天，最多也就把Java的基础语法过一遍。可是，精通了吗？并没有。\n\n所以说啊，我们不能盲目买书。如果要学基础语法，到教程网站上去过一遍不是更快吗？\n\n> 为什么学习编程需要“十年”？\n> \n> 原文：https://norvig.com/21-days.html 转译：来自**肖国栋的i自留地**\n\n\n# “编程淘金热”\n\n我想已经很多人都听说过美国西部的淘金热了吧，如果不知道那你最好去了解一下。\n\n很多人都想去淘金子搞钱，结果赚钱的是谁？是卖铲子的。\n\n现在编程领域也存在这样的现象。你想学编程赚钱，但是那些培训机构、中介却赚了钱。\n\n> 有人可能会有这样的疑问：为什么编程领域还有中介，他们是怎么“赚”到钱的？\n> \n> 建议参考14万的Offer - 正面连接',normalizedContent:'# 编程语言重要吗？\n\n> 若要了解编程语言是什么，请参考这里：xxx\n\n在谈及“编程语言重要吗？”这个话题之前我们先来谈谈什么是编程。\n\n\n# 什么是编程？\n\n有的人觉得学了一门编程语言就是会编程了。\n\n这样说也没错。比如，某人写出了一个在屏幕上显示“hello world”文字的程序，那么ta确实可以称自己会“编程”，因为这个人确实进行了“编程”的行为，尽管ta只会写 hello world 这个程序。\n\n但是，没人会觉得这人会是一位程序员（programmer）。因为专业人士所认为的“会编程”可不仅仅只是会写个 hello world 程序，或者写个 if-else 这样的逻辑结构就完事儿了。\n\n在外行人面前装装样子就得了，在业内人士面前说自己会“编程”，这是在搬起石头砸自己的脚。\n\n\n# 编程语言重要吗？\n\n这个问题，要从不同的方面（维度）来讨论。\n\n从编程实力上来说，语言不重要，重要的是基础和方法（经验）。\n\n从就业上来说，语言又很重要，从众多公司的招聘要求就可知道。\n\n> 薪水与热爱 - frank\n\n\n# 量子速"学"？21天精通一门编程语言？\n\n假如你在自己的简历上写“精通java”，那么面试官可能会问你字节码相关的问题。21天，有人能精通到jvm字节码的内容上去吗？依我看，放屁！21天，最多也就把java的基础语法过一遍。可是，精通了吗？并没有。\n\n所以说啊，我们不能盲目买书。如果要学基础语法，到教程网站上去过一遍不是更快吗？\n\n> 为什么学习编程需要“十年”？\n> \n> 原文：https://norvig.com/21-days.html 转译：来自**肖国栋的i自留地**\n\n\n# “编程淘金热”\n\n我想已经很多人都听说过美国西部的淘金热了吧，如果不知道那你最好去了解一下。\n\n很多人都想去淘金子搞钱，结果赚钱的是谁？是卖铲子的。\n\n现在编程领域也存在这样的现象。你想学编程赚钱，但是那些培训机构、中介却赚了钱。\n\n> 有人可能会有这样的疑问：为什么编程领域还有中介，他们是怎么“赚”到钱的？\n> \n> 建议参考14万的offer - 正面连接',charsets:{cjk:!0},lastUpdated:"2022/12/03, 17:31:39",lastUpdatedTimestamp:1670059899e3},{title:"废话Java泛型编程",frontmatter:{title:"废话Java泛型编程",date:"2022-09-29T10:14:37.000Z",permalink:"/pages/27d4fa/",tags:["技术"]},regularPath:"/07.%E6%9B%B4%E5%A4%9A/02.%E7%BC%96%E7%A8%8B/05.%E5%BA%9F%E8%AF%9DJava%E6%B3%9B%E5%9E%8B%E7%BC%96%E7%A8%8B.html",relativePath:"07.更多/02.编程/05.废话Java泛型编程.md",key:"v-d2d599de",path:"/pages/27d4fa/",headers:[{level:2,title:"什么TMD叫泛型？",slug:"什么tmd叫泛型",normalizedTitle:"什么tmd叫泛型？",charIndex:2},{level:2,title:"So, 什么是泛型编程",slug:"so-什么是泛型编程",normalizedTitle:"so, 什么是泛型编程",charIndex:99},{level:2,title:"在 Java 5 引入泛型之前怎么做的",slug:"在-java-5-引入泛型之前怎么做的",normalizedTitle:"在 java 5 引入泛型之前怎么做的",charIndex:637},{level:2,title:"Object VS Generic",slug:"object-vs-generic",normalizedTitle:"object vs generic",charIndex:1117},{level:2,title:"Generic 可以不写 <T> ?",slug:"generic-可以不写-t",normalizedTitle:"generic 可以不写 <t> ?",charIndex:1139}],headersStr:"什么TMD叫泛型？ So, 什么是泛型编程 在 Java 5 引入泛型之前怎么做的 Object VS Generic Generic 可以不写 <T> ?",content:'# 什么TMD叫泛型？\n\n泛型泛型，把“泛”和“型”两个字展开来看不就得了吗。\n\n * 一个“泛”，指“广泛、泛化”\n * 一个“型”，指“数据类型”\n\n连起来不就是“广泛的数据类型吗”？\n\n\n# So, 什么是泛型编程\n\n代码一样，但数据类型不同。让数据类型参数化，以重用相同的代码。\n\n泛型类的类型参数只能是参考类型，也就是说，泛型只处理对象。（原始数据类型可用包装类代替）\n\n> 这么说来，泛型编程并不是与面向对象对立的编程方法嘛。它是不是更像是面向对象编程的延展嘞。\n\n泛型允许我们使用相同的类和方法来处理不同的类型：\n\nclass GenericType<T> { \n\n    private T t;\n\n    public GenericType(T t) {\n        this.t = t;\n    }\n\n    public T get() {\n        return t;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nGenericType<String> instance1 = new GenericType<>("abc");\nString str = instance1.get();\n\nGenericType<Integer> instance2 = new GenericType<>(100);\nInteger num = instance2.get();\n\n\n1\n2\n3\n4\n5\n\n\n\n# 在 Java 5 引入泛型之前怎么做的\n\n在 Java 5 引入泛型之前，使用Object类来做这件事儿。\n\nclass NonGenericType { \n\n    private Object object;\n\n    public GenericType(Object object) {\n        this.object = object;\n    }\n\n    public Objcet get() {\n        return this.object;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nNonGenericType instance = new NonGenericType("I\'m a object.");\n\nString str = instance.get();  // Exception!\n\nString str = (String) instance.get();  // Right. Must explicit type-casting\n\n\n1\n2\n3\n4\n5\n\n\n\n# Object VS Generic\n\n\n# Generic 可以不写 <T> ?\n\n这是可行的。即使它长得更像“Non-Generic”，但它仍然是泛型类。这种情况下，字段类型为Object。\n\nGenericType instance = new GenericType("my-string");\n\n\n1\n\n\n上面的代码等同于下面的代码：\n\nGenericType<Object> instance = new GenericType<>("abc"); // it is parameterized with Object\n\n\n1\n\n\n当然，通常是没有人这样用的。',normalizedContent:'# 什么tmd叫泛型？\n\n泛型泛型，把“泛”和“型”两个字展开来看不就得了吗。\n\n * 一个“泛”，指“广泛、泛化”\n * 一个“型”，指“数据类型”\n\n连起来不就是“广泛的数据类型吗”？\n\n\n# so, 什么是泛型编程\n\n代码一样，但数据类型不同。让数据类型参数化，以重用相同的代码。\n\n泛型类的类型参数只能是参考类型，也就是说，泛型只处理对象。（原始数据类型可用包装类代替）\n\n> 这么说来，泛型编程并不是与面向对象对立的编程方法嘛。它是不是更像是面向对象编程的延展嘞。\n\n泛型允许我们使用相同的类和方法来处理不同的类型：\n\nclass generictype<t> { \n\n    private t t;\n\n    public generictype(t t) {\n        this.t = t;\n    }\n\n    public t get() {\n        return t;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\ngenerictype<string> instance1 = new generictype<>("abc");\nstring str = instance1.get();\n\ngenerictype<integer> instance2 = new generictype<>(100);\ninteger num = instance2.get();\n\n\n1\n2\n3\n4\n5\n\n\n\n# 在 java 5 引入泛型之前怎么做的\n\n在 java 5 引入泛型之前，使用object类来做这件事儿。\n\nclass nongenerictype { \n\n    private object object;\n\n    public generictype(object object) {\n        this.object = object;\n    }\n\n    public objcet get() {\n        return this.object;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nnongenerictype instance = new nongenerictype("i\'m a object.");\n\nstring str = instance.get();  // exception!\n\nstring str = (string) instance.get();  // right. must explicit type-casting\n\n\n1\n2\n3\n4\n5\n\n\n\n# object vs generic\n\n\n# generic 可以不写 <t> ?\n\n这是可行的。即使它长得更像“non-generic”，但它仍然是泛型类。这种情况下，字段类型为object。\n\ngenerictype instance = new generictype("my-string");\n\n\n1\n\n\n上面的代码等同于下面的代码：\n\ngenerictype<object> instance = new generictype<>("abc"); // it is parameterized with object\n\n\n1\n\n\n当然，通常是没有人这样用的。',charsets:{cjk:!0},lastUpdated:"2022/12/03, 17:31:39",lastUpdatedTimestamp:1670059899e3},{title:"一个完美主义者的自我救赎",frontmatter:{title:"一个完美主义者的自我救赎",date:"2020-01-16T15:15:27.000Z",permalink:"/pages/2d615df9a36a98ed",categories:["更多","心情杂货"],tags:[null],author:{name:"xugaoyi",link:"https://github.com/xugaoyi"}},regularPath:"/07.%E6%9B%B4%E5%A4%9A/05.%E5%BF%83%E6%83%85%E6%9D%82%E8%B4%A7/01.%E4%B8%80%E4%B8%AA%E5%AE%8C%E7%BE%8E%E4%B8%BB%E4%B9%89%E8%80%85%E7%9A%84%E8%87%AA%E6%88%91%E6%95%91%E8%B5%8E.html",relativePath:"07.更多/05.心情杂货/01.一个完美主义者的自我救赎.md",key:"v-68ed9838",path:"/pages/2d615df9a36a98ed/",excerpt:'<h1 id="一个完美主义者的自我救赎"><a class="header-anchor" href="#一个完美主义者的自我救赎">#</a> 一个完美主义者的自我救赎</h1>\n<p>最近，看到一个心理测试题是测试你是否有完美主义：</p>\n<blockquote>\n<p>（1）你是不是经常为自己设定目标，而且最终往往达不到那些目标？</p>\n<p>（2）当一件事件做得不够好时，你是否有再试一次的想法？</p>\n<p>（3）你是否休息时仍想着学习、工作、或者其他还没有解决的事？</p>\n<p>（4）如果遇到别人说话或打岔，破坏了你的注意力，你是否觉得不太高兴？</p>\n<p>（5）你是否常常会在事后想，如果当时能换成另一种方式来解决，也许会更加理想？</p>\n</blockquote>\n<p>如果上面的问题，你的回答大部分是肯定的，那么你就有完美主义倾向。</p>\n',headersStr:null,content:'# 一个完美主义者的自我救赎\n\n最近，看到一个心理测试题是测试你是否有完美主义：\n\n> （1）你是不是经常为自己设定目标，而且最终往往达不到那些目标？\n> \n> （2）当一件事件做得不够好时，你是否有再试一次的想法？\n> \n> （3）你是否休息时仍想着学习、工作、或者其他还没有解决的事？\n> \n> （4）如果遇到别人说话或打岔，破坏了你的注意力，你是否觉得不太高兴？\n> \n> （5）你是否常常会在事后想，如果当时能换成另一种方式来解决，也许会更加理想？\n\n如果上面的问题，你的回答大部分是肯定的，那么你就有完美主义倾向。\n\n对照自身，我就是那个完美主义者，时常会因为某件事做得不够好而感到痛苦，给我带来的后果就是：为了一件事想要达到“完美”的标准，付出了更多的成本，从而忽略真正需要优先处理的其他事情。最后，即使付出了成本，得到的结果也不一定是想要的"完美"。\n\n看过一篇文章，里面说到：\n\n> 完美主义是一种压力，它让你为自己创造不切实际的期望。你明明做到了正常水平，但是因为设定的目标太高，所以看上去距离目的地仍然很遥远。你的心态变成了：这一切还不够好，依然可以改进。\n> \n> 完美主义消耗了我们最宝贵的资源和时间，让你将注意力从真正的优先事项上移开。\n\n完美主义就是追求一个较高水平的目标，不接受一个较低水平的，但可用的结果。我一直告诫自己，改掉追求完美的毛病。\n\n完美主义已经对我造成了一些压力，还会妨碍我开始进入某些事情，总想着万事俱备之后才开始，结果是没有万事俱备，也没有东风，这事就搁置了。\n\n某个军事文章里说，他们特种部队的射击理念是：绝对快，相对准！\n\n> 玩吃鸡游戏似乎也是这样，需要你有快速的反应能力，不管打不打到人，先开枪再说，即使打不到也可以吓到敌人啊，哈哈哈\n\n这个理念似乎也适用于我这样的完美主义者，“做得快”比“做得好”要好，不要太执着于“完美”，就好像我开始写博客，我知道自己的写作水平并不好，但这并不妨碍我开始写博客，相信我会越写越好的~\n\n最后，心理医生也说过追求完美并不利于身心健康，不要追求完美，随心所欲地生活吧！',normalizedContent:'# 一个完美主义者的自我救赎\n\n最近，看到一个心理测试题是测试你是否有完美主义：\n\n> （1）你是不是经常为自己设定目标，而且最终往往达不到那些目标？\n> \n> （2）当一件事件做得不够好时，你是否有再试一次的想法？\n> \n> （3）你是否休息时仍想着学习、工作、或者其他还没有解决的事？\n> \n> （4）如果遇到别人说话或打岔，破坏了你的注意力，你是否觉得不太高兴？\n> \n> （5）你是否常常会在事后想，如果当时能换成另一种方式来解决，也许会更加理想？\n\n如果上面的问题，你的回答大部分是肯定的，那么你就有完美主义倾向。\n\n对照自身，我就是那个完美主义者，时常会因为某件事做得不够好而感到痛苦，给我带来的后果就是：为了一件事想要达到“完美”的标准，付出了更多的成本，从而忽略真正需要优先处理的其他事情。最后，即使付出了成本，得到的结果也不一定是想要的"完美"。\n\n看过一篇文章，里面说到：\n\n> 完美主义是一种压力，它让你为自己创造不切实际的期望。你明明做到了正常水平，但是因为设定的目标太高，所以看上去距离目的地仍然很遥远。你的心态变成了：这一切还不够好，依然可以改进。\n> \n> 完美主义消耗了我们最宝贵的资源和时间，让你将注意力从真正的优先事项上移开。\n\n完美主义就是追求一个较高水平的目标，不接受一个较低水平的，但可用的结果。我一直告诫自己，改掉追求完美的毛病。\n\n完美主义已经对我造成了一些压力，还会妨碍我开始进入某些事情，总想着万事俱备之后才开始，结果是没有万事俱备，也没有东风，这事就搁置了。\n\n某个军事文章里说，他们特种部队的射击理念是：绝对快，相对准！\n\n> 玩吃鸡游戏似乎也是这样，需要你有快速的反应能力，不管打不打到人，先开枪再说，即使打不到也可以吓到敌人啊，哈哈哈\n\n这个理念似乎也适用于我这样的完美主义者，“做得快”比“做得好”要好，不要太执着于“完美”，就好像我开始写博客，我知道自己的写作水平并不好，但这并不妨碍我开始写博客，相信我会越写越好的~\n\n最后，心理医生也说过追求完美并不利于身心健康，不要追求完美，随心所欲地生活吧！',charsets:{cjk:!0},lastUpdated:"2022/12/03, 17:31:39",lastUpdatedTimestamp:1670059899e3},{title:"面试问题集锦",frontmatter:{title:"面试问题集锦",date:"2019-12-25T14:27:01.000Z",permalink:"/pages/aea6571b7a8bae86",categories:["更多","面试"],tags:[null],author:{name:"xugaoyi",link:"https://github.com/xugaoyi"}},regularPath:"/07.%E6%9B%B4%E5%A4%9A/03.%E9%9D%A2%E8%AF%95/01.%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E9%9B%86%E9%94%A6.html",relativePath:"07.更多/03.面试/01.面试问题集锦.md",key:"v-6d811eec",path:"/pages/aea6571b7a8bae86/",headers:[{level:2,title:"请做一下自我介绍",slug:"请做一下自我介绍",normalizedTitle:"请做一下自我介绍",charIndex:13},{level:2,title:"你最大的优点是什么？",slug:"你最大的优点是什么",normalizedTitle:"你最大的优点是什么？",charIndex:166},{level:2,title:"说说你最大的缺点？",slug:"说说你最大的缺点",normalizedTitle:"说说你最大的缺点？",charIndex:252},{level:2,title:"说说你对加班的看法？",slug:"说说你对加班的看法",normalizedTitle:"说说你对加班的看法？",charIndex:378},{level:2,title:"说说你对薪资的要求？",slug:"说说你对薪资的要求",normalizedTitle:"说说你对薪资的要求？",charIndex:513},{level:2,title:"在五年内，你的职业规划？",slug:"在五年内-你的职业规划",normalizedTitle:"在五年内，你的职业规划？",charIndex:903},{level:2,title:"你朋友对你的评价?",slug:"你朋友对你的评价",normalizedTitle:"你朋友对你的评价?",charIndex:1081},{level:2,title:"你还有什么问题要问吗?",slug:"你还有什么问题要问吗",normalizedTitle:"你还有什么问题要问吗?",charIndex:1241},{level:2,title:"录用后发现不适合这个职位，怎么办?",slug:"录用后发现不适合这个职位-怎么办",normalizedTitle:"录用后发现不适合这个职位，怎么办?",charIndex:1424},{level:2,title:"工作时跟领导意见不同怎么办?",slug:"工作时跟领导意见不同怎么办",normalizedTitle:"工作时跟领导意见不同怎么办?",charIndex:1601},{level:2,title:"工作出现失误并造成损失，你会怎么做?",slug:"工作出现失误并造成损失-你会怎么做",normalizedTitle:"工作出现失误并造成损失，你会怎么做?",charIndex:1779},{level:2,title:"谈谈你对跳槽的看法?",slug:"谈谈你对跳槽的看法",normalizedTitle:"谈谈你对跳槽的看法?",charIndex:2028},{level:2,title:"和同事、上司难以相处，你怎么办?",slug:"和同事、上司难以相处-你怎么办",normalizedTitle:"和同事、上司难以相处，你怎么办?",charIndex:2098},{level:2,title:"上级领导抢了你的功劳怎么办?",slug:"上级领导抢了你的功劳怎么办",normalizedTitle:"上级领导抢了你的功劳怎么办?",charIndex:2311},{level:2,title:"同事孤立你，你怎么办?",slug:"同事孤立你-你怎么办",normalizedTitle:"同事孤立你，你怎么办?",charIndex:2485},{level:2,title:"你最近是否参加了培训课程?",slug:"你最近是否参加了培训课程",normalizedTitle:"你最近是否参加了培训课程?",charIndex:2582},{level:2,title:"你对于我们公司了解多少?",slug:"你对于我们公司了解多少",normalizedTitle:"你对于我们公司了解多少?",charIndex:2636},{level:2,title:"你最擅长的技术方向是什么?",slug:"你最擅长的技术方向是什么",normalizedTitle:"你最擅长的技术方向是什么?",charIndex:2727},{level:2,title:"请说出你选择这份工作的动机?",slug:"请说出你选择这份工作的动机",normalizedTitle:"请说出你选择这份工作的动机?",charIndex:2784},{level:2,title:"你能为我们公司带来什么呢?",slug:"你能为我们公司带来什么呢",normalizedTitle:"你能为我们公司带来什么呢?",charIndex:2912},{level:2,title:"最能概括你自己的三个词?",slug:"最能概括你自己的三个词",normalizedTitle:"最能概括你自己的三个词?",charIndex:3159},{level:2,title:"作为被面试者给我打一下分?",slug:"作为被面试者给我打一下分",normalizedTitle:"作为被面试者给我打一下分?",charIndex:3225},{level:2,title:"你怎么理解你应聘的职位?",slug:"你怎么理解你应聘的职位",normalizedTitle:"你怎么理解你应聘的职位?",charIndex:3302},{level:2,title:"喜欢这份工作的哪一点?",slug:"喜欢这份工作的哪一点",normalizedTitle:"喜欢这份工作的哪一点?",charIndex:3346},{level:2,title:"为什么要离职?",slug:"为什么要离职",normalizedTitle:"为什么要离职?",charIndex:3497},{level:2,title:"说说你对行业、技术发展趋势的看法?",slug:"说说你对行业、技术发展趋势的看法",normalizedTitle:"说说你对行业、技术发展趋势的看法?",charIndex:3739},{level:2,title:"对工作的期望与目标何在?",slug:"对工作的期望与目标何在",normalizedTitle:"对工作的期望与目标何在?",charIndex:3923},{level:2,title:"谈谈你的家庭?",slug:"谈谈你的家庭",normalizedTitle:"谈谈你的家庭?",charIndex:4183},{level:2,title:"你认为自己申请这个职位还欠缺什么?",slug:"你认为自己申请这个职位还欠缺什么",normalizedTitle:"你认为自己申请这个职位还欠缺什么?",charIndex:4413},{level:2,title:"你欣赏哪种性格的人?",slug:"你欣赏哪种性格的人",normalizedTitle:"你欣赏哪种性格的人?",charIndex:4580},{level:2,title:"你通常如何处理别人的批评?",slug:"你通常如何处理别人的批评",normalizedTitle:"你通常如何处理别人的批评?",charIndex:4633},{level:2,title:"怎样对待自己的失败?",slug:"怎样对待自己的失败",normalizedTitle:"怎样对待自己的失败?",charIndex:4705},{level:2,title:"什么会让你有成就感?",slug:"什么会让你有成就感",normalizedTitle:"什么会让你有成就感?",charIndex:4761},{level:2,title:"眼下你生活中最重要的是什么?",slug:"眼下你生活中最重要的是什么",normalizedTitle:"眼下你生活中最重要的是什么?",charIndex:4805},{level:2,title:"你为什么愿意到我们公司来工作?",slug:"你为什么愿意到我们公司来工作",normalizedTitle:"你为什么愿意到我们公司来工作?",charIndex:4867},{level:2,title:"你和别人发生过争执吗?",slug:"你和别人发生过争执吗",normalizedTitle:"你和别人发生过争执吗?",charIndex:5043},{level:2,title:"你做过的哪件事最令自己感到骄傲?",slug:"你做过的哪件事最令自己感到骄傲",normalizedTitle:"你做过的哪件事最令自己感到骄傲?",charIndex:5234},{level:2,title:"对这项工作，你有哪些可预见的困难?",slug:"对这项工作-你有哪些可预见的困难",normalizedTitle:"对这项工作，你有哪些可预见的困难?",charIndex:5366},{level:2,title:"录用后你将怎样开展工作?",slug:"录用后你将怎样开展工作",normalizedTitle:"录用后你将怎样开展工作?",charIndex:5512},{level:2,title:"你希望与什么样的上级共事?",slug:"你希望与什么样的上级共事",normalizedTitle:"你希望与什么样的上级共事?",charIndex:5657},{level:2,title:"你工作经验欠缺，如何能胜任这项工作?",slug:"你工作经验欠缺-如何能胜任这项工作",normalizedTitle:"你工作经验欠缺，如何能胜任这项工作?",charIndex:5813},{level:2,title:"你会怎样获得同事的帮助?",slug:"你会怎样获得同事的帮助",normalizedTitle:"你会怎样获得同事的帮助?",charIndex:6093},{level:2,title:"如果你没被录用，你怎么打算?",slug:"如果你没被录用-你怎么打算",normalizedTitle:"如果你没被录用，你怎么打算?",charIndex:6229},{level:2,title:"最令你沮丧的事情?",slug:"最令你沮丧的事情",normalizedTitle:"最令你沮丧的事情?",charIndex:6671},{level:2,title:"想过创业吗?",slug:"想过创业吗",normalizedTitle:"想过创业吗?",charIndex:6868},{level:2,title:"为什么我们要在众多的面试者中选择你?",slug:"为什么我们要在众多的面试者中选择你",normalizedTitle:"为什么我们要在众多的面试者中选择你?",charIndex:6941},{level:2,title:"除了本公司外，还应聘了哪些公司?",slug:"除了本公司外-还应聘了哪些公司",normalizedTitle:"除了本公司外，还应聘了哪些公司?",charIndex:7126},{level:2,title:"你并非毕业于名牌院校?",slug:"你并非毕业于名牌院校",normalizedTitle:"你并非毕业于名牌院校?",charIndex:7255},{level:2,title:"怎样看待学历和能力?",slug:"怎样看待学历和能力",normalizedTitle:"怎样看待学历和能力?",charIndex:7379},{level:2,title:"谈谈如何适应办公室工作的新环境?",slug:"谈谈如何适应办公室工作的新环境",normalizedTitle:"谈谈如何适应办公室工作的新环境?",charIndex:7605},{level:2,title:"谈谈对这个职务的期许?",slug:"谈谈对这个职务的期许",normalizedTitle:"谈谈对这个职务的期许?",charIndex:7742},{level:2,title:"何时可以到职?",slug:"何时可以到职",normalizedTitle:"何时可以到职?",charIndex:7882}],headersStr:"请做一下自我介绍 你最大的优点是什么？ 说说你最大的缺点？ 说说你对加班的看法？ 说说你对薪资的要求？ 在五年内，你的职业规划？ 你朋友对你的评价? 你还有什么问题要问吗? 录用后发现不适合这个职位，怎么办? 工作时跟领导意见不同怎么办? 工作出现失误并造成损失，你会怎么做? 谈谈你对跳槽的看法? 和同事、上司难以相处，你怎么办? 上级领导抢了你的功劳怎么办? 同事孤立你，你怎么办? 你最近是否参加了培训课程? 你对于我们公司了解多少? 你最擅长的技术方向是什么? 请说出你选择这份工作的动机? 你能为我们公司带来什么呢? 最能概括你自己的三个词? 作为被面试者给我打一下分? 你怎么理解你应聘的职位? 喜欢这份工作的哪一点? 为什么要离职? 说说你对行业、技术发展趋势的看法? 对工作的期望与目标何在? 谈谈你的家庭? 你认为自己申请这个职位还欠缺什么? 你欣赏哪种性格的人? 你通常如何处理别人的批评? 怎样对待自己的失败? 什么会让你有成就感? 眼下你生活中最重要的是什么? 你为什么愿意到我们公司来工作? 你和别人发生过争执吗? 你做过的哪件事最令自己感到骄傲? 对这项工作，你有哪些可预见的困难? 录用后你将怎样开展工作? 你希望与什么样的上级共事? 你工作经验欠缺，如何能胜任这项工作? 你会怎样获得同事的帮助? 如果你没被录用，你怎么打算? 最令你沮丧的事情? 想过创业吗? 为什么我们要在众多的面试者中选择你? 除了本公司外，还应聘了哪些公司? 你并非毕业于名牌院校? 怎样看待学历和能力? 谈谈如何适应办公室工作的新环境? 谈谈对这个职务的期许? 何时可以到职?",content:"# 面试问题集锦\n\n\n# 请做一下自我介绍\n\n回答提示： 一般人回答这个问题过于平常，只说姓名、年龄、工作经验，这些在简历上都有。其实，企业最希望知道的是求职者能否胜任工作，包括：最强的技能、最深入研究的知识领域、个性中最积极的部分、做过的最成功的事，主要的成就等，要突出积极的个性和做事的能力，说的合情合理企业才会相信。\n\n\n# 你最大的优点是什么？\n\n回答提示： 沉着冷静、条理清楚、立场坚定、乐于助人等，加上例子如：我在XX经过一到两年的培训及项目实战，加上实习工作，我想我适合这份工作。\n\n\n# 说说你最大的缺点？\n\n回答提示： 这个问题企业问的概率很大，通常不希望听到直接回答的缺点是什么等，如果求职者说自己小心眼、非常懒、工作效率低，企业肯定不会录用你。要从自己的优点说起，中间加一些小缺点，最后再把问答转回到优点上，突出优点的部分。\n\n\n# 说说你对加班的看法？\n\n回答提示： 实际上好多公司问这个问题，并不证明一定要加班，只是想测试你是否愿意为公司奉献。\n\n回答样本： 如果是工作需要我会义不容辞加班，我现在单身，没有任何家庭负担，可以全身心的投入工作。但同时，我也会提高工作效率，减少不必要的加班。\n\n\n# 说说你对薪资的要求？\n\n回答提示： 如果你对薪资的要求太低，那显然贬低自己的能力；如果你对薪资的要求太高，那又会显得你分量过重，公司受用不起。一些雇主通常都事先对求聘的职位定下开支预算，因而他们第一次提出的价钱往往是他们所能给予的最高价钱，他们问你只不过想证实一下这笔钱是否足以引起你对该工作的兴趣。\n\n回答样本：\n\n①我对工资没有硬性要求，我相信贵公司会友善合理。我注重的是找到工作机会，所以只要条件公平，我则不会计较太多。\n\n②我受过系统的软件编程的训练，不需要进行大量的培训，而且我本人也对编程特别感兴趣。因此，我希望公司能根据我的情况和市场标准的水平，给我合理的薪水。\n\n③如果你必须自己说出具体数目，请不要说一个宽泛的范围，那样你将只能得到最低限度的数字。最好给出一个具体的数字，这样表明你已经对当今的人才市场做了调查，知道像自己这样学历的雇员有什么样的价值。\n\n\n# 在五年内，你的职业规划？\n\n回答提示： 这是每一个应聘者都不希望被问到的问题，但是几乎每个人都会被问到，比较多的答案是“管理者”。当然，说出其他一些你感兴趣的职位也是可以的。要知道，考官总是喜欢有进取心的应聘者，此时如果说“不知道”，或许就会使你丧失一个好机会。最普通的回答应该是“我准备在技术领域有所作为”或“我希望能按照公司的管理思路发展”。\n\n\n# 你朋友对你的评价?\n\n回答提示： 想从侧面了解一下你的性格及与人相处的问题。\n\n回答样本：\n\n①我朋友都说我是一个可以信赖的人。因为，我一旦答应别人的事情，就一定会做到。如果我做不到，我就不会轻易许诺。\n\n②我觉的我是一个比较随和的人，与不同的人都可以友好相处。在我与人相处时，我总是能站在别人的角度考虑问题。\n\n\n# 你还有什么问题要问吗?\n\n回答提示： 企业的这个问题看上去可有可无，其实很关键，企业不喜欢说“没问题”的人，因为其很注重员工的个性和创新能力。企业不喜欢求职者问个人福利之类的问题，如果有人这样问：贵公司对新入公司的员工有没有什么培训项目，我可以参加吗？或者说贵公司的晋升机制是什么样的？企业将很欢迎，因为体现出你对学习的热情和对公司的忠诚度以及你的上进心。\n\n\n# 录用后发现不适合这个职位，怎么办?\n\n回答提示： 工作一段时间发现工作不适合，有两种情况：①如果你确实热爱这个职业，那就要不断学习，虚心向领导和同事学习业务知识和处事经验，了解这个职业的精神内涵和职业要求，力争减少差距；②你觉得这个职业可有可无，那还是趁早换个职业，去发现适合你的，你热爱的职业，那样你的发展前途也会大点，对单位和个人都有好处。\n\n\n# 工作时跟领导意见不同怎么办?\n\n回答样本： ①原则上我会尊重和服从领导的工作安排，同时私底下找机会以请教的口吻，婉转地表达自己的想法，看看领导是否能改变想法。②如果领导没有采纳我的建议，我也同样会按领导的要求认真地去完成这项工作。③还有一种情况，假如领导要求的方式违背原则，我会坚决提出反对意见，如领导仍固执己见，我会毫不犹豫地再向上级领导反映。\n\n\n# 工作出现失误并造成损失，你会怎么做?\n\n回答样本： ①我本意是为公司努力工作，如果造成经济损失，我认为首要的问题是想方设法去弥补或挽回经济损失。如果我无能力负责，希望单位帮助解决。\n\n②分清责任，各负其责，如果是我的责任，我甘愿受罚；如果是一个我负责的团队中别人的失误，也不能幸灾乐祸，作为一个团队，需要互相提携共同成工作，安慰同事并且帮助同事查找原因总结经验。\n\n③个人的一生不可能不犯错误，重要的是能从自己的或者是别人的错误中吸取经验教训，要检讨自己的工作方法、分析问题的深度和力度。\n\n\n# 谈谈你对跳槽的看法?\n\n回答样本： ①正常的“跳槽”能够促进人才合理流动，应该支持。②频繁的跳槽对单位和个人双方都不利，应该反对。\n\n\n# 和同事、上司难以相处，你怎么办?\n\n回答样本： ①我会服从领导的指挥，配合同事的工作。②我会从自身找原因，仔细分析是不是自己工作做得不好。还要看看是不是为人处世方面做得不好，如果是这样的话我会努力改正。③如果我找不到原因，我会找机会跟他们沟通，请他们指出我的不足，及时改正。④作为优秀的员工，应该时刻以大局为重，即使在一段时间内，领导和同事对我不理解，我也会做好本职工作，虚心向他们学习，我相信，他们会看见我的努力。\n\n\n# 上级领导抢了你的功劳怎么办?\n\n回答样本： 首先我不会找那位上级领导说明这事，我会主动找我的主管领导来沟通，因为沟通是解决人际关系的最好办法，但结果会有两种：①我的主管领导认识到自己的错误，我想我会视具体情况决定是否原谅他。②他更加变本加厉的来威胁我，那我会毫不犹豫地找我的上级领导反映此事，因为他这样做会造成负面影响，对今后的工作不利。\n\n\n# 同事孤立你，你怎么办?\n\n回答样本： ①检讨一下自己是不是对工作的热心度超过同事间交往的热心了，加强同事间的交往及共同的兴趣爱好。②工作中，切勿伤害别人的自尊心。③不在领导前拨弄是非。\n\n\n# 你最近是否参加了培训课程?\n\n回答提示： 自费参加，就是XX的培训课程（可以多谈谈自己学的技术）。\n\n\n# 你对于我们公司了解多少?\n\n回答提示： 在去公司面试前上网查一下该公司主营业务。可类似回答：贵公司有意改变策略，加强与国外大厂的OEM合作，自有品牌的部分则透过海外经销商。\n\n\n# 你最擅长的技术方向是什么?\n\n回答提示： 说和你要应聘的职位相关的技术，表现一下自己的热诚没有什么坏处。\n\n\n# 请说出你选择这份工作的动机?\n\n回答提示： 这是想知道面试者对这份工作的热忱及理解度，并筛选因一时兴起而来应试的人，如果是无经验者，可以强调“就算职种不同，也希望有机会发挥之前的经验”。\n\n回答样本： 因为我很热爱这个工作，很想从事这方面的工作。\n\n\n# 你能为我们公司带来什么呢?\n\n回答提示： ①假如你可以的话，试着告诉他们你可以减低他们的费用“我已经接受过XX近两年专业的培训，立刻就可以上岗工作”。②企业很想知道未来的员工能为企业做什么，求职者应再次重复自己的优势，然后表示：“就我的能力，我可以做一个优秀的员工在组织中发挥能力，给组织带来高效率和更多的收益”。企业喜欢求职者就申请的职位表明自己的能力，比如申请营销之类的职位，可以说：“我可以开发大量的新客户，同时，对老客户做更全面周到的服务，开发老客户的新需求和消费。” 等等。\n\n\n# 最能概括你自己的三个词?\n\n回答样本： 我经常用的三个词是：适应能力强，有责任心和做事有始终，并结合具体例子向主考官解释。\n\n\n# 作为被面试者给我打一下分?\n\n回答提示： 试着列出四个优点和一个非常非常非常小的缺点（可以抱怨一下设施，没有明确责任人的缺点是不会有人介意的）。\n\n\n# 你怎么理解你应聘的职位?\n\n回答提示： 可以把岗位职责和任务及工作态度阐述下。\n\n\n# 喜欢这份工作的哪一点?\n\n回答提示： 在回答面试官这个问题时不能太直接就把自己心理的话说出来，尤其是薪资方面的问题，不过一些无伤大雅的回答是不错的考虑，如交通方便，工作性质及内容颇能符合自己的兴趣等等都是不错的答案，不过如果这时自己能仔细思考出这份工作的与众不同之处，相信在面试上会大大加分。\n\n\n# 为什么要离职?\n\n回答提示： ①回答这个问题时一定要小心，就算在前一个工作受到再大的委屈，对公司有多少的怨言都千万不要表现出来，尤其要避免对公司本身主管的批评，避免面试官的负面情绪及印象。建议此时最好的回答方式是将问题归咎在自己身上，例如觉得工作没有学习发展的空间，自己想在面试工作的相关产业中多加学习，或是前一份工作与自己的生涯规划不合等等，回答的答案最好是积极正面的。②我希望能获得一份更好的工作，如果机会来临，我会抓住。我觉得目前的工作，已经达到顶峰，即没有升迁机会。\n\n\n# 说说你对行业、技术发展趋势的看法?\n\n回答提示： 企业对这个问题很感兴趣，只有有备而来的求职者能够过关。求职者可以直接在网上查找对你所申请的行业部门的信息，只有深入了解才能产生独特的见解。企业认为最聪明的求职者是对所面试的公司预先了解很多，包括公司各个部门，发展情况，在面试回答问题的时候可以提到所了解的情况，企业欢迎进入企业的人是“知己”，而不是“盲人”。\n\n\n# 对工作的期望与目标何在?\n\n回答提示： 这是面试者用来评断求职者是否对自己有一定程度的期望、对这份工作是否了解的问题。 对于工作有确实学习目标的人通常学习较快，对于新工作自然较容易进入状况，这时建议你，最好针对工作的性质找出一个确实的答案，如业务员的工作可以这样回答：“我的目标是能成为一个超级业务员，将公司的产品广泛的推销出去，达到最好的业绩成效；为达到这个目标，我一定会努力学习，而我相信以我认真负责的态度，一定可以达到这个目标。” 其他类的工作也可以比照这个方式回答，只要在目标方面稍微修改一下就可以了。\n\n\n# 谈谈你的家庭?\n\n回答提示： 企业面试时询问家庭问题不是非要知道求职者家庭的情况，而是要了解家庭背景对求职者的塑造和影响。企业希望听到的重点也在于家庭对求职者的积极影响。\n\n回答样本： 我很爱我的家庭，我们家一向很和睦，虽然我的父亲和母亲都是普通人，但是从小，我就看到我父亲起早贪黑，每天工作特别勤劳，他的行动无形中培养了我认真负责的态度和勤劳的精神。我母亲为人善良，对人热情，特别乐于助人，所以在单位人缘很好，她的一言一行也一直在教导我做人的道理。\n\n\n# 你认为自己申请这个职位还欠缺什么?\n\n回答提示： 企业喜欢问求职者弱点，但精明的求职者一般不直接回答。\n\n回答样本： 继续重复自己的优势，然后说：“对于这个职位和我的能力来说，我相信自己是可以胜任的，只是缺乏经验，这个问题可以进入公司以后以最短的时间来解决，我的学习能力很强，我相信可以很快融入公司的企业文化，进入工作状态。\n\n\n# 你欣赏哪种性格的人?\n\n回答提示： 诚实、不死板而且容易相处的人、有实际行动的人，加上具体例子。\n\n\n# 你通常如何处理别人的批评?\n\n回答提示： ①沈默是金，不必说什么，否则情况更糟，不过我会接受建设性的批评。②我会等大家冷静下来再讨论。\n\n\n# 怎样对待自己的失败?\n\n回答提示： 大意：我们生来都不是十全十美的，我相信我有第二个机会改正我的错误。\n\n\n# 什么会让你有成就感?\n\n回答提示： 为贵公司竭力效劳，尽我所能，完成一个项目。\n\n\n# 眼下你生活中最重要的是什么?\n\n回答提示： 对我来说，能在这个领域找到工作是最重要的，能在贵公司任职对我说最重要。\n\n\n# 你为什么愿意到我们公司来工作?\n\n回答提示： 对于这个问题，你要格外小心，如果你已经对该单位作了研究，你可以回答一些详细的原因。\n\n回答样本： ①公司本身高技术开发环境很吸引我我同公司出生在同样的时代，我希望能够进入一家与我共同成长的公司。②你们公司一直都稳定发展，在近几年来在市场上有竞争力。我认为贵公司能够给我提供一个与众不同的发展道路。\n\n\n# 你和别人发生过争执吗?\n\n回答提示： 这是面试中最险恶的问题，其实是考官布下的一个陷阱，成功解决矛盾是一个协作团体中成员所必备的能力。假如你工作在一个服务行业，这个问题简直成了最重要的个环节。你是否能获得这份工作，将取决于这个问题的回答。考官希望看到你是成熟且乐于奉献的。他们通过这个问题了解你的成熟度和处世能力。在没有外界干涉的情况下，通过妥协的方式来解决才是正确答案。\n\n\n# 你做过的哪件事最令自己感到骄傲?\n\n回答提示： 这是考官给你的一个机会，让你展示自己把握命运的能力。这会体现你潜在的领导能力以及你被提升的可能性。假如你应聘于一个服务性质的单位，你很可能会被邀请去餐。记住：你的前途取决于你的知识、你的社交能力和综合表现。\n\n\n# 对这项工作，你有哪些可预见的困难?\n\n回答提示： ①不宜直接说出具体的困难，否则可能令对方怀疑应聘者不行。②可以尝试迂回战术，说出应聘者对困难所持有的态度工作中出现一些困难是正常的，也是难免的，但是只要有坚忍不拔的毅力、良好的合作精神以及事前周密而充分的准备，任何困难都是可以克服。\n\n\n# 录用后你将怎样开展工作?\n\n回答提示： ①如果应聘者对于应聘的职位缺乏足够的了解，最好不要直接说出自己开展工作的具体办法。②可以尝试采用迂回战术来回答，如“首先听取领导的指示和要求，然后就有关情况进行了解和熟悉，接下来制定一份近期的工作计划并报领导批准，最后根据计划开展工作。”。\n\n\n# 你希望与什么样的上级共事?\n\n回答提示： ①通过应聘者对上级的“希望”可以判断出应聘者对自我要求的意识，这既上一个陷阱，又是一次机会。②最好回避对上级具体的希望，多谈对自己的要求。如“做为刚步入社会的新人，我应该多要求自己尽快熟悉环境、适应环境，而不应该对环境提出什么要求，只要能发挥我的专长就可以了。\n\n\n# 你工作经验欠缺，如何能胜任这项工作?\n\n回答提示： ①如果招聘单位对应届毕业生的应聘者提出这个问题，说明招聘公司并不真正在乎经验，关键看应聘者怎样回答。②对这个问题的回答最好要体现出应聘者的诚恳、机智、果敢及敬业。\n\n回答样本： 作为应届毕业生，在工作经验方面的确会有所欠缺，因此在读书期间我一直利用各种机会在这个行业里做兼职。我也发现，实际工作远比书本知识丰富、复杂。但我有较强的责任心、适应能力和学习能力，而且比较勤奋，所以在兼职中均能圆满完成各项工作，从中获取的经验也令我受益非浅。请贵公司放心，学校所学及兼职的工作经验使我一定能胜任这个职位。\n\n\n# 你会怎样获得同事的帮助?\n\n回答提示： 每个公司都在不断变化发展的过程中，你当然希望你的员工也是这样。你希望得到那些希望并欢迎变化的人，因为这些明白，为了公司的发展，变化是公司日常生活中重要组成部分。这样的员工往往很容易适应公司的变化，并会对变化做出积极的响应。\n\n\n# 如果你没被录用，你怎么打算?\n\n回答样本： 现在的社会是一个竞争的社会，从这次面试中也可看出这一点，有竞争就必然有优劣，有成功必定就会有失败。往往成功的背后有许多的困难和挫折，如果这次失败了也仅仅是一次而已，只有经过经验经历的积累才能塑造出一个完全的成功者。我会从以下几个方面来正确看待这次失败：①要敢于面对，面对这次失败不气馁，接受已经失去了这次机会就不会回头这个现实，从心理意志和现出对这次失败的抵抗力。要有自信，相信自己经历了这次之后经过努力一定能行，能够超越自我。②善于反思，对于这次面试经验要认真总结，思考剖析，能够从自身的角度找差距正确对自己，实事求是地评价自己，辩证的看待自己的长短得失，做一个明白人。③走出阴影，克服这一次失败带给自己的心理压力，时刻牢记自己弱点，防患于未然，加强学习，提高自身素质。④认真工作，回到原单位岗位上后，要实实在在、踏踏实实地工作，三十六行行行出状元，争取在本岗位上做出一定的成绩。⑤再接再厉，以后如果有机会我仍然后再次参加竞争。\n\n\n# 最令你沮丧的事情?\n\n回答样本： 曾经接触过一个客户，原本就有耳闻他以挑剔出名，所以事前的准备功夫做得十分充分，也投入了相当多的时间与精力，最后客户虽然并没有照单全收，但是接受的程度已经出乎我们意料之外了。原以为从此可以合作愉快，却得知客户最后因为预算关系选择了另一家代理商，之前的努力因而付诸流水。尽管如此，我还是从这次的经验学到很多，如对该产业的了解，整个team的默契也更好了。\n\n\n# 想过创业吗?\n\n回答提示： 这个问题可以显示你的冲劲，但如果你的回答是“有”的话，千万小心，下一个问题可能就是：那么为什么你不这样做呢?\n\n\n# 为什么我们要在众多的面试者中选择你?\n\n回答提示： 别过度吹嘘自己的能力，或信口开河地乱开支票，例如一定会为该公司带来多少钱的业务等，这样很容易给人一种爱说大话、不切实际的感觉。\n\n回答样本： 根据我对贵公司的了解，以及我在这份工作上所累积的专业、经验及人脉，相信正是贵公司所找寻的人才。而我在工作态度、EQ上，也有圆融、成熟的一面，和主管、同事都能合作愉快。\n\n\n# 除了本公司外，还应聘了哪些公司?\n\n回答提示： 这是相当多公司会问的问题，其用意是要概略知道应征者的求职志向，所以这并非绝对是负面答案，就算不便说出公司名称，也应回答“销售同种产品的公司”，如果应聘的其他公司是不同业界，容易让人产生无法信任的感觉。\n\n\n# 你并非毕业于名牌院校?\n\n回答样本： 是否毕业于名牌院校不重要，重要的是有能力完成您交给我的工作，我接受了XX的职业培训，掌握的技能完全可以胜任贵公司现在工作，而且我比一些名牌院校的应届毕业生的动手能力还要强，我想我更适合贵公司这个职位。\n\n\n# 怎样看待学历和能力?\n\n回答样本： 学历我想只要是大学专科的学历，就表明觉得我具备了根本的学习能力。剩下的，你是学士也好，还是博士也好，对于这一点的讨论，不是看你学了多少知识，而是看你在这个领域上发挥了什么，也就是所说的能力问题。一个人工作能力的高低直接决定其职场命运，而学历的高低只是进入一个企业的敲门砖，如果公司把学历卡在博士上我就无法进入贵公司，当然这不一定只是我个人的损失，如果一个专科生都能完成的工作，您又何必非要招聘一位博士生呢?\n\n\n# 谈谈如何适应办公室工作的新环境?\n\n回答样本： ①办公室里每个人都有各自的岗位与职责，不得擅离岗位。②根据领导指示和工作安排，制定工作计划，提前预备，并按计划完成。③多请示并及时汇报，遇到不明白的要虚心请教。④抓间隙时间，多学习，努力提高自己的政治素质和业务水平。\n\n\n# 谈谈对这个职务的期许?\n\n回答提示： 回答前不妨先询问公司对这项职务的责任认定及归属，因为每一家公司的状况不尽相同，以免说了一堆理想抱负却发现牛头不对马嘴。\n\n回答样本： 希望能借此发挥我的所学及专长，同时也吸收贵公司在这方面的经验，就公司、我个人而言，缔造双赢的局面。\n\n\n# 何时可以到职?\n\n回答提示： 大多数企业会关心就职时间，最好是回答：“如果被录用的话，到职日可以按公司规定上班”，但是如果还未辞去上一个工作、上班时间又太近，似乎有些强人所难，因为交接至少要一个月的时间，应进一步说明原因，录取公司应该会通融的。",normalizedContent:"# 面试问题集锦\n\n\n# 请做一下自我介绍\n\n回答提示： 一般人回答这个问题过于平常，只说姓名、年龄、工作经验，这些在简历上都有。其实，企业最希望知道的是求职者能否胜任工作，包括：最强的技能、最深入研究的知识领域、个性中最积极的部分、做过的最成功的事，主要的成就等，要突出积极的个性和做事的能力，说的合情合理企业才会相信。\n\n\n# 你最大的优点是什么？\n\n回答提示： 沉着冷静、条理清楚、立场坚定、乐于助人等，加上例子如：我在xx经过一到两年的培训及项目实战，加上实习工作，我想我适合这份工作。\n\n\n# 说说你最大的缺点？\n\n回答提示： 这个问题企业问的概率很大，通常不希望听到直接回答的缺点是什么等，如果求职者说自己小心眼、非常懒、工作效率低，企业肯定不会录用你。要从自己的优点说起，中间加一些小缺点，最后再把问答转回到优点上，突出优点的部分。\n\n\n# 说说你对加班的看法？\n\n回答提示： 实际上好多公司问这个问题，并不证明一定要加班，只是想测试你是否愿意为公司奉献。\n\n回答样本： 如果是工作需要我会义不容辞加班，我现在单身，没有任何家庭负担，可以全身心的投入工作。但同时，我也会提高工作效率，减少不必要的加班。\n\n\n# 说说你对薪资的要求？\n\n回答提示： 如果你对薪资的要求太低，那显然贬低自己的能力；如果你对薪资的要求太高，那又会显得你分量过重，公司受用不起。一些雇主通常都事先对求聘的职位定下开支预算，因而他们第一次提出的价钱往往是他们所能给予的最高价钱，他们问你只不过想证实一下这笔钱是否足以引起你对该工作的兴趣。\n\n回答样本：\n\n①我对工资没有硬性要求，我相信贵公司会友善合理。我注重的是找到工作机会，所以只要条件公平，我则不会计较太多。\n\n②我受过系统的软件编程的训练，不需要进行大量的培训，而且我本人也对编程特别感兴趣。因此，我希望公司能根据我的情况和市场标准的水平，给我合理的薪水。\n\n③如果你必须自己说出具体数目，请不要说一个宽泛的范围，那样你将只能得到最低限度的数字。最好给出一个具体的数字，这样表明你已经对当今的人才市场做了调查，知道像自己这样学历的雇员有什么样的价值。\n\n\n# 在五年内，你的职业规划？\n\n回答提示： 这是每一个应聘者都不希望被问到的问题，但是几乎每个人都会被问到，比较多的答案是“管理者”。当然，说出其他一些你感兴趣的职位也是可以的。要知道，考官总是喜欢有进取心的应聘者，此时如果说“不知道”，或许就会使你丧失一个好机会。最普通的回答应该是“我准备在技术领域有所作为”或“我希望能按照公司的管理思路发展”。\n\n\n# 你朋友对你的评价?\n\n回答提示： 想从侧面了解一下你的性格及与人相处的问题。\n\n回答样本：\n\n①我朋友都说我是一个可以信赖的人。因为，我一旦答应别人的事情，就一定会做到。如果我做不到，我就不会轻易许诺。\n\n②我觉的我是一个比较随和的人，与不同的人都可以友好相处。在我与人相处时，我总是能站在别人的角度考虑问题。\n\n\n# 你还有什么问题要问吗?\n\n回答提示： 企业的这个问题看上去可有可无，其实很关键，企业不喜欢说“没问题”的人，因为其很注重员工的个性和创新能力。企业不喜欢求职者问个人福利之类的问题，如果有人这样问：贵公司对新入公司的员工有没有什么培训项目，我可以参加吗？或者说贵公司的晋升机制是什么样的？企业将很欢迎，因为体现出你对学习的热情和对公司的忠诚度以及你的上进心。\n\n\n# 录用后发现不适合这个职位，怎么办?\n\n回答提示： 工作一段时间发现工作不适合，有两种情况：①如果你确实热爱这个职业，那就要不断学习，虚心向领导和同事学习业务知识和处事经验，了解这个职业的精神内涵和职业要求，力争减少差距；②你觉得这个职业可有可无，那还是趁早换个职业，去发现适合你的，你热爱的职业，那样你的发展前途也会大点，对单位和个人都有好处。\n\n\n# 工作时跟领导意见不同怎么办?\n\n回答样本： ①原则上我会尊重和服从领导的工作安排，同时私底下找机会以请教的口吻，婉转地表达自己的想法，看看领导是否能改变想法。②如果领导没有采纳我的建议，我也同样会按领导的要求认真地去完成这项工作。③还有一种情况，假如领导要求的方式违背原则，我会坚决提出反对意见，如领导仍固执己见，我会毫不犹豫地再向上级领导反映。\n\n\n# 工作出现失误并造成损失，你会怎么做?\n\n回答样本： ①我本意是为公司努力工作，如果造成经济损失，我认为首要的问题是想方设法去弥补或挽回经济损失。如果我无能力负责，希望单位帮助解决。\n\n②分清责任，各负其责，如果是我的责任，我甘愿受罚；如果是一个我负责的团队中别人的失误，也不能幸灾乐祸，作为一个团队，需要互相提携共同成工作，安慰同事并且帮助同事查找原因总结经验。\n\n③个人的一生不可能不犯错误，重要的是能从自己的或者是别人的错误中吸取经验教训，要检讨自己的工作方法、分析问题的深度和力度。\n\n\n# 谈谈你对跳槽的看法?\n\n回答样本： ①正常的“跳槽”能够促进人才合理流动，应该支持。②频繁的跳槽对单位和个人双方都不利，应该反对。\n\n\n# 和同事、上司难以相处，你怎么办?\n\n回答样本： ①我会服从领导的指挥，配合同事的工作。②我会从自身找原因，仔细分析是不是自己工作做得不好。还要看看是不是为人处世方面做得不好，如果是这样的话我会努力改正。③如果我找不到原因，我会找机会跟他们沟通，请他们指出我的不足，及时改正。④作为优秀的员工，应该时刻以大局为重，即使在一段时间内，领导和同事对我不理解，我也会做好本职工作，虚心向他们学习，我相信，他们会看见我的努力。\n\n\n# 上级领导抢了你的功劳怎么办?\n\n回答样本： 首先我不会找那位上级领导说明这事，我会主动找我的主管领导来沟通，因为沟通是解决人际关系的最好办法，但结果会有两种：①我的主管领导认识到自己的错误，我想我会视具体情况决定是否原谅他。②他更加变本加厉的来威胁我，那我会毫不犹豫地找我的上级领导反映此事，因为他这样做会造成负面影响，对今后的工作不利。\n\n\n# 同事孤立你，你怎么办?\n\n回答样本： ①检讨一下自己是不是对工作的热心度超过同事间交往的热心了，加强同事间的交往及共同的兴趣爱好。②工作中，切勿伤害别人的自尊心。③不在领导前拨弄是非。\n\n\n# 你最近是否参加了培训课程?\n\n回答提示： 自费参加，就是xx的培训课程（可以多谈谈自己学的技术）。\n\n\n# 你对于我们公司了解多少?\n\n回答提示： 在去公司面试前上网查一下该公司主营业务。可类似回答：贵公司有意改变策略，加强与国外大厂的oem合作，自有品牌的部分则透过海外经销商。\n\n\n# 你最擅长的技术方向是什么?\n\n回答提示： 说和你要应聘的职位相关的技术，表现一下自己的热诚没有什么坏处。\n\n\n# 请说出你选择这份工作的动机?\n\n回答提示： 这是想知道面试者对这份工作的热忱及理解度，并筛选因一时兴起而来应试的人，如果是无经验者，可以强调“就算职种不同，也希望有机会发挥之前的经验”。\n\n回答样本： 因为我很热爱这个工作，很想从事这方面的工作。\n\n\n# 你能为我们公司带来什么呢?\n\n回答提示： ①假如你可以的话，试着告诉他们你可以减低他们的费用“我已经接受过xx近两年专业的培训，立刻就可以上岗工作”。②企业很想知道未来的员工能为企业做什么，求职者应再次重复自己的优势，然后表示：“就我的能力，我可以做一个优秀的员工在组织中发挥能力，给组织带来高效率和更多的收益”。企业喜欢求职者就申请的职位表明自己的能力，比如申请营销之类的职位，可以说：“我可以开发大量的新客户，同时，对老客户做更全面周到的服务，开发老客户的新需求和消费。” 等等。\n\n\n# 最能概括你自己的三个词?\n\n回答样本： 我经常用的三个词是：适应能力强，有责任心和做事有始终，并结合具体例子向主考官解释。\n\n\n# 作为被面试者给我打一下分?\n\n回答提示： 试着列出四个优点和一个非常非常非常小的缺点（可以抱怨一下设施，没有明确责任人的缺点是不会有人介意的）。\n\n\n# 你怎么理解你应聘的职位?\n\n回答提示： 可以把岗位职责和任务及工作态度阐述下。\n\n\n# 喜欢这份工作的哪一点?\n\n回答提示： 在回答面试官这个问题时不能太直接就把自己心理的话说出来，尤其是薪资方面的问题，不过一些无伤大雅的回答是不错的考虑，如交通方便，工作性质及内容颇能符合自己的兴趣等等都是不错的答案，不过如果这时自己能仔细思考出这份工作的与众不同之处，相信在面试上会大大加分。\n\n\n# 为什么要离职?\n\n回答提示： ①回答这个问题时一定要小心，就算在前一个工作受到再大的委屈，对公司有多少的怨言都千万不要表现出来，尤其要避免对公司本身主管的批评，避免面试官的负面情绪及印象。建议此时最好的回答方式是将问题归咎在自己身上，例如觉得工作没有学习发展的空间，自己想在面试工作的相关产业中多加学习，或是前一份工作与自己的生涯规划不合等等，回答的答案最好是积极正面的。②我希望能获得一份更好的工作，如果机会来临，我会抓住。我觉得目前的工作，已经达到顶峰，即没有升迁机会。\n\n\n# 说说你对行业、技术发展趋势的看法?\n\n回答提示： 企业对这个问题很感兴趣，只有有备而来的求职者能够过关。求职者可以直接在网上查找对你所申请的行业部门的信息，只有深入了解才能产生独特的见解。企业认为最聪明的求职者是对所面试的公司预先了解很多，包括公司各个部门，发展情况，在面试回答问题的时候可以提到所了解的情况，企业欢迎进入企业的人是“知己”，而不是“盲人”。\n\n\n# 对工作的期望与目标何在?\n\n回答提示： 这是面试者用来评断求职者是否对自己有一定程度的期望、对这份工作是否了解的问题。 对于工作有确实学习目标的人通常学习较快，对于新工作自然较容易进入状况，这时建议你，最好针对工作的性质找出一个确实的答案，如业务员的工作可以这样回答：“我的目标是能成为一个超级业务员，将公司的产品广泛的推销出去，达到最好的业绩成效；为达到这个目标，我一定会努力学习，而我相信以我认真负责的态度，一定可以达到这个目标。” 其他类的工作也可以比照这个方式回答，只要在目标方面稍微修改一下就可以了。\n\n\n# 谈谈你的家庭?\n\n回答提示： 企业面试时询问家庭问题不是非要知道求职者家庭的情况，而是要了解家庭背景对求职者的塑造和影响。企业希望听到的重点也在于家庭对求职者的积极影响。\n\n回答样本： 我很爱我的家庭，我们家一向很和睦，虽然我的父亲和母亲都是普通人，但是从小，我就看到我父亲起早贪黑，每天工作特别勤劳，他的行动无形中培养了我认真负责的态度和勤劳的精神。我母亲为人善良，对人热情，特别乐于助人，所以在单位人缘很好，她的一言一行也一直在教导我做人的道理。\n\n\n# 你认为自己申请这个职位还欠缺什么?\n\n回答提示： 企业喜欢问求职者弱点，但精明的求职者一般不直接回答。\n\n回答样本： 继续重复自己的优势，然后说：“对于这个职位和我的能力来说，我相信自己是可以胜任的，只是缺乏经验，这个问题可以进入公司以后以最短的时间来解决，我的学习能力很强，我相信可以很快融入公司的企业文化，进入工作状态。\n\n\n# 你欣赏哪种性格的人?\n\n回答提示： 诚实、不死板而且容易相处的人、有实际行动的人，加上具体例子。\n\n\n# 你通常如何处理别人的批评?\n\n回答提示： ①沈默是金，不必说什么，否则情况更糟，不过我会接受建设性的批评。②我会等大家冷静下来再讨论。\n\n\n# 怎样对待自己的失败?\n\n回答提示： 大意：我们生来都不是十全十美的，我相信我有第二个机会改正我的错误。\n\n\n# 什么会让你有成就感?\n\n回答提示： 为贵公司竭力效劳，尽我所能，完成一个项目。\n\n\n# 眼下你生活中最重要的是什么?\n\n回答提示： 对我来说，能在这个领域找到工作是最重要的，能在贵公司任职对我说最重要。\n\n\n# 你为什么愿意到我们公司来工作?\n\n回答提示： 对于这个问题，你要格外小心，如果你已经对该单位作了研究，你可以回答一些详细的原因。\n\n回答样本： ①公司本身高技术开发环境很吸引我我同公司出生在同样的时代，我希望能够进入一家与我共同成长的公司。②你们公司一直都稳定发展，在近几年来在市场上有竞争力。我认为贵公司能够给我提供一个与众不同的发展道路。\n\n\n# 你和别人发生过争执吗?\n\n回答提示： 这是面试中最险恶的问题，其实是考官布下的一个陷阱，成功解决矛盾是一个协作团体中成员所必备的能力。假如你工作在一个服务行业，这个问题简直成了最重要的个环节。你是否能获得这份工作，将取决于这个问题的回答。考官希望看到你是成熟且乐于奉献的。他们通过这个问题了解你的成熟度和处世能力。在没有外界干涉的情况下，通过妥协的方式来解决才是正确答案。\n\n\n# 你做过的哪件事最令自己感到骄傲?\n\n回答提示： 这是考官给你的一个机会，让你展示自己把握命运的能力。这会体现你潜在的领导能力以及你被提升的可能性。假如你应聘于一个服务性质的单位，你很可能会被邀请去餐。记住：你的前途取决于你的知识、你的社交能力和综合表现。\n\n\n# 对这项工作，你有哪些可预见的困难?\n\n回答提示： ①不宜直接说出具体的困难，否则可能令对方怀疑应聘者不行。②可以尝试迂回战术，说出应聘者对困难所持有的态度工作中出现一些困难是正常的，也是难免的，但是只要有坚忍不拔的毅力、良好的合作精神以及事前周密而充分的准备，任何困难都是可以克服。\n\n\n# 录用后你将怎样开展工作?\n\n回答提示： ①如果应聘者对于应聘的职位缺乏足够的了解，最好不要直接说出自己开展工作的具体办法。②可以尝试采用迂回战术来回答，如“首先听取领导的指示和要求，然后就有关情况进行了解和熟悉，接下来制定一份近期的工作计划并报领导批准，最后根据计划开展工作。”。\n\n\n# 你希望与什么样的上级共事?\n\n回答提示： ①通过应聘者对上级的“希望”可以判断出应聘者对自我要求的意识，这既上一个陷阱，又是一次机会。②最好回避对上级具体的希望，多谈对自己的要求。如“做为刚步入社会的新人，我应该多要求自己尽快熟悉环境、适应环境，而不应该对环境提出什么要求，只要能发挥我的专长就可以了。\n\n\n# 你工作经验欠缺，如何能胜任这项工作?\n\n回答提示： ①如果招聘单位对应届毕业生的应聘者提出这个问题，说明招聘公司并不真正在乎经验，关键看应聘者怎样回答。②对这个问题的回答最好要体现出应聘者的诚恳、机智、果敢及敬业。\n\n回答样本： 作为应届毕业生，在工作经验方面的确会有所欠缺，因此在读书期间我一直利用各种机会在这个行业里做兼职。我也发现，实际工作远比书本知识丰富、复杂。但我有较强的责任心、适应能力和学习能力，而且比较勤奋，所以在兼职中均能圆满完成各项工作，从中获取的经验也令我受益非浅。请贵公司放心，学校所学及兼职的工作经验使我一定能胜任这个职位。\n\n\n# 你会怎样获得同事的帮助?\n\n回答提示： 每个公司都在不断变化发展的过程中，你当然希望你的员工也是这样。你希望得到那些希望并欢迎变化的人，因为这些明白，为了公司的发展，变化是公司日常生活中重要组成部分。这样的员工往往很容易适应公司的变化，并会对变化做出积极的响应。\n\n\n# 如果你没被录用，你怎么打算?\n\n回答样本： 现在的社会是一个竞争的社会，从这次面试中也可看出这一点，有竞争就必然有优劣，有成功必定就会有失败。往往成功的背后有许多的困难和挫折，如果这次失败了也仅仅是一次而已，只有经过经验经历的积累才能塑造出一个完全的成功者。我会从以下几个方面来正确看待这次失败：①要敢于面对，面对这次失败不气馁，接受已经失去了这次机会就不会回头这个现实，从心理意志和现出对这次失败的抵抗力。要有自信，相信自己经历了这次之后经过努力一定能行，能够超越自我。②善于反思，对于这次面试经验要认真总结，思考剖析，能够从自身的角度找差距正确对自己，实事求是地评价自己，辩证的看待自己的长短得失，做一个明白人。③走出阴影，克服这一次失败带给自己的心理压力，时刻牢记自己弱点，防患于未然，加强学习，提高自身素质。④认真工作，回到原单位岗位上后，要实实在在、踏踏实实地工作，三十六行行行出状元，争取在本岗位上做出一定的成绩。⑤再接再厉，以后如果有机会我仍然后再次参加竞争。\n\n\n# 最令你沮丧的事情?\n\n回答样本： 曾经接触过一个客户，原本就有耳闻他以挑剔出名，所以事前的准备功夫做得十分充分，也投入了相当多的时间与精力，最后客户虽然并没有照单全收，但是接受的程度已经出乎我们意料之外了。原以为从此可以合作愉快，却得知客户最后因为预算关系选择了另一家代理商，之前的努力因而付诸流水。尽管如此，我还是从这次的经验学到很多，如对该产业的了解，整个team的默契也更好了。\n\n\n# 想过创业吗?\n\n回答提示： 这个问题可以显示你的冲劲，但如果你的回答是“有”的话，千万小心，下一个问题可能就是：那么为什么你不这样做呢?\n\n\n# 为什么我们要在众多的面试者中选择你?\n\n回答提示： 别过度吹嘘自己的能力，或信口开河地乱开支票，例如一定会为该公司带来多少钱的业务等，这样很容易给人一种爱说大话、不切实际的感觉。\n\n回答样本： 根据我对贵公司的了解，以及我在这份工作上所累积的专业、经验及人脉，相信正是贵公司所找寻的人才。而我在工作态度、eq上，也有圆融、成熟的一面，和主管、同事都能合作愉快。\n\n\n# 除了本公司外，还应聘了哪些公司?\n\n回答提示： 这是相当多公司会问的问题，其用意是要概略知道应征者的求职志向，所以这并非绝对是负面答案，就算不便说出公司名称，也应回答“销售同种产品的公司”，如果应聘的其他公司是不同业界，容易让人产生无法信任的感觉。\n\n\n# 你并非毕业于名牌院校?\n\n回答样本： 是否毕业于名牌院校不重要，重要的是有能力完成您交给我的工作，我接受了xx的职业培训，掌握的技能完全可以胜任贵公司现在工作，而且我比一些名牌院校的应届毕业生的动手能力还要强，我想我更适合贵公司这个职位。\n\n\n# 怎样看待学历和能力?\n\n回答样本： 学历我想只要是大学专科的学历，就表明觉得我具备了根本的学习能力。剩下的，你是学士也好，还是博士也好，对于这一点的讨论，不是看你学了多少知识，而是看你在这个领域上发挥了什么，也就是所说的能力问题。一个人工作能力的高低直接决定其职场命运，而学历的高低只是进入一个企业的敲门砖，如果公司把学历卡在博士上我就无法进入贵公司，当然这不一定只是我个人的损失，如果一个专科生都能完成的工作，您又何必非要招聘一位博士生呢?\n\n\n# 谈谈如何适应办公室工作的新环境?\n\n回答样本： ①办公室里每个人都有各自的岗位与职责，不得擅离岗位。②根据领导指示和工作安排，制定工作计划，提前预备，并按计划完成。③多请示并及时汇报，遇到不明白的要虚心请教。④抓间隙时间，多学习，努力提高自己的政治素质和业务水平。\n\n\n# 谈谈对这个职务的期许?\n\n回答提示： 回答前不妨先询问公司对这项职务的责任认定及归属，因为每一家公司的状况不尽相同，以免说了一堆理想抱负却发现牛头不对马嘴。\n\n回答样本： 希望能借此发挥我的所学及专长，同时也吸收贵公司在这方面的经验，就公司、我个人而言，缔造双赢的局面。\n\n\n# 何时可以到职?\n\n回答提示： 大多数企业会关心就职时间，最好是回答：“如果被录用的话，到职日可以按公司规定上班”，但是如果还未辞去上一个工作、上班时间又太近，似乎有些强人所难，因为交接至少要一个月的时间，应进一步说明原因，录取公司应该会通融的。",charsets:{cjk:!0},lastUpdated:"2022/12/03, 17:31:39",lastUpdatedTimestamp:1670059899e3},{title:"反向拆解让人上瘾的套路，找回自律",frontmatter:{title:"反向拆解让人上瘾的套路，找回自律",date:"2020-07-22T13:05:49.000Z",permalink:"/pages/d6d331/",categories:["更多","心情杂货"],tags:["心理","自律"],author:{name:"xugaoyi",link:"https://github.com/xugaoyi"}},regularPath:"/07.%E6%9B%B4%E5%A4%9A/05.%E5%BF%83%E6%83%85%E6%9D%82%E8%B4%A7/10.%E5%8F%8D%E5%90%91%E6%8B%86%E8%A7%A3%E8%AE%A9%E4%BA%BA%E4%B8%8A%E7%98%BE%E7%9A%84%E5%A5%97%E8%B7%AF%EF%BC%8C%E6%89%BE%E5%9B%9E%E8%87%AA%E5%BE%8B.html",relativePath:"07.更多/05.心情杂货/10.反向拆解让人上瘾的套路，找回自律.md",key:"v-e2d6b94c",path:"/pages/d6d331/",headers:[{level:3,title:"1.诱人的目标",slug:"_1-诱人的目标",normalizedTitle:"1.诱人的目标",charIndex:451},{level:3,title:"2.无法抵挡无法预知的积极反馈",slug:"_2-无法抵挡无法预知的积极反馈",normalizedTitle:"2.无法抵挡无法预知的积极反馈",charIndex:505},{level:3,title:"3.渐进式的进步和改善的感觉",slug:"_3-渐进式的进步和改善的感觉",normalizedTitle:"3.渐进式的进步和改善的感觉",charIndex:678},{level:3,title:"4.随着时间的推移越来越困难的任务",slug:"_4-随着时间的推移越来越困难的任务",normalizedTitle:"4.随着时间的推移越来越困难的任务",charIndex:718},{level:3,title:"5.需要解决却又暂未解决的紧张感",slug:"_5-需要解决却又暂未解决的紧张感",normalizedTitle:"5.需要解决却又暂未解决的紧张感",charIndex:760},{level:3,title:"6.强大的社会联系",slug:"_6-强大的社会联系",normalizedTitle:"6.强大的社会联系",charIndex:836},{level:2,title:"找回自律，收获积极而长久的快乐",slug:"找回自律-收获积极而长久的快乐",normalizedTitle:"找回自律，收获积极而长久的快乐",charIndex:909}],excerpt:'<h1 id="反向拆解让人上瘾的套路-找回自律"><a class="header-anchor" href="#反向拆解让人上瘾的套路-找回自律">#</a> 反向拆解让人上瘾的套路，找回自律</h1>\n<p>当你打开手机准备学习或者查个资料的时候，很有可能不知不觉的就脱离的正规... 某某app发来通知：xx明星官宣啦、xx手游重磅上线，一起开启修仙之旅吧！ xx结衣发布新番-4k画质&amp;AR体验、99+未读信息、支付宝到账100万元.... 你心想，就看一会，就一会儿... 不知不觉两三个小时过去了，你开始焦躁、后悔、自责。第二天，你又掉进相同的坑里。你可能会纳闷，为什么我的自制力这么差？为什么对某件事欲罢不能？</p>\n',headersStr:"1.诱人的目标 2.无法抵挡无法预知的积极反馈 3.渐进式的进步和改善的感觉 4.随着时间的推移越来越困难的任务 5.需要解决却又暂未解决的紧张感 6.强大的社会联系 找回自律，收获积极而长久的快乐",content:"# 反向拆解让人上瘾的套路，找回自律\n\n当你打开手机准备学习或者查个资料的时候，很有可能不知不觉的就脱离的正规... 某某app发来通知：xx明星官宣啦、xx手游重磅上线，一起开启修仙之旅吧！ xx结衣发布新番-4k画质&AR体验、99+未读信息、支付宝到账100万元.... 你心想，就看一会，就一会儿... 不知不觉两三个小时过去了，你开始焦躁、后悔、自责。第二天，你又掉进相同的坑里。你可能会纳闷，为什么我的自制力这么差？为什么对某件事欲罢不能？\n\n《欲罢不能》\n\n数字时代比人类历史上的任何时代都更容易上瘾...Facebook、Instagram、网络色情、网购在下钩... 问题不出在人缺乏意志力上，而在于“屏幕那边有数千人在努力工作，为的就是破坏你的自律”\n\n来自《欲罢不能-刷屏时代如何摆脱行为上瘾》一书\n\n我们正在被一个算法和娱乐所包裹的电子'海洛因'中却不自知，想要摆脱这些上瘾行为，第一步就是反向拆解那些让我们上瘾的产品的套路。《欲罢不能》书中总结了六个让人上瘾的钩子：\n\n\n# 1.诱人的目标\n\n * 色情片\n * 游戏中成为\"王者\"、层出不穷的高颜值皮肤...\n * ...\n\n\n# 2.无法抵挡无法预知的积极反馈\n\n * 社交中的点赞功能\n * 某音十几秒一条的视频，不需要你动脑就可以轻轻松松获得哈哈大笑的快感，有时候还有一种我学习到了的感觉，你永远猜不到下一条将会出现什么惊喜。你刷的越多算法就越精准，越知道你的情绪G点在哪里，你就越容易被俘获。\n * 直播中的打赏被主播表示的感谢和送上的'么么哒'\n * ...\n\n\n# 3.渐进式的进步和改善的感觉\n\n * 游戏中的升级策略\n\n * ...\n\n\n# 4.随着时间的推移越来越困难的任务\n\n * 游戏中的升级策略\n * ...\n\n\n# 5.需要解决却又暂未解决的紧张感\n\n * 电影或电视剧结尾有意制造的一个悬念，给你一种未完成的紧张感，你迫切想知道后面会发生什么\n * ...\n\n\n# 6.强大的社会联系\n\n * 与队友相约开黑\n\n * 游戏中能彰显地位、财富、能力等的装备（如：吃鸡游戏中的玛莎拉蒂皮肤）\n\n * ...\n\n\n# 找回自律，收获积极而长久的快乐\n\n获得快乐的方式，你可以选择沉迷在你的手机里刷视频、打游戏、煲剧，毫不费力的收货大把的快乐。你还可以选择一条更难的路：选择自律、选择延迟满足、选择会让你不那么舒服的努力和成长。\n\n收获快乐的方式没有绝对的对与错，但是，如果快乐触手可及，这种廉价的快乐也就不值得珍惜，随时都可能抛弃。过后还可能让你浪费了大把时间，该做的正事没有完成，你感觉空虚、焦躁、自责... 既然如此，我们一起选择那条更难的路吧！\n\n上瘾的案例收集\n\n想想你生活中让你上瘾的案例，对照上面让人上瘾的钩子，看看是哪个钩子吧~~欢迎留言哦~",normalizedContent:"# 反向拆解让人上瘾的套路，找回自律\n\n当你打开手机准备学习或者查个资料的时候，很有可能不知不觉的就脱离的正规... 某某app发来通知：xx明星官宣啦、xx手游重磅上线，一起开启修仙之旅吧！ xx结衣发布新番-4k画质&ar体验、99+未读信息、支付宝到账100万元.... 你心想，就看一会，就一会儿... 不知不觉两三个小时过去了，你开始焦躁、后悔、自责。第二天，你又掉进相同的坑里。你可能会纳闷，为什么我的自制力这么差？为什么对某件事欲罢不能？\n\n《欲罢不能》\n\n数字时代比人类历史上的任何时代都更容易上瘾...facebook、instagram、网络色情、网购在下钩... 问题不出在人缺乏意志力上，而在于“屏幕那边有数千人在努力工作，为的就是破坏你的自律”\n\n来自《欲罢不能-刷屏时代如何摆脱行为上瘾》一书\n\n我们正在被一个算法和娱乐所包裹的电子'海洛因'中却不自知，想要摆脱这些上瘾行为，第一步就是反向拆解那些让我们上瘾的产品的套路。《欲罢不能》书中总结了六个让人上瘾的钩子：\n\n\n# 1.诱人的目标\n\n * 色情片\n * 游戏中成为\"王者\"、层出不穷的高颜值皮肤...\n * ...\n\n\n# 2.无法抵挡无法预知的积极反馈\n\n * 社交中的点赞功能\n * 某音十几秒一条的视频，不需要你动脑就可以轻轻松松获得哈哈大笑的快感，有时候还有一种我学习到了的感觉，你永远猜不到下一条将会出现什么惊喜。你刷的越多算法就越精准，越知道你的情绪g点在哪里，你就越容易被俘获。\n * 直播中的打赏被主播表示的感谢和送上的'么么哒'\n * ...\n\n\n# 3.渐进式的进步和改善的感觉\n\n * 游戏中的升级策略\n\n * ...\n\n\n# 4.随着时间的推移越来越困难的任务\n\n * 游戏中的升级策略\n * ...\n\n\n# 5.需要解决却又暂未解决的紧张感\n\n * 电影或电视剧结尾有意制造的一个悬念，给你一种未完成的紧张感，你迫切想知道后面会发生什么\n * ...\n\n\n# 6.强大的社会联系\n\n * 与队友相约开黑\n\n * 游戏中能彰显地位、财富、能力等的装备（如：吃鸡游戏中的玛莎拉蒂皮肤）\n\n * ...\n\n\n# 找回自律，收获积极而长久的快乐\n\n获得快乐的方式，你可以选择沉迷在你的手机里刷视频、打游戏、煲剧，毫不费力的收货大把的快乐。你还可以选择一条更难的路：选择自律、选择延迟满足、选择会让你不那么舒服的努力和成长。\n\n收获快乐的方式没有绝对的对与错，但是，如果快乐触手可及，这种廉价的快乐也就不值得珍惜，随时都可能抛弃。过后还可能让你浪费了大把时间，该做的正事没有完成，你感觉空虚、焦躁、自责... 既然如此，我们一起选择那条更难的路吧！\n\n上瘾的案例收集\n\n想想你生活中让你上瘾的案例，对照上面让人上瘾的钩子，看看是哪个钩子吧~~欢迎留言哦~",charsets:{cjk:!0},lastUpdated:"2022/12/03, 17:31:39",lastUpdatedTimestamp:1670059899e3},{title:"2分钟规则",frontmatter:{title:"2分钟规则",date:"2020-11-09T11:05:29.000Z",permalink:"/pages/baaa02/",categories:["更多","实用技巧"],tags:["实用技巧","文摘"],author:{name:"xugaoyi",link:"https://github.com/xugaoyi"}},regularPath:"/07.%E6%9B%B4%E5%A4%9A/10.%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/01.2%E5%88%86%E9%92%9F%E8%A7%84%E5%88%99.html",relativePath:"07.更多/10.实用技巧/01.2分钟规则.md",key:"v-3f336508",path:"/pages/baaa02/",excerpt:"<p>每当你发现很难开始执行某项任务时，可以试试将其缩减成2分钟的版本。</p>\n<ul>\n<li>看一本书 → 看一页书</li>\n<li>写一篇文章 → 写一句话</li>\n<li>跑10公里 → 穿上跑鞋</li>\n<li>做100次俯卧撑 → 做1次俯卧撑</li>\n<li>多吃蔬菜水果 → 吃一个水果</li>\n<li>编写一个程序 → 编写一个函数 → 编写一行代码</li>\n</ul>\n",headersStr:null,content:"每当你发现很难开始执行某项任务时，可以试试将其缩减成2分钟的版本。\n\n * 看一本书 → 看一页书\n * 写一篇文章 → 写一句话\n * 跑10公里 → 穿上跑鞋\n * 做100次俯卧撑 → 做1次俯卧撑\n * 多吃蔬菜水果 → 吃一个水果\n * 编写一个程序 → 编写一个函数 → 编写一行代码\n\n这样做的目的是使上手变得超级容易，让你先上手再说。一旦开始做了（这可能是最艰难的一步），你就会开始有动力，可能会继续做下去。\n\n * 阅读一页 → 阅读10页 → 读完第一章\n * 写一个句子 → 写文章的开头 → 写出正文\n * 穿上跑鞋 → 步行5分钟 → 跑步5分钟\n\n一旦开始，继续做下去就会容易得多。有时，你甚至会发现，自己在不知不觉间已经完成了任务。\n\n> 本文摘录自 https://hoanhan.co/2-minute-rule",normalizedContent:"每当你发现很难开始执行某项任务时，可以试试将其缩减成2分钟的版本。\n\n * 看一本书 → 看一页书\n * 写一篇文章 → 写一句话\n * 跑10公里 → 穿上跑鞋\n * 做100次俯卧撑 → 做1次俯卧撑\n * 多吃蔬菜水果 → 吃一个水果\n * 编写一个程序 → 编写一个函数 → 编写一行代码\n\n这样做的目的是使上手变得超级容易，让你先上手再说。一旦开始做了（这可能是最艰难的一步），你就会开始有动力，可能会继续做下去。\n\n * 阅读一页 → 阅读10页 → 读完第一章\n * 写一个句子 → 写文章的开头 → 写出正文\n * 穿上跑鞋 → 步行5分钟 → 跑步5分钟\n\n一旦开始，继续做下去就会容易得多。有时，你甚至会发现，自己在不知不觉间已经完成了任务。\n\n> 本文摘录自 https://hoanhan.co/2-minute-rule",charsets:{cjk:!0},lastUpdated:"2022/12/03, 17:31:39",lastUpdatedTimestamp:1670059899e3},{title:"ssh connect to host github.com port 22 Connection refused",frontmatter:{title:"ssh connect to host github.com port 22 Connection refused",date:"2022-09-26T17:00:47.000Z",permalink:"/pages/324a30/",tags:["遭遇问题"]},regularPath:"/07.%E6%9B%B4%E5%A4%9A/09.%E9%81%AD%E9%81%87%E9%97%AE%E9%A2%98/01.ssh%20connect%20to%20host%20github.com%20port%2022%20Connection%20refused.html",relativePath:"07.更多/09.遭遇问题/01.ssh connect to host github.com port 22 Connection refused.md",key:"v-5a7e209d",path:"/pages/324a30/",headers:[{level:2,title:"遭遇问题",slug:"遭遇问题",normalizedTitle:"遭遇问题",charIndex:38},{level:2,title:"查找原因",slug:"查找原因",normalizedTitle:"查找原因",charIndex:137},{level:2,title:"解决方案",slug:"解决方案",normalizedTitle:"解决方案",charIndex:1087},{level:3,title:"方案一 更换22端口为443",slug:"方案一-更换22端口为443",normalizedTitle:"方案一 更换22端口为443",charIndex:1177},{level:3,title:"方案二 在系统hosts文件中添加IP和域名映射",slug:"方案二-在系统hosts文件中添加ip和域名映射",normalizedTitle:"方案二 在系统hosts文件中添加ip和域名映射",charIndex:1297},{level:2,title:"测试",slug:"测试",normalizedTitle:"测试",charIndex:143},{level:2,title:"github.com DNS解析污染导致 SSH 无法连接到 GitHub",slug:"github-com-dns解析污染导致-ssh-无法连接到-github",normalizedTitle:"github.com dns解析污染导致 ssh 无法连接到 github",charIndex:1711}],headersStr:"遭遇问题 查找原因 解决方案 方案一 更换22端口为443 方案二 在系统hosts文件中添加IP和域名映射 测试 github.com DNS解析污染导致 SSH 无法连接到 GitHub",content:"参考：https://iter01.com/688100.html\n\n\n# 遭遇问题\n\nGit push 到GitHub仓库时失败：\n\nssh: connect to host github.com port 22: Connection refused\n\n\n1\n\n\n\n# 查找原因\n\n测试\n\nssh -T git@github.com\n\n\n1\n\n\n> ssh -T user@host命令通常用于测试连接情况。\n\n详细日志（上面的命令加个选项-v）\n\nssh -vT git@github.com\n\n\n1\n\n>  * -v表示verbose，會打出详细日志。\n>  * -T表示Disable pseudo-tty allocation，连接禁止分配伪终端（当用ssh或telnet等登录系统时，系统分配给我们的终端就是伪终端。）。\n\n$ ssh -vT git@github.com\nOpenSSH_9.0p1, OpenSSL 1.1.1o  3 May 2022\ndebug1: Reading configuration data /etc/ssh/ssh_config\ndebug1: Connecting to github.com [::1] port 22.\ndebug1: connect to address ::1 port 22: Connection refused\ndebug1: Connecting to github.com [127.0.0.1] port 22.\ndebug1: connect to address 127.0.0.1 port 22: Connection refused\nssh: connect to host github.com port 22: Connection refused\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n> 從上面的資訊馬上就發現了詭異的地方，連線github.com的地址居然是::1和127.0.0.1。前者是IPV6的localhost地址，後者是IPV4的localhost地址。\n> \n> 到這裡問題就很明確了，是DNS解析出問題了，導致github.com域名被解析成了localhost的ip地址，就自然連不上GitHub了。\n> \n> Windows下執行ipconfig /flushdns 清楚DNS快取後也沒用，最後修改hosts檔案，增加一條github.com的域名對映搞定。\n> \n> https://iter01.com/688100.html\n\n\n# 解决方案\n\n方案一：更换22端口为443\n\n方案二：在系统hosts文件中添加IP和域名映射\n\n> 如果使用了其中一个方案还存在某些问题的话，可以考虑两个方案可同时使用。\n\n\n# 方案一 更换22端口为443\n\n在./ssh下的config文件（如无该文件则新建即可）中添加如下内容：\n\nHost github.com\n  Hostname ssh.github.com\n  Port 443\n\n\n1\n2\n3\n\n\n\n# 方案二 在系统hosts文件中添加IP和域名映射\n\n查询 github.com IP地址\n\nnslookup github.com 8.8.8.8\n\n\n1\n\n\n> 8.8.8.8是Google的DNS伺服器地址\n\n或者使用https://www.ipaddress.com/网站查询IP地址\n\n打开本机hosts文件，追加一条映射：\n\n140.82.114.3    github.com\n\n\n1\n\n\n> Windows 的 hosts 文件在 C:\\Windows\\System32\\drivers\\etc 路径下。\n\n\n# 测试\n\nssh -T git@github.com\n\n\n1\n\n\n若得出如下结果，则成功解决该问题：\n\nHi JimFKppt! You've successfully authenticated, but GitHub does not provide shell access.\n\n\n1\n\n\n\n# github.com DNS解析污染导致 SSH 无法连接到 GitHub\n\nssh: connect to host github.com port 22: Connection refused\n\n\n1\n\n\nDNS解析污染有两种可能的原因：\n\n * DNS解析被运营商劫持\n * 用了科学上网",normalizedContent:"参考：https://iter01.com/688100.html\n\n\n# 遭遇问题\n\ngit push 到github仓库时失败：\n\nssh: connect to host github.com port 22: connection refused\n\n\n1\n\n\n\n# 查找原因\n\n测试\n\nssh -t git@github.com\n\n\n1\n\n\n> ssh -t user@host命令通常用于测试连接情况。\n\n详细日志（上面的命令加个选项-v）\n\nssh -vt git@github.com\n\n\n1\n\n>  * -v表示verbose，會打出详细日志。\n>  * -t表示disable pseudo-tty allocation，连接禁止分配伪终端（当用ssh或telnet等登录系统时，系统分配给我们的终端就是伪终端。）。\n\n$ ssh -vt git@github.com\nopenssh_9.0p1, openssl 1.1.1o  3 may 2022\ndebug1: reading configuration data /etc/ssh/ssh_config\ndebug1: connecting to github.com [::1] port 22.\ndebug1: connect to address ::1 port 22: connection refused\ndebug1: connecting to github.com [127.0.0.1] port 22.\ndebug1: connect to address 127.0.0.1 port 22: connection refused\nssh: connect to host github.com port 22: connection refused\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n> 從上面的資訊馬上就發現了詭異的地方，連線github.com的地址居然是::1和127.0.0.1。前者是ipv6的localhost地址，後者是ipv4的localhost地址。\n> \n> 到這裡問題就很明確了，是dns解析出問題了，導致github.com域名被解析成了localhost的ip地址，就自然連不上github了。\n> \n> windows下執行ipconfig /flushdns 清楚dns快取後也沒用，最後修改hosts檔案，增加一條github.com的域名對映搞定。\n> \n> https://iter01.com/688100.html\n\n\n# 解决方案\n\n方案一：更换22端口为443\n\n方案二：在系统hosts文件中添加ip和域名映射\n\n> 如果使用了其中一个方案还存在某些问题的话，可以考虑两个方案可同时使用。\n\n\n# 方案一 更换22端口为443\n\n在./ssh下的config文件（如无该文件则新建即可）中添加如下内容：\n\nhost github.com\n  hostname ssh.github.com\n  port 443\n\n\n1\n2\n3\n\n\n\n# 方案二 在系统hosts文件中添加ip和域名映射\n\n查询 github.com ip地址\n\nnslookup github.com 8.8.8.8\n\n\n1\n\n\n> 8.8.8.8是google的dns伺服器地址\n\n或者使用https://www.ipaddress.com/网站查询ip地址\n\n打开本机hosts文件，追加一条映射：\n\n140.82.114.3    github.com\n\n\n1\n\n\n> windows 的 hosts 文件在 c:\\windows\\system32\\drivers\\etc 路径下。\n\n\n# 测试\n\nssh -t git@github.com\n\n\n1\n\n\n若得出如下结果，则成功解决该问题：\n\nhi jimfkppt! you've successfully authenticated, but github does not provide shell access.\n\n\n1\n\n\n\n# github.com dns解析污染导致 ssh 无法连接到 github\n\nssh: connect to host github.com port 22: connection refused\n\n\n1\n\n\ndns解析污染有两种可能的原因：\n\n * dns解析被运营商劫持\n * 用了科学上网",charsets:{cjk:!0},lastUpdated:"2022/12/03, 17:31:39",lastUpdatedTimestamp:1670059899e3},{title:"GitHub + jsDelivr + TinyPNG+ PicGo 打造稳定快速、高效免费图床",frontmatter:{title:"GitHub + jsDelivr + TinyPNG+ PicGo 打造稳定快速、高效免费图床",date:"2020-01-03T12:55:43.000Z",permalink:"/pages/a5f73af5185fdf0a",categories:["实用技巧"],tags:[null],author:{name:"xugaoyi",link:"https://github.com/xugaoyi"}},regularPath:"/07.%E6%9B%B4%E5%A4%9A/10.%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/03.GitHub%20+%20jsDelivr%20+%20TinyPNG+%20PicGo%20%E6%89%93%E9%80%A0%E7%A8%B3%E5%AE%9A%E5%BF%AB%E9%80%9F%E3%80%81%E9%AB%98%E6%95%88%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A.html",relativePath:"07.更多/10.实用技巧/03.GitHub + jsDelivr + TinyPNG+ PicGo 打造稳定快速、高效免费图床.md",key:"v-67a807bd",path:"/pages/a5f73af5185fdf0a/",headers:[{level:2,title:"前言",slug:"前言",normalizedTitle:"前言",charIndex:55},{level:2,title:"图床打造",slug:"图床打造",normalizedTitle:"图床打造",charIndex:590}],excerpt:'<h1 id="github-jsdelivr-tinypng-picgo-打造稳定快速、高效免费图床"><a class="header-anchor" href="#github-jsdelivr-tinypng-picgo-打造稳定快速、高效免费图床">#</a> GitHub + jsDelivr + TinyPNG+ PicGo 打造稳定快速、高效免费图床</h1>\n<h2 id="前言"><a class="header-anchor" href="#前言">#</a> 前言</h2>\n<p><strong>Q：为什么要使用图床呢？什么是图床？</strong></p>\n<p>A：写博客文章时，图片的上传和存放是一个问题，有的朋友可能会把图片放到和博客同一个仓库当中，使用相对路径来引用，这样后期维护起来会比较麻烦。还有的朋友会在不同的平台发布同一篇文章，这样一来每个平台都要上传图片，为了解决这些问题，比较推荐的做法是把图片统一上传到一个在线的第三方静态资源库中，我们把这个资源库称为图床，其返回一个图片的URL，使用<code>markdown+图片url</code>的方式写作文章，一次编写，到处使用~</p>\n',headersStr:"前言 图床打造",content:"# GitHub + jsDelivr + TinyPNG+ PicGo 打造稳定快速、高效免费图床\n\n\n# 前言\n\nQ：为什么要使用图床呢？什么是图床？\n\nA：写博客文章时，图片的上传和存放是一个问题，有的朋友可能会把图片放到和博客同一个仓库当中，使用相对路径来引用，这样后期维护起来会比较麻烦。还有的朋友会在不同的平台发布同一篇文章，这样一来每个平台都要上传图片，为了解决这些问题，比较推荐的做法是把图片统一上传到一个在线的第三方静态资源库中，我们把这个资源库称为图床，其返回一个图片的URL，使用markdown+图片url的方式写作文章，一次编写，到处使用~\n\n更好的选择...\n\n以下内容是比较旧的，现在我发现一个更好用，配置更方便的图床工具：https://picx.xpoet.cn/ 使用方法看一下他网站的使用教程就行。 撒由那拉~~\n\n2021.07.04\n\nQ：图床的选择\n\nA：推荐使用GitHub作为图床，特点是免费、稳定，有一个小缺点是国内访问速度慢，不过没关系，可以使用jsDelivr免费CDN加速。\n\nQ：jsDelivr是什么？\n\nA：jsDelivr是国外的一家优秀的公共 CDN 服务提供商，该平台是首个「打通中国大陆与海外的免费CDN服务」，无须担心中国防火墙问题而影响使用。官网：http://www.jsdelivr.com/\n\n\n# 图床打造\n\n 1. 新建GitHub仓库，注意仓库要设置成公开\n\n 2. 参照 官方文档 生成一个token密钥\n\n 3. 在 这里 下载PicGo，安装完成后打开，图床设置 选 GitHub图床，并填写相应的信息\n    \n    * 仓库名：前面新建的仓库，格式：<用户名>/<仓库名>\n    * 分支名：填写主分支master即可\n    * Token：前面生成的token密钥\n    * 存储路径：按你自己的需求填写\n    * 自定义域名：图片上传后，PicGo 会按照 自定义域名+上传的图片名 的方式生成访问链接，此处我们填写jsDelivr的CDN加速地址，格式：https://cdn.jsdelivr.net/gh/<用户名>/<仓库名>\n\n\n\n 4. 使用https://tinypng.cn/压缩你要上传的图片（如图片已经很小或你有更好的压缩工具可省略这一步）\n 5. 在PigGo的上传区上传你的图片，到相册一键复制刚刚上传的图片URL，至此，你就可以在你的文章当中愉快的插入图片啦~， 更多功能自己去探索吧~~\n\n",normalizedContent:"# github + jsdelivr + tinypng+ picgo 打造稳定快速、高效免费图床\n\n\n# 前言\n\nq：为什么要使用图床呢？什么是图床？\n\na：写博客文章时，图片的上传和存放是一个问题，有的朋友可能会把图片放到和博客同一个仓库当中，使用相对路径来引用，这样后期维护起来会比较麻烦。还有的朋友会在不同的平台发布同一篇文章，这样一来每个平台都要上传图片，为了解决这些问题，比较推荐的做法是把图片统一上传到一个在线的第三方静态资源库中，我们把这个资源库称为图床，其返回一个图片的url，使用markdown+图片url的方式写作文章，一次编写，到处使用~\n\n更好的选择...\n\n以下内容是比较旧的，现在我发现一个更好用，配置更方便的图床工具：https://picx.xpoet.cn/ 使用方法看一下他网站的使用教程就行。 撒由那拉~~\n\n2021.07.04\n\nq：图床的选择\n\na：推荐使用github作为图床，特点是免费、稳定，有一个小缺点是国内访问速度慢，不过没关系，可以使用jsdelivr免费cdn加速。\n\nq：jsdelivr是什么？\n\na：jsdelivr是国外的一家优秀的公共 cdn 服务提供商，该平台是首个「打通中国大陆与海外的免费cdn服务」，无须担心中国防火墙问题而影响使用。官网：http://www.jsdelivr.com/\n\n\n# 图床打造\n\n 1. 新建github仓库，注意仓库要设置成公开\n\n 2. 参照 官方文档 生成一个token密钥\n\n 3. 在 这里 下载picgo，安装完成后打开，图床设置 选 github图床，并填写相应的信息\n    \n    * 仓库名：前面新建的仓库，格式：<用户名>/<仓库名>\n    * 分支名：填写主分支master即可\n    * token：前面生成的token密钥\n    * 存储路径：按你自己的需求填写\n    * 自定义域名：图片上传后，picgo 会按照 自定义域名+上传的图片名 的方式生成访问链接，此处我们填写jsdelivr的cdn加速地址，格式：https://cdn.jsdelivr.net/gh/<用户名>/<仓库名>\n\n\n\n 4. 使用https://tinypng.cn/压缩你要上传的图片（如图片已经很小或你有更好的压缩工具可省略这一步）\n 5. 在piggo的上传区上传你的图片，到相册一键复制刚刚上传的图片url，至此，你就可以在你的文章当中愉快的插入图片啦~， 更多功能自己去探索吧~~\n\n",charsets:{cjk:!0},lastUpdated:"2022/12/03, 17:31:39",lastUpdatedTimestamp:1670059899e3},{title:"Clash绕过系统代理",frontmatter:{title:"Clash绕过系统代理",date:"2022-04-07T21:57:49.000Z",permalink:"/pages/966fd0/",tags:["Clash"]},regularPath:"/07.%E6%9B%B4%E5%A4%9A/10.%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/02.Clash%E7%BB%95%E8%BF%87%E7%B3%BB%E7%BB%9F%E4%BB%A3%E7%90%86.html",relativePath:"07.更多/10.实用技巧/02.Clash绕过系统代理.md",key:"v-360a8800",path:"/pages/966fd0/",headers:[{level:2,title:"操作",slug:"操作",normalizedTitle:"操作",charIndex:127}],headersStr:"操作",content:'# Clash绕过系统代理\n\n> 维基百科：代理（英语：Proxy）\n\nClash连接的时候即处于“系统代理”状态，而一些国内的网站在连接状态下响应很慢甚至拒绝响应（比如某慧树，某星学习通）。“绕过系统代理”也就相当于给这些网站加入“白名单”。\n\n\n# 操作\n\n打开Clash ——> Settings ——> System Proxy ——> Bypass Domain/IPNet\n\n点击Bypass Domain/IPNet 右边的 Edit 按钮：\n\n\n\n打开的编辑界面显示如下：\n\nbypass:\n  - localhost\n  - <local>\n\n\n1\n2\n3\n\n\n> 在 - localhost 和 - <local> 之间可能已存在一些要绕过的IP地址，不要动它们\n\n像下面这样编辑：\n\nbypass:\n  - localhost\n  - "*.zhihuishu.com"\n  - "*.chaoxing.com"\n  - <local>\n\n\n1\n2\n3\n4\n5\n\n\n> 域名放在双引号内，域名的第一个点号前可用 * （通配符）代替\n\n完成，保存退出即可。',normalizedContent:'# clash绕过系统代理\n\n> 维基百科：代理（英语：proxy）\n\nclash连接的时候即处于“系统代理”状态，而一些国内的网站在连接状态下响应很慢甚至拒绝响应（比如某慧树，某星学习通）。“绕过系统代理”也就相当于给这些网站加入“白名单”。\n\n\n# 操作\n\n打开clash ——> settings ——> system proxy ——> bypass domain/ipnet\n\n点击bypass domain/ipnet 右边的 edit 按钮：\n\n\n\n打开的编辑界面显示如下：\n\nbypass:\n  - localhost\n  - <local>\n\n\n1\n2\n3\n\n\n> 在 - localhost 和 - <local> 之间可能已存在一些要绕过的ip地址，不要动它们\n\n像下面这样编辑：\n\nbypass:\n  - localhost\n  - "*.zhihuishu.com"\n  - "*.chaoxing.com"\n  - <local>\n\n\n1\n2\n3\n4\n5\n\n\n> 域名放在双引号内，域名的第一个点号前可用 * （通配符）代替\n\n完成，保存退出即可。',charsets:{cjk:!0},lastUpdated:"2022/12/03, 17:31:39",lastUpdatedTimestamp:1670059899e3},{title:"关于WSL运行某些第三方命令很慢的原因",frontmatter:{title:"关于WSL运行某些第三方命令很慢的原因",date:"2022-09-22T23:05:58.000Z",permalink:"/pages/9c98db/",tags:["WSL"]},regularPath:"/07.%E6%9B%B4%E5%A4%9A/10.%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/04.%E5%85%B3%E4%BA%8EWSL%E8%BF%90%E8%A1%8C%E6%9F%90%E4%BA%9B%E7%AC%AC%E4%B8%89%E6%96%B9%E5%91%BD%E4%BB%A4%E5%BE%88%E6%85%A2%E7%9A%84%E5%8E%9F%E5%9B%A0.html",relativePath:"07.更多/10.实用技巧/04.关于WSL运行某些第三方命令很慢的原因.md",key:"v-d028a74a",path:"/pages/9c98db/",headers:[{level:2,title:"解决方案",slug:"解决方案",normalizedTitle:"解决方案",charIndex:273}],headersStr:"解决方案",content:"# 关于WSL运行某些第三方命令很慢的原因\n\n在 WSL 上运行第三方软件，比如命令纠错软件 thefuck，速度极其之慢。\n\n这很有可能是因为WSL会同步 Windows 系统本身的环境变量，这使 WSL 的 PATH 路径变得非常非常长，新追加到最后的路径需要等前面的路径都检索完后才能被检索。\n\necho $PATH  # 显示PATH变量\n\n\n1\n\n\n提示\n\n当然也只是我的猜测。另一种可能是访问检索那些Windows系统自身的环境变量导致速度变慢。\n\n要想解决这个问题，就要关闭 WSL 同步 Windows 环境变量的功能。\n\n\n# 解决方案\n\nhttps://github.com/microsoft/WSL/issues/1640#issuecomment-616887435\n\n无需尝试摆弄路径或注册表，只需禁用该功能即可。\n\nin WSL:\n\nsudo vi /etc/wsl.conf\n\n\n1\n\n\nadd:\n\n[interop]\nappendWindowsPath = false\n\n\n1\n2\n\n\n然后在Windows中找到您的发行版名称并终止它，以便获取配置更改：\n\nwsl.exe --list\nwsl.exe --terminate <distro_name>\n\n\n1\n2\n\n\n重启启动 WSL 即可。",normalizedContent:"# 关于wsl运行某些第三方命令很慢的原因\n\n在 wsl 上运行第三方软件，比如命令纠错软件 thefuck，速度极其之慢。\n\n这很有可能是因为wsl会同步 windows 系统本身的环境变量，这使 wsl 的 path 路径变得非常非常长，新追加到最后的路径需要等前面的路径都检索完后才能被检索。\n\necho $path  # 显示path变量\n\n\n1\n\n\n提示\n\n当然也只是我的猜测。另一种可能是访问检索那些windows系统自身的环境变量导致速度变慢。\n\n要想解决这个问题，就要关闭 wsl 同步 windows 环境变量的功能。\n\n\n# 解决方案\n\nhttps://github.com/microsoft/wsl/issues/1640#issuecomment-616887435\n\n无需尝试摆弄路径或注册表，只需禁用该功能即可。\n\nin wsl:\n\nsudo vi /etc/wsl.conf\n\n\n1\n\n\nadd:\n\n[interop]\nappendwindowspath = false\n\n\n1\n2\n\n\n然后在windows中找到您的发行版名称并终止它，以便获取配置更改：\n\nwsl.exe --list\nwsl.exe --terminate <distro_name>\n\n\n1\n2\n\n\n重启启动 wsl 即可。",charsets:{cjk:!0},lastUpdated:"2022/12/03, 17:31:39",lastUpdatedTimestamp:1670059899e3},{title:"算法简介",frontmatter:{title:"算法简介",date:"2022-05-15T09:57:37.000Z",permalink:"/pages/85794d/",tags:[null]},regularPath:"/07.%E6%9B%B4%E5%A4%9A/110.Khan%20Academy%20-%20%E7%AE%97%E6%B3%95/00.%E7%AE%97%E6%B3%95%E7%AE%80%E4%BB%8B.html",relativePath:"07.更多/110.Khan Academy - 算法/00.算法简介.md",key:"v-dc102e1c",path:"/pages/85794d/",headers:[{level:3,title:"链接",slug:"链接",normalizedTitle:"链接",charIndex:16},{level:2,title:"什么是算法？",slug:"什么是算法",normalizedTitle:"什么是算法？",charIndex:89},{level:2,title:"写出更有趣的和重要的程序",slug:"写出更有趣的和重要的程序",normalizedTitle:"写出更有趣的和重要的程序",charIndex:190},{level:2,title:"一些著名的算法",slug:"一些著名的算法",normalizedTitle:"一些著名的算法",charIndex:250},{level:2,title:"怎样才算一个好的算法",slug:"怎样才算一个好的算法",normalizedTitle:"怎样才算一个好的算法",charIndex:612},{level:2,title:"渐进分析",slug:"渐进分析",normalizedTitle:"渐进分析",charIndex:734}],headersStr:"链接 什么是算法？ 写出更有趣的和重要的程序 一些著名的算法 怎样才算一个好的算法 渐进分析",content:'# 可汗学院 - 算法\n\n\n# 链接\n\nhttps://zh.khanacademy.org/computing/computer-science/algorithms\n\n\n# 什么是算法？\n\nWhat is an "algorithm(Noun)"?\n\n> 完成一个任务的一系列步骤。\n> \n> A set of steps to accomplish a task.\n\n\n# 写出更有趣的和重要的程序\n\n找到一个优秀的算法并且知道什么时候去使用它，会让你写出更有趣和更重要的计算机程序。\n\n\n# 一些著名的算法\n\n实时视频通话：实时视频是如何在互联网上快速传递的？\n\n> 音频和视频压缩算法(Compression Algorithm)\n\n地图导航是如何为你搜寻路线的？\n\n> 寻路算法(Route finding Algorithm)\n\n皮克斯如何通过一个房间的灯光给一个3D模型上色？\n\n> 渲染算法(Rendering Algorithm)\n\nNASA是怎样在国际空间站上部署太阳能板，以及如何重新调整它们的位置的？\n\n> 优化和进程算法(Optimization & Scheduling Algorithm)\n\n还有一些比较初级的算法:\n\n> 搜索算法\n> \n> 排序算法\n> \n> 递归算法\n\n这些算法尽管十分复杂（比把大象放进冰箱复杂多了），但它们的本质都是相同的，都是完成一个任务的一系列步骤。\n\n\n# 怎样才算一个好的算法\n\nWhat makes a good algorithm?\n\n两个最关键的标准：\n\n * 正确性(Correctness)——这个算法能解决一个问题\n * 效率(Efficiency)——这个算法能高效地解决问题\n\n\n# 渐进分析\n\n为了屏蔽程序语言和硬件带来的差异，计算机科学家们使用一种渐进分析的技术来独立地比较算法。',normalizedContent:'# 可汗学院 - 算法\n\n\n# 链接\n\nhttps://zh.khanacademy.org/computing/computer-science/algorithms\n\n\n# 什么是算法？\n\nwhat is an "algorithm(noun)"?\n\n> 完成一个任务的一系列步骤。\n> \n> a set of steps to accomplish a task.\n\n\n# 写出更有趣的和重要的程序\n\n找到一个优秀的算法并且知道什么时候去使用它，会让你写出更有趣和更重要的计算机程序。\n\n\n# 一些著名的算法\n\n实时视频通话：实时视频是如何在互联网上快速传递的？\n\n> 音频和视频压缩算法(compression algorithm)\n\n地图导航是如何为你搜寻路线的？\n\n> 寻路算法(route finding algorithm)\n\n皮克斯如何通过一个房间的灯光给一个3d模型上色？\n\n> 渲染算法(rendering algorithm)\n\nnasa是怎样在国际空间站上部署太阳能板，以及如何重新调整它们的位置的？\n\n> 优化和进程算法(optimization & scheduling algorithm)\n\n还有一些比较初级的算法:\n\n> 搜索算法\n> \n> 排序算法\n> \n> 递归算法\n\n这些算法尽管十分复杂（比把大象放进冰箱复杂多了），但它们的本质都是相同的，都是完成一个任务的一系列步骤。\n\n\n# 怎样才算一个好的算法\n\nwhat makes a good algorithm?\n\n两个最关键的标准：\n\n * 正确性(correctness)——这个算法能解决一个问题\n * 效率(efficiency)——这个算法能高效地解决问题\n\n\n# 渐进分析\n\n为了屏蔽程序语言和硬件带来的差异，计算机科学家们使用一种渐进分析的技术来独立地比较算法。',charsets:{cjk:!0},lastUpdated:"2022/12/03, 17:31:39",lastUpdatedTimestamp:1670059899e3},{title:"代码中的忒修斯之船",frontmatter:{title:"代码中的忒修斯之船",date:"2022-09-25T18:04:30.000Z",permalink:"/pages/c1ff23/",tags:["思考"]},regularPath:"/07.%E6%9B%B4%E5%A4%9A/11.Interesting/01.%E4%BB%A3%E7%A0%81%E4%B8%AD%E7%9A%84%E5%BF%92%E4%BF%AE%E6%96%AF%E4%B9%8B%E8%88%B9.html",relativePath:"07.更多/11.Interesting/01.代码中的忒修斯之船.md",key:"v-d9223254",path:"/pages/c1ff23/",headersStr:null,content:"# 代码中的忒修斯之船\n\n在西方哲学领域有一个有意思的论题：忒修斯之船（Ship of Theseus），亦称忒修斯悖论。\n\n英雄忒修斯的着名船只一直作为博物馆作品保存在港口。多年来，木制部件已经腐烂并被替换。一百年后，船上的所有木制部件都被替换掉了。\n\n问题是：当这艘船上的所有木制部件都被替换后，它还是忒修斯之船吗？",normalizedContent:"# 代码中的忒修斯之船\n\n在西方哲学领域有一个有意思的论题：忒修斯之船（ship of theseus），亦称忒修斯悖论。\n\n英雄忒修斯的着名船只一直作为博物馆作品保存在港口。多年来，木制部件已经腐烂并被替换。一百年后，船上的所有木制部件都被替换掉了。\n\n问题是：当这艘船上的所有木制部件都被替换后，它还是忒修斯之船吗？",charsets:{cjk:!0},lastUpdated:"2022/12/03, 17:31:39",lastUpdatedTimestamp:1670059899e3},{title:"VMware虚拟机科学上网",frontmatter:{title:"VMware虚拟机科学上网",date:"2022-10-21T16:49:40.000Z",permalink:"/pages/83a38b/",tags:[null]},regularPath:"/07.%E6%9B%B4%E5%A4%9A/10.%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/10.VMware%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91.html",relativePath:"07.更多/10.实用技巧/10.VMware虚拟机科学上网.md",key:"v-dd968700",path:"/pages/83a38b/",headers:[{level:2,title:"VMware 设置",slug:"vmware-设置",normalizedTitle:"vmware 设置",charIndex:96},{level:2,title:"科学上网软件允许局域网",slug:"科学上网软件允许局域网",normalizedTitle:"科学上网软件允许局域网",charIndex:112},{level:2,title:"查看主系统的 IP 地址",slug:"查看主系统的-ip-地址",normalizedTitle:"查看主系统的 ip 地址",charIndex:130},{level:2,title:"Linux 系统填入主系统 IP 地址和端口号",slug:"linux-系统填入主系统-ip-地址和端口号",normalizedTitle:"linux 系统填入主系统 ip 地址和端口号",charIndex:149}],headersStr:"VMware 设置 科学上网软件允许局域网 查看主系统的 IP 地址 Linux 系统填入主系统 IP 地址和端口号",content:"# VMware虚拟机科学上网\n\n以下为演示环境：\n\n * 主系统：Windows11\n * 虚拟机软件：VMware 16\n * 虚拟机系统：Linux（Ubuntu 20.04）\n\n\n# VMware 设置\n\n\n\n\n# 科学上网软件允许局域网\n\n\n\n\n# 查看主系统的 IP 地址\n\n\n\n\n# Linux 系统填入主系统 IP 地址和端口号\n\n\n\n提示\n\n只需要填写 Socks Host 这一项，IP地址 + 端口号（端口号一般在科学上网软件里面找到，例如我使用的 Clash 使用的端口号为 7890）",normalizedContent:"# vmware虚拟机科学上网\n\n以下为演示环境：\n\n * 主系统：windows11\n * 虚拟机软件：vmware 16\n * 虚拟机系统：linux（ubuntu 20.04）\n\n\n# vmware 设置\n\n\n\n\n# 科学上网软件允许局域网\n\n\n\n\n# 查看主系统的 ip 地址\n\n\n\n\n# linux 系统填入主系统 ip 地址和端口号\n\n\n\n提示\n\n只需要填写 socks host 这一项，ip地址 + 端口号（端口号一般在科学上网软件里面找到，例如我使用的 clash 使用的端口号为 7890）",charsets:{cjk:!0},lastUpdated:"2022/12/03, 17:31:39",lastUpdatedTimestamp:1670059899e3},{title:"友情链接",frontmatter:{title:"友情链接",date:"2019-12-25T14:27:01.000Z",permalink:"/friends",article:!1,sidebar:!1},regularPath:"/07.%E6%9B%B4%E5%A4%9A/99.%E5%8F%8B%E6%83%85%E9%93%BE%E6%8E%A5.html",relativePath:"07.更多/99.友情链接.md",key:"v-3835e1b3",path:"/friends/",headers:[{level:3,title:"友链申请",slug:"友链申请",normalizedTitle:"友链申请",charIndex:5988}],headersStr:"友链申请",content:"麋鹿鲁哟\n\n大道至简，知易行难\n\nXAOXUU\n\n#IOS #Volantis主题作者\n\nlookroot的个人空间\n\n寻求理想和显示的平衡\n\n平凡的你我\n\n理想成为大牛的\n小陈同学\n\nznote\n\n荷尽已无擎雨盖，\n菊残犹有傲霜枝。\n\n全栈软件开发直通车\n\n全栈软件开发技术博客，\n从小白到大神!\n\n易良同学的博客\n\n正在努力！\n\n永远的救赎者\n\n知者减半，省者全无。\n\n辰旭博客\n\n凤鸣初阳，百鸟朝凰\n\nJokerM's Palace\n\nTake your heart\n\nSaul.J.Wu\n\n立身之本，不在高低。\n\nLake's blog\n\n不积跬步，无以至千里；不积小流，无以成江海。\n\nCubik的小站\n\nRECOMMENDED BY DR.CREATIVE\n\nx·π\n\n为开发者量身制作的技术博客和知识库管理平台。\n\n眼里有光\n\n道阻且长，行则将至\n\nHeo\n\n爱折腾的设计师\n\nChuyuxuan\n\n临渊羡鱼，不如退而结网\n\n全栈杂货站\n\n千里万里杂货站里，天青色等烟雨，而我在等你。\n\n小鱼博客\n\n总是半途而废的废柴\n\n大胡子\n\n记录你我，分享精彩。\n\n嘟先生学WebGL\n\n流水不争先，争的是滔滔不绝。\n\n嶋屿麋鹿\n\n小鹿的知识库\n\n@小右_\n\n学而不厌 不耻下问\n\n途中的树\n\n走出自己的傲慢，承认自己的局限。\n\nHaobo's Blog\n\n半只脚跨入炼丹师的大门的新人\n\n小胖墩er\n\n迟到总比不到的好，所以好好加油吧。\n\nCloudNative Operations\n\n专注于云原生运维,致敬每个爱学习的你。\n\nJoseph Z.\n\nJoseph Z.的小站\n\n二丫讲梵\n\n💻学习📝记录🔗分享\n\nYoungKbt World\n\n故事由我书写，旅程由你见证，传奇由她聆听\n\nXuHuaian,s Blog\n\n记录自己的工作学习心得，争取当一条有梦想的咸鱼\n\n- name: 麋鹿鲁哟\n  desc: 大道至简，知易行难\n  avatar: https://cdn.jsdelivr.net/gh/xugaoyi/image_store/blog/20200122153807.jpg # 可选\n  link: https://www.cnblogs.com/miluluyo/ # 可选\n  bgColor: '#CBEAFA' # 可选，默认var(--bodyBg)。颜色值有#号时请添加单引号\n  textColor: '#6854A1' # 可选，默认var(--textColor)\n- name: XAOXUU\n  desc: '#IOS #Volantis主题作者'\n  avatar: https://cdn.jsdelivr.net/gh/xaoxuu/assets@master/avatar/avatar.png\n  link: https://xaoxuu.com\n  bgColor: '#B9D59C'\n  textColor: '#3B551F'\n- name: lookroot的个人空间\n  desc: 寻求理想和显示的平衡\n  avatar: https://www.lookroot.cn/logo.png\n  link: https://www.lookroot.cn/\n  bgColor: '#B7DBFF'\n  textColor: '#294D71'\n- name: 平凡的你我\n  desc: 理想成为大牛的<br/>小陈同学\n  avatar: https://reinness.com/static/avatar.png\n  link: https://reinness.com\n  bgColor: '#FFE5B4'\n  textColor: '#A05F2C'\n- name: znote\n  desc: 荷尽已无擎雨盖，<br/>菊残犹有傲霜枝。\n  avatar: https://zpj80231.gitee.io/znote/vuepress/head-fish.jpg\n  link: https://zpj80231.gitee.io/znote/\n  bgColor: '#FCE5BF'\n  textColor: '#7B2532'\n- name: 全栈软件开发直通车\n  desc: 全栈软件开发技术博客，<br/>从小白到大神!\n  avatar: https://gitee.com/wangshibiao/blog_picBed2/raw/master/images/20200806151030.png\n  link: https://sofineday.com\n  bgColor: '#FBEBEC'\n  textColor: '#603420'\n- name: 易良同学的博客\n  desc: 正在努力！\n  avatar: https://yiliang.site/assets/images/avatar.jpeg\n  link: https://yiliang.site\n  bgColor: '#FFEFE2'\n  textColor: '#A05F2C'\n- name: 永远的救赎者\n  desc: 知者减半，省者全无。\n  avatar: https://i.loli.net/2020/08/10/PkQMGL6pATW1vBg.jpg\n  link: http://www.yuanchengcheng.vip/\n  bgColor: '#FBEBEC'\n  textColor: '#603420'\n- name: 辰旭博客\n  desc: 凤鸣初阳，百鸟朝凰\n  avatar: https://s1.ax1x.com/2020/08/09/aoLTDx.png\n  link: https://kareny.cn\n  bgColor: '#FFCEDE'\n  textColor: '#621529'\n- name: JokerM's Palace\n  desc: Take your heart\n  avatar: https://jokerm.com/wp-content/uploads/2020/09/jmflogo.png\n  link: https://jokerm.com/\n- name: Saul.J.Wu\n  desc: 立身之本，不在高低。\n  avatar: https://gitee.com/SaulJWu/blog-images/raw/master/images/20210627222322.jpg\n  link: https://sauljwu.github.io/\n- name: Lake's blog\n  desc: 不积跬步，无以至千里；不积小流，无以成江海。\n  avatar: https://cdn.jsdelivr.net/gh/taixingyiji/image_store@main/blog/logo/img.png\n  link: https://taixingyiji.com/\n- name: Cubik的小站\n  desc: RECOMMENDED BY DR.CREATIVE\n  avatar: https://cdn.jsdelivr.net/gh/Cubik65536/cubik-favicons@main/CubikLogo.png\n  link: https://www.cubik65536.top/\n- name: x·π\n  desc: 为开发者量身制作的技术博客和知识库管理平台。\n  avatar: https://cdn.jsdelivr.net/gh/Ezuy-Lee/RainzeDrawingBed/media/logo.png\n  link: https://ezuy-lee.github.io/xpai/\n- name: 眼里有光\n  desc: 道阻且长，行则将至\n  avatar: https://icooloop.gitee.io/img/logo.jpg\n  link: https://icooloop.gitee.io/\n- name: Heo\n  desc: 爱折腾的设计师\n  link: https://blog.zhheo.com/\n  avatar: https://blog.zhheo.com/img/avatar.png\n- name: Chuyuxuan\n  desc: 临渊羡鱼，不如退而结网\n  link: https://blog.chuyuxuan.top/\n  avatar: http://blog.chuyuxuan.top/img/avatar1.jpg\n- name: 全栈杂货站\n  desc: 千里万里杂货站里，天青色等烟雨，而我在等你。\n  avatar: http://cdn.tea-culture.top/tech/images/avatar/3.jpg\n  link: http://tech.tea-culture.top/\n- name: 小鱼博客\n  desc: 总是半途而废的废柴\n  avatar: https://cdn.jsdelivr.net/gh/xiaoyu-666/image_store/blog/minion.png\n  link: https://xiaoyu-666.github.io/\n- name: 大胡子\n  desc: 记录你我，分享精彩。\n  avatar: https://photo.jakehu.cn/favicon.png\n  link: https://www.jakehu.cn\n- name: 嘟先生学WebGL\n  desc: 流水不争先，争的是滔滔不绝。\n  avatar: https://joy1412.cn/img/dudu.jpeg\n  link: https://joy1412.cn\n- name: 嶋屿麋鹿\n  desc: 小鹿的知识库\n  avatar: https://www.fongloo.com/img/logo.png\n  link: https://www.fongloo.com/\n- name: '@小右_'\n  desc: 学而不厌 不耻下问\n  avatar: https://lordblog.cn/upload/2021/05/logo%20(4)-742f1f7e15db44a1b3140035104ea239.png\n  link: https://lordblog.cn/\n- name: 途中的树\n  desc: 走出自己的傲慢，承认自己的局限。\n  avatar: https://zkpeace.com/blog/img/avatar.jpg\n  link: https://zkpeace.com/\n- name: Haobo's Blog\n  link: https://discover304.top/\n  avatar: https://discover304.top/img/head.png\n  desc: 半只脚跨入炼丹师的大门的新人\n- name: 小胖墩er\n  desc: 迟到总比不到的好，所以好好加油吧。\n  avatar: https://cdn.jsdelivr.net/gh/Chubby-Duner/image-hosting@master/blog/logo.jpeg\n  link: https://chubbyduner.top\n- name: CloudNative Operations\n  desc: 专注于云原生运维,致敬每个爱学习的你。\n  avatar: https://kubesre.com/img/logo.png\n  link: https://kubesre.com/\n- name: Joseph Z.\n  desc: Joseph Z.的小站\n  avatar: https://josephz.top/res/joseph.jpg\n  link: https://josephz.top/\n- name: 二丫讲梵 # 昵称\n  desc: 💻学习📝记录🔗分享 # 介绍\n  avatar: https://wiki.eryajf.net/img/logo.png # 头像\n  link: https://wiki.eryajf.net/  # 链接\n- name: YoungKbt World\t# 昵称\n  desc: 故事由我书写，旅程由你见证，传奇由她聆听\t# 介绍\n  avatar: https://cdn.jsdelivr.net/gh/Kele-Bingtang/static/user/avatar2.png\t# 头像\n  link: https://notes.youngkbt.cn/\t# 链接\n- name: XuHuaian,s Blog # 昵称\n  desc: 记录自己的工作学习心得，争取当一条有梦想的咸鱼 # 介绍\n  avatar: https://dbsecurity.com.cn/images/logo.jpg # 头像\n  link: https://dbsecurity.com.cn/# 链接\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n\n\n\n# 友链申请\n\n与我 联系 或者 在本页面评论区留言您的友链信息，格式：(点击代码块右上角一键复制)\n\n- name: Jim's blog # 昵称\n  desc: 积跬步以至千里，致敬每个爱学习的你。 # 介绍\n  avatar: https://cdn.jsdelivr.net/gh/JimFKppt/Pictures@master/static_files/img/Avatar-KeNan.jpg # 头像\n  link: https://jimfk.life/  # 链接\n\n\n1\n2\n3\n4\n\n\n申请前记得先添加本站哦~",normalizedContent:"麋鹿鲁哟\n\n大道至简，知易行难\n\nxaoxuu\n\n#ios #volantis主题作者\n\nlookroot的个人空间\n\n寻求理想和显示的平衡\n\n平凡的你我\n\n理想成为大牛的\n小陈同学\n\nznote\n\n荷尽已无擎雨盖，\n菊残犹有傲霜枝。\n\n全栈软件开发直通车\n\n全栈软件开发技术博客，\n从小白到大神!\n\n易良同学的博客\n\n正在努力！\n\n永远的救赎者\n\n知者减半，省者全无。\n\n辰旭博客\n\n凤鸣初阳，百鸟朝凰\n\njokerm's palace\n\ntake your heart\n\nsaul.j.wu\n\n立身之本，不在高低。\n\nlake's blog\n\n不积跬步，无以至千里；不积小流，无以成江海。\n\ncubik的小站\n\nrecommended by dr.creative\n\nx·π\n\n为开发者量身制作的技术博客和知识库管理平台。\n\n眼里有光\n\n道阻且长，行则将至\n\nheo\n\n爱折腾的设计师\n\nchuyuxuan\n\n临渊羡鱼，不如退而结网\n\n全栈杂货站\n\n千里万里杂货站里，天青色等烟雨，而我在等你。\n\n小鱼博客\n\n总是半途而废的废柴\n\n大胡子\n\n记录你我，分享精彩。\n\n嘟先生学webgl\n\n流水不争先，争的是滔滔不绝。\n\n嶋屿麋鹿\n\n小鹿的知识库\n\n@小右_\n\n学而不厌 不耻下问\n\n途中的树\n\n走出自己的傲慢，承认自己的局限。\n\nhaobo's blog\n\n半只脚跨入炼丹师的大门的新人\n\n小胖墩er\n\n迟到总比不到的好，所以好好加油吧。\n\ncloudnative operations\n\n专注于云原生运维,致敬每个爱学习的你。\n\njoseph z.\n\njoseph z.的小站\n\n二丫讲梵\n\n💻学习📝记录🔗分享\n\nyoungkbt world\n\n故事由我书写，旅程由你见证，传奇由她聆听\n\nxuhuaian,s blog\n\n记录自己的工作学习心得，争取当一条有梦想的咸鱼\n\n- name: 麋鹿鲁哟\n  desc: 大道至简，知易行难\n  avatar: https://cdn.jsdelivr.net/gh/xugaoyi/image_store/blog/20200122153807.jpg # 可选\n  link: https://www.cnblogs.com/miluluyo/ # 可选\n  bgcolor: '#cbeafa' # 可选，默认var(--bodybg)。颜色值有#号时请添加单引号\n  textcolor: '#6854a1' # 可选，默认var(--textcolor)\n- name: xaoxuu\n  desc: '#ios #volantis主题作者'\n  avatar: https://cdn.jsdelivr.net/gh/xaoxuu/assets@master/avatar/avatar.png\n  link: https://xaoxuu.com\n  bgcolor: '#b9d59c'\n  textcolor: '#3b551f'\n- name: lookroot的个人空间\n  desc: 寻求理想和显示的平衡\n  avatar: https://www.lookroot.cn/logo.png\n  link: https://www.lookroot.cn/\n  bgcolor: '#b7dbff'\n  textcolor: '#294d71'\n- name: 平凡的你我\n  desc: 理想成为大牛的<br/>小陈同学\n  avatar: https://reinness.com/static/avatar.png\n  link: https://reinness.com\n  bgcolor: '#ffe5b4'\n  textcolor: '#a05f2c'\n- name: znote\n  desc: 荷尽已无擎雨盖，<br/>菊残犹有傲霜枝。\n  avatar: https://zpj80231.gitee.io/znote/vuepress/head-fish.jpg\n  link: https://zpj80231.gitee.io/znote/\n  bgcolor: '#fce5bf'\n  textcolor: '#7b2532'\n- name: 全栈软件开发直通车\n  desc: 全栈软件开发技术博客，<br/>从小白到大神!\n  avatar: https://gitee.com/wangshibiao/blog_picbed2/raw/master/images/20200806151030.png\n  link: https://sofineday.com\n  bgcolor: '#fbebec'\n  textcolor: '#603420'\n- name: 易良同学的博客\n  desc: 正在努力！\n  avatar: https://yiliang.site/assets/images/avatar.jpeg\n  link: https://yiliang.site\n  bgcolor: '#ffefe2'\n  textcolor: '#a05f2c'\n- name: 永远的救赎者\n  desc: 知者减半，省者全无。\n  avatar: https://i.loli.net/2020/08/10/pkqmgl6patw1vbg.jpg\n  link: http://www.yuanchengcheng.vip/\n  bgcolor: '#fbebec'\n  textcolor: '#603420'\n- name: 辰旭博客\n  desc: 凤鸣初阳，百鸟朝凰\n  avatar: https://s1.ax1x.com/2020/08/09/aoltdx.png\n  link: https://kareny.cn\n  bgcolor: '#ffcede'\n  textcolor: '#621529'\n- name: jokerm's palace\n  desc: take your heart\n  avatar: https://jokerm.com/wp-content/uploads/2020/09/jmflogo.png\n  link: https://jokerm.com/\n- name: saul.j.wu\n  desc: 立身之本，不在高低。\n  avatar: https://gitee.com/sauljwu/blog-images/raw/master/images/20210627222322.jpg\n  link: https://sauljwu.github.io/\n- name: lake's blog\n  desc: 不积跬步，无以至千里；不积小流，无以成江海。\n  avatar: https://cdn.jsdelivr.net/gh/taixingyiji/image_store@main/blog/logo/img.png\n  link: https://taixingyiji.com/\n- name: cubik的小站\n  desc: recommended by dr.creative\n  avatar: https://cdn.jsdelivr.net/gh/cubik65536/cubik-favicons@main/cubiklogo.png\n  link: https://www.cubik65536.top/\n- name: x·π\n  desc: 为开发者量身制作的技术博客和知识库管理平台。\n  avatar: https://cdn.jsdelivr.net/gh/ezuy-lee/rainzedrawingbed/media/logo.png\n  link: https://ezuy-lee.github.io/xpai/\n- name: 眼里有光\n  desc: 道阻且长，行则将至\n  avatar: https://icooloop.gitee.io/img/logo.jpg\n  link: https://icooloop.gitee.io/\n- name: heo\n  desc: 爱折腾的设计师\n  link: https://blog.zhheo.com/\n  avatar: https://blog.zhheo.com/img/avatar.png\n- name: chuyuxuan\n  desc: 临渊羡鱼，不如退而结网\n  link: https://blog.chuyuxuan.top/\n  avatar: http://blog.chuyuxuan.top/img/avatar1.jpg\n- name: 全栈杂货站\n  desc: 千里万里杂货站里，天青色等烟雨，而我在等你。\n  avatar: http://cdn.tea-culture.top/tech/images/avatar/3.jpg\n  link: http://tech.tea-culture.top/\n- name: 小鱼博客\n  desc: 总是半途而废的废柴\n  avatar: https://cdn.jsdelivr.net/gh/xiaoyu-666/image_store/blog/minion.png\n  link: https://xiaoyu-666.github.io/\n- name: 大胡子\n  desc: 记录你我，分享精彩。\n  avatar: https://photo.jakehu.cn/favicon.png\n  link: https://www.jakehu.cn\n- name: 嘟先生学webgl\n  desc: 流水不争先，争的是滔滔不绝。\n  avatar: https://joy1412.cn/img/dudu.jpeg\n  link: https://joy1412.cn\n- name: 嶋屿麋鹿\n  desc: 小鹿的知识库\n  avatar: https://www.fongloo.com/img/logo.png\n  link: https://www.fongloo.com/\n- name: '@小右_'\n  desc: 学而不厌 不耻下问\n  avatar: https://lordblog.cn/upload/2021/05/logo%20(4)-742f1f7e15db44a1b3140035104ea239.png\n  link: https://lordblog.cn/\n- name: 途中的树\n  desc: 走出自己的傲慢，承认自己的局限。\n  avatar: https://zkpeace.com/blog/img/avatar.jpg\n  link: https://zkpeace.com/\n- name: haobo's blog\n  link: https://discover304.top/\n  avatar: https://discover304.top/img/head.png\n  desc: 半只脚跨入炼丹师的大门的新人\n- name: 小胖墩er\n  desc: 迟到总比不到的好，所以好好加油吧。\n  avatar: https://cdn.jsdelivr.net/gh/chubby-duner/image-hosting@master/blog/logo.jpeg\n  link: https://chubbyduner.top\n- name: cloudnative operations\n  desc: 专注于云原生运维,致敬每个爱学习的你。\n  avatar: https://kubesre.com/img/logo.png\n  link: https://kubesre.com/\n- name: joseph z.\n  desc: joseph z.的小站\n  avatar: https://josephz.top/res/joseph.jpg\n  link: https://josephz.top/\n- name: 二丫讲梵 # 昵称\n  desc: 💻学习📝记录🔗分享 # 介绍\n  avatar: https://wiki.eryajf.net/img/logo.png # 头像\n  link: https://wiki.eryajf.net/  # 链接\n- name: youngkbt world\t# 昵称\n  desc: 故事由我书写，旅程由你见证，传奇由她聆听\t# 介绍\n  avatar: https://cdn.jsdelivr.net/gh/kele-bingtang/static/user/avatar2.png\t# 头像\n  link: https://notes.youngkbt.cn/\t# 链接\n- name: xuhuaian,s blog # 昵称\n  desc: 记录自己的工作学习心得，争取当一条有梦想的咸鱼 # 介绍\n  avatar: https://dbsecurity.com.cn/images/logo.jpg # 头像\n  link: https://dbsecurity.com.cn/# 链接\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n\n\n\n# 友链申请\n\n与我 联系 或者 在本页面评论区留言您的友链信息，格式：(点击代码块右上角一键复制)\n\n- name: jim's blog # 昵称\n  desc: 积跬步以至千里，致敬每个爱学习的你。 # 介绍\n  avatar: https://cdn.jsdelivr.net/gh/jimfkppt/pictures@master/static_files/img/avatar-kenan.jpg # 头像\n  link: https://jimfk.life/  # 链接\n\n\n1\n2\n3\n4\n\n\n申请前记得先添加本站哦~",charsets:{cjk:!0},lastUpdated:"2022/12/03, 17:31:39",lastUpdatedTimestamp:1670059899e3},{title:"网站",frontmatter:{title:"网站",permalink:"/pages/5b66ca/",date:"2022-04-12T11:33:04.000Z",article:!1},regularPath:"/08.%E6%94%B6%E8%97%8F%E5%A4%B9/00.%E7%BD%91%E7%AB%99.html",relativePath:"08.收藏夹/00.网站.md",key:"v-e49aec88",path:"/pages/5b66ca/",headers:[{level:2,title:"技术、思维、问答、博客",slug:"技术、思维、问答、博客",normalizedTitle:"技术、思维、问答、博客",charIndex:2},{level:3,title:"博客/期刊/阅读",slug:"博客-期刊-阅读",normalizedTitle:"博客/期刊/阅读",charIndex:18},{level:3,title:"技术问答/社区",slug:"技术问答-社区",normalizedTitle:"技术问答/社区",charIndex:217},{level:3,title:"检索",slug:"检索",normalizedTitle:"检索",charIndex:400},{level:2,title:"资源",slug:"资源",normalizedTitle:"资源",charIndex:511},{level:3,title:"电子书",slug:"电子书",normalizedTitle:"电子书",charIndex:518},{level:3,title:"图片",slug:"图片",normalizedTitle:"图片",charIndex:624},{level:3,title:"影视",slug:"影视",normalizedTitle:"影视",charIndex:738},{level:3,title:"软件",slug:"软件",normalizedTitle:"软件",charIndex:803}],headersStr:"技术、思维、问答、博客 博客/期刊/阅读 技术问答/社区 检索 资源 电子书 图片 影视 软件",content:"# 技术、思维、问答、博客\n\n\n# 博客/期刊/阅读\n\n * Hacker News hackernews.com\n * 阮一峰的网络日志 ruanyifeng.com 科技爱好者周刊\n * 程序员的喵 catcoding.me\n * 语雀 yuque.com 语雀的发现页下有不少编程相关博文\n * Wait But Why waitbutwhy.com 一些让你思考的深度长文\n * 吴俊笔记本 wujun234.com\n\n\n# 技术问答/社区\n\n * GeeksforGeeks geeksforgeeks.org 学习算法、数据结构，刷算法题\n * Stack Overflow stackoverflow.com 技术问题问答网站\n * V2EX v2ex.com 一个关于分享和探索的地方\n * SegmentFault 思否 segmentfault.com 国内编程技术社区\n\n\n# 检索\n\n * techterms.com IT术语查询\n * filedesc.com 查询各种文件扩展名\n * wangchujiang.com/linux-command 小弟调调的Linux命令大全搜索工具\n\n\n# 资源\n\n\n# 电子书\n\n * goalkicker.com Many free programming books!\n * z-lib.org 自2009年起的免费图书馆\n * 图灵社区 人民邮电出版社旗下，技术书籍\n\n\n# 图片\n\n * unsplash.com 摄影\n * pexels.com 摄影\n * interfacelift.com 摄影\n * skypixel.com 航拍、摄影\n * wallhaven.cc 数字艺术品壁纸\n\n\n# 影视\n\n * ddrk.me 在线观看\n * nyaa.si 离线下载、BT、动漫\n * zimuku.org 找字幕的\n\n\n# 软件\n\n * geekuninstaller.com 卸载软件的小工具\n * syncthing.net 多端文件同步工具\n * obsidian.md Markdown网状双链笔记软件\n * simplenote.com 简约的笔记软件\n * espanso.org 快捷输入\n * PowerToys 微软Windows便捷工具集\n * EarTrumpet 音量分离控制",normalizedContent:"# 技术、思维、问答、博客\n\n\n# 博客/期刊/阅读\n\n * hacker news hackernews.com\n * 阮一峰的网络日志 ruanyifeng.com 科技爱好者周刊\n * 程序员的喵 catcoding.me\n * 语雀 yuque.com 语雀的发现页下有不少编程相关博文\n * wait but why waitbutwhy.com 一些让你思考的深度长文\n * 吴俊笔记本 wujun234.com\n\n\n# 技术问答/社区\n\n * geeksforgeeks geeksforgeeks.org 学习算法、数据结构，刷算法题\n * stack overflow stackoverflow.com 技术问题问答网站\n * v2ex v2ex.com 一个关于分享和探索的地方\n * segmentfault 思否 segmentfault.com 国内编程技术社区\n\n\n# 检索\n\n * techterms.com it术语查询\n * filedesc.com 查询各种文件扩展名\n * wangchujiang.com/linux-command 小弟调调的linux命令大全搜索工具\n\n\n# 资源\n\n\n# 电子书\n\n * goalkicker.com many free programming books!\n * z-lib.org 自2009年起的免费图书馆\n * 图灵社区 人民邮电出版社旗下，技术书籍\n\n\n# 图片\n\n * unsplash.com 摄影\n * pexels.com 摄影\n * interfacelift.com 摄影\n * skypixel.com 航拍、摄影\n * wallhaven.cc 数字艺术品壁纸\n\n\n# 影视\n\n * ddrk.me 在线观看\n * nyaa.si 离线下载、bt、动漫\n * zimuku.org 找字幕的\n\n\n# 软件\n\n * geekuninstaller.com 卸载软件的小工具\n * syncthing.net 多端文件同步工具\n * obsidian.md markdown网状双链笔记软件\n * simplenote.com 简约的笔记软件\n * espanso.org 快捷输入\n * powertoys 微软windows便捷工具集\n * eartrumpet 音量分离控制",charsets:{cjk:!0},lastUpdated:"2022/12/03, 17:31:39",lastUpdatedTimestamp:1670059899e3},{title:"归档",frontmatter:{archivesPage:!0,title:"归档",permalink:"/archives/",article:!1},regularPath:"/@pages/archivesPage.html",relativePath:"@pages/archivesPage.md",key:"v-758a0ab3",path:"/archives/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2020/05/02, 18:04:18",lastUpdatedTimestamp:1588413858e3},{title:"网站",frontmatter:{title:"网站",permalink:"/pages/beb6c0bd8a66cea6",date:"2020-04-19T11:33:04.000Z",article:!1},regularPath:"/08.%E6%94%B6%E8%97%8F%E5%A4%B9/05.%E4%B8%BB%E9%A2%98%E4%BD%9C%E8%80%85%E7%9A%84%E6%94%B6%E8%97%8F/01.%E7%BD%91%E7%AB%99.html",relativePath:"08.收藏夹/05.主题作者的收藏/01.网站.md",key:"v-2371ff82",path:"/pages/beb6c0bd8a66cea6/",headers:[{level:2,title:"推荐",slug:"推荐",normalizedTitle:"推荐",charIndex:12},{level:2,title:"文档",slug:"文档",normalizedTitle:"文档",charIndex:167},{level:2,title:"社区",slug:"社区",normalizedTitle:"社区",charIndex:375},{level:3,title:"社区互动",slug:"社区互动",normalizedTitle:"社区互动",charIndex:596},{level:2,title:"技巧",slug:"技巧",normalizedTitle:"技巧",charIndex:623},{level:2,title:"博客",slug:"博客",normalizedTitle:"博客",charIndex:711},{level:2,title:"电子书",slug:"电子书",normalizedTitle:"电子书",charIndex:775},{level:2,title:"优秀文章",slug:"优秀文章",normalizedTitle:"优秀文章",charIndex:833},{level:2,title:"视频",slug:"视频",normalizedTitle:"视频",charIndex:897},{level:2,title:"Github",slug:"github",normalizedTitle:"github",charIndex:382},{level:2,title:"评论系统",slug:"评论系统",normalizedTitle:"评论系统",charIndex:1148},{level:2,title:"前端小工具",slug:"前端小工具",normalizedTitle:"前端小工具",charIndex:1197},{level:2,title:"代码编辑",slug:"代码编辑",normalizedTitle:"代码编辑",charIndex:1269},{level:2,title:"Emoji表情",slug:"emoji表情",normalizedTitle:"emoji表情",charIndex:1330},{level:2,title:"图片工具",slug:"图片工具",normalizedTitle:"图片工具",charIndex:1493},{level:2,title:"思维导图",slug:"思维导图",normalizedTitle:"思维导图",charIndex:1753},{level:2,title:"CSS",slug:"css",normalizedTitle:"css",charIndex:875},{level:2,title:"CDN加速",slug:"cdn加速",normalizedTitle:"cdn加速",charIndex:2090},{level:2,title:"网站托管",slug:"网站托管",normalizedTitle:"网站托管",charIndex:2150},{level:2,title:"正则",slug:"正则",normalizedTitle:"正则",charIndex:2180},{level:2,title:"其他",slug:"其他",normalizedTitle:"其他",charIndex:2241},{level:2,title:"设计",slug:"设计",normalizedTitle:"设计",charIndex:574},{level:2,title:"图库",slug:"图库",normalizedTitle:"图库",charIndex:3342},{level:2,title:"3D",slug:"_3d",normalizedTitle:"3d",charIndex:1967},{level:2,title:"交互",slug:"交互",normalizedTitle:"交互",charIndex:2420},{level:2,title:"有趣",slug:"有趣",normalizedTitle:"有趣",charIndex:139},{level:2,title:"生成器",slug:"生成器",normalizedTitle:"生成器",charIndex:1839},{level:2,title:"元宇宙",slug:"元宇宙",normalizedTitle:"元宇宙",charIndex:4444},{level:2,title:"教程",slug:"教程",normalizedTitle:"教程",charIndex:251},{level:2,title:"产品",slug:"产品",normalizedTitle:"产品",charIndex:3329},{level:2,title:"实用",slug:"实用",normalizedTitle:"实用",charIndex:4688},{level:2,title:"Talk",slug:"talk",normalizedTitle:"talk",charIndex:5061},{level:2,title:"算法",slug:"算法",normalizedTitle:"算法",charIndex:2330},{level:2,title:"nginx",slug:"nginx",normalizedTitle:"nginx",charIndex:5141},{level:2,title:"生活",slug:"生活",normalizedTitle:"生活",charIndex:5169}],excerpt:'<h1 id="个人收藏夹"><a class="header-anchor" href="#个人收藏夹">#</a> 个人收藏夹</h1>\n<h2 id="推荐"><a class="header-anchor" href="#推荐">#</a> 推荐</h2>\n<ul>\n<li><a href="https://panjiachen.github.io/awesome-bookmarks/" target="_blank" rel="noopener noreferrer">panjiachen<OutboundLink/></a> by 花裤衩</li>\n<li><a href="https://www.code-nav.cn/" target="_blank" rel="noopener noreferrer">编程导航<OutboundLink/></a> by 程序员鱼皮</li>\n<li><a href="https://r2coding.com/" target="_blank" rel="noopener noreferrer">编程自学之路<OutboundLink/></a> by 程序羊</li>\n<li><a href="https://gitee.com/jishupang/web_atlas" target="_blank" rel="noopener noreferrer">前端知识图谱+B站资源整合<OutboundLink/></a> by 技术胖</li>\n<li><a href="https://shengxinjing.cn/" target="_blank" rel="noopener noreferrer">大圣编程自学网<OutboundLink/></a> by 大圣</li>\n<li><a href="https://devtool.tech/" target="_blank" rel="noopener noreferrer">开发者武器库<OutboundLink/></a></li>\n<li><a href="https://www.fly63.com/tool/home.html" target="_blank" rel="noopener noreferrer">工具大全<OutboundLink/></a></li>\n</ul>\n<p align="center">\n<img src="https://cdn.jsdelivr.net/gh/xugaoyi/image_store@master/blog/qrcode.zdqv9mlfc0g.jpg" width="200">\n</p>\n<div class="center-container"><p>关注公众号[有趣研究社]，回复<code>前端资源</code>，获取 <a href="https://github.com/xugaoyi/blog-gitalk-comment/wiki/Front-end-Study" target="_blank" rel="noopener noreferrer">前端学习资料<OutboundLink/></a></p>\n</div>',headersStr:"推荐 文档 社区 社区互动 技巧 博客 电子书 优秀文章 视频 Github 评论系统 前端小工具 代码编辑 Emoji表情 图片工具 思维导图 CSS CDN加速 网站托管 正则 其他 设计 图库 3D 交互 有趣 生成器 元宇宙 教程 产品 实用 Talk 算法 nginx 生活",content:"# 个人收藏夹\n\n\n# 推荐\n\n * panjiachen by 花裤衩\n * 编程导航 by 程序员鱼皮\n * 编程自学之路 by 程序羊\n * 前端知识图谱+B站资源整合 by 技术胖\n * 大圣编程自学网 by 大圣\n * 开发者武器库\n * 工具大全\n\n\n\n关注公众号[有趣研究社]，回复前端资源，获取 前端学习资料\n\n\n# 文档\n\n * MDN | MDN-JS标准内置对象 Web技术权威文档\n * DevDocs Web 开发技术文档，非常不错的学习手册！\n * 现代JavaScript教程 以最新标准为基准的JS教程\n * ES5教程 阮一峰的JS教程\n * ES6教程 阮一峰的ES6教程\n * Bash 脚本教程 阮一峰编写\n * ECMA ECMA官网\n * 菜鸟教程 涵盖多种语言的初级教程\n * 腾讯云开发者手册\n\n\n# 社区\n\n * Github 程序员同性交友社区\n * 掘金 一个帮助开发者成长的社区\n * 简书 有很多频道的创作社区\n * 思否 解决技术问题的社区\n * stack overflow 同上，外网的\n * InfoQ 促进软件开发及相关领域知识与创新的传播\n * V2EX 创意工作者们的社区\n * 鱼塘热榜 划水网站，收集了很多网站，当天热门文章\n * 码力全开资源库 很全很强大，独立开发者/设计干货/优质利器/工具资源...\n\n\n# 社区互动\n\n * gitter\n * 兔小巢\n\n\n# 技巧\n\n * Google 趋势 查看某项技术或关键字的热度趋势，可用于分析某项技术的发展前景，或对比某两项技术的热度。\n * 百度指数 同上，但百度的数据仅限国内。\n\n\n# 博客\n\n * 阮一峰的网络日志\n * samanthaming 对前端小知识点的总结，并为每个知识点制作精美的小卡片。\n\n\n# 电子书\n\n * 高教书苑 高等教育出版社的书籍，包含多种学科。\n * SoBooks 免费的电子书资源网站\n\n\n# 优秀文章\n\n * 我做系统架构的一些原则 作者对系统架构的方法论总结\n * 灵活运用CSS开发技巧\n * 防御性CSS\n\n\n# 视频\n\n * bilibili B站，上面很多免费教学视频\n * 慕课网 实战视频教程\n * 妙味课堂 比较系统的前端入门视频教程\n * 中国大学MOOC 涵盖计算机、外语、心理学等专业免费课程\n * egghead 质量还不错的短视频教程，外网\n\n\n# Github\n\n * Repobeats 生成仓库的动态数据统计图\n\n * github 短域名服务\n * shields 徽章图标\n * followers 全球排名\n * star-history 展示一个项目 Stars 增长曲线\n\n\n# 评论系统\n\n * giscus 由 GitHub Discussions 驱动的评论系统\n\n\n# 前端小工具\n\n * Can I use 查看属性和方法的兼容性\n * 30 seconds of code 收集了许多有用的代码小片段\n\n\n# 代码编辑\n\n * codepen 在线代码编辑与演示\n * codesandbox 内嵌VSCode的在线IDE\n\n\n# Emoji表情\n\n * emoji表情\n * emoji表情备忘录\n * 根据文本匹配emoji\n * gitmoji 通过 emoji 表达 git 的操作内容\n\n> 在任意输入框快速打开emoji表情方法：\n> Windows系统下按Win + .\n> Mac系统下按Control + Command + 空格\n\n\n# 图片工具\n\n * tinypng图片压缩 压缩png很有用\n * 微图 浏览器端图片压缩，不会上传图片到服务器\n * Squoosh 谷歌出品在线免费图片压缩工具（jpg、png等,压缩效果比tinypng稍好）\n * waifu2x 通过卷积网络放大图片\n * vectormagic 转换矢量图\n * vectorizer 真正的 png 转 svg 神器\n * 在线AI图片处理 黑白修复、无损放大、动漫化、铅笔画等。\n * remove AI抠图\n * backgroundremover 又一个抠图的\n\n\n# 思维导图\n\n * processon在线作图 流程图、思维导图、原型图等\n * 百度脑图 思维导图\n * plectica 绘制知识图谱\n\n\n# CSS\n\n * 各种CSS生成器和JS代码片段\n\n * CSS Tricks CSS技巧收集与演示\n * CSS生成器\n * CSS渐变生成器\n * CSS3-Box Shadow(阴影)\n * 贝塞尔曲线生成器\n * 花纹背景生成器\n * 花纹背景-pattern.css\n * 3D字体\n * css-tricks css技巧文章\n * You-need-to-know-css CSS的各种DEMO，很全\n * animista CSS动画可视化工具，复制代码就能用\n * navnav 各种炫酷的CSS动画组件\n\n\n# CDN加速\n\n * jsDelivr 国外的一家优秀的公共 CDN 服务提供商\n * unpkg cdn 服务\n\n\n# 网站托管\n\n * vercel 好用的网站托管服务\n\n\n# 正则\n\n * 正则可视化\n * iHateRegex 正则搜索，细节做得很好\n * 正则迷你书 学习正则的小手册\n\n\n# 其他\n\n * Linux命令手册\n * carbon代码图片生成器 生成好看的代码图片\n\n\n# 设计\n\n * 创造师导航\n * 设计师网址导航\n * remove AI抠图，抠图算法很厉害\n * Manypixels 插画\n * Undraw 插画\n * storytale 插画，种类丰富，包含3D插画\n * uimovement 能从这个网站找到不少动画交互的灵感\n * awwwards是一个一个专门为设计精美的网站以及富有创意的网站颁奖的网站\n * dribbble 经常能在上面找到很多有创意好看的 gif 或者图片\n * Bēhance dribbble 是设计师的微博，Bēhance 是设计师的博客\n * Logojoy 使用 ai 做 logo 的网站，做出来的 logo 质量还不错。\n * brandmark 另一个在线制作 logo 网站\n * instant 又一个 logo 制作网站\n * namecheap又一个 logo 制作网站\n * logo-maker 又一个 logo 制作网站 这个更简单点 就是选模板之后微调\n * coolors 帮你在线配色的网站 你能找到不少配色灵感\n * colorhunt 另一个配色网站\n * uigradients 渐变色网站\n * designcap 在线海报设计\n * Flat UI 色表 Flat UI 色表\n * 0to255 颜色梯度\n * Ikonate 提供免费的图标 icons\n * remixicon 又一个提供免费图标 icons\n * feather 免费的 icons\n * nord 北欧性冷淡风主题配色\n * Unsplash 提供免费的高清图片\n * Pexels 提供免费的高清图片\n * colorkitty 从你的图片中提取配色\n * design.youzan 有赞设计原则\n * iconfont 阿里巴巴矢量图标库\n * undraw 免费的矢量插画\n * icomoon 矢量图标库\n * cssicon 所有的 icon 都是纯 css 画的 缺点：icon 不够多\n * CSS triangle generator 帮你快速用 css 做出三角形\n * clippy 在线帮你使用 css clip-path 做出各种形状的图形\n * Lorem Picsum 提供免费的占位图\n * Canva 可画 生成插画、封面、海报、头像等\n * 404页 404页素材\n * collectui 按功能组件分类的设计图\n * smartmockups 产品模板生成工具\n\n\n# 图库\n\n * uigradients 渐变色生成工具\n * freepik banner 图库\n * 觅元素一天免费下载十张 psd（免抠元素）\n * 搞定设计 可以抠图\n * vectorizer 真正的 png 转 svg 神器\n * 站酷 国内优秀的设计作品展示\n * 花瓣\n * 虎克 ps 学习教程\n * beTheme\n * UI 中国\n * wallhaven 壁纸网站-\n\n\n# 3D\n\n * sketchfab 3D模型\n\n\n# 交互\n\n * 微交互 里面收集了市面上很多很好的微交互例子 值得学习\n\n * Little Big Details 同上，一个国外微交互汇集网站\n\n * cruip 登录页的各种页面设计，可以免费下载模板\n\n * Comixify 一个波兰团队做了非常好玩的工具，可以把视频自动转成漫画，上图是他们提供的 demo，效果很棒。\n\n * taiko-web 太鼓达人网页版 只能说很 6\n\n\n# 有趣\n\n * 电脑恶搞 收集了一些恶搞小网页，比如xp系统蓝屏、黑客界面等\n * neocities 上面托管了很多有趣的网站\n * 奇趣网站收藏家 收藏了很多有趣的网站\n * FC在线模拟器(小霸王游戏机) 童年回忆\n * 帮你百度一下 可以 点我测试一下-\n * 国际版 同帮我百度一下-点我测试一下-\n * URL 地址播放 Emojis 动画 在地址栏里面播放 emoji\n * Can't Unsee 强烈建议前端、客户端、UI 开发的同学玩下，检查一下自己对设计稿的敏感度怎么样\n * ggtalk 平时一直在听的一个技术博客\n * awesome-comment 里面收集了很多有趣的代码注释\n * text-img 都将图片转化为 ascii 用来写注释\n * ascii video 使用ascii编码生成视频动画\n * weird-fonts 将普通字母转化为 特殊 unicode\n * snake 在地址栏里面玩贪吃蛇\n * zero-width-lib 利用零宽度字符实现 隐形水印、加密信息分享、逃脱词匹配，很有创意\n * abbreviations 查看一个简写是什么意思的网站\n * magi ai 搜索神器，超屌\n * 在线取名 解决取名难问题，超多名字生成\n\n\n# 生成器\n\n * 卡通头像生成器 上传真人头像生成卡通头像\n\n * artbreeder 动漫图生成真人图像\n\n * 声音生成器 生成下雨、咖啡厅、海浪、火车等声音，可几种声音合成\n\n * 诺基亚短信图片生成器\n\n * 到账语音生成器 支付宝到账1亿元\n\n\n# 元宇宙\n\n符合元宇宙特征的几个网站，允许用户拥有虚拟土地，在上面构建自己的世界：\n\n * 沙盒\n * 梦境空间\n * Decentraland\n\n\n# 教程\n\n * npx 教你怎么合理的使用 npx\n * hacksplaining 网络安全学习网站\n * mobile-web-best-practice 移动 web 最佳实践\n\n\n# 产品\n\n * Product Hunt 好产品推荐\n\n * 产品大牛 什么有很多完整的产品原型可以借鉴\n\n * 磨刀 快速出 ui 原型\n\n\n# 实用\n\n * webden 在线网页编辑器，轻便快捷\n * browser-update 浏览器版本更新提示插件\n * typeform 一个国外的在线调查问卷网站\n * VideoFk VideoFk 视频在线解析下载\n * 全历史 历史内容聚合网站\n * UzerMe 云端办公工具\n * SoBooks 强大的电子书资源网站\n * 稿定设计 键式设计工具+智能抠图\n * 大力盘 百度网盘搜索\n * ENFI 下载器 不限速下载器\n * 来画视频 像做 PPT 一样做短视频\n * Arkie 海报制作工具\n * 优品 PPT\n * 比格 PPT\n * 高清免费图片\n * 高清免费图片 2\n * shapedivider 生成波浪分隔线\n * Notion 知识库、快速笔记、TaskList、日记、读书清单，各种类型，应有尽有\n\n\n# Talk\n\n * peerigon-talks 收集了不少有意思的 talks\n\n\n# 算法\n\n * leetcode 用 js 刷 leetcode\n\n\n# nginx\n\n * nginx 可视化配置工具\n\n\n# 生活\n\n * Ventusky 风雨气温图",normalizedContent:"# 个人收藏夹\n\n\n# 推荐\n\n * panjiachen by 花裤衩\n * 编程导航 by 程序员鱼皮\n * 编程自学之路 by 程序羊\n * 前端知识图谱+b站资源整合 by 技术胖\n * 大圣编程自学网 by 大圣\n * 开发者武器库\n * 工具大全\n\n\n\n关注公众号[有趣研究社]，回复前端资源，获取 前端学习资料\n\n\n# 文档\n\n * mdn | mdn-js标准内置对象 web技术权威文档\n * devdocs web 开发技术文档，非常不错的学习手册！\n * 现代javascript教程 以最新标准为基准的js教程\n * es5教程 阮一峰的js教程\n * es6教程 阮一峰的es6教程\n * bash 脚本教程 阮一峰编写\n * ecma ecma官网\n * 菜鸟教程 涵盖多种语言的初级教程\n * 腾讯云开发者手册\n\n\n# 社区\n\n * github 程序员同性交友社区\n * 掘金 一个帮助开发者成长的社区\n * 简书 有很多频道的创作社区\n * 思否 解决技术问题的社区\n * stack overflow 同上，外网的\n * infoq 促进软件开发及相关领域知识与创新的传播\n * v2ex 创意工作者们的社区\n * 鱼塘热榜 划水网站，收集了很多网站，当天热门文章\n * 码力全开资源库 很全很强大，独立开发者/设计干货/优质利器/工具资源...\n\n\n# 社区互动\n\n * gitter\n * 兔小巢\n\n\n# 技巧\n\n * google 趋势 查看某项技术或关键字的热度趋势，可用于分析某项技术的发展前景，或对比某两项技术的热度。\n * 百度指数 同上，但百度的数据仅限国内。\n\n\n# 博客\n\n * 阮一峰的网络日志\n * samanthaming 对前端小知识点的总结，并为每个知识点制作精美的小卡片。\n\n\n# 电子书\n\n * 高教书苑 高等教育出版社的书籍，包含多种学科。\n * sobooks 免费的电子书资源网站\n\n\n# 优秀文章\n\n * 我做系统架构的一些原则 作者对系统架构的方法论总结\n * 灵活运用css开发技巧\n * 防御性css\n\n\n# 视频\n\n * bilibili b站，上面很多免费教学视频\n * 慕课网 实战视频教程\n * 妙味课堂 比较系统的前端入门视频教程\n * 中国大学mooc 涵盖计算机、外语、心理学等专业免费课程\n * egghead 质量还不错的短视频教程，外网\n\n\n# github\n\n * repobeats 生成仓库的动态数据统计图\n\n * github 短域名服务\n * shields 徽章图标\n * followers 全球排名\n * star-history 展示一个项目 stars 增长曲线\n\n\n# 评论系统\n\n * giscus 由 github discussions 驱动的评论系统\n\n\n# 前端小工具\n\n * can i use 查看属性和方法的兼容性\n * 30 seconds of code 收集了许多有用的代码小片段\n\n\n# 代码编辑\n\n * codepen 在线代码编辑与演示\n * codesandbox 内嵌vscode的在线ide\n\n\n# emoji表情\n\n * emoji表情\n * emoji表情备忘录\n * 根据文本匹配emoji\n * gitmoji 通过 emoji 表达 git 的操作内容\n\n> 在任意输入框快速打开emoji表情方法：\n> windows系统下按win + .\n> mac系统下按control + command + 空格\n\n\n# 图片工具\n\n * tinypng图片压缩 压缩png很有用\n * 微图 浏览器端图片压缩，不会上传图片到服务器\n * squoosh 谷歌出品在线免费图片压缩工具（jpg、png等,压缩效果比tinypng稍好）\n * waifu2x 通过卷积网络放大图片\n * vectormagic 转换矢量图\n * vectorizer 真正的 png 转 svg 神器\n * 在线ai图片处理 黑白修复、无损放大、动漫化、铅笔画等。\n * remove ai抠图\n * backgroundremover 又一个抠图的\n\n\n# 思维导图\n\n * processon在线作图 流程图、思维导图、原型图等\n * 百度脑图 思维导图\n * plectica 绘制知识图谱\n\n\n# css\n\n * 各种css生成器和js代码片段\n\n * css tricks css技巧收集与演示\n * css生成器\n * css渐变生成器\n * css3-box shadow(阴影)\n * 贝塞尔曲线生成器\n * 花纹背景生成器\n * 花纹背景-pattern.css\n * 3d字体\n * css-tricks css技巧文章\n * you-need-to-know-css css的各种demo，很全\n * animista css动画可视化工具，复制代码就能用\n * navnav 各种炫酷的css动画组件\n\n\n# cdn加速\n\n * jsdelivr 国外的一家优秀的公共 cdn 服务提供商\n * unpkg cdn 服务\n\n\n# 网站托管\n\n * vercel 好用的网站托管服务\n\n\n# 正则\n\n * 正则可视化\n * ihateregex 正则搜索，细节做得很好\n * 正则迷你书 学习正则的小手册\n\n\n# 其他\n\n * linux命令手册\n * carbon代码图片生成器 生成好看的代码图片\n\n\n# 设计\n\n * 创造师导航\n * 设计师网址导航\n * remove ai抠图，抠图算法很厉害\n * manypixels 插画\n * undraw 插画\n * storytale 插画，种类丰富，包含3d插画\n * uimovement 能从这个网站找到不少动画交互的灵感\n * awwwards是一个一个专门为设计精美的网站以及富有创意的网站颁奖的网站\n * dribbble 经常能在上面找到很多有创意好看的 gif 或者图片\n * behance dribbble 是设计师的微博，behance 是设计师的博客\n * logojoy 使用 ai 做 logo 的网站，做出来的 logo 质量还不错。\n * brandmark 另一个在线制作 logo 网站\n * instant 又一个 logo 制作网站\n * namecheap又一个 logo 制作网站\n * logo-maker 又一个 logo 制作网站 这个更简单点 就是选模板之后微调\n * coolors 帮你在线配色的网站 你能找到不少配色灵感\n * colorhunt 另一个配色网站\n * uigradients 渐变色网站\n * designcap 在线海报设计\n * flat ui 色表 flat ui 色表\n * 0to255 颜色梯度\n * ikonate 提供免费的图标 icons\n * remixicon 又一个提供免费图标 icons\n * feather 免费的 icons\n * nord 北欧性冷淡风主题配色\n * unsplash 提供免费的高清图片\n * pexels 提供免费的高清图片\n * colorkitty 从你的图片中提取配色\n * design.youzan 有赞设计原则\n * iconfont 阿里巴巴矢量图标库\n * undraw 免费的矢量插画\n * icomoon 矢量图标库\n * cssicon 所有的 icon 都是纯 css 画的 缺点：icon 不够多\n * css triangle generator 帮你快速用 css 做出三角形\n * clippy 在线帮你使用 css clip-path 做出各种形状的图形\n * lorem picsum 提供免费的占位图\n * canva 可画 生成插画、封面、海报、头像等\n * 404页 404页素材\n * collectui 按功能组件分类的设计图\n * smartmockups 产品模板生成工具\n\n\n# 图库\n\n * uigradients 渐变色生成工具\n * freepik banner 图库\n * 觅元素一天免费下载十张 psd（免抠元素）\n * 搞定设计 可以抠图\n * vectorizer 真正的 png 转 svg 神器\n * 站酷 国内优秀的设计作品展示\n * 花瓣\n * 虎克 ps 学习教程\n * betheme\n * ui 中国\n * wallhaven 壁纸网站-\n\n\n# 3d\n\n * sketchfab 3d模型\n\n\n# 交互\n\n * 微交互 里面收集了市面上很多很好的微交互例子 值得学习\n\n * little big details 同上，一个国外微交互汇集网站\n\n * cruip 登录页的各种页面设计，可以免费下载模板\n\n * comixify 一个波兰团队做了非常好玩的工具，可以把视频自动转成漫画，上图是他们提供的 demo，效果很棒。\n\n * taiko-web 太鼓达人网页版 只能说很 6\n\n\n# 有趣\n\n * 电脑恶搞 收集了一些恶搞小网页，比如xp系统蓝屏、黑客界面等\n * neocities 上面托管了很多有趣的网站\n * 奇趣网站收藏家 收藏了很多有趣的网站\n * fc在线模拟器(小霸王游戏机) 童年回忆\n * 帮你百度一下 可以 点我测试一下-\n * 国际版 同帮我百度一下-点我测试一下-\n * url 地址播放 emojis 动画 在地址栏里面播放 emoji\n * can't unsee 强烈建议前端、客户端、ui 开发的同学玩下，检查一下自己对设计稿的敏感度怎么样\n * ggtalk 平时一直在听的一个技术博客\n * awesome-comment 里面收集了很多有趣的代码注释\n * text-img 都将图片转化为 ascii 用来写注释\n * ascii video 使用ascii编码生成视频动画\n * weird-fonts 将普通字母转化为 特殊 unicode\n * snake 在地址栏里面玩贪吃蛇\n * zero-width-lib 利用零宽度字符实现 隐形水印、加密信息分享、逃脱词匹配，很有创意\n * abbreviations 查看一个简写是什么意思的网站\n * magi ai 搜索神器，超屌\n * 在线取名 解决取名难问题，超多名字生成\n\n\n# 生成器\n\n * 卡通头像生成器 上传真人头像生成卡通头像\n\n * artbreeder 动漫图生成真人图像\n\n * 声音生成器 生成下雨、咖啡厅、海浪、火车等声音，可几种声音合成\n\n * 诺基亚短信图片生成器\n\n * 到账语音生成器 支付宝到账1亿元\n\n\n# 元宇宙\n\n符合元宇宙特征的几个网站，允许用户拥有虚拟土地，在上面构建自己的世界：\n\n * 沙盒\n * 梦境空间\n * decentraland\n\n\n# 教程\n\n * npx 教你怎么合理的使用 npx\n * hacksplaining 网络安全学习网站\n * mobile-web-best-practice 移动 web 最佳实践\n\n\n# 产品\n\n * product hunt 好产品推荐\n\n * 产品大牛 什么有很多完整的产品原型可以借鉴\n\n * 磨刀 快速出 ui 原型\n\n\n# 实用\n\n * webden 在线网页编辑器，轻便快捷\n * browser-update 浏览器版本更新提示插件\n * typeform 一个国外的在线调查问卷网站\n * videofk videofk 视频在线解析下载\n * 全历史 历史内容聚合网站\n * uzerme 云端办公工具\n * sobooks 强大的电子书资源网站\n * 稿定设计 键式设计工具+智能抠图\n * 大力盘 百度网盘搜索\n * enfi 下载器 不限速下载器\n * 来画视频 像做 ppt 一样做短视频\n * arkie 海报制作工具\n * 优品 ppt\n * 比格 ppt\n * 高清免费图片\n * 高清免费图片 2\n * shapedivider 生成波浪分隔线\n * notion 知识库、快速笔记、tasklist、日记、读书清单，各种类型，应有尽有\n\n\n# talk\n\n * peerigon-talks 收集了不少有意思的 talks\n\n\n# 算法\n\n * leetcode 用 js 刷 leetcode\n\n\n# nginx\n\n * nginx 可视化配置工具\n\n\n# 生活\n\n * ventusky 风雨气温图",charsets:{cjk:!0},lastUpdated:"2022/12/03, 17:31:39",lastUpdatedTimestamp:1670059899e3},{title:"常用的前端轮子",frontmatter:{title:"常用的前端轮子",date:"2021-10-09T19:42:02.000Z",permalink:"/pages/47cf96/",article:!1},regularPath:"/08.%E6%94%B6%E8%97%8F%E5%A4%B9/05.%E4%B8%BB%E9%A2%98%E4%BD%9C%E8%80%85%E7%9A%84%E6%94%B6%E8%97%8F/02.%E5%B8%B8%E7%94%A8%E7%9A%84%E5%89%8D%E7%AB%AF%E8%BD%AE%E5%AD%90.html",relativePath:"08.收藏夹/05.主题作者的收藏/02.常用的前端轮子.md",key:"v-c7d6fcb4",path:"/pages/47cf96/",headers:[{level:2,title:"React UI 组件库",slug:"react-ui-组件库",normalizedTitle:"react ui 组件库",charIndex:2},{level:2,title:"Vue UI组件库",slug:"vue-ui组件库",normalizedTitle:"vue ui组件库",charIndex:68},{level:2,title:"常用效果组件",slug:"常用效果组件",normalizedTitle:"常用效果组件",charIndex:124},{level:2,title:"工具类",slug:"工具类",normalizedTitle:"工具类",charIndex:201},{level:2,title:"Vue工具类",slug:"vue工具类",normalizedTitle:"vue工具类",charIndex:331},{level:2,title:"其他",slug:"其他",normalizedTitle:"其他",charIndex:469}],headersStr:"React UI 组件库 Vue UI组件库 常用效果组件 工具类 Vue工具类 其他",content:"# React UI 组件库\n\n * Ant Design\n * React Bootstrap\n * MATERIAL-UI\n\n\n# Vue UI组件库\n\n * Element UI PC端\n * Vant 移动端\n * View UI\n\n\n# 常用效果组件\n\n * Animate.css 动画库\n * Swiper 轮播组件\n * mescroll 下拉刷新和上拉加载框架-基于原生JS\n\n\n# 工具类\n\n * Lodash.js\n * Day.js 处理日期\n * Timeago.js 相对时间，如N小时前\n * Echarts 百度图表\n * Meditor.md 开源在线 Markdown 编辑器\n * validator.js 验证库\n\n\n# Vue工具类\n\n * vue-draggable 基于Sortable.js实现的vue拖拽插件\n * vue-qr 文本转二维码\n * vue-cropper 图片裁剪插件\n * vue-lazyload 懒加载\n * vue-simple-upload 上传组件\n\n\n# 其他\n\n * H5带笔锋手写签名，支持PC端和移动端",normalizedContent:"# react ui 组件库\n\n * ant design\n * react bootstrap\n * material-ui\n\n\n# vue ui组件库\n\n * element ui pc端\n * vant 移动端\n * view ui\n\n\n# 常用效果组件\n\n * animate.css 动画库\n * swiper 轮播组件\n * mescroll 下拉刷新和上拉加载框架-基于原生js\n\n\n# 工具类\n\n * lodash.js\n * day.js 处理日期\n * timeago.js 相对时间，如n小时前\n * echarts 百度图表\n * meditor.md 开源在线 markdown 编辑器\n * validator.js 验证库\n\n\n# vue工具类\n\n * vue-draggable 基于sortable.js实现的vue拖拽插件\n * vue-qr 文本转二维码\n * vue-cropper 图片裁剪插件\n * vue-lazyload 懒加载\n * vue-simple-upload 上传组件\n\n\n# 其他\n\n * h5带笔锋手写签名，支持pc端和移动端",charsets:{cjk:!0},lastUpdated:"2022/12/03, 17:31:39",lastUpdatedTimestamp:1670059899e3},{title:"标签",frontmatter:{tagsPage:!0,title:"标签",permalink:"/tags/",article:!1},regularPath:"/@pages/tagsPage.html",relativePath:"@pages/tagsPage.md",key:"v-3a807e33",path:"/tags/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2020/05/02, 18:04:18",lastUpdatedTimestamp:1588413858e3},{title:"你知道的越多，不知道的也就越多",frontmatter:{title:"你知道的越多，不知道的也就越多",date:"2020-05-06T15:52:40.000Z",permalink:"/pages/f2e63f",sidebar:"auto",categories:["随笔"],tags:["学习","知识","鸡汤"],author:{name:"xugaoyi",link:"https://github.com/xugaoyi"}},regularPath:"/_posts/%E9%9A%8F%E7%AC%94/%E4%BD%A0%E7%9F%A5%E9%81%93%E7%9A%84%E8%B6%8A%E5%A4%9A%EF%BC%8C%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%E4%B9%9F%E5%B0%B1%E8%B6%8A%E5%A4%9A.html",relativePath:"_posts/随笔/你知道的越多，不知道的也就越多.md",key:"v-367307b8",path:"/pages/f2e63f/",excerpt:"<p>不知道大家有没有发现，我们身边经常有这样的人，他们越是有能力的，越是有知识的，越是低调，越是谦逊，因为他们深知，知道的越多，不知道的也就越多。</p>\n",headersStr:null,content:"不知道大家有没有发现，我们身边经常有这样的人，他们越是有能力的，越是有知识的，越是低调，越是谦逊，因为他们深知，知道的越多，不知道的也就越多。\n\n你知道的越多，你不知道的也就越多，这是一句非常有哲理的话。\n\n每个人的知识面都是有限的，你有可能在某个领域会有较深的研究，成为这个领域里的专家，等到你站在高处的时候，才会发现，自己是多么的渺小，才知道自己有多少没有涉及的领域。知道的越多，疑惑、问题就会越来越多，对已知的质疑、疑虑、困惑就会越来越多。\n\n即使如此，我们也应该努力，至少可以成为某个领域的佼佼者。\n\n鸡汤1\n\n弱小的人，才习惯嘲讽与否定，而内心强大的人，从不吝啬赞美与鼓励。\n\n鸡汤2\n\n当代青年人都应该摆脱冷气，只管向上走，不必听从自暴自弃者的流言。能做事的做事，能发声的发声。有一份热，发一份光，就像萤火一般，也可以在黑暗里发一点光，不必等候炬火。",normalizedContent:"不知道大家有没有发现，我们身边经常有这样的人，他们越是有能力的，越是有知识的，越是低调，越是谦逊，因为他们深知，知道的越多，不知道的也就越多。\n\n你知道的越多，你不知道的也就越多，这是一句非常有哲理的话。\n\n每个人的知识面都是有限的，你有可能在某个领域会有较深的研究，成为这个领域里的专家，等到你站在高处的时候，才会发现，自己是多么的渺小，才知道自己有多少没有涉及的领域。知道的越多，疑惑、问题就会越来越多，对已知的质疑、疑虑、困惑就会越来越多。\n\n即使如此，我们也应该努力，至少可以成为某个领域的佼佼者。\n\n鸡汤1\n\n弱小的人，才习惯嘲讽与否定，而内心强大的人，从不吝啬赞美与鼓励。\n\n鸡汤2\n\n当代青年人都应该摆脱冷气，只管向上走，不必听从自暴自弃者的流言。能做事的做事，能发声的发声。有一份热，发一份光，就像萤火一般，也可以在黑暗里发一点光，不必等候炬火。",charsets:{cjk:!0},lastUpdated:"2021/05/03, 01:04:55",lastUpdatedTimestamp:1619975095e3},{title:"复制粘贴搭建Hexo博客",frontmatter:{title:"复制粘贴搭建Hexo博客",date:"2022-04-15T18:14:03.000Z",permalink:"/pages/2909c8/",sidebar:"auto",tags:["博客"]},regularPath:"/_posts/%E9%9A%8F%E7%AC%94/%E5%A4%8D%E5%88%B6%E7%B2%98%E8%B4%B4%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2.html",relativePath:"_posts/随笔/复制粘贴搭建Hexo博客.md",key:"v-114202a4",path:"/pages/2909c8/",headers:[{level:2,title:"了解概念",slug:"了解概念",normalizedTitle:"了解概念",charIndex:94},{level:2,title:"准备工作",slug:"准备工作",normalizedTitle:"准备工作",charIndex:131},{level:2,title:"搭建",slug:"搭建",normalizedTitle:"搭建",charIndex:6},{level:2,title:"写文章，发布文章",slug:"写文章-发布文章",normalizedTitle:"写文章，发布文章",charIndex:178}],headersStr:"了解概念 准备工作 搭建 写文章，发布文章",content:"# 复制粘贴搭建Hexo博客\n\n看这个教程吧，看人家写得多好。\n\n> Yeah, it's easy, like copying a code and then pasting.\n\n\n# 了解概念\n\n博客怎么生成\n\n怎么把博客网站放到互联网上\n\n域名？\n\n\n# 准备工作\n\ngit ???\n\nnode.js ???\n\nnpm ???\n\n\n# 搭建\n\n\n# 写文章，发布文章",normalizedContent:"# 复制粘贴搭建hexo博客\n\n看这个教程吧，看人家写得多好。\n\n> yeah, it's easy, like copying a code and then pasting.\n\n\n# 了解概念\n\n博客怎么生成\n\n怎么把博客网站放到互联网上\n\n域名？\n\n\n# 准备工作\n\ngit ???\n\nnode.js ???\n\nnpm ???\n\n\n# 搭建\n\n\n# 写文章，发布文章",charsets:{cjk:!0},lastUpdated:"2022/04/15, 21:47:17",lastUpdatedTimestamp:1650030437e3},{title:"拥抱生活，拥抱快乐",frontmatter:{title:"拥抱生活，拥抱快乐",date:"2020-06-26T20:40:38.000Z",permalink:"/pages/cd8bde/",sidebar:"auto",categories:["随笔"],tags:["鸡汤"],author:{name:"xugaoyi",link:"https://github.com/xugaoyi"}},regularPath:"/_posts/%E9%9A%8F%E7%AC%94/%E6%8B%A5%E6%8A%B1%E7%94%9F%E6%B4%BB%EF%BC%8C%E6%8B%A5%E6%8A%B1%E5%BF%AB%E4%B9%90.html",relativePath:"_posts/随笔/拥抱生活，拥抱快乐.md",key:"v-14303cb8",path:"/pages/cd8bde/",excerpt:"<p>生活在后现代的今天，很多人都有一种虚无感，认为人生没有意义。但是，人生不可能没有意义，因为当你认为没有意义的时候，一定有一个与之相对应的概念叫有意义。</p>\n",headersStr:null,content:"生活在后现代的今天，很多人都有一种虚无感，认为人生没有意义。但是，人生不可能没有意义，因为当你认为没有意义的时候，一定有一个与之相对应的概念叫有意义。\n\n当你怀疑人生没有意义时，难道怀疑本身不值得怀疑吗？\n\n不要任由你内心的虚无感蔓延，我们需要去拥抱真实的生活。\n\n所有真实的快乐，都离不开艰辛的努力，无论是金榜题名的快乐，还是事业成功的喜悦，甚至包括洞房花烛的激动。所有真实的快乐，都需要长久的铺垫与努力，没有辛勤的汗水，快乐也就不再真实。\n\n如果快乐触手可及，这种廉价的快乐也就不值得珍惜，随时都可能抛弃。因此，对于年轻人而言，一个重要的功课就是学会去节制欲望。\n\n所有通过捷径所带来的快乐，都是廉价的，以至于所有追求都变得毫无意义，人生就了无生趣。我们需要在每天真实的努力中去拥抱生活，追寻真实的快乐。\n\n\n\n> 文章摘录自:B站视频《罗翔说刑法》，链接https://b23.tv/K8ulrE",normalizedContent:"生活在后现代的今天，很多人都有一种虚无感，认为人生没有意义。但是，人生不可能没有意义，因为当你认为没有意义的时候，一定有一个与之相对应的概念叫有意义。\n\n当你怀疑人生没有意义时，难道怀疑本身不值得怀疑吗？\n\n不要任由你内心的虚无感蔓延，我们需要去拥抱真实的生活。\n\n所有真实的快乐，都离不开艰辛的努力，无论是金榜题名的快乐，还是事业成功的喜悦，甚至包括洞房花烛的激动。所有真实的快乐，都需要长久的铺垫与努力，没有辛勤的汗水，快乐也就不再真实。\n\n如果快乐触手可及，这种廉价的快乐也就不值得珍惜，随时都可能抛弃。因此，对于年轻人而言，一个重要的功课就是学会去节制欲望。\n\n所有通过捷径所带来的快乐，都是廉价的，以至于所有追求都变得毫无意义，人生就了无生趣。我们需要在每天真实的努力中去拥抱生活，追寻真实的快乐。\n\n\n\n> 文章摘录自:b站视频《罗翔说刑法》，链接https://b23.tv/k8ulre",charsets:{cjk:!0},lastUpdated:"2020/08/01, 14:31:12",lastUpdatedTimestamp:1596263472e3},{title:"常用Git命令清单",frontmatter:{title:"常用Git命令清单",date:"2020-11-18T17:43:57.000Z",permalink:"/pages/8292d8/",categories:["《Git》学习笔记"],tags:["Git"]},regularPath:"/%E3%80%8AGit%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E6%89%8B%E5%86%8C/00.%E5%B8%B8%E7%94%A8Git%E5%91%BD%E4%BB%A4%E6%B8%85%E5%8D%95.html",relativePath:"《Git》学习笔记/10.手册/00.常用Git命令清单.md",key:"v-0925a2f8",path:"/pages/8292d8/",headers:[{level:2,title:"一、新建代码库",slug:"一、新建代码库",normalizedTitle:"一、新建代码库",charIndex:187},{level:2,title:"二、配置",slug:"二、配置",normalizedTitle:"二、配置",charIndex:334},{level:2,title:"三、增加/删除文件",slug:"三、增加-删除文件",normalizedTitle:"三、增加/删除文件",charIndex:605},{level:2,title:"四、代码提交",slug:"四、代码提交",normalizedTitle:"四、代码提交",charIndex:1005},{level:2,title:"五、分支",slug:"五、分支",normalizedTitle:"五、分支",charIndex:1406},{level:2,title:"六、标签",slug:"六、标签",normalizedTitle:"六、标签",charIndex:2199},{level:2,title:"七、查看信息",slug:"七、查看信息",normalizedTitle:"七、查看信息",charIndex:2616},{level:2,title:"八、远程同步",slug:"八、远程同步",normalizedTitle:"八、远程同步",charIndex:3725},{level:2,title:"九、撤销",slug:"九、撤销",normalizedTitle:"九、撤销",charIndex:4147},{level:2,title:"十、常用操作组合",slug:"十、常用操作组合",normalizedTitle:"十、常用操作组合",charIndex:4799},{level:3,title:"1. 修改本地分支名和远程分支名",slug:"_1-修改本地分支名和远程分支名",normalizedTitle:"1. 修改本地分支名和远程分支名",charIndex:4812}],headersStr:"一、新建代码库 二、配置 三、增加/删除文件 四、代码提交 五、分支 六、标签 七、查看信息 八、远程同步 九、撤销 十、常用操作组合 1. 修改本地分支名和远程分支名",content:'# 常用Git命令清单\n\n一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。\n\n\n\n下面是我整理的常用 Git 命令清单。几个专用名词的译名如下。\n\n>  * Workspace：工作区\n>  * Index / Stage：暂存区\n>  * Repository：仓库区（或本地仓库）\n>  * Remote：远程仓库\n\n\n# 一、新建代码库\n\n# 在当前目录新建一个Git代码库\n$ git init\n\n# 新建一个目录，将其初始化为Git代码库\n$ git init [project-name]\n\n# 下载一个项目和它的整个代码历史\n$ git clone [url]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 二、配置\n\nGit的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。\n\n# 显示当前的Git配置\n$ git config --list\n\n# 编辑Git配置文件\n$ git config -e [--global]\n\n# 设置提交代码时的用户信息\n$ git config [--global] user.name "[name]"\n$ git config [--global] user.email "[email address]"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 三、增加/删除文件\n\n# 添加指定文件到暂存区\n$ git add [file1] [file2] ...\n\n# 添加指定目录到暂存区，包括子目录\n$ git add [dir]\n\n# 添加当前目录的所有文件到暂存区\n$ git add .\n\n# 添加每个变化前，都会要求确认\n# 对于同一个文件的多处变化，可以实现分次提交\n$ git add -p\n\n# 删除工作区文件，并且将这次删除放入暂存区\n$ git rm [file1] [file2] ...\n\n# 停止追踪指定文件，但该文件会保留在工作区\n$ git rm --cached [file]\n\n# 改名文件，并且将这个改名放入暂存区\n$ git mv [file-original] [file-renamed]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n\n# 四、代码提交\n\n# 提交暂存区到仓库区\n$ git commit -m [message]\n\n# 提交暂存区的指定文件到仓库区\n$ git commit [file1] [file2] ... -m [message]\n\n# 提交工作区自上次commit之后的变化，直接到仓库区\n$ git commit -a\n\n# 提交时显示所有diff信息\n$ git commit -v\n\n# 使用一次新的commit，替代上一次提交\n# 如果代码没有任何新变化，则用来改写上一次commit的提交信息\n$ git commit --amend -m [message]\n\n# 重做上一次commit，并包括指定文件的新变化\n$ git commit --amend [file1] [file2] ...\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# 五、分支\n\n# 列出所有本地分支\n$ git branch\n\n# 列出所有远程分支\n$ git branch -r\n\n# 列出所有本地分支和远程分支\n$ git branch -a\n\n# 新建一个分支，但依然停留在当前分支\n$ git branch [branch-name]\n\n# 新建一个分支，并切换到该分支\n$ git checkout -b [branch]\n\n# 新建一个分支，指向指定commit\n$ git branch [branch] [commit]\n\n# 新建一个分支，与指定的远程分支建立追踪关系\n$ git branch --track [branch] [remote-branch]\n\n# 切换到指定分支，并更新工作区\n$ git checkout [branch-name]\n\n# 切换到上一个分支\n$ git checkout -\n\n# 建立追踪关系，在现有分支与指定的远程分支之间\n$ git branch --set-upstream [branch] [remote-branch]\n\n# 合并指定分支到当前分支\n$ git merge [branch]\n\n# 选择一个commit，合并进当前分支\n$ git cherry-pick [commit]\n\n# 删除分支\n$ git branch -d [branch-name]\n\n# 删除远程分支\n$ git push origin --delete [branch-name]\n$ git branch -dr [remote/branch]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n\n\n\n# 六、标签\n\n# 列出所有tag\n$ git tag\n\n# 新建一个tag在当前commit\n$ git tag [tag]\n\n# 新建一个tag在指定commit\n$ git tag [tag] [commit]\n\n# 删除本地tag\n$ git tag -d [tag]\n\n# 删除远程tag\n$ git push origin :refs/tags/[tagName]\n\n# 查看tag信息\n$ git show [tag]\n\n# 提交指定tag\n$ git push [remote] [tag]\n\n# 提交所有tag\n$ git push [remote] --tags\n\n# 新建一个分支，指向某个tag\n$ git checkout -b [branch] [tag]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n\n# 七、查看信息\n\n# 显示有变更的文件\n$ git status\n\n# 显示当前分支的版本历史\n$ git log\n\n# 显示commit历史，以及每次commit发生变更的文件\n$ git log --stat\n\n# 搜索提交历史，根据关键词\n$ git log -S [keyword]\n\n# 显示某个commit之后的所有变动，每个commit占据一行\n$ git log [tag] HEAD --pretty=format:%s\n\n# 显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件\n$ git log [tag] HEAD --grep feature\n\n# 显示某个文件的版本历史，包括文件改名\n$ git log --follow [file]\n$ git whatchanged [file]\n\n# 显示指定文件相关的每一次diff\n$ git log -p [file]\n\n# 显示过去5次提交\n$ git log -5 --pretty --oneline\n\n# 显示所有提交过的用户，按提交次数排序\n$ git shortlog -sn\n\n# 显示指定文件是什么人在什么时间修改过\n$ git blame [file]\n\n# 显示暂存区和工作区的差异\n$ git diff\n\n# 显示暂存区和上一个commit的差异\n$ git diff --cached [file]\n\n# 显示工作区与当前分支最新commit之间的差异\n$ git diff HEAD\n\n# 显示两次提交之间的差异\n$ git diff [first-branch]...[second-branch]\n\n# 显示今天你写了多少行代码\n$ git diff --shortstat "@{0 day ago}"\n\n# 显示某次提交的元数据和内容变化\n$ git show [commit]\n\n# 显示某次提交发生变化的文件\n$ git show --name-only [commit]\n\n# 显示某次提交时，某个文件的内容\n$ git show [commit]:[filename]\n\n# 显示当前分支的最近几次提交\n$ git reflog\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n\n\n\n# 八、远程同步\n\n# 下载远程仓库的所有变动\n$ git fetch [remote]\n\n# 显示所有远程仓库\n$ git remote -v\n\n# 显示某个远程仓库的信息\n$ git remote show [remote]\n\n# 增加一个新的远程仓库，并命名\n$ git remote add [shortname] [url]\n\n# 取回远程仓库的变化，并与本地分支合并\n$ git pull [remote] [branch]\n\n# 上传本地指定分支到远程仓库\n$ git push [remote] [branch]\n\n# 强行推送当前分支到远程仓库，即使有冲突\n$ git push [remote] --force\n\n# 推送所有分支到远程仓库\n$ git push [remote] --all\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# 九、撤销\n\n# 恢复暂存区的指定文件到工作区\n$ git checkout [file]\n\n# 恢复某个commit的指定文件到暂存区和工作区\n$ git checkout [commit] [file]\n\n# 恢复暂存区的所有文件到工作区\n$ git checkout .\n\n# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\n$ git reset [file]\n\n# 重置暂存区与工作区，与上一次commit保持一致\n$ git reset --hard\n\n# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\n$ git reset [commit]\n\n# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\n$ git reset --hard [commit]\n\n# 重置当前HEAD为指定commit，但保持暂存区和工作区不变\n$ git reset --keep [commit]\n\n# 新建一个commit，用来撤销指定commit\n# 后者的所有变化都将被前者抵消，并且应用到当前分支\n$ git revert [commit]\n\n# 暂时将未提交的变化移除，稍后再移入\n$ git stash\n$ git stash pop\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n\n\n\n# 十、常用操作组合\n\n\n# 1. 修改本地分支名和远程分支名\n\ngit branch -m old_branch new_branch # 重命名本地分支\ngit push origin :old_branch # 删除远程旧分支（分支名前有冒号）\ngit push --set-upstream origin new_branch # 推送新的分支，并设置本地分支跟踪新的远程分支\n\n\n1\n2\n3\n\n\n相关文章：\n\n《如何撤销 Git 操作？》\n\n《git cherry-pick 教程》 复制某分支上的部分提交到另一个分支上（相对于可以选择指定提交的 rebase 操作）。\n\n> 命令清单来源：https://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html',normalizedContent:'# 常用git命令清单\n\n一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。\n\n\n\n下面是我整理的常用 git 命令清单。几个专用名词的译名如下。\n\n>  * workspace：工作区\n>  * index / stage：暂存区\n>  * repository：仓库区（或本地仓库）\n>  * remote：远程仓库\n\n\n# 一、新建代码库\n\n# 在当前目录新建一个git代码库\n$ git init\n\n# 新建一个目录，将其初始化为git代码库\n$ git init [project-name]\n\n# 下载一个项目和它的整个代码历史\n$ git clone [url]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 二、配置\n\ngit的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。\n\n# 显示当前的git配置\n$ git config --list\n\n# 编辑git配置文件\n$ git config -e [--global]\n\n# 设置提交代码时的用户信息\n$ git config [--global] user.name "[name]"\n$ git config [--global] user.email "[email address]"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 三、增加/删除文件\n\n# 添加指定文件到暂存区\n$ git add [file1] [file2] ...\n\n# 添加指定目录到暂存区，包括子目录\n$ git add [dir]\n\n# 添加当前目录的所有文件到暂存区\n$ git add .\n\n# 添加每个变化前，都会要求确认\n# 对于同一个文件的多处变化，可以实现分次提交\n$ git add -p\n\n# 删除工作区文件，并且将这次删除放入暂存区\n$ git rm [file1] [file2] ...\n\n# 停止追踪指定文件，但该文件会保留在工作区\n$ git rm --cached [file]\n\n# 改名文件，并且将这个改名放入暂存区\n$ git mv [file-original] [file-renamed]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n\n# 四、代码提交\n\n# 提交暂存区到仓库区\n$ git commit -m [message]\n\n# 提交暂存区的指定文件到仓库区\n$ git commit [file1] [file2] ... -m [message]\n\n# 提交工作区自上次commit之后的变化，直接到仓库区\n$ git commit -a\n\n# 提交时显示所有diff信息\n$ git commit -v\n\n# 使用一次新的commit，替代上一次提交\n# 如果代码没有任何新变化，则用来改写上一次commit的提交信息\n$ git commit --amend -m [message]\n\n# 重做上一次commit，并包括指定文件的新变化\n$ git commit --amend [file1] [file2] ...\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# 五、分支\n\n# 列出所有本地分支\n$ git branch\n\n# 列出所有远程分支\n$ git branch -r\n\n# 列出所有本地分支和远程分支\n$ git branch -a\n\n# 新建一个分支，但依然停留在当前分支\n$ git branch [branch-name]\n\n# 新建一个分支，并切换到该分支\n$ git checkout -b [branch]\n\n# 新建一个分支，指向指定commit\n$ git branch [branch] [commit]\n\n# 新建一个分支，与指定的远程分支建立追踪关系\n$ git branch --track [branch] [remote-branch]\n\n# 切换到指定分支，并更新工作区\n$ git checkout [branch-name]\n\n# 切换到上一个分支\n$ git checkout -\n\n# 建立追踪关系，在现有分支与指定的远程分支之间\n$ git branch --set-upstream [branch] [remote-branch]\n\n# 合并指定分支到当前分支\n$ git merge [branch]\n\n# 选择一个commit，合并进当前分支\n$ git cherry-pick [commit]\n\n# 删除分支\n$ git branch -d [branch-name]\n\n# 删除远程分支\n$ git push origin --delete [branch-name]\n$ git branch -dr [remote/branch]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n\n\n\n# 六、标签\n\n# 列出所有tag\n$ git tag\n\n# 新建一个tag在当前commit\n$ git tag [tag]\n\n# 新建一个tag在指定commit\n$ git tag [tag] [commit]\n\n# 删除本地tag\n$ git tag -d [tag]\n\n# 删除远程tag\n$ git push origin :refs/tags/[tagname]\n\n# 查看tag信息\n$ git show [tag]\n\n# 提交指定tag\n$ git push [remote] [tag]\n\n# 提交所有tag\n$ git push [remote] --tags\n\n# 新建一个分支，指向某个tag\n$ git checkout -b [branch] [tag]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n\n# 七、查看信息\n\n# 显示有变更的文件\n$ git status\n\n# 显示当前分支的版本历史\n$ git log\n\n# 显示commit历史，以及每次commit发生变更的文件\n$ git log --stat\n\n# 搜索提交历史，根据关键词\n$ git log -s [keyword]\n\n# 显示某个commit之后的所有变动，每个commit占据一行\n$ git log [tag] head --pretty=format:%s\n\n# 显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件\n$ git log [tag] head --grep feature\n\n# 显示某个文件的版本历史，包括文件改名\n$ git log --follow [file]\n$ git whatchanged [file]\n\n# 显示指定文件相关的每一次diff\n$ git log -p [file]\n\n# 显示过去5次提交\n$ git log -5 --pretty --oneline\n\n# 显示所有提交过的用户，按提交次数排序\n$ git shortlog -sn\n\n# 显示指定文件是什么人在什么时间修改过\n$ git blame [file]\n\n# 显示暂存区和工作区的差异\n$ git diff\n\n# 显示暂存区和上一个commit的差异\n$ git diff --cached [file]\n\n# 显示工作区与当前分支最新commit之间的差异\n$ git diff head\n\n# 显示两次提交之间的差异\n$ git diff [first-branch]...[second-branch]\n\n# 显示今天你写了多少行代码\n$ git diff --shortstat "@{0 day ago}"\n\n# 显示某次提交的元数据和内容变化\n$ git show [commit]\n\n# 显示某次提交发生变化的文件\n$ git show --name-only [commit]\n\n# 显示某次提交时，某个文件的内容\n$ git show [commit]:[filename]\n\n# 显示当前分支的最近几次提交\n$ git reflog\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n\n\n\n# 八、远程同步\n\n# 下载远程仓库的所有变动\n$ git fetch [remote]\n\n# 显示所有远程仓库\n$ git remote -v\n\n# 显示某个远程仓库的信息\n$ git remote show [remote]\n\n# 增加一个新的远程仓库，并命名\n$ git remote add [shortname] [url]\n\n# 取回远程仓库的变化，并与本地分支合并\n$ git pull [remote] [branch]\n\n# 上传本地指定分支到远程仓库\n$ git push [remote] [branch]\n\n# 强行推送当前分支到远程仓库，即使有冲突\n$ git push [remote] --force\n\n# 推送所有分支到远程仓库\n$ git push [remote] --all\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# 九、撤销\n\n# 恢复暂存区的指定文件到工作区\n$ git checkout [file]\n\n# 恢复某个commit的指定文件到暂存区和工作区\n$ git checkout [commit] [file]\n\n# 恢复暂存区的所有文件到工作区\n$ git checkout .\n\n# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\n$ git reset [file]\n\n# 重置暂存区与工作区，与上一次commit保持一致\n$ git reset --hard\n\n# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\n$ git reset [commit]\n\n# 重置当前分支的head为指定commit，同时重置暂存区和工作区，与指定commit一致\n$ git reset --hard [commit]\n\n# 重置当前head为指定commit，但保持暂存区和工作区不变\n$ git reset --keep [commit]\n\n# 新建一个commit，用来撤销指定commit\n# 后者的所有变化都将被前者抵消，并且应用到当前分支\n$ git revert [commit]\n\n# 暂时将未提交的变化移除，稍后再移入\n$ git stash\n$ git stash pop\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n\n\n\n# 十、常用操作组合\n\n\n# 1. 修改本地分支名和远程分支名\n\ngit branch -m old_branch new_branch # 重命名本地分支\ngit push origin :old_branch # 删除远程旧分支（分支名前有冒号）\ngit push --set-upstream origin new_branch # 推送新的分支，并设置本地分支跟踪新的远程分支\n\n\n1\n2\n3\n\n\n相关文章：\n\n《如何撤销 git 操作？》\n\n《git cherry-pick 教程》 复制某分支上的部分提交到另一个分支上（相对于可以选择指定提交的 rebase 操作）。\n\n> 命令清单来源：https://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html',charsets:{cjk:!0},lastUpdated:"2021/03/25, 20:24:44",lastUpdatedTimestamp:1616675084e3},{title:"Git变基合并",frontmatter:{title:"Git变基合并",date:"2020-11-18T17:43:57.000Z",permalink:"/pages/c10281/",categories:["《Git》学习笔记"],tags:["Git"]},regularPath:"/%E3%80%8AGit%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E6%89%8B%E5%86%8C/03.Git%E5%8F%98%E5%9F%BA%E5%90%88%E5%B9%B6.html",relativePath:"《Git》学习笔记/10.手册/03.Git变基合并.md",key:"v-b855e89c",path:"/pages/c10281/",headers:[{level:2,title:"说明",slug:"说明",normalizedTitle:"说明",charIndex:17},{level:3,title:"变基要遵守的准则",slug:"变基要遵守的准则",normalizedTitle:"变基要遵守的准则",charIndex:750},{level:3,title:"变基的实质",slug:"变基的实质",normalizedTitle:"变基的实质",charIndex:815},{level:2,title:"后悔药",slug:"后悔药",normalizedTitle:"后悔药",charIndex:531},{level:2,title:"开发期间的rebase操作",slug:"开发期间的rebase操作",normalizedTitle:"开发期间的rebase操作",charIndex:1887},{level:3,title:"背景",slug:"背景",normalizedTitle:"背景",charIndex:1905},{level:3,title:"操作步骤",slug:"操作步骤",normalizedTitle:"操作步骤",charIndex:2159},{level:3,title:"git cherry-pick",slug:"git-cherry-pick",normalizedTitle:"git cherry-pick",charIndex:2524}],headersStr:"说明 变基要遵守的准则 变基的实质 后悔药 开发期间的rebase操作 背景 操作步骤 git cherry-pick",content:"# rebase分支合并\n\n\n# 说明\n\n以下 v2 是某个需求的开发分支， dev是总的开发分支，v2 是基于dev分支签出的。\n\n当完成v2的开发后，需要把代码合并到dev，我们可以使用rebase进行合并：\n\n# 首先将 v2 push到远程仓库\ngit add .\ngit commit -m 'xxx'\ngit push origin v2\n\n# 切换到 dev 拉取最新代码\ngit checkout dev\ngit pull origin dev\n\n# 切换到 v2\ngit checkout v2\ngit rebase dev # 将 v2 的所有[commit] 变基到(应用到) dev\n\n# 切换到 dev\ngit checkout dev\ngit merge v2  # 将 dev分支 快进合并 （此时 (HEAD -> dev, v2) [commit] 两个分支指向同一个提交）\n\n# 查看 原v2的[commit]记录 是否在dev分支的最前面（变基成功会把v2的提交记录应用到dev分支的最前面）\ngit log\n\n\t# 如果到这一步发现有问题，尝试使用 git --abort中止变基，如果还是有问题的可以在dev分支上使用《后悔药》操作， 再到v2分支上使用《后悔药》操作，即可使两个分支都回退到 rebase变基 之前的状态\n\n# 试运行项目是否有问题\nyarn start\n\ngit status # 查看状态是否有问题\ngit push origin dev # 推送到远程仓库的 dev\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\n\n# 变基要遵守的准则\n\n几个人同时在一个分支上进行开发和提交时，你不要中途执行变基，只有在大家都完成工作之后才可以执行变基。\n\n\n# 变基的实质\n\n变基操作的实质是丢弃一些现有的提交，然后相应地新建一些内容一样但实际上不同的提交。 因此，变基操作过后的分支将不要再使用。\n\n\n# 后悔药\n\n# 查看HEAD指针变动记录\ngit reflog\n# 记录示例(当前分支是v2):\n07c398f (HEAD -> v2, master) HEAD@{0}: checkout: moving from master to v2\n07c398f (HEAD -> v2, master) HEAD@{1}: rebase (finish): returning to refs/heads/master\n07c398f (HEAD -> v2, master) HEAD@{2}: rebase (start): checkout v2\n15a97d8 HEAD@{3}: reset: moving to 15a97d8\n07c398f (HEAD -> v2, master) HEAD@{4}: merge v2: Fast-forward\n15a97d8 HEAD@{5}: checkout: moving from v2 to master\n07c398f (HEAD -> v2, master) HEAD@{6}: rebase (finish): returning to refs/heads/v2\n07c398f (HEAD -> v2, master) HEAD@{7}: rebase (pick): C\n15a97d8 HEAD@{8}: rebase (start): checkout master # 首次rebase\nd278ecd HEAD@{9}: checkout: moving from master to v2 # rebase前的状态\n15a97d8 HEAD@{10}: commit: D\n\n# 可见，示例中最初的 rebase 操作是 HEAD@{8}，想回退到变基前的状态需让指针指向 HEAD@{9}\ngit reset --hard d278ecd  # 重置当前分支的HEAD为指定[commit]，同时重置暂存区和工作区，与指定[commit]一致\n\n# 此时打印 log 查看是否回到之前的状态\ngit log\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n注意：此操作只能回退当前的分支，如其他分支也要回退，需要切换到该分支并执行上面操作。\n\n\n# 开发期间的rebase操作\n\n\n# 背景\n\n有两个分支：\n\ndev\n*v2\n\n\n1\n2\n\n\n2.4-dev 是基于dev切出来的。\n\n提交记录如下：\n\n\t\tdev\na - b - c\n\t\tv2\n\n\n1\n2\n3\n\n\n开发期间，两个分支同时有新的commit ：\n\n\t\t\t\tdev\na - b - c - d - e\n\t\t\\ - f - g\n\t\t\t\tv2\n\n\n1\n2\n3\n4\n\n\n当前你正在v2进行开发，dev也同时进行开发，并有重大的改变，你需要把dev的提交同步到v2。\n\n需求： 把dev中新的提交同步到v2，且不能影响dev分支。\n\n\n# 操作步骤\n\n 1. 基于最新的 dev 切一个新的分支 dev-copy\n    \n    > dev-copy 和 dev 两者的 commit ID 一致。\n\n 2. 在dev-copy中执行rebase，将 dev-copy 的提交变基到 v2\n    \n    git rebase v2 # 将 dev-copy 的提交[commit] 变基到(应用到) v2\n    \n    \n    1\n    \n\n 3. 删除原v2分支，将dev-copy分支名改为v2\n    \n    # 当前在 dev-copy 分支\n    git branch -d v2 # 删除分支\n    git branch -m dev-copy v2 # 重命名\n    \n    \n    1\n    2\n    3\n    \n\n\n# git cherry-pick\n\n来源：《git cherry-pick 教程》\n\n用于将单个或几个[commit]复制到另一个分支。\n\n# 基本应用\n\ngit cherry-pick <commitHash> # 将commitHash应用于当前分支\n\n\n1\n\n\n上面命令就会将指定的提交commitHash，应用于当前分支。这会在当前分支产生一个新的提交，当然它们的哈希值会不一样。\n\ngit cherry-pick命令的参数，不一定是提交的哈希值，分支名也是可以的，表示转移该分支的最新提交。\n\n# 转移多个提交\n\nCherry pick 支持一次转移多个提交。\n\ngit cherry-pick <HashA> <HashB> # A和B提交\n\n\n1\n\n\n上面的命令将 A 和 B 两个提交应用到当前分支。这会在当前分支生成两个对应的新提交。\n\n如果想要转移一系列的连续提交，可以使用下面的简便语法。\n\ngit cherry-pick A..B # A到B提交，不包含A\n\n\n1\n\n\n上面的命令可以转移从 A 到 B 的所有提交。它们必须按照正确的顺序放置：提交 A 必须早于提交 B，否则命令将失败，但不会报错。\n\n注意，使用上面的命令，提交 A 将不会包含在 Cherry pick 中。如果要包含提交 A，可以使用下面的语法。\n\ngit cherry-pick A^..B # A到B提交，包含A\n\n\n1\n",normalizedContent:"# rebase分支合并\n\n\n# 说明\n\n以下 v2 是某个需求的开发分支， dev是总的开发分支，v2 是基于dev分支签出的。\n\n当完成v2的开发后，需要把代码合并到dev，我们可以使用rebase进行合并：\n\n# 首先将 v2 push到远程仓库\ngit add .\ngit commit -m 'xxx'\ngit push origin v2\n\n# 切换到 dev 拉取最新代码\ngit checkout dev\ngit pull origin dev\n\n# 切换到 v2\ngit checkout v2\ngit rebase dev # 将 v2 的所有[commit] 变基到(应用到) dev\n\n# 切换到 dev\ngit checkout dev\ngit merge v2  # 将 dev分支 快进合并 （此时 (head -> dev, v2) [commit] 两个分支指向同一个提交）\n\n# 查看 原v2的[commit]记录 是否在dev分支的最前面（变基成功会把v2的提交记录应用到dev分支的最前面）\ngit log\n\n\t# 如果到这一步发现有问题，尝试使用 git --abort中止变基，如果还是有问题的可以在dev分支上使用《后悔药》操作， 再到v2分支上使用《后悔药》操作，即可使两个分支都回退到 rebase变基 之前的状态\n\n# 试运行项目是否有问题\nyarn start\n\ngit status # 查看状态是否有问题\ngit push origin dev # 推送到远程仓库的 dev\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\n\n# 变基要遵守的准则\n\n几个人同时在一个分支上进行开发和提交时，你不要中途执行变基，只有在大家都完成工作之后才可以执行变基。\n\n\n# 变基的实质\n\n变基操作的实质是丢弃一些现有的提交，然后相应地新建一些内容一样但实际上不同的提交。 因此，变基操作过后的分支将不要再使用。\n\n\n# 后悔药\n\n# 查看head指针变动记录\ngit reflog\n# 记录示例(当前分支是v2):\n07c398f (head -> v2, master) head@{0}: checkout: moving from master to v2\n07c398f (head -> v2, master) head@{1}: rebase (finish): returning to refs/heads/master\n07c398f (head -> v2, master) head@{2}: rebase (start): checkout v2\n15a97d8 head@{3}: reset: moving to 15a97d8\n07c398f (head -> v2, master) head@{4}: merge v2: fast-forward\n15a97d8 head@{5}: checkout: moving from v2 to master\n07c398f (head -> v2, master) head@{6}: rebase (finish): returning to refs/heads/v2\n07c398f (head -> v2, master) head@{7}: rebase (pick): c\n15a97d8 head@{8}: rebase (start): checkout master # 首次rebase\nd278ecd head@{9}: checkout: moving from master to v2 # rebase前的状态\n15a97d8 head@{10}: commit: d\n\n# 可见，示例中最初的 rebase 操作是 head@{8}，想回退到变基前的状态需让指针指向 head@{9}\ngit reset --hard d278ecd  # 重置当前分支的head为指定[commit]，同时重置暂存区和工作区，与指定[commit]一致\n\n# 此时打印 log 查看是否回到之前的状态\ngit log\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n注意：此操作只能回退当前的分支，如其他分支也要回退，需要切换到该分支并执行上面操作。\n\n\n# 开发期间的rebase操作\n\n\n# 背景\n\n有两个分支：\n\ndev\n*v2\n\n\n1\n2\n\n\n2.4-dev 是基于dev切出来的。\n\n提交记录如下：\n\n\t\tdev\na - b - c\n\t\tv2\n\n\n1\n2\n3\n\n\n开发期间，两个分支同时有新的commit ：\n\n\t\t\t\tdev\na - b - c - d - e\n\t\t\\ - f - g\n\t\t\t\tv2\n\n\n1\n2\n3\n4\n\n\n当前你正在v2进行开发，dev也同时进行开发，并有重大的改变，你需要把dev的提交同步到v2。\n\n需求： 把dev中新的提交同步到v2，且不能影响dev分支。\n\n\n# 操作步骤\n\n 1. 基于最新的 dev 切一个新的分支 dev-copy\n    \n    > dev-copy 和 dev 两者的 commit id 一致。\n\n 2. 在dev-copy中执行rebase，将 dev-copy 的提交变基到 v2\n    \n    git rebase v2 # 将 dev-copy 的提交[commit] 变基到(应用到) v2\n    \n    \n    1\n    \n\n 3. 删除原v2分支，将dev-copy分支名改为v2\n    \n    # 当前在 dev-copy 分支\n    git branch -d v2 # 删除分支\n    git branch -m dev-copy v2 # 重命名\n    \n    \n    1\n    2\n    3\n    \n\n\n# git cherry-pick\n\n来源：《git cherry-pick 教程》\n\n用于将单个或几个[commit]复制到另一个分支。\n\n# 基本应用\n\ngit cherry-pick <commithash> # 将commithash应用于当前分支\n\n\n1\n\n\n上面命令就会将指定的提交commithash，应用于当前分支。这会在当前分支产生一个新的提交，当然它们的哈希值会不一样。\n\ngit cherry-pick命令的参数，不一定是提交的哈希值，分支名也是可以的，表示转移该分支的最新提交。\n\n# 转移多个提交\n\ncherry pick 支持一次转移多个提交。\n\ngit cherry-pick <hasha> <hashb> # a和b提交\n\n\n1\n\n\n上面的命令将 a 和 b 两个提交应用到当前分支。这会在当前分支生成两个对应的新提交。\n\n如果想要转移一系列的连续提交，可以使用下面的简便语法。\n\ngit cherry-pick a..b # a到b提交，不包含a\n\n\n1\n\n\n上面的命令可以转移从 a 到 b 的所有提交。它们必须按照正确的顺序放置：提交 a 必须早于提交 b，否则命令将失败，但不会报错。\n\n注意，使用上面的命令，提交 a 将不会包含在 cherry pick 中。如果要包含提交 a，可以使用下面的语法。\n\ngit cherry-pick a^..b # a到b提交，包含a\n\n\n1\n",charsets:{cjk:!0},lastUpdated:"2021/03/25, 20:24:44",lastUpdatedTimestamp:1616675084e3},{title:"Home",frontmatter:{home:!0,heroText:"Jim的知识库",tagline:"精准与否，就是屠宰与手术的区别",features:[{title:"MySQL",details:"MySQL、数据库、底层原理",link:"/mysql/",imgUrl:"/img/mysql-icon.svg"},{title:"Java",details:"Java、后端、面向对象",link:"/Java/",imgUrl:"/img/java-icon.svg"},{title:"Linux",details:"Linux、CentOS、服务器",link:"/linux/",imgUrl:"/img/linux-icon.svg"}]},regularPath:"/",relativePath:"index.md",key:"v-7e4aeb42",path:"/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/07/18, 17:00:04",lastUpdatedTimestamp:1658134804e3},{title:"Git命令思维导图",frontmatter:{title:"Git命令思维导图",date:"2020-11-18T17:46:22.000Z",permalink:"/pages/4cbc21/",categories:["《Git》学习笔记"],tags:["Git"]},regularPath:"/%E3%80%8AGit%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E6%89%8B%E5%86%8C/06.Git%E5%91%BD%E4%BB%A4%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE.html",relativePath:"《Git》学习笔记/10.手册/06.Git命令思维导图.md",key:"v-56bfe10b",path:"/pages/4cbc21/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/04/11, 10:49:20",lastUpdatedTimestamp:164964536e4},{title:"Git基础与命令",frontmatter:{title:"Git基础与命令",date:"2020-11-18T17:43:57.000Z",permalink:"/pages/635088/",categories:["《Git》学习笔记"],tags:["Git"]},regularPath:"/%E3%80%8AGit%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/10.Git%E5%9F%BA%E7%A1%80%E4%B8%8E%E5%91%BD%E4%BB%A4.html",relativePath:"《Git》学习笔记/20.文档笔记/10.Git基础与命令.md",key:"v-03f07c11",path:"/pages/635088/",headers:[{level:2,title:"Git基础",slug:"git基础",normalizedTitle:"git基础",charIndex:2},{level:3,title:"全局配置",slug:"全局配置",normalizedTitle:"全局配置",charIndex:93},{level:3,title:"检查配置信息",slug:"检查配置信息",normalizedTitle:"检查配置信息",charIndex:202},{level:3,title:"获取帮助",slug:"获取帮助",normalizedTitle:"获取帮助",charIndex:237},{level:3,title:"初始化仓库",slug:"初始化仓库",normalizedTitle:"初始化仓库",charIndex:398},{level:3,title:"克隆远程仓库",slug:"克隆远程仓库",normalizedTitle:"克隆远程仓库",charIndex:474},{level:3,title:"检查文件状态",slug:"检查文件状态",normalizedTitle:"检查文件状态",charIndex:623},{level:3,title:"加入暂存区 (跟踪文件)",slug:"加入暂存区-跟踪文件",normalizedTitle:"加入暂存区 (跟踪文件)",charIndex:950},{level:3,title:"忽略文件",slug:"忽略文件",normalizedTitle:"忽略文件",charIndex:1119},{level:3,title:"查看修改的具体内容",slug:"查看修改的具体内容",normalizedTitle:"查看修改的具体内容",charIndex:2105},{level:3,title:"提交更新",slug:"提交更新",normalizedTitle:"提交更新",charIndex:2263},{level:3,title:"跳过使用暂存区域",slug:"跳过使用暂存区域",normalizedTitle:"跳过使用暂存区域",charIndex:2406},{level:2,title:"Git 基础 - 查看提交历史",slug:"git-基础-查看提交历史",normalizedTitle:"git 基础 - 查看提交历史",charIndex:2506},{level:2,title:"Git 基础 - 撤消操作",slug:"git-基础-撤消操作",normalizedTitle:"git 基础 - 撤消操作",charIndex:4022},{level:2,title:"Git 基础 - 远程仓库的使用",slug:"git-基础-远程仓库的使用",normalizedTitle:"git 基础 - 远程仓库的使用",charIndex:4228},{level:3,title:"查看远程仓库",slug:"查看远程仓库",normalizedTitle:"查看远程仓库",charIndex:4249},{level:3,title:"添加远程仓库",slug:"添加远程仓库",normalizedTitle:"添加远程仓库",charIndex:4323},{level:3,title:"从远程仓库中抓取与拉取",slug:"从远程仓库中抓取与拉取",normalizedTitle:"从远程仓库中抓取与拉取",charIndex:4370},{level:3,title:"推送到远程仓库",slug:"推送到远程仓库",normalizedTitle:"推送到远程仓库",charIndex:1106},{level:3,title:"查看某个远程仓库",slug:"查看某个远程仓库",normalizedTitle:"查看某个远程仓库",charIndex:4825},{level:3,title:"远程仓库的重命名与移除",slug:"远程仓库的重命名与移除",normalizedTitle:"远程仓库的重命名与移除",charIndex:4951},{level:2,title:"Git 基础 - 打标签",slug:"git-基础-打标签",normalizedTitle:"git 基础 - 打标签",charIndex:5049},{level:3,title:"列出标签",slug:"列出标签",normalizedTitle:"列出标签",charIndex:5066},{level:3,title:"创建标签",slug:"创建标签",normalizedTitle:"创建标签",charIndex:5164},{level:3,title:"附注标签",slug:"附注标签",normalizedTitle:"附注标签",charIndex:5199},{level:3,title:"轻量标签",slug:"轻量标签",normalizedTitle:"轻量标签",charIndex:5181},{level:3,title:"后期打标签",slug:"后期打标签",normalizedTitle:"后期打标签",charIndex:5893},{level:3,title:"共享标签",slug:"共享标签",normalizedTitle:"共享标签",charIndex:6294},{level:3,title:"删除标签",slug:"删除标签",normalizedTitle:"删除标签",charIndex:6527},{level:3,title:"检出标签",slug:"检出标签",normalizedTitle:"检出标签",charIndex:7014},{level:2,title:"Git 命令别名",slug:"git-命令别名",normalizedTitle:"git 命令别名",charIndex:8135}],headersStr:"Git基础 全局配置 检查配置信息 获取帮助 初始化仓库 克隆远程仓库 检查文件状态 加入暂存区 (跟踪文件) 忽略文件 查看修改的具体内容 提交更新 跳过使用暂存区域 Git 基础 - 查看提交历史 Git 基础 - 撤消操作 Git 基础 - 远程仓库的使用 查看远程仓库 添加远程仓库 从远程仓库中抓取与拉取 推送到远程仓库 查看某个远程仓库 远程仓库的重命名与移除 Git 基础 - 打标签 列出标签 创建标签 附注标签 轻量标签 后期打标签 共享标签 删除标签 检出标签 Git 命令别名",content:"# Git基础与命令\n\n官方文档（中文）：https://git-scm.com/book/zh/v2\n\n> 本文档是根据官方文档来编写的，以官方文档为准。\n\n\n# Git基础\n\n\n# 全局配置\n\ngit config --global user.name 'your name'\ngit config --global user.email 'xxx@xx.com'\n\n\n1\n2\n\n\n自报家门\n\n\n# 检查配置信息\n\ngit config --list\n\n\n1\n\n\n\n# 获取帮助\n\n# 获取全局帮助手册\ngit help\n\n# 获取特定命令的详细版帮助手册 (两个命令是等价的)\ngit help <某个命令>\ngit <某个命令> --help # 两个横杠\n\n# 获取特定命令的简明版帮助手册\ngit <某个命令> -h  # 一个横杠\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 初始化仓库\n\n# 本地目录初始化仓库\ngit init\n\n\n1\n2\n\n\n如果你是从远程仓库clone的项目，则该项目是已经初始化好的git仓库\n\n\n# 克隆远程仓库\n\n# 克隆\ngit clone <url>\n\n# 克隆同时修改目录名\ngit clone <url> <name>\n\n\n1\n2\n3\n4\n5\n\n\n初次克隆某个仓库的时候，工作目录中的所有文件都属于已跟踪文件，并处于未修改状态，因为 Git 刚刚检出了它们， 而你尚未编辑过它们\n\n\n# 检查文件状态\n\n# 查看详细状态说明\ngit status\n\n# 查看简明状态说明\ngit status -s  # -s 或 --short\n M README # 已修改，但未暂存 （M的位置靠右，红色）\nMM Rakefile # 已修改，暂存后又作了修改（有暂存和未暂存）\nA  lib/git.rb # 新添加到暂存区，未提交\nM  lib/simplegit.rb # 已修改，已暂存 （M的位置靠左，绿色）\n?? LICENSE.txt # 新添加，未跟踪\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n * git目录中的文件状态包含：是否跟踪、是否修改、是否已存入暂存区\n\n * 参数的一个横杠表示缩写，两个横杠表示全称。\n\n\n# 加入暂存区 (跟踪文件)\n\n# 文件加入暂存区（跟踪指定文件)\ngit add <files>\n\n\n1\n2\n\n\ngit add 命令使用文件或目录的路径作为参数；如果参数是目录的路径，该命令将递归地跟踪该目录下的所有文件。\n\nadd 命令是将文件加入到暂存区，commit 命令的提交到本地仓库，push 命令是推送到远程仓库。\n\n\n# 忽略文件\n\n添加一个名为 .gitignore 的文件，列出要忽略的文件的模式\n\n*.[oa]  # 忽略以 .o 或 .a 结尾的文件（一般这类文件是编译过程出现）\n*~      # 忽略以 ~ 结尾的文件（一般是文本编辑软件保存的副本）\n\n\n1\n2\n\n\n文件 .gitignore 的格式规范如下：\n\n * 所有空行或者以 # 开头的行都会被 Git 忽略（注释符号）。\n\n * 可以使用标准的 glob 模式匹配，它会递归地应用在整个工作区中。\n   \n   > glob 模式是指 shell 所使用的简化了的正则表达式\n\n * 匹配模式可以以（/）开头防止递归。\n\n * 匹配模式可以以（/）结尾指定目录。\n\n * 要忽略指定模式以外的文件或目录，可以在模式前加上叹号（!）取反。\n\n----------------------------------------\n\n * 星号（*）匹配零个或多个任意字符\n * [abc] 匹配任何一个列在方括号中的字符 （这个例子要么匹配一个 a，要么匹配一个 b，要么匹配一个 c）\n * 问号（?）只匹配一个任意字符\n * [0-9] 表示匹配所有 0 到 9 的数字。在方括号中使用短划线分隔两个字符， 表示所有在这两个字符范围内的都可以匹配\n * 使用两个星号（**）表示匹配任意中间目录，比如 a/**/z 可以匹配 a/z 、 a/b/z 或 a/b/c/z 等。\n\n# 忽略所有的 .a 文件\n*.a\n\n# 但跟踪所有的 lib.a，即便你在前面忽略了 .a 文件\n!lib.a\n\n# 只忽略当前目录下的 TODO 文件，而不忽略 subdir/TODO\n/TODO\n\n# 忽略任何目录下名为 build 的文件夹\nbuild/\n\n# 忽略 doc/notes.txt，但不忽略 doc/server/arch.txt\ndoc/*.txt\n\n# 忽略 doc/ 目录及其所有子目录下的 .pdf 文件\ndoc/**/*.pdf\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\nGitHub 有一个十分详细的针对数十种项目及语言的 .gitignore 文件列表， 你可以在 https://github.com/github/gitignore 找到它。\n\n\n# 查看修改的具体内容\n\ngit diff # 比较修改之后还没有暂存起来的变化内容。\n\ngit diff --staged # 查看已暂存的将要添加到下次提交里的内容\n\n\n1\n2\n3\n\n\ngit status 只能查看文件变动的状态，并不能查看具体修改了哪些内容。使用git diff可以看到具体变动的内容。\n\n\n# 提交更新\n\ngit commit # 未带参数的会打开默认文本编辑器让你输入提交说明\n\ngit commit -m '提交说明' # 带-m参数直接输入提交说明\n\n\n1\n2\n3\n\n\n使用git commit提交更新，在此之前，务必确认所有变动已经被git add添加到暂存区。\n\n\n# 跳过使用暂存区域\n\ngit commit -a -m '提交说明'\n\n\n1\n\n\n添加-a选项可以跳过git add 步骤，把已经跟踪过的文件一并提交。\n\n注意：这个操作无法提交未跟踪的文件。\n\n\n# Git 基础 - 查看提交历史\n\ngit log\n\n\n1\n\n\n不传入任何参数的默认情况下，git log 会按时间先后顺序列出所有的提交，最近的更新排在最上面。\n\n此命令打印的数据中有一项是一长串的 SHA-1 校验码。\n\n带入-p或--patch查看提交的具体差异：\n\ngit log -p -2 # -p显示差异  -2显示最近的提交次数\n\n\n1\n\n\n--stat 显示每次提交的差异统计\n\ngit log --stat\n\n\n1\n\n\n--pretty 这个选项可以使用不同于默认格式的方式展示提交历史\n\n这个选项有一些内建的子选项供你使用。 比如 oneline 会将每个提交放在一行显示，在浏览大量的提交时非常有用。 另外还有 short，full 和 fuller 选项，它们展示信息的格式基本一致，但是详尽程度不一：\n\n$ git log --pretty=oneline\nca82a6dff817ec66f44342007202690a93763949 changed the version number\n085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7 removed unnecessary test\na11bef06a3f659402fe7563abf99ad00de2209e6 first commit\n\n\n1\n2\n3\n4\n\n\n最有意思的是 format ，可以定制记录的显示格式。 这样的输出对后期提取分析格外有用——因为你知道输出的格式不会随着 Git 的更新而发生改变：\n\n$ git log --pretty=format:\"%h - %an, %ar : %s\"\nca82a6d - Scott Chacon, 6 years ago : changed the version number\n085bb3b - Scott Chacon, 6 years ago : removed unnecessary test\na11bef0 - Scott Chacon, 6 years ago : first commit\n\n\n1\n2\n3\n4\n\n\ngit log --pretty=format 常用的选项 列出了 format 接受的常用格式占位符的写法及其代表的意义。\n\n当 oneline 或 format 与另一个 log 选项 --graph 结合使用时尤其有用。 这个选项添加了一些 ASCII 字符串来形象地展示你的分支、合并历史：\n\n$ git log --pretty=format:\"%h %s\" --graph\n* 2d3acf9 ignore errors from SIGCHLD on trap\n*  5e3ee11 Merge branch 'master' of git://github.com/dustin/grit\n|\\\n| * 420eac9 Added a method for getting the current branch.\n* | 30e367c timeout code and tests\n* | 5a09431 add timeout protection to grit\n* | e1193f8 support for heads with slashes in them\n|/\n* d6016bc require time for xmlschema\n*  11d191e Merge branch 'defunkt' into local\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# Git 基础 - 撤消操作\n\n你提交后发现忘记了暂存某些需要的修改，可以像下面这样操作：\n\n$ git commit -m 'initial commit'\n$ git add forgotten_file\n$ git commit --amend # 重新提交，且只有一次提交记录\n\n\n1\n2\n3\n\n\n最终你只会有一个提交——第二次提交将代替第一次提交的结果。\n\n更多撤销操作请了解 reset命令。\n\n\n# Git 基础 - 远程仓库的使用\n\n\n# 查看远程仓库\n\ngit remote # 仅显示远程仓库的名称\ngit remote -v # 显示远程仓库的名称 + 地址\n\n\n1\n2\n\n\n\n# 添加远程仓库\n\n git remote add <远程仓库名> <url>\n\n\n1\n\n\n\n# 从远程仓库中抓取与拉取\n\n就如刚才所见，从远程仓库中获得数据，可以执行：\n\ngit fetch <remote>\n\n\n1\n\n\n这个命令会访问远程仓库，从中拉取所有你还没有的数据。 执行完成后，你将会拥有那个远程仓库中所有分支的引用，可以随时合并或查看。\n\n注意： git fetch 命令只会将数据下载到你的本地仓库——它并不会自动合并或修改你当前的工作。 当准备好时你必须手动将其合并入你的工作。\n\ngit pull\n\n\n1\n\n\n用 git pull 命令来自动抓取后合并该远程分支到当前分支。 这或许是个更加简单舒服的工作流程。默认情况下，git clone 命令会自动设置本地 master 分支跟踪克隆的远程仓库的 master 分支（或其它名字的默认分支）。 运行 git pull 通常会从最初克隆的服务器上抓取数据并自动尝试合并到当前所在的分支。\n\n\n# 推送到远程仓库\n\ngit push <remote> <branch> # git push origin master\n\n\n1\n\n\n\n# 查看某个远程仓库\n\n git remote show <remote> # git remote show origin\n\n\n1\n\n\n查看远程仓库的详细信息。这个命令列出了当你在特定的分支上执行 git push 会自动地推送到哪一个远程分支\n\n\n# 远程仓库的重命名与移除\n\ngit remote rename <原名> <新名> # 重命名\ngit remote remove paul <remote># 移除远程仓库\n\n\n1\n2\n\n\n\n# Git 基础 - 打标签\n\n\n# 列出标签\n\ngit tag # 完整标签列表\ngit tag -l \"v2.0*\" # 只显示包含 v2.0 的标签。 注意加星号(*)\n\n\n1\n2\n\n\n-l 或 --list 都可以。\n\n\n# 创建标签\n\nGit 支持两种标签：轻量标签（lightweight）与附注标签（annotated）。\n\n轻量标签很像一个不会改变的分支——它只是某个特定提交的引用。\n\n而附注标签是存储在 Git 数据库中的一个完整对象， 它们是可以被校验的，其中包含打标签者的名字、电子邮件地址、日期时间， 此外还有一个标签信息，并且可以使用 GNU Privacy Guard （GPG）签名并验证。 通常会建议创建附注标签，这样你可以拥有以上所有信息。但是如果你只是想用一个临时的标签， 或者因为某些原因不想要保存这些信息，那么也可以用轻量标签。\n\n\n# 附注标签\n\ngit tag -a v1.4 -m \"my version 1.4\" # -a表示add， -m 表示附件信息\n\n\n1\n\n\n通过使用 git show 命令可以看到标签信息和与之对应的提交信息：\n\ngit show v1.4\n\n\n1\n\n\n\n# 轻量标签\n\n轻量标签本质上是将提交校验和存储到一个文件中——没有保存任何其他信息。 创建轻量标签，不需要使用 -a、-s 或 -m 选项，只需要提供标签名字：\n\ngit tag v1.4-lw # 不需要添加选项\n\n\n1\n\n\n这时，如果在标签上运行 git show，你不会看到额外的标签信息。 命令只会显示出提交信息：\n\n$ git show v1.4-lw\ncommit ca82a6dff817ec66f44342007202690a93763949\nAuthor: Scott Chacon <schacon@gee-mail.com>\nDate:   Mon Mar 17 21:52:11 2008 -0700\n\n\n1\n2\n3\n4\n\n\n\n# 后期打标签\n\n你也可以对过去的提交打标签。 假设提交历史是这样的：\n\n$ git log --pretty=oneline\n166ae0c4d3f420721acbb115cc33848dfcc2121a started write support\n9fceb02d0ae598e95dc970b74767f19372d61af8 updated rakefile\n8a5cbc430f1a9c3d00faaeffd07798508422908a updated readme\n\n\n1\n2\n3\n4\n\n\n现在，假设在 v1.2 时你忘记给项目打标签，也就是在 “updated rakefile” 提交。 你可以在之后补上标签。 要在那个提交上打标签，你需要在命令的末尾指定提交的校验和（或部分校验和）：\n\n$ git tag -a v1.2 9fceb02 # 打的标签属于附注标签\n\n\n1\n\n\n\n# 共享标签\n\ngit push 命令并不会传送标签到远程仓库服务器上。 在创建完标签后你必须显式地推送标签到共享服务器上。 这个过程就像共享远程分支一样——你可以运行 git push origin <tagname>。\n\ngit push origin v1.5 # 显式地推送标签到远程仓库\ngit push origin --tags # 一次性推送所有不在远程仓库上的标签\n\n\n1\n2\n\n\n现在，当其他人从仓库中克隆或拉取，他们也能得到你的那些标签。\n\n\n# 删除标签\n\n要删除掉你本地仓库上的标签，可以使用命令 git tag -d <tagname>。 例如，可以使用以下命令删除一个轻量标签：\n\n$ git tag -d v1.4-lw\nDeleted tag 'v1.4-lw' (was e7d5add)\n\n\n1\n2\n\n\n注意上述命令并不会从任何远程仓库中移除这个标签，你必须用 git push <remote> :refs/tags/<tagname> 来更新你的远程仓库：\n\n第一种变体是 git push <remote> :refs/tags/<tagname> ：\n\n$ git push origin :refs/tags/v1.4-lw\nTo /git@github.com:schacon/simplegit.git\n - [deleted]         v1.4-lw\n\n\n1\n2\n3\n\n\n上面这种操作的含义是，将冒号前面的空值推送到远程标签名，从而高效地删除它。\n\n第二种更直观的删除远程标签的方式是：\n\n$ git push origin --delete <tagname>\n\n\n1\n\n\n\n# 检出标签\n\n如果你想查看某个标签所指向的文件版本，可以使用 git checkout 命令， 虽然这会使你的仓库处于“分离头指针（detached HEAD）”的状态——这个状态有些不好的副作用：\n\n$ git checkout 2.0.0\nNote: checking out '2.0.0'.\n\nYou are in 'detached HEAD' state. You can look around, make experimental\nchanges and commit them, and you can discard any commits you make in this\nstate without impacting any branches by performing another checkout.\n\nIf you want to create a new branch to retain commits you create, you may\ndo so (now or later) by using -b with the checkout command again. Example:\n\n  git checkout -b <new-branch>\n\nHEAD is now at 99ada87... Merge pull request #89 from schacon/appendix-final\n\n$ git checkout 2.0-beta-0.1\nPrevious HEAD position was 99ada87... Merge pull request #89 from schacon/appendix-final\nHEAD is now at df3f601... add atlas.json and cover image\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n在“分离头指针”状态下，如果你做了某些更改然后提交它们，标签不会发生变化， 但你的新提交将不属于任何分支，并且将无法访问，除非通过确切的提交哈希才能访问。 因此，如果你需要进行更改，比如你要修复旧版本中的错误，那么通常需要创建一个新分支：\n\n$ git checkout -b version2 v2.0.0\nSwitched to a new branch 'version2'\n\n\n1\n2\n\n\n如果在这之后又进行了一次提交，version2 分支就会因为这个改动向前移动， 此时它就会和 v2.0.0 标签稍微有些不同，这时就要当心了。\n\n\n# Git 命令别名\n\nGit 并不会在你输入部分命令时自动推断出你想要的命令。 如果不想每次都输入完整的 Git 命令，可以通过 git config 文件来轻松地为每一个命令设置一个别名。 这里有一些例子你可以试试：\n\n$ git config --global alias.co checkout\n$ git config --global alias.br branch\n$ git config --global alias.ci commit\n$ git config --global alias.st status\n\n\n1\n2\n3\n4\n\n\n这意味着，当要输入 git commit 时，只需要输入 git ci。\n\n在创建你认为应该存在的命令时这个技术会很有用。 例如，为了解决取消暂存文件的易用性问题，可以向 Git 中添加你自己的取消暂存别名：\n\n$ git config --global alias.unstage 'reset HEAD --'\n\n\n1\n\n\n这会使下面的两个命令等价：\n\n$ git unstage fileA\n$ git reset HEAD -- fileA\n\n\n1\n2\n\n\n这样看起来更清楚一些。 通常也会添加一个 last 命令，像这样：\n\n$ git config --global alias.last 'log -1 HEAD'\n\n\n1\n\n\n这样，可以轻松地看到最后一次提交：\n\n$ git last\ncommit 66938dae3329c7aebe598c2246a8e6af90d04646\nAuthor: Josh Goebel <dreamer3@example.com>\nDate:   Tue Aug 26 19:48:51 2008 +0800\n\n    test for current head\n\n    Signed-off-by: Scott Chacon <schacon@example.com>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n可以看出，Git 只是简单地将别名替换为对应的命令。 然而，你可能想要执行外部命令，而不是一个 Git 子命令。 如果是那样的话，可以在命令前面加入 ! 符号。 如果你自己要写一些与 Git 仓库协作的工具的话，那会很有用。 我们现在演示将 git visual 定义为 gitk 的别名：\n\n$ git config --global alias.visual '!gitk'\n\n\n1\n",normalizedContent:"# git基础与命令\n\n官方文档（中文）：https://git-scm.com/book/zh/v2\n\n> 本文档是根据官方文档来编写的，以官方文档为准。\n\n\n# git基础\n\n\n# 全局配置\n\ngit config --global user.name 'your name'\ngit config --global user.email 'xxx@xx.com'\n\n\n1\n2\n\n\n自报家门\n\n\n# 检查配置信息\n\ngit config --list\n\n\n1\n\n\n\n# 获取帮助\n\n# 获取全局帮助手册\ngit help\n\n# 获取特定命令的详细版帮助手册 (两个命令是等价的)\ngit help <某个命令>\ngit <某个命令> --help # 两个横杠\n\n# 获取特定命令的简明版帮助手册\ngit <某个命令> -h  # 一个横杠\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 初始化仓库\n\n# 本地目录初始化仓库\ngit init\n\n\n1\n2\n\n\n如果你是从远程仓库clone的项目，则该项目是已经初始化好的git仓库\n\n\n# 克隆远程仓库\n\n# 克隆\ngit clone <url>\n\n# 克隆同时修改目录名\ngit clone <url> <name>\n\n\n1\n2\n3\n4\n5\n\n\n初次克隆某个仓库的时候，工作目录中的所有文件都属于已跟踪文件，并处于未修改状态，因为 git 刚刚检出了它们， 而你尚未编辑过它们\n\n\n# 检查文件状态\n\n# 查看详细状态说明\ngit status\n\n# 查看简明状态说明\ngit status -s  # -s 或 --short\n m readme # 已修改，但未暂存 （m的位置靠右，红色）\nmm rakefile # 已修改，暂存后又作了修改（有暂存和未暂存）\na  lib/git.rb # 新添加到暂存区，未提交\nm  lib/simplegit.rb # 已修改，已暂存 （m的位置靠左，绿色）\n?? license.txt # 新添加，未跟踪\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n * git目录中的文件状态包含：是否跟踪、是否修改、是否已存入暂存区\n\n * 参数的一个横杠表示缩写，两个横杠表示全称。\n\n\n# 加入暂存区 (跟踪文件)\n\n# 文件加入暂存区（跟踪指定文件)\ngit add <files>\n\n\n1\n2\n\n\ngit add 命令使用文件或目录的路径作为参数；如果参数是目录的路径，该命令将递归地跟踪该目录下的所有文件。\n\nadd 命令是将文件加入到暂存区，commit 命令的提交到本地仓库，push 命令是推送到远程仓库。\n\n\n# 忽略文件\n\n添加一个名为 .gitignore 的文件，列出要忽略的文件的模式\n\n*.[oa]  # 忽略以 .o 或 .a 结尾的文件（一般这类文件是编译过程出现）\n*~      # 忽略以 ~ 结尾的文件（一般是文本编辑软件保存的副本）\n\n\n1\n2\n\n\n文件 .gitignore 的格式规范如下：\n\n * 所有空行或者以 # 开头的行都会被 git 忽略（注释符号）。\n\n * 可以使用标准的 glob 模式匹配，它会递归地应用在整个工作区中。\n   \n   > glob 模式是指 shell 所使用的简化了的正则表达式\n\n * 匹配模式可以以（/）开头防止递归。\n\n * 匹配模式可以以（/）结尾指定目录。\n\n * 要忽略指定模式以外的文件或目录，可以在模式前加上叹号（!）取反。\n\n----------------------------------------\n\n * 星号（*）匹配零个或多个任意字符\n * [abc] 匹配任何一个列在方括号中的字符 （这个例子要么匹配一个 a，要么匹配一个 b，要么匹配一个 c）\n * 问号（?）只匹配一个任意字符\n * [0-9] 表示匹配所有 0 到 9 的数字。在方括号中使用短划线分隔两个字符， 表示所有在这两个字符范围内的都可以匹配\n * 使用两个星号（**）表示匹配任意中间目录，比如 a/**/z 可以匹配 a/z 、 a/b/z 或 a/b/c/z 等。\n\n# 忽略所有的 .a 文件\n*.a\n\n# 但跟踪所有的 lib.a，即便你在前面忽略了 .a 文件\n!lib.a\n\n# 只忽略当前目录下的 todo 文件，而不忽略 subdir/todo\n/todo\n\n# 忽略任何目录下名为 build 的文件夹\nbuild/\n\n# 忽略 doc/notes.txt，但不忽略 doc/server/arch.txt\ndoc/*.txt\n\n# 忽略 doc/ 目录及其所有子目录下的 .pdf 文件\ndoc/**/*.pdf\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\ngithub 有一个十分详细的针对数十种项目及语言的 .gitignore 文件列表， 你可以在 https://github.com/github/gitignore 找到它。\n\n\n# 查看修改的具体内容\n\ngit diff # 比较修改之后还没有暂存起来的变化内容。\n\ngit diff --staged # 查看已暂存的将要添加到下次提交里的内容\n\n\n1\n2\n3\n\n\ngit status 只能查看文件变动的状态，并不能查看具体修改了哪些内容。使用git diff可以看到具体变动的内容。\n\n\n# 提交更新\n\ngit commit # 未带参数的会打开默认文本编辑器让你输入提交说明\n\ngit commit -m '提交说明' # 带-m参数直接输入提交说明\n\n\n1\n2\n3\n\n\n使用git commit提交更新，在此之前，务必确认所有变动已经被git add添加到暂存区。\n\n\n# 跳过使用暂存区域\n\ngit commit -a -m '提交说明'\n\n\n1\n\n\n添加-a选项可以跳过git add 步骤，把已经跟踪过的文件一并提交。\n\n注意：这个操作无法提交未跟踪的文件。\n\n\n# git 基础 - 查看提交历史\n\ngit log\n\n\n1\n\n\n不传入任何参数的默认情况下，git log 会按时间先后顺序列出所有的提交，最近的更新排在最上面。\n\n此命令打印的数据中有一项是一长串的 sha-1 校验码。\n\n带入-p或--patch查看提交的具体差异：\n\ngit log -p -2 # -p显示差异  -2显示最近的提交次数\n\n\n1\n\n\n--stat 显示每次提交的差异统计\n\ngit log --stat\n\n\n1\n\n\n--pretty 这个选项可以使用不同于默认格式的方式展示提交历史\n\n这个选项有一些内建的子选项供你使用。 比如 oneline 会将每个提交放在一行显示，在浏览大量的提交时非常有用。 另外还有 short，full 和 fuller 选项，它们展示信息的格式基本一致，但是详尽程度不一：\n\n$ git log --pretty=oneline\nca82a6dff817ec66f44342007202690a93763949 changed the version number\n085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7 removed unnecessary test\na11bef06a3f659402fe7563abf99ad00de2209e6 first commit\n\n\n1\n2\n3\n4\n\n\n最有意思的是 format ，可以定制记录的显示格式。 这样的输出对后期提取分析格外有用——因为你知道输出的格式不会随着 git 的更新而发生改变：\n\n$ git log --pretty=format:\"%h - %an, %ar : %s\"\nca82a6d - scott chacon, 6 years ago : changed the version number\n085bb3b - scott chacon, 6 years ago : removed unnecessary test\na11bef0 - scott chacon, 6 years ago : first commit\n\n\n1\n2\n3\n4\n\n\ngit log --pretty=format 常用的选项 列出了 format 接受的常用格式占位符的写法及其代表的意义。\n\n当 oneline 或 format 与另一个 log 选项 --graph 结合使用时尤其有用。 这个选项添加了一些 ascii 字符串来形象地展示你的分支、合并历史：\n\n$ git log --pretty=format:\"%h %s\" --graph\n* 2d3acf9 ignore errors from sigchld on trap\n*  5e3ee11 merge branch 'master' of git://github.com/dustin/grit\n|\\\n| * 420eac9 added a method for getting the current branch.\n* | 30e367c timeout code and tests\n* | 5a09431 add timeout protection to grit\n* | e1193f8 support for heads with slashes in them\n|/\n* d6016bc require time for xmlschema\n*  11d191e merge branch 'defunkt' into local\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# git 基础 - 撤消操作\n\n你提交后发现忘记了暂存某些需要的修改，可以像下面这样操作：\n\n$ git commit -m 'initial commit'\n$ git add forgotten_file\n$ git commit --amend # 重新提交，且只有一次提交记录\n\n\n1\n2\n3\n\n\n最终你只会有一个提交——第二次提交将代替第一次提交的结果。\n\n更多撤销操作请了解 reset命令。\n\n\n# git 基础 - 远程仓库的使用\n\n\n# 查看远程仓库\n\ngit remote # 仅显示远程仓库的名称\ngit remote -v # 显示远程仓库的名称 + 地址\n\n\n1\n2\n\n\n\n# 添加远程仓库\n\n git remote add <远程仓库名> <url>\n\n\n1\n\n\n\n# 从远程仓库中抓取与拉取\n\n就如刚才所见，从远程仓库中获得数据，可以执行：\n\ngit fetch <remote>\n\n\n1\n\n\n这个命令会访问远程仓库，从中拉取所有你还没有的数据。 执行完成后，你将会拥有那个远程仓库中所有分支的引用，可以随时合并或查看。\n\n注意： git fetch 命令只会将数据下载到你的本地仓库——它并不会自动合并或修改你当前的工作。 当准备好时你必须手动将其合并入你的工作。\n\ngit pull\n\n\n1\n\n\n用 git pull 命令来自动抓取后合并该远程分支到当前分支。 这或许是个更加简单舒服的工作流程。默认情况下，git clone 命令会自动设置本地 master 分支跟踪克隆的远程仓库的 master 分支（或其它名字的默认分支）。 运行 git pull 通常会从最初克隆的服务器上抓取数据并自动尝试合并到当前所在的分支。\n\n\n# 推送到远程仓库\n\ngit push <remote> <branch> # git push origin master\n\n\n1\n\n\n\n# 查看某个远程仓库\n\n git remote show <remote> # git remote show origin\n\n\n1\n\n\n查看远程仓库的详细信息。这个命令列出了当你在特定的分支上执行 git push 会自动地推送到哪一个远程分支\n\n\n# 远程仓库的重命名与移除\n\ngit remote rename <原名> <新名> # 重命名\ngit remote remove paul <remote># 移除远程仓库\n\n\n1\n2\n\n\n\n# git 基础 - 打标签\n\n\n# 列出标签\n\ngit tag # 完整标签列表\ngit tag -l \"v2.0*\" # 只显示包含 v2.0 的标签。 注意加星号(*)\n\n\n1\n2\n\n\n-l 或 --list 都可以。\n\n\n# 创建标签\n\ngit 支持两种标签：轻量标签（lightweight）与附注标签（annotated）。\n\n轻量标签很像一个不会改变的分支——它只是某个特定提交的引用。\n\n而附注标签是存储在 git 数据库中的一个完整对象， 它们是可以被校验的，其中包含打标签者的名字、电子邮件地址、日期时间， 此外还有一个标签信息，并且可以使用 gnu privacy guard （gpg）签名并验证。 通常会建议创建附注标签，这样你可以拥有以上所有信息。但是如果你只是想用一个临时的标签， 或者因为某些原因不想要保存这些信息，那么也可以用轻量标签。\n\n\n# 附注标签\n\ngit tag -a v1.4 -m \"my version 1.4\" # -a表示add， -m 表示附件信息\n\n\n1\n\n\n通过使用 git show 命令可以看到标签信息和与之对应的提交信息：\n\ngit show v1.4\n\n\n1\n\n\n\n# 轻量标签\n\n轻量标签本质上是将提交校验和存储到一个文件中——没有保存任何其他信息。 创建轻量标签，不需要使用 -a、-s 或 -m 选项，只需要提供标签名字：\n\ngit tag v1.4-lw # 不需要添加选项\n\n\n1\n\n\n这时，如果在标签上运行 git show，你不会看到额外的标签信息。 命令只会显示出提交信息：\n\n$ git show v1.4-lw\ncommit ca82a6dff817ec66f44342007202690a93763949\nauthor: scott chacon <schacon@gee-mail.com>\ndate:   mon mar 17 21:52:11 2008 -0700\n\n\n1\n2\n3\n4\n\n\n\n# 后期打标签\n\n你也可以对过去的提交打标签。 假设提交历史是这样的：\n\n$ git log --pretty=oneline\n166ae0c4d3f420721acbb115cc33848dfcc2121a started write support\n9fceb02d0ae598e95dc970b74767f19372d61af8 updated rakefile\n8a5cbc430f1a9c3d00faaeffd07798508422908a updated readme\n\n\n1\n2\n3\n4\n\n\n现在，假设在 v1.2 时你忘记给项目打标签，也就是在 “updated rakefile” 提交。 你可以在之后补上标签。 要在那个提交上打标签，你需要在命令的末尾指定提交的校验和（或部分校验和）：\n\n$ git tag -a v1.2 9fceb02 # 打的标签属于附注标签\n\n\n1\n\n\n\n# 共享标签\n\ngit push 命令并不会传送标签到远程仓库服务器上。 在创建完标签后你必须显式地推送标签到共享服务器上。 这个过程就像共享远程分支一样——你可以运行 git push origin <tagname>。\n\ngit push origin v1.5 # 显式地推送标签到远程仓库\ngit push origin --tags # 一次性推送所有不在远程仓库上的标签\n\n\n1\n2\n\n\n现在，当其他人从仓库中克隆或拉取，他们也能得到你的那些标签。\n\n\n# 删除标签\n\n要删除掉你本地仓库上的标签，可以使用命令 git tag -d <tagname>。 例如，可以使用以下命令删除一个轻量标签：\n\n$ git tag -d v1.4-lw\ndeleted tag 'v1.4-lw' (was e7d5add)\n\n\n1\n2\n\n\n注意上述命令并不会从任何远程仓库中移除这个标签，你必须用 git push <remote> :refs/tags/<tagname> 来更新你的远程仓库：\n\n第一种变体是 git push <remote> :refs/tags/<tagname> ：\n\n$ git push origin :refs/tags/v1.4-lw\nto /git@github.com:schacon/simplegit.git\n - [deleted]         v1.4-lw\n\n\n1\n2\n3\n\n\n上面这种操作的含义是，将冒号前面的空值推送到远程标签名，从而高效地删除它。\n\n第二种更直观的删除远程标签的方式是：\n\n$ git push origin --delete <tagname>\n\n\n1\n\n\n\n# 检出标签\n\n如果你想查看某个标签所指向的文件版本，可以使用 git checkout 命令， 虽然这会使你的仓库处于“分离头指针（detached head）”的状态——这个状态有些不好的副作用：\n\n$ git checkout 2.0.0\nnote: checking out '2.0.0'.\n\nyou are in 'detached head' state. you can look around, make experimental\nchanges and commit them, and you can discard any commits you make in this\nstate without impacting any branches by performing another checkout.\n\nif you want to create a new branch to retain commits you create, you may\ndo so (now or later) by using -b with the checkout command again. example:\n\n  git checkout -b <new-branch>\n\nhead is now at 99ada87... merge pull request #89 from schacon/appendix-final\n\n$ git checkout 2.0-beta-0.1\nprevious head position was 99ada87... merge pull request #89 from schacon/appendix-final\nhead is now at df3f601... add atlas.json and cover image\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n在“分离头指针”状态下，如果你做了某些更改然后提交它们，标签不会发生变化， 但你的新提交将不属于任何分支，并且将无法访问，除非通过确切的提交哈希才能访问。 因此，如果你需要进行更改，比如你要修复旧版本中的错误，那么通常需要创建一个新分支：\n\n$ git checkout -b version2 v2.0.0\nswitched to a new branch 'version2'\n\n\n1\n2\n\n\n如果在这之后又进行了一次提交，version2 分支就会因为这个改动向前移动， 此时它就会和 v2.0.0 标签稍微有些不同，这时就要当心了。\n\n\n# git 命令别名\n\ngit 并不会在你输入部分命令时自动推断出你想要的命令。 如果不想每次都输入完整的 git 命令，可以通过 git config 文件来轻松地为每一个命令设置一个别名。 这里有一些例子你可以试试：\n\n$ git config --global alias.co checkout\n$ git config --global alias.br branch\n$ git config --global alias.ci commit\n$ git config --global alias.st status\n\n\n1\n2\n3\n4\n\n\n这意味着，当要输入 git commit 时，只需要输入 git ci。\n\n在创建你认为应该存在的命令时这个技术会很有用。 例如，为了解决取消暂存文件的易用性问题，可以向 git 中添加你自己的取消暂存别名：\n\n$ git config --global alias.unstage 'reset head --'\n\n\n1\n\n\n这会使下面的两个命令等价：\n\n$ git unstage filea\n$ git reset head -- filea\n\n\n1\n2\n\n\n这样看起来更清楚一些。 通常也会添加一个 last 命令，像这样：\n\n$ git config --global alias.last 'log -1 head'\n\n\n1\n\n\n这样，可以轻松地看到最后一次提交：\n\n$ git last\ncommit 66938dae3329c7aebe598c2246a8e6af90d04646\nauthor: josh goebel <dreamer3@example.com>\ndate:   tue aug 26 19:48:51 2008 +0800\n\n    test for current head\n\n    signed-off-by: scott chacon <schacon@example.com>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n可以看出，git 只是简单地将别名替换为对应的命令。 然而，你可能想要执行外部命令，而不是一个 git 子命令。 如果是那样的话，可以在命令前面加入 ! 符号。 如果你自己要写一些与 git 仓库协作的工具的话，那会很有用。 我们现在演示将 git visual 定义为 gitk 的别名：\n\n$ git config --global alias.visual '!gitk'\n\n\n1\n",charsets:{cjk:!0},lastUpdated:"2022/01/02, 21:52:07",lastUpdatedTimestamp:1641131527e3},{title:"Git工具-重写历史",frontmatter:{title:"Git工具-重写历史",date:"2020-11-18T17:43:57.000Z",permalink:"/pages/1832fe/",categories:["《Git》学习笔记"],tags:["Git"]},regularPath:"/%E3%80%8AGit%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/100.Git%E5%B7%A5%E5%85%B7-%E9%87%8D%E5%86%99%E5%8E%86%E5%8F%B2.html",relativePath:"《Git》学习笔记/20.文档笔记/100.Git工具-重写历史.md",key:"v-487776ae",path:"/pages/1832fe/",headers:[{level:2,title:"修改最后一次提交",slug:"修改最后一次提交",normalizedTitle:"修改最后一次提交",charIndex:453},{level:3,title:"修改提交信息",slug:"修改提交信息",normalizedTitle:"修改提交信息",charIndex:519},{level:3,title:"修改实际内容",slug:"修改实际内容",normalizedTitle:"修改实际内容",charIndex:700},{level:2,title:"修改多个提交信息",slug:"修改多个提交信息",normalizedTitle:"修改多个提交信息",charIndex:1113},{level:2,title:"重新排序提交",slug:"重新排序提交",normalizedTitle:"重新排序提交",charIndex:4034},{level:2,title:"压缩提交",slug:"压缩提交",normalizedTitle:"压缩提交",charIndex:4460},{level:2,title:"拆分提交",slug:"拆分提交",normalizedTitle:"拆分提交",charIndex:6218},{level:2,title:"核武器级选项：filter-branch",slug:"核武器级选项-filter-branch",normalizedTitle:"核武器级选项：filter-branch",charIndex:7244},{level:3,title:"从每一个提交中移除一个文件",slug:"从每一个提交中移除一个文件",normalizedTitle:"从每一个提交中移除一个文件",charIndex:7318},{level:3,title:"使一个子目录做为新的根目录",slug:"使一个子目录做为新的根目录",normalizedTitle:"使一个子目录做为新的根目录",charIndex:8358},{level:3,title:"全局修改邮箱地址",slug:"全局修改邮箱地址",normalizedTitle:"全局修改邮箱地址",charIndex:8684}],headersStr:"修改最后一次提交 修改提交信息 修改实际内容 修改多个提交信息 重新排序提交 压缩提交 拆分提交 核武器级选项：filter-branch 从每一个提交中移除一个文件 使一个子目录做为新的根目录 全局修改邮箱地址",content:"# Git 工具 - 重写历史\n\n许多时候，在使用 Git 时，你可能想要修订提交历史。 Git 很棒的一点是它允许你在最后时刻做决定。 你可以在将暂存区内容提交前决定哪些文件进入提交，可以通过 git stash 来决定不与某些内容工作， 也可以重写已经发生的提交就像它们以另一种方式发生的一样。 这可能涉及改变提交的顺序，改变提交中的信息或修改文件，将提交压缩或是拆分， 或完全地移除提交——在将你的工作成果与他人共享之前。\n\n在本节中，你可以学到如何完成这些工作，这样在与他人分享你的工作成果时你的提交历史将如你所愿地展示出来。\n\nNOTE   在满意之前不要推送你的工作GIT 的基本原则之一是，由于克隆中有很多工作是本地的，因此你可以 在本地 随便重写历史记录。\n       然而一旦推送了你的工作，那就完全是另一回事了，除非你有充分的理由进行更改，否则应该将推送的工作视为最终结果。\n       简而言之，在对它感到满意并准备与他人分享之前，应当避免推送你的工作。\n       \n\n\n# 修改最后一次提交\n\n修改你最近一次提交可能是所有修改历史提交的操作中最常见的一个。 对于你的最近一次提交，你往往想做两件事情：简单地修改提交信息， 或者通过添加、移除或修改文件来更改提交实际的内容。\n\n\n# 修改提交信息\n\n如果，你只是想修改最近一次提交的提交信息，那么很简单：\n\n$ git commit --amend\n\n\n1\n\n\n上面这条命令会将最后一次的提交信息载入到编辑器中供你修改。 当保存并关闭编辑器后，编辑器会将更新后的提交信息写入新提交中，它会成为新的最后一次提交。\n\n\n# 修改实际内容\n\n另一方面，如果你想要修改最后一次提交的实际内容，那么流程很相似：首先作出你想要补上的修改， 暂存它们，然后用 git commit --amend 以新的改进后的提交来 替换 掉旧有的最后一次提交，\n\n使用这个技巧的时候需要小心，因为修正会改变提交的 SHA-1 校验和。 它类似于一个小的变基——如果已经推送了最后一次提交就不要修正它。\n\nTIP   修补后的提交可能需要修补提交信息当你在修补一次提交时，可以同时修改提交信息和提交内容。\n      如果你修补了提交的内容，那么几乎肯定要更新提交消息以反映修改后的内容。另一方面，如果你的修补是琐碎的（如修改了一个笔误或添加了一个忘记暂存的文件），\n      那么之前的提交信息不必修改，你只需作出更改，暂存它们，然后通过以下命令避免不必要的编辑器环节即可：$ GIT\n      COMMIT --AMEND --NO-EDIT\n      \n\n\n# 修改多个提交信息\n\n为了修改在提交历史中较远的提交，必须使用更复杂的工具。 Git 没有一个改变历史工具，但是可以使用变基工具来变基一系列提交，基于它们原来的 HEAD 而不是将其移动到另一个新的上面。 通过交互式变基工具，可以在任何想要修改的提交后停止，然后修改信息、添加文件或做任何想做的事情。 可以通过给 git rebase 增加 -i 选项来交互式地运行变基。 必须指定想要重写多久远的历史，这可以通过告诉命令将要变基到的提交来做到。\n\n例如，如果想要修改最近三次提交信息，或者那组提交中的任意一个提交信息， 将想要修改的最近一次提交的父提交作为参数传递给 git rebase -i 命令，即 HEAD~2^ 或 HEAD~3。 记住 ~3 可能比较容易，因为你正尝试修改最后三次提交；但是注意实际上指定了以前的四次提交，即想要修改提交的父提交：\n\n$ git rebase -i HEAD~3\n\n\n1\n\n\n再次记住这是一个变基命令——在 HEAD~3..HEAD 范围内的每一个修改了提交信息的提交及其 所有后裔 都会被重写。 不要涉及任何已经推送到中央服务器的提交——这样做会产生一次变更的两个版本，因而使他人困惑。\n\n运行这个命令会在文本编辑器上给你一个提交的列表，看起来像下面这样：\n\npick f7f3f6d changed my name a bit\npick 310154e updated README formatting and added blame\npick a5f4a0d added cat-file\n\n# Rebase 710f0f8..a5f4a0d onto 710f0f8\n#\n# Commands:\n# p, pick <commit> = use commit\n# r, reword <commit> = use commit, but edit the commit message\n# e, edit <commit> = use commit, but stop for amending\n# s, squash <commit> = use commit, but meld into previous commit\n# f, fixup <commit> = like \"squash\", but discard this commit's log message\n# x, exec <command> = run command (the rest of the line) using shell\n# b, break = stop here (continue rebase later with 'git rebase --continue')\n# d, drop <commit> = remove commit\n# l, label <label> = label current HEAD with a name\n# t, reset <label> = reset HEAD to a label\n# m, merge [-C <commit> | -c <commit>] <label> [# <oneline>]\n# .       create a merge commit using the original merge commit's\n# .       message (or the oneline, if no original merge commit was\n# .       specified). Use -c <commit> to reword the commit message.\n#\n# These lines can be re-ordered; they are executed from top to bottom.\n#\n# If you remove a line here THAT COMMIT WILL BE LOST.\n#\n# However, if you remove everything, the rebase will be aborted.\n#\n# Note that empty commits are commented out\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n\n需要重点注意的是相对于正常使用的 log 命令，这些提交显示的顺序是相反的。 运行一次 log 命令，会看到类似这样的东西：\n\n$ git log --pretty=format:\"%h %s\" HEAD~3..HEAD\na5f4a0d added cat-file\n310154e updated README formatting and added blame\nf7f3f6d changed my name a bit\n\n\n1\n2\n3\n4\n\n\n注意其中的反序显示。 交互式变基给你一个它将会运行的脚本。 它将会从你在命令行中指定的提交（HEAD~3）开始，从上到下的依次重演每一个提交引入的修改。 它将最旧的而不是最新的列在上面，因为那会是第一个将要重演的。\n\n你需要修改脚本来让它停留在你想修改的变更上。 要达到这个目的，你只要将你想修改的每一次提交前面的 ‘pick’ 改为 ‘edit’。 例如，只想修改第三次提交信息，可以像下面这样修改文件：\n\nedit f7f3f6d changed my name a bit\npick 310154e updated README formatting and added blame\npick a5f4a0d added cat-file\n\n\n1\n2\n3\n\n\n当保存并退出编辑器时，Git 将你带回到列表中的最后一次提交，把你送回命令行并提示以下信息：\n\n$ git rebase -i HEAD~3\nStopped at f7f3f6d... changed my name a bit\nYou can amend the commit now, with\n\n       git commit --amend\n\nOnce you're satisfied with your changes, run\n\n       git rebase --continue\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n这些指令准确地告诉你该做什么。 输入\n\n$ git commit --amend\n\n\n1\n\n\n修改提交信息，然后退出编辑器。 然后，运行\n\n$ git rebase --continue\n\n\n1\n\n\n这个命令将会自动地应用另外两个提交，然后就完成了。 如果需要将不止一处的 pick 改为 edit，需要在每一个修改为 edit 的提交上重复这些步骤。 每一次，Git 将会停止，让你修正提交，然后继续直到完成。\n\n\n# 重新排序提交\n\n也可以使用交互式变基来重新排序或完全移除提交。 如果想要移除 “added cat-file” 提交然后修改另外两个提交引入的顺序，可以将变基脚本从这样：\n\npick f7f3f6d changed my name a bit\npick 310154e updated README formatting and added blame\npick a5f4a0d added cat-file\n\n\n1\n2\n3\n\n\n改为这样：\n\npick 310154e updated README formatting and added blame\npick f7f3f6d changed my name a bit\n\n\n1\n2\n\n\n当保存并退出编辑器时，Git 将你的分支带回这些提交的父提交，应用 310154e 然后应用 f7f3f6d，最后停止。 事实修改了那些提交的顺序并完全地移除了 “added cat-file” 提交。\n\n\n# 压缩提交\n\n通过交互式变基工具，也可以将一连串提交压缩成一个单独的提交。 在变基信息中脚本给出了有用的指令：\n\n#\n# Commands:\n# p, pick <commit> = use commit\n# r, reword <commit> = use commit, but edit the commit message\n# e, edit <commit> = use commit, but stop for amending\n# s, squash <commit> = use commit, but meld into previous commit\n# f, fixup <commit> = like \"squash\", but discard this commit's log message\n# x, exec <command> = run command (the rest of the line) using shell\n# b, break = stop here (continue rebase later with 'git rebase --continue')\n# d, drop <commit> = remove commit\n# l, label <label> = label current HEAD with a name\n# t, reset <label> = reset HEAD to a label\n# m, merge [-C <commit> | -c <commit>] <label> [# <oneline>]\n# .       create a merge commit using the original merge commit's\n# .       message (or the oneline, if no original merge commit was\n# .       specified). Use -c <commit> to reword the commit message.\n#\n# These lines can be re-ordered; they are executed from top to bottom.\n#\n# If you remove a line here THAT COMMIT WILL BE LOST.\n#\n# However, if you remove everything, the rebase will be aborted.\n#\n# Note that empty commits are commented out\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n如果，指定 “squash” 而不是 “pick” 或 “edit”，Git 将应用两者的修改并合并提交信息在一起。 所以，如果想要这三次提交变为一个提交，可以这样修改脚本：\n\npick f7f3f6d changed my name a bit\nsquash 310154e updated README formatting and added blame\nsquash a5f4a0d added cat-file\n\n\n1\n2\n3\n\n\n当保存并退出编辑器时，Git 应用所有的三次修改然后将你放到编辑器中来合并三次提交信息：\n\n# This is a combination of 3 commits.\n# The first commit's message is:\nchanged my name a bit\n\n# This is the 2nd commit message:\n\nupdated README formatting and added blame\n\n# This is the 3rd commit message:\n\nadded cat-file\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n当你保存之后，你就拥有了一个包含前三次提交的全部变更的提交。\n\n\n# 拆分提交\n\n拆分一个提交会撤消这个提交，然后多次地部分地暂存与提交直到完成你所需次数的提交。 例如，假设想要拆分三次提交的中间那次提交。 想要将它拆分为两次提交：第一个 “updated README formatting”，第二个 “added blame” 来代替原来的 “updated README formatting and added blame”。 可以通过修改 rebase -i 的脚本来做到这点，将要拆分的提交的指令修改为 “edit”：\n\npick f7f3f6d changed my name a bit\nedit 310154e updated README formatting and added blame\npick a5f4a0d added cat-file\n\n\n1\n2\n3\n\n\n然后，当脚本带你进入到命令行时，重置那个提交，拿到被重置的修改，从中创建几次提交。 当保存并退出编辑器时，Git 带你到列表中第一个提交的父提交，应用第一个提交（f7f3f6d）， 应用第二个提交（310154e），然后让你进入命令行。 那里，可以通过 git reset HEAD^ 做一次针对那个提交的混合重置，实际上将会撤消那次提交并将修改的文件取消暂存。 现在可以暂存并提交文件直到有几个提交，然后当完成时运行 git rebase --continue：\n\n$ git reset HEAD^\n$ git add README\n$ git commit -m 'updated README formatting'\n$ git add lib/simplegit.rb\n$ git commit -m 'added blame'\n$ git rebase --continue\n\n\n1\n2\n3\n4\n5\n6\n\n\nGit 在脚本中应用最后一次提交（a5f4a0d），历史记录看起来像这样：\n\n$ git log -4 --pretty=format:\"%h %s\"\n1c002dd added cat-file\n9b29157 added blame\n35cfb2b updated README formatting\nf3cc40e changed my name a bit\n\n\n1\n2\n3\n4\n5\n\n\n再次强调，这些改动了所有在列表中的提交的 SHA-1 校验和，所以要确保列表中的提交还没有推送到共享仓库中。\n\n\n# 核武器级选项：filter-branch\n\n有另一个历史改写的选项，如果想要通过脚本的方式改写大量提交的话可以使用它——例如，全局修改你的邮箱地址或从每一个提交中移除一个文件。 这个命令是 filter-branch，它可以改写历史中大量的提交，除非你的项目还没有公开并且其他人没有基于要改写的工作的提交做的工作，否则你不应当使用它。 然而，它可以很有用。 你将会学习到几个常用的用途，这样就得到了它适合使用地方的想法。\n\nCAUTION   GIT FILTER-BRANCH 有很多陷阱，不再推荐使用它来重写历史。 请考虑使用\n          GIT-FILTER-REPO，它是一个 PYTHON 脚本，相比大多数使用 FILTER-BRANCH\n          的应用来说，它做得要更好。它的文档和源码可访问\n          HTTPS://GITHUB.COM/NEWREN/GIT-FILTER-REPO 获取。\n          \n\n\n# 从每一个提交中移除一个文件\n\n这经常发生。 有人粗心地通过 git add . 提交了一个巨大的二进制文件，你想要从所有地方删除。 可能偶然地提交了一个包括一个密码的文件，然而你想要开源项目。 filter-branch 是一个可能会用来擦洗整个提交历史的工具。 为了从整个提交历史中移除一个叫做 passwords.txt 的文件，可以使用 --tree-filter 选项给 filter-branch：\n\n$ git filter-branch --tree-filter 'rm -f passwords.txt' HEAD\nRewrite 6b9b3cf04e7c5686a9cb838c3f36a8cb6a0fc2bd (21/21)\nRef 'refs/heads/master' was rewritten\n\n\n1\n2\n3\n\n\n--tree-filter 选项在检出项目的每一个提交后运行指定的命令然后重新提交结果。 在本例中，你从每一个快照中移除了一个叫作 passwords.txt 的文件，无论它是否存在。 如果想要移除所有偶然提交的编辑器备份文件，可以运行类似 git filter-branch --tree-filter 'rm -f *~' HEAD 的命令。\n\n最后将可以看到 Git 重写树与提交然后移动分支指针。 通常一个好的想法是在一个测试分支中做这件事，然后当你决定最终结果是真正想要的，可以硬重置 master 分支。 为了让 filter-branch 在所有分支上运行，可以给命令传递 --all 选项。\n\n\n# 使一个子目录做为新的根目录\n\n假设已经从另一个源代码控制系统中导入，并且有几个没意义的子目录（trunk、tags 等等）。 如果想要让 trunk 子目录作为每一个提交的新的项目根目录，filter-branch 也可以帮助你那么做：\n\n$ git filter-branch --subdirectory-filter trunk HEAD\nRewrite 856f0bf61e41a27326cdae8f09fe708d679f596f (12/12)\nRef 'refs/heads/master' was rewritten\n\n\n1\n2\n3\n\n\n现在新项目根目录是 trunk 子目录了。 Git 会自动移除所有不影响子目录的提交。\n\n\n# 全局修改邮箱地址\n\n另一个常见的情形是在你开始工作时忘记运行 git config 来设置你的名字与邮箱地址， 或者你想要开源一个项目并且修改所有你的工作邮箱地址为你的个人邮箱地址。 任何情形下，你也可以通过 filter-branch 来一次性修改多个提交中的邮箱地址。 需要小心的是只修改你自己的邮箱地址，所以你使用 --commit-filter：\n\n$ git filter-branch --commit-filter '\n        if [ \"$GIT_AUTHOR_EMAIL\" = \"schacon@localhost\" ];\n        then\n                GIT_AUTHOR_NAME=\"Scott Chacon\";\n                GIT_AUTHOR_EMAIL=\"schacon@example.com\";\n                git commit-tree \"$@\";\n        else\n                git commit-tree \"$@\";\n        fi' HEAD\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n这会遍历并重写每一个提交来包含你的新邮箱地址。 因为提交包含了它们父提交的 SHA-1 校验和，这个命令会修改你的历史中的每一个提交的 SHA-1 校验和， 而不仅仅只是那些匹配邮箱地址的提交。",normalizedContent:"# git 工具 - 重写历史\n\n许多时候，在使用 git 时，你可能想要修订提交历史。 git 很棒的一点是它允许你在最后时刻做决定。 你可以在将暂存区内容提交前决定哪些文件进入提交，可以通过 git stash 来决定不与某些内容工作， 也可以重写已经发生的提交就像它们以另一种方式发生的一样。 这可能涉及改变提交的顺序，改变提交中的信息或修改文件，将提交压缩或是拆分， 或完全地移除提交——在将你的工作成果与他人共享之前。\n\n在本节中，你可以学到如何完成这些工作，这样在与他人分享你的工作成果时你的提交历史将如你所愿地展示出来。\n\nnote   在满意之前不要推送你的工作git 的基本原则之一是，由于克隆中有很多工作是本地的，因此你可以 在本地 随便重写历史记录。\n       然而一旦推送了你的工作，那就完全是另一回事了，除非你有充分的理由进行更改，否则应该将推送的工作视为最终结果。\n       简而言之，在对它感到满意并准备与他人分享之前，应当避免推送你的工作。\n       \n\n\n# 修改最后一次提交\n\n修改你最近一次提交可能是所有修改历史提交的操作中最常见的一个。 对于你的最近一次提交，你往往想做两件事情：简单地修改提交信息， 或者通过添加、移除或修改文件来更改提交实际的内容。\n\n\n# 修改提交信息\n\n如果，你只是想修改最近一次提交的提交信息，那么很简单：\n\n$ git commit --amend\n\n\n1\n\n\n上面这条命令会将最后一次的提交信息载入到编辑器中供你修改。 当保存并关闭编辑器后，编辑器会将更新后的提交信息写入新提交中，它会成为新的最后一次提交。\n\n\n# 修改实际内容\n\n另一方面，如果你想要修改最后一次提交的实际内容，那么流程很相似：首先作出你想要补上的修改， 暂存它们，然后用 git commit --amend 以新的改进后的提交来 替换 掉旧有的最后一次提交，\n\n使用这个技巧的时候需要小心，因为修正会改变提交的 sha-1 校验和。 它类似于一个小的变基——如果已经推送了最后一次提交就不要修正它。\n\ntip   修补后的提交可能需要修补提交信息当你在修补一次提交时，可以同时修改提交信息和提交内容。\n      如果你修补了提交的内容，那么几乎肯定要更新提交消息以反映修改后的内容。另一方面，如果你的修补是琐碎的（如修改了一个笔误或添加了一个忘记暂存的文件），\n      那么之前的提交信息不必修改，你只需作出更改，暂存它们，然后通过以下命令避免不必要的编辑器环节即可：$ git\n      commit --amend --no-edit\n      \n\n\n# 修改多个提交信息\n\n为了修改在提交历史中较远的提交，必须使用更复杂的工具。 git 没有一个改变历史工具，但是可以使用变基工具来变基一系列提交，基于它们原来的 head 而不是将其移动到另一个新的上面。 通过交互式变基工具，可以在任何想要修改的提交后停止，然后修改信息、添加文件或做任何想做的事情。 可以通过给 git rebase 增加 -i 选项来交互式地运行变基。 必须指定想要重写多久远的历史，这可以通过告诉命令将要变基到的提交来做到。\n\n例如，如果想要修改最近三次提交信息，或者那组提交中的任意一个提交信息， 将想要修改的最近一次提交的父提交作为参数传递给 git rebase -i 命令，即 head~2^ 或 head~3。 记住 ~3 可能比较容易，因为你正尝试修改最后三次提交；但是注意实际上指定了以前的四次提交，即想要修改提交的父提交：\n\n$ git rebase -i head~3\n\n\n1\n\n\n再次记住这是一个变基命令——在 head~3..head 范围内的每一个修改了提交信息的提交及其 所有后裔 都会被重写。 不要涉及任何已经推送到中央服务器的提交——这样做会产生一次变更的两个版本，因而使他人困惑。\n\n运行这个命令会在文本编辑器上给你一个提交的列表，看起来像下面这样：\n\npick f7f3f6d changed my name a bit\npick 310154e updated readme formatting and added blame\npick a5f4a0d added cat-file\n\n# rebase 710f0f8..a5f4a0d onto 710f0f8\n#\n# commands:\n# p, pick <commit> = use commit\n# r, reword <commit> = use commit, but edit the commit message\n# e, edit <commit> = use commit, but stop for amending\n# s, squash <commit> = use commit, but meld into previous commit\n# f, fixup <commit> = like \"squash\", but discard this commit's log message\n# x, exec <command> = run command (the rest of the line) using shell\n# b, break = stop here (continue rebase later with 'git rebase --continue')\n# d, drop <commit> = remove commit\n# l, label <label> = label current head with a name\n# t, reset <label> = reset head to a label\n# m, merge [-c <commit> | -c <commit>] <label> [# <oneline>]\n# .       create a merge commit using the original merge commit's\n# .       message (or the oneline, if no original merge commit was\n# .       specified). use -c <commit> to reword the commit message.\n#\n# these lines can be re-ordered; they are executed from top to bottom.\n#\n# if you remove a line here that commit will be lost.\n#\n# however, if you remove everything, the rebase will be aborted.\n#\n# note that empty commits are commented out\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n\n需要重点注意的是相对于正常使用的 log 命令，这些提交显示的顺序是相反的。 运行一次 log 命令，会看到类似这样的东西：\n\n$ git log --pretty=format:\"%h %s\" head~3..head\na5f4a0d added cat-file\n310154e updated readme formatting and added blame\nf7f3f6d changed my name a bit\n\n\n1\n2\n3\n4\n\n\n注意其中的反序显示。 交互式变基给你一个它将会运行的脚本。 它将会从你在命令行中指定的提交（head~3）开始，从上到下的依次重演每一个提交引入的修改。 它将最旧的而不是最新的列在上面，因为那会是第一个将要重演的。\n\n你需要修改脚本来让它停留在你想修改的变更上。 要达到这个目的，你只要将你想修改的每一次提交前面的 ‘pick’ 改为 ‘edit’。 例如，只想修改第三次提交信息，可以像下面这样修改文件：\n\nedit f7f3f6d changed my name a bit\npick 310154e updated readme formatting and added blame\npick a5f4a0d added cat-file\n\n\n1\n2\n3\n\n\n当保存并退出编辑器时，git 将你带回到列表中的最后一次提交，把你送回命令行并提示以下信息：\n\n$ git rebase -i head~3\nstopped at f7f3f6d... changed my name a bit\nyou can amend the commit now, with\n\n       git commit --amend\n\nonce you're satisfied with your changes, run\n\n       git rebase --continue\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n这些指令准确地告诉你该做什么。 输入\n\n$ git commit --amend\n\n\n1\n\n\n修改提交信息，然后退出编辑器。 然后，运行\n\n$ git rebase --continue\n\n\n1\n\n\n这个命令将会自动地应用另外两个提交，然后就完成了。 如果需要将不止一处的 pick 改为 edit，需要在每一个修改为 edit 的提交上重复这些步骤。 每一次，git 将会停止，让你修正提交，然后继续直到完成。\n\n\n# 重新排序提交\n\n也可以使用交互式变基来重新排序或完全移除提交。 如果想要移除 “added cat-file” 提交然后修改另外两个提交引入的顺序，可以将变基脚本从这样：\n\npick f7f3f6d changed my name a bit\npick 310154e updated readme formatting and added blame\npick a5f4a0d added cat-file\n\n\n1\n2\n3\n\n\n改为这样：\n\npick 310154e updated readme formatting and added blame\npick f7f3f6d changed my name a bit\n\n\n1\n2\n\n\n当保存并退出编辑器时，git 将你的分支带回这些提交的父提交，应用 310154e 然后应用 f7f3f6d，最后停止。 事实修改了那些提交的顺序并完全地移除了 “added cat-file” 提交。\n\n\n# 压缩提交\n\n通过交互式变基工具，也可以将一连串提交压缩成一个单独的提交。 在变基信息中脚本给出了有用的指令：\n\n#\n# commands:\n# p, pick <commit> = use commit\n# r, reword <commit> = use commit, but edit the commit message\n# e, edit <commit> = use commit, but stop for amending\n# s, squash <commit> = use commit, but meld into previous commit\n# f, fixup <commit> = like \"squash\", but discard this commit's log message\n# x, exec <command> = run command (the rest of the line) using shell\n# b, break = stop here (continue rebase later with 'git rebase --continue')\n# d, drop <commit> = remove commit\n# l, label <label> = label current head with a name\n# t, reset <label> = reset head to a label\n# m, merge [-c <commit> | -c <commit>] <label> [# <oneline>]\n# .       create a merge commit using the original merge commit's\n# .       message (or the oneline, if no original merge commit was\n# .       specified). use -c <commit> to reword the commit message.\n#\n# these lines can be re-ordered; they are executed from top to bottom.\n#\n# if you remove a line here that commit will be lost.\n#\n# however, if you remove everything, the rebase will be aborted.\n#\n# note that empty commits are commented out\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n如果，指定 “squash” 而不是 “pick” 或 “edit”，git 将应用两者的修改并合并提交信息在一起。 所以，如果想要这三次提交变为一个提交，可以这样修改脚本：\n\npick f7f3f6d changed my name a bit\nsquash 310154e updated readme formatting and added blame\nsquash a5f4a0d added cat-file\n\n\n1\n2\n3\n\n\n当保存并退出编辑器时，git 应用所有的三次修改然后将你放到编辑器中来合并三次提交信息：\n\n# this is a combination of 3 commits.\n# the first commit's message is:\nchanged my name a bit\n\n# this is the 2nd commit message:\n\nupdated readme formatting and added blame\n\n# this is the 3rd commit message:\n\nadded cat-file\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n当你保存之后，你就拥有了一个包含前三次提交的全部变更的提交。\n\n\n# 拆分提交\n\n拆分一个提交会撤消这个提交，然后多次地部分地暂存与提交直到完成你所需次数的提交。 例如，假设想要拆分三次提交的中间那次提交。 想要将它拆分为两次提交：第一个 “updated readme formatting”，第二个 “added blame” 来代替原来的 “updated readme formatting and added blame”。 可以通过修改 rebase -i 的脚本来做到这点，将要拆分的提交的指令修改为 “edit”：\n\npick f7f3f6d changed my name a bit\nedit 310154e updated readme formatting and added blame\npick a5f4a0d added cat-file\n\n\n1\n2\n3\n\n\n然后，当脚本带你进入到命令行时，重置那个提交，拿到被重置的修改，从中创建几次提交。 当保存并退出编辑器时，git 带你到列表中第一个提交的父提交，应用第一个提交（f7f3f6d）， 应用第二个提交（310154e），然后让你进入命令行。 那里，可以通过 git reset head^ 做一次针对那个提交的混合重置，实际上将会撤消那次提交并将修改的文件取消暂存。 现在可以暂存并提交文件直到有几个提交，然后当完成时运行 git rebase --continue：\n\n$ git reset head^\n$ git add readme\n$ git commit -m 'updated readme formatting'\n$ git add lib/simplegit.rb\n$ git commit -m 'added blame'\n$ git rebase --continue\n\n\n1\n2\n3\n4\n5\n6\n\n\ngit 在脚本中应用最后一次提交（a5f4a0d），历史记录看起来像这样：\n\n$ git log -4 --pretty=format:\"%h %s\"\n1c002dd added cat-file\n9b29157 added blame\n35cfb2b updated readme formatting\nf3cc40e changed my name a bit\n\n\n1\n2\n3\n4\n5\n\n\n再次强调，这些改动了所有在列表中的提交的 sha-1 校验和，所以要确保列表中的提交还没有推送到共享仓库中。\n\n\n# 核武器级选项：filter-branch\n\n有另一个历史改写的选项，如果想要通过脚本的方式改写大量提交的话可以使用它——例如，全局修改你的邮箱地址或从每一个提交中移除一个文件。 这个命令是 filter-branch，它可以改写历史中大量的提交，除非你的项目还没有公开并且其他人没有基于要改写的工作的提交做的工作，否则你不应当使用它。 然而，它可以很有用。 你将会学习到几个常用的用途，这样就得到了它适合使用地方的想法。\n\ncaution   git filter-branch 有很多陷阱，不再推荐使用它来重写历史。 请考虑使用\n          git-filter-repo，它是一个 python 脚本，相比大多数使用 filter-branch\n          的应用来说，它做得要更好。它的文档和源码可访问\n          https://github.com/newren/git-filter-repo 获取。\n          \n\n\n# 从每一个提交中移除一个文件\n\n这经常发生。 有人粗心地通过 git add . 提交了一个巨大的二进制文件，你想要从所有地方删除。 可能偶然地提交了一个包括一个密码的文件，然而你想要开源项目。 filter-branch 是一个可能会用来擦洗整个提交历史的工具。 为了从整个提交历史中移除一个叫做 passwords.txt 的文件，可以使用 --tree-filter 选项给 filter-branch：\n\n$ git filter-branch --tree-filter 'rm -f passwords.txt' head\nrewrite 6b9b3cf04e7c5686a9cb838c3f36a8cb6a0fc2bd (21/21)\nref 'refs/heads/master' was rewritten\n\n\n1\n2\n3\n\n\n--tree-filter 选项在检出项目的每一个提交后运行指定的命令然后重新提交结果。 在本例中，你从每一个快照中移除了一个叫作 passwords.txt 的文件，无论它是否存在。 如果想要移除所有偶然提交的编辑器备份文件，可以运行类似 git filter-branch --tree-filter 'rm -f *~' head 的命令。\n\n最后将可以看到 git 重写树与提交然后移动分支指针。 通常一个好的想法是在一个测试分支中做这件事，然后当你决定最终结果是真正想要的，可以硬重置 master 分支。 为了让 filter-branch 在所有分支上运行，可以给命令传递 --all 选项。\n\n\n# 使一个子目录做为新的根目录\n\n假设已经从另一个源代码控制系统中导入，并且有几个没意义的子目录（trunk、tags 等等）。 如果想要让 trunk 子目录作为每一个提交的新的项目根目录，filter-branch 也可以帮助你那么做：\n\n$ git filter-branch --subdirectory-filter trunk head\nrewrite 856f0bf61e41a27326cdae8f09fe708d679f596f (12/12)\nref 'refs/heads/master' was rewritten\n\n\n1\n2\n3\n\n\n现在新项目根目录是 trunk 子目录了。 git 会自动移除所有不影响子目录的提交。\n\n\n# 全局修改邮箱地址\n\n另一个常见的情形是在你开始工作时忘记运行 git config 来设置你的名字与邮箱地址， 或者你想要开源一个项目并且修改所有你的工作邮箱地址为你的个人邮箱地址。 任何情形下，你也可以通过 filter-branch 来一次性修改多个提交中的邮箱地址。 需要小心的是只修改你自己的邮箱地址，所以你使用 --commit-filter：\n\n$ git filter-branch --commit-filter '\n        if [ \"$git_author_email\" = \"schacon@localhost\" ];\n        then\n                git_author_name=\"scott chacon\";\n                git_author_email=\"schacon@example.com\";\n                git commit-tree \"$@\";\n        else\n                git commit-tree \"$@\";\n        fi' head\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n这会遍历并重写每一个提交来包含你的新邮箱地址。 因为提交包含了它们父提交的 sha-1 校验和，这个命令会修改你的历史中的每一个提交的 sha-1 校验和， 而不仅仅只是那些匹配邮箱地址的提交。",charsets:{cjk:!0},lastUpdated:"2021/03/25, 20:24:44",lastUpdatedTimestamp:1616675084e3},{title:"Git工具-重置揭密",frontmatter:{title:"Git工具-重置揭密",date:"2020-11-18T17:43:57.000Z",permalink:"/pages/d9e9c6/",categories:["《Git》学习笔记"],tags:["Git"]},regularPath:"/%E3%80%8AGit%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/110.Git%E5%B7%A5%E5%85%B7-%E9%87%8D%E7%BD%AE%E6%8F%AD%E5%AF%86.html",relativePath:"《Git》学习笔记/20.文档笔记/110.Git工具-重置揭密.md",key:"v-1d80ae54",path:"/pages/d9e9c6/",headers:[{level:2,title:"三棵树",slug:"三棵树",normalizedTitle:"三棵树",charIndex:147},{level:3,title:"HEAD",slug:"head",normalizedTitle:"head",charIndex:348},{level:3,title:"索引",slug:"索引",normalizedTitle:"索引",charIndex:257},{level:3,title:"工作目录",slug:"工作目录",normalizedTitle:"工作目录",charIndex:1116},{level:2,title:"工作流程",slug:"工作流程",normalizedTitle:"工作流程",charIndex:1764},{level:2,title:"重置的作用",slug:"重置的作用",normalizedTitle:"重置的作用",charIndex:2573},{level:3,title:"第 1 步：移动 HEAD",slug:"第-1-步-移动-head",normalizedTitle:"第 1 步：移动 head",charIndex:2720},{level:3,title:"第 2 步：更新索引（--mixed）",slug:"第-2-步-更新索引-mixed",normalizedTitle:"第 2 步：更新索引（--mixed）",charIndex:3207},{level:3,title:"第 3 步：更新工作目录（--hard）",slug:"第-3-步-更新工作目录-hard",normalizedTitle:"第 3 步：更新工作目录（--hard）",charIndex:3507},{level:3,title:"回顾",slug:"回顾",normalizedTitle:"回顾",charIndex:3867},{level:2,title:"通过路径来重置",slug:"通过路径来重置",normalizedTitle:"通过路径来重置",charIndex:4002},{level:2,title:"压缩",slug:"压缩",normalizedTitle:"压缩",charIndex:4855},{level:2,title:"检出",slug:"检出",normalizedTitle:"检出",charIndex:1113},{level:3,title:"不带路径",slug:"不带路径",normalizedTitle:"不带路径",charIndex:5428},{level:3,title:"带路径",slug:"带路径",normalizedTitle:"带路径",charIndex:5429},{level:2,title:"总结",slug:"总结",normalizedTitle:"总结",charIndex:6348}],headersStr:"三棵树 HEAD 索引 工作目录 工作流程 重置的作用 第 1 步：移动 HEAD 第 2 步：更新索引（--mixed） 第 3 步：更新工作目录（--hard） 回顾 通过路径来重置 压缩 检出 不带路径 带路径 总结",content:"# Git 工具 - 重置揭密\n\n在继续了解更专业的工具前，我们先探讨一下 Git 的 reset 和 checkout 命令。 在初遇的 Git 命令中，这两个是最让人困惑的。 它们能做很多事情，所以看起来我们很难真正地理解并恰当地运用它们。 针对这一点，我们先来做一个简单的比喻。\n\n\n# 三棵树\n\n理解 reset 和 checkout 的最简方法，就是以 Git 的思维框架（将其作为内容管理器）来管理三棵不同的树。 “树” 在我们这里的实际意思是 “文件的集合”，而不是指特定的数据结构。 （在某些情况下索引看起来并不像一棵树，不过我们现在的目的是用简单的方式思考它。）\n\nGit 作为一个系统，是以它的一般操作来管理并操纵这三棵树的：\n\n树                   用途\nHEAD                上一次提交的快照，下一次提交的父结点\nIndex               预期的下一次提交的快照\nWorking Directory   沙盒\n\n\n# HEAD\n\nHEAD 是当前分支引用的指针，它总是指向该分支上的最后一次提交。 这表示 HEAD 将是下一次提交的父结点。 通常，理解 HEAD 的最简方式，就是将它看做 该分支上的最后一次提交 的快照。\n\n其实，查看快照的样子很容易。 下例就显示了 HEAD 快照实际的目录列表，以及其中每个文件的 SHA-1 校验和：\n\n$ git cat-file -p HEAD\ntree cfda3bf379e4f8dba8717dee55aab78aef7f4daf\nauthor Scott Chacon  1301511835 -0700\ncommitter Scott Chacon  1301511835 -0700\n\ninitial commit\n\n$ git ls-tree -r HEAD\n100644 blob a906cb2a4a904a152...   README\n100644 blob 8f94139338f9404f2...   Rakefile\n040000 tree 99f1a6d12cb4b6f19...   lib\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\nGit 的 cat-file 和 ls-tree 是底层命令，它们一般用于底层工作，在日常工作中并不使用。 不过它们能帮助我们了解到底发生了什么。\n\n\n# 索引\n\n索引是你的 预期的下一次提交。 我们也会将这个概念引用为 Git 的“暂存区”，这就是当你运行 git commit 时 Git 看起来的样子。\n\nGit 将上一次检出到工作目录中的所有文件填充到索引区，它们看起来就像最初被检出时的样子。 之后你会将其中一些文件替换为新版本，接着通过 git commit 将它们转换为树来用作新的提交。\n\n$ git ls-files -s\n100644 a906cb2a4a904a152e80877d4088654daad0c859 0\tREADME\n100644 8f94139338f9404f26296befa88755fc2598c289 0\tRakefile\n100644 47c6340d6459e05787f644c2447d2595f5d3a54b 0\tlib/simplegit.rb\n\n\n1\n2\n3\n4\n\n\n再说一次，我们在这里又用到了 git ls-files 这个幕后的命令，它会显示出索引当前的样子。\n\n确切来说，索引在技术上并非树结构，它其实是以扁平的清单实现的。不过对我们而言，把它当做树就够了。\n\n\n# 工作目录\n\n最后，你就有了自己的 工作目录（通常也叫 工作区）。 另外两棵树以一种高效但并不直观的方式，将它们的内容存储在 .git 文件夹中。 工作目录会将它们解包为实际的文件以便编辑。 你可以把工作目录当做 沙盒。在你将修改提交到暂存区并记录到历史之前，可以随意更改。\n\n$ tree\n.\n├── README\n├── Rakefile\n└── lib\n    └── simplegit.rb\n\n1 directory, 3 files\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 工作流程\n\n经典的 Git 工作流程是通过操纵这三个区域来以更加连续的状态记录项目快照的。\n\n\n\n让我们来可视化这个过程：假设我们进入到一个新目录，其中有一个文件。 我们称其为该文件的 v1 版本，将它标记为蓝色。 现在运行 git init，这会创建一个 Git 仓库，其中的 HEAD 引用指向未创建的 master 分支。\n\n\n\n此时，只有工作目录有内容。\n\n现在我们想要提交这个文件，所以用 git add 来获取工作目录中的内容，并将其复制到索引中。\n\n\n\n接着运行 git commit，它会取得索引中的内容并将它保存为一个永久的快照， 然后创建一个指向该快照的提交对象，最后更新 master 来指向本次提交。\n\n\n\n此时如果我们运行 git status，会发现没有任何改动，因为现在三棵树完全相同。\n\n现在我们想要对文件进行修改然后提交它。 我们将会经历同样的过程；首先在工作目录中修改文件。 我们称其为该文件的 v2 版本，并将它标记为红色。\n\n\n\n如果现在运行 git status，我们会看到文件显示在 “Changes not staged for commit” 下面并被标记为红色，因为该条目在索引与工作目录之间存在不同。 接着我们运行 git add 来将它暂存到索引中。\n\n\n\n此时，由于索引和 HEAD 不同，若运行 git status 的话就会看到 “Changes to be committed” 下的该文件变为绿色 ——也就是说，现在预期的下一次提交与上一次提交不同。 最后，我们运行 git commit 来完成提交。\n\n\n\n现在运行 git status 会没有输出，因为三棵树又变得相同了。\n\n切换分支或克隆的过程也类似。 当检出一个分支时，它会修改 HEAD 指向新的分支引用，将 索引 填充为该次提交的快照， 然后将 索引 的内容复制到 工作目录 中。\n\n\n# 重置的作用\n\n在以下情景中观察 reset 命令会更有意义。\n\n为了演示这些例子，假设我们再次修改了 file.txt 文件并第三次提交它。 现在的历史看起来是这样的：\n\n\n\n让我们跟着 reset 看看它都做了什么。 它以一种简单可预见的方式直接操纵这三棵树。 它做了三个基本操作。\n\n\n# 第 1 步：移动 HEAD\n\nreset 做的第一件事是移动 HEAD 的指向。 这与改变 HEAD 自身不同（checkout 所做的）；reset 移动 HEAD 指向的分支。 这意味着如果 HEAD 设置为 master 分支（例如，你正在 master 分支上）， 运行 git reset 9e5e6a4 将会使 master 指向 9e5e6a4。\n\n\n\n无论你调用了何种形式的带有一个提交的 reset，它首先都会尝试这样做。 使用 reset --soft，它将仅仅停在那儿。\n\n现在看一眼上图，理解一下发生的事情：它本质上是撤销了上一次 git commit 命令。 当你在运行 git commit 时，Git 会创建一个新的提交，并移动 HEAD 所指向的分支来使其指向该提交。 当你将它 reset 回 HEAD~（HEAD 的父结点）时，其实就是把该分支移动回原来的位置，而不会改变索引和工作目录。 现在你可以更新索引并再次运行 git commit 来完成 git commit --amend 所要做的事情了（见 修改最后一次提交）。\n\n\n# 第 2 步：更新索引（--mixed）\n\n注意，如果你现在运行 git status 的话，就会看到新的 HEAD 和以绿色标出的它和索引之间的区别。\n\n接下来，reset 会用 HEAD 指向的当前快照的内容来更新索引。\n\n\n\n如果指定 --mixed 选项，reset 将会在这时停止。 这也是默认行为，所以如果没有指定任何选项（在本例中只是 git reset HEAD~），这就是命令将会停止的地方。\n\n现在再看一眼上图，理解一下发生的事情：它依然会撤销一上次 提交，但还会 取消暂存 所有的东西。 于是，我们回滚到了所有 git add 和 git commit 的命令执行之前。\n\n\n# 第 3 步：更新工作目录（--hard）\n\nreset 要做的的第三件事情就是让工作目录看起来像索引。 如果使用 --hard 选项，它将会继续这一步。\n\n\n\n现在让我们回想一下刚才发生的事情。 你撤销了最后的提交、git add 和 git commit 命令 以及 工作目录中的所有工作。\n\n必须注意，--hard 标记是 reset 命令唯一的危险用法，它也是 Git 会真正地销毁数据的仅有的几个操作之一。 其他任何形式的 reset 调用都可以轻松撤消，但是 --hard 选项不能，因为它强制覆盖了工作目录中的文件。 在这种特殊情况下，我们的 Git 数据库中的一个提交内还留有该文件的 v3 版本， 我们可以通过 reflog 来找回它。但是若该文件还未提交，Git 仍会覆盖它从而导致无法恢复。\n\n\n# 回顾\n\nreset 命令会以特定的顺序重写这三棵树，在你指定以下选项时停止：\n\n 1. 移动 HEAD 分支的指向 （若指定了 --soft，则到此停止）\n 2. 使索引看起来像 HEAD （若未指定 --hard，则到此停止）\n 3. 使工作目录看起来像索引\n\n\n# 通过路径来重置\n\n前面讲述了 reset 基本形式的行为，不过你还可以给它提供一个作用路径。 若指定了一个路径，reset 将会跳过第 1 步，并且将它的作用范围限定为指定的文件或文件集合。 这样做自然有它的道理，因为 HEAD 只是一个指针，你无法让它同时指向两个提交中各自的一部分。 不过索引和工作目录 可以部分更新，所以重置会继续进行第 2、3 步。\n\n现在，假如我们运行 git reset file.txt （这其实是 git reset --mixed HEAD file.txt 的简写形式，因为你既没有指定一个提交的 SHA-1 或分支，也没有指定 --soft 或 --hard），它会：\n\n 1. 移动 HEAD 分支的指向 （已跳过）\n 2. 让索引看起来像 HEAD （到此处停止）\n\n所以它本质上只是将 file.txt 从 HEAD 复制到索引中。\n\n\n\n它还有 取消暂存文件 的实际效果。 如果我们查看该命令的示意图，然后再想想 git add 所做的事，就会发现它们正好相反。\n\n\n\n这就是为什么 git status 命令的输出会建议运行此命令来取消暂存一个文件。 （查看 取消暂存的文件 来了解更多。）\n\n我们可以不让 Git 从 HEAD 拉取数据，而是通过具体指定一个提交来拉取该文件的对应版本。 我们只需运行类似于 git reset eb43bf file.txt 的命令即可。\n\n\n\n它其实做了同样的事情，也就是把工作目录中的文件恢复到 v1 版本，运行 git add 添加它， 然后再将它恢复到 v3 版本（只是不用真的过一遍这些步骤）。 如果我们现在运行 git commit，它就会记录一条“将该文件恢复到 v1 版本”的更改， 尽管我们并未在工作目录中真正地再次拥有它。\n\n还有一点同 git add 一样，就是 reset 命令也可以接受一个 --patch 选项来一块一块地取消暂存的内容。 这样你就可以根据选择来取消暂存或恢复内容了。\n\n\n# 压缩\n\n我们来看看如何利用这种新的功能来做一些有趣的事情——压缩提交。\n\n假设你的一系列提交信息中有 “oops.”“WIP” 和 “forgot this file”， 聪明的你就能使用 reset 来轻松快速地将它们压缩成单个提交，也显出你的聪明。 （压缩提交 展示了另一种方式，不过在本例中用 reset 更简单。）\n\n假设你有一个项目，第一次提交中有一个文件，第二次提交增加了一个新的文件并修改了第一个文件，第三次提交再次修改了第一个文件。 由于第二次提交是一个未完成的工作，因此你想要压缩它。\n\n\n\n那么可以运行 git reset --soft HEAD~2 来将 HEAD 分支移动到一个旧一点的提交上（即你想要保留的最近的提交）：\n\n\n\n然后只需再次运行 git commit：\n\n\n\n现在你可以查看可到达的历史，即将会推送的历史，现在看起来有个 v1 版 file-a.txt 的提交， 接着第二个提交将 file-a.txt 修改成了 v3 版并增加了 file-b.txt。 包含 v2 版本的文件已经不在历史中了。\n\n\n# 检出\n\n最后，你大概还想知道 checkout 和 reset 之间的区别。 和 reset 一样，checkout 也操纵三棵树，不过它有一点不同，这取决于你是否传给该命令一个文件路径。\n\n\n# 不带路径\n\n运行 git checkout [branch] 与运行 git reset --hard [branch] 非常相似，它会更新所有三棵树使其看起来像 [branch]，不过有两点重要的区别。\n\n首先不同于 reset --hard，checkout 对工作目录是安全的，它会通过检查来确保不会将已更改的文件弄丢。 其实它还更聪明一些。它会在工作目录中先试着简单合并一下，这样所有_还未修改过的_文件都会被更新。 而 reset --hard 则会不做检查就全面地替换所有东西。\n\n第二个重要的区别是 checkout 如何更新 HEAD。 reset 会移动 HEAD 分支的指向，而 checkout 只会移动 HEAD 自身来指向另一个分支。\n\n例如，假设我们有 master 和 develop 分支，它们分别指向不同的提交；我们现在在 develop 上（所以 HEAD 指向它）。 如果我们运行 git reset master，那么 develop 自身现在会和 master 指向同一个提交。 而如果我们运行 git checkout master 的话，develop 不会移动，HEAD 自身会移动。 现在 HEAD 将会指向 master。\n\n所以，虽然在这两种情况下我们都移动 HEAD 使其指向了提交 A，但_做法_是非常不同的。 reset 会移动 HEAD 分支的指向，而 checkout 则移动 HEAD 自身。\n\n\n\n\n# 带路径\n\n运行 checkout 的另一种方式就是指定一个文件路径，这会像 reset 一样不会移动 HEAD。 它就像 git reset [branch] file 那样用该次提交中的那个文件来更新索引，但是它也会覆盖工作目录中对应的文件。 它就像是 git reset --hard [branch] file（如果 reset 允许你这样运行的话）， 这样对工作目录并不安全，它也不会移动 HEAD。\n\n此外，同 git reset 和 git add 一样，checkout 也接受一个 --patch 选项，允许你根据选择一块一块地恢复文件内容。\n\n\n# 总结\n\n希望你现在熟悉并理解了 reset 命令，不过关于它和 checkout 之间的区别，你可能还是会有点困惑，毕竟不太可能记住不同调用的所有规则。\n\n下面的速查表列出了命令对树的影响。 “HEAD” 一列中的 “REF” 表示该命令移动了 HEAD 指向的分支引用，而 “HEAD” 则表示只移动了 HEAD 自身。 特别注意 WD Safe? 一列——如果它标记为 NO，那么运行该命令之前请考虑一下。\n\n                            HEAD   INDEX   WORKDIR   WD SAFE?\nCommit Level                                         \nreset --soft [commit]       REF    NO      NO        YES\nreset [commit]              REF    YES     NO        YES\nreset --hard [commit]       REF    YES     YES       NO\ncheckout <commit>           HEAD   YES     YES       YES\nFile Level                                           \nreset [commit] <paths>      NO     YES     NO        YES\ncheckout [commit] <paths>   NO     YES     YES       NO",normalizedContent:"# git 工具 - 重置揭密\n\n在继续了解更专业的工具前，我们先探讨一下 git 的 reset 和 checkout 命令。 在初遇的 git 命令中，这两个是最让人困惑的。 它们能做很多事情，所以看起来我们很难真正地理解并恰当地运用它们。 针对这一点，我们先来做一个简单的比喻。\n\n\n# 三棵树\n\n理解 reset 和 checkout 的最简方法，就是以 git 的思维框架（将其作为内容管理器）来管理三棵不同的树。 “树” 在我们这里的实际意思是 “文件的集合”，而不是指特定的数据结构。 （在某些情况下索引看起来并不像一棵树，不过我们现在的目的是用简单的方式思考它。）\n\ngit 作为一个系统，是以它的一般操作来管理并操纵这三棵树的：\n\n树                   用途\nhead                上一次提交的快照，下一次提交的父结点\nindex               预期的下一次提交的快照\nworking directory   沙盒\n\n\n# head\n\nhead 是当前分支引用的指针，它总是指向该分支上的最后一次提交。 这表示 head 将是下一次提交的父结点。 通常，理解 head 的最简方式，就是将它看做 该分支上的最后一次提交 的快照。\n\n其实，查看快照的样子很容易。 下例就显示了 head 快照实际的目录列表，以及其中每个文件的 sha-1 校验和：\n\n$ git cat-file -p head\ntree cfda3bf379e4f8dba8717dee55aab78aef7f4daf\nauthor scott chacon  1301511835 -0700\ncommitter scott chacon  1301511835 -0700\n\ninitial commit\n\n$ git ls-tree -r head\n100644 blob a906cb2a4a904a152...   readme\n100644 blob 8f94139338f9404f2...   rakefile\n040000 tree 99f1a6d12cb4b6f19...   lib\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\ngit 的 cat-file 和 ls-tree 是底层命令，它们一般用于底层工作，在日常工作中并不使用。 不过它们能帮助我们了解到底发生了什么。\n\n\n# 索引\n\n索引是你的 预期的下一次提交。 我们也会将这个概念引用为 git 的“暂存区”，这就是当你运行 git commit 时 git 看起来的样子。\n\ngit 将上一次检出到工作目录中的所有文件填充到索引区，它们看起来就像最初被检出时的样子。 之后你会将其中一些文件替换为新版本，接着通过 git commit 将它们转换为树来用作新的提交。\n\n$ git ls-files -s\n100644 a906cb2a4a904a152e80877d4088654daad0c859 0\treadme\n100644 8f94139338f9404f26296befa88755fc2598c289 0\trakefile\n100644 47c6340d6459e05787f644c2447d2595f5d3a54b 0\tlib/simplegit.rb\n\n\n1\n2\n3\n4\n\n\n再说一次，我们在这里又用到了 git ls-files 这个幕后的命令，它会显示出索引当前的样子。\n\n确切来说，索引在技术上并非树结构，它其实是以扁平的清单实现的。不过对我们而言，把它当做树就够了。\n\n\n# 工作目录\n\n最后，你就有了自己的 工作目录（通常也叫 工作区）。 另外两棵树以一种高效但并不直观的方式，将它们的内容存储在 .git 文件夹中。 工作目录会将它们解包为实际的文件以便编辑。 你可以把工作目录当做 沙盒。在你将修改提交到暂存区并记录到历史之前，可以随意更改。\n\n$ tree\n.\n├── readme\n├── rakefile\n└── lib\n    └── simplegit.rb\n\n1 directory, 3 files\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 工作流程\n\n经典的 git 工作流程是通过操纵这三个区域来以更加连续的状态记录项目快照的。\n\n\n\n让我们来可视化这个过程：假设我们进入到一个新目录，其中有一个文件。 我们称其为该文件的 v1 版本，将它标记为蓝色。 现在运行 git init，这会创建一个 git 仓库，其中的 head 引用指向未创建的 master 分支。\n\n\n\n此时，只有工作目录有内容。\n\n现在我们想要提交这个文件，所以用 git add 来获取工作目录中的内容，并将其复制到索引中。\n\n\n\n接着运行 git commit，它会取得索引中的内容并将它保存为一个永久的快照， 然后创建一个指向该快照的提交对象，最后更新 master 来指向本次提交。\n\n\n\n此时如果我们运行 git status，会发现没有任何改动，因为现在三棵树完全相同。\n\n现在我们想要对文件进行修改然后提交它。 我们将会经历同样的过程；首先在工作目录中修改文件。 我们称其为该文件的 v2 版本，并将它标记为红色。\n\n\n\n如果现在运行 git status，我们会看到文件显示在 “changes not staged for commit” 下面并被标记为红色，因为该条目在索引与工作目录之间存在不同。 接着我们运行 git add 来将它暂存到索引中。\n\n\n\n此时，由于索引和 head 不同，若运行 git status 的话就会看到 “changes to be committed” 下的该文件变为绿色 ——也就是说，现在预期的下一次提交与上一次提交不同。 最后，我们运行 git commit 来完成提交。\n\n\n\n现在运行 git status 会没有输出，因为三棵树又变得相同了。\n\n切换分支或克隆的过程也类似。 当检出一个分支时，它会修改 head 指向新的分支引用，将 索引 填充为该次提交的快照， 然后将 索引 的内容复制到 工作目录 中。\n\n\n# 重置的作用\n\n在以下情景中观察 reset 命令会更有意义。\n\n为了演示这些例子，假设我们再次修改了 file.txt 文件并第三次提交它。 现在的历史看起来是这样的：\n\n\n\n让我们跟着 reset 看看它都做了什么。 它以一种简单可预见的方式直接操纵这三棵树。 它做了三个基本操作。\n\n\n# 第 1 步：移动 head\n\nreset 做的第一件事是移动 head 的指向。 这与改变 head 自身不同（checkout 所做的）；reset 移动 head 指向的分支。 这意味着如果 head 设置为 master 分支（例如，你正在 master 分支上）， 运行 git reset 9e5e6a4 将会使 master 指向 9e5e6a4。\n\n\n\n无论你调用了何种形式的带有一个提交的 reset，它首先都会尝试这样做。 使用 reset --soft，它将仅仅停在那儿。\n\n现在看一眼上图，理解一下发生的事情：它本质上是撤销了上一次 git commit 命令。 当你在运行 git commit 时，git 会创建一个新的提交，并移动 head 所指向的分支来使其指向该提交。 当你将它 reset 回 head~（head 的父结点）时，其实就是把该分支移动回原来的位置，而不会改变索引和工作目录。 现在你可以更新索引并再次运行 git commit 来完成 git commit --amend 所要做的事情了（见 修改最后一次提交）。\n\n\n# 第 2 步：更新索引（--mixed）\n\n注意，如果你现在运行 git status 的话，就会看到新的 head 和以绿色标出的它和索引之间的区别。\n\n接下来，reset 会用 head 指向的当前快照的内容来更新索引。\n\n\n\n如果指定 --mixed 选项，reset 将会在这时停止。 这也是默认行为，所以如果没有指定任何选项（在本例中只是 git reset head~），这就是命令将会停止的地方。\n\n现在再看一眼上图，理解一下发生的事情：它依然会撤销一上次 提交，但还会 取消暂存 所有的东西。 于是，我们回滚到了所有 git add 和 git commit 的命令执行之前。\n\n\n# 第 3 步：更新工作目录（--hard）\n\nreset 要做的的第三件事情就是让工作目录看起来像索引。 如果使用 --hard 选项，它将会继续这一步。\n\n\n\n现在让我们回想一下刚才发生的事情。 你撤销了最后的提交、git add 和 git commit 命令 以及 工作目录中的所有工作。\n\n必须注意，--hard 标记是 reset 命令唯一的危险用法，它也是 git 会真正地销毁数据的仅有的几个操作之一。 其他任何形式的 reset 调用都可以轻松撤消，但是 --hard 选项不能，因为它强制覆盖了工作目录中的文件。 在这种特殊情况下，我们的 git 数据库中的一个提交内还留有该文件的 v3 版本， 我们可以通过 reflog 来找回它。但是若该文件还未提交，git 仍会覆盖它从而导致无法恢复。\n\n\n# 回顾\n\nreset 命令会以特定的顺序重写这三棵树，在你指定以下选项时停止：\n\n 1. 移动 head 分支的指向 （若指定了 --soft，则到此停止）\n 2. 使索引看起来像 head （若未指定 --hard，则到此停止）\n 3. 使工作目录看起来像索引\n\n\n# 通过路径来重置\n\n前面讲述了 reset 基本形式的行为，不过你还可以给它提供一个作用路径。 若指定了一个路径，reset 将会跳过第 1 步，并且将它的作用范围限定为指定的文件或文件集合。 这样做自然有它的道理，因为 head 只是一个指针，你无法让它同时指向两个提交中各自的一部分。 不过索引和工作目录 可以部分更新，所以重置会继续进行第 2、3 步。\n\n现在，假如我们运行 git reset file.txt （这其实是 git reset --mixed head file.txt 的简写形式，因为你既没有指定一个提交的 sha-1 或分支，也没有指定 --soft 或 --hard），它会：\n\n 1. 移动 head 分支的指向 （已跳过）\n 2. 让索引看起来像 head （到此处停止）\n\n所以它本质上只是将 file.txt 从 head 复制到索引中。\n\n\n\n它还有 取消暂存文件 的实际效果。 如果我们查看该命令的示意图，然后再想想 git add 所做的事，就会发现它们正好相反。\n\n\n\n这就是为什么 git status 命令的输出会建议运行此命令来取消暂存一个文件。 （查看 取消暂存的文件 来了解更多。）\n\n我们可以不让 git 从 head 拉取数据，而是通过具体指定一个提交来拉取该文件的对应版本。 我们只需运行类似于 git reset eb43bf file.txt 的命令即可。\n\n\n\n它其实做了同样的事情，也就是把工作目录中的文件恢复到 v1 版本，运行 git add 添加它， 然后再将它恢复到 v3 版本（只是不用真的过一遍这些步骤）。 如果我们现在运行 git commit，它就会记录一条“将该文件恢复到 v1 版本”的更改， 尽管我们并未在工作目录中真正地再次拥有它。\n\n还有一点同 git add 一样，就是 reset 命令也可以接受一个 --patch 选项来一块一块地取消暂存的内容。 这样你就可以根据选择来取消暂存或恢复内容了。\n\n\n# 压缩\n\n我们来看看如何利用这种新的功能来做一些有趣的事情——压缩提交。\n\n假设你的一系列提交信息中有 “oops.”“wip” 和 “forgot this file”， 聪明的你就能使用 reset 来轻松快速地将它们压缩成单个提交，也显出你的聪明。 （压缩提交 展示了另一种方式，不过在本例中用 reset 更简单。）\n\n假设你有一个项目，第一次提交中有一个文件，第二次提交增加了一个新的文件并修改了第一个文件，第三次提交再次修改了第一个文件。 由于第二次提交是一个未完成的工作，因此你想要压缩它。\n\n\n\n那么可以运行 git reset --soft head~2 来将 head 分支移动到一个旧一点的提交上（即你想要保留的最近的提交）：\n\n\n\n然后只需再次运行 git commit：\n\n\n\n现在你可以查看可到达的历史，即将会推送的历史，现在看起来有个 v1 版 file-a.txt 的提交， 接着第二个提交将 file-a.txt 修改成了 v3 版并增加了 file-b.txt。 包含 v2 版本的文件已经不在历史中了。\n\n\n# 检出\n\n最后，你大概还想知道 checkout 和 reset 之间的区别。 和 reset 一样，checkout 也操纵三棵树，不过它有一点不同，这取决于你是否传给该命令一个文件路径。\n\n\n# 不带路径\n\n运行 git checkout [branch] 与运行 git reset --hard [branch] 非常相似，它会更新所有三棵树使其看起来像 [branch]，不过有两点重要的区别。\n\n首先不同于 reset --hard，checkout 对工作目录是安全的，它会通过检查来确保不会将已更改的文件弄丢。 其实它还更聪明一些。它会在工作目录中先试着简单合并一下，这样所有_还未修改过的_文件都会被更新。 而 reset --hard 则会不做检查就全面地替换所有东西。\n\n第二个重要的区别是 checkout 如何更新 head。 reset 会移动 head 分支的指向，而 checkout 只会移动 head 自身来指向另一个分支。\n\n例如，假设我们有 master 和 develop 分支，它们分别指向不同的提交；我们现在在 develop 上（所以 head 指向它）。 如果我们运行 git reset master，那么 develop 自身现在会和 master 指向同一个提交。 而如果我们运行 git checkout master 的话，develop 不会移动，head 自身会移动。 现在 head 将会指向 master。\n\n所以，虽然在这两种情况下我们都移动 head 使其指向了提交 a，但_做法_是非常不同的。 reset 会移动 head 分支的指向，而 checkout 则移动 head 自身。\n\n\n\n\n# 带路径\n\n运行 checkout 的另一种方式就是指定一个文件路径，这会像 reset 一样不会移动 head。 它就像 git reset [branch] file 那样用该次提交中的那个文件来更新索引，但是它也会覆盖工作目录中对应的文件。 它就像是 git reset --hard [branch] file（如果 reset 允许你这样运行的话）， 这样对工作目录并不安全，它也不会移动 head。\n\n此外，同 git reset 和 git add 一样，checkout 也接受一个 --patch 选项，允许你根据选择一块一块地恢复文件内容。\n\n\n# 总结\n\n希望你现在熟悉并理解了 reset 命令，不过关于它和 checkout 之间的区别，你可能还是会有点困惑，毕竟不太可能记住不同调用的所有规则。\n\n下面的速查表列出了命令对树的影响。 “head” 一列中的 “ref” 表示该命令移动了 head 指向的分支引用，而 “head” 则表示只移动了 head 自身。 特别注意 wd safe? 一列——如果它标记为 no，那么运行该命令之前请考虑一下。\n\n                            head   index   workdir   wd safe?\ncommit level                                         \nreset --soft [commit]       ref    no      no        yes\nreset [commit]              ref    yes     no        yes\nreset --hard [commit]       ref    yes     yes       no\ncheckout <commit>           head   yes     yes       yes\nfile level                                           \nreset [commit] <paths>      no     yes     no        yes\ncheckout [commit] <paths>   no     yes     yes       no",charsets:{cjk:!0},lastUpdated:"2021/03/25, 20:24:44",lastUpdatedTimestamp:1616675084e3},{title:"Git分支-分支原理",frontmatter:{title:"Git分支-分支原理",date:"2020-11-18T17:43:57.000Z",permalink:"/pages/4bef1a/",categories:["《Git》学习笔记"],tags:["Git"]},regularPath:"/%E3%80%8AGit%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/20.Git%E5%88%86%E6%94%AF-%E5%88%86%E6%94%AF%E5%8E%9F%E7%90%86.html",relativePath:"《Git》学习笔记/20.文档笔记/20.Git分支-分支原理.md",key:"v-2c65660a",path:"/pages/4bef1a/",headers:[{level:3,title:"首次提交",slug:"首次提交",normalizedTitle:"首次提交",charIndex:130},{level:3,title:"再次提交",slug:"再次提交",normalizedTitle:"再次提交",charIndex:823},{level:3,title:"Git 的分支",slug:"git-的分支",normalizedTitle:"git 的分支",charIndex:896},{level:3,title:"创建分支",slug:"创建分支",normalizedTitle:"创建分支",charIndex:1088},{level:3,title:"当前分支的指针",slug:"当前分支的指针",normalizedTitle:"当前分支的指针",charIndex:1252},{level:3,title:"查看当前所在分支",slug:"查看当前所在分支",normalizedTitle:"查看当前所在分支",charIndex:1432},{level:3,title:"分支切换",slug:"分支切换",normalizedTitle:"分支切换",charIndex:1771},{level:3,title:"创建分支同时切换",slug:"创建分支同时切换",normalizedTitle:"创建分支同时切换",charIndex:3223}],headersStr:"首次提交 再次提交 Git 的分支 创建分支 当前分支的指针 查看当前所在分支 分支切换 创建分支同时切换",content:"# Git分支-分支原理\n\nGit 处理分支的方式可谓是难以置信的轻量，创建新分支这一操作几乎能在瞬间完成，并且在不同分支之间的切换操作也是一样便捷。 与许多其它版本控制系统不同，Git 鼓励在工作流程中频繁地使用分支与合并，哪怕一天之内进行许多次。\n\n\n# 首次提交\n\n在进行提交操作时，Git 会保存一个提交对象（commit object）。\n\n假设现在有一个工作目录，里面包含了三个将要被暂存和提交的文件。 暂存操作会为每一个文件计算校验和（使用 SHA-1 哈希算法），然后会把当前版本的文件快照保存到 Git 仓库中 （Git 使用 blob 对象来保存它们），最终将校验和加入到暂存区域等待提交：\n\n$ git add README test.rb LICENSE\n$ git commit -m 'The initial commit of my project'\n\n\n1\n2\n\n\n当使用 git commit 进行提交操作时，Git 会先计算每一个子目录（本例中只有项目根目录）的校验和， 然后在 Git 仓库中这些校验和保存为树对象。随后，Git 便会创建一个提交对象， 它除了包含上面提到的那些信息外，还包含指向这个树对象（项目根目录）的指针。 如此一来，Git 就可以在需要的时候重现此次保存的快照。\n\n现在，Git 仓库中有五个对象：三个 blob 对象（保存着文件快照）、一个 树对象 （记录着目录结构和 blob 对象索引）以及一个 提交对象（包含着指向前述树对象的指针和所有提交信息）。\n\n\n\n图1. 首次提交对象及其树结构 ▲\n\n# 小结：\n\n 1. git add 加入暂存操作，会为每个文件创建计算校验和，以及每个文件对应的文件快照（blob对象）。\n\n 2. git commit 提交操作，计算子目录或跟目录的校验和 保存为树对象。随后，创建一个提交对象，包含着指向树对象的指针和所有提交信息。\n\n\n# 再次提交\n\n做些修改后再次提交，那么这次产生的提交对象会包含一个指向上次提交对象（父对象）的指针。\n\n\n\n图2. 提交对象及其父对象 ▲\n\n\n# Git 的分支\n\nGit 的分支，其实本质上仅仅是指向提交对象的可变指针。 Git 的默认分支名字是 master。 在多次提交操作之后，你其实已经有一个指向最后那个提交对象的 master 分支。 master 分支指针会在每次提交时自动向前移动。\n\n> Git 的 master 分支并不是一个特殊分支。 它就跟其它分支完全没有区别。\n\n\n\n图3. 分支及其提交历史 ▲\n\n\n# 创建分支\n\nGit 是怎么创建新分支的呢？ 很简单，它只是为你创建了一个可以移动的新的指针。 比如，创建一个 testing 分支， 你需要使用 git branch 命令：\n\n$ git branch testing\n\n\n1\n\n\n这会在当前所在的提交对象上创建一个指针。\n\n\n\n图4. 两个指向相同提交历史的分支 ▲\n\n\n# 当前分支的指针\n\nGit 是怎么知道当前在哪一个分支上呢？ 很简单，它有一个名为 HEAD 的特殊指针，指向当前所在的本地分支（译注：将 HEAD 想象为当前分支的别名）。 在本例中，你仍然在 master 分支上。 因为 git branch 命令仅仅 创建 一个新分支，并不会自动切换到新分支中去。\n\n\n\n图5. HEAD 指向当前所在的分支 ▲\n\n\n# 查看当前所在分支\n\n你可以简单地使用 git log 命令查看各个分支当前所指的对象。 提供这一功能的参数是 --decorate。\n\n$ git log --oneline --decorate\nf30ab (HEAD -> master, testing) add feature # f30ab提交对象 (HEAD当前所在分支 -> master分支，testing 分支)\n34ac2 Fixed bug # 34ac2 提交对象\n98ca9 The initial commit of my project # 98ca9 提交对象\n\n\n1\n2\n3\n4\n\n\n正如你所见，当前 master 和 testing 分支均指向校验和以 f30ab 开头的提交对象。\n\n\n# 分支切换\n\n$ git checkout testing  # git checkout <分支名>\n\n\n1\n\n\n这样 HEAD 就指向 testing 分支了。\n\n\n\n图6. HEAD 指向当前所在的分支 ▲\n\n那么，这样的实现方式会给我们带来什么好处呢？ 现在不妨再提交一次：\n\n$ vim test.rb\n$ git commit -a -m 'made a change'\n\n\n1\n2\n\n\n\n\n图7. HEAD 分支随着提交操作自动向前移动 ▲\n\n如图所示，你的 testing 分支向前移动了，但是 master 分支却没有，它仍然指向运行 git checkout 时所指的对象。 这就有意思了，现在我们切换回 master 分支看看：\n\n$ git checkout master\n\n\n1\n\n\n\n\n图8. 检出时 HEAD 随之移动 ▲\n\n这条命令做了两件事。 一是使 HEAD 指回 master 分支，二是将工作目录恢复成 master 分支所指向的快照内容。 也就是说，你现在做修改的话，项目将始于一个较旧的版本。 本质上来讲，这就是忽略 testing 分支所做的修改，以便于向另一个方向进行开发。\n\n我们不妨再稍微做些修改并提交：\n\n$ vim test.rb\n$ git commit -a -m 'made other changes'\n\n\n1\n2\n\n\n现在，这个项目的提交历史已经产生了分叉（参见 项目分叉历史）。 因为刚才你创建了一个新分支，并切换过去进行了一些工作，随后又切换回 master 分支进行了另外一些工作。 上述两次改动针对的是不同分支：你可以在不同分支间不断地来回切换和工作，并在时机成熟时将它们合并起来。 而所有这些工作，你需要的命令只有 branch、checkout 和 commit。\n\n\n\n图9. 项目分叉历史 ▲\n\n你可以简单地使用 git log 命令查看分叉历史。 运行 git log --oneline --decorate --graph --all ，它会输出你的提交历史、各个分支的指向以及项目的分支分叉情况。\n\n$ git log --oneline --decorate --graph --all\n* c2b9e (HEAD, master) made other changes\n| * 87ab2 (testing) made a change\n|/\n* f30ab add feature\n* 34ac2 fixed bug\n* 98ca9 initial commit of my project\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n由于 Git 的分支实质上仅是包含所指对象校验和（长度为 40 的 SHA-1 值字符串）的文件，所以它的创建和销毁都异常高效。 创建一个新分支就相当于往一个文件中写入 41 个字节（40 个字符和 1 个换行符），如此的简单能不快吗？\n\n这与过去大多数版本控制系统形成了鲜明的对比，它们在创建分支时，将所有的项目文件都复制一遍，并保存到一个特定的目录。 完成这样繁琐的过程通常需要好几秒钟，有时甚至需要好几分钟。所需时间的长短，完全取决于项目的规模。 而在 Git 中，任何规模的项目都能在瞬间创建新分支。 同时，由于每次提交都会记录父对象，所以寻找恰当的合并基础（译注：即共同祖先）也是同样的简单和高效。 这些高效的特性使得 Git 鼓励开发人员频繁地创建和使用分支。\n\n\n# 创建分支同时切换\n\n通常我们会在创建一个新分支后立即切换过去，可以使用如下命令：\n\ngit checkout -b <newbranchname>\n\n\n1\n",normalizedContent:"# git分支-分支原理\n\ngit 处理分支的方式可谓是难以置信的轻量，创建新分支这一操作几乎能在瞬间完成，并且在不同分支之间的切换操作也是一样便捷。 与许多其它版本控制系统不同，git 鼓励在工作流程中频繁地使用分支与合并，哪怕一天之内进行许多次。\n\n\n# 首次提交\n\n在进行提交操作时，git 会保存一个提交对象（commit object）。\n\n假设现在有一个工作目录，里面包含了三个将要被暂存和提交的文件。 暂存操作会为每一个文件计算校验和（使用 sha-1 哈希算法），然后会把当前版本的文件快照保存到 git 仓库中 （git 使用 blob 对象来保存它们），最终将校验和加入到暂存区域等待提交：\n\n$ git add readme test.rb license\n$ git commit -m 'the initial commit of my project'\n\n\n1\n2\n\n\n当使用 git commit 进行提交操作时，git 会先计算每一个子目录（本例中只有项目根目录）的校验和， 然后在 git 仓库中这些校验和保存为树对象。随后，git 便会创建一个提交对象， 它除了包含上面提到的那些信息外，还包含指向这个树对象（项目根目录）的指针。 如此一来，git 就可以在需要的时候重现此次保存的快照。\n\n现在，git 仓库中有五个对象：三个 blob 对象（保存着文件快照）、一个 树对象 （记录着目录结构和 blob 对象索引）以及一个 提交对象（包含着指向前述树对象的指针和所有提交信息）。\n\n\n\n图1. 首次提交对象及其树结构 ▲\n\n# 小结：\n\n 1. git add 加入暂存操作，会为每个文件创建计算校验和，以及每个文件对应的文件快照（blob对象）。\n\n 2. git commit 提交操作，计算子目录或跟目录的校验和 保存为树对象。随后，创建一个提交对象，包含着指向树对象的指针和所有提交信息。\n\n\n# 再次提交\n\n做些修改后再次提交，那么这次产生的提交对象会包含一个指向上次提交对象（父对象）的指针。\n\n\n\n图2. 提交对象及其父对象 ▲\n\n\n# git 的分支\n\ngit 的分支，其实本质上仅仅是指向提交对象的可变指针。 git 的默认分支名字是 master。 在多次提交操作之后，你其实已经有一个指向最后那个提交对象的 master 分支。 master 分支指针会在每次提交时自动向前移动。\n\n> git 的 master 分支并不是一个特殊分支。 它就跟其它分支完全没有区别。\n\n\n\n图3. 分支及其提交历史 ▲\n\n\n# 创建分支\n\ngit 是怎么创建新分支的呢？ 很简单，它只是为你创建了一个可以移动的新的指针。 比如，创建一个 testing 分支， 你需要使用 git branch 命令：\n\n$ git branch testing\n\n\n1\n\n\n这会在当前所在的提交对象上创建一个指针。\n\n\n\n图4. 两个指向相同提交历史的分支 ▲\n\n\n# 当前分支的指针\n\ngit 是怎么知道当前在哪一个分支上呢？ 很简单，它有一个名为 head 的特殊指针，指向当前所在的本地分支（译注：将 head 想象为当前分支的别名）。 在本例中，你仍然在 master 分支上。 因为 git branch 命令仅仅 创建 一个新分支，并不会自动切换到新分支中去。\n\n\n\n图5. head 指向当前所在的分支 ▲\n\n\n# 查看当前所在分支\n\n你可以简单地使用 git log 命令查看各个分支当前所指的对象。 提供这一功能的参数是 --decorate。\n\n$ git log --oneline --decorate\nf30ab (head -> master, testing) add feature # f30ab提交对象 (head当前所在分支 -> master分支，testing 分支)\n34ac2 fixed bug # 34ac2 提交对象\n98ca9 the initial commit of my project # 98ca9 提交对象\n\n\n1\n2\n3\n4\n\n\n正如你所见，当前 master 和 testing 分支均指向校验和以 f30ab 开头的提交对象。\n\n\n# 分支切换\n\n$ git checkout testing  # git checkout <分支名>\n\n\n1\n\n\n这样 head 就指向 testing 分支了。\n\n\n\n图6. head 指向当前所在的分支 ▲\n\n那么，这样的实现方式会给我们带来什么好处呢？ 现在不妨再提交一次：\n\n$ vim test.rb\n$ git commit -a -m 'made a change'\n\n\n1\n2\n\n\n\n\n图7. head 分支随着提交操作自动向前移动 ▲\n\n如图所示，你的 testing 分支向前移动了，但是 master 分支却没有，它仍然指向运行 git checkout 时所指的对象。 这就有意思了，现在我们切换回 master 分支看看：\n\n$ git checkout master\n\n\n1\n\n\n\n\n图8. 检出时 head 随之移动 ▲\n\n这条命令做了两件事。 一是使 head 指回 master 分支，二是将工作目录恢复成 master 分支所指向的快照内容。 也就是说，你现在做修改的话，项目将始于一个较旧的版本。 本质上来讲，这就是忽略 testing 分支所做的修改，以便于向另一个方向进行开发。\n\n我们不妨再稍微做些修改并提交：\n\n$ vim test.rb\n$ git commit -a -m 'made other changes'\n\n\n1\n2\n\n\n现在，这个项目的提交历史已经产生了分叉（参见 项目分叉历史）。 因为刚才你创建了一个新分支，并切换过去进行了一些工作，随后又切换回 master 分支进行了另外一些工作。 上述两次改动针对的是不同分支：你可以在不同分支间不断地来回切换和工作，并在时机成熟时将它们合并起来。 而所有这些工作，你需要的命令只有 branch、checkout 和 commit。\n\n\n\n图9. 项目分叉历史 ▲\n\n你可以简单地使用 git log 命令查看分叉历史。 运行 git log --oneline --decorate --graph --all ，它会输出你的提交历史、各个分支的指向以及项目的分支分叉情况。\n\n$ git log --oneline --decorate --graph --all\n* c2b9e (head, master) made other changes\n| * 87ab2 (testing) made a change\n|/\n* f30ab add feature\n* 34ac2 fixed bug\n* 98ca9 initial commit of my project\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n由于 git 的分支实质上仅是包含所指对象校验和（长度为 40 的 sha-1 值字符串）的文件，所以它的创建和销毁都异常高效。 创建一个新分支就相当于往一个文件中写入 41 个字节（40 个字符和 1 个换行符），如此的简单能不快吗？\n\n这与过去大多数版本控制系统形成了鲜明的对比，它们在创建分支时，将所有的项目文件都复制一遍，并保存到一个特定的目录。 完成这样繁琐的过程通常需要好几秒钟，有时甚至需要好几分钟。所需时间的长短，完全取决于项目的规模。 而在 git 中，任何规模的项目都能在瞬间创建新分支。 同时，由于每次提交都会记录父对象，所以寻找恰当的合并基础（译注：即共同祖先）也是同样的简单和高效。 这些高效的特性使得 git 鼓励开发人员频繁地创建和使用分支。\n\n\n# 创建分支同时切换\n\n通常我们会在创建一个新分支后立即切换过去，可以使用如下命令：\n\ngit checkout -b <newbranchname>\n\n\n1\n",charsets:{cjk:!0},lastUpdated:"2021/03/25, 20:24:44",lastUpdatedTimestamp:1616675084e3},{title:"Git分支的新建与合并-分支操作",frontmatter:{title:"Git分支的新建与合并-分支操作",date:"2020-11-18T17:43:57.000Z",permalink:"/pages/ea5a8c/",categories:["《Git》学习笔记"],tags:["Git"]},regularPath:"/%E3%80%8AGit%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/30.Git%E5%88%86%E6%94%AF%E7%9A%84%E6%96%B0%E5%BB%BA%E4%B8%8E%E5%90%88%E5%B9%B6-%E5%88%86%E6%94%AF%E6%93%8D%E4%BD%9C.html",relativePath:"《Git》学习笔记/20.文档笔记/30.Git分支的新建与合并-分支操作.md",key:"v-11db5011",path:"/pages/ea5a8c/",headers:[{level:3,title:"创建分支并切换",slug:"创建分支并切换",normalizedTitle:"创建分支并切换",charIndex:45},{level:3,title:"切换分支",slug:"切换分支",normalizedTitle:"切换分支",charIndex:187},{level:3,title:"合并分支",slug:"合并分支",normalizedTitle:"合并分支",charIndex:575},{level:3,title:"删除分支",slug:"删除分支",normalizedTitle:"删除分支",charIndex:666},{level:3,title:"多次提交之后合并分支",slug:"多次提交之后合并分支",normalizedTitle:"多次提交之后合并分支",charIndex:781},{level:3,title:"遇到冲突时的分支合并",slug:"遇到冲突时的分支合并",normalizedTitle:"遇到冲突时的分支合并",charIndex:1123}],headersStr:"创建分支并切换 切换分支 合并分支 删除分支 多次提交之后合并分支 遇到冲突时的分支合并",content:"# Git分支的新建与合并-分支操作\n\n文档：Git 分支 - 分支的新建与合并\n\n\n# 创建分支并切换\n\n此时有一个需求需要在新的分支iss53上工作：\n\n$ git checkout -b iss53  # b表示branch\n\n\n1\n\n\n它是下面两条命令的简写：\n\n$ git branch iss53\n$ git checkout iss53\n\n\n1\n2\n\n\n\n# 切换分支\n\n突然有一个紧急问题要解决，需要在原来的master分支进行修复：\n\n$ git checkout master\n\n\n1\n\n\n在切换到master之前，需要iss53分支保持好一个干净的状态（修改都已提交）。\n\n注意：切换分支Git 会重置你的工作目录。\n\n> checkout 中文含义 “检出”，checkout <branch> 检出分支 => 检出指定分支的代码 => 重置工作目录并切换分支。\n\n接下来，你要修复这个紧急问题。 建立一个 hotfix 分支，在该分支上工作直到问题解决：\n\n$ git checkout -b hotfix\n\n# 中间过程在hotfix上修改了代码并提交\n$ echo 'test' > ./hotfix.txt\n$ git add .\n$ git commit -m 'fixed'\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 合并分支\n\n$ git checkout master # 首先切回master分支\n$ git merge hotfix # 把 hotfix 分支合并过来\n\n\n1\n2\n\n\n\n# 删除分支\n\n$ git branch -d hotfix # d表示delete\n\n# 然后切回iss53继续工作\n$ git checkout iss53\n\n\n1\n2\n3\n4\n\n\n注意删除分支是在 branch 命令上\n\n\n# 多次提交之后合并分支\n\n假设你已经修正了 #53 问题，打算合并到master分支：\n\n$ git checkout master\n$ git merga iss53\n\n\n1\n2\n\n\n这看似和之前的合并区别不大。此时你的开发历史从一个更早的地方开始分叉开来（diverged）。 因为，master 分支所在提交并不是 iss53 分支所在提交的直接祖先，Git 不得不做一些额外的工作。 出现这种情况的时候，Git 会使用两个分支的末端所指的快照以及这两个分支的公共祖先，做一个简单的三方合并。\n\n和之前将分支指针向前推进所不同的是，Git 将此次三方合并的结果做了一个新的快照并且自动创建一个新的提交指向它。 这个被称作一次合并提交，它的特别之处在于他有不止一个父提交。\n\n\n# 遇到冲突时的分支合并\n\n如果你在两个不同的分支中，对同一个文件的同一个部分进行了不同的修改，Git 就没法干净的合并它们，就产生了冲突。\n\n合并过程中出现CONFLICT提升，表示有冲突\n\n$ git merge iss53\nAuto-merging index.html\nCONFLICT (content): Merge conflict in index.html\nAutomatic merge failed; fix conflicts and then commit the result.\n\n\n1\n2\n3\n4\n\n\n使用git status查看未合并状态。\n\n任何因包含合并冲突而有待解决的文件，都会以未合并状态标识出来。 Git 会在有冲突的文件中加入标准的冲突解决标记，这样你可以打开这些包含冲突的文件然后手动解决冲突。 出现冲突的文件会包含一些特殊区段，看起来像下面这个样子：\n\n<<<<<<< HEAD:index.html\n<div id=\"footer\">contact : email.support@github.com</div>\n=======\n<div id=\"footer\">\n please contact us at support@github.com\n</div>\n>>>>>>> iss53:index.html\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n你需要手动解决冲突，解决了所有文件里的冲突之后，对每个文件使用 git add 命令来将其标记为冲突已解决。 一旦暂存这些原本有冲突的文件，Git 就会将它们标记为冲突已解决。\n\n如果你对结果感到满意，并且确定之前有冲突的的文件都已经暂存了，这时你可以输入 git commit 来完成合并提交。",normalizedContent:"# git分支的新建与合并-分支操作\n\n文档：git 分支 - 分支的新建与合并\n\n\n# 创建分支并切换\n\n此时有一个需求需要在新的分支iss53上工作：\n\n$ git checkout -b iss53  # b表示branch\n\n\n1\n\n\n它是下面两条命令的简写：\n\n$ git branch iss53\n$ git checkout iss53\n\n\n1\n2\n\n\n\n# 切换分支\n\n突然有一个紧急问题要解决，需要在原来的master分支进行修复：\n\n$ git checkout master\n\n\n1\n\n\n在切换到master之前，需要iss53分支保持好一个干净的状态（修改都已提交）。\n\n注意：切换分支git 会重置你的工作目录。\n\n> checkout 中文含义 “检出”，checkout <branch> 检出分支 => 检出指定分支的代码 => 重置工作目录并切换分支。\n\n接下来，你要修复这个紧急问题。 建立一个 hotfix 分支，在该分支上工作直到问题解决：\n\n$ git checkout -b hotfix\n\n# 中间过程在hotfix上修改了代码并提交\n$ echo 'test' > ./hotfix.txt\n$ git add .\n$ git commit -m 'fixed'\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 合并分支\n\n$ git checkout master # 首先切回master分支\n$ git merge hotfix # 把 hotfix 分支合并过来\n\n\n1\n2\n\n\n\n# 删除分支\n\n$ git branch -d hotfix # d表示delete\n\n# 然后切回iss53继续工作\n$ git checkout iss53\n\n\n1\n2\n3\n4\n\n\n注意删除分支是在 branch 命令上\n\n\n# 多次提交之后合并分支\n\n假设你已经修正了 #53 问题，打算合并到master分支：\n\n$ git checkout master\n$ git merga iss53\n\n\n1\n2\n\n\n这看似和之前的合并区别不大。此时你的开发历史从一个更早的地方开始分叉开来（diverged）。 因为，master 分支所在提交并不是 iss53 分支所在提交的直接祖先，git 不得不做一些额外的工作。 出现这种情况的时候，git 会使用两个分支的末端所指的快照以及这两个分支的公共祖先，做一个简单的三方合并。\n\n和之前将分支指针向前推进所不同的是，git 将此次三方合并的结果做了一个新的快照并且自动创建一个新的提交指向它。 这个被称作一次合并提交，它的特别之处在于他有不止一个父提交。\n\n\n# 遇到冲突时的分支合并\n\n如果你在两个不同的分支中，对同一个文件的同一个部分进行了不同的修改，git 就没法干净的合并它们，就产生了冲突。\n\n合并过程中出现conflict提升，表示有冲突\n\n$ git merge iss53\nauto-merging index.html\nconflict (content): merge conflict in index.html\nautomatic merge failed; fix conflicts and then commit the result.\n\n\n1\n2\n3\n4\n\n\n使用git status查看未合并状态。\n\n任何因包含合并冲突而有待解决的文件，都会以未合并状态标识出来。 git 会在有冲突的文件中加入标准的冲突解决标记，这样你可以打开这些包含冲突的文件然后手动解决冲突。 出现冲突的文件会包含一些特殊区段，看起来像下面这个样子：\n\n<<<<<<< head:index.html\n<div id=\"footer\">contact : email.support@github.com</div>\n=======\n<div id=\"footer\">\n please contact us at support@github.com\n</div>\n>>>>>>> iss53:index.html\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n你需要手动解决冲突，解决了所有文件里的冲突之后，对每个文件使用 git add 命令来将其标记为冲突已解决。 一旦暂存这些原本有冲突的文件，git 就会将它们标记为冲突已解决。\n\n如果你对结果感到满意，并且确定之前有冲突的的文件都已经暂存了，这时你可以输入 git commit 来完成合并提交。",charsets:{cjk:!0},lastUpdated:"2021/03/25, 20:24:44",lastUpdatedTimestamp:1616675084e3},{title:"Git分支管理-查看分支",frontmatter:{title:"Git分支管理-查看分支",date:"2020-11-18T17:43:57.000Z",permalink:"/pages/a399b3/",categories:["《Git》学习笔记"],tags:["Git"]},regularPath:"/%E3%80%8AGit%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/40.Git%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86-%E6%9F%A5%E7%9C%8B%E5%88%86%E6%94%AF.html",relativePath:"《Git》学习笔记/20.文档笔记/40.Git分支管理-查看分支.md",key:"v-b4dc99c2",path:"/pages/a399b3/",headers:[{level:3,title:"查看分支",slug:"查看分支",normalizedTitle:"查看分支",charIndex:10},{level:3,title:"查看每个分支的最后提交",slug:"查看每个分支的最后提交",normalizedTitle:"查看每个分支的最后提交",charIndex:152},{level:3,title:"查看已(未)合并的分支",slug:"查看已-未-合并的分支",normalizedTitle:"查看已(未)合并的分支",charIndex:297}],headersStr:"查看分支 查看每个分支的最后提交 查看已(未)合并的分支",content:"# Git分支管理-查看分支\n\n\n# 查看分支\n\n$ git branch\n  iss53\n* master  # 带星号*表示当前所在分支\n  testing\n\n\n1\n2\n3\n4\n\n\ngit branch 命令不只是可以创建与删除分支。 如果不加任何参数运行它，会得到当前所有分支的一个列表。\n\n\n# 查看每个分支的最后提交\n\n$ git branch -v\n  iss53   93b412c fix javascript issue\n* master  7a98805 Merge branch 'iss53'\n  testing 782fd34 test\n\n\n1\n2\n3\n4\n\n\n\n# 查看已(未)合并的分支\n\n--merged 与 --no-merged 这两个选项可以查看哪些分支已经合并或未合并到 当前 分支。\n\n$ git branch --merged # 查看已合并分支列表\n  iss53\n* master\n\n\n1\n2\n3\n\n\n上面列表中分支名字前没有 * 号的分支通常可以使用 git branch -d 删除掉；\n\n$ git branch --no-merged # 查看未合并的分支列表\n  testing\n\n\n1\n2\n\n\n上面显示未合并的分支，尝试使用 git branch -d 命令删除它时会失败：\n\n$ git branch -d testing\nerror: The branch 'testing' is not fully merged.\nIf you are sure you want to delete it, run 'git branch -D testing'.\n\n\n1\n2\n3\n\n\n强制删除未合并的分支:\n\n$ git branch -D testing\n\n\n1\n\n\n# 查看指定分支的已(未)合并的分支\n\n上面描述的选项 --merged 和 --no-merged 会在没有给定提交或分支名作为参数时， 分别列出已合并或未合并到 当前 分支的分支。\n\n你总是可以提供一个附加的参数来查看其它分支的合并状态而不必检出它们。 例如，尚未合并到 testing 分支的有哪些？\n\n$ git branch --no-merged testing\n  topicA\n  featureB\n\n\n1\n2\n3\n",normalizedContent:"# git分支管理-查看分支\n\n\n# 查看分支\n\n$ git branch\n  iss53\n* master  # 带星号*表示当前所在分支\n  testing\n\n\n1\n2\n3\n4\n\n\ngit branch 命令不只是可以创建与删除分支。 如果不加任何参数运行它，会得到当前所有分支的一个列表。\n\n\n# 查看每个分支的最后提交\n\n$ git branch -v\n  iss53   93b412c fix javascript issue\n* master  7a98805 merge branch 'iss53'\n  testing 782fd34 test\n\n\n1\n2\n3\n4\n\n\n\n# 查看已(未)合并的分支\n\n--merged 与 --no-merged 这两个选项可以查看哪些分支已经合并或未合并到 当前 分支。\n\n$ git branch --merged # 查看已合并分支列表\n  iss53\n* master\n\n\n1\n2\n3\n\n\n上面列表中分支名字前没有 * 号的分支通常可以使用 git branch -d 删除掉；\n\n$ git branch --no-merged # 查看未合并的分支列表\n  testing\n\n\n1\n2\n\n\n上面显示未合并的分支，尝试使用 git branch -d 命令删除它时会失败：\n\n$ git branch -d testing\nerror: the branch 'testing' is not fully merged.\nif you are sure you want to delete it, run 'git branch -d testing'.\n\n\n1\n2\n3\n\n\n强制删除未合并的分支:\n\n$ git branch -d testing\n\n\n1\n\n\n# 查看指定分支的已(未)合并的分支\n\n上面描述的选项 --merged 和 --no-merged 会在没有给定提交或分支名作为参数时， 分别列出已合并或未合并到 当前 分支的分支。\n\n你总是可以提供一个附加的参数来查看其它分支的合并状态而不必检出它们。 例如，尚未合并到 testing 分支的有哪些？\n\n$ git branch --no-merged testing\n  topica\n  featureb\n\n\n1\n2\n3\n",charsets:{cjk:!0},lastUpdated:"2021/03/25, 20:24:44",lastUpdatedTimestamp:1616675084e3},{title:"Git分支开发工作流",frontmatter:{title:"Git分支开发工作流",date:"2020-11-18T17:43:57.000Z",permalink:"/pages/49ee30/",categories:["《Git》学习笔记"],tags:["Git"]},regularPath:"/%E3%80%8AGit%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/50.Git%E5%88%86%E6%94%AF%E5%BC%80%E5%8F%91%E5%B7%A5%E4%BD%9C%E6%B5%81.html",relativePath:"《Git》学习笔记/20.文档笔记/50.Git分支开发工作流.md",key:"v-4f7dd079",path:"/pages/49ee30/",headers:[{level:3,title:"长期分支",slug:"长期分支",normalizedTitle:"长期分支",charIndex:32},{level:3,title:"主题分支 (短期分支)",slug:"主题分支-短期分支",normalizedTitle:"主题分支 (短期分支)",charIndex:625}],headersStr:"长期分支 主题分支 (短期分支)",content:"# Git分支开发工作流\n\n文档：Git分支开发工作流\n\n\n# 长期分支\n\n因为 Git 使用简单的三方合并，所以就算在一段较长的时间内，反复把一个分支合并入另一个分支，也不是什么难事。 也就是说，在整个项目开发周期的不同阶段，你可以同时拥有多个开放的分支；你可以定期地把某些主题分支合并入其他分支中。\n\n许多使用 Git 的开发者都喜欢使用这种方式来工作，比如只在 master 分支上保留完全稳定的代码，开发过程在dev分支，开发完成后并入test分支进行测试，通过测试的稳定代码才并入master分支中。\n\ndev和test分支不需要保持绝对稳定，但在test通过测试达到稳定状态，就可以被合并入master分支。\n\n事实上我们刚才讨论的，是随着你的提交而不断右移的指针。 稳定分支(master)的指针总是在提交历史中落后一大截，而前沿分支(dev或test)的指针往往比较靠前。\n\n你可以用这种方法维护不同层次的稳定性。 一些大型项目还有一个 proposed（建议） 或 pu: proposed updates（建议更新）分支，它可能因包含一些不成熟的内容而不能进入master 分支。 这么做的目的是使你的分支具有不同级别的稳定性；当它们具有一定程度的稳定性后，再把它们合并入具有更高级别稳定性的分支中。 再次强调一下，使用多个长期分支的方法并非必要，但是这么做通常很有帮助，尤其是当你在一个非常庞大或者复杂的项目中工作时。\n\n\n# 主题分支 (短期分支)\n\n主题分支对任何规模的项目都适用。 主题分支是一种短期分支，它被用来实现单一特性或其相关工作。\n\n你已经在上一节中你创建的 iss53 和 hotfix 主题分支中看到过这种用法。 你在上一节用到的主题分支（iss53 和 hotfix 分支）中提交了一些更新，并且在它们合并入主干分支之后，你又删除了它们。 这项技术能使你快速并且完整地进行上下文切换（context-switch）——因为你的工作被分散到不同的流水线中，在不同的流水线中每个分支都仅与其目标特性相关，因此，在做代码审查之类的工作的时候就能更加容易地看出你做了哪些改动。 你可以把做出的改动在主题分支中保留几分钟、几天甚至几个月，等它们成熟之后再合并，而不用在乎它们建立的顺序或工作进度。\n\n考虑这样一个例子，你在 master 分支上工作到 C1，这时为了解决一个问题而新建 iss91 分支，在 iss91 分支上工作到 C4，然而对于那个问题你又有了新的想法，于是你再新建一个 iss91v2 分支试图用另一种方法解决那个问题，接着你回到 master 分支工作了一会儿，你又冒出了一个不太确定的想法，你便在 C10 的时候新建一个 dumbidea 分支，并在上面做些实验。 你的提交历史看起来像下面这个样子：\n\n\n\n图1. 拥有多个主题分支的提交历史 ▲\n\n现在，我们假设两件事情：你决定使用第二个方案来解决那个问题，即使用在 iss91v2 分支中方案。 另外，你将 dumbidea 分支拿给你的同事看过之后，结果发现这是个惊人之举。 这时你可以抛弃 iss91 分支（即丢弃 C5 和 C6 提交），然后把另外两个分支合并入主干分支。 最终你的提交历史看起来像下面这个样子：\n\n\n\n图2. 合并了 dumbidea 和 iss91v2 分支之后的提交历史 ▲\n\n我们将会在 分布式 Git 中向你揭示更多有关分支工作流的细节， 因此，请确保你阅读完那个章节之后，再来决定你的下个项目要使用什么样的分支策略（branching scheme）。\n\n请牢记，当你做这么多操作的时候，这些分支全部都存于本地。 当你新建和合并分支的时候，所有这一切都只发生在你本地的 Git 版本库中 —— 没有与服务器发生交互。",normalizedContent:"# git分支开发工作流\n\n文档：git分支开发工作流\n\n\n# 长期分支\n\n因为 git 使用简单的三方合并，所以就算在一段较长的时间内，反复把一个分支合并入另一个分支，也不是什么难事。 也就是说，在整个项目开发周期的不同阶段，你可以同时拥有多个开放的分支；你可以定期地把某些主题分支合并入其他分支中。\n\n许多使用 git 的开发者都喜欢使用这种方式来工作，比如只在 master 分支上保留完全稳定的代码，开发过程在dev分支，开发完成后并入test分支进行测试，通过测试的稳定代码才并入master分支中。\n\ndev和test分支不需要保持绝对稳定，但在test通过测试达到稳定状态，就可以被合并入master分支。\n\n事实上我们刚才讨论的，是随着你的提交而不断右移的指针。 稳定分支(master)的指针总是在提交历史中落后一大截，而前沿分支(dev或test)的指针往往比较靠前。\n\n你可以用这种方法维护不同层次的稳定性。 一些大型项目还有一个 proposed（建议） 或 pu: proposed updates（建议更新）分支，它可能因包含一些不成熟的内容而不能进入master 分支。 这么做的目的是使你的分支具有不同级别的稳定性；当它们具有一定程度的稳定性后，再把它们合并入具有更高级别稳定性的分支中。 再次强调一下，使用多个长期分支的方法并非必要，但是这么做通常很有帮助，尤其是当你在一个非常庞大或者复杂的项目中工作时。\n\n\n# 主题分支 (短期分支)\n\n主题分支对任何规模的项目都适用。 主题分支是一种短期分支，它被用来实现单一特性或其相关工作。\n\n你已经在上一节中你创建的 iss53 和 hotfix 主题分支中看到过这种用法。 你在上一节用到的主题分支（iss53 和 hotfix 分支）中提交了一些更新，并且在它们合并入主干分支之后，你又删除了它们。 这项技术能使你快速并且完整地进行上下文切换（context-switch）——因为你的工作被分散到不同的流水线中，在不同的流水线中每个分支都仅与其目标特性相关，因此，在做代码审查之类的工作的时候就能更加容易地看出你做了哪些改动。 你可以把做出的改动在主题分支中保留几分钟、几天甚至几个月，等它们成熟之后再合并，而不用在乎它们建立的顺序或工作进度。\n\n考虑这样一个例子，你在 master 分支上工作到 c1，这时为了解决一个问题而新建 iss91 分支，在 iss91 分支上工作到 c4，然而对于那个问题你又有了新的想法，于是你再新建一个 iss91v2 分支试图用另一种方法解决那个问题，接着你回到 master 分支工作了一会儿，你又冒出了一个不太确定的想法，你便在 c10 的时候新建一个 dumbidea 分支，并在上面做些实验。 你的提交历史看起来像下面这个样子：\n\n\n\n图1. 拥有多个主题分支的提交历史 ▲\n\n现在，我们假设两件事情：你决定使用第二个方案来解决那个问题，即使用在 iss91v2 分支中方案。 另外，你将 dumbidea 分支拿给你的同事看过之后，结果发现这是个惊人之举。 这时你可以抛弃 iss91 分支（即丢弃 c5 和 c6 提交），然后把另外两个分支合并入主干分支。 最终你的提交历史看起来像下面这个样子：\n\n\n\n图2. 合并了 dumbidea 和 iss91v2 分支之后的提交历史 ▲\n\n我们将会在 分布式 git 中向你揭示更多有关分支工作流的细节， 因此，请确保你阅读完那个章节之后，再来决定你的下个项目要使用什么样的分支策略（branching scheme）。\n\n请牢记，当你做这么多操作的时候，这些分支全部都存于本地。 当你新建和合并分支的时候，所有这一切都只发生在你本地的 git 版本库中 —— 没有与服务器发生交互。",charsets:{cjk:!0},lastUpdated:"2021/03/25, 20:24:44",lastUpdatedTimestamp:1616675084e3},{title:"Git分支-变基",frontmatter:{title:"Git分支-变基",date:"2020-11-18T17:43:57.000Z",permalink:"/pages/3a3247/",categories:["《Git》学习笔记"],tags:["Git"]},regularPath:"/%E3%80%8AGit%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/70.Git%E5%88%86%E6%94%AF-%E5%8F%98%E5%9F%BA.html",relativePath:"《Git》学习笔记/20.文档笔记/70.Git分支-变基.md",key:"v-5d0ae742",path:"/pages/3a3247/",headers:[{level:2,title:"变基的基本操作",slug:"变基的基本操作",normalizedTitle:"变基的基本操作",charIndex:117},{level:3,title:"概念",slug:"概念",normalizedTitle:"概念",charIndex:312},{level:3,title:"原理",slug:"原理",normalizedTitle:"原理",charIndex:728},{level:3,title:"步骤",slug:"步骤",normalizedTitle:"步骤",charIndex:1138},{level:3,title:"优点",slug:"优点",normalizedTitle:"优点",charIndex:1701},{level:2,title:"更有趣的变基例子",slug:"更有趣的变基例子",normalizedTitle:"更有趣的变基例子",charIndex:1727},{level:3,title:"更有趣的变基例子",slug:"更有趣的变基例子-2",normalizedTitle:"更有趣的变基例子",charIndex:1727},{level:3,title:"--onto选项",slug:"onto选项",normalizedTitle:"--onto选项",charIndex:2530},{level:3,title:"省去先切换到源分支的步骤",slug:"省去先切换到源分支的步骤",normalizedTitle:"省去先切换到源分支的步骤",charIndex:2762},{level:2,title:"变基的风险",slug:"变基的风险",normalizedTitle:"变基的风险",charIndex:3415},{level:3,title:"金科玉律",slug:"金科玉律",normalizedTitle:"金科玉律",charIndex:3425},{level:3,title:"变基的实质",slug:"变基的实质",normalizedTitle:"变基的实质",charIndex:3615},{level:2,title:"用变基解决变基",slug:"用变基解决变基",normalizedTitle:"用变基解决变基",charIndex:4412},{level:2,title:"变基 vs. 合并",slug:"变基-vs-合并",normalizedTitle:"变基 vs. 合并",charIndex:5550}],headersStr:"变基的基本操作 概念 原理 步骤 优点 更有趣的变基例子 更有趣的变基例子 --onto选项 省去先切换到源分支的步骤 变基的风险 金科玉律 变基的实质 用变基解决变基 变基 vs. 合并",content:"# Git分支-变基\n\n在 Git 中整合来自不同分支的修改主要有两种方法：merge 以及 rebase。 在本节中我们将学习什么是“变基”，怎样使用“变基”，并将展示该操作的惊艳之处，以及指出在何种情况下你应避免使用它。\n\n\n# 变基的基本操作\n\n请回顾之前在 分支的合并 中的一个例子，你会看到开发任务分叉到两个不同分支，又各自提交了更新。\n\n\n\n图0. 分叉的提交历史 ▲\n\n之前介绍过，整合分支最容易的方法是 merge 命令。 它会把两个分支的最新快照（C3 和 C4）以及二者最近的共同祖先（C2）进行三方合并，合并的结果是生成一个新的快照（并提交）。\n\n\n\n图1. 通过合并操作来整合分叉的历史 ▲\n\n\n# 概念\n\n变基就是：将某一分支上的所有修改复制到另一分支上\n\n除了merge，还有一种方法：你可以提取在 C4 中引入的补丁和修改，然后在 C3 的基础上应用一次。 在 Git 中，这种操作就叫做 变基（rebase）。 你可以使用 rebase 命令将提交到某一分支上的所有修改都移到另一分支上，就好像“重新播放”一样。\n\n在这个例子中，你可以检出 experiment 分支，然后将它变基到 master 分支上：\n\n$ git checkout experiment\n$ git rebase master # 将experiment上的修改变基到master分支上（将experiment的提交移动到master上。）\nFirst, rewinding head to replay your work on top of it...\nApplying: added staged command\n\n\n1\n2\n3\n4\n\n\n它的原理是首先找到这两个分支（即当前分支 experiment、变基操作的目标基底分支 master） 的最近共同祖先 C2，然后对比当前分支相对于该祖先的历次提交，提取相应的修改并存为临时文件， 然后将当前分支指向目标基底 C3, 最后以此将之前另存为临时文件的修改依序应用。 （译注：写明了 commit id，以便理解，下同）\n\n\n# 原理\n\n 1. 找到当前分支和目标分支的最近共同祖先\n\n 2. 对比当前分支相对于该共同祖先的历次提交\n\n 3. 提取相应的修改并存为临时文件\n\n 4. 将当前分支指向目标分支\n\n 5. 将之前临时文件的修改依序应用\n\n\n\n图2.将 C4 中的修改变基到 C3 上 ▲\n\n现在回到 master 分支，进行一次快进合并。\n\n$ git checkout master\n$ git merge experiment\n\n\n1\n2\n\n\n\n\n图3.master 分支的快进合并 ▲\n\n\n# 步骤\n\n先检出源分支，将源分支的修改变基到目标分支。切回目标分支，进行一次快进合并\n\n# 示意：\ngit checkout <源分支>\ngit (源分支的修改)rebase(到) <目标分支>\ngit checkout <目标分支>\ngit merge <源分支>\n\n\n1\n2\n3\n4\n5\n\n\n此时，C4' 指向的快照就和 the merge example 中 C5 指向的快照一模一样了。 这两种整合方法的最终结果没有任何区别，但是 变基使得提交历史更加整洁。 你在查看一个经过变基的分支的历史记录时会发现，尽管实际的开发工作是并行的， 但它们看上去就像是串行的一样，提交历史是一条直线没有分叉。\n\n一般我们这样做的目的是为了确保在向远程分支推送时能保持提交历史的整洁——例如向某个其他人维护的项目贡献代码时。 在这种情况下，你首先在自己的分支里进行开发，当开发完成时你需要先将你的代码变基到 origin/master 上，然后再向主项目提交修改。 这样的话，该项目的维护者就不再需要进行整合工作，只需要快进合并便可。\n\n请注意，无论是通过变基，还是通过三方合并，整合的最终结果所指向的快照始终是一样的，只不过提交历史不同罢了。 变基是将一系列提交按照原有次序依次应用到另一分支上，而合并是把最终结果合在一起。\n\n\n# 优点\n\n变基的优点： 使提交记录更加整洁。\n\n\n# 更有趣的变基例子\n\n在对两个分支进行变基时，所生成的“重放”并不一定要在目标分支上应用，你也可以指定另外的一个分支进行应用。 就像 从一个主题分支里再分出一个主题分支的提交历史 中的例子那样。 你创建了一个主题分支 server，为服务端添加了一些功能，提交了 C3 和 C4。 然后从 C3 上创建了主题分支 client，为客户端添加了一些功能，提交了 C8 和 C9。 最后，你回到 server 分支，又提交了 C10。\n\n\n# 更有趣的变基例子\n\n在对两个分支进行变基时，所生成的“重放”并不一定要在目标分支上应用，你也可以指定另外的一个分支进行应用。 就像 从一个主题分支里再分出一个主题分支的提交历史 中的例子那样。 你创建了一个主题分支 server，为服务端添加了一些功能，提交了 C3 和 C4。 然后从 C3 上创建了主题分支 client，为客户端添加了一些功能，提交了 C8 和 C9。 最后，你回到 server 分支，又提交了 C10。\n\n\n\n图4.从一个主题分支里再分出一个主题分支的提交历史 ▲\n\n假设你希望将 client 中的修改合并到主分支并发布，但暂时并不想合并 server 中的修改， 因为它们还需要经过更全面的测试。这时，你就可以使用 git rebase 命令的 --onto 选项， 选中在 client 分支里但不在 server 分支里的修改（即 C8 和 C9），将它们在 master 分支上重放：\n\n$ git rebase --onto master server client\n\n\n1\n\n\n以上命令的意思是：“取出 client 分支，找出它从 server 分支分歧之后的补丁， 然后把这些补丁在 master 分支上重放一遍，让 client 看起来像直接基于 master 修改一样”。这理解起来有一点复杂，不过效果非常酷。\n\n\n# --onto选项\n\n选中C分支中的但不在B分支里的修改，应用到A分支。\n\n\n\n图5.截取主题分支上的另一个主题分支，然后变基到其他分支 ▲\n\n现在可以快进合并 master 分支了。（如图 快进合并 master 分支，使之包含来自 client 分支的修改）：\n\n$ git checkout master\n$ git merge client\n\n\n1\n2\n\n\n\n\n图6.快进合并 `master` 分支，使之包含来自 `client` 分支的修改 ▲\n\n\n# 省去先切换到源分支的步骤\n\ngit rebase <目标(当前)分支> <源分支> # 将源分支变基到目标分支。执行此命令后会自动切换到源分支\ngit checkout <目标分支>\ngit merge <源分支>\n\n\n1\n2\n3\n\n\n注意：使用这个方法要确保源分支上的代码是最新的。\n\n接下来你决定将 server 分支中的修改也整合进来。 使用 git rebase <basebranch> <topicbranch> 命令可以直接将主题分支 （即本例中的 server）变基到目标分支（即 master）上。 这样做能省去你先切换到 server 分支，再对其执行变基命令的多个步骤。\n\n$ git rebase master server\n\n\n1\n\n\n如图 将 server 中的修改变基到 master 上 所示，server 中的代码被“续”到了 master 后面。\n\n\n\n图7.将 `server` 中的修改变基到 `master` 上 ▲\n\n然后就可以快进合并主分支 master 了：\n\n$ git checkout master\n$ git merge server\n\n\n1\n2\n\n\n至此，client 和 server 分支中的修改都已经整合到主分支里了， 你可以删除这两个分支，最终提交历史会变成图 最终的提交历史 中的样子：\n\n$ git branch -d client\n$ git branch -d server\n\n\n1\n2\n\n\n\n\n图8. 最终的提交历史 ▲\n\n\n# 变基的风险\n\n\n# 金科玉律\n\n呃，奇妙的变基也并非完美无缺，要用它得遵守一条准则：\n\n如果提交存在于你的仓库之外，而别人可能基于这些提交进行开发，那么不要执行变基。\n\n如果你遵循这条金科玉律，就不会出差错。 否则，人民群众会仇恨你，你的朋友和家人也会嘲笑你，唾弃你。\n\n提示\n\n例如：几个人同时在一个主题分支上进行开发和提交时，你不要中途执行变基，只有在大家都完成工作之后才可以执行变基。\n\n\n# 变基的实质\n\n变基操作的实质是丢弃一些现有的提交，然后相应地新建一些内容一样但实际上不同的提交。 如果你已经将提交推送至某个仓库，而其他人也已经从该仓库拉取提交并进行了后续工作，此时，如果你用 git rebase 命令重新整理了提交并再次推送，你的同伴因此将不得不再次将他们手头的工作与你的提交进行整合，如果接下来你还要拉取并整合他们修改过的提交，事情就会变得一团糟。\n\n让我们来看一个在公开的仓库上执行变基操作所带来的问题。 假设你从一个中央服务器克隆然后在它的基础上进行了一些开发。 你的提交历史如图所示：\n\n\n\n图9. 克隆一个仓库，然后在它的基础上进行了一些开发 ▲\n\n然后，某人又向中央服务器提交了一些修改，其中还包括一次合并。 你抓取了这些在远程分支上的修改，并将其合并到你本地的开发分支，然后你的提交历史就会变成这样：\n\n\n\n图10. 抓取别人的提交，合并到自己的开发分支 ▲\n\n接下来，这个人又决定把合并操作回滚，改用变基；继而又用 git push --force 命令覆盖了服务器上的提交历史。 之后你从服务器抓取更新，会发现多出来一些新的提交。\n\n\n\n图11. 有人推送了经过变基的提交，并丢弃了你的本地开发所基于的一些提交 ▲\n\n结果就是你们两人的处境都十分尴尬。 如果你执行 git pull 命令，你将合并来自两条提交历史的内容，生成一个新的合并提交，最终仓库会如图所示：\n\n\n\n图12. 你将相同的内容又合并了一次，生成了一个新的提交 ▲\n\n此时如果你执行 git log 命令，你会发现有两个提交的作者、日期、日志居然是一样的，这会令人感到混乱。 此外，如果你将这一堆又推送到服务器上，你实际上是将那些已经被变基抛弃的提交又找了回来，这会令人感到更加混乱。 很明显对方并不想在提交历史中看到 C4 和 C6，因为之前就是他把这两个提交通过变基丢弃的。\n\n\n# 用变基解决变基\n\n如果你 真的 遭遇了类似的处境，Git 还有一些高级魔法可以帮到你。 如果团队中的某人强制推送并覆盖了一些你所基于的提交，你需要做的就是检查你做了哪些修改，以及他们覆盖了哪些修改。\n\n实际上，Git 除了对整个提交计算 SHA-1 校验和以外，也对本次提交所引入的修改计算了校验和——即 “patch-id”。\n\n如果你拉取被覆盖过的更新并将你手头的工作基于此进行变基的话，一般情况下 Git 都能成功分辨出哪些是你的修改，并把它们应用到新分支上。\n\n举个例子，如果遇到前面提到的 有人推送了经过变基的提交，并丢弃了你的本地开发所基于的一些提交 那种情境，如果我们不是执行合并，而是执行 git rebase teamone/master, Git 将会：\n\n * 检查哪些提交是我们的分支上独有的（C2，C3，C4，C6，C7）\n * 检查其中哪些提交不是合并操作的结果（C2，C3，C4）\n * 检查哪些提交在对方覆盖更新时并没有被纳入目标分支（只有 C2 和 C3，因为 C4 其实就是 C4'）\n * 把查到的这些提交应用在 teamone/master 上面\n\n从而我们将得到与 你将相同的内容又合并了一次，生成了一个新的提交 中不同的结果，如图 在一个被变基然后强制推送的分支上再次执行变基 所示。\n\n\n\n图13. 在一个被变基然后强制推送的分支上再次执行变基 ▲\n\n要想上述方案有效，还需要对方在变基时确保 C4' 和 C4 是几乎一样的。 否则变基操作将无法识别，并新建另一个类似 C4 的补丁（而这个补丁很可能无法整洁的整合入历史，因为补丁中的修改已经存在于某个地方了）。\n\n在本例中另一种简单的方法是使用 git pull --rebase 命令而不是直接 git pull。 又或者你可以自己手动完成这个过程，先 git fetch，再 git rebase teamone/master。\n\n如果你习惯使用 git pull ，同时又希望默认使用选项 --rebase，你可以执行这条语句 git config --global pull.rebase true 来更改 pull.rebase 的默认配置。\n\n如果你只对不会离开你电脑的提交执行变基，那就不会有事。 如果你对已经推送过的提交执行变基，但别人没有基于它的提交，那么也不会有事。 如果你对已经推送至共用仓库的提交上执行变基命令，并因此丢失了一些别人的开发所基于的提交， 那你就有大麻烦了，你的同事也会因此鄙视你。\n\n如果你或你的同事在某些情形下决意要这么做，请一定要通知每个人执行 git pull --rebase 命令，这样尽管不能避免伤痛，但能有所缓解。\n\n\n# 变基 vs. 合并\n\n至此，你已在实战中学习了变基和合并的用法，你一定会想问，到底哪种方式更好。 在回答这个问题之前，让我们退后一步，想讨论一下提交历史到底意味着什么。\n\n有一种观点认为，仓库的提交历史即是 记录实际发生过什么。 它是针对历史的文档，本身就有价值，不能乱改。 从这个角度看来，改变提交历史是一种亵渎，你使用 谎言 掩盖了实际发生过的事情。 如果由合并产生的提交历史是一团糟怎么办？ 既然事实就是如此，那么这些痕迹就应该被保留下来，让后人能够查阅。\n\n另一种观点则正好相反，他们认为提交历史是 项目过程中发生的事。 没人会出版一本书的第一版草稿，软件维护手册也是需要反复修订才能方便使用。 持这一观点的人会使用 rebase 及 filter-branch 等工具来编写故事，怎么方便后来的读者就怎么写。\n\n现在，让我们回到之前的问题上来，到底合并还是变基好？希望你能明白，这并没有一个简单的答案。 Git 是一个非常强大的工具，它允许你对提交历史做许多事情，但每个团队、每个项目对此的需求并不相同。 既然你已经分别学习了两者的用法，相信你能够根据实际情况作出明智的选择。\n\n总的原则是，只对尚未推送或分享给别人的本地修改执行变基操作清理历史， 从不对已推送至别处的提交执行变基操作，这样，你才能享受到两种方式带来的便利。",normalizedContent:"# git分支-变基\n\n在 git 中整合来自不同分支的修改主要有两种方法：merge 以及 rebase。 在本节中我们将学习什么是“变基”，怎样使用“变基”，并将展示该操作的惊艳之处，以及指出在何种情况下你应避免使用它。\n\n\n# 变基的基本操作\n\n请回顾之前在 分支的合并 中的一个例子，你会看到开发任务分叉到两个不同分支，又各自提交了更新。\n\n\n\n图0. 分叉的提交历史 ▲\n\n之前介绍过，整合分支最容易的方法是 merge 命令。 它会把两个分支的最新快照（c3 和 c4）以及二者最近的共同祖先（c2）进行三方合并，合并的结果是生成一个新的快照（并提交）。\n\n\n\n图1. 通过合并操作来整合分叉的历史 ▲\n\n\n# 概念\n\n变基就是：将某一分支上的所有修改复制到另一分支上\n\n除了merge，还有一种方法：你可以提取在 c4 中引入的补丁和修改，然后在 c3 的基础上应用一次。 在 git 中，这种操作就叫做 变基（rebase）。 你可以使用 rebase 命令将提交到某一分支上的所有修改都移到另一分支上，就好像“重新播放”一样。\n\n在这个例子中，你可以检出 experiment 分支，然后将它变基到 master 分支上：\n\n$ git checkout experiment\n$ git rebase master # 将experiment上的修改变基到master分支上（将experiment的提交移动到master上。）\nfirst, rewinding head to replay your work on top of it...\napplying: added staged command\n\n\n1\n2\n3\n4\n\n\n它的原理是首先找到这两个分支（即当前分支 experiment、变基操作的目标基底分支 master） 的最近共同祖先 c2，然后对比当前分支相对于该祖先的历次提交，提取相应的修改并存为临时文件， 然后将当前分支指向目标基底 c3, 最后以此将之前另存为临时文件的修改依序应用。 （译注：写明了 commit id，以便理解，下同）\n\n\n# 原理\n\n 1. 找到当前分支和目标分支的最近共同祖先\n\n 2. 对比当前分支相对于该共同祖先的历次提交\n\n 3. 提取相应的修改并存为临时文件\n\n 4. 将当前分支指向目标分支\n\n 5. 将之前临时文件的修改依序应用\n\n\n\n图2.将 c4 中的修改变基到 c3 上 ▲\n\n现在回到 master 分支，进行一次快进合并。\n\n$ git checkout master\n$ git merge experiment\n\n\n1\n2\n\n\n\n\n图3.master 分支的快进合并 ▲\n\n\n# 步骤\n\n先检出源分支，将源分支的修改变基到目标分支。切回目标分支，进行一次快进合并\n\n# 示意：\ngit checkout <源分支>\ngit (源分支的修改)rebase(到) <目标分支>\ngit checkout <目标分支>\ngit merge <源分支>\n\n\n1\n2\n3\n4\n5\n\n\n此时，c4' 指向的快照就和 the merge example 中 c5 指向的快照一模一样了。 这两种整合方法的最终结果没有任何区别，但是 变基使得提交历史更加整洁。 你在查看一个经过变基的分支的历史记录时会发现，尽管实际的开发工作是并行的， 但它们看上去就像是串行的一样，提交历史是一条直线没有分叉。\n\n一般我们这样做的目的是为了确保在向远程分支推送时能保持提交历史的整洁——例如向某个其他人维护的项目贡献代码时。 在这种情况下，你首先在自己的分支里进行开发，当开发完成时你需要先将你的代码变基到 origin/master 上，然后再向主项目提交修改。 这样的话，该项目的维护者就不再需要进行整合工作，只需要快进合并便可。\n\n请注意，无论是通过变基，还是通过三方合并，整合的最终结果所指向的快照始终是一样的，只不过提交历史不同罢了。 变基是将一系列提交按照原有次序依次应用到另一分支上，而合并是把最终结果合在一起。\n\n\n# 优点\n\n变基的优点： 使提交记录更加整洁。\n\n\n# 更有趣的变基例子\n\n在对两个分支进行变基时，所生成的“重放”并不一定要在目标分支上应用，你也可以指定另外的一个分支进行应用。 就像 从一个主题分支里再分出一个主题分支的提交历史 中的例子那样。 你创建了一个主题分支 server，为服务端添加了一些功能，提交了 c3 和 c4。 然后从 c3 上创建了主题分支 client，为客户端添加了一些功能，提交了 c8 和 c9。 最后，你回到 server 分支，又提交了 c10。\n\n\n# 更有趣的变基例子\n\n在对两个分支进行变基时，所生成的“重放”并不一定要在目标分支上应用，你也可以指定另外的一个分支进行应用。 就像 从一个主题分支里再分出一个主题分支的提交历史 中的例子那样。 你创建了一个主题分支 server，为服务端添加了一些功能，提交了 c3 和 c4。 然后从 c3 上创建了主题分支 client，为客户端添加了一些功能，提交了 c8 和 c9。 最后，你回到 server 分支，又提交了 c10。\n\n\n\n图4.从一个主题分支里再分出一个主题分支的提交历史 ▲\n\n假设你希望将 client 中的修改合并到主分支并发布，但暂时并不想合并 server 中的修改， 因为它们还需要经过更全面的测试。这时，你就可以使用 git rebase 命令的 --onto 选项， 选中在 client 分支里但不在 server 分支里的修改（即 c8 和 c9），将它们在 master 分支上重放：\n\n$ git rebase --onto master server client\n\n\n1\n\n\n以上命令的意思是：“取出 client 分支，找出它从 server 分支分歧之后的补丁， 然后把这些补丁在 master 分支上重放一遍，让 client 看起来像直接基于 master 修改一样”。这理解起来有一点复杂，不过效果非常酷。\n\n\n# --onto选项\n\n选中c分支中的但不在b分支里的修改，应用到a分支。\n\n\n\n图5.截取主题分支上的另一个主题分支，然后变基到其他分支 ▲\n\n现在可以快进合并 master 分支了。（如图 快进合并 master 分支，使之包含来自 client 分支的修改）：\n\n$ git checkout master\n$ git merge client\n\n\n1\n2\n\n\n\n\n图6.快进合并 `master` 分支，使之包含来自 `client` 分支的修改 ▲\n\n\n# 省去先切换到源分支的步骤\n\ngit rebase <目标(当前)分支> <源分支> # 将源分支变基到目标分支。执行此命令后会自动切换到源分支\ngit checkout <目标分支>\ngit merge <源分支>\n\n\n1\n2\n3\n\n\n注意：使用这个方法要确保源分支上的代码是最新的。\n\n接下来你决定将 server 分支中的修改也整合进来。 使用 git rebase <basebranch> <topicbranch> 命令可以直接将主题分支 （即本例中的 server）变基到目标分支（即 master）上。 这样做能省去你先切换到 server 分支，再对其执行变基命令的多个步骤。\n\n$ git rebase master server\n\n\n1\n\n\n如图 将 server 中的修改变基到 master 上 所示，server 中的代码被“续”到了 master 后面。\n\n\n\n图7.将 `server` 中的修改变基到 `master` 上 ▲\n\n然后就可以快进合并主分支 master 了：\n\n$ git checkout master\n$ git merge server\n\n\n1\n2\n\n\n至此，client 和 server 分支中的修改都已经整合到主分支里了， 你可以删除这两个分支，最终提交历史会变成图 最终的提交历史 中的样子：\n\n$ git branch -d client\n$ git branch -d server\n\n\n1\n2\n\n\n\n\n图8. 最终的提交历史 ▲\n\n\n# 变基的风险\n\n\n# 金科玉律\n\n呃，奇妙的变基也并非完美无缺，要用它得遵守一条准则：\n\n如果提交存在于你的仓库之外，而别人可能基于这些提交进行开发，那么不要执行变基。\n\n如果你遵循这条金科玉律，就不会出差错。 否则，人民群众会仇恨你，你的朋友和家人也会嘲笑你，唾弃你。\n\n提示\n\n例如：几个人同时在一个主题分支上进行开发和提交时，你不要中途执行变基，只有在大家都完成工作之后才可以执行变基。\n\n\n# 变基的实质\n\n变基操作的实质是丢弃一些现有的提交，然后相应地新建一些内容一样但实际上不同的提交。 如果你已经将提交推送至某个仓库，而其他人也已经从该仓库拉取提交并进行了后续工作，此时，如果你用 git rebase 命令重新整理了提交并再次推送，你的同伴因此将不得不再次将他们手头的工作与你的提交进行整合，如果接下来你还要拉取并整合他们修改过的提交，事情就会变得一团糟。\n\n让我们来看一个在公开的仓库上执行变基操作所带来的问题。 假设你从一个中央服务器克隆然后在它的基础上进行了一些开发。 你的提交历史如图所示：\n\n\n\n图9. 克隆一个仓库，然后在它的基础上进行了一些开发 ▲\n\n然后，某人又向中央服务器提交了一些修改，其中还包括一次合并。 你抓取了这些在远程分支上的修改，并将其合并到你本地的开发分支，然后你的提交历史就会变成这样：\n\n\n\n图10. 抓取别人的提交，合并到自己的开发分支 ▲\n\n接下来，这个人又决定把合并操作回滚，改用变基；继而又用 git push --force 命令覆盖了服务器上的提交历史。 之后你从服务器抓取更新，会发现多出来一些新的提交。\n\n\n\n图11. 有人推送了经过变基的提交，并丢弃了你的本地开发所基于的一些提交 ▲\n\n结果就是你们两人的处境都十分尴尬。 如果你执行 git pull 命令，你将合并来自两条提交历史的内容，生成一个新的合并提交，最终仓库会如图所示：\n\n\n\n图12. 你将相同的内容又合并了一次，生成了一个新的提交 ▲\n\n此时如果你执行 git log 命令，你会发现有两个提交的作者、日期、日志居然是一样的，这会令人感到混乱。 此外，如果你将这一堆又推送到服务器上，你实际上是将那些已经被变基抛弃的提交又找了回来，这会令人感到更加混乱。 很明显对方并不想在提交历史中看到 c4 和 c6，因为之前就是他把这两个提交通过变基丢弃的。\n\n\n# 用变基解决变基\n\n如果你 真的 遭遇了类似的处境，git 还有一些高级魔法可以帮到你。 如果团队中的某人强制推送并覆盖了一些你所基于的提交，你需要做的就是检查你做了哪些修改，以及他们覆盖了哪些修改。\n\n实际上，git 除了对整个提交计算 sha-1 校验和以外，也对本次提交所引入的修改计算了校验和——即 “patch-id”。\n\n如果你拉取被覆盖过的更新并将你手头的工作基于此进行变基的话，一般情况下 git 都能成功分辨出哪些是你的修改，并把它们应用到新分支上。\n\n举个例子，如果遇到前面提到的 有人推送了经过变基的提交，并丢弃了你的本地开发所基于的一些提交 那种情境，如果我们不是执行合并，而是执行 git rebase teamone/master, git 将会：\n\n * 检查哪些提交是我们的分支上独有的（c2，c3，c4，c6，c7）\n * 检查其中哪些提交不是合并操作的结果（c2，c3，c4）\n * 检查哪些提交在对方覆盖更新时并没有被纳入目标分支（只有 c2 和 c3，因为 c4 其实就是 c4'）\n * 把查到的这些提交应用在 teamone/master 上面\n\n从而我们将得到与 你将相同的内容又合并了一次，生成了一个新的提交 中不同的结果，如图 在一个被变基然后强制推送的分支上再次执行变基 所示。\n\n\n\n图13. 在一个被变基然后强制推送的分支上再次执行变基 ▲\n\n要想上述方案有效，还需要对方在变基时确保 c4' 和 c4 是几乎一样的。 否则变基操作将无法识别，并新建另一个类似 c4 的补丁（而这个补丁很可能无法整洁的整合入历史，因为补丁中的修改已经存在于某个地方了）。\n\n在本例中另一种简单的方法是使用 git pull --rebase 命令而不是直接 git pull。 又或者你可以自己手动完成这个过程，先 git fetch，再 git rebase teamone/master。\n\n如果你习惯使用 git pull ，同时又希望默认使用选项 --rebase，你可以执行这条语句 git config --global pull.rebase true 来更改 pull.rebase 的默认配置。\n\n如果你只对不会离开你电脑的提交执行变基，那就不会有事。 如果你对已经推送过的提交执行变基，但别人没有基于它的提交，那么也不会有事。 如果你对已经推送至共用仓库的提交上执行变基命令，并因此丢失了一些别人的开发所基于的提交， 那你就有大麻烦了，你的同事也会因此鄙视你。\n\n如果你或你的同事在某些情形下决意要这么做，请一定要通知每个人执行 git pull --rebase 命令，这样尽管不能避免伤痛，但能有所缓解。\n\n\n# 变基 vs. 合并\n\n至此，你已在实战中学习了变基和合并的用法，你一定会想问，到底哪种方式更好。 在回答这个问题之前，让我们退后一步，想讨论一下提交历史到底意味着什么。\n\n有一种观点认为，仓库的提交历史即是 记录实际发生过什么。 它是针对历史的文档，本身就有价值，不能乱改。 从这个角度看来，改变提交历史是一种亵渎，你使用 谎言 掩盖了实际发生过的事情。 如果由合并产生的提交历史是一团糟怎么办？ 既然事实就是如此，那么这些痕迹就应该被保留下来，让后人能够查阅。\n\n另一种观点则正好相反，他们认为提交历史是 项目过程中发生的事。 没人会出版一本书的第一版草稿，软件维护手册也是需要反复修订才能方便使用。 持这一观点的人会使用 rebase 及 filter-branch 等工具来编写故事，怎么方便后来的读者就怎么写。\n\n现在，让我们回到之前的问题上来，到底合并还是变基好？希望你能明白，这并没有一个简单的答案。 git 是一个非常强大的工具，它允许你对提交历史做许多事情，但每个团队、每个项目对此的需求并不相同。 既然你已经分别学习了两者的用法，相信你能够根据实际情况作出明智的选择。\n\n总的原则是，只对尚未推送或分享给别人的本地修改执行变基操作清理历史， 从不对已推送至别处的提交执行变基操作，这样，你才能享受到两种方式带来的便利。",charsets:{cjk:!0},lastUpdated:"2021/03/25, 20:24:44",lastUpdatedTimestamp:1616675084e3},{title:"Git分支-远程分支",frontmatter:{title:"Git分支-远程分支",date:"2020-11-18T17:43:57.000Z",permalink:"/pages/574d62/",categories:["《Git》学习笔记"],tags:["Git"]},regularPath:"/%E3%80%8AGit%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/60.Git%E5%88%86%E6%94%AF-%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF.html",relativePath:"《Git》学习笔记/20.文档笔记/60.Git分支-远程分支.md",key:"v-a3ae3a00",path:"/pages/574d62/",headers:[{level:3,title:"查看远程引用列表与信息",slug:"查看远程引用列表与信息",normalizedTitle:"查看远程引用列表与信息",charIndex:71},{level:3,title:"远程跟踪分支",slug:"远程跟踪分支",normalizedTitle:"远程跟踪分支",charIndex:184},{level:3,title:"推送",slug:"推送",normalizedTitle:"推送",charIndex:432},{level:3,title:"跟踪分支",slug:"跟踪分支",normalizedTitle:"跟踪分支",charIndex:186},{level:3,title:"查看跟踪分支",slug:"查看跟踪分支",normalizedTitle:"查看跟踪分支",charIndex:5263},{level:3,title:"拉取",slug:"拉取",normalizedTitle:"拉取",charIndex:605},{level:3,title:"删除远程分支",slug:"删除远程分支",normalizedTitle:"删除远程分支",charIndex:6361}],headersStr:"查看远程引用列表与信息 远程跟踪分支 推送 跟踪分支 查看跟踪分支 拉取 删除远程分支",content:"# Git分支-远程分支\n\n远程引用是对远程仓库的引用（指针），包括分支、标签等等。\n\n> 远程分支本质上也是一个指针，指向远程地址\n\n\n# 查看远程引用列表与信息\n\ngit ls-remote <remote> # 远程引用的完整列表\ngit remote show <remote> # 远程分支的更多信息\n\n\n1\n2\n\n\n上面两行命令比较少用，更常见的做法是利用远程跟踪分支。\n\n\n# 远程跟踪分支\n\n远程跟踪分支是远程分支状态的引用。它们是你无法移动的本地引用。一旦你进行了网络通信， Git 就会为你移动它们以精确反映远程仓库的状态。请将它们看做书签， 这样可以提醒你该分支在远程仓库中的位置就是你最后一次连接到它们的位置。\n\n它们以 <remote>/<branch> 的形式命名。 例如，如果你想要查看最后一次与远程仓库 origin 通信时 master 分支的状态，你可以查看 origin/master 分支。 你与同事合作解决一个问题并且他们推送了一个 iss53 分支，你可能有自己的本地 iss53 分支， 然而在服务器上的分支会以 origin/iss53 来表示。\n\n这可能有一点儿难以理解，让我们来看一个例子。 假设你的网络里有一个在 git.ourcompany.com 的 Git 服务器。 如果你从这里克隆，Git 的 clone 命令会为你自动将其命名为 origin，拉取它的所有数据， 创建一个指向它的 master 分支的指针，并且在本地将其命名为 origin/master。 Git 也会给你一个与 origin 的 master 分支在指向同一个地方的本地 master 分支，这样你就有工作的基础。\n\n笔记：从远程克隆下来的仓库有一个叫origin/master的远程跟踪分支 和 一个本地的master分支\n\n> 笔记：“origin” 并无特殊含义远程仓库名字 “origin” 与分支名字 “master” 一样，在 Git 中并没有任何特别的含义一样。 同时 “master” 是当你运行 git init 时默认的起始分支名字，原因仅仅是它的广泛使用， “origin” 是当你运行 git clone 时默认的远程仓库名字。 如果你运行 git clone -o booyah，那么你默认的远程分支名字将会是 booyah/master。\n\n\n\n图1. 克隆之后的服务器与本地仓库 ▲\n\n如果你在本地的 master 分支做了一些工作，在同一段时间内有其他人推送提交到 git.ourcompany.com 并且更新了它的 master 分支，这就是说你们的提交历史已走向不同的方向。 即便这样，只要你保持不与 origin 服务器连接（并拉取数据），你的 origin/master 指针就不会移动。\n\n\n\n图2. 本地与远程的工作可以分叉 ▲\n\n如果要与给定的远程仓库同步数据，运行 git fetch <remote> 命令（在本例中为 git fetch origin）。 这个命令查找 “origin” 是哪一个服务器（在本例中，它是 git.ourcompany.com）， 从中抓取本地没有的数据，并且更新本地数据库，移动 origin/master 指针到更新之后的位置。\n\n\n\n图3. git fetch 更新你的远程跟踪分支 ▲\n\n笔记: 本地的 master 分支 可能 和 远程跟踪分支 origin/master 分叉\n\n为了演示有多个远程仓库与远程分支的情况，我们假定你有另一个内部 Git 服务器，仅服务于你的某个敏捷开发团队。 这个服务器位于 git.team1.ourcompany.com。 你可以运行 git remote add 命令添加一个新的远程仓库引用到当前的项目，这个命令我们会在 Git 基础 中详细说明。 将这个远程仓库命名为 teamone，将其作为完整 URL 的缩写。远程仓库名本质上是远程URL的缩写\n\n\n\n图4. 添加另一个远程仓库 ▲\n\n现在，可以运行 git fetch teamone 来抓取远程仓库 teamone 有而本地没有的数据。 因为那台服务器上现有的数据是 origin 服务器上的一个子集， 所以 Git 并不会抓取数据而是会设置远程跟踪分支 teamone/master 指向 teamone 的 master 分支。\n\n\n\n图5. 远程跟踪分支 teamone/master ▲\n\n\n# 推送\n\n当你想要公开分享一个分支时，需要将其推送到有写入权限的远程仓库上。 本地的分支并不会自动与远程仓库同步——你必须显式地推送想要分享的分支。 这样，你就可以把不愿意分享的内容放到私人分支上，而将需要和别人协作的内容推送到公开分支。\n\n如果希望和别人一起在名为 serverfix 的分支上工作，你可以像推送第一个分支那样推送它。 运行 git push <remote> <branch>:\n\n$ git push origin serverfix\nCounting objects: 24, done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (15/15), done.\nWriting objects: 100% (24/24), 1.91 KiB | 0 bytes/s, done.\nTotal 24 (delta 2), reused 0 (delta 0)\nTo https://github.com/schacon/simplegit\n * [new branch]      serverfix -> serverfix\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n这里有些工作被简化了。 Git 自动将 serverfix 分支名字展开为 refs/heads/serverfix:refs/heads/serverfix， 那意味着，“推送本地的 serverfix 分支来更新远程仓库上的 serverfix 分支。” 我们将会详细学习 Git 内部原理 的 refs/heads/ 部分， 但是现在可以先把它放在儿。你也可以运行 git push origin serverfix:serverfix， 它会做同样的事——也就是说“推送本地的 serverfix 分支，将其作为远程仓库的 serverfix 分支” 可以通过这种格式来推送本地分支到一个命名不相同的远程分支。\n\n# 重命名远程仓库上的分支名\n\n如果并不想让远程仓库上的分支叫做 serverfix，可以运行 git push origin serverfix:awesomebranch 来将本地的 serverfix 分支推送到远程仓库上的 awesomebranch 分支。\n\nNOTE   如何避免每次输入密码如果你正在使用 HTTPS URL 来推送，GIT 服务器会询问用户名与密码。\n       默认情况下它会在终端中提示服务器是否允许你进行推送。如果不想在每一次推送时都输入用户名与密码，你可以设置一个\n       “CREDENTIAL CACHE”。 最简单的方式就是将其保存在内存中几分钟，可以简单地运行 GIT CONFIG\n       --GLOBAL CREDENTIAL.HELPER CACHE 来设置它。想要了解更多关于不同验证缓存的可用选项，查看\n       凭证存储。\n       \n\n下一次其他协作者从服务器上抓取数据时，他们会在本地生成一个远程分支 origin/serverfix，指向服务器的 serverfix 分支的引用：\n\n$ git fetch origin\nremote: Counting objects: 7, done.\nremote: Compressing objects: 100% (2/2), done.\nremote: Total 3 (delta 0), reused 3 (delta 0)\nUnpacking objects: 100% (3/3), done.\nFrom https://github.com/schacon/simplegit\n * [new branch]      serverfix    -> origin/serverfix\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n要特别注意的一点是当抓取到新的远程跟踪分支时，本地不会自动生成一份可编辑的副本（拷贝）。 换一句话说，这种情况下，不会有一个新的 serverfix 分支——只有一个不可以修改的 origin/serverfix 指针。\n\n可以运行 git merge origin/serverfix 将这些工作合并到当前所在的分支。 如果想要在自己的 serverfix 分支上工作，可以将其建立在远程跟踪分支之上：\n\n$ git checkout -b serverfix origin/serverfix\nBranch serverfix set up to track remote branch serverfix from origin.\nSwitched to a new branch 'serverfix'\n\n\n1\n2\n3\n\n\n这会给你一个用于工作的本地分支，并且起点位于 origin/serverfix。\n\n\n# 跟踪分支\n\n从一个远程跟踪分支检出一个本地分支会自动创建所谓的“跟踪分支”（它跟踪的分支叫做“上游分支”）。 跟踪分支是与远程分支有直接关系的本地分支。 如果在一个跟踪分支上输入 git pull，Git 能自动地识别去哪个服务器上抓取、合并到哪个分支。\n\n当克隆一个仓库时，它通常会自动地创建一个跟踪 origin/master 的 master 分支。 然而，如果你愿意的话可以设置其他的跟踪分支，或是一个在其他远程仓库上的跟踪分支，又或者不跟踪 master 分支。 最简单的实例就是像之前看到的那样，运行 git checkout -b <branch> <remote>/<branch>。 这是一个十分常用的操作所以 Git 提供了 --track 快捷方式：\n\n$ git checkout --track origin/serverfix\nBranch serverfix set up to track remote branch serverfix from origin.\nSwitched to a new branch 'serverfix'\n\n\n1\n2\n3\n\n\n由于这个操作太常用了，该捷径本身还有一个捷径。 如果你尝试检出的分支 (a) 不存在且 (b) 刚好只有一个名字与之匹配的远程分支，那么 Git 就会为你创建一个跟踪分支：\n\n$ git checkout serverfix\nBranch serverfix set up to track remote branch serverfix from origin.\nSwitched to a new branch 'serverfix'\n\n\n1\n2\n3\n\n\n如果想要将本地分支与远程分支设置为不同的名字，你可以轻松地使用上一个命令增加一个不同名字的本地分支：\n\n$ git checkout -b sf origin/serverfix\nBranch sf set up to track remote branch serverfix from origin.\nSwitched to a new branch 'sf'\n\n\n1\n2\n3\n\n\n现在，本地分支 sf 会自动从 origin/serverfix 拉取。\n\n设置已有的本地分支跟踪一个刚刚拉取下来的远程分支，或者想要修改正在跟踪的上游分支， 你可以在任意时间使用 -u 或 --set-upstream-to 选项运行 git branch 来显式地设置。\n\n$ git branch -u origin/serverfix\nBranch serverfix set up to track remote branch serverfix from origin.\n\n\n1\n2\n\n\nNOTE   上游快捷方式当设置好跟踪分支后，可以通过简写 @{UPSTREAM} 或 @{U} 来引用它的上游分支。 所以在\n       MASTER 分支时并且它正在跟踪 ORIGIN/MASTER 时，如果愿意的话可以使用 GIT MERGE @{U}\n       来取代 GIT MERGE ORIGIN/MASTER。\n       \n\n\n# 查看跟踪分支\n\n如果想要查看设置的所有跟踪分支，可以使用 git branch 的 -vv 选项。 这会将所有的本地分支列出来并且包含更多的信息，如每一个分支正在跟踪哪个远程分支与本地分支是否是领先、落后或是都有。\n\n$ git branch -vv\n  iss53     7e424c3 [origin/iss53: ahead 2] forgot the brackets\n  master    1ae2a45 [origin/master] deploying index fix\n* serverfix f8674d9 [teamone/server-fix-good: ahead 3, behind 1] this should do it\n  testing   5ea463a trying something new\n\n\n1\n2\n3\n4\n5\n\n\n这里可以看到 iss53 分支正在跟踪 origin/iss53 并且 “ahead” 是 2，意味着本地有两个提交还没有推送到服务器上。 也能看到 master 分支正在跟踪 origin/master 分支并且是最新的。 接下来可以看到 serverfix 分支正在跟踪 teamone 服务器上的 server-fix-good 分支并且领先 3 落后 1， 意味着服务器上有一次提交还没有合并入同时本地有三次提交还没有推送。 最后看到 testing 分支并没有跟踪任何远程分支。\n\n需要重点注意的一点是这些数字的值来自于你从每个服务器上最后一次抓取的数据。 这个命令并没有连接服务器，它只会告诉你关于本地缓存的服务器数据。 如果想要统计最新的领先与落后数字，需要在运行此命令前抓取所有的远程仓库。 可以像这样做：\n\n$ git fetch --all; git branch -vv\n\n\n1\n\n\n\n# 拉取\n\n当 git fetch 命令从服务器上抓取本地没有的数据时，它并不会修改工作目录中的内容。 它只会获取数据然后让你自己合并。 然而，有一个命令叫作 git pull 在大多数情况下它的含义是一个 git fetch 紧接着一个 git merge 命令。 如果有一个像之前章节中演示的设置好的跟踪分支，不管它是显式地设置还是通过 clone 或 checkout 命令为你创建的，git pull 都会查找当前分支所跟踪的服务器与分支， 从服务器上抓取数据然后尝试合并入那个远程分支。\n\n由于 git pull 的魔法经常令人困惑所以通常单独显式地使用 fetch 与 merge 命令会更好一些。\n\n\n# 删除远程分支\n\n假设你已经通过远程分支做完所有的工作了——也就是说你和你的协作者已经完成了一个特性， 并且将其合并到了远程仓库的 master 分支（或任何其他稳定代码分支）。 可以运行带有 --delete 选项的 git push 命令来删除一个远程分支。 如果想要从服务器上删除 serverfix 分支，运行下面的命令：\n\n$ git push origin --delete serverfix\nTo https://github.com/schacon/simplegit\n - [deleted]         serverfix\n\n\n1\n2\n3\n\n\n基本上这个命令做的只是从服务器上移除这个指针。 Git 服务器通常会保留数据一段时间直到垃圾回收运行，所以如果不小心删除掉了，通常是很容易恢复的。",normalizedContent:"# git分支-远程分支\n\n远程引用是对远程仓库的引用（指针），包括分支、标签等等。\n\n> 远程分支本质上也是一个指针，指向远程地址\n\n\n# 查看远程引用列表与信息\n\ngit ls-remote <remote> # 远程引用的完整列表\ngit remote show <remote> # 远程分支的更多信息\n\n\n1\n2\n\n\n上面两行命令比较少用，更常见的做法是利用远程跟踪分支。\n\n\n# 远程跟踪分支\n\n远程跟踪分支是远程分支状态的引用。它们是你无法移动的本地引用。一旦你进行了网络通信， git 就会为你移动它们以精确反映远程仓库的状态。请将它们看做书签， 这样可以提醒你该分支在远程仓库中的位置就是你最后一次连接到它们的位置。\n\n它们以 <remote>/<branch> 的形式命名。 例如，如果你想要查看最后一次与远程仓库 origin 通信时 master 分支的状态，你可以查看 origin/master 分支。 你与同事合作解决一个问题并且他们推送了一个 iss53 分支，你可能有自己的本地 iss53 分支， 然而在服务器上的分支会以 origin/iss53 来表示。\n\n这可能有一点儿难以理解，让我们来看一个例子。 假设你的网络里有一个在 git.ourcompany.com 的 git 服务器。 如果你从这里克隆，git 的 clone 命令会为你自动将其命名为 origin，拉取它的所有数据， 创建一个指向它的 master 分支的指针，并且在本地将其命名为 origin/master。 git 也会给你一个与 origin 的 master 分支在指向同一个地方的本地 master 分支，这样你就有工作的基础。\n\n笔记：从远程克隆下来的仓库有一个叫origin/master的远程跟踪分支 和 一个本地的master分支\n\n> 笔记：“origin” 并无特殊含义远程仓库名字 “origin” 与分支名字 “master” 一样，在 git 中并没有任何特别的含义一样。 同时 “master” 是当你运行 git init 时默认的起始分支名字，原因仅仅是它的广泛使用， “origin” 是当你运行 git clone 时默认的远程仓库名字。 如果你运行 git clone -o booyah，那么你默认的远程分支名字将会是 booyah/master。\n\n\n\n图1. 克隆之后的服务器与本地仓库 ▲\n\n如果你在本地的 master 分支做了一些工作，在同一段时间内有其他人推送提交到 git.ourcompany.com 并且更新了它的 master 分支，这就是说你们的提交历史已走向不同的方向。 即便这样，只要你保持不与 origin 服务器连接（并拉取数据），你的 origin/master 指针就不会移动。\n\n\n\n图2. 本地与远程的工作可以分叉 ▲\n\n如果要与给定的远程仓库同步数据，运行 git fetch <remote> 命令（在本例中为 git fetch origin）。 这个命令查找 “origin” 是哪一个服务器（在本例中，它是 git.ourcompany.com）， 从中抓取本地没有的数据，并且更新本地数据库，移动 origin/master 指针到更新之后的位置。\n\n\n\n图3. git fetch 更新你的远程跟踪分支 ▲\n\n笔记: 本地的 master 分支 可能 和 远程跟踪分支 origin/master 分叉\n\n为了演示有多个远程仓库与远程分支的情况，我们假定你有另一个内部 git 服务器，仅服务于你的某个敏捷开发团队。 这个服务器位于 git.team1.ourcompany.com。 你可以运行 git remote add 命令添加一个新的远程仓库引用到当前的项目，这个命令我们会在 git 基础 中详细说明。 将这个远程仓库命名为 teamone，将其作为完整 url 的缩写。远程仓库名本质上是远程url的缩写\n\n\n\n图4. 添加另一个远程仓库 ▲\n\n现在，可以运行 git fetch teamone 来抓取远程仓库 teamone 有而本地没有的数据。 因为那台服务器上现有的数据是 origin 服务器上的一个子集， 所以 git 并不会抓取数据而是会设置远程跟踪分支 teamone/master 指向 teamone 的 master 分支。\n\n\n\n图5. 远程跟踪分支 teamone/master ▲\n\n\n# 推送\n\n当你想要公开分享一个分支时，需要将其推送到有写入权限的远程仓库上。 本地的分支并不会自动与远程仓库同步——你必须显式地推送想要分享的分支。 这样，你就可以把不愿意分享的内容放到私人分支上，而将需要和别人协作的内容推送到公开分支。\n\n如果希望和别人一起在名为 serverfix 的分支上工作，你可以像推送第一个分支那样推送它。 运行 git push <remote> <branch>:\n\n$ git push origin serverfix\ncounting objects: 24, done.\ndelta compression using up to 8 threads.\ncompressing objects: 100% (15/15), done.\nwriting objects: 100% (24/24), 1.91 kib | 0 bytes/s, done.\ntotal 24 (delta 2), reused 0 (delta 0)\nto https://github.com/schacon/simplegit\n * [new branch]      serverfix -> serverfix\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n这里有些工作被简化了。 git 自动将 serverfix 分支名字展开为 refs/heads/serverfix:refs/heads/serverfix， 那意味着，“推送本地的 serverfix 分支来更新远程仓库上的 serverfix 分支。” 我们将会详细学习 git 内部原理 的 refs/heads/ 部分， 但是现在可以先把它放在儿。你也可以运行 git push origin serverfix:serverfix， 它会做同样的事——也就是说“推送本地的 serverfix 分支，将其作为远程仓库的 serverfix 分支” 可以通过这种格式来推送本地分支到一个命名不相同的远程分支。\n\n# 重命名远程仓库上的分支名\n\n如果并不想让远程仓库上的分支叫做 serverfix，可以运行 git push origin serverfix:awesomebranch 来将本地的 serverfix 分支推送到远程仓库上的 awesomebranch 分支。\n\nnote   如何避免每次输入密码如果你正在使用 https url 来推送，git 服务器会询问用户名与密码。\n       默认情况下它会在终端中提示服务器是否允许你进行推送。如果不想在每一次推送时都输入用户名与密码，你可以设置一个\n       “credential cache”。 最简单的方式就是将其保存在内存中几分钟，可以简单地运行 git config\n       --global credential.helper cache 来设置它。想要了解更多关于不同验证缓存的可用选项，查看\n       凭证存储。\n       \n\n下一次其他协作者从服务器上抓取数据时，他们会在本地生成一个远程分支 origin/serverfix，指向服务器的 serverfix 分支的引用：\n\n$ git fetch origin\nremote: counting objects: 7, done.\nremote: compressing objects: 100% (2/2), done.\nremote: total 3 (delta 0), reused 3 (delta 0)\nunpacking objects: 100% (3/3), done.\nfrom https://github.com/schacon/simplegit\n * [new branch]      serverfix    -> origin/serverfix\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n要特别注意的一点是当抓取到新的远程跟踪分支时，本地不会自动生成一份可编辑的副本（拷贝）。 换一句话说，这种情况下，不会有一个新的 serverfix 分支——只有一个不可以修改的 origin/serverfix 指针。\n\n可以运行 git merge origin/serverfix 将这些工作合并到当前所在的分支。 如果想要在自己的 serverfix 分支上工作，可以将其建立在远程跟踪分支之上：\n\n$ git checkout -b serverfix origin/serverfix\nbranch serverfix set up to track remote branch serverfix from origin.\nswitched to a new branch 'serverfix'\n\n\n1\n2\n3\n\n\n这会给你一个用于工作的本地分支，并且起点位于 origin/serverfix。\n\n\n# 跟踪分支\n\n从一个远程跟踪分支检出一个本地分支会自动创建所谓的“跟踪分支”（它跟踪的分支叫做“上游分支”）。 跟踪分支是与远程分支有直接关系的本地分支。 如果在一个跟踪分支上输入 git pull，git 能自动地识别去哪个服务器上抓取、合并到哪个分支。\n\n当克隆一个仓库时，它通常会自动地创建一个跟踪 origin/master 的 master 分支。 然而，如果你愿意的话可以设置其他的跟踪分支，或是一个在其他远程仓库上的跟踪分支，又或者不跟踪 master 分支。 最简单的实例就是像之前看到的那样，运行 git checkout -b <branch> <remote>/<branch>。 这是一个十分常用的操作所以 git 提供了 --track 快捷方式：\n\n$ git checkout --track origin/serverfix\nbranch serverfix set up to track remote branch serverfix from origin.\nswitched to a new branch 'serverfix'\n\n\n1\n2\n3\n\n\n由于这个操作太常用了，该捷径本身还有一个捷径。 如果你尝试检出的分支 (a) 不存在且 (b) 刚好只有一个名字与之匹配的远程分支，那么 git 就会为你创建一个跟踪分支：\n\n$ git checkout serverfix\nbranch serverfix set up to track remote branch serverfix from origin.\nswitched to a new branch 'serverfix'\n\n\n1\n2\n3\n\n\n如果想要将本地分支与远程分支设置为不同的名字，你可以轻松地使用上一个命令增加一个不同名字的本地分支：\n\n$ git checkout -b sf origin/serverfix\nbranch sf set up to track remote branch serverfix from origin.\nswitched to a new branch 'sf'\n\n\n1\n2\n3\n\n\n现在，本地分支 sf 会自动从 origin/serverfix 拉取。\n\n设置已有的本地分支跟踪一个刚刚拉取下来的远程分支，或者想要修改正在跟踪的上游分支， 你可以在任意时间使用 -u 或 --set-upstream-to 选项运行 git branch 来显式地设置。\n\n$ git branch -u origin/serverfix\nbranch serverfix set up to track remote branch serverfix from origin.\n\n\n1\n2\n\n\nnote   上游快捷方式当设置好跟踪分支后，可以通过简写 @{upstream} 或 @{u} 来引用它的上游分支。 所以在\n       master 分支时并且它正在跟踪 origin/master 时，如果愿意的话可以使用 git merge @{u}\n       来取代 git merge origin/master。\n       \n\n\n# 查看跟踪分支\n\n如果想要查看设置的所有跟踪分支，可以使用 git branch 的 -vv 选项。 这会将所有的本地分支列出来并且包含更多的信息，如每一个分支正在跟踪哪个远程分支与本地分支是否是领先、落后或是都有。\n\n$ git branch -vv\n  iss53     7e424c3 [origin/iss53: ahead 2] forgot the brackets\n  master    1ae2a45 [origin/master] deploying index fix\n* serverfix f8674d9 [teamone/server-fix-good: ahead 3, behind 1] this should do it\n  testing   5ea463a trying something new\n\n\n1\n2\n3\n4\n5\n\n\n这里可以看到 iss53 分支正在跟踪 origin/iss53 并且 “ahead” 是 2，意味着本地有两个提交还没有推送到服务器上。 也能看到 master 分支正在跟踪 origin/master 分支并且是最新的。 接下来可以看到 serverfix 分支正在跟踪 teamone 服务器上的 server-fix-good 分支并且领先 3 落后 1， 意味着服务器上有一次提交还没有合并入同时本地有三次提交还没有推送。 最后看到 testing 分支并没有跟踪任何远程分支。\n\n需要重点注意的一点是这些数字的值来自于你从每个服务器上最后一次抓取的数据。 这个命令并没有连接服务器，它只会告诉你关于本地缓存的服务器数据。 如果想要统计最新的领先与落后数字，需要在运行此命令前抓取所有的远程仓库。 可以像这样做：\n\n$ git fetch --all; git branch -vv\n\n\n1\n\n\n\n# 拉取\n\n当 git fetch 命令从服务器上抓取本地没有的数据时，它并不会修改工作目录中的内容。 它只会获取数据然后让你自己合并。 然而，有一个命令叫作 git pull 在大多数情况下它的含义是一个 git fetch 紧接着一个 git merge 命令。 如果有一个像之前章节中演示的设置好的跟踪分支，不管它是显式地设置还是通过 clone 或 checkout 命令为你创建的，git pull 都会查找当前分支所跟踪的服务器与分支， 从服务器上抓取数据然后尝试合并入那个远程分支。\n\n由于 git pull 的魔法经常令人困惑所以通常单独显式地使用 fetch 与 merge 命令会更好一些。\n\n\n# 删除远程分支\n\n假设你已经通过远程分支做完所有的工作了——也就是说你和你的协作者已经完成了一个特性， 并且将其合并到了远程仓库的 master 分支（或任何其他稳定代码分支）。 可以运行带有 --delete 选项的 git push 命令来删除一个远程分支。 如果想要从服务器上删除 serverfix 分支，运行下面的命令：\n\n$ git push origin --delete serverfix\nto https://github.com/schacon/simplegit\n - [deleted]         serverfix\n\n\n1\n2\n3\n\n\n基本上这个命令做的只是从服务器上移除这个指针。 git 服务器通常会保留数据一段时间直到垃圾回收运行，所以如果不小心删除掉了，通常是很容易恢复的。",charsets:{cjk:!0},lastUpdated:"2021/03/25, 20:24:44",lastUpdatedTimestamp:1616675084e3},{title:"Git工具-查看修订版本",frontmatter:{title:"Git工具-查看修订版本",date:"2020-11-18T17:43:57.000Z",permalink:"/pages/c984d1/",categories:["《Git》学习笔记"],tags:["Git"]},regularPath:"/%E3%80%8AGit%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/80.Git%E5%B7%A5%E5%85%B7-%E6%9F%A5%E7%9C%8B%E4%BF%AE%E8%AE%A2%E7%89%88%E6%9C%AC.html",relativePath:"《Git》学习笔记/20.文档笔记/80.Git工具-查看修订版本.md",key:"v-2a7a89bf",path:"/pages/c984d1/",headers:[{level:2,title:"单个修订版本",slug:"单个修订版本",normalizedTitle:"单个修订版本",charIndex:91},{level:2,title:"简短的 SHA-1",slug:"简短的-sha-1",normalizedTitle:"简短的 sha-1",charIndex:181},{level:3,title:"查看给定SHA-1值的提交",slug:"查看给定sha-1值的提交",normalizedTitle:"查看给定sha-1值的提交",charIndex:956},{level:2,title:"分支引用",slug:"分支引用",normalizedTitle:"分支引用",charIndex:2177},{level:3,title:"查看最后一次提交",slug:"查看最后一次提交",normalizedTitle:"查看最后一次提交",charIndex:2252},{level:2,title:"引用日志",slug:"引用日志",normalizedTitle:"引用日志",charIndex:2696},{level:3,title:"HEAD的指向历史",slug:"head的指向历史",normalizedTitle:"head的指向历史",charIndex:2705},{level:2,title:"祖先引用",slug:"祖先引用",normalizedTitle:"祖先引用",charIndex:4613},{level:2,title:"提交区间",slug:"提交区间",normalizedTitle:"提交区间",charIndex:6634},{level:3,title:"双点",slug:"双点",normalizedTitle:"双点",charIndex:6735},{level:3,title:"多点",slug:"多点",normalizedTitle:"多点",charIndex:7606},{level:3,title:"三点",slug:"三点",normalizedTitle:"三点",charIndex:8032}],headersStr:"单个修订版本 简短的 SHA-1 查看给定SHA-1值的提交 分支引用 查看最后一次提交 引用日志 HEAD的指向历史 祖先引用 提交区间 双点 多点 三点",content:"# Git工具-查看修订版本\n\nGit 能够以多种方式来指定单个提交、一组提交、或者一定范围内的提交。 了解它们并不是必需的，但是了解一下总没坏处。\n\n修订版本指的是：提交\n\n\n# 单个修订版本\n\n你可以通过任意一个提交的 40 个字符的完整 SHA-1 散列值来指定它， 不过还有很多更人性化的方式来做同样的事情。本节将会介绍获取单个提交的多种方法。\n\n\n# 简短的 SHA-1\n\nGit 十分智能，你只需要提供 SHA-1 的前几个字符就可以获得对应的那次提交， 当然你提供的 SHA-1 字符数量不得少于 4 个，并且没有歧义——也就是说， 当前对象数据库中没有其它对象以这段 SHA-1 开头。\n\n例如，要查看你知道其中添加了某个功能的提交，首先运行 git log 命令来定位该提交：\n\n$ git log\ncommit 734713bc047d87bf7eac9674765ae793478c50d3\nAuthor: Scott Chacon <schacon@gmail.com>\nDate:   Fri Jan 2 18:32:33 2009 -0800\n\n    fixed refs handling, added gc auto, updated tests\n\ncommit d921970aadf03b3cf0e71becdaab3147ba71cdef\nMerge: 1c002dd... 35cfb2b...\nAuthor: Scott Chacon <schacon@gmail.com>\nDate:   Thu Dec 11 15:08:43 2008 -0800\n\n    Merge commit 'phedders/rdocs'\n\ncommit 1c002dd4b536e7479fe34593e72e6c6c1819e53b\nAuthor: Scott Chacon <schacon@gmail.com>\nDate:   Thu Dec 11 14:58:32 2008 -0800\n\n    added some blame and merge stuff\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n# 查看给定SHA-1值的提交\n\n在本例中，假设你想要的提交其 SHA-1 以 1c002dd.... 开头， 那么你可以用如下几种 git show 的变体来检视该提交（假设简短的版本没有歧义）：\n\n$ git show 1c002dd4b536e7479fe34593e72e6c6c1819e53b\n$ git show 1c002dd4b536e7479f\n$ git show 1c002d\n\n\n1\n2\n3\n\n\nGit 可以为 SHA-1 值生成出简短且唯一的缩写。 如果你在 git log 后加上 --abbrev-commit 参数，输出结果里就会显示简短且唯一的值； 默认使用七个字符，不过有时为了避免 SHA-1 的歧义，会增加字符数：\n\n$ git log --abbrev-commit --pretty=oneline\nca82a6d changed the version number\n085bb3b removed unnecessary test code\na11bef0 first commit\n\n\n1\n2\n3\n4\n\n\n通常 8 到 10 个字符就已经足够在一个项目中避免 SHA-1 的歧义。 例如，到 2019 年 2 月为止，Linux 内核这个相当大的 Git 项目， 其对象数据库中有超过 875,000 个提交，包含七百万个对象，也只需要前 12 个字符就能保证唯一性。\n\nNOTE   关于 SHA-1 的简短说明许多人觉得他们的仓库里有可能出现两个不同的对象其 SHA-1 值相同。\n       然后呢？如果你真的向仓库里提交了一个对象，它跟之前的某个 不同 对象的 SHA-1 值相同， GIT\n       会发现该对象的散列值已经存在于仓库里了，于是就会认为该对象被写入，然后直接使用它。\n       如果之后你想检出那个对象时，你将得到先前那个对象的数据。但是这种情况发生的概率十分渺小。 SHA-1 摘要长度是 20\n       字节，也就是 160 位。 2^80 个随机哈希对象才有 50% 的概率出现一次冲突 （计算冲突机率的公式是 P =\n       (N(N-1)/2) * (1/2^160)) ）。 2^80 是 1.2 X\n       10^24，也就是一亿亿亿，这是地球上沙粒总数的 1200 倍。举例说一下怎样才能产生一次 SHA-1 冲突。\n       如果地球上 65 亿个人类都在编程，每人每秒都在产生等价于整个 LINUX 内核历史（650 万个 GIT\n       对象）的代码， 并将之提交到一个巨大的 GIT 仓库里面，这样持续两年的时间才会产生足够的对象， 使其拥有 50%\n       的概率产生一次 SHA-1 对象冲突， 这比你编程团队的成员同一个晚上在互不相干的意外中被狼袭击并杀死的机率还要小。\n       \n\n\n# 分支引用\n\n引用特定提交的一种直接方法是，若它是一个分支的顶端的提交， 那么可以在任何需要引用该提交的 Git 命令中直接使用该分支的名称。\n\n\n# 查看最后一次提交\n\n例如，你想要查看一个分支的最后一次提交的对象，假设 topic1 分支指向提交 ca82a6d... ， 那么以下的命令是等价的：\n\n$ git show ca82a6dff817ec66f44342007202690a93763949\n$ git show topic1  # topic1是分支名\n\n\n1\n2\n\n\n如果你想知道某个分支指向哪个特定的 SHA-1，或者想看任何一个例子中被简写的 SHA-1， 你可以使用一个叫做 rev-parse 的 Git 探测工具。 你可以在 Git 内部原理 中查看更多关于探测工具的信息。 简单来说，rev-parse 是为了底层操作而不是日常操作设计的。 不过，有时你想看 Git 现在到底处于什么状态时，它可能会很有用。 你可以在你的分支上执行 rev-parse\n\n$ git rev-parse topic1\nca82a6dff817ec66f44342007202690a93763949\n\n\n1\n2\n\n\n\n# 引用日志\n\n\n# HEAD的指向历史\n\n当你在工作时， Git 会在后台保存一个引用日志（reflog）， 引用日志记录了最近几个月你的 HEAD 和分支引用所指向的历史。\n\n你可以使用 git reflog 来查看引用日志\n\n$ git reflog\n734713b HEAD@{0}: commit: fixed refs handling, added gc auto, updated\nd921970 HEAD@{1}: merge phedders/rdocs: Merge made by the 'recursive' strategy.\n1c002dd HEAD@{2}: commit: added some blame and merge stuff\n1c36188 HEAD@{3}: rebase -i (squash): updating HEAD\n95df984 HEAD@{4}: commit: # This is a combination of two commits.\n1c36188 HEAD@{5}: rebase -i (squash): updating HEAD\n7e05da5 HEAD@{6}: rebase -i (pick): updating HEAD\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n每当你的 HEAD 所指向的位置发生了变化，Git 就会将这个信息存储到引用日志这个历史记录里。 你也可以通过 reflog 数据来获取之前的提交历史。 如果你想查看仓库中 HEAD 在五次前的所指向的提交，你可以使用 @{n} 来引用 reflog 中输出的提交记录。\n\n$ git show HEAD@{5}\n\n\n1\n\n\n你同样可以使用这个语法来查看某个分支在一定时间前的位置。 例如，查看你的 master 分支在昨天的时候指向了哪个提交，你可以输入\n\n$ git show master@{yesterday}\n\n\n1\n\n\n就会显示昨天 master 分支的顶端指向了哪个提交。 这个方法只对还在你引用日志里的数据有用，所以不能用来查好几个月之前的提交。\n\n可以运行 git log -g 来查看类似于 git log 输出格式的引用日志信息：\n\n$ git log -g master\ncommit 734713bc047d87bf7eac9674765ae793478c50d3\nReflog: master@{0} (Scott Chacon <schacon@gmail.com>)\nReflog message: commit: fixed refs handling, added gc auto, updated\nAuthor: Scott Chacon <schacon@gmail.com>\nDate:   Fri Jan 2 18:32:33 2009 -0800\n\n    fixed refs handling, added gc auto, updated tests\n\ncommit d921970aadf03b3cf0e71becdaab3147ba71cdef\nReflog: master@{1} (Scott Chacon <schacon@gmail.com>)\nReflog message: merge phedders/rdocs: Merge made by recursive.\nAuthor: Scott Chacon <schacon@gmail.com>\nDate:   Thu Dec 11 15:08:43 2008 -0800\n\n    Merge commit 'phedders/rdocs'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n值得注意的是，引用日志只存在于本地仓库，它只是一个记录你在 自己 的仓库里做过什么的日志。 其他人拷贝的仓库里的引用日志不会和你的相同，而你新克隆一个仓库的时候，引用日志是空的，因为你在仓库里还没有操作。 git show HEAD@{2.months.ago} 这条命令只有在你克隆了一个项目至少两个月时才会显示匹配的提交—— 如果你刚刚克隆了仓库，那么它将不会有任何结果返回。\n\nTIP   将引用日志想作 GIT 版的 SHELL 历史记录如果你有 UNIX 或者 LINUX 的背景，不妨将引用日志想作\n      GIT 版的 SHELL 历史记录， 重点在于仅与你和你的会话相关，而与他人无关。\n      \n\n\n# 祖先引用\n\n祖先引用是另一种指明一个提交的方式。 如果你在引用的尾部加上一个 ^（脱字符）， Git 会将其解析为该引用的上一个提交。 假设你的提交历史是：\n\n$ git log --pretty=format:'%h %s' --graph\n* 734713b fixed refs handling, added gc auto, updated tests\n*   d921970 Merge commit 'phedders/rdocs'\n|\\\n| * 35cfb2b Some rdoc changes\n* | 1c002dd added some blame and merge stuff\n|/\n* 1c36188 ignore *.gem\n* 9b29157 add open3_detach to gemspec file list\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n你可以使用 HEAD^ 来查看上一个提交，也就是 “HEAD 的父提交”：\n\n$ git show HEAD^\ncommit d921970aadf03b3cf0e71becdaab3147ba71cdef\nMerge: 1c002dd... 35cfb2b...\nAuthor: Scott Chacon <schacon@gmail.com>\nDate:   Thu Dec 11 15:08:43 2008 -0800\n\n    Merge commit 'phedders/rdocs'\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nNOTE   在 WINDOWS 上转义脱字符在 WINDOWS 的 CMD.EXE 中，^ 是一个特殊字符，因此需要区别对待。\n       你可以双写它或者将提交引用放在引号中：$ GIT SHOW HEAD^ # 在 WINDOWS 上无法工作 $ GIT\n       SHOW HEAD^^ # 可以 $ GIT SHOW \"HEAD^\" # 可以\n       \n\n你也可以在 ^ 后面添加一个数字来指明想要 哪一个 父提交——例如 d921970^2 代表 “d921970 的第二父提交” 这个语法只适用于合并的提交，因为合并提交会有多个父提交。 合并提交的第一父提交是你合并时所在分支（通常为 master），而第二父提交是你所合并的分支（例如 topic）：\n\n$ git show d921970^\ncommit 1c002dd4b536e7479fe34593e72e6c6c1819e53b\nAuthor: Scott Chacon <schacon@gmail.com>\nDate:   Thu Dec 11 14:58:32 2008 -0800\n\n    added some blame and merge stuff\n\n$ git show d921970^2\ncommit 35cfb2b795a55793d7cc56a6cc2060b4bb732548\nAuthor: Paul Hedderly <paul+git@mjr.org>\nDate:   Wed Dec 10 22:22:03 2008 +0000\n\n    Some rdoc changes\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n另一种指明祖先提交的方法是 ~（波浪号）。 同样是指向第一父提交，因此 HEAD~ 和 HEAD^ 是等价的。 而区别在于你在后面加数字的时候。 HEAD~2 代表“第一父提交的第一父提交”，也就是“祖父提交”——Git 会根据你指定的次数获取对应的第一父提交。 例如，在之前的列出的提交历史中，HEAD~3 就是\n\n$ git show HEAD~3\ncommit 1c3618887afb5fbcbea25b7c013f4e2114448b8d\nAuthor: Tom Preston-Werner <tom@mojombo.com>\nDate:   Fri Nov 7 13:47:59 2008 -0500\n\n    ignore *.gem\n\n\n1\n2\n3\n4\n5\n6\n\n\n也可以写成 HEAD~~~，也是第一父提交的第一父提交的第一父提交：\n\n$ git show HEAD~~~\ncommit 1c3618887afb5fbcbea25b7c013f4e2114448b8d\nAuthor: Tom Preston-Werner <tom@mojombo.com>\nDate:   Fri Nov 7 13:47:59 2008 -0500\n\n    ignore *.gem\n\n\n1\n2\n3\n4\n5\n6\n\n\n你也可以组合使用这两个语法——你可以通过 HEAD~3^2 来取得之前引用的第二父提交（假设它是一个合并提交）。\n\n\n# 提交区间\n\n你已经学会如何单次的提交，现在来看看如何指明一定区间的提交。 当你有很多分支时，这对管理你的分支时十分有用， 你可以用提交区间来解决“这个分支还有哪些提交尚未合并到主分支？”的问题\n\n\n# 双点\n\n最常用的指明提交区间语法是双点。 这种语法可以让 Git 选出在一个分支中而不在另一个分支中的提交。 例如，你有如下的提交历史 Example history for range selection.\n\n\n\nFigure 137. Example history for range selection.\n\n你想要查看 experiment 分支中还有哪些提交尚未被合并入 master 分支。 你可以使用 master..experiment 来让 Git 显示这些提交。也就是“在 experiment 分支中而不在 master 分支中的提交”。 为了使例子简单明了，我使用了示意图中提交对象的字母来代替真实日志的输出，所以会显示：\n\n$ git log master..experiment\nD\nC\n\n\n1\n2\n3\n\n\n反过来，如果你想查看在 master 分支中而不在 experiment 分支中的提交，你只要交换分支名即可。 experiment..master 会显示在 master 分支中而不在 experiment 分支中的提交：\n\n$ git log experiment..master\nF\nE\n\n\n1\n2\n3\n\n\n# 查看即将推送到远端的内容\n\n这可以让你保持 experiment 分支跟随最新的进度以及查看你即将合并的内容。 另一个常用的场景是查看你即将推送到远端的内容：\n\n$ git log origin/master..HEAD\n\n\n1\n\n\n这个命令会输出在你当前分支中而不在远程 origin 中的提交。 如果你执行 git push 并且你的当前分支正在跟踪 origin/master，由 git log origin/master..HEAD 所输出的提交就是会被传输到远端服务器的提交。如果你留空了其中的一边， Git 会默认为 HEAD。 例如， git log origin/master.. 将会输出与之前例子相同的结果 —— Git 使用 HEAD 来代替留空的一边。\n\n\n# 多点\n\n双点语法很好用，但有时候你可能需要两个以上的分支才能确定你所需要的修订， 比如查看哪些提交是被包含在某些分支中的一个，但是不在你当前的分支上。 Git 允许你在任意引用前加上 ^ 字符或者 --not 来指明你不希望提交被包含其中的分支。 因此下列三个命令是等价的：\n\n$ git log refA..refB\n$ git log ^refA refB\n$ git log refB --not refA\n\n\n1\n2\n3\n\n\n这个语法很好用，因为你可以在查询中指定超过两个的引用，这是双点语法无法实现的。 比如，你想查看所有被 refA 或 refB 包含的但是不被 refC 包含的提交，你可以使用以下任意一个命令：\n\n$ git log refA refB ^refC\n$ git log refA refB --not refC\n\n\n1\n2\n\n\n这就构成了一个十分强大的修订查询系统，你可以通过它来查看你的分支里包含了哪些东西。\n\n\n# 三点\n\n最后一种主要的区间选择语法是三点，这个语法可以选择出被两个引用 之一 包含但又不被两者同时包含的提交。 再看看之前双点例子中的提交历史。 如果你想看 master 或者 experiment 中包含的但不是两者共有的提交，你可以执行：\n\n$ git log master...experiment\nF\nE\nD\nC\n\n\n1\n2\n3\n4\n5\n\n\n这和通常 log 按日期排序的输出一样，仅仅给出了4个提交的信息。\n\n这种情形下，log 命令的一个常用参数是 --left-right，它会显示每个提交到底处于哪一侧的分支。 这会让输出数据更加清晰。\n\n$ git log --left-right master...experiment\n< F\n< E\n> D\n> C\n\n\n1\n2\n3\n4\n5\n\n\n有了这些工具，你就可以十分方便地查看你 Git 仓库中的提交。",normalizedContent:"# git工具-查看修订版本\n\ngit 能够以多种方式来指定单个提交、一组提交、或者一定范围内的提交。 了解它们并不是必需的，但是了解一下总没坏处。\n\n修订版本指的是：提交\n\n\n# 单个修订版本\n\n你可以通过任意一个提交的 40 个字符的完整 sha-1 散列值来指定它， 不过还有很多更人性化的方式来做同样的事情。本节将会介绍获取单个提交的多种方法。\n\n\n# 简短的 sha-1\n\ngit 十分智能，你只需要提供 sha-1 的前几个字符就可以获得对应的那次提交， 当然你提供的 sha-1 字符数量不得少于 4 个，并且没有歧义——也就是说， 当前对象数据库中没有其它对象以这段 sha-1 开头。\n\n例如，要查看你知道其中添加了某个功能的提交，首先运行 git log 命令来定位该提交：\n\n$ git log\ncommit 734713bc047d87bf7eac9674765ae793478c50d3\nauthor: scott chacon <schacon@gmail.com>\ndate:   fri jan 2 18:32:33 2009 -0800\n\n    fixed refs handling, added gc auto, updated tests\n\ncommit d921970aadf03b3cf0e71becdaab3147ba71cdef\nmerge: 1c002dd... 35cfb2b...\nauthor: scott chacon <schacon@gmail.com>\ndate:   thu dec 11 15:08:43 2008 -0800\n\n    merge commit 'phedders/rdocs'\n\ncommit 1c002dd4b536e7479fe34593e72e6c6c1819e53b\nauthor: scott chacon <schacon@gmail.com>\ndate:   thu dec 11 14:58:32 2008 -0800\n\n    added some blame and merge stuff\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n# 查看给定sha-1值的提交\n\n在本例中，假设你想要的提交其 sha-1 以 1c002dd.... 开头， 那么你可以用如下几种 git show 的变体来检视该提交（假设简短的版本没有歧义）：\n\n$ git show 1c002dd4b536e7479fe34593e72e6c6c1819e53b\n$ git show 1c002dd4b536e7479f\n$ git show 1c002d\n\n\n1\n2\n3\n\n\ngit 可以为 sha-1 值生成出简短且唯一的缩写。 如果你在 git log 后加上 --abbrev-commit 参数，输出结果里就会显示简短且唯一的值； 默认使用七个字符，不过有时为了避免 sha-1 的歧义，会增加字符数：\n\n$ git log --abbrev-commit --pretty=oneline\nca82a6d changed the version number\n085bb3b removed unnecessary test code\na11bef0 first commit\n\n\n1\n2\n3\n4\n\n\n通常 8 到 10 个字符就已经足够在一个项目中避免 sha-1 的歧义。 例如，到 2019 年 2 月为止，linux 内核这个相当大的 git 项目， 其对象数据库中有超过 875,000 个提交，包含七百万个对象，也只需要前 12 个字符就能保证唯一性。\n\nnote   关于 sha-1 的简短说明许多人觉得他们的仓库里有可能出现两个不同的对象其 sha-1 值相同。\n       然后呢？如果你真的向仓库里提交了一个对象，它跟之前的某个 不同 对象的 sha-1 值相同， git\n       会发现该对象的散列值已经存在于仓库里了，于是就会认为该对象被写入，然后直接使用它。\n       如果之后你想检出那个对象时，你将得到先前那个对象的数据。但是这种情况发生的概率十分渺小。 sha-1 摘要长度是 20\n       字节，也就是 160 位。 2^80 个随机哈希对象才有 50% 的概率出现一次冲突 （计算冲突机率的公式是 p =\n       (n(n-1)/2) * (1/2^160)) ）。 2^80 是 1.2 x\n       10^24，也就是一亿亿亿，这是地球上沙粒总数的 1200 倍。举例说一下怎样才能产生一次 sha-1 冲突。\n       如果地球上 65 亿个人类都在编程，每人每秒都在产生等价于整个 linux 内核历史（650 万个 git\n       对象）的代码， 并将之提交到一个巨大的 git 仓库里面，这样持续两年的时间才会产生足够的对象， 使其拥有 50%\n       的概率产生一次 sha-1 对象冲突， 这比你编程团队的成员同一个晚上在互不相干的意外中被狼袭击并杀死的机率还要小。\n       \n\n\n# 分支引用\n\n引用特定提交的一种直接方法是，若它是一个分支的顶端的提交， 那么可以在任何需要引用该提交的 git 命令中直接使用该分支的名称。\n\n\n# 查看最后一次提交\n\n例如，你想要查看一个分支的最后一次提交的对象，假设 topic1 分支指向提交 ca82a6d... ， 那么以下的命令是等价的：\n\n$ git show ca82a6dff817ec66f44342007202690a93763949\n$ git show topic1  # topic1是分支名\n\n\n1\n2\n\n\n如果你想知道某个分支指向哪个特定的 sha-1，或者想看任何一个例子中被简写的 sha-1， 你可以使用一个叫做 rev-parse 的 git 探测工具。 你可以在 git 内部原理 中查看更多关于探测工具的信息。 简单来说，rev-parse 是为了底层操作而不是日常操作设计的。 不过，有时你想看 git 现在到底处于什么状态时，它可能会很有用。 你可以在你的分支上执行 rev-parse\n\n$ git rev-parse topic1\nca82a6dff817ec66f44342007202690a93763949\n\n\n1\n2\n\n\n\n# 引用日志\n\n\n# head的指向历史\n\n当你在工作时， git 会在后台保存一个引用日志（reflog）， 引用日志记录了最近几个月你的 head 和分支引用所指向的历史。\n\n你可以使用 git reflog 来查看引用日志\n\n$ git reflog\n734713b head@{0}: commit: fixed refs handling, added gc auto, updated\nd921970 head@{1}: merge phedders/rdocs: merge made by the 'recursive' strategy.\n1c002dd head@{2}: commit: added some blame and merge stuff\n1c36188 head@{3}: rebase -i (squash): updating head\n95df984 head@{4}: commit: # this is a combination of two commits.\n1c36188 head@{5}: rebase -i (squash): updating head\n7e05da5 head@{6}: rebase -i (pick): updating head\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n每当你的 head 所指向的位置发生了变化，git 就会将这个信息存储到引用日志这个历史记录里。 你也可以通过 reflog 数据来获取之前的提交历史。 如果你想查看仓库中 head 在五次前的所指向的提交，你可以使用 @{n} 来引用 reflog 中输出的提交记录。\n\n$ git show head@{5}\n\n\n1\n\n\n你同样可以使用这个语法来查看某个分支在一定时间前的位置。 例如，查看你的 master 分支在昨天的时候指向了哪个提交，你可以输入\n\n$ git show master@{yesterday}\n\n\n1\n\n\n就会显示昨天 master 分支的顶端指向了哪个提交。 这个方法只对还在你引用日志里的数据有用，所以不能用来查好几个月之前的提交。\n\n可以运行 git log -g 来查看类似于 git log 输出格式的引用日志信息：\n\n$ git log -g master\ncommit 734713bc047d87bf7eac9674765ae793478c50d3\nreflog: master@{0} (scott chacon <schacon@gmail.com>)\nreflog message: commit: fixed refs handling, added gc auto, updated\nauthor: scott chacon <schacon@gmail.com>\ndate:   fri jan 2 18:32:33 2009 -0800\n\n    fixed refs handling, added gc auto, updated tests\n\ncommit d921970aadf03b3cf0e71becdaab3147ba71cdef\nreflog: master@{1} (scott chacon <schacon@gmail.com>)\nreflog message: merge phedders/rdocs: merge made by recursive.\nauthor: scott chacon <schacon@gmail.com>\ndate:   thu dec 11 15:08:43 2008 -0800\n\n    merge commit 'phedders/rdocs'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n值得注意的是，引用日志只存在于本地仓库，它只是一个记录你在 自己 的仓库里做过什么的日志。 其他人拷贝的仓库里的引用日志不会和你的相同，而你新克隆一个仓库的时候，引用日志是空的，因为你在仓库里还没有操作。 git show head@{2.months.ago} 这条命令只有在你克隆了一个项目至少两个月时才会显示匹配的提交—— 如果你刚刚克隆了仓库，那么它将不会有任何结果返回。\n\ntip   将引用日志想作 git 版的 shell 历史记录如果你有 unix 或者 linux 的背景，不妨将引用日志想作\n      git 版的 shell 历史记录， 重点在于仅与你和你的会话相关，而与他人无关。\n      \n\n\n# 祖先引用\n\n祖先引用是另一种指明一个提交的方式。 如果你在引用的尾部加上一个 ^（脱字符）， git 会将其解析为该引用的上一个提交。 假设你的提交历史是：\n\n$ git log --pretty=format:'%h %s' --graph\n* 734713b fixed refs handling, added gc auto, updated tests\n*   d921970 merge commit 'phedders/rdocs'\n|\\\n| * 35cfb2b some rdoc changes\n* | 1c002dd added some blame and merge stuff\n|/\n* 1c36188 ignore *.gem\n* 9b29157 add open3_detach to gemspec file list\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n你可以使用 head^ 来查看上一个提交，也就是 “head 的父提交”：\n\n$ git show head^\ncommit d921970aadf03b3cf0e71becdaab3147ba71cdef\nmerge: 1c002dd... 35cfb2b...\nauthor: scott chacon <schacon@gmail.com>\ndate:   thu dec 11 15:08:43 2008 -0800\n\n    merge commit 'phedders/rdocs'\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nnote   在 windows 上转义脱字符在 windows 的 cmd.exe 中，^ 是一个特殊字符，因此需要区别对待。\n       你可以双写它或者将提交引用放在引号中：$ git show head^ # 在 windows 上无法工作 $ git\n       show head^^ # 可以 $ git show \"head^\" # 可以\n       \n\n你也可以在 ^ 后面添加一个数字来指明想要 哪一个 父提交——例如 d921970^2 代表 “d921970 的第二父提交” 这个语法只适用于合并的提交，因为合并提交会有多个父提交。 合并提交的第一父提交是你合并时所在分支（通常为 master），而第二父提交是你所合并的分支（例如 topic）：\n\n$ git show d921970^\ncommit 1c002dd4b536e7479fe34593e72e6c6c1819e53b\nauthor: scott chacon <schacon@gmail.com>\ndate:   thu dec 11 14:58:32 2008 -0800\n\n    added some blame and merge stuff\n\n$ git show d921970^2\ncommit 35cfb2b795a55793d7cc56a6cc2060b4bb732548\nauthor: paul hedderly <paul+git@mjr.org>\ndate:   wed dec 10 22:22:03 2008 +0000\n\n    some rdoc changes\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n另一种指明祖先提交的方法是 ~（波浪号）。 同样是指向第一父提交，因此 head~ 和 head^ 是等价的。 而区别在于你在后面加数字的时候。 head~2 代表“第一父提交的第一父提交”，也就是“祖父提交”——git 会根据你指定的次数获取对应的第一父提交。 例如，在之前的列出的提交历史中，head~3 就是\n\n$ git show head~3\ncommit 1c3618887afb5fbcbea25b7c013f4e2114448b8d\nauthor: tom preston-werner <tom@mojombo.com>\ndate:   fri nov 7 13:47:59 2008 -0500\n\n    ignore *.gem\n\n\n1\n2\n3\n4\n5\n6\n\n\n也可以写成 head~~~，也是第一父提交的第一父提交的第一父提交：\n\n$ git show head~~~\ncommit 1c3618887afb5fbcbea25b7c013f4e2114448b8d\nauthor: tom preston-werner <tom@mojombo.com>\ndate:   fri nov 7 13:47:59 2008 -0500\n\n    ignore *.gem\n\n\n1\n2\n3\n4\n5\n6\n\n\n你也可以组合使用这两个语法——你可以通过 head~3^2 来取得之前引用的第二父提交（假设它是一个合并提交）。\n\n\n# 提交区间\n\n你已经学会如何单次的提交，现在来看看如何指明一定区间的提交。 当你有很多分支时，这对管理你的分支时十分有用， 你可以用提交区间来解决“这个分支还有哪些提交尚未合并到主分支？”的问题\n\n\n# 双点\n\n最常用的指明提交区间语法是双点。 这种语法可以让 git 选出在一个分支中而不在另一个分支中的提交。 例如，你有如下的提交历史 example history for range selection.\n\n\n\nfigure 137. example history for range selection.\n\n你想要查看 experiment 分支中还有哪些提交尚未被合并入 master 分支。 你可以使用 master..experiment 来让 git 显示这些提交。也就是“在 experiment 分支中而不在 master 分支中的提交”。 为了使例子简单明了，我使用了示意图中提交对象的字母来代替真实日志的输出，所以会显示：\n\n$ git log master..experiment\nd\nc\n\n\n1\n2\n3\n\n\n反过来，如果你想查看在 master 分支中而不在 experiment 分支中的提交，你只要交换分支名即可。 experiment..master 会显示在 master 分支中而不在 experiment 分支中的提交：\n\n$ git log experiment..master\nf\ne\n\n\n1\n2\n3\n\n\n# 查看即将推送到远端的内容\n\n这可以让你保持 experiment 分支跟随最新的进度以及查看你即将合并的内容。 另一个常用的场景是查看你即将推送到远端的内容：\n\n$ git log origin/master..head\n\n\n1\n\n\n这个命令会输出在你当前分支中而不在远程 origin 中的提交。 如果你执行 git push 并且你的当前分支正在跟踪 origin/master，由 git log origin/master..head 所输出的提交就是会被传输到远端服务器的提交。如果你留空了其中的一边， git 会默认为 head。 例如， git log origin/master.. 将会输出与之前例子相同的结果 —— git 使用 head 来代替留空的一边。\n\n\n# 多点\n\n双点语法很好用，但有时候你可能需要两个以上的分支才能确定你所需要的修订， 比如查看哪些提交是被包含在某些分支中的一个，但是不在你当前的分支上。 git 允许你在任意引用前加上 ^ 字符或者 --not 来指明你不希望提交被包含其中的分支。 因此下列三个命令是等价的：\n\n$ git log refa..refb\n$ git log ^refa refb\n$ git log refb --not refa\n\n\n1\n2\n3\n\n\n这个语法很好用，因为你可以在查询中指定超过两个的引用，这是双点语法无法实现的。 比如，你想查看所有被 refa 或 refb 包含的但是不被 refc 包含的提交，你可以使用以下任意一个命令：\n\n$ git log refa refb ^refc\n$ git log refa refb --not refc\n\n\n1\n2\n\n\n这就构成了一个十分强大的修订查询系统，你可以通过它来查看你的分支里包含了哪些东西。\n\n\n# 三点\n\n最后一种主要的区间选择语法是三点，这个语法可以选择出被两个引用 之一 包含但又不被两者同时包含的提交。 再看看之前双点例子中的提交历史。 如果你想看 master 或者 experiment 中包含的但不是两者共有的提交，你可以执行：\n\n$ git log master...experiment\nf\ne\nd\nc\n\n\n1\n2\n3\n4\n5\n\n\n这和通常 log 按日期排序的输出一样，仅仅给出了4个提交的信息。\n\n这种情形下，log 命令的一个常用参数是 --left-right，它会显示每个提交到底处于哪一侧的分支。 这会让输出数据更加清晰。\n\n$ git log --left-right master...experiment\n< f\n< e\n> d\n> c\n\n\n1\n2\n3\n4\n5\n\n\n有了这些工具，你就可以十分方便地查看你 git 仓库中的提交。",charsets:{cjk:!0},lastUpdated:"2021/03/25, 20:24:44",lastUpdatedTimestamp:1616675084e3},{title:"Git工具-交互式暂存",frontmatter:{title:"Git工具-交互式暂存",date:"2020-11-18T17:43:57.000Z",permalink:"/pages/76d859/",categories:["《Git》学习笔记"],tags:["Git"]},regularPath:"/%E3%80%8AGit%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/90.Git%E5%B7%A5%E5%85%B7-%E4%BA%A4%E4%BA%92%E5%BC%8F%E6%9A%82%E5%AD%98.html",relativePath:"《Git》学习笔记/20.文档笔记/90.Git工具-交互式暂存.md",key:"v-56c197ac",path:"/pages/76d859/",headers:[{level:2,title:"暂存与取消暂存文件",slug:"暂存与取消暂存文件",normalizedTitle:"暂存与取消暂存文件",charIndex:751},{level:2,title:"暂存补丁",slug:"暂存补丁",normalizedTitle:"暂存补丁",charIndex:3468}],headersStr:"暂存与取消暂存文件 暂存补丁",content:'# Git工具-交互式暂存\n\n本节中的几个交互式 Git 命令可以帮助你将文件的特定部分组合成提交。 当你在修改了大量文件后，希望这些改动能拆分为若干提交而不是混杂在一起成为一个提交时，这几个工具会非常有用。 通过这种方式，可以确保提交是逻辑上独立的变更集，同时也会使其他开发者在与你工作时很容易地审核。 如果运行 git add 时使用 -i 或者 --interactive 选项，Git 将会进入一个交互式终端模式，显示类似下面的东西：\n\n$ git add -i\n           staged     unstaged path\n  1:    unchanged        +0/-1 TODO\n  2:    unchanged        +1/-1 index.html\n  3:    unchanged        +5/-1 lib/simplegit.rb\n\n*** Commands ***\n  1: [s]tatus     2: [u]pdate      3: [r]evert     4: [a]dd untracked\n  5: [p]atch      6: [d]iff        7: [q]uit       8: [h]elp\nWhat now>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n可以看到这个命令以和平时非常不同的视图显示了暂存区——基本上与 git status 是相同的信息，但是更简明扼要一些。 它将暂存的修改列在左侧，未暂存的修改列在右侧。\n\n在这块区域后是“Commands”命令区域。 在这里你可以做一些工作，包括暂存文件、取消暂存文件、暂存文件的一部分、添加未被追踪的文件、显示暂存内容的区别。\n\n\n# 暂存与取消暂存文件\n\n如果在 What now> 提示符后键入 u 或 2（更新），它会问你想要暂存哪个文件：\n\nWhat now> u\n           staged     unstaged path\n  1:    unchanged        +0/-1 TODO\n  2:    unchanged        +1/-1 index.html\n  3:    unchanged        +5/-1 lib/simplegit.rb\nUpdate>>\n\n\n1\n2\n3\n4\n5\n6\n\n\n要暂存 TODO 和 index.html 文件，可以输入数字：\n\nUpdate>> 1,2\n           staged     unstaged path\n* 1:    unchanged        +0/-1 TODO\n* 2:    unchanged        +1/-1 index.html\n  3:    unchanged        +5/-1 lib/simplegit.rb\nUpdate>>\n\n\n1\n2\n3\n4\n5\n6\n\n\n每个文件前面的 * 意味着选中的文件将会被暂存。 如果在 Update>> 提示符后不输入任何东西并直接按回车，Git 将会暂存之前选择的文件：\n\nUpdate>>\nupdated 2 paths\n\n*** Commands ***\n  1: [s]tatus     2: [u]pdate      3: [r]evert     4: [a]dd untracked\n  5: [p]atch      6: [d]iff        7: [q]uit       8: [h]elp\nWhat now> s\n           staged     unstaged path\n  1:        +0/-1      nothing TODO\n  2:        +1/-1      nothing index.html\n  3:    unchanged        +5/-1 lib/simplegit.rb\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n现在可以看到 TODO 与 index.html 文件已经被暂存而 simplegit.rb 文件还未被暂存。 如果这时想要取消暂存 TODO 文件，使用 r 或 3（撤消）选项：\n\n*** Commands ***\n  1: [s]tatus     2: [u]pdate      3: [r]evert     4: [a]dd untracked\n  5: [p]atch      6: [d]iff        7: [q]uit       8: [h]elp\nWhat now> r\n           staged     unstaged path\n  1:        +0/-1      nothing TODO\n  2:        +1/-1      nothing index.html\n  3:    unchanged        +5/-1 lib/simplegit.rb\nRevert>> 1\n           staged     unstaged path\n* 1:        +0/-1      nothing TODO\n  2:        +1/-1      nothing index.html\n  3:    unchanged        +5/-1 lib/simplegit.rb\nRevert>> [enter]\nreverted one path\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n再次查看 Git 状态，可以看到已经取消暂存 TODO 文件：\n\n*** Commands ***\n  1: [s]tatus     2: [u]pdate      3: [r]evert     4: [a]dd untracked\n  5: [p]atch      6: [d]iff        7: [q]uit       8: [h]elp\nWhat now> s\n           staged     unstaged path\n  1:    unchanged        +0/-1 TODO\n  2:        +1/-1      nothing index.html\n  3:    unchanged        +5/-1 lib/simplegit.rb\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n如果想要查看已暂存内容的区别，可以使用 d 或 6（区别）命令。 它会显示暂存文件的一个列表，可以从中选择想要查看的暂存区别。 这跟你在命令行指定 git diff --cached 非常相似：\n\n*** Commands ***\n  1: [s]tatus     2: [u]pdate      3: [r]evert     4: [a]dd untracked\n  5: [p]atch      6: [d]iff        7: [q]uit       8: [h]elp\nWhat now> d\n           staged     unstaged path\n  1:        +1/-1      nothing index.html\nReview diff>> 1\ndiff --git a/index.html b/index.html\nindex 4d07108..4335f49 100644\n--- a/index.html\n+++ b/index.html\n@@ -16,7 +16,7 @@ Date Finder\n\n <p id="out">...</p>\n\n-<div id="footer">contact : support@github.com</div>\n+<div id="footer">contact : email.support@github.com</div>\n\n <script type="text/javascript">\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n通过这些基本命令，可以使用交互式添加模式来轻松地处理暂存区。\n\n\n# 暂存补丁\n\nGit 也可以暂存文件的特定部分。 例如，如果在 simplegit.rb 文件中做了两处修改，但只想要暂存其中的一个而不是另一个，Git 会帮你轻松地完成。 在和上一节一样的交互式提示符中，输入 p 或 5（补丁）。 Git 会询问你想要部分暂存哪些文件；然后，对已选择文件的每一个部分，它都会一个个地显示文件区别并询问你是否想要暂存它们：\n\ndiff --git a/lib/simplegit.rb b/lib/simplegit.rb\nindex dd5ecc4..57399e0 100644\n--- a/lib/simplegit.rb\n+++ b/lib/simplegit.rb\n@@ -22,7 +22,7 @@ class SimpleGit\n   end\n\n   def log(treeish = \'master\')\n-    command("git log -n 25 #{treeish}")\n+    command("git log -n 30 #{treeish}")\n   end\n\n   def blame(path)\nStage this hunk [y,n,a,d,/,j,J,g,e,?]?\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n这时有很多选项。 输入 ? 显示所有可以使用的命令列表：\n\nStage this hunk [y,n,a,d,/,j,J,g,e,?]? ?\ny - stage this hunk\nn - do not stage this hunk\na - stage this and all the remaining hunks in the file\nd - do not stage this hunk nor any of the remaining hunks in the file\ng - select a hunk to go to\n/ - search for a hunk matching the given regex\nj - leave this hunk undecided, see next undecided hunk\nJ - leave this hunk undecided, see next hunk\nk - leave this hunk undecided, see previous undecided hunk\nK - leave this hunk undecided, see previous hunk\ns - split the current hunk into smaller hunks\ne - manually edit the current hunk\n? - print help\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n通常情况下可以输入 y 或 n 来选择是否要暂存每一个区块， 当然，暂存特定文件中的所有部分或为之后的选择跳过一个区块也是非常有用的。 如果你只暂存文件的一部分，状态输出可能会像下面这样：\n\nWhat now> 1\n           staged     unstaged path\n  1:    unchanged        +0/-1 TODO\n  2:        +1/-1      nothing index.html\n  3:        +1/-1        +4/-0 lib/simplegit.rb\n\n\n1\n2\n3\n4\n5\n\n\nsimplegit.rb 文件的状态很有趣。 它显示出若干行被暂存与若干行未被暂存。 已经部分地暂存了这个文件。 在这时，可以退出交互式添加脚本并且运行 git commit 来提交部分暂存的文件。\n\n也可以不必在交互式添加模式中做部分文件暂存——可以在命令行中使用 git add -p 或 git add --patch 来启动同样的脚本。\n\n更进一步地，可以使用 git reset --patch 命令的补丁模式来部分重置文件， 通过 git checkout --patch 命令来部分检出文件与 git stash save --patch 命令来部分暂存文件。 我们将会在接触这些命令的高级使用方法时了解更多详细信息。',normalizedContent:'# git工具-交互式暂存\n\n本节中的几个交互式 git 命令可以帮助你将文件的特定部分组合成提交。 当你在修改了大量文件后，希望这些改动能拆分为若干提交而不是混杂在一起成为一个提交时，这几个工具会非常有用。 通过这种方式，可以确保提交是逻辑上独立的变更集，同时也会使其他开发者在与你工作时很容易地审核。 如果运行 git add 时使用 -i 或者 --interactive 选项，git 将会进入一个交互式终端模式，显示类似下面的东西：\n\n$ git add -i\n           staged     unstaged path\n  1:    unchanged        +0/-1 todo\n  2:    unchanged        +1/-1 index.html\n  3:    unchanged        +5/-1 lib/simplegit.rb\n\n*** commands ***\n  1: [s]tatus     2: [u]pdate      3: [r]evert     4: [a]dd untracked\n  5: [p]atch      6: [d]iff        7: [q]uit       8: [h]elp\nwhat now>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n可以看到这个命令以和平时非常不同的视图显示了暂存区——基本上与 git status 是相同的信息，但是更简明扼要一些。 它将暂存的修改列在左侧，未暂存的修改列在右侧。\n\n在这块区域后是“commands”命令区域。 在这里你可以做一些工作，包括暂存文件、取消暂存文件、暂存文件的一部分、添加未被追踪的文件、显示暂存内容的区别。\n\n\n# 暂存与取消暂存文件\n\n如果在 what now> 提示符后键入 u 或 2（更新），它会问你想要暂存哪个文件：\n\nwhat now> u\n           staged     unstaged path\n  1:    unchanged        +0/-1 todo\n  2:    unchanged        +1/-1 index.html\n  3:    unchanged        +5/-1 lib/simplegit.rb\nupdate>>\n\n\n1\n2\n3\n4\n5\n6\n\n\n要暂存 todo 和 index.html 文件，可以输入数字：\n\nupdate>> 1,2\n           staged     unstaged path\n* 1:    unchanged        +0/-1 todo\n* 2:    unchanged        +1/-1 index.html\n  3:    unchanged        +5/-1 lib/simplegit.rb\nupdate>>\n\n\n1\n2\n3\n4\n5\n6\n\n\n每个文件前面的 * 意味着选中的文件将会被暂存。 如果在 update>> 提示符后不输入任何东西并直接按回车，git 将会暂存之前选择的文件：\n\nupdate>>\nupdated 2 paths\n\n*** commands ***\n  1: [s]tatus     2: [u]pdate      3: [r]evert     4: [a]dd untracked\n  5: [p]atch      6: [d]iff        7: [q]uit       8: [h]elp\nwhat now> s\n           staged     unstaged path\n  1:        +0/-1      nothing todo\n  2:        +1/-1      nothing index.html\n  3:    unchanged        +5/-1 lib/simplegit.rb\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n现在可以看到 todo 与 index.html 文件已经被暂存而 simplegit.rb 文件还未被暂存。 如果这时想要取消暂存 todo 文件，使用 r 或 3（撤消）选项：\n\n*** commands ***\n  1: [s]tatus     2: [u]pdate      3: [r]evert     4: [a]dd untracked\n  5: [p]atch      6: [d]iff        7: [q]uit       8: [h]elp\nwhat now> r\n           staged     unstaged path\n  1:        +0/-1      nothing todo\n  2:        +1/-1      nothing index.html\n  3:    unchanged        +5/-1 lib/simplegit.rb\nrevert>> 1\n           staged     unstaged path\n* 1:        +0/-1      nothing todo\n  2:        +1/-1      nothing index.html\n  3:    unchanged        +5/-1 lib/simplegit.rb\nrevert>> [enter]\nreverted one path\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n再次查看 git 状态，可以看到已经取消暂存 todo 文件：\n\n*** commands ***\n  1: [s]tatus     2: [u]pdate      3: [r]evert     4: [a]dd untracked\n  5: [p]atch      6: [d]iff        7: [q]uit       8: [h]elp\nwhat now> s\n           staged     unstaged path\n  1:    unchanged        +0/-1 todo\n  2:        +1/-1      nothing index.html\n  3:    unchanged        +5/-1 lib/simplegit.rb\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n如果想要查看已暂存内容的区别，可以使用 d 或 6（区别）命令。 它会显示暂存文件的一个列表，可以从中选择想要查看的暂存区别。 这跟你在命令行指定 git diff --cached 非常相似：\n\n*** commands ***\n  1: [s]tatus     2: [u]pdate      3: [r]evert     4: [a]dd untracked\n  5: [p]atch      6: [d]iff        7: [q]uit       8: [h]elp\nwhat now> d\n           staged     unstaged path\n  1:        +1/-1      nothing index.html\nreview diff>> 1\ndiff --git a/index.html b/index.html\nindex 4d07108..4335f49 100644\n--- a/index.html\n+++ b/index.html\n@@ -16,7 +16,7 @@ date finder\n\n <p id="out">...</p>\n\n-<div id="footer">contact : support@github.com</div>\n+<div id="footer">contact : email.support@github.com</div>\n\n <script type="text/javascript">\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n通过这些基本命令，可以使用交互式添加模式来轻松地处理暂存区。\n\n\n# 暂存补丁\n\ngit 也可以暂存文件的特定部分。 例如，如果在 simplegit.rb 文件中做了两处修改，但只想要暂存其中的一个而不是另一个，git 会帮你轻松地完成。 在和上一节一样的交互式提示符中，输入 p 或 5（补丁）。 git 会询问你想要部分暂存哪些文件；然后，对已选择文件的每一个部分，它都会一个个地显示文件区别并询问你是否想要暂存它们：\n\ndiff --git a/lib/simplegit.rb b/lib/simplegit.rb\nindex dd5ecc4..57399e0 100644\n--- a/lib/simplegit.rb\n+++ b/lib/simplegit.rb\n@@ -22,7 +22,7 @@ class simplegit\n   end\n\n   def log(treeish = \'master\')\n-    command("git log -n 25 #{treeish}")\n+    command("git log -n 30 #{treeish}")\n   end\n\n   def blame(path)\nstage this hunk [y,n,a,d,/,j,j,g,e,?]?\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n这时有很多选项。 输入 ? 显示所有可以使用的命令列表：\n\nstage this hunk [y,n,a,d,/,j,j,g,e,?]? ?\ny - stage this hunk\nn - do not stage this hunk\na - stage this and all the remaining hunks in the file\nd - do not stage this hunk nor any of the remaining hunks in the file\ng - select a hunk to go to\n/ - search for a hunk matching the given regex\nj - leave this hunk undecided, see next undecided hunk\nj - leave this hunk undecided, see next hunk\nk - leave this hunk undecided, see previous undecided hunk\nk - leave this hunk undecided, see previous hunk\ns - split the current hunk into smaller hunks\ne - manually edit the current hunk\n? - print help\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n通常情况下可以输入 y 或 n 来选择是否要暂存每一个区块， 当然，暂存特定文件中的所有部分或为之后的选择跳过一个区块也是非常有用的。 如果你只暂存文件的一部分，状态输出可能会像下面这样：\n\nwhat now> 1\n           staged     unstaged path\n  1:    unchanged        +0/-1 todo\n  2:        +1/-1      nothing index.html\n  3:        +1/-1        +4/-0 lib/simplegit.rb\n\n\n1\n2\n3\n4\n5\n\n\nsimplegit.rb 文件的状态很有趣。 它显示出若干行被暂存与若干行未被暂存。 已经部分地暂存了这个文件。 在这时，可以退出交互式添加脚本并且运行 git commit 来提交部分暂存的文件。\n\n也可以不必在交互式添加模式中做部分文件暂存——可以在命令行中使用 git add -p 或 git add --patch 来启动同样的脚本。\n\n更进一步地，可以使用 git reset --patch 命令的补丁模式来部分重置文件， 通过 git checkout --patch 命令来部分检出文件与 git stash save --patch 命令来部分暂存文件。 我们将会在接触这些命令的高级使用方法时了解更多详细信息。',charsets:{cjk:!0},lastUpdated:"2021/03/25, 20:24:44",lastUpdatedTimestamp:1616675084e3}],themeConfig:{nav:[{text:"首页",link:"/"},{text:"Java",link:"/Java/",items:[{text:"Hyperskill - Java",items:[{text:"Java basic",link:"/pages/73dc48/"},{text:"Java OOP",link:"/pages/af043d/"},{text:"应知",link:"/pages/6bc01b/"},{text:"扩展",link:"/pages/281194/"},{text:"IO & Stream",link:"/pages/03b557/"},{text:"Error & Exception",link:"/pages/5fc0af/"},{text:"Algorithm & Data structure",link:"/pages/5276ce/"},{text:"Design pattern",link:"/pages/aa23cc/"},{text:"Web",link:"/pages/4b9292/"},{text:"Spring boot",link:"/pages/310689/"}]},{text:"练习题",items:[{text:"选择题 & 填空题",link:"/pages/dcd812/"},{text:"代码题",link:"/pages/5a0fd5/"}]},{text:"Frank - Java与生活 (OOP)",items:[{text:"参考资料",link:"/pages/8bd1db/"},{text:"Java基础",link:"/pages/ea2997/"},{text:"OOP上半部分",link:"/pages/d161b3/"},{text:"OOP下半部分",link:"/pages/a2c72d/"}]},{text:"Frank - Java API进阶",items:[{text:"Base API",link:"/pages/e6a4f1/"},{text:"Unit Test and main function",link:"/pages/ea2997/"}]},{text:"学习笔记",link:"/pages/71cc54/"}]},{text:"MySQL",link:"/mysql/",items:[{text:"学习笔记",items:[{text:"数据库",link:"/pages/9a852e/"}]},{text:"Frank - MySQL删库跑路",items:[{text:"安装、连接、配置",link:"/pages/dec33b/"},{text:"基本操作——数据库",link:"/pages/b673ce/"},{text:"基本操作——表",link:"/pages/130114/"},{text:"基本操作——数据",link:"/pages/bda483/"},{text:"数据类型",link:"/pages/88991f/"},{text:"列属性完整性",link:"/pages/525c9a/"},{text:"数据库设计思维",link:"/pages/7bc52e/"},{text:"单表查询",link:"/pages/fca44f/"},{text:"多表查询",link:"/pages/56c50b/"}]}]},{text:"Linux",link:"/Linux/",items:[{text:"学习笔记",items:[{text:"其它",link:"/pages/4e011c/"}]},{text:"Frank - Linux现代方法",items:[{text:"必知",link:"/pages/0c031c/"},{text:"命令",link:"/pages/11d275/"},{text:"技巧",link:"/pages/adaf3b/"}]}]},{text:"技术",link:"/technology/",items:[{text:"技术文档",link:"/pages/9a7ee40fc232253e/"},{text:"Git",link:"/note/git/"},{text:"GitHub技巧",link:"/pages/4c778760be26d8b3/"},{text:"前端",link:"/pages/8309a5b876fc95e3/"}]},{text:"英语",link:"/english/",items:[{text:"Khan Academy - 语法",link:"/pages/d872e5/"}]},{text:"记录",link:"/record/",items:[{text:"Monthly",link:"/pages/455805/"},{text:"阅读",link:"/pages/4c7197/"},{text:"Others",link:"/pages/6010b8/"}]},{text:"更多",link:"/more/",items:[{text:"学习",link:"/pages/f2a556/"},{text:"面试",link:"/pages/aea6571b7a8bae86/"},{text:"心情杂货",link:"/pages/2d615df9a36a98ed/"},{text:"实用技巧",link:"/pages/baaa02/"},{text:"友情链接",link:"/friends/"}]},{text:"收藏",link:"/pages/5b66ca/"},{text:"索引",link:"/archives/",items:[{text:"标签",link:"/tags/"},{text:"归档",link:"/archives/"}]}],sidebarDepth:2,logo:"/img/JIMFKLIFE_favicon.svg",repo:"JimFKppt/jimfkppt.github.io",searchMaxSuggestions:10,lastUpdated:"上次更新",docsDir:"docs",editLinks:!0,editLinkText:"编辑",category:!1,sidebar:{"/00.目录页/":[["01.Java.md","Java","/Java"],["02.MySQL.md","MySQL","/mysql"],["03.Linux.md","Linux","/linux"],["04.技术.md","技术","/technology"],["05.英语.md","英语","/english"],["06.记录.md","记录","/record"],["07.更多.md","更多","/more"]],catalogue:{Java:"/Java",MySQL:"/mysql",Linux:"/linux","技术":"/technology","英语":"/english","记录":"/record","更多":"/more","《Git》学习笔记":"/note/git"},"/01.Java/":[{title:"Hyperskill - Java",collapsable:!0,children:[{title:"Java basic",collapsable:!0,children:[["01.Hyperskill - Java/01.Java basic/00.Theory：Scanning the input.md","Theory：Scanning the input","/pages/73dc48/"],["01.Hyperskill - Java/01.Java basic/01.Theory：Arithmetic operations.md","Theory：Arithmetic operations","/pages/e69669/"],["01.Hyperskill - Java/01.Java basic/02.Theory：Integer types and operations.md","Theory：Integer types and operations","/pages/7d5da8/"],["01.Hyperskill - Java/01.Java basic/03.Theory：Increment and decrement.md","Theory：Increment and decrement","/pages/a7b5a4/"],["01.Hyperskill - Java/01.Java basic/04.Theory：Relational operators.md","Theory：Relational operators","/pages/298220/"],["01.Hyperskill - Java/01.Java basic/05.Theory：Ternary operator.md","Theory：Ternary operator","/pages/1546f6/"],["01.Hyperskill - Java/01.Java basic/06.Theory：The while and do-while loops.md","Theory：The while and do-while loops","/pages/d22131/"],["01.Hyperskill - Java/01.Java basic/07.Theory：Branching statements.md","Theory：Branching statements","/pages/4e67a4/"],["01.Hyperskill - Java/01.Java basic/08.Theory：Characters.md","Theory：Characters","/pages/69787a/"],["01.Hyperskill - Java/01.Java basic/09.Theory：String.md","Theory：String","/pages/2c54b1/"],["01.Hyperskill - Java/01.Java basic/10.Theory：Boolean and logical operators.md","Theory：Boolean and logical operators","/pages/486714/"],["01.Hyperskill - Java/01.Java basic/11.Theory：Sizes and ranges.md","Theory：Sizes and ranges","/pages/1266f4/"],["01.Hyperskill - Java/01.Java basic/12.Theory：Switch statement.md","Theory：Switch statement","/pages/0aee0c/"],["01.Hyperskill - Java/01.Java basic/13.Theory：Declaring a method.md","Theory：Declaring a method","/pages/90c5f6/"],["01.Hyperskill - Java/01.Java basic/18.Theory：The main method.md","Theory：The main method","/pages/49c354/"],["01.Hyperskill - Java/01.Java basic/19.Theory：Type casting.md","Theory：Type casting","/pages/9f6278/"],["01.Hyperskill - Java/01.Java basic/20.Theory：Primitive and reference types.md","Theory：Primitive and reference types","/pages/577f0d/"],["01.Hyperskill - Java/01.Java basic/21.Theory：Array.md","Theory：Array","/pages/8da0ec/"],["01.Hyperskill - Java/01.Java basic/22.Theory：Arrays as parameters.md","Theory：Arrays as parameters","/pages/ffede0/"],["01.Hyperskill - Java/01.Java basic/23.Theory：Iterating over arrays.md","Theory：Iterating over arrays","/pages/0b3cf5/"],["01.Hyperskill - Java/01.Java basic/24.Theory：Multidimensional array.md","Theory：Multidimensional array","/pages/19feb9/"],["01.Hyperskill - Java/01.Java basic/26.Theory：Final variables.md","Theory：Final variables","/pages/694b24/"]]},{title:"Java OOP",collapsable:!0,children:[["01.Hyperskill - Java/02.Java OOP/31.Theory：Introduction OOP.md","Theory：Introduction OOP","/pages/af043d/"],["01.Hyperskill - Java/02.Java OOP/32.Theory：Defining classes.md","Theory：Defining classes","/pages/98e983/"],["01.Hyperskill - Java/02.Java OOP/33.Theory：Instance methods.md","Theory：Instance methods","/pages/732103/"],["01.Hyperskill - Java/02.Java OOP/34.Thoery：Constructor.md","Thoery：Constructor","/pages/616a21/"],["01.Hyperskill - Java/02.Java OOP/35.Theory：Package.md","Theory：Package","/pages/d4be91/"],["01.Hyperskill - Java/02.Java OOP/36.Theory：Access modifiers.md","Theory：Access modifiers","/pages/9847c1/"],["01.Hyperskill - Java/02.Java OOP/37.Theory：Getters and setters.md","Theory：Getters and setters","/pages/467f35/"],["01.Hyperskill - Java/02.Java OOP/38.Theory：Inheritance.md","Theory：Inheritance","/pages/249060/"],["01.Hyperskill - Java/02.Java OOP/39.Theory：Protected modifier.md","Theory：Protected modifier","/pages/545cfc/"],["01.Hyperskill - Java/02.Java OOP/40.Theory：Referencing subclass objects.md","Theory：Referencing subclass objects","/pages/15dcd2/"],["01.Hyperskill - Java/02.Java OOP/41.Theory：The Object class.md","Theory：The Object class","/pages/bac11b/"],["01.Hyperskill - Java/02.Java OOP/42.Theory：Objects.md","Theory：Objects","/pages/a7716b/"],["01.Hyperskill - Java/02.Java OOP/43.Theory：Interface.md","Theory：Interface","/pages/a19dfb/"],["01.Hyperskill - Java/02.Java OOP/44.Theory：Multiple constructors.md","Theory：Multiple constructors","/pages/3e6dad/"],["01.Hyperskill - Java/02.Java OOP/45.Theory：The keyword super.md","Theory：The keyword super","/pages/aac9a9/"],["01.Hyperskill - Java/02.Java OOP/46.Theory：Static members.md","Theory：Static members","/pages/2f6bd1/"],["01.Hyperskill - Java/02.Java OOP/48.Theory：Hiding and overriding.md","Theory：Hiding and overriding","/pages/2e30c6/"],["01.Hyperskill - Java/02.Java OOP/49.Theory：Polymorphism.md","Theory：Polymorphism","/pages/8cec9b/"],["01.Hyperskill - Java/02.Java OOP/50.Theory：Abstract class.md","Theory：Abstract class","/pages/6795a3/"],["01.Hyperskill - Java/02.Java OOP/51.Theory：Abstract class vs interface.md","Theory：Abstract class vs interface","/pages/30c559/"],["01.Hyperskill - Java/02.Java OOP/52.Theory：Anonymous classes.md","Theory：Anonymous classes","/pages/41d175/"],["01.Hyperskill - Java/02.Java OOP/53.Theory：Anonymous classes properties.md","Theory：Anonymous classes properties","/pages/d95243/"]]},{title:"应知",collapsable:!0,children:[["01.Hyperskill - Java/03.应知/14.Theory：Functional decomposition.md","Theory：Functional decomposition","/pages/591f82/"],["01.Hyperskill - Java/03.应知/15.Theory：Paradigms.md","Theory：Paradigms","/pages/6bc01b/"],["01.Hyperskill - Java/03.应知/25.Theory：Overloading.md","Theory：Overloading","/pages/030e2b/"],["01.Hyperskill - Java/03.应知/27.Theory：Write, compile, and run.md","Theory：Write, compile, and run","/pages/f9cc7c/"],["01.Hyperskill - Java/03.应知/47.Theory：Annotations basics.md","Theory：Annotations basics","/pages/2e50ec/"],["01.Hyperskill - Java/03.应知/50.Theory：JVM, JRE, and JDK.md","Theory：JVM, JRE, and JDK","/pages/d75f79/"],["01.Hyperskill - Java/03.应知/53.Theory：Jave Archive.md","Theory：Jave Archive","/pages/df0a86/"],["01.Hyperskill - Java/03.应知/90.Theory：Running programs on your computer.md","Theory：Running programs on your computer","/pages/838d38/"],["01.Hyperskill - Java/03.应知/96.Theory：Enums in Java.md","Theory：Enums in Java","/pages/a7afdd/"],["01.Hyperskill - Java/03.应知/97.Theory：Fields and methods in enum.md","Theory：Fields and methods in enum","/pages/342a00/"],["01.Hyperskill - Java/03.应知/99.Theory：StringBuilder.md","Theory：StringBuilder","/pages/4931da/"],["01.Hyperskill - Java/03.应知/100.Theory：Immutability.md","Theory：Immutability","/pages/a15ec2/"],["01.Hyperskill - Java/03.应知/101.Theory：Boxing and unboxing.md","Theory：Boxing and unboxing","/pages/2efd30/"],["01.Hyperskill - Java/03.应知/102.Theory：Introduction to generic programming.md","Theory：Introduction to generic programming","/pages/c7945c/"],["01.Hyperskill - Java/03.应知/103.Theory：Generics and Object.md","Theory：Generics and Object","/pages/47e30b/"],["01.Hyperskill - Java/03.应知/104.Theory：What are collections.md","Theory：What are collections","/pages/79c741/"],["01.Hyperskill - Java/03.应知/105.Theory：The collections Framework overview.md","Theory：The collections Framework overview","/pages/f03390/"],["01.Hyperskill - Java/03.应知/106.Theory：ArrayList.md","Theory：ArrayList","/pages/0d095f/"],["01.Hyperskill - Java/03.应知/107.Theory：The List interface.md","Theory：The List interface","/pages/0d55d4/"],["01.Hyperskill - Java/03.应知/108.Theory：Comparable.md","Theory：Comparable","/pages/03f897/"],["01.Hyperskill - Java/03.应知/109.Theory：Processing strings.md","Theory：Processing strings","/pages/78c165/"],["01.Hyperskill - Java/03.应知/110.Theory：Initialization blocks.md","Theory：Initialization blocks","/pages/827871/"],["01.Hyperskill - Java/03.应知/111.Theory：Introduction to API.md","Theory：Introduction to API","/pages/8dcfb6/"],["01.Hyperskill - Java/03.应知/112.Theory：Generic methods.md","Theory：Generic methods","/pages/4b79aa/"]]},{title:"扩展",collapsable:!0,children:[["01.Hyperskill - Java/04.扩展/16.Theory：Units of information.md","Theory：Units of information","/pages/df27b6/"],["01.Hyperskill - Java/04.扩展/49.Theory：IDE.md","Theory：IDE","/pages/09aac1/"],["01.Hyperskill - Java/04.扩展/50.Theory：IDEA.md","Theory：IDEA","/pages/9cf6c9/"],["01.Hyperskill - Java/04.扩展/51.Theory：Build tools.md","Theory：Build tools","/pages/d40e09/"],["01.Hyperskill - Java/04.扩展/52.Theory：Operating systems.md","Theory：Operating systems","/pages/96307c/"],["01.Hyperskill - Java/04.扩展/54.Theory：Gradle basics.md","Theory：Gradle basics","/pages/2392d7/"],["01.Hyperskill - Java/04.扩展/55.Theory：Basic project with Gradle.md","Theory：Basic project with Gradle","/pages/6a2c0f/"],["01.Hyperskill - Java/04.扩展/56.Theory：Building apps using Gradle.md","Theory：Building apps using Gradle","/pages/672585/"],["01.Hyperskill - Java/04.扩展/57.Theory：Dependency management.md","Theory：Dependency management","/pages/640a2b/"],["01.Hyperskill - Java/04.扩展/62.Theory：Formatted output.md","Theory：Formatted output","/pages/0ae67e/"],["01.Hyperskill - Java/04.扩展/64.Theory：Libraries.md","Theory：Libraries","/pages/9fd950/"],["01.Hyperskill - Java/04.扩展/65.Theory：Frameworks.md","Theory：Frameworks","/pages/a63654/"],["01.Hyperskill - Java/04.扩展/69.Theory：Modules.md","Theory：Modules","/pages/4a417a/"],["01.Hyperskill - Java/04.扩展/72.Theory：Introduction to software architecture.md","Theory：Introduction to software architecture","/pages/8e174b/"],["01.Hyperskill - Java/04.扩展/74.Theory：Class Diagrams.md","Theory：Class Diagrams","/pages/db92b4/"],["01.Hyperskill - Java/04.扩展/80.Theory：Text blocks.md","Theory：Text blocks","/pages/ed16a5/"],["01.Hyperskill - Java/04.扩展/119.Theory：YAML.md","Theory：YAML","/pages/40f52b/"],["01.Hyperskill - Java/04.扩展/120.Theory：XML.md","Theory：XML","/pages/281194/"],["01.Hyperskill - Java/04.扩展/121.Theory：JSON.md","Theory：JSON","/pages/31c36e/"]]},{title:"IO & Stream",collapsable:!0,children:[["01.Hyperskill - Java/05.IO & Stream/91.Theory：Files.md","Theory：Files","/pages/03b557/"],["01.Hyperskill - Java/05.IO & Stream/92.Theory：Writing files.md","Theory：Write files","/pages/39305b/"],["01.Hyperskill - Java/05.IO & Stream/93.Theory：What are streams.md","Theory：What are streams","/pages/0fced5/"],["01.Hyperskill - Java/05.IO & Stream/94.Theory：Input streams.md","Theory：Input streams","/pages/3f7bd2/"],["01.Hyperskill - Java/05.IO & Stream/95.Theory：Try with resources.md","Theory：Try with resources","/pages/6a8e23/"]]},{title:"Error & Exception",collapsable:!0,children:[["01.Hyperskill - Java/06.Error & Exception/28.Theory：Errors in programs.md","Theory：Errors in programs","/pages/5fc0af/"],["01.Hyperskill - Java/06.Error & Exception/29.Theory：What is an exception.md","Theory：What is an exception","/pages/d2856b/"],["01.Hyperskill - Java/06.Error & Exception/30.Theory：NPE.md","Theory：NPE","/pages/ea4d00/"],["01.Hyperskill - Java/06.Error & Exception/61.Theory：Array exceptions.md","Theory：Array exceptions","/pages/0d673f/"],["01.Hyperskill - Java/06.Error & Exception/86.Theory：Hierarchy of exceptions.md","Theory：Hierarchy of exceptions","/pages/417817/"],["01.Hyperskill - Java/06.Error & Exception/87.Theory：Exception Handling.md","Theory：Exception Handling","/pages/49c884/"],["01.Hyperskill - Java/06.Error & Exception/88.Theory：Throwing exceptions.md","Theory：Throwing exceptions","/pages/199a13/"],["01.Hyperskill - Java/06.Error & Exception/89.Theory：Cutom exceptions.md","Theory：Cutom exceptions","/pages/034c61/"],["01.Hyperskill - Java/06.Error & Exception/90.Theory：What is a bug.md","Theory：What is a bug","/pages/abd837/"],["01.Hyperskill - Java/06.Error & Exception/91.Theory：Introduction to logging.md","Theory：Introduction to logging","/pages/de4d8b/"],["01.Hyperskill - Java/06.Error & Exception/92.Theory：Debugging techniques.md","Theory：Debugging techniques","/pages/205b2f/"]]},{title:"Algorithm & Data structure",collapsable:!0,children:[["01.Hyperskill - Java/07.Algorithm & Data structure/01.Theory：Computer algorithms.md","Theory：Computer algorithms","/pages/5276ce/"],["01.Hyperskill - Java/07.Algorithm & Data structure/02.Theory：Pseudocode.md","Theory：Pseudocode","/pages/b7e18f/"],["01.Hyperskill - Java/07.Algorithm & Data structure/03.Theory：Pseudocode basics.md","Theory：Pseudocode basics","/pages/6ddab4/"],["01.Hyperskill - Java/07.Algorithm & Data structure/04.Theory：Complex constructions in pseudocode.md","Theory：Complex constructions in pseudocode","/pages/0e4b76/"],["01.Hyperskill - Java/07.Algorithm & Data structure/05.Theory：The big O notation.md","Theory：The big O notation","/pages/4a7ac8/"],["01.Hyperskill - Java/07.Algorithm & Data structure/06.Theory：Best, Average and cases.md","Theory：Best, Average and cases","/pages/df5f3e/"],["01.Hyperskill - Java/07.Algorithm & Data structure/07.Theory：Data structures.md","Theory：Data structures","/pages/12da49/"],["01.Hyperskill - Java/07.Algorithm & Data structure/08.Theory：Fixed-size array.md","Theory：Fixed-size array","/pages/fb5342/"],["01.Hyperskill - Java/07.Algorithm & Data structure/09.Theory：Dynamic array.md","Theory：Dynamic array","/pages/0de0a4/"]]},{title:"Design pattern",collapsable:!0,children:[["01.Hyperskill - Java/08.Design pattern/111.Theory：The concept of patterns.md","Theory：The concept of patterns","/pages/aa23cc/"],["01.Hyperskill - Java/08.Design pattern/112.Theory：Structural of design patterns.md","Theory：Structural of design patterns","/pages/dd6ea7/"],["01.Hyperskill - Java/08.Design pattern/113.Theory：Decorator pattern.md","Theory：Decorator pattern","/pages/3f60b7/"],["01.Hyperskill - Java/08.Design pattern/114.Theory：Decorator.md","Theory：Decorator","/pages/c37d64/"]]},{title:"Web",collapsable:!0,children:[["01.Hyperskill - Java/09.Web/58.Theory：World Wide Web.md","Theory：World Wide Web","/pages/4b9292/"],["01.Hyperskill - Java/09.Web/59.Theory：HTTP.md","Theory：HTTP","/pages/9453ab/"],["01.Hyperskill - Java/09.Web/63.Theory：HTTP URL.md","Theory：HTTP URL","/pages/e0c5ed/"],["01.Hyperskill - Java/09.Web/73.Theory：HTTP messages.md","Theory：HTTP messages","/pages/ec1dbf/"],["01.Hyperskill - Java/09.Web/75.Theory：MVC.md","Theory：MVC","/pages/26ab34/"],["01.Hyperskill - Java/09.Web/76.Theory：Introduction to Spring Web MVC.md","Theory：Introduction to Spring Web MVC","/pages/3dd5e6/"],["01.Hyperskill - Java/09.Web/77.Theory：REST.md","Theory：REST","/pages/1ce665/"],["01.Hyperskill - Java/09.Web/78.Theory：Postman.md","Theory：Postman","/pages/eca1b0/"],["01.Hyperskill - Java/09.Web/79.Theory：Getting data from REST.md","Theory：Getting data from REST","/pages/8b4d60/"],["01.Hyperskill - Java/09.Web/80.Theory：Posting and deleting data via REST.md","Theory：Posting and deleting data via REST","/pages/3e165c/"],["01.Hyperskill - Java/09.Web/81.Theory：REST Exception handling.md","Theory：REST Exception handling","/pages/af1212/"],["01.Hyperskill - Java/09.Web/82.Theory：Handling requests with bodies.md","Theory：Handling requests with bodies","/pages/84fe51/"],["01.Hyperskill - Java/09.Web/83.Theory：Domains.md","Theory：Domains","/pages/b3fe3b/"],["01.Hyperskill - Java/09.Web/84.Theory：HTTP Basic Auth.md","Theory：HTTP Basic Auth","/pages/b2c958/"],["01.Hyperskill - Java/09.Web/85.Theory：IP.md","Theory：IP","/pages/74e198/"],["01.Hyperskill - Java/09.Web/86.Theory：Authentication and Authorization.md","Theory：Authentication and Authorization","/pages/69864a/"],["01.Hyperskill - Java/09.Web/87.Theory：OAuth.md","Theory：OAuth","/pages/697cc8/"],["01.Hyperskill - Java/09.Web/88.Theory：Java 11 HTTP client.md","Theory：Java 11 HTTP client","/pages/5b7839/"]]},{title:"Spring boot",collapsable:!0,children:[["01.Hyperskill - Java/10.Spring boot/66.Theory：Introduction to Spring boot.md","Theory：Introduction to Spring boot","/pages/310689/"],["01.Hyperskill - Java/10.Spring boot/67.Theory：Getting started with Spring Boot.md","Theory：Getting started with Spring Boot","/pages/42710b/"],["01.Hyperskill - Java/10.Spring boot/68.Theory：Basic project structure.md","Theory：Basic project structure","/pages/1862e3/"],["01.Hyperskill - Java/10.Spring boot/70.Theory：IoC container.md","Theory：IoC container","/pages/cbd821/"],["01.Hyperskill - Java/10.Spring boot/71.Theory：Spring beans.md","Theory：Spring beans","/pages/b04d58/"]]}]},{title:"练习题",collapsable:!0,children:[{title:"选择题 & 填空题",collapsable:!0,children:[["03.练习题/01.选择题 & 填空题/03.What does the method print.md","What does the method print","/pages/dcd812/"],["03.练习题/01.选择题 & 填空题/04.Appending strings and ints.md","Appending strings and ints","/pages/a23fa8/"],["03.练习题/01.选择题 & 填空题/05.Varargs method invocation.md","Varargs method invocation","/pages/f5b04f/"],["03.练习题/01.选择题 & 填空题/10.Good reasons to use Java modules.md","Good reasons to use Java modules","/pages/4b0b03/"],["03.练习题/01.选择题 & 填空题/11.Number generators.md","Number generators","/pages/d963c7/"],["03.练习题/01.选择题 & 填空题/15.When the keyword cannot be used.md","When the keyword cannot be used","/pages/ae9539/"],["03.练习题/01.选择题 & 填空题/16.Size and capacity.md","Size and capacity","/pages/c46e82/"],["03.练习题/01.选择题 & 填空题/17.The number of copies.md","The number of copies","/pages/bdd44c/"],["03.练习题/01.选择题 & 填空题/18.The number of insertions.md","The number of insertions","/pages/dbb4dd/"]]},{title:"代码题",collapsable:!0,children:[["03.练习题/02.代码题/01.Boxes.md","Boxes","/pages/5a0fd5/"],["03.练习题/02.代码题/02.The longest ascending sequence.md","The longest ascending sequence","/pages/1cb5d4/"],["03.练习题/02.代码题/06.Right Rotation.md","Right Rotation","/pages/2eb85f/"],["03.练习题/02.代码题/07.Book.md","Book","/pages/8f9095/"],["03.练习题/02.代码题/08.Compact strings with AsciiCharSequence.md","Compact strings with AsciiCharSequence","/pages/a386cc/"],["03.练习题/02.代码题/09.Cinema.md","Cinema","/pages/640e4b/"],["03.练习题/02.代码题/12.Calculate square.md","Calculate square","/pages/b260fe/"],["03.练习题/02.代码题/13.Count words.md","Count words","/pages/b4753d/"],["03.练习题/02.代码题/14.Robot control.md","Robot control","/pages/7faafd/"],["03.练习题/02.代码题/16.Concat all strings without digits.md","Concat all strings without digits","/pages/08fb22/"],["03.练习题/02.代码题/17.Find the nearest number.md","Find the nearest number","/pages/a9b4c5/"],["03.练习题/02.代码题/18.Leaderboard.md","Leaderboard","/pages/212d51/"],["03.练习题/02.代码题/19.Split a list into sublists.md","Split a list into sublists","/pages/178437/"],["03.练习题/02.代码题/20.Arithmetic average.md","Arithmetic average","/pages/67369d/"],["03.练习题/02.代码题/21.Processing strings.md","Processing strings","/pages/b7298f/"]]}]},{title:"Frank - Java与生活",collapsable:!0,children:[{title:"参考资料",collapsable:!0,children:[["05.Frank - Java与生活/0.参考资料/00.参考资料.md","参考资料","/pages/8bd1db/"],["05.Frank - Java与生活/0.参考资料/01.环境变量 - JDK和JRE.md","环境变量 - JDK和JRE","/pages/3824ca/"],["05.Frank - Java与生活/0.参考资料/02.IDEA 便捷操作.md","IDEA 便捷操作","/pages/34af60/"]]},{title:"Java基础",collapsable:!0,children:[["05.Frank - Java与生活/1.Java基础/02.一带而过的东西.md","一带而过的东西","/pages/ea2997/"],["05.Frank - Java与生活/1.Java基础/03.值得注意的是.md","值得注意的是","/pages/94eba9/"],["05.Frank - Java与生活/1.Java基础/04.关于Java语言.md","关于Java语言","/pages/de8815/"],["05.Frank - Java与生活/1.Java基础/05.String.md","String","/pages/b1af58/"],["05.Frank - Java与生活/1.Java基础/06.自动类型转换.md","自动类型转换","/pages/b8bf39/"],["05.Frank - Java与生活/1.Java基础/07.import 导包.md","import 导包","/pages/de256f/"],["05.Frank - Java与生活/1.Java基础/08.数组.md","数组","/pages/e581fb/"],["05.Frank - Java与生活/1.Java基础/09.方法的重载.md","方法的重载","/pages/dda86a/"],["05.Frank - Java与生活/1.Java基础/10.规范.md","规范","/pages/a1ff58/"]]},{title:"OOP上半部分",collapsable:!0,children:[["05.Frank - Java与生活/2.OOP上半部分/01.变换思维.md","变换思维","/pages/d161b3/"],["05.Frank - Java与生活/2.OOP上半部分/02.null空指针异常.md","null空指针异常","/pages/1e6984/"],["05.Frank - Java与生活/2.OOP上半部分/03.封装.md","封装","/pages/b12e76/"],["05.Frank - Java与生活/2.OOP上半部分/04.toString.md","toString","/pages/2a21b9/"],["05.Frank - Java与生活/2.OOP上半部分/05.构造方法.md","构造方法","/pages/70fd79/"],["05.Frank - Java与生活/2.OOP上半部分/06.垃圾回收？.md","垃圾回收？","/pages/e44222/"],["05.Frank - Java与生活/2.OOP上半部分/07.静态变量和方法.md","静态变量和方法","/pages/f2a51b/"],["05.Frank - Java与生活/2.OOP上半部分/08.static单例设计模式.md","static单例设计模式","/pages/d01143/"],["05.Frank - Java与生活/2.OOP上半部分/09.内部类扯淡.md","内部类扯淡","/pages/3d4433/"]]},{title:"OOP下半部分",collapsable:!0,children:[["05.Frank - Java与生活/3.OOP下半部分/01.继承.md","继承","/pages/a2c72d/"],["05.Frank - Java与生活/3.OOP下半部分/02.方法的重写.md","方法的重写","/pages/9f2cbb/"],["05.Frank - Java与生活/3.OOP下半部分/03.super啃老.md","super啃老","/pages/d73c40/"],["05.Frank - Java与生活/3.OOP下半部分/04.final.md","final","/pages/591580/"],["05.Frank - Java与生活/3.OOP下半部分/05.抽象类和抽象方法.md","抽象类和抽象方法","/pages/27dde8/"],["05.Frank - Java与生活/3.OOP下半部分/06.接口.md","接口","/pages/df5260/"],["05.Frank - Java与生活/3.OOP下半部分/07.接口与抽象类.md","接口与抽象类","/pages/12e264/"],["05.Frank - Java与生活/3.OOP下半部分/08.多态.md","多态","/pages/d29b4b/"],["05.Frank - Java与生活/3.OOP下半部分/09.匿名内部类.md","匿名内部类","/pages/9f4e34/"],["05.Frank - Java与生活/3.OOP下半部分/10.权限修饰符.md","权限修饰符","/pages/23f02d/"],["05.Frank - Java与生活/3.OOP下半部分/11.Object类.md","Object类","/pages/6de792/"]]}]},{title:"Frank - Java API进阶",collapsable:!0,children:[{title:"Base API",collapsable:!0,children:[["06.Frank - Java API进阶/01.Base API/01.Java API定义和用处.md","Java API定义和用处","/pages/e6a4f1/"],["06.Frank - Java API进阶/01.Base API/02.Number & Math.md","Number & Math","/pages/1cc427/"],["06.Frank - Java API进阶/01.Base API/03.Random.md","Random","/pages/3012e2/"],["06.Frank - Java API进阶/01.Base API/04.Date & Calendar.md","Date & Calendar","/pages/5d3f0d/"],["06.Frank - Java API进阶/01.Base API/05.System.md","System","/pages/e07d0f/"]]},{title:"Unit Test and Main function",collapsable:!0,children:[["06.Frank - Java API进阶/02.Unit Test and Main function/00.抛出企业问题，脱离main测试，模块化概念抛出.md","抛出企业问题，脱离main测试，模块化概念抛出","/pages/0418c9/"],["06.Frank - Java API进阶/02.Unit Test and Main function/01.JUnit、单元测试的含义和用途.md","Junit、单元测试的含义和用途","/pages/cdc393/"],["06.Frank - Java API进阶/02.Unit Test and Main function/02.Maven repository 获取 Jar.md","Maven repository 获取 JAR","/pages/b0c959/"],["06.Frank - Java API进阶/02.Unit Test and Main function/03.使用JUnit.md","使用JUnit","/pages/711975/"]]},{title:"Throwable",collapsable:!0,children:[["06.Frank - Java API进阶/03.Throwable/01.异常.md","异常","/pages/2fba29/"]]}]},{title:"学习笔记",collapsable:!0,children:[["08.学习笔记/01.为什么Java里main方法有个static？.md","为什么Java里main方法有个static？","/pages/71cc54/"]]}],"/02.MySQL/":[{title:"学习笔记",collapsable:!0,children:[{title:"数据库",collapsable:!0,children:[["02.学习笔记/01.数据库/01.初识数据库.md","初识数据库","/pages/9a852e/"],["02.学习笔记/01.数据库/02.Tables and columns.md","Tables and columns","/pages/848e4f/"]]},{title:"SQL",collapsable:!0,children:[["02.学习笔记/02.SQL/00.SQL.md","SQL","/pages/698c6e/"]]}]},{title:"Frank - MySQL删库跑路",collapsable:!0,children:[{title:"安装连接以及配置",collapsable:!0,children:[["05.Frank - MySQL删库跑路/01.安装连接以及配置/00.数据库萌芽——开场吹比.md","数据库萌芽——开场吹比","/pages/dec33b/"],["05.Frank - MySQL删库跑路/01.安装连接以及配置/01.数据库选择及其安装.md","数据库选择及其安装","/pages/e04e78/"],["05.Frank - MySQL删库跑路/01.安装连接以及配置/02.服务的启动和停止.md","服务的启动和停止","/pages/962d9d/"],["05.Frank - MySQL删库跑路/01.安装连接以及配置/03.连接MySQL.md","连接MySQL","/pages/16c2ac/"],["05.Frank - MySQL删库跑路/01.安装连接以及配置/04.创建Data目录.md","创建Data目录","/pages/b0281f/"]]},{title:"基本操作——数据库",collapsable:!0,children:[["05.Frank - MySQL删库跑路/02.基本操作——数据库/01.显示数据库.md","显示数据库","/pages/b673ce/"],["05.Frank - MySQL删库跑路/02.基本操作——数据库/02.创建数据库.md","创建数据库","/pages/199240/"],["05.Frank - MySQL删库跑路/02.基本操作——数据库/03.删除数据库.md","删除数据库","/pages/5e26eb/"],["05.Frank - MySQL删库跑路/02.基本操作——数据库/04.查看创建数据库的SQL.md","查看创建数据库的SQL","/pages/f8be11/"],["05.Frank - MySQL删库跑路/02.基本操作——数据库/05.数据库的字符编码.md","数据库的字符编码","/pages/4c42c5/"]]},{title:"基本操作——表",collapsable:!0,children:[["05.Frank - MySQL删库跑路/03.基本操作——表/02.引用数据库和查看数据库中的表.md","引用数据库和查看数据库中的表","/pages/130114/"],["05.Frank - MySQL删库跑路/03.基本操作——表/03.创建表——create.md","创建表——create","/pages/bbd8e4/"],["05.Frank - MySQL删库跑路/03.基本操作——表/04.显示表结构——desc.md","显示表结构——desc","/pages/e0b946/"],["05.Frank - MySQL删库跑路/03.基本操作——表/05.删除表——drop.md","删除表——drop","/pages/00e556/"],["05.Frank - MySQL删库跑路/03.基本操作——表/06.修改表——alter.md","修改表——alter","/pages/a89d89/"]]},{title:"基本操作——数据",collapsable:!0,children:[["05.Frank - MySQL删库跑路/04.基本操作——数据/01.插入数据——insert.md","插入数据——insert","/pages/bda483/"],["05.Frank - MySQL删库跑路/04.基本操作——数据/02.删除数据——delete.md","删除数据——delete","/pages/01b8a7/"],["05.Frank - MySQL删库跑路/04.基本操作——数据/03.清空表——truncate.md","清空表——truncate","/pages/fb0760/"],["05.Frank - MySQL删库跑路/04.基本操作——数据/04.更新数据——update.md","更新数据——update","/pages/417c02/"],["05.Frank - MySQL删库跑路/04.基本操作——数据/05.查询表数据(基本)——select.md","查询表数据(基本)——select","/pages/2d27de/"],["05.Frank - MySQL删库跑路/04.基本操作——数据/06.SQL语句区分.md","SQL语句区分","/pages/892416/"],["05.Frank - MySQL删库跑路/04.基本操作——数据/07.字符集编码问题.md","字符集编码问题","/pages/c9916e/"]]},{title:"数据类型",collapsable:!0,children:[["05.Frank - MySQL删库跑路/05.数据类型/01.数据库的数据类型问题.md","数据库的数据类型问题","/pages/88991f/"],["05.Frank - MySQL删库跑路/05.数据类型/02.数据类型.md","数据类型","/pages/ed2df9/"]]},{title:"列属性完整性",collapsable:!0,children:[["05.Frank - MySQL删库跑路/06.列属性完整性/01.列属性问题.md","列属性问题","/pages/525c9a/"],["05.Frank - MySQL删库跑路/06.列属性完整性/02.主键 primary key.md","主键 primary key","/pages/b8807f/"],["05.Frank - MySQL删库跑路/06.列属性完整性/03.唯一键 unique key.md","唯一键 unique key","/pages/dc235f/"],["05.Frank - MySQL删库跑路/06.列属性完整性/04.外键 foreign key.md","外键 foreign key","/pages/79f68c/"],["05.Frank - MySQL删库跑路/06.列属性完整性/05.外键的三种操作.md","外键的三种操作","/pages/6fb1f2/"],["05.Frank - MySQL删库跑路/06.列属性完整性/06.外键的置空、级联操作.md","外键的置空、级联操作","/pages/a2ee59/"],["05.Frank - MySQL删库跑路/06.列属性完整性/07.数据库完整性.md","数据库完整性","/pages/22b6f2/"],["05.Frank - MySQL删库跑路/06.列属性完整性/08.SQL内注释和代码注释.md","SQL内注释和代码注释","/pages/036a87/"]]},{title:"数据库设计思维",collapsable:!0,children:[["05.Frank - MySQL删库跑路/07.数据库设计思维/01.数据库设计基本概念.md","数据库设计基本概念","/pages/7bc52e/"],["05.Frank - MySQL删库跑路/07.数据库设计思维/02.实体和实体之间的关系.md","实体和实体之间的关系","/pages/881d02/"],["05.Frank - MySQL删库跑路/07.数据库设计思维/03.数据库设计三大范式.md","数据库设计三大范式","/pages/f839ed/"]]},{title:"单表查询",collapsable:!0,children:[["05.Frank - MySQL删库跑路/08.单表查询/00.select、from、dual、as.md","select、from、dual、as、where","/pages/fca44f/"],["05.Frank - MySQL删库跑路/08.单表查询/01.where.md","where","/pages/114a58/"],["05.Frank - MySQL删库跑路/08.单表查询/02.聚合函数.md","聚合函数","/pages/559548/"],["05.Frank - MySQL删库跑路/08.单表查询/03.模糊——like.md","模糊查询——like","/pages/7f812c/"],["05.Frank - MySQL删库跑路/08.单表查询/04.排序——order by.md","排序查询——order by","/pages/ccf2cc/"],["05.Frank - MySQL删库跑路/08.单表查询/05.分组——group by.md","分组查询——group by","/pages/229131/"],["05.Frank - MySQL删库跑路/08.单表查询/06.筛选——having.md","结果筛选——having","/pages/d65fc4/"],["05.Frank - MySQL删库跑路/08.单表查询/07.限制——limit.md","限制——limit","/pages/5cdf6f/"],["05.Frank - MySQL删库跑路/08.单表查询/08.去重——distinct.md","去重——distinct","/pages/425ca1/"]]},{title:"多表查询",collapsable:!0,children:[["05.Frank - MySQL删库跑路/09.多表查询/01.联合——union.md","联合——union","/pages/56c50b/"],["05.Frank - MySQL删库跑路/09.多表查询/02.连接——join.md","连接——join","/pages/653123/"]]}]}],"/03.Linux/":[{title:"学习笔记",collapsable:!0,children:[{title:"其它",collapsable:!0,children:[["02.学习笔记/04.其它/01.CentOS网络设置.md","CentOS网络设置","/pages/4e011c/"],["02.学习笔记/04.其它/02.Arch Linux 安装过程.md","Arch Linux 安装过程","/pages/affb3e/"],["02.学习笔记/04.其它/03.Linux磁盘分区参考表.md","Linux磁盘分区参考表","/pages/a89c71/"],["02.学习笔记/04.其它/04.Linux中不同颜色代表的文件类型.md","Linux中不同颜色代表的文件类型","/pages/30b829/"],["02.学习笔记/04.其它/05.配置Yum源.md","配置Yum源","/pages/544d08/"]]}]},{title:"Frank - Linxu现代方法",collapsable:!0,children:[{title:"必知",collapsable:!0,children:[["05.Frank - Linxu现代方法/01.必知/00.步入 Linux 的现代方法.md","步入 Linux 的现代方法","/pages/0c031c/"],["05.Frank - Linxu现代方法/01.必知/01.步入Linux的世界.md","步入Linux的世界","/pages/8975a4/"],["05.Frank - Linxu现代方法/01.必知/02.Linux路径.md","Linux路径","/pages/d1d9d6/"],["05.Frank - Linxu现代方法/01.必知/03.Linux根目录.md","Linux根目录","/pages/7866fe/"],["05.Frank - Linxu现代方法/01.必知/05.Linux Kernel.md","Linux Kernel","/pages/e8ee07/"]]},{title:"命令",collapsable:!0,children:[["05.Frank - Linxu现代方法/02.命令/00.Shell命令基础.md","Shell命令基础","/pages/11d275/"],["05.Frank - Linxu现代方法/02.命令/02.ls——进阶使用，遍历、匹配和过滤文件.md","ls——进阶使用，遍历、匹配和过滤文件","/pages/2a0898/"],["05.Frank - Linxu现代方法/02.命令/05.touch.md","touch","/pages/4ccd98/"],["05.Frank - Linxu现代方法/02.命令/06.cp.md","cp","/pages/38c84c/"]]},{title:"技巧",collapsable:!0,children:[["05.Frank - Linxu现代方法/03.技巧/01.熟练使用cd、ls命令.md","熟练使用cd、ls命令","/pages/adaf3b/"],["05.Frank - Linxu现代方法/03.技巧/02.Terminal中的快捷键.md","Terminal中的快捷键","/pages/84b95d/"],["05.Frank - Linxu现代方法/03.技巧/03.终端光标移动技巧.md","终端光标移动技巧","/pages/9576cc/"]]}]}],"/04.技术/":[{title:"技术文档",collapsable:!0,children:[["01.技术文档/00.SSH备忘单.md","SSH备忘单","/pages/254159/"],["01.技术文档/01.Git使用手册.md","Git使用手册","/pages/9a7ee40fc232253e"],["01.技术文档/02.Markdown使用教程.md","Markdown使用教程","/pages/ad247c4332211551"],["01.技术文档/03.npm常用命令.md","npm常用命令","/pages/61f2f95fd7da14fd"],["01.技术文档/10.npm packageJson属性详解.md","npm packageJson属性详解","/pages/dec4f3f00e71a312"],["01.技术文档/15.yaml语言教程.md","yaml语言教程","/pages/4e8444e2d534d14f"]]},{title:"Git",collapsable:!0,children:[["02.Git/00.Git介绍.md","Git介绍","/pages/baf5f9/"],["02.Git/33.《Git》学习笔记.md","《Git》学习笔记","/note/git"]]},{title:"GitHub技巧",collapsable:!0,children:[["22.GitHub技巧/01.GitHub高级搜索技巧.md","GitHub高级搜索技巧","/pages/4c778760be26d8b3"],["22.GitHub技巧/02.GitHub Actions 实现自动部署静态博客.md","GitHub Actions 实现自动部署静态博客","/pages/6b9d359ec5aa5019"],["22.GitHub技巧/03.GitHub Actions 定时运行代码：每天定时百度链接推送.md","GitHub Actions 定时运行代码：每天定时百度链接推送","/pages/f44d2f9ad04ab8d3"],["22.GitHub技巧/10.GitHub加速下载项目的方法.md","GitHub加速下载项目的方法","/pages/95331c6a9613faf8"]]},{title:"前端",collapsable:!0,children:[{title:"HTML",collapsable:!0,children:[["50.前端/10.HTML/10.常用meta整理.md","常用meta整理","/pages/8309a5b876fc95e3"]]},{title:"CSS",collapsable:!0,children:[["50.前端/20.CSS/00.CSS教程和技巧收藏.md","CSS教程和技巧收藏","/pages/c8f128/"],["50.前端/20.CSS/01.flex布局语法.md","flex布局语法","/pages/0a83b083bdf257cb"],["50.前端/20.CSS/02.flex布局案例-基础.md","flex布局案例-基础","/pages/ea6db1530c42ad51"],["50.前端/20.CSS/03.flex布局案例-骰子.md","flex布局案例-骰子","/pages/eff61bc8b4f4695d"],["50.前端/20.CSS/04.flex布局案例-圣杯布局.md","flex布局案例-圣杯布局","/pages/df9e7c7214fa5046"],["50.前端/20.CSS/05.flex布局案例-网格布局.md","flex布局案例-网格布局","/pages/85b5a3fe218a34b7"],["50.前端/20.CSS/06.flex布局案例-输入框布局.md","flex布局案例-输入框布局","/pages/05cc577fb51c7998"],["50.前端/20.CSS/07.CSS3之transition过渡.md","CSS3之transition过渡","/pages/02d7f59d98d87409"],["50.前端/20.CSS/08.CSS3之animation动画.md","CSS3之animation动画","/pages/c2c0432138f6e042"],["50.前端/20.CSS/20.「布局技巧」图片未加载前自动撑开元素高度.md","「布局技巧」图片未加载前自动撑开元素高度","/pages/3d52574260725aea"],["50.前端/20.CSS/30.文字在一行或多行时超出显示省略号.md","文字在一行或多行时超出显示省略号","/pages/42b66999cc27dc25"],["50.前端/20.CSS/35.从box-sizing属性入手，了解盒子模型.md","从box-sizing属性入手，了解盒子模型","/pages/20a978023139589d"],["50.前端/20.CSS/40.水平垂直居中的几种方式-案例.md","水平垂直居中的几种方式-案例","/pages/cb7cb251adba4bf7"],["50.前端/20.CSS/45.如何根据系统主题自动响应CSS深色模式.md","如何根据系统主题自动响应CSS深色模式","/pages/5dde351274f1e39d"],["50.前端/20.CSS/50.「css技巧」使用hover和attr()定制悬浮提示.md","「css技巧」使用hover和attr()定制悬浮提示","/pages/941581927b4a38f8"],["50.前端/20.CSS/60.CSS-function汇总.md","CSS-function汇总","/pages/3da0d7"]]}]}],"/05.英语/":[{title:"Khan Academy - 语法",collapsable:!0,children:[["01.Khan Academy - 语法/00.语法简介.md","语法简介","/pages/d872e5/"],{title:"名词",collapsable:!0,children:[["01.Khan Academy - 语法/01.名词/01.名词简介.md","名词简介","/pages/b37945/"],["01.Khan Academy - 语法/01.名词/02.名词类型.md","名词类型","/pages/c5da57/"],["01.Khan Academy - 语法/01.名词/03.不规则复数名词：基复数和不规则结尾.md","不规则复数名词：基复数和不规则结尾","/pages/f744b7/"],["01.Khan Academy - 语法/01.名词/04.不规则复数名词：突变复数和外来复数.md","不规则复数名词：突变复数和外来复数","/pages/9c0957/"]]},{title:"动词",collapsable:!0,children:[["01.Khan Academy - 语法/02.动词/01.动词简介.md","动词简介","/pages/379914/"],["01.Khan Academy - 语法/02.动词/02.动词时态.md","动词时态","/pages/22d116/"],["01.Khan Academy - 语法/02.动词/03.系动词和助动词.md","系动词和助动词","/pages/4a60fd/"],["01.Khan Academy - 语法/02.动词/04.不规则动词.md","不规则动词","/pages/6b1c2d/"],["01.Khan Academy - 语法/02.动词/05.语态.md","语态","/pages/1f8c91/"],["01.Khan Academy - 语法/02.动词/06.动词体和情态动词.md","动词体和情态动词","/pages/6ffc85/"]]},{title:"代词",collapsable:!0,children:[["01.Khan Academy - 语法/03.代词/01.代词简介.md","代词简介","/pages/76a49d/"],["01.Khan Academy - 语法/03.代词/02.人称代词.md","人称代词","/pages/a15720/"],["01.Khan Academy - 语法/03.代词/03.所有格代词.md","所有格代词","/pages/d1eca2/"]]}]}],"/06.记录/":[{title:"Monthly",collapsable:!0,children:[["01.Monthly/01.2022-03.md","2022-03","/pages/455805/"],["01.Monthly/02.2022-04.md","2022-04","/pages/fd3564/"],["01.Monthly/03.2022-05.md","2022-05","/pages/a0be6e/"]]},{title:"阅读",collapsable:!0,children:[["03.阅读/02.《梁永安：阅读、游历和爱情》.md","《梁永安：阅读、游历和爱情》","/pages/4c7197/"],["03.阅读/03.《傲慢与偏见》.md","《傲慢与偏见》","/pages/8fff1a/"],["03.阅读/04.《我们要自学》.md","《我们要自学》","/pages/fbe430/"],["03.阅读/05.《挪威的森林》.md","《挪威的森林》","/pages/86ac50/"]]},{title:"Others",collapsable:!0,children:[["10.Others/10.青钢影.md","青钢影","/pages/6010b8/"],["10.Others/51.Electronic drug.md","Electronic drug?","/pages/c1a476/"],["10.Others/52.Extravagant Spending on College Campus.md","Extravagant Spending on College Campus","/pages/c4b107/"]]}],"/07.更多/":[{title:"学习",collapsable:!0,children:[["01.学习/00.费曼学习法.md","费曼学习法","/pages/f2a556/"],["01.学习/01.笔记方法.md","笔记方法","/pages/e60c81/"],["01.学习/02.提高学习效率的策略.md","提高学习效率的策略","/pages/a8692ab3bdcb4588"],["01.学习/03.提高记忆的技巧.md","提高记忆的技巧","/pages/996822b2a2ca6e3b"],["01.学习/04.自律小建议.md","自律小建议","/pages/c3f302a03c8daf79"],["01.学习/05.处理问题的思路.md","处理问题的思路","/pages/9ba2b8fb13de1957"],["01.学习/10.搜索引擎使用技巧.md","搜索引擎使用技巧","/pages/ce818a"]]},{title:"编程",collapsable:!0,children:[["02.编程/00.什么是编程语言？.md","什么是编程语言？","/pages/4eb330/"],["02.编程/01.编程语言重要吗？.md","编程语言重要吗？","/pages/f28982/"],["02.编程/05.废话Java泛型编程.md","废话Java泛型编程","/pages/27d4fa/"]]},{title:"面试",collapsable:!0,children:[["03.面试/01.面试问题集锦.md","面试问题集锦","/pages/aea6571b7a8bae86"]]},{title:"心情杂货",collapsable:!0,children:[["05.心情杂货/01.一个完美主义者的自我救赎.md","一个完美主义者的自我救赎","/pages/2d615df9a36a98ed"],["05.心情杂货/10.反向拆解让人上瘾的套路，找回自律.md","反向拆解让人上瘾的套路，找回自律","/pages/d6d331/"]]},{title:"遭遇问题",collapsable:!0,children:[["09.遭遇问题/01.ssh connect to host github.com port 22 Connection refused.md","ssh connect to host github.com port 22 Connection refused","/pages/324a30/"]]},{title:"实用技巧",collapsable:!0,children:[["10.实用技巧/01.2分钟规则.md","2分钟规则","/pages/baaa02/"],["10.实用技巧/02.Clash绕过系统代理.md","Clash绕过系统代理","/pages/966fd0/"],["10.实用技巧/03.GitHub + jsDelivr + TinyPNG+ PicGo 打造稳定快速、高效免费图床.md","GitHub + jsDelivr + TinyPNG+ PicGo 打造稳定快速、高效免费图床","/pages/a5f73af5185fdf0a"],["10.实用技巧/04.关于WSL运行某些第三方命令很慢的原因.md","关于WSL运行某些第三方命令很慢的原因","/pages/9c98db/"],["10.实用技巧/10.VMware虚拟机科学上网.md","VMware虚拟机科学上网","/pages/83a38b/"]]},{title:"Interesting",collapsable:!0,children:[["11.Interesting/01.代码中的忒修斯之船.md","代码中的忒修斯之船","/pages/c1ff23/"]]},["99.友情链接.md","友情链接","/friends"],{title:"Khan Academy - 算法",collapsable:!0,children:[["110.Khan Academy - 算法/00.算法简介.md","算法简介","/pages/85794d/"]]}],"/08.收藏夹/":[["00.网站.md","网站","/pages/5b66ca/"],{title:"主题作者的收藏",collapsable:!0,children:[["05.主题作者的收藏/01.网站.md","网站","/pages/beb6c0bd8a66cea6"],["05.主题作者的收藏/02.常用的前端轮子.md","常用的前端轮子","/pages/47cf96/"]]}],"/《Git》学习笔记/":[{title:"手册",collapsable:!0,children:[["10.手册/00.常用Git命令清单.md","常用Git命令清单","/pages/8292d8/"],["10.手册/03.Git变基合并.md","Git变基合并","/pages/c10281/"],["10.手册/06.Git命令思维导图.md","Git命令思维导图","/pages/4cbc21/"]]},{title:"文档笔记",collapsable:!0,children:[["20.文档笔记/10.Git基础与命令.md","Git基础与命令","/pages/635088/"],["20.文档笔记/20.Git分支-分支原理.md","Git分支-分支原理","/pages/4bef1a/"],["20.文档笔记/30.Git分支的新建与合并-分支操作.md","Git分支的新建与合并-分支操作","/pages/ea5a8c/"],["20.文档笔记/40.Git分支管理-查看分支.md","Git分支管理-查看分支","/pages/a399b3/"],["20.文档笔记/50.Git分支开发工作流.md","Git分支开发工作流","/pages/49ee30/"],["20.文档笔记/60.Git分支-远程分支.md","Git分支-远程分支","/pages/574d62/"],["20.文档笔记/70.Git分支-变基.md","Git分支-变基","/pages/3a3247/"],["20.文档笔记/80.Git工具-查看修订版本.md","Git工具-查看修订版本","/pages/c984d1/"],["20.文档笔记/90.Git工具-交互式暂存.md","Git工具-交互式暂存","/pages/76d859/"],["20.文档笔记/100.Git工具-重写历史.md","Git工具-重写历史","/pages/1832fe/"],["20.文档笔记/110.Git工具-重置揭密.md","Git工具-重置揭密","/pages/d9e9c6/"]]}]},author:{name:"Jim",link:"https://github.com/JimFKppt"},blogger:{avatar:"https://cdn.jsdelivr.net/gh/JimFKppt/Pictures@master/static_files/img/Avatar-KeNan.jpg",name:"Jim FuckPPT",slogan:"Java小学生"},social:{icons:[{iconClass:"icon-youjian",title:"发邮件",link:"tj102030123@gmail.com"},{iconClass:"icon-github",title:"GitHub",link:"https://github.com/jimfkppt"},{iconClass:"icon-erji",title:"听音乐",link:"https://music.apple.com/cn/playlist/like/pl.u-JPAZbd9sLx97JJx?ls"}]},footer:{createYear:2022,copyrightInfo:'Jim Frank | <a href="https://github.com/xugaoyi/vuepress-theme-vdoing/blob/master/LICENSE" target="_blank">MIT License</a>'}},locales:{"/":{lang:"zh-CN",title:"知识库",description:"Java小学生",path:"/"}}},ll=(t(159),t(218),t(148),t(228)),cl=t(229),hl=(t(393),t(244),t(43));var dl={computed:{$filterPosts:function(){return this.$site.pages.filter((function(e){var n=e.frontmatter,t=n.pageComponent,a=n.article,i=n.home;return!(t||!1===a||!0===i)}))},$sortPosts:function(){return(e=this.$filterPosts).sort((function(e,n){var t=e.frontmatter.sticky,a=n.frontmatter.sticky;return t&&a?t==a?Object(hl.a)(e,n):t-a:t&&!a?-1:!t&&a?1:Object(hl.a)(e,n)})),e;var e},$sortPostsByDate:function(){return(e=this.$filterPosts).sort((function(e,n){return Object(hl.a)(e,n)})),e;var e},$groupPosts:function(){return function(e){for(var n={},t={},a=function(a,i){var o=e[a].frontmatter,r=o.categories,s=o.tags;"array"===Object(hl.n)(r)&&r.forEach((function(t){t&&(n[t]||(n[t]=[]),n[t].push(e[a]))})),"array"===Object(hl.n)(s)&&s.forEach((function(n){n&&(t[n]||(t[n]=[]),t[n].push(e[a]))}))},i=0,o=e.length;i<o;i++)a(i);return{categories:n,tags:t}}(this.$sortPosts)},$categoriesAndTags:function(){return function(e){var n=[],t=[];for(var a in e.categories)n.push({key:a,length:e.categories[a].length});for(var i in e.tags)t.push({key:i,length:e.tags[i].length});return{categories:n,tags:t}}(this.$groupPosts)}}};Li.component(ll.default),Li.component(cl.default);function ul(e){return e.toString().padStart(2,"0")}t(397);Li.component("Badge",(function(){return Promise.all([t.e(0),t.e(3)]).then(t.bind(null,882))})),Li.component("CodeBlock",(function(){return Promise.resolve().then(t.bind(null,228))})),Li.component("CodeGroup",(function(){return Promise.resolve().then(t.bind(null,229))}));t(398);var ml,pl,gl=t(50),fl=(t(401),t(142),t(227)),bl=t.n(fl),yl=t(107);"valine"===(pl="gitalk")?t.e(384).then(t.t.bind(null,500,7)).then((function(e){return e.default})):"gitalk"===pl&&Promise.all([t.e(0),t.e(383)]).then(t.t.bind(null,501,7)).then((function(){return t.e(382).then(t.t.bind(null,502,7))})).then((function(e){return ml=e.default}));function vl(e,n){var t={};return Reflect.ownKeys(e).forEach((function(a){if("string"==typeof e[a])try{t[a]=bl.a.render(e[a],n)}catch(n){console.warn('Comment config option error at key named "'.concat(a,'"')),console.warn("More info: ".concat(n.message)),t[a]=e[a]}else t[a]=e[a]})),t}console.log('How to use "'.concat("gitalk",'" in ').concat(yl.name,"@v").concat(yl.version,":"),yl.homepage);var wl={render:function(e,n){var t=document.createElement("div");t.id=n,document.querySelector("main.page").appendChild(t),new ml(vl({clientID:"17024051ee83b40fb4b3",clientSecret:"8e206147ee7024cff0324d92d43a95d36db44e32",repo:"blog_gitalk_comment",owner:"JimFKppt",admin:["JimFKppt"],pagerDirection:"last",id:"<%- (frontmatter.permalink || frontmatter.to.path).slice(-16) %>",title:"「评论」<%- frontmatter.title %>",labels:["Gitalk","Comment"],body:"页面：<%- window.location.origin + (frontmatter.to.path || window.location.pathname) %>"},{frontmatter:e})).render(n)},clear:function(e){var n=document.querySelector("#".concat(e));return n&&n.remove(),!0}},xl=null;function kl(e){return wl.clear("vuepress-plugin-comment")}function Tl(e){return!1!==e.comment&&!1!==e.comments}function El(e){if(clearTimeout(xl),document.querySelector("main.page"))return wl.render(e,"vuepress-plugin-comment");xl=setTimeout((function(){return El(e)}),200)}var Al={mounted:function(){var e=this;xl=setTimeout((function(){var n=Object(gl.a)({to:{},from:{}},e.$frontmatter);kl()&&Tl(n)&&El(n)}),1e3),this.$router.afterEach((function(n,t){if(!n||!t||n.path!==t.path){var a=Object(gl.a)({to:n,from:t},e.$frontmatter);kl()&&Tl(a)&&El(a)}}))}},Sl=Object(il.a)(Al,(function(){var e=this.$createElement;return(this._self._c||e)("div")}),[],!1,null,null,null).exports,jl=[function(e){e.Vue,e.options,e.router,e.siteData},function(e){var n=e.Vue,t=(e.options,e.router,e.siteData);t.pages.map((function(e){var n=e.frontmatter,a=n.date,i=n.author;"string"==typeof a&&"Z"===a.charAt(a.length-1)&&(e.frontmatter.date=function(e){e instanceof Date||(e=new Date(e));return"".concat(e.getUTCFullYear(),"-").concat(ul(e.getUTCMonth()+1),"-").concat(ul(e.getUTCDate())," ").concat(ul(e.getUTCHours()),":").concat(ul(e.getUTCMinutes()),":").concat(ul(e.getUTCSeconds()))}(a)),i?e.author=i:t.themeConfig.author&&(e.author=t.themeConfig.author)})),n.mixin(dl)},{},function(e){e.Vue.mixin({computed:{$dataBlock:function(){return this.$options.__data__block__}}})},{},{},function(e){e.router;"undefined"!=typeof window&&function(){var e=document.createElement("script"),n=window.location.protocol.split(":")[0];e.src="https"===n?"https://zz.bdstatic.com/linksubmit/push.js":"http://push.zhanzhang.baidu.com/push.js";var t=document.getElementsByTagName("script")[0];t.parentNode.insertBefore(e,t)}()},function(e){var n=e.router;"undefined"!=typeof window&&(window._hmt=window._hmt||[],function(){var e=document.createElement("script");e.src="https://hm.baidu.com/hm.js?503f098e7e5b3a5b5d8c5fc2938af002";var n=document.getElementsByTagName("script")[0];n.parentNode.insertBefore(e,n)}(),n.afterEach((function(e){_hmt.push(["_trackPageview",e.fullPath])})))},function(e){e.Vue.component("Comment",Sl)}],Il=["Comment"];t(221);function zl(e,n){return(zl=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e})(e,n)}t(222);function Cl(e){return(Cl=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Bl(e,n){if(n&&("object"===Sr(n)||"function"==typeof n))return n;if(void 0!==n)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function Pl(e){var n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var t,a=Cl(e);if(n){var i=Cl(this).constructor;t=Reflect.construct(a,arguments,i)}else t=a.apply(this,arguments);return Bl(this,t)}}var Ll=function(e){!function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),n&&zl(e,n)}(t,e);var n=Pl(t);function t(){return cs(this,t),n.apply(this,arguments)}return ds(t)}(function(){function e(){cs(this,e),this.store=new Li({data:{state:{}}})}return ds(e,[{key:"$get",value:function(e){return this.store.state[e]}},{key:"$set",value:function(e,n){Li.set(this.store.state,e,n)}},{key:"$emit",value:function(){var e;(e=this.store).$emit.apply(e,arguments)}},{key:"$on",value:function(){var e;(e=this.store).$on.apply(e,arguments)}}]),e}());Object.assign(Ll.prototype,{getPageAsyncComponent:Ur,getLayoutAsyncComponent:Nr,getAsyncComponent:Rr,getVueComponent:Wr});var Jl={install:function(e){var n=new Ll;e.$vuepress=n,e.prototype.$vuepress=n}};function Ol(e){e.beforeEach((function(n,t,a){if(_l(e,n.path))a();else if(/(\/|\.html)$/.test(n.path))if(/\/$/.test(n.path)){var i=n.path.replace(/\/$/,"")+".html";_l(e,i)?a(i):a()}else a();else{var o=n.path+"/",r=n.path+".html";_l(e,r)?a(r):_l(e,o)?a(o):a()}}))}function _l(e,n){var t=n.toLowerCase();return e.options.routes.some((function(e){return e.path.toLowerCase()===t}))}var Fl={props:{pageKey:String,slotKey:{type:String,default:"default"}},render:function(e){var n=this.pageKey||this.$parent.$page.key;return $r("pageKey",n),Li.component(n)||Li.component(n,Ur(n)),Li.component(n)?e(n):e("")}},Dl={functional:!0,props:{slotKey:String,required:!0},render:function(e,n){var t=n.props,a=n.slots;return e("div",{class:["content__".concat(t.slotKey)]},a()[t.slotKey])}},ql={computed:{openInNewWindowTitle:function(){return this.$themeLocaleConfig.openNewWindowText||"(opens new window)"}}},Hl=(t(406),t(407),Object(il.a)(ql,(function(){var e=this.$createElement,n=this._self._c||e;return n("span",[n("svg",{staticClass:"icon outbound",attrs:{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",focusable:"false",x:"0px",y:"0px",viewBox:"0 0 100 100",width:"15",height:"15"}},[n("path",{attrs:{fill:"currentColor",d:"M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"}}),this._v(" "),n("polygon",{attrs:{fill:"currentColor",points:"45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"}})]),this._v(" "),n("span",{staticClass:"sr-only"},[this._v(this._s(this.openInNewWindowTitle))])])}),[],!1,null,null,null).exports);function Ml(){return(Ml=Object(a.a)(regeneratorRuntime.mark((function e(n){var t,a,i,o;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t="undefined"!=typeof window&&window.__VUEPRESS_ROUTER_BASE__?window.__VUEPRESS_ROUTER_BASE__:sl.routerBase||sl.base,Ol(a=new Er({base:t,mode:"history",fallback:!1,routes:rl,scrollBehavior:function(e,n,t){return t||(e.hash?!Li.$vuepress.$get("disableScrollBehavior")&&{selector:decodeURIComponent(e.hash)}:{x:0,y:0})}})),i={},e.prev=4,e.next=7,Promise.all(jl.filter((function(e){return"function"==typeof e})).map((function(e){return e({Vue:Li,options:i,router:a,siteData:sl,isServer:n})})));case 7:e.next=12;break;case 9:e.prev=9,e.t0=e.catch(4),console.error(e.t0);case 12:return o=new Li(Object.assign(i,{router:a,render:function(e){return e("div",{attrs:{id:"app"}},[e("RouterView",{ref:"layout"}),e("div",{class:"global-ui"},Il.map((function(n){return e(n)})))])}})),e.abrupt("return",{app:o,router:a});case 14:case"end":return e.stop()}}),e,null,[[4,9]])})))).apply(this,arguments)}Li.config.productionTip=!1,Li.use(Er),Li.use(Jl),Li.mixin(function(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:Li;Ar(n),t.$vuepress.$set("siteData",n);var a=e(t.$vuepress.$get("siteData")),i=new a,o=Object.getOwnPropertyDescriptors(Object.getPrototypeOf(i)),r={};return Object.keys(o).reduce((function(e,n){return n.startsWith("$")&&(e[n]=o[n].get),e}),r),{computed:r}}((function(e){return function(){function n(){cs(this,n)}return ds(n,[{key:"setPage",value:function(e){this.__page=e}},{key:"$site",get:function(){return e}},{key:"$themeConfig",get:function(){return this.$site.themeConfig}},{key:"$frontmatter",get:function(){return this.$page.frontmatter}},{key:"$localeConfig",get:function(){var e,n,t=this.$site.locales,a=void 0===t?{}:t;for(var i in a)"/"===i?n=a[i]:0===this.$page.path.indexOf(i)&&(e=a[i]);return e||n||{}}},{key:"$siteTitle",get:function(){return this.$localeConfig.title||this.$site.title||""}},{key:"$canonicalUrl",get:function(){var e=this.$page.frontmatter.canonicalUrl;return"string"==typeof e&&e}},{key:"$title",get:function(){var e=this.$page,n=this.$page.frontmatter.metaTitle;if("string"==typeof n)return n;var t=this.$siteTitle,a=e.frontmatter.home?null:e.frontmatter.title||e.title;return t?a?a+" | "+t:t:a||"VuePress"}},{key:"$description",get:function(){var e=function(e){if(e){var n=e.filter((function(e){return"description"===e.name}))[0];if(n)return n.content}}(this.$page.frontmatter.meta);return e||(this.$page.frontmatter.description||this.$localeConfig.description||this.$site.description||"")}},{key:"$lang",get:function(){return this.$page.frontmatter.lang||this.$localeConfig.lang||"en-US"}},{key:"$localePath",get:function(){return this.$localeConfig.path||"/"}},{key:"$themeLocaleConfig",get:function(){return(this.$site.themeConfig.locales||{})[this.$localePath]||{}}},{key:"$page",get:function(){return this.__page?this.__page:function(e,n){for(var t=0;t<e.length;t++){var a=e[t];if(a.path.toLowerCase()===n.toLowerCase())return a}return{path:"",frontmatter:{}}}(this.$site.pages,this.$route.path)}}]),n}()}),sl)),Li.component("Content",Fl),Li.component("ContentSlotsDistributor",Dl),Li.component("OutboundLink",Hl),Li.component("ClientOnly",{functional:!0,render:function(e,n){var t=n.parent,a=n.children;if(t._isMounted)return a;t.$once("hook:mounted",(function(){t.$forceUpdate()}))}}),Li.component("Layout",Nr("Layout")),Li.component("NotFound",Nr("NotFound")),Li.prototype.$withBase=function(e){var n=this.$site.base;return"/"===e.charAt(0)?n+e.slice(1):e},window.__VUEPRESS__={version:"1.9.5",hash:"f8930a18"},function(e){return Ml.apply(this,arguments)}(!1).then((function(e){var n=e.app;e.router.onReady((function(){n.$mount("#app")}))}))}]);