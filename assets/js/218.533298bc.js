(window.webpackJsonp=window.webpackJsonp||[]).push([[218],{717:function(t,a,s){"use strict";s.r(a);var n=s(21),v=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("在 Java 中，main 方法的声明通常如下：")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// do something ...")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("如果你刚学习 Java，那么肯定会对 main 方法声明里的 "),s("code",[t._v("static")]),t._v(" 产生兴趣，它到底意味着什么？")]),t._v(" "),s("p",[t._v("我们都知道 main 方法是程序的 “入口”，但是不管是老师还是各种教程，他们在跟初学者讲解 main 方法的时候，几乎都对 "),s("code",[t._v("static")]),t._v(" 这个关键字闭口不提，要么就是一带而过。比如他们可能会这样说：“先别管那么多，反正每次这样敲就行了”。")]),t._v(" "),s("p",[t._v("这也情有可原，因为 "),s("code",[t._v("static")]),t._v(" 多少涉及了面向对象的概念。跟初学者讲吧，又很难把它讲清楚，不讲吧，初学者就是觉得别扭。")]),t._v(" "),s("p",[t._v("但是，老师不教我们就不学了吗？如果不去深究一番，那初学者就永远是初学者。")]),t._v(" "),s("p",[t._v("当我们学过面向对象之后再回头来看就不那么别扭了。")]),t._v(" "),s("h2",{attrs:{id:"static-members"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#static-members"}},[t._v("#")]),t._v(" Static members")]),t._v(" "),s("p",[t._v("静态成员代表的是类和所有实例 “公有” 的。")]),t._v(" "),s("p",[t._v("静态成员有三种：")]),t._v(" "),s("ol",[s("li",[t._v("静态变量 Static variables")]),t._v(" "),s("li",[t._v("静态常量 Static constants")]),t._v(" "),s("li",[t._v("静态方法 Static methods")])]),t._v(" "),s("p",[t._v("前两者可合并为"),s("strong",[t._v("静态字段")]),t._v("（Static fields）。此时静态成员可分为两种：静态字段、静态方法。")]),t._v(" "),s("p",[t._v("回忆一下，我们每次要在 main 方法中使用其他类的字段或方法时，是不是需要先实例化这个类？或者我们使用一些工具类（Utility class）时，是不是直接用类名调用字段或方法？")]),t._v(" "),s("p",[t._v("这些都跟 "),s("code",[t._v("static")]),t._v(" 方法的特性有关。")]),t._v(" "),s("p",[s("code",[t._v("static")]),t._v(" 方法的特性：")]),t._v(" "),s("ol",[s("li",[t._v("静态方法内只能访问静态字段，不能访问非静态字段")]),t._v(" "),s("li",[t._v("静态方法内不能调用实例方法（Instance method）")]),t._v(" "),s("li",[t._v("静态方法内不能使用 "),s("code",[t._v("this")]),t._v(" 关键字，静态成员是 “公有” 的")])]),t._v(" "),s("h2",{attrs:{id:"未完待续。。。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#未完待续。。。"}},[t._v("#")]),t._v(" // 未完待续。。。")])])}),[],!1,null,null,null);a.default=v.exports}}]);