(window.webpackJsonp=window.webpackJsonp||[]).push([[127],{626:function(e,a,t){"use strict";t.r(a);var s=t(21),n=Object(s.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("Many structural design patterns are needed to avoid unnecessary work and rewriting of code many times over. Usually, these patterns are made in such a way that you can avoid interfering with classes that were previously defined. The pattern that we will discuss in this topic is no different. This design pattern allows you to add new functions to objects, excluding changes to them. It's called the "),t("em",[e._v("decorator design pattern")]),e._v(".")]),e._v(" "),t("h2",{attrs:{id:"decorator-design-pattern"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#decorator-design-pattern"}},[e._v("#")]),e._v(" Decorator design pattern")]),e._v(" "),t("p",[e._v("A "),t("strong",[e._v("decorator")]),e._v(" is a structural design pattern that allows using special wrappers for objects, giving them new functionality while avoiding changes to their structure. This approach simplifies the coding process by delegating the implementation of new functions to other classes, instead of rewriting new object classes. So you can say that the main idea of this pattern is focused around wrapper objects. But what is a wrapper?")]),e._v(" "),t("p",[e._v("A "),t("strong",[e._v("wrapper")]),e._v(" (or decorator) is an object that works with your initial object in a way that alters its behavior. "),t("em",[e._v("Wrapper")]),e._v(" shares the same interface and functions with that object. But, in case the user needs to call the initial object, the wrapper will pass the user's request through itself. In this process, there can be alteration on a result.")]),e._v(" "),t("p",[e._v("This approach is useful when you can't just modify your class and it will be hard to extend it with some child objects. Using a decorator, you can add new behaviors and even use multiple level wrappers, without touching any part of the existing class. But this can be a little tricky to implement, considering that you may end up being unable to remove some of the wrappers without ruining all of the code.")]),e._v(" "),t("h2",{attrs:{id:"decorator-implementation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#decorator-implementation"}},[e._v("#")]),e._v(" Decorator implementation")]),e._v(" "),t("p",[e._v("Let's use the pizza-making process as an example. Cooks make pizza. They have abundant options for toppings and types of pizza. But in the end, a pizza is just some dough with something on top of it. So, if we try to depict the pizza-making process as code, we can create a new class for each pizza type. And if we want to create combinations of pizza toppings, we'll end up with a large number of classes which will complicate your work.")]),e._v(" "),t("p",[e._v("So, to avoid this unnecessary expansion of code, you can use the decorator pattern:")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://ucarecdn.com/75abe304-f718-444d-8ef3-f41b580d78c2/",alt:"img"}})]),e._v(" "),t("p",[e._v("Using this pattern, we need to introduce these elements:")]),e._v(" "),t("ul",[t("li",[e._v("an interface that represents methods for basic pizza making;")]),e._v(" "),t("li",[e._v("a class that creates our pizza;")]),e._v(" "),t("li",[e._v("one base wrapper which will store our pizza object to combine it with our topping wrappers;")]),e._v(" "),t("li",[e._v("for this particular example, we'll have two wrappers for pizza toppings.")])]),e._v(" "),t("p",[e._v("If we look at the resulting structure as a class diagram, it will look similar to this:")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://ucarecdn.com/a5efcb49-edaf-4982-bd27-076471dd0164/",alt:"img"}})]),e._v(" "),t("h2",{attrs:{id:"decorator-in-pseudocode"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#decorator-in-pseudocode"}},[e._v("#")]),e._v(" Decorator in pseudocode")]),e._v(" "),t("p",[e._v("Now let's try to depict this pattern in pseudocode. First of all, we need to describe our "),t("code",[e._v("Pizza")]),e._v(" interface:")]),e._v(" "),t("div",{staticClass:"language-no-highlight line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("interface Pizza is\n  method MakePizza()\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])]),t("p",[e._v("Here, we described all common methods for both our pizza maker and pizza wrapper. Next, we'll describe them as "),t("code",[e._v("PlainPizza")]),e._v(" class and "),t("code",[e._v("ToppingWrapper")]),e._v(":")]),e._v(" "),t("div",{staticClass:"language-no-highlight line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('class PlainPizza implements Pizza is\n  method cook() is\n    return "Pizza"\n\n\nclass ToppingWrapper implements Pizza is\n  field pizza: Pizza\n\n  constructor pizzaWrapper(Pizza pizza)\n    this.pizza = pizza\n\n  method cook() is\n    pizza.cook()\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br")])]),t("p",[e._v("Both these classes will implement the "),t("code",[e._v("Pizza")]),e._v(" interface. Our "),t("code",[e._v("PlainPizza")]),e._v(" will return an object that represents a simple pizza that will be referenced within the "),t("code",[e._v("ToppingWrapper")]),e._v(" class and then combined with our other wrappers.")]),e._v(" "),t("p",[e._v("Next, we'll define our "),t("code",[e._v("Pepperoni")]),e._v(" and "),t("code",[e._v("HotPepper")]),e._v(" wrappers:")]),e._v(" "),t("div",{staticClass:"language-no-highlight line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('class Pepperoni extends ToppingWrapper is\n  method cook() is\n    return pizza.cook() + "Pepperoni "\n\nclass HotPepper extends ToppingWrapper is\n  method cook() is\n    return pizza.cook() + "HotPepper "\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br")])]),t("p",[e._v("As you can see, these wrappers will add some additional parts to our existing objects.")]),e._v(" "),t("h2",{attrs:{id:"example-of-using-decorator-pattern"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#example-of-using-decorator-pattern"}},[e._v("#")]),e._v(" Example of using decorator pattern")]),e._v(" "),t("p",[e._v("When we have all of our classes ready, we can call our topping wrappers in a client code, in order to add some new parts to our initial object:")]),e._v(" "),t("div",{staticClass:"language-no-highlight line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('//Client code:\n\nPizza pepperoni = new Pepperoni(new PlainPizza()) //decorate plain pizza\nprint("Description: " + pepperoni.cook())\n\n//Output:\n//Description: Pizza Pepperoni\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br")])]),t("p",[e._v("If we call our "),t("code",[e._v("PlainPizza")]),e._v(" constructor inside of the "),t("code",[e._v("Pepperoni")]),e._v(" wrapper, we will have a modified object with additional parts. We can also put one wrapper inside of another. The result will look like this:")]),e._v(" "),t("div",{staticClass:"language-no-highlight line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('//Client code:\n\nPizza pepperoni = new Pepperoni(new PlainPizza()) //decorate plain pizza\nPizza hotPepperoni = new HotPepper(pepperoni) //decorate already decorated pizza\nprint("Description: " + hotPepperoni.cook())\n\n//Output:\n//Description: Pizza Pepperoni HotPepper\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br")])]),t("h2",{attrs:{id:"conclusion"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#conclusion"}},[e._v("#")]),e._v(" Conclusion")]),e._v(" "),t("p",[e._v("Using the decorator design pattern, you can add new functions to existing code, while reducing the possibility of ruining it. By delegating all new functions and responsibilities to new wrapper objects, our code will be able to contain more variations of your objects. This could potentially simplify your coding process.")])])}),[],!1,null,null,null);a.default=n.exports}}]);