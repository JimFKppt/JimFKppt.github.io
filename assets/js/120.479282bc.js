(window.webpackJsonp=window.webpackJsonp||[]).push([[120],{618:function(e,t,i){"use strict";i.r(t);var o=i(21),n=Object(o.a)({},(function(){var e=this,t=e.$createElement,i=e._self._c||t;return i("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[i("p",[e._v("Suppose you need to choose one of several algorithms to solve a problem. How can you pick the best one? To do it, you need to measure the algorithm efficiency somehow.")]),e._v(" "),i("p",[e._v("One of the options might be to measure the time your program needs to process its input. However, different computers may take different time to process the same data. Furthermore, the processing time may depend on the data itself. We obviously need something more universal. So, let's try to estimate the efficiency using "),i("strong",[e._v("big O notation.")])]),e._v(" "),i("h2",{attrs:{id:"input-size"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#input-size"}},[e._v("#")]),e._v(" Input size")]),e._v(" "),i("p",[e._v("What does an algorithm usually do? It makes some calculations. Let's call "),i("strong",[e._v("operations")]),e._v(" the basic actions, such as addition, multiplication, comparison, variable assignment, etc. Of course, the calculation time depends on the machine, but it doesn't matter now because we want to compare algorithms, not machines. Now let's try to estimate the number of operations in an algorithm!"),i("img",{attrs:{src:"https://ucarecdn.com/f4233b0c-4d4e-498e-84ae-772c9ed09c39/",alt:"img"}})]),e._v(" "),i("p",[e._v("Buses aren't always punctual, are they? One day it may happen that they are there on time, while the other day they will take a lifetime to arrive. You can't blame solely the driver for that: the time of the trip depends directly on the number of passengers on the bus. The more passengers, the more stops, the longer the time to arrive. Likewise, the running time of an algorithm depends on the "),i("strong",[e._v("input data.")]),e._v(" Naturally, the program will take a different time to proceed with 10 or 1 000 000 numbers. We will use the term "),i("strong",[e._v("input size")]),e._v(" as a proxy measure of the size of input data. If you need to work with "),i("strong",[e._v("m")]),e._v(" numbers, then "),i("strong",[e._v("m")]),e._v(" is the input size. The input size isn’t always the amount of the input data itself. If you need to find the first "),i("strong",[i("em",[e._v("*")]),e._v("***n*n******")]),e._v("* "),i("a",{attrs:{href:"https://en.wikipedia.org/wiki/Prime_number",target:"_blank",rel:"noopener noreferrer"}},[e._v("prime numbers"),i("OutboundLink")],1),e._v(", then searching for 10 first primes or 10 000 first primes will also take a different time, however, you only enter a single number "),i("strong",[e._v("n")]),e._v(" as input. In such cases, that number’s value is typically considered the input size.")]),e._v(" "),i("p",[e._v("If we can estimate how the number of operations depends on the input size, we will have a machine-independent measure of algorithm complexity. This is exactly what we need! Also, if we want to find a good algorithm, we are mostly interested in its behavior with big data. For this, we can compare the behavior of the algorithm’s running time with some standard functions.")]),e._v(" "),i("h2",{attrs:{id:"big-o-notation"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#big-o-notation"}},[e._v("#")]),e._v(" Big O notation")]),e._v(" "),i("p",[e._v("As we already mentioned, we will use the "),i("strong",[e._v("big O notation")]),e._v(" to measure the efficiency of algorithms. As a matter of fact, we have borrowed this symbol from mathematics; however, we shall not worry about the mathematical meaning or definition of the big O. Less formally, we can say that an algorithm has the "),i("strong",[e._v("time complexity")]),e._v(" O(f(n))"),i("em",[e._v("O")]),e._v("("),i("em",[e._v("f")]),e._v("("),i("em",[e._v("n")]),e._v(")) if its number of operations grows bigger similar to (or slower than) the function f(n)"),i("em",[e._v("f")]),e._v("("),i("em",[e._v("n")]),e._v(") when the input size n"),i("em",[e._v("n")]),e._v(" is a large number. In order to avoid unnecessary abstractness, let's consider the following task: given a n\\times n"),i("em",[e._v("n")]),e._v("×"),i("em",[e._v("n")]),e._v(" table with integers in its cells. Find the number k"),i("em",[e._v("k")]),e._v(" in the given table.")]),e._v(" "),i("p",[i("img",{attrs:{src:"https://ucarecdn.com/e619ff5f-8741-42a5-bf9d-c6abc51a613d/",alt:"img"}})]),e._v(" "),i("p",[e._v("Alice and Bob have come up with their own algorithms to solve the problem. Bob's algorithm consists in scanning every cell of the table and checking if the corresponding value is equal to k"),i("em",[e._v("k")]),e._v(". Well, this implies a maximum of n^2"),i("em",[e._v("n")]),e._v("2 comparisons, which means that the time complexity of Bob's algorithm is O(n^2)"),i("em",[e._v("O")]),e._v("("),i("em",[e._v("n")]),e._v("2). On the other hand, Alice somehow knows earlier in which column the number k"),i("em",[e._v("k")]),e._v(" will be located, hence, she only needs to scan the elements of that column. A column consists of n"),i("em",[e._v("n")]),e._v(" cells, meaning that Alice's algorithm will take O(n)"),i("em",[e._v("O")]),e._v("("),i("em",[e._v("n")]),e._v(") time.")]),e._v(" "),i("p",[e._v("Basically, on a table 2\\times 22×2, Bob will have to perform a maximum of 44 operations; meanwhile, Alice will perform no more than 22. Not a big difference really, is it? What if we have a table n\\times n"),i("em",[e._v("n")]),e._v("×"),i("em",[e._v("n")]),e._v(" for a large n"),i("em",[e._v("n")]),e._v("? In this case, n^2"),i("em",[e._v("n")]),e._v("2 will be considerably bigger than n"),i("em",[e._v("n")]),e._v(", as shown below. This is exactly what determines the efficiency of an algorithm – the way it behaves with large input sizes. Hence, we conclude that Alice's algorithm is faster than Bob's, as the big O notation suggests.")]),e._v(" "),i("p",[e._v("However, a simple question arises: why can't we write simply n^2"),i("em",[e._v("n")]),e._v("2 or n"),i("em",[e._v("n")]),e._v(" for the complexities? Why do we need to add this beautiful round letter in front of these functions? Well, imagine that the element k"),i("em",[e._v("k")]),e._v(" is placed in the first cell of the table. Bob will find it immediately and terminate his algorithm. How many steps does he perform: n^2"),i("em",[e._v("n")]),e._v("2? No, just one.")]),e._v(" "),i("p",[i("img",{attrs:{src:"https://ucarecdn.com/57ac2090-8c2c-4bb9-94df-948b068ab3c7/",alt:"img"}})]),e._v(" "),i("p",[e._v("That is why we use the big O: roughly speaking, it describes the upper bound for the function's growth rate. This is one of the big O notation's essential advantages. It means that you can calculate how much time to allocate for processing a certain amount of input data and be sure that the algorithm will process it all in due time. In practice, an algorithm might sometimes work even better than what the big O notation shows for its complexity, but not worse.")]),e._v(" "),i("h2",{attrs:{id:"common-growth-rates"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#common-growth-rates"}},[e._v("#")]),e._v(" Common growth rates")]),e._v(" "),i("p",[e._v("Below are, from best to worse, some common values of the big O function for the time complexity, also known as complexity classes.")]),e._v(" "),i("ul",[i("li",[e._v("O(1)"),i("em",[e._v("O")]),e._v("(1) ("),i("strong",[e._v("constant time")]),e._v("). The algorithm performs a constant number of operations. Maybe one, two, twenty-six, or two hundred – it doesn't matter. What is important is that it doesn't depend on the input size. Typical algorithms of this class include calculating the answer using a direct formula, printing a couple of values, all letters of the English alphabet, etc.")]),e._v(" "),i("li",[e._v("O(\\log n)"),i("em",[e._v("O")]),e._v("(log"),i("em",[e._v("n")]),e._v(") ("),i("strong",[e._v("logarithmic time")]),e._v("). Perhaps a quick reminder on logarithms is necessary. We usually refer to logarithms of base 2; however, the base does not affect the class. By definition, \\log_2nlog2"),i("em",[e._v("n")]),e._v(" equals the number of times n"),i("em",[e._v("n")]),e._v(" must be divided by 22 to get 11. That being said, it should not be difficult to guess that such algorithms divide the input size into "),i("strong",[e._v("halves")]),e._v(" at each step. They are relatively fast: if the size of the input is huge, say, 2^{31}231 (programmers should know the importance of this number), the algorithm will perform approximately \\log_2(2^{31}) = 31log2(231)=31 operations, which is pretty effective.")]),e._v(" "),i("li",[e._v("O(n)"),i("em",[e._v("O")]),e._v("("),i("em",[e._v("n")]),e._v(") ("),i("strong",[e._v("linear time")]),e._v("). The time is proportional to the input size, i.e., the time grows linearly as the input size increases. Often, such algorithms are iterated only once. They occur quite frequently, because it is usually necessary to go through every input element before calculating the final answer. This makes the O(n)"),i("em",[e._v("O")]),e._v("("),i("em",[e._v("n")]),e._v(") class one of the most effective classes in practice.")]),e._v(" "),i("li",[e._v("O(n^2)"),i("em",[e._v("O")]),e._v("("),i("em",[e._v("n")]),e._v("2) ("),i("strong",[e._v("quadratic time")]),e._v("). Normally, such algorithms go through all pairs of input elements. Why? Well, mathematics is generous, it constantly provides us with important results: in this case, basic maths confirms that the number of unordered pairs in a set of n"),i("em",[e._v("n")]),e._v(" elements is equal to \\frac{n(n-1)}{2}2"),i("em",[e._v("n")]),e._v("("),i("em",[e._v("n")]),e._v("−1), which, as we will learn later in this topic, is O(n^2)"),i("em",[e._v("O")]),e._v("("),i("em",[e._v("n")]),e._v("2). If you find it scary or difficult to understand, it is completely normal, it happens to the best of us. On the other hand, for those who are familiar with programming terms, the following sentence might come in handy: quadratic time algorithms usually contain two nested loops.")]),e._v(" "),i("li",[e._v("O(2^n)"),i("em",[e._v("O")]),e._v("(2"),i("em",[e._v("n")]),e._v(") ("),i("strong",[e._v("exponential time")]),e._v("). Just in case, let's mention that 2^n2"),i("em",[e._v("n")]),e._v(" is the same as multiplying 22 by itself n"),i("em",[e._v("n")]),e._v(" times. Again, maths states that the number of subsets of a set of n"),i("em",[e._v("n")]),e._v(" elements is equal to 2^n2"),i("em",[e._v("n")]),e._v(", therefore, it is reasonable to expect that such algorithms scan all the subsets of the input elements. It is worth noting that this class is extremely inefficient in practice; even for small input sizes, the time taken by the algorithm will be remarkably high.")])]),e._v(" "),i("p",[e._v("There are also other less common complexity classes, which you will come across in some following topics:")]),e._v(" "),i("ul",[i("li",[e._v("O(\\sqrt n)"),i("em",[e._v("O")]),e._v("("),i("em",[e._v("n")]),e._v(") ("),i("strong",[e._v("square root time")]),e._v(");")]),e._v(" "),i("li",[e._v("O(n \\log n)"),i("em",[e._v("O")]),e._v("("),i("em",[e._v("n")]),e._v("log"),i("em",[e._v("n")]),e._v(") ("),i("strong",[e._v("log-linear time")]),e._v(");")]),e._v(" "),i("li",[e._v("O(n^k)"),i("em",[e._v("O")]),e._v("("),i("em",[e._v("n**k")]),e._v(") ("),i("strong",[e._v("polynomial time")]),e._v(");")]),e._v(" "),i("li",[e._v("O(n!)"),i("em",[e._v("O")]),e._v("("),i("em",[e._v("n")]),e._v("!) ("),i("strong",[e._v("factorial time)")]),e._v(".")])]),e._v(" "),i("p",[e._v("Now let's gather all the classes together and sort them from the best to the worst, so that you remember which ones are the most effective, and which ones you should stay away from.")]),e._v(" "),i("p",[i("img",{attrs:{src:"https://ucarecdn.com/a59bc4ff-df5e-460b-9e58-27e88e9ae228/",alt:"img"}})]),e._v(" "),i("h2",{attrs:{id:"calculating-complexity"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#calculating-complexity"}},[e._v("#")]),e._v(" Calculating complexity")]),e._v(" "),i("p",[e._v("Let's look at a simple example. You want to find the maximum of n"),i("em",[e._v("n")]),e._v(" numbers. You will probably decide to go through them and compare every new element with the maximum so far. You will make n"),i("em",[e._v("n")]),e._v(" comparisons, so the time complexity is O(n)"),i("em",[e._v("O")]),e._v("("),i("em",[e._v("n")]),e._v(").")]),e._v(" "),i("p",[e._v("However, algorithms are usually quite complex and consist of several steps, whose time complexity may belong to different time complexity classes from the list above. Therefore, to be able to calculate complexities by yourself, it is essential for you to get familiar with the basic properties of the Big O:")]),e._v(" "),i("ul",[i("li",[i("strong",[e._v("Ignore the constants.")]),e._v(" As we discussed above, while calculating complexities, we focus solely on the behavior of our algorithm with large input sizes. Therefore, repeating some steps a constant number of times does not affect the complexity. For example, if you traverse n"),i("em",[e._v("n")]),e._v(" elements 55 times, we say that the algorithm's time complexity is O(n)"),i("em",[e._v("O")]),e._v("("),i("em",[e._v("n")]),e._v("), and not O(5n)"),i("em",[e._v("O")]),e._v("(5"),i("em",[e._v("n")]),e._v("). Indeed, there is no significant difference between 1 000 000 000 and 5 000 000 000 operations performed by the algorithm. In either case, we conclude that it is relatively slow. Formally, we write c\\cdot O(n) = O(n)"),i("em",[e._v("c")]),e._v("⋅"),i("em",[e._v("O")]),e._v("("),i("em",[e._v("n")]),e._v(")="),i("em",[e._v("O")]),e._v("("),i("em",[e._v("n")]),e._v("). It is similar for the rest of the complexity classes.")]),e._v(" "),i("li",[i("strong",[e._v("Applying a procedure *"),i("em",[e._v("n*n**")]),e._v(" times.")]),e._v(" What if you need to go over n"),i("em",[e._v("n")]),e._v(" elements n"),i("em",[e._v("n")]),e._v(" times? It is not a constant anymore, as it depends on the input size. In this case, the time complexity becomes O(n^2)"),i("em",[e._v("O")]),e._v("("),i("em",[e._v("n")]),e._v("2). It's simple: you do n"),i("em",[e._v("n")]),e._v(" times an action proportional to n"),i("em",[e._v("n")]),e._v(", which means the result is proportional to n^2"),i("em",[e._v("n")]),e._v("2. In big O notation, we write it as n\\cdot O(n) = O(n^2)"),i("em",[e._v("n")]),e._v("⋅"),i("em",[e._v("O")]),e._v("("),i("em",[e._v("n")]),e._v(")="),i("em",[e._v("O")]),e._v("("),i("em",[e._v("n")]),e._v("2).")]),e._v(" "),i("li",[i("strong",[e._v("Smaller terms do not matter.")]),e._v(" Another common case is when after doing some actions, you need to do something else. For instance, you traverse n"),i("em",[e._v("n")]),e._v(" elements n"),i("em",[e._v("n")]),e._v(" times and then traverse n"),i("em",[e._v("n")]),e._v(" elements again. In this case, the complexity is still O(n^2)"),i("em",[e._v("O")]),e._v("("),i("em",[e._v("n")]),e._v("2). Additional n"),i("em",[e._v("n")]),e._v(" actions do not affect your complexity, which is proportional to n^2"),i("em",[e._v("n")]),e._v("2. In big O notation, it looks like this: O(n)+O(n^2) = O(n^2)"),i("em",[e._v("O")]),e._v("("),i("em",[e._v("n")]),e._v(")+"),i("em",[e._v("O")]),e._v("("),i("em",[e._v("n")]),e._v("2)="),i("em",[e._v("O")]),e._v("("),i("em",[e._v("n")]),e._v("2). All in all, always keep the largest term in Big O and forget about all others. It is rather easy to understand which terms are larger based on the order provided in the previous section. Naturally, a question arises: why is it correct to ignore the smaller terms? Let's illustrate the example above:")])]),e._v(" "),i("p",[i("img",{attrs:{src:"https://ucarecdn.com/27c7e5ef-eb2d-48ca-8a56-e5423589515a/",alt:"img"}})]),e._v(" "),i("p",[e._v("The images show that when the input size n"),i("em",[e._v("n")]),e._v(" is large, the graphs of n^2"),i("em",[e._v("n")]),e._v("2 and n^2+n"),i("em",[e._v("n")]),e._v("2+"),i("em",[e._v("n")]),e._v(" almost coincide (their growth rate is similar). As for n^2"),i("em",[e._v("n")]),e._v("2, for large n"),i("em",[e._v("n")]),e._v(" this value is considerably greater than n"),i("em",[e._v("n")]),e._v(", therefore adding n"),i("em",[e._v("n")]),e._v(" to it does not affect the value of the function much. This is why we can rightfully write O(n^2)"),i("em",[e._v("O")]),e._v("("),i("em",[e._v("n")]),e._v("2) instead of O(n^2+n)"),i("em",[e._v("O")]),e._v("("),i("em",[e._v("n")]),e._v("2+"),i("em",[e._v("n")]),e._v(").")]),e._v(" "),i("h2",{attrs:{id:"conclusion"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#conclusion"}},[e._v("#")]),e._v(" Conclusion")]),e._v(" "),i("p",[e._v("Big O notation is an essential instrument for algorithm performance evaluation. We can use it to assess both the time and the memory complexity. The greatest advantage of big O notation is that it classifies an algorithm rather than gives you a real running time in seconds or required memory in megabytes.")]),e._v(" "),i("p",[e._v("We should note that it is completely normal if you still find the concept of Big O a bit confusing. It is similar to reading the rules of a board game for the first time without actually having the board in front of you. As soon as you start playing, you will better realize the meaning of those rules. Analogously, in the following topics on algorithms, we will describe in detail how to calculate algorithm complexity. That will definitely lead to a better understanding of this topic as well. In a nutshell, we hope this topic hasn't demotivated you, on the contrary, you should be motivated and hungrier for more.")])])}),[],!1,null,null,null);t.default=n.exports}}]);