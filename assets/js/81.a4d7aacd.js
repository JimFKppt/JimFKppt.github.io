(window.webpackJsonp=window.webpackJsonp||[]).push([[81],{581:function(a,s,t){"use strict";t.r(s);var e=t(21),n=Object(e.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"introduction"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#introduction"}},[a._v("#")]),a._v(" Introduction")]),a._v(" "),t("p",[a._v("Imagine objects with complex structures. For example, you have a large dictionary or a list with a bunch of other values. You need to preserve such an object without losing its structure. In other words, you want to serialize it. It's also good if the format of serialization has a simple syntax and is human-readable. So, let's get acquainted with a famous data format called YAML.")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://ucarecdn.com/58b00b7f-42ac-4a85-8e5b-b30dcb015a8e/-/crop/1024x380/0,306/-/preview/",alt:"img"}})]),a._v(" "),t("p",[t("strong",[a._v("YAML")]),a._v(" is a recursive acronym for "),t("em",[a._v("YAML Ain't Markup Language")]),a._v("**.** It's a human-readable data serialization standard for all programming languages. It is commonly used for configuration files, and for storing and transferring data. It’s difficult to escape YAML if you’re doing anything related to software configuration. The usual extensions for YAML files are "),t("em",[a._v(".yaml")]),a._v(" and "),t("em",[a._v(".yml")]),a._v(".")]),a._v(" "),t("p",[a._v("Let's take a closer look at this language in order to appreciate all its simplicity and functionality. We'll go over basic types, structures, and syntax.")]),a._v(" "),t("h2",{attrs:{id:"basic-data-types"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#basic-data-types"}},[a._v("#")]),a._v(" Basic data types")]),a._v(" "),t("p",[a._v("YAML supports all essential data types like numbers, strings, booleans, etc. It recognizes some language-specific data types, such as dates, timestamps, and special numerical values. So, the list of basic YAML data types includes:")]),a._v(" "),t("ul",[t("li",[t("em",[a._v("integers")]),a._v(" like 15, 123")]),a._v(" "),t("li",[t("em",[a._v("strings")]),a._v(" like \"15\", 'Hello, YAML!', which may be enclosed either in double or single quotation marks")]),a._v(" "),t("li",[t("em",[a._v("floats")]),a._v(" like 15.033")]),a._v(" "),t("li",[t("em",[a._v("booleans")]),a._v(" (true or false)")]),a._v(" "),t("li",[t("em",[a._v("null type")]),a._v(" (null)")])]),a._v(" "),t("p",[a._v("YAML auto-detects the type of data, but users can specify the type they need using "),t("code",[a._v("!!")]),a._v(". For example, if you need to specify the string "),t("em",[a._v("yes")]),a._v(", you need to write "),t("code",[a._v("!!str yes")]),a._v(".")]),a._v(" "),t("p",[a._v("Now you know the basic data types in YAML. Let's figure out the structures and their syntax.")]),a._v(" "),t("h2",{attrs:{id:"maps"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#maps"}},[a._v("#")]),a._v(" Maps")]),a._v(" "),t("p",[a._v("Mapping consists of key-value pairs. For example:")]),a._v(" "),t("div",{staticClass:"language-yaml line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-yaml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("---")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("object")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" Book\n\n"),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("metadata")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("  \n  "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("name")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" Three Men in a Boat\n  "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("author")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" Jerome K Jerome \n  "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("genre")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" humorous account\n  \n"),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("published")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("year")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1889")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("country")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" United Kingdom\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br")])]),t("p",[a._v("The first line is a separator. It's optional unless you’re trying to define multiple structures in a single file. Then there is a set of "),t("code",[a._v("key: value")]),a._v(" pairs as a block. Pairs are called "),t("em",[a._v("scalars")]),a._v(". The syntax is clean and simple; the usual format symbols, such as braces, square brackets, closing tags, or quotation marks, are unnecessary. Scalars are colon-separated, and there should be a space between the map elements. Note, that In YAML indentation is always done with spaces, not tabs.")]),a._v(" "),t("h2",{attrs:{id:"lists"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#lists"}},[a._v("#")]),a._v(" Lists")]),a._v(" "),t("p",[a._v("The lists in YAML are sequences of objects, as the example below shows.")]),a._v(" "),t("div",{staticClass:"language-yaml line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-yaml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("animals")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v(" cat\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v(" dog\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v(" bird\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br")])]),t("p",[a._v("The number of items in the list is not limited. Each item on the list should start with a dash. Elements are separated from the parent with spaces; after a parent name there should be a colon. The example above represents a block style. In flow style, the list looks like this: "),t("code",[a._v("[cat, dog, bird]")]),a._v(".")]),a._v(" "),t("p",[a._v("These are the structures. Next, we'll learn how to combine them.")]),a._v(" "),t("h2",{attrs:{id:"combination"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#combination"}},[a._v("#")]),a._v(" Combination")]),a._v(" "),t("p",[a._v("Maps and lists can be combined, so that one may have maps of maps, or maps of lists, or lists of lists, or lists of maps. Let's consider an example of a to-do map, where keys are weekends and values are lists of things to do during each day:")]),a._v(" "),t("div",{staticClass:"language-yaml line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-yaml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("weekend")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("saturday")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" \n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v(" order cleaning\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v(" order a pizza\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v(" watch new series\n  "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("sunday")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" \n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v(" go to yoga \n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v(" hang out with a friend \n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br")])]),t("p",[a._v("Also, if you need to denote a string that preserves newlines instead of a list, use "),t("code",[a._v("|")]),a._v(" character:")]),a._v(" "),t("div",{staticClass:"language-yaml line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-yaml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("saturday")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("|")]),t("span",{pre:!0,attrs:{class:"token scalar string"}},[a._v("\n  order cleaning\n  order a pizza\n  watch new series")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br")])]),t("p",[a._v("Great, now you know how to use structures. The last important thing we should mention here is comments.")]),a._v(" "),t("h2",{attrs:{id:"comments"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#comments"}},[a._v("#")]),a._v(" Comments")]),a._v(" "),t("p",[a._v("One may add comments to the YAML file. Comments start with "),t("code",[a._v("#")]),a._v(" and go till newline. They can be made anywhere in the line, for example:")]),a._v(" "),t("div",{staticClass:"language-yaml line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-yaml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# The comment")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("metadata")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# this is metadata")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("name")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" Three Men in a Boat\n  "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("author")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" Jerome K Jerome\n  "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("genre")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" humorous account\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br")])]),t("h2",{attrs:{id:"conclusion"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#conclusion"}},[a._v("#")]),a._v(" Conclusion")]),a._v(" "),t("p",[a._v("To sum up, we've discussed that")]),a._v(" "),t("ul",[t("li",[a._v("YAML is a human-readable text-based format that lets you easily specify configuration-type information")]),a._v(" "),t("li",[a._v("YAML supports integers, strings, floats, booleans, and null data types")]),a._v(" "),t("li",[a._v("there are two data structures in YAML, lists and maps, that can also be combined")]),a._v(" "),t("li",[a._v("comments can be added to YAML file")])]),a._v(" "),t("p",[a._v("Let's get to the tasks!")])])}),[],!1,null,null,null);s.default=n.exports}}]);