(window.webpackJsonp=window.webpackJsonp||[]).push([[125],{623:function(e,t,a){"use strict";a.r(t);var o=a(21),n=Object(o.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"code-design"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#code-design"}},[e._v("#")]),e._v(" Code design")]),e._v(" "),a("p",[e._v("If you are reading this, you must be really interested in programming. It doesn't matter whether you are an experienced developer, just starting your career, or still working on the basics; what really matters is that you are curious, so welcome.")]),e._v(" "),a("p",[e._v("To begin with, let's talk about "),a("strong",[e._v("code design*.*")]),e._v(" In general, the design of your code is about expressing your ideas clearly to your teammates, colleagues, and clients. We can compare code to text: if you put the lines in the right order and make the structure clear, it will be much easier to explain and understand the text later. From an engineering point of view, your code is "),a("strong",[e._v("well-designed")]),e._v(" if you can agree with the following statements:")]),e._v(" "),a("p",[e._v("\\1) When you make a small change, it "),a("em",[e._v("does not")]),e._v(" produce a ripple effect elsewhere in the code.\n\\2) Your code is "),a("em",[e._v("easy")]),e._v(" to reuse.\n\\3) It is "),a("em",[e._v("easy")]),e._v(" to maintain your code after release.")]),e._v(" "),a("h2",{attrs:{id:"design-patterns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#design-patterns"}},[e._v("#")]),e._v(" Design patterns")]),e._v(" "),a("p",[e._v("In application development, the design of code has to "),a("strong",[e._v("match the problem")]),e._v(" and be "),a("strong",[e._v("general")]),e._v(" enough in order to fit all the requirements that may arise in the future. Everyone tries to find more elegant, suitable and flexible solutions that can also be "),a("strong",[e._v("reused")]),e._v(". Here is where "),a("strong",[e._v("design patterns")]),e._v(" come into play: these are repeatable solutions to common problems that developers face. Design patterns even have names! For example, if you want to confine yourself to just one instance of a class, "),a("em",[e._v("Singleton")]),e._v(" pattern is going to be the best choice; if you see family relations between objects and you want to encapsulate creational processes, you should use "),a("em",[e._v("AbstractFactory")]),e._v(", etc.")]),e._v(" "),a("p",[e._v("As a rule, examples of well-structured object-oriented architecture make use of patterns a lot. When a suitable pattern is used, it tells us that the developer has really paid attention to typical interactions between elements in the system. As a result, the architecture of an application becomes easier to understand.")]),e._v(" "),a("p",[e._v("Being so useful, design patterns have made it onto many programmers' bookshelves: one of the most famous examples is the book "),a("em",[a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Design_Patterns_(book)",target:"_blank",rel:"noopener noreferrer"}},[e._v("Design Patterns: Elements of Reusable Object-Oriented Software"),a("OutboundLink")],1),e._v(".")]),e._v(' You probably heard about its authors, "Gang of Four", which is frequently abbreviated as "GoF". Today it is considered one of the classic books on software design and programming. You may check it out to deepen your understanding or proceed directly to practical learning here.')]),e._v(" "),a("p",[e._v("Note that in this topic we will only consider "),a("em",[e._v("object-oriented")]),e._v(" design patterns.")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://ucarecdn.com/e744e11f-39b7-4f17-ae9d-82ec51812738/",alt:"img"}})]),e._v(" "),a("h2",{attrs:{id:"software-design-patterns-and-related-concepts"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#software-design-patterns-and-related-concepts"}},[e._v("#")]),e._v(" Software design patterns and related concepts")]),e._v(" "),a("p",[e._v("A great thing about patterns is that they help you not to waste your time reinventing the wheel so you can spend it on developing cool features instead. The structure of design patterns is strict: describe the problem, the solution, when to apply the solution, and its consequences. Theoretically, you can combine a few patterns and create your own "),a("em",[e._v("monster pattern")]),e._v(" that contains, for example, "),a("em",[e._v("Builder, Abstract Factory")]),e._v(" and "),a("em",[e._v("Decorator")]),e._v(" simultaneously. However, as you will see from the following topics, it's better to avoid such monsters because patterns have already been well-grouped for you. In other words, don't get too excited, it's really better to use them one at a time.")]),e._v(" "),a("p",[e._v("Using patterns does not require any specific programming language skills or striking imagination. Patterns are also language-independent: even though they can be implemented differently in different languages, the general idea of each pattern is common for all of them. That means that it's possible for you to speak the language of architecture with your colleagues even if they work with different technologies.")]),e._v(" "),a("h2",{attrs:{id:"why-should-i-know-design-patterns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#why-should-i-know-design-patterns"}},[e._v("#")]),e._v(" Why should I know design patterns?")]),e._v(" "),a("p",[e._v("Here is a list of quite convincing reasons to get familiar with design patterns:")]),e._v(" "),a("ul",[a("li",[e._v("Patterns provide "),a("strong",[e._v("tested and commonly used")]),e._v(" "),a("strong",[e._v("solution templates")]),e._v(" for design problems; you don't have to invent anything!")]),e._v(" "),a("li",[e._v("Patterns improve "),a("strong",[e._v("flexibility and maintainability")]),e._v(" of object-oriented systems, which makes it easier to react to changing requirements.")]),e._v(" "),a("li",[e._v("Patterns can "),a("strong",[e._v("speed up the development process")]),e._v(".")]),e._v(" "),a("li",[e._v("Patterns are a "),a("strong",[e._v("universal")]),e._v(" "),a("strong",[e._v("vocabulary")]),e._v(" that allows developers to describe a program design using a set of well-known identifiable concepts.")]),e._v(" "),a("li",[e._v("Patterns are "),a("strong",[e._v("often used in standard libraries and frameworks")]),e._v(".")]),e._v(" "),a("li",[e._v("You can find patterns in the source codes of many applications and "),a("strong",[e._v("quickly understand how they work")]),e._v(", instead of reading thousands of lines of code.")])]),e._v(" "),a("h2",{attrs:{id:"caveats"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#caveats"}},[e._v("#")]),e._v(" Caveats")]),e._v(" "),a("p",[e._v("In order to achieve flexibility, design patterns usually introduce additional levels of indirectness, which in some cases may complicate the resulting designs and hurt application performance. In other words, even though patterns are supposed to make things easier for you, they may also become an unnecessary complication if applied unwisely. Beginner developers may try to apply patterns everywhere, even in situations where a simpler code would do just fine. "),a("a",{attrs:{href:"https://taskinoor.wordpress.com/2011/09/21/the-abuse-of-design-patterns-in-writing-a-hello-world-program/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Look"),a("OutboundLink")],1),e._v(' how design patterns can complicate even the simplest "Hello, World" program.')]),e._v(" "),a("p",[e._v("To avoid misusing the patterns, you should apply them wisely and be able to correctly adapt them to your problem and language.")]),e._v(" "),a("h2",{attrs:{id:"conclusion"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#conclusion"}},[e._v("#")]),e._v(" Conclusion")]),e._v(" "),a("p",[e._v('When you master the principles of working with patterns so that after successfully applying them you scream "Eureka!" without any doubt in your thoughts, your perception of object-oriented programming will probably change once and for all. In the following topics, you will learn about '),a("strong",[e._v("Creational")]),e._v(", "),a("strong",[e._v("Structural")]),e._v(" and "),a("strong",[e._v("Behavioral")]),e._v(" design patterns. Be concentrated and attentive: these matters are quite advanced. Happy coding!")])])}),[],!1,null,null,null);t.default=n.exports}}]);