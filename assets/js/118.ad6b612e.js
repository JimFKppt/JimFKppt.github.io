(window.webpackJsonp=window.webpackJsonp||[]).push([[118],{617:function(s,a,t){"use strict";t.r(a);var e=t(21),n=Object(e.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("p",[s._v("As you already know, pseudocode is the way to show the structure of the algorithm without any pictures or explanations. Now, it is important to find out how our custom pseudocode looks like.")]),s._v(" "),t("p",[s._v('In this topic, we will agree upon several rules: how to assign a variable, how to print the output, how to create a simple "if-else" branch. We hope that you already know some programming languages, so it should be easy for you to learn how to read our custom pseudocode. And remember: the more you look at the pseudocode, the easier it is to understand it!')]),s._v(" "),t("h2",{attrs:{id:"variables-and-assigning"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#variables-and-assigning"}},[s._v("#")]),s._v(" Variables and assigning")]),s._v(" "),t("p",[s._v("Note that every line in our algorithm is one action. Actions are performed sequentially.")]),s._v(" "),t("p",[s._v("Let's start learning our language with basic constructions such as "),t("strong",[s._v("variables")]),s._v(" and "),t("strong",[s._v("assigning")]),s._v(". Look at the example below:")]),s._v(" "),t("div",{staticClass:"language-python line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[s._v("a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("93")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("Here, we create a variable named "),t("code",[s._v("a")]),s._v(" and assign an integer number "),t("code",[s._v("93")]),s._v(" to it. The syntax is pretty simple: the name of the variable is on the left, the value is on the right, the assignment operator is in between. Let's look at some other examples:")]),s._v(" "),t("div",{staticClass:"language-python line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[s._v("b "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.14")]),s._v("\ns "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello"')]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("Here, we assign a floating-point number "),t("code",[s._v("3.14")]),s._v(" to the variable "),t("code",[s._v("b")]),s._v(" and the string "),t("code",[s._v("Hello")]),s._v(" to the variable "),t("code",[s._v("s")]),s._v(". For simplicity, we don't use types: we don't declare that the variable "),t("code",[s._v("s")]),s._v(" is a string or the variable "),t("code",[s._v("b")]),s._v(" is a floating-point number.")]),s._v(" "),t("p",[s._v("Sometimes, there is a need to initialize several variables together. To do that, we will use the following syntax:")]),s._v(" "),t("div",{staticClass:"language-python line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[s._v("a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\nb "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"text"')]),s._v("\nc "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5.5")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("Here, the variable "),t("code",[s._v("a")]),s._v(" is equal to "),t("code",[s._v("3")]),s._v(", the variable "),t("code",[s._v("b")]),s._v(" is the string "),t("code",[s._v("text")]),s._v(", and the variable "),t("code",[s._v("c")]),s._v(" is "),t("code",[s._v("5.5")]),s._v(".")]),s._v(" "),t("p",[s._v("If you need to change the value of a variable, you can assign a different value to it:")]),s._v(" "),t("div",{staticClass:"language-python line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[s._v("a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\na "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("First, you assign "),t("code",[s._v("3")]),s._v(" to the variable "),t("code",[s._v("a")]),s._v(". The next action assigns "),t("code",[s._v("5")]),s._v(" to "),t("code",[s._v("a")]),s._v(". Hence, after this snippet "),t("code",[s._v("a")]),s._v(" is equal to "),t("code",[s._v("5")]),s._v(".")]),s._v(" "),t("p",[s._v("Also, you can assign a value of one variable to another variable:")]),s._v(" "),t("div",{staticClass:"language-python line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[s._v("a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.5")]),s._v("\nb "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" a\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("First, you assign "),t("code",[s._v("1.5")]),s._v(" to the variable "),t("code",[s._v("a")]),s._v(". The next action assigns the value of "),t("code",[s._v("a")]),s._v(" to the variable "),t("code",[s._v("b")]),s._v(". After this snippet, "),t("code",[s._v("a")]),s._v(" is equal to "),t("code",[s._v("1.5")]),s._v(", and "),t("code",[s._v("b")]),s._v(" is also "),t("code",[s._v("1.5")]),s._v(".")]),s._v(" "),t("h2",{attrs:{id:"input-and-output-data"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#input-and-output-data"}},[s._v("#")]),s._v(" Input and output data")]),s._v(" "),t("p",[s._v("In our algorithms, we will typically avoid input and output. When you describe how an algorithm works, it is irrelevant how you get the data and what happens next. However, if we need some external data, we will use this:")]),s._v(" "),t("div",{staticClass:"language-python line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[s._v("a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("input")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("//")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("is")]),s._v(" a number\nb "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("input")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("//")]),s._v(" b "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("is")]),s._v(" a string\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("Note that we don't care about the input format. Besides, "),t("code",[s._v("a")]),s._v(" and "),t("code",[s._v("b")]),s._v(" can be not only numbers or strings. You can also read a table or a sequence of values. However, make sure to add a comment for the reader.")]),s._v(" "),t("p",[s._v("Some algorithms require sending data to the screen. We will use the following syntax for this task:")]),s._v(" "),t("div",{staticClass:"language-python line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[s._v("s "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("Here, we assign a string "),t("code",[s._v("Hello")]),s._v(" to the variable "),t("code",[s._v("s")]),s._v(". Then, in order to print it, we use the "),t("code",[s._v("print")]),s._v(" keyword with the variable "),t("code",[s._v("s")]),s._v(" in parentheses. Quite simple and natural.")]),s._v(" "),t("h2",{attrs:{id:"comments"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#comments"}},[s._v("#")]),s._v(" Comments")]),s._v(" "),t("p",[s._v("Another important thing is how to write "),t("strong",[s._v("comments")]),s._v(". A comment is not a part of a program, it's just a text you leave for yourself or other readers. We indicate comments with the "),t("code",[s._v("//")]),s._v(". For example:")]),s._v(" "),t("div",{staticClass:"language-python line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("//")]),s._v(" this "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("is")]),s._v(" a comment\na "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("//")]),s._v(" assigning "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" to the variable a\nb "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("42")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("//")]),s._v(" another assignment\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("You can write comments either on a separate line or right after statements.")]),s._v(" "),t("h2",{attrs:{id:"arithmetic-operations"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#arithmetic-operations"}},[s._v("#")]),s._v(" Arithmetic operations")]),s._v(" "),t("p",[s._v("Almost any program requires processing "),t("strong",[s._v("numerical data")]),s._v(". For that, we use arithmetic operations. In our pseudocode, they look like this:")]),s._v(" "),t("div",{staticClass:"language-python line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[s._v("a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),s._v("\nb "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("sum")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" b   "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("//")]),s._v(" addition"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("sum")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("is")]),s._v(" equal to "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),s._v("\ndif "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" b   "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("//")]),s._v(" subtraction"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" dif "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("is")]),s._v(" equal to "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\n \nprod "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" b  "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("//")]),s._v(" multiplication"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" prod "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("is")]),s._v(" equal to "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v("\nquot "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" b  "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("//")]),s._v(" division"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" quot "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("is")]),s._v(" equal to "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.5")]),s._v("\nrem "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" a mod b   "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("//")]),s._v(" modulo division"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" rem "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("is")]),s._v(" equal to "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\nquot_int "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" a div b "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("//")]),s._v(" integer division"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" quot_int "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("is")]),s._v(" equal to "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("p",[s._v("To perform an arithmetic operation with two numbers, we write the first one on the left, the second one on the right, and the operator in between. If we want to assign the result to one of the variables, we use the following syntax:")]),s._v(" "),t("div",{staticClass:"language-python line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[s._v("a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\nb "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\n\na "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" b\na "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" b  \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("The same goes for multiplication and division.")]),s._v(" "),t("h2",{attrs:{id:"relational-and-logical-operators"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#relational-and-logical-operators"}},[s._v("#")]),s._v(" Relational and logical operators")]),s._v(" "),t("p",[s._v("You can also use these relational operators in your pseudocode:")]),s._v(" "),t("div",{staticClass:"language-python line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[s._v("a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" b "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("//")]),s._v(" a equal to b\na "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" b "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("//")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("is")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("not")]),s._v(" equal to b\na "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" b  "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("//")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("is")]),s._v(" less than b\na "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" b "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("//")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("is")]),s._v(" less "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("or")]),s._v(" equal to b\na "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" b  "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("//")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("is")]),s._v(" more than b\na "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">=")]),s._v(" b "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("//")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("is")]),s._v(" more "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("or")]),s._v(" equal to b\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("All these operations return "),t("code",[s._v("true")]),s._v(" or "),t("code",[s._v("false")]),s._v(".")]),s._v(" "),t("p",[s._v("In case of a complex condition, you can use logical operators. The "),t("code",[s._v("and")]),s._v(" returns "),t("code",[s._v("true")]),s._v(" only if both conditions are true. The "),t("code",[s._v("or")]),s._v(" returns "),t("code",[s._v("false")]),s._v(" only if both conditions are false. The "),t("code",[s._v("not")]),s._v(" just reverses a value. It works this way:")]),s._v(" "),t("div",{staticClass:"language-python line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[s._v("true "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("and")]),s._v(" true "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" true\ntrue "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("and")]),s._v(" false "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" false\nfalse "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("and")]),s._v(" true "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" false\nfalse "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("and")]),s._v(" false "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" false\n\ntrue "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("or")]),s._v(" true "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" true\ntrue "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("or")]),s._v(" false "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" true\nfalse "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("or")]),s._v(" true "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" true\nfalse "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("or")]),s._v(" false "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" false\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("not")]),s._v(" true "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" false\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("not")]),s._v(" false "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" true\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br")])]),t("h2",{attrs:{id:"conditional-operators"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#conditional-operators"}},[s._v("#")]),s._v(" Conditional operators")]),s._v(" "),t("p",[s._v("Another commonly used type of construction is conditional operators. Let's have a look at an example:")]),s._v(" "),t("div",{staticClass:"language-python line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[s._v("a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" then\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("Here, we create a variable "),t("code",[s._v("a")]),s._v(" and initialize it with a number "),t("code",[s._v("3")]),s._v(". Then, we check if "),t("code",[s._v("a")]),s._v(" is less than "),t("code",[s._v("5")]),s._v(" and if it is true, we print it to the screen. The syntax is clear: the "),t("code",[s._v("if")]),s._v(" keyword is followed by a condition, and the next line gets executed only if the condition is true. If you need to combine several conditions, you can use "),t("code",[s._v("and")]),s._v(", "),t("code",[s._v("or")]),s._v(", and "),t("code",[s._v("not")]),s._v(" operators:")]),s._v(" "),t("div",{staticClass:"language-python line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[s._v("a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" \nb "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("and")]),s._v(" b "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("or")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("not")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("and")]),s._v(" b "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" then\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("To avoid ambiguity, we may need to wrap the conditions into parentheses, like in the example above.")]),s._v(" "),t("p",[s._v("Now, you can put an "),t("code",[s._v("else")]),s._v(" branch after the "),t("code",[s._v("if")]),s._v(" condition. This branch gets executed if the condition is "),t("code",[s._v("false")]),s._v(". Below you can see an example with the "),t("code",[s._v("if-else")]),s._v(" construction:")]),s._v(" "),t("div",{staticClass:"language-python line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[s._v("a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" then\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"positive"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"negative or zero"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("//")]),s._v(" prints this\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("Besides, you can use an "),t("code",[s._v("elif")]),s._v(" branch. The operator "),t("code",[s._v("elif")]),s._v(" is just an abbreviation for "),t("code",[s._v("else if")]),s._v(". The program checks this condition if the first one is false:")]),s._v(" "),t("div",{staticClass:"language-python line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[s._v("a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" then            "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("//")]),s._v(" false\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"positive"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("elif")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" then        "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("//")]),s._v(" checks this \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"zero"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"negative"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("//")]),s._v(" output\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("p",[s._v("Here, we check whether "),t("code",[s._v("a")]),s._v(" is more than 0, then we check whether it equals 0 using the "),t("code",[s._v("elif")]),s._v(" branch, and finally we execute the last "),t("code",[s._v("else")]),s._v(" branch. Below you can see the same code without the "),t("code",[s._v("elif")]),s._v(" branch:")]),s._v(" "),t("div",{staticClass:"language-python line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[s._v("a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" then              \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"positive"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" then          \n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"zero"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"negative"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("h2",{attrs:{id:"summary"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#summary"}},[s._v("#")]),s._v(" Summary")]),s._v(" "),t("p",[s._v("In this topic, we started introducing one possible version of pseudocode. We considered such constructions as variables, assigning, arithmetic operations, and others. These basics are already enough to express some algorithmic ideas. However, they don't cover all the necessary concepts that some sophisticated algorithms might require. We will have a closer look at the rest of such constructions in the following topic.")]),s._v(" "),t("p",[s._v("And now, let's have some practice!")])])}),[],!1,null,null,null);a.default=n.exports}}]);